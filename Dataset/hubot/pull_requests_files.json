{"5": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/6ea4c892a1bba397d95842ba2b8cbd89684ffbc9/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/6ea4c892a1bba397d95842ba2b8cbd89684ffbc9/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=6ea4c892a1bba397d95842ba2b8cbd89684ffbc9", "filename": "README.md", "sha": "9a7d92178deea23d7d1dd1a98e12331138c741d0", "additions": 3, "patch": "@@ -6,6 +6,9 @@ This is a version of GitHub's Campfire bot, hubot.  He's pretty cool.\n Getting Your Own\n ================\n \n+Make sure you have [node.js](http://nodejs.org/) and [npm](http://npmjs.org/) installed. Clone this repository, and run these commands:\n+\n+    % npm install\n     % hubot -c ~/eptics\n \n Then follow the instructions in the ~/eptics folder", "changes": 3}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6ea4c892a1bba397d95842ba2b8cbd89684ffbc9/src/templates/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/6ea4c892a1bba397d95842ba2b8cbd89684ffbc9/src/templates/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/Procfile?ref=6ea4c892a1bba397d95842ba2b8cbd89684ffbc9", "filename": "src/templates/Procfile", "sha": "0b44a4f71251577bf781207d255d7f2e7ebf5d1c", "additions": 1, "patch": "@@ -1 +1 @@\n-web: node_modules/coffee-script/bin/coffee node_modules/hubot/bin/hubot -a campfire\n+web: node_modules/coffee-script/bin/coffee node_modules/hubot/bin/hubot -a campfire -n BOT_NAME_HERE", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6ea4c892a1bba397d95842ba2b8cbd89684ffbc9/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/6ea4c892a1bba397d95842ba2b8cbd89684ffbc9/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=6ea4c892a1bba397d95842ba2b8cbd89684ffbc9", "filename": "src/templates/README.md", "sha": "75478f8fc758950db613a1deca294518ba0657ab", "additions": 1, "patch": "@@ -12,7 +12,7 @@ Deployment\n     % git push heroku master\n     % heroku ps:scale web=1\n \n-Hubot needs four environmental variables set to run and to keep him\n+You'll need to edit the `Procfile` to say what the bot's name is. Hubot also needs four environmental variables set to run and to keep him\n running on heroku.\n \n Campfire Variables", "changes": 2}], "6": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/80088f2534753d815e0de6c76799222235cc178f/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/80088f2534753d815e0de6c76799222235cc178f/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=80088f2534753d815e0de6c76799222235cc178f", "filename": "package.json", "sha": "21d0fee5bc4a619e651785d8575b63369a39757d", "additions": 2, "patch": "@@ -18,7 +18,8 @@\n     \"coffee-script\": \"1.1.1\",\n     \"optparse\": \"1.0.1\",\n     \"scoped-http-client\": \"0.9.0\",\n-    \"irc\": \"0.2\"\n+    \"irc\": \"0.2\",\n+    \"imap\": \"0.2.5\"\n   },\n \n   \"directories\":  {", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/80088f2534753d815e0de6c76799222235cc178f/src/hubot/email.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/80088f2534753d815e0de6c76799222235cc178f/src/hubot/email.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/email.coffee?ref=80088f2534753d815e0de6c76799222235cc178f", "filename": "src/hubot/email.coffee", "sha": "1d66689115a63f2f626634d3cb35b10758299ea8", "additions": 143, "patch": "@@ -0,0 +1,143 @@\n+Robot           = require '../robot'\n+ImapConnection  = require('imap').ImapConnection\n+EventEmitter    = require(\"events\").EventEmitter\n+util            = require('util')\n+\n+CRLF = \"\\r\\n\"\n+\n+class Email extends Robot\n+  run: ->\n+    self = @\n+\n+    @username = process.env.HUBOT_EMAIL_USERNAME\n+    @password = process.env.HUBOT_EMAIL_PASSWORD\n+\n+    imap = new ImapBot\n+      username: @username\n+      password: @password\n+      host:     process.env.HUBOT_IMAP_HOST\n+      port:     process.env.HUBOT_IMAP_PORT\n+      secure:   process.env.HUBOT_IMAP_SECURE && true\n+      mailbox:  process.env.HUBOT_MAILBOX || 'Inbox'\n+\n+    imap.listen (email) ->\n+      console.log email\n+\n+    imap.connect()\n+\n+exports.Email = Email\n+\n+class ImapBot extends EventEmitter\n+  constructor: (options) ->\n+    @username = options.username\n+    @password = options.password\n+    @host     = options.host\n+    @port     = options.port\n+    @secure   = options.secure\n+    @mailbox  = options.mailbox\n+\n+    @imap = new ImapConnection\n+      username: @username\n+      password: @password\n+      host:     @host\n+      port:     (Number) @port\n+      secure:   @secure\n+\n+  connect: (callback) ->\n+    @imap.connect (err) =>\n+      throw err if err\n+\n+      @open()\n+\n+  open: ->\n+    @imap.openBox @mailbox, (err) =>\n+      throw err if err\n+      @imap.on 'error', (err) -> throw err\n+      @imap.on 'mail', @recieve\n+\n+  recieve: =>\n+    @imap.search [ 'UNSEEN' ], (_, ids) =>\n+      @fetch ids...\n+\n+  fetch: (ids...) ->\n+    @fetchHeaders ids, (msg) =>\n+      @fetchBody msg, (email) ->\n+        console.log(email)\n+\n+  fetchHeaders: (ids, callback) ->\n+    fetch = @imap.fetch ids, markSeen: true\n+\n+    fetch.on 'message', (msg) ->\n+      msg.on 'end', -> callback(msg)\n+\n+  fetchBody: (headerMsg, callback) ->\n+    fetch = @imap.fetch headerMsg.id,\n+      request:\n+        headers:  false\n+        body:     true\n+\n+    fetch.on 'message', (bodyMsg) ->\n+      message = new Message headerMsg, bodyMsg\n+\n+      bodyMsg.on 'data', (chunk) ->\n+        message.recieveData(chunk)\n+\n+      bodyMsg.on 'end', ->\n+        message.endData ->\n+          console.log(util.inspect(message))\n+\n+  listen: (callback) ->\n+    @imap.on 'Email', (mail...) ->\n+      console.log(mail)\n+\n+class Message\n+  constructor: (headerMsg, bodyMsg) ->\n+    @headerMsg  = headerMsg\n+    @bodyMsg    = bodyMsg\n+\n+    @rawBody  = ''\n+    @buffer   = ''\n+    @state    = 'INIT'\n+\n+  recieveData: (buff) -> @buffer += buff.toString('ascii')\n+\n+  endData: (callback) ->\n+    @rawBody = @buffer.toString()\n+    @parse(callback)\n+\n+  parse: (callback) ->\n+    while @buffer\n+      switch @state\n+        when 'INIT'     then @readBoundry()\n+        when 'HEADERS'  then @readHeaders()\n+        when 'BODY'     then @readBody()\n+        when 'FIN'      then @readFinish(callback)\n+\n+  readBoundry: () ->\n+    throw \"Boundary Missing\" if @buffer.indexOf(CRLF) == -1\n+\n+    lines     = @buffer.split(CRLF)\n+    @boundary = lines.shift()\n+    @buffer   = lines.join(CRLF)\n+\n+    @state = 'HEADERS'\n+\n+  readHeaders: () ->\n+    throw \"Header(s) Missing\" if @buffer.indexOf(CRLF + CRLF) == -1\n+\n+    # throw away the body headers for now\n+    [_, parts...] = @buffer.split(CRLF + CRLF)\n+    @buffer = parts.join(CRLF + CRLF)\n+\n+    @state = 'BODY'\n+\n+  readBody: () ->\n+    throw \"Plain Body Missing\" if @buffer.indexOf(@boundary) == -1\n+\n+    @body = @buffer.split(@boundary, 1)[0]\n+\n+    @state = 'FIN'\n+\n+  readFinish: (callback) ->\n+    @buffer = ''\n+    callback()", "changes": 143}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/80088f2534753d815e0de6c76799222235cc178f/test/email_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/80088f2534753d815e0de6c76799222235cc178f/test/email_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/email_test.coffee?ref=80088f2534753d815e0de6c76799222235cc178f", "filename": "test/email_test.coffee", "sha": "e3ba413066b8e41ef78a8021acf58873be220265", "additions": 12, "patch": "@@ -0,0 +1,12 @@\n+Robot = require '../src/robot'\n+Path  = require 'path'\n+\n+Hubot = require(\"../src/hubot/email\").Email\n+\n+scriptsPath = Path.resolve \"./src/hubot/scripts\"\n+\n+robot = new Hubot scriptsPath, 'Hewbot'\n+\n+robot.load scriptsPath\n+\n+robot.run()", "changes": 12}], "12": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f5c2bedcaeb70b7276efb7b2dbe27779cf0a3058/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/f5c2bedcaeb70b7276efb7b2dbe27779cf0a3058/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=f5c2bedcaeb70b7276efb7b2dbe27779cf0a3058", "filename": "bin/hubot", "sha": "58e327073d3a2494218dd40ce60698cff48e3b16", "additions": 2, "patch": "@@ -55,6 +55,8 @@ else\n       Hubot = require(\"hubot/irc\").IrcBot\n     when \"campfire\"\n       Hubot = require(\"hubot/campfire\").Campfire\n+    when \"groupme\"\n+      Hubot = require(\"hubot/groupme\").GroupMe\n     else\n       Hubot = require(\"hubot/shell\").Shell\n ", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f5c2bedcaeb70b7276efb7b2dbe27779cf0a3058/src/hubot/groupme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f5c2bedcaeb70b7276efb7b2dbe27779cf0a3058/src/hubot/groupme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/groupme.coffee?ref=f5c2bedcaeb70b7276efb7b2dbe27779cf0a3058", "filename": "src/hubot/groupme.coffee", "sha": "6a238ad5009fee133f9b52394a18a310481da5e5", "additions": 121, "patch": "@@ -0,0 +1,121 @@\n+Robot = require 'robot'\n+HTTP  = require 'http'\n+HTTPS = require 'https'\n+URL   = require 'url'\n+\n+class GroupMe extends Robot\n+  send: (user, strings...) ->\n+    strings.forEach (str) =>\n+      if str.match(/(png|jpg)$/i)\n+        @upload_image str, (url) =>\n+          @send_message picture_url: url\n+      else\n+        @send_message text:str\n+\n+  reply: (user, strings...) ->\n+    strings.forEach (str) =>\n+      @send user, \"#{user.name}: #{str}\"\n+\n+  run: ->\n+    @room_id = process.env.HUBOT_GROUPME_ROOM\n+    @token   = process.env.HUBOT_GROUPME_TOKEN\n+\n+    @timer = setInterval =>\n+      @fetch_messages (messages) =>\n+        for msg in messages\n+          @last_id = msg.id\n+\n+          if msg.text and (msg.created_at * 1000) > new Date().getTime() - 5*1000\n+            console.log \"#{msg.name}: #{msg.text}\"\n+            @receive new Robot.Message msg.name, msg.text\n+    , 1500\n+\n+  upload_image: (url, cb) ->\n+    console.log \"upload: #{url}\"\n+    uri = URL.parse url\n+\n+    options =\n+      agent: false\n+\n+      host: uri.hostname\n+      port: uri.port || 80\n+      path: uri.pathname + (uri.search || '')\n+\n+    request = (if uri.protocol == 'http:' then HTTP else HTTPS).request options, (response) =>\n+      response.setEncoding('binary')\n+      data = ''\n+      response.on 'data', (chunk)-> data += chunk\n+      response.on 'end', =>\n+        boundary = '-----AaB03x'\n+\n+        multipartBody =\n+          \"--#{boundary}\\r\\n\" +\n+          \"Content-Type: image/jpeg\\r\\n\" +\n+          \"Content-Transfer-Encoding: binary\\r\\n\" +\n+          \"Content-Disposition: form-data; name=\\\"Filedata\\\"; filename=\\\"image.jpg\\\"\\r\\n\\r\\n\" +\n+          new Buffer(data) +\n+          \"\\r\\n--#{boundary}--\"\n+\n+        options =\n+          agent: false\n+          host: 'groupme-image-service.heroku.com'\n+          port: 80\n+          path: '/images'\n+          method: 'POST'\n+          headers:\n+            'Content-Type': 'multipart/form-data; boundary='+boundary\n+            'Content-Length': multipartBody.length\n+\n+        request = HTTP.request options, (response) =>\n+          data = ''\n+          response.on 'data', (chunk)-> data += chunk\n+          response.on 'end', ->\n+            json = JSON.parse(data)\n+            if json.payload\n+              cb(json.payload.picture_url)\n+        request.end(multipartBody, 'binary')\n+    request.end()\n+\n+  send_message: (msg) ->\n+    msg.name = 'Hubot'\n+    json = JSON.stringify(message: msg)\n+\n+    options =\n+      agent: false\n+      host: 'v2.groupme.com'\n+      port: 80\n+      method: 'POST'\n+      path: \"/groups/#{@room_id}/messages?token=#{@token}\"\n+      headers:\n+        'Content-Length': json.length\n+        'Content-Type': 'application/json'\n+\n+    request = HTTP.request options, (response) ->\n+      data = ''\n+      response.on 'data', (chunk)-> data += chunk\n+      response.on 'end', ->\n+        console.log(data)\n+    request.end(json)\n+\n+  fetch_messages: (cb) ->\n+    options =\n+      agent: false\n+      host: 'v2.groupme.com'\n+      port: 80\n+      method: 'GET'\n+      path: \"/groups/#{@room_id}/messages?token=#{@token}\"\n+\n+    if @last_id\n+      options.path += \"&since_id=#{@last_id}\"\n+\n+    request = HTTP.request options, (response) =>\n+      data = ''\n+      response.on 'data', (chunk) -> data += chunk\n+      response.on 'end', =>\n+        if data\n+          json = JSON.parse(data)\n+          cb(json.response.messages.reverse())\n+    request.end()\n+\n+exports.GroupMe = GroupMe\n+", "changes": 121}], "13": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/2e0f42954d8db08cc1d1231d5c84127829ec383b/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/2e0f42954d8db08cc1d1231d5c84127829ec383b/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=2e0f42954d8db08cc1d1231d5c84127829ec383b", "filename": "package.json", "sha": "ac766219d5d541d233213709b07cbca1656f39e4", "additions": 3, "patch": "@@ -18,7 +18,9 @@\n     \"coffee-script\": \"1.1.1\",\n     \"optparse\": \"1.0.1\",\n     \"scoped-http-client\": \"0.9.0\",\n-    \"irc\": \"0.2\"\n+    \"irc\": \"0.2\",\n+    \"hiredis\": \"0.1.12\",\n+    \"redis\": \"0.6.7\"\n   },\n \n   \"directories\":  {", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/2e0f42954d8db08cc1d1231d5c84127829ec383b/src/hubot/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2e0f42954d8db08cc1d1231d5c84127829ec383b/src/hubot/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/campfire.coffee?ref=2e0f42954d8db08cc1d1231d5c84127829ec383b", "filename": "src/hubot/campfire.coffee", "sha": "e3a46eccb7296aa16b7a8e4478b06f62f68da1e5", "additions": 2, "patch": "@@ -26,7 +26,8 @@ class Campfire extends Robot\n     bot.on \"TextMessage\", (id, created, room, user, body) ->\n       bot.User user, (err, userData) ->\n         if userData.user\n-          author = new Robot.User user, userData.user.name, room: room\n+          userData.user.room = room\n+          author = self.userForId(userData.user.id, userData.user)\n           self.receive new Robot.Message(author, body)\n \n     bot.Me (err, data) ->", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/2e0f42954d8db08cc1d1231d5c84127829ec383b/src/hubot/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2e0f42954d8db08cc1d1231d5c84127829ec383b/src/hubot/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/roles.coffee?ref=2e0f42954d8db08cc1d1231d5c84127829ec383b", "filename": "src/hubot/scripts/roles.coffee", "sha": "aebd71ce25508288478d0c5199dac74785f90ff9", "additions": 56, "patch": "@@ -0,0 +1,56 @@\n+# Assign roles to people you're chatting with\n+#\n+# hubot <user> is a extraordinary role\n+# hubot <user> is not a extraordinary role\n+\n+# hubot holman is an ego surfer\n+# hubot holman is not an ego surfer\n+#\n+\n+module.exports = (robot) ->\n+  robot.respond /who is ([\\w .-]+)\\?*$/i, (msg) ->\n+    name = msg.match[1]\n+\n+    if user = robot.userForName name\n+      user.roles = user.roles or [ ]\n+      if user.roles.length > 0\n+        msg.send \"#{name} is #{user.roles.join(\", \")}.\"\n+      else\n+        msg.send \"#{name} doesn't have any roles yet\"\n+    else\n+      msg.send \"#{name}? Never heard of 'em\"\n+\n+  robot.respond /(\\w+) is ([\"'\\w: ]+)[.!]*$/i, (msg) ->\n+    name    = msg.match[1]\n+    newRole = msg.match[2].trim()\n+\n+    unless name in ['who', 'what', 'where', 'when', 'why']\n+      unless newRole.match(/^not\\s+/i)\n+        if user = robot.userForName name\n+          user.roles = user.roles or [ ]\n+\n+          if newRole in user.roles\n+            msg.send \"I know\"\n+          else\n+            user.roles.push(newRole)\n+            msg.send \"Ok, #{name} is #{newRole}\"\n+\n+        else\n+          msg.send \"#{name}? Never heard of 'em\"\n+\n+  robot.respond /(\\w+) is not ([\"'\\w: ]+)[.!]*$/i, (msg) ->\n+    name    = msg.match[1]\n+    newRole = msg.match[2].trim()\n+\n+    unless name in ['who', 'what', 'where', 'when', 'why']\n+      if user = robot.userForName name\n+        user.roles = user.roles or [ ]\n+\n+        if newRole not in user.roles\n+          msg.send \"I know\"\n+        else\n+          user.roles = (role for role in user.roles when role != newRole)\n+          msg.send \"Ok, #{name} is no longer #{newRole}.\"\n+\n+      else\n+        msg.send \"#{name}? Never heard of 'em\"", "changes": 56}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/2e0f42954d8db08cc1d1231d5c84127829ec383b/src/hubot/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2e0f42954d8db08cc1d1231d5c84127829ec383b/src/hubot/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/shell.coffee?ref=2e0f42954d8db08cc1d1231d5c84127829ec383b", "filename": "src/hubot/shell.coffee", "sha": "bd23fffd8fd1172130d6289ba968548257abc59d", "additions": 9, "patch": "@@ -12,11 +12,19 @@ class Shell extends Robot\n   run: ->\n     console.log \"Hubot: the Shell.\"\n \n-    user = new Robot.User 1, 'shell'\n+    user = @userForId('1', {name: \"Shell\"})\n+    console.log user\n+\n     process.stdin.resume()\n     process.stdin.on 'data', (txt) =>\n       txt.toString().split(\"\\n\").forEach (line) =>\n         return if line.length == 0\n         @receive new Robot.Message user, line\n \n+    setTimeout =>\n+      user   = @userForId('1', {name: \"Shell\"})\n+      atmos  = @userForId('2', {name: \"atmos\"})\n+      holman = @userForId('3', {name: \"holman\"})\n+    , 3000\n+\n exports.Shell = Shell", "changes": 10}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/2e0f42954d8db08cc1d1231d5c84127829ec383b/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2e0f42954d8db08cc1d1231d5c84127829ec383b/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=2e0f42954d8db08cc1d1231d5c84127829ec383b", "filename": "src/robot.coffee", "sha": "a9c50bbf8f3913020752b2f0062e66f2d72052fa", "additions": 62, "patch": "@@ -1,6 +1,7 @@\n-Fs   = require 'fs'\n-Url  = require 'url'\n-Path = require 'path'\n+Fs    = require 'fs'\n+Url   = require 'url'\n+Path  = require 'path'\n+Redis = require 'redis'\n \n class Robot\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n@@ -13,6 +14,7 @@ class Robot\n     @listeners = []\n     @loadPaths = []\n     @Response  = Robot.Response\n+    @brain     = new Robot.Brain()\n     if path then @load path\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n@@ -107,15 +109,69 @@ class Robot\n   # Extend this.\n   run: ->\n \n+  users: () ->\n+    @brain.data.users\n+\n+  # Public: Get a User object given a unique identifier\n+  #\n+  userForId: (id, options) ->\n+    user = @brain.data.users[id]\n+    unless user\n+      user = new Robot.User id, options\n+      @brain.data.users[id] = user\n+\n+    user\n+\n+  # Public: Get a User object given a name\n+  #\n+  userForName: (name) ->\n+    result = null\n+    lowerName = name.toLowerCase()\n+    for k of (@brain.data.users or { })\n+      if @brain.data.users[k]['name'].toLowerCase() == lowerName\n+        result = @brain.data.users[k]\n+\n+    result\n+    # (user for id in @brain.data.users when @users[id]['name'].toLowerCase() == lowerName)\n+\n class Robot.User\n   # Represents a participating user in the chat.\n   #\n   # id      - A unique ID for the user.\n   # name    - A String name of the user.\n   # options - An optional Hash of key, value pairs for this user.\n-  constructor: (@id, @name, options) ->\n-    for key, value of (options or {})\n-      this[key] = value\n+  constructor: (@id, options = { }) ->\n+    for k of (options or { })\n+      @[k] = options[k]\n+\n+class Robot.Brain\n+  # Represents somewhat persistent storage for the robot.\n+  #\n+  constructor: () ->\n+    @data =\n+      users: { }\n+\n+    @client = Redis.createClient()\n+\n+    @client.on \"error\", (err) ->\n+      console.log \"Error #{err}\"\n+    @client.on \"connect\", () =>\n+      console.log \"BOOM: Connected to Redis\"\n+      @client.get \"hubot:storage\", (err, reply) =>\n+        throw err if err\n+        if reply\n+          @mergeData JSON.parse reply.toString()\n+\n+      setInterval =>\n+        # console.log JSON.stringify @data\n+        data = JSON.stringify @data\n+        @client.set \"hubot:storage\", data, (err, reply) ->\n+          # console.log \"Saved #{reply.toString()}\"\n+      , 5000\n+\n+  mergeData: (data) ->\n+    for k of (data or { })\n+      @data[k] = data[k]\n \n class Robot.Message\n   # Represents an incoming message from the chat.", "changes": 68}], "19": [{"status": "modified", "deletions": 15, "raw_url": "https://github.com/hubotio/hubot/raw/6fc90ecd9b47cbb97140201b91335bc6a9850a85/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/6fc90ecd9b47cbb97140201b91335bc6a9850a85/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=6fc90ecd9b47cbb97140201b91335bc6a9850a85", "filename": "bin/hubot", "sha": "477c72622dfa59d14324a1a68992fd0615a8002f", "additions": 0, "patch": "@@ -85,19 +85,4 @@ else\n \n   robot.run()\n \n-  if webHost = process.env.HUBOT_WEB_HOST\n-    server = HTTP.createServer( (req, res) ->\n-      res.writeHead 200, 'Content-Type': 'text/plain'\n-      res.end 'Hello from Hubot\\n'\n-    ).listen PortNumber\n-\n-    setInterval ->\n-      httpOpts = host: webHost\n-\n-      HTTP.get( httpOpts, (res) ->\n-        console.log \"Got response: #{res}\" unless res.statusCode == 200\n-      ).on 'error', (e) ->\n-        console.log \"Got error: #{e.message}\"\n-    , 60000\n-\n # vim:ft=coffee ts=2 sw=2 et :", "changes": 15}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6fc90ecd9b47cbb97140201b91335bc6a9850a85/src/templates/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/6fc90ecd9b47cbb97140201b91335bc6a9850a85/src/templates/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/Procfile?ref=6fc90ecd9b47cbb97140201b91335bc6a9850a85", "filename": "src/templates/Procfile", "sha": "fa19f445eae972074adb3f9c82361b7214b05248", "additions": 1, "patch": "@@ -1 +1 @@\n-web: bin/hubot -a campfire -n Hubot\n+app: bin/hubot -a campfire -n Hubot", "changes": 2}, {"status": "modified", "deletions": 11, "raw_url": "https://github.com/hubotio/hubot/raw/6fc90ecd9b47cbb97140201b91335bc6a9850a85/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/6fc90ecd9b47cbb97140201b91335bc6a9850a85/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=6fc90ecd9b47cbb97140201b91335bc6a9850a85", "filename": "src/templates/README.md", "sha": "03a722fc9e20ab509fe865fbdb7d7ebab0ea4253", "additions": 1, "patch": "@@ -50,7 +50,7 @@ Deployment\n \n     % heroku create --stack cedar\n     % git push heroku master\n-    % heroku ps:scale web=1\n+    % heroku ps:scale app=1\n     % heroku addons:add redistogo:nano\n \n You'll need to edit the `Procfile` to say what the bot's name is.\n@@ -75,16 +75,6 @@ Add the subdomain hubot should connect to. If you web URL looks like\n \n     % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=\"mysubdomain\"\n \n-The Web Host\n-------------\n-In order to keep hubot running, he needs to trick heroku into thinking\n-he's constantly getting web traffic.  Hubot will automatically ping his\n-HTTP endpoint if you set the `HUBOT_WEB_HOST` variable.  You can get the\n-web endpoint by running `heroku info` and getting the hostname from the\n-Web URL.  Be sure to remove the `http://` prefix from it.\n-\n-    % heroku config:add HUBOT_WEB_HOST=\"galaxy324.herokuapp.com\"\n-\n Restart the bot\n ---------------\n You may want to get comfortable with `heroku logs` and `heroku restart`", "changes": 12}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/6fc90ecd9b47cbb97140201b91335bc6a9850a85/src/templates/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/6fc90ecd9b47cbb97140201b91335bc6a9850a85/src/templates/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/bin/hubot?ref=6fc90ecd9b47cbb97140201b91335bc6a9850a85", "filename": "src/templates/bin/hubot", "sha": "27647a74e3a65b878657b84fb4933eaebdeb1b1e", "additions": 1, "patch": "@@ -1,6 +1,5 @@\n #!/bin/sh\n \n-npm install\n-PATH=\"node_modules/.bin:$PATH\"; export PATH\n+export PATH=\"node_modules/.bin:node_modules/hubot/node_modules/.bin:$PATH\"\n \n node_modules/.bin/hubot \"$@\"", "changes": 3}], "21": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/103c61e9e1e6e4279de43ddbbd02a2266f5ef3e7/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/103c61e9e1e6e4279de43ddbbd02a2266f5ef3e7/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=103c61e9e1e6e4279de43ddbbd02a2266f5ef3e7", "filename": "src/creator.coffee", "sha": "06b2531c33153ed00422263b7aa4938f90c24056", "additions": 1, "patch": "@@ -52,7 +52,7 @@ class Creator\n \n     @copyDefaultScripts(\"#{@path}/scripts\")\n \n-    [\"Procfile\", \"package.json\", \"README.md\", \".gitignore\", \"bin/hubot\"].forEach (file) =>\n+    [\"Procfile\", \"package.json\", \"README.md\", \".gitignore\", \"bin/hubot\", \"hubot-scripts.json\"].forEach (file) =>\n       @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\"\n \n exports.Creator = Creator", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/103c61e9e1e6e4279de43ddbbd02a2266f5ef3e7/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/103c61e9e1e6e4279de43ddbbd02a2266f5ef3e7/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=103c61e9e1e6e4279de43ddbbd02a2266f5ef3e7", "filename": "src/templates/README.md", "sha": "20853884d9ea0ee7592f6d6ba451f28730b8bcb1", "additions": 2, "patch": "@@ -42,8 +42,8 @@ hubot-scripts\n There will inevitably be functionality that everyone will want.  Instead\n of adding it to hubot itself, you can submit pull requests to\n [hubot-scripts](https://github.com/github/hubot-scripts).  To enable\n-scripts from the hubot-scripts package, add the script name to the\n-hubot-scripts.json file in this repo.\n+scripts from the hubot-scripts package, add the script name with extension as a\n+double quoted string to the hubot-scripts.json file in this repo.\n \n Deployment\n ==========", "changes": 4}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/103c61e9e1e6e4279de43ddbbd02a2266f5ef3e7/src/templates/hubot-scripts.json", "blob_url": "https://github.com/hubotio/hubot/blob/103c61e9e1e6e4279de43ddbbd02a2266f5ef3e7/src/templates/hubot-scripts.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/hubot-scripts.json?ref=103c61e9e1e6e4279de43ddbbd02a2266f5ef3e7", "filename": "src/templates/hubot-scripts.json", "sha": "b8c34c43814550bef8e075669057a737759530c0", "additions": 1, "patch": "@@ -0,0 +1 @@\n+[\"tweet.coffee\", \"haters.coffee\"]", "changes": 1}], "22": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f2b9e7bb91cc1634c4a648036fa5d8b2f9479a61/src/templates/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/f2b9e7bb91cc1634c4a648036fa5d8b2f9479a61/src/templates/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/package.json?ref=f2b9e7bb91cc1634c4a648036fa5d8b2f9479a61", "filename": "src/templates/package.json", "sha": "43637e1a2fa5df42ef9d39ab0e7bf67946b231df", "additions": 1, "patch": "@@ -15,6 +15,7 @@\n   },\n \n   \"dependencies\": {\n+    \"coffee-script\": \"1.1.1\",\n     \"hubot\": \">= 1.0.0\",\n     \"hubot-scripts\": \">= 1.0.0\"\n   }", "changes": 1}], "25": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/bfd44f89d0e60ba46317fba6f0cd5ebaca1ad5bb/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/bfd44f89d0e60ba46317fba6f0cd5ebaca1ad5bb/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=bfd44f89d0e60ba46317fba6f0cd5ebaca1ad5bb", "filename": "bin/hubot", "sha": "ebe1d1194a8d5c4ab411a2e505eec1ec9084c4af", "additions": 2, "patch": "@@ -50,6 +50,8 @@ Parser.on \"help\", (opt, value) ->\n \n Parser.parse process.ARGV\n \n+process.on 'SIGTERM', -> process.exit(0)\n+\n if Options.create\n   creator = new Creator.Creator(Options.path)\n   creator.run()", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/bfd44f89d0e60ba46317fba6f0cd5ebaca1ad5bb/src/templates/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/bfd44f89d0e60ba46317fba6f0cd5ebaca1ad5bb/src/templates/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/bin/hubot?ref=bfd44f89d0e60ba46317fba6f0cd5ebaca1ad5bb", "filename": "src/templates/bin/hubot", "sha": "4c3bae4fb8efa7027a9c422d2519bb97188c9ecd", "additions": 5, "patch": "@@ -2,4 +2,8 @@\n \n export PATH=\"node_modules/.bin:node_modules/hubot/node_modules/.bin:$PATH\"\n \n-node_modules/.bin/hubot \"$@\"\n+trap \"exit\" TERM\n+\n+until node_modules/.bin/hubot \"$@\"; do\n+  echo \"Hubot crashed with exit code $?. Respawning...\"\n+done", "changes": 6}], "26": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8a7f24e31aea232dc9d0d7b28f0cd70d7dc313a2/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/8a7f24e31aea232dc9d0d7b28f0cd70d7dc313a2/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=8a7f24e31aea232dc9d0d7b28f0cd70d7dc313a2", "filename": "src/templates/README.md", "sha": "d0618421fd44108839c6d1b891e8d0301db5c333", "additions": 9, "patch": "@@ -75,6 +75,15 @@ Add the subdomain hubot should connect to. If you web URL looks like\n \n     % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=\"mysubdomain\"\n \n+IRC Variables\n+------------------\n+\n+    % heroku config:add HUBOT_IRC_SERVER=\"irc.freenode.net\"\n+    \n+    % heroku config:add HUBOT_IRC_ROOMS=\"#github,#node.js\"\n+    \n+    % heroku config:add HUBOT_IRC_NICK=\"MICCHECK1212\"\n+\n Restart the bot\n ---------------\n You may want to get comfortable with `heroku logs` and `heroku restart`", "changes": 9}], "29": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/45ea2adc38e82b01f4fb3cc8fcb8754fe2b8dbde/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/45ea2adc38e82b01f4fb3cc8fcb8754fe2b8dbde/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=45ea2adc38e82b01f4fb3cc8fcb8754fe2b8dbde", "filename": "bin/hubot", "sha": "3140419900dce052aff9795484dde87cc28a2c9a", "additions": 2, "patch": "@@ -59,6 +59,8 @@ else\n       Hubot = require(\"hubot/irc\").IrcBot\n     when \"campfire\"\n       Hubot = require(\"hubot/campfire\").Campfire\n+    when \"twilio\"\n+      Hubot = require(\"hubot/twilio\").Twilio\n     else\n       Hubot = require(\"hubot/shell\").Shell\n ", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/45ea2adc38e82b01f4fb3cc8fcb8754fe2b8dbde/src/hubot/twilio.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/45ea2adc38e82b01f4fb3cc8fcb8754fe2b8dbde/src/hubot/twilio.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/twilio.coffee?ref=45ea2adc38e82b01f4fb3cc8fcb8754fe2b8dbde", "filename": "src/hubot/twilio.coffee", "sha": "6456251236cb93dea29a6b2d80a75a0e3ffe02f5", "additions": 91, "patch": "@@ -0,0 +1,91 @@\n+Robot = require 'robot'\n+Http  = require 'http'\n+Https = require 'https'\n+Qs    = require 'querystring'\n+\n+class Twilio extends Robot\n+  constructor: ->\n+    @config =\n+      sid: process.env.HUBOT_SMS_SID\n+      token: process.env.HUBOT_SMS_TOKEN\n+      from: process.env.HUBOT_SMS_FROM\n+    super\n+\n+  send: (user, strings...) ->\n+    message = strings.join \"\\n\"\n+    @post message, user.id, (error, body) ->\n+      if error or not body\n+        console.log \"error sending response: #{error}\"\n+      else\n+        console.log \"successful sending #{body}\"\n+\n+  reply: (user, strings...) ->\n+    strings.forEach (str) =>\n+      @send user, \"#{user.name}: #{str}\"\n+\n+  run: ->\n+    console.log \"Hubot: the SMS reader.\"\n+\n+    server = Http.createServer (request, response) =>\n+      payload = Qs.parse(request.url)\n+\n+      @handle payload.Body, payload.From if payload.Body and payload.From\n+\n+      response.writeHead 200, 'Content-Type': 'text/plain'\n+      response.end()\n+\n+    server.listen process.env.HUBOT_SMS_PORT, \"0.0.0.0\"\n+\n+  handle: (body, from) ->\n+    return if body.length == 0\n+    user = @userForId from\n+    @receive new Robot.Message user, body\n+\n+  post: (message, to, callback) ->\n+    host = \"api.twilio.com\"\n+    path = \"/2010-04-01/Accounts/#{@config.sid}/SMS/Messages.json\"\n+\n+    auth = new Buffer(@config.sid + ':' + @config.token).toString(\"base64\")\n+\n+    headers =\n+      'Authorization': \"Basic \" + auth\n+      'Content-Type': \"application/x-www-form-urlencoded\"\n+      'Host': host\n+\n+    params = Qs.stringify\n+      'From': @config.from\n+      'To': to\n+      'Body': message\n+\n+    headers['Content-Length'] = params.length\n+\n+    opts =\n+      host: host\n+      port: 443\n+      method: \"POST\"\n+      path: path\n+      headers: headers\n+\n+    console.log opts\n+\n+    request = Https.request opts, (response) ->\n+      data = \"\"\n+\n+      response.setEncoding \"utf8\"\n+\n+      response.on \"data\", (chunk) ->\n+        data += chunk\n+\n+      response.on \"end\", ->\n+        body = JSON.parse data\n+\n+        if response.statusCode is 201\n+          callback null, body\n+        else\n+          callback body.message\n+\n+    request.write params\n+\n+    request.end()\n+\n+exports.Twilio = Twilio", "changes": 91}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/45ea2adc38e82b01f4fb3cc8fcb8754fe2b8dbde/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/45ea2adc38e82b01f4fb3cc8fcb8754fe2b8dbde/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=45ea2adc38e82b01f4fb3cc8fcb8754fe2b8dbde", "filename": "src/templates/README.md", "sha": "9ec498fe77f9166991eac0f8d2ee36056d6789fc", "additions": 13, "patch": "@@ -84,6 +84,19 @@ IRC Variables\n     \n     % heroku config:add HUBOT_IRC_NICK=\"MICCHECK1212\"\n \n+Twilio Variables\n+------------------\n+\n+You must have a Twilio account with credit and a number that can send and\n+receive SMS messages.\n+\n+    % heroku config:add HUBOT_SMS_FROM=\"+14156662671\"\n+\n+    % heroku config:add HUBOT_SMS_SID=\"AC5d10e5624da757326d12f8d31c08c20b\"\n+\n+    % heroku config:add HUBOT_SMS_TOKEN=\"4ada63e18146a204e468fb6289030231\"\n+\n+\n Restart the bot\n ---------------\n You may want to get comfortable with `heroku logs` and `heroku restart`", "changes": 13}], "30": [{"status": "modified", "deletions": 13, "raw_url": "https://github.com/hubotio/hubot/raw/df45f5bb0a28aeeeb01e92f893435181bfe4d3e7/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/df45f5bb0a28aeeeb01e92f893435181bfe4d3e7/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=df45f5bb0a28aeeeb01e92f893435181bfe4d3e7", "filename": "src/robot.coffee", "sha": "92922e58cf784716244a425ebdd39e8657d37122", "additions": 23, "patch": "@@ -8,9 +8,9 @@ class Robot\n   # dispatch them to matching listeners.\n   #\n   # path - String directory full of Hubot scripts to load.\n-  constructor: (path, name = \"Hubot\") ->\n+  constructor: (path, name = \"Hubot\", brain = Robot.RedisBrain) ->\n     @name        = name\n-    @brain       = new Robot.Brain()\n+    @brain       = new brain()\n     @commands    = []\n     @Response    = Robot.Response\n     @listeners   = []\n@@ -182,6 +182,26 @@ class Robot.User\n \n # http://www.the-isb.com/images/Nextwave-Aaron01.jpg\n class Robot.Brain\n+  # Represents somewhat persistent storage for the robot.\n+  #\n+  # Returns a new Brain with no external storage.  Extend this!\n+  constructor: () ->\n+    @data =\n+      users: { }\n+\n+  save: (cb) ->\n+  close: ->\n+\n+  # Merge keys loaded from a DB against the in memory representation\n+  #\n+  # Returns nothing\n+  #\n+  # Caveats: Deeply nested structures don't merge well\n+  mergeData: (data) ->\n+    for k of (data or { })\n+      @data[k] = data[k]\n+\n+class Robot.RedisBrain extends Robot.Brain\n   # Represents somewhat persistent storage for the robot.\n   #\n   # Returns a new Brain that's trying to connect to redis\n@@ -191,8 +211,7 @@ class Robot.Brain\n   # Redis connects to a environmental variable REDISTOGO_URL or\n   # fallsback to localhost\n   constructor: () ->\n-    @data =\n-      users: { }\n+    super()\n \n     info = Url.parse process.env.REDISTOGO_URL || 'redis://localhost:6379'\n     @client = Redis.createClient(info.port, info.hostname)\n@@ -221,15 +240,6 @@ class Robot.Brain\n     clearInterval @saveInterval\n     @save => @client.quit()\n \n-  # Merge keys loaded from redis against the in memory representation\n-  #\n-  # Returns nothing\n-  #\n-  # Caveats: Deeply nested structures don't merge well\n-  mergeData: (data) ->\n-    for k of (data or { })\n-      @data[k] = data[k]\n-\n class Robot.Message\n   # Represents an incoming message from the chat.\n   #", "changes": 36}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/df45f5bb0a28aeeeb01e92f893435181bfe4d3e7/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/df45f5bb0a28aeeeb01e92f893435181bfe4d3e7/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=df45f5bb0a28aeeeb01e92f893435181bfe4d3e7", "filename": "test/tests.coffee", "sha": "4abcec216138143df942b001994a9505f65ed5eb", "additions": 1, "patch": "@@ -31,7 +31,7 @@ exports.danger = (helper, cb) ->\n \n class Helper extends Robot\n   constructor: (path) ->\n-    super path, 'helper'\n+    super path, 'helper', Robot.Brain\n     @sent = []\n     @Response = Helper.Response\n ", "changes": 2}], "31": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/d23af3c212eabc1c02f6e3363e445b72058c6444/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d23af3c212eabc1c02f6e3363e445b72058c6444/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=d23af3c212eabc1c02f6e3363e445b72058c6444", "filename": "src/hubot/irc.coffee", "sha": "e5b548932698172b2351595c3c82e7c0d5b1eb88", "additions": 3, "patch": "@@ -36,8 +36,9 @@ class IrcBot extends Robot\n           user_id[from] = next_id\n           next_id = next_id + 1\n \n-        user = new Robot.User user_id[from], from || \"user\", {\n-          room: toRoom,\n+        user = new Robot.User user_id[from], {\n+          name: from || \"user\",\n+          room: toRoom\n         }\n \n       self.receive new Robot.Message(user, message)", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d23af3c212eabc1c02f6e3363e445b72058c6444/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d23af3c212eabc1c02f6e3363e445b72058c6444/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=d23af3c212eabc1c02f6e3363e445b72058c6444", "filename": "test/tests.coffee", "sha": "10f02d852e1ef2f83b8b84efcd5c7194e1d9f144", "additions": 3, "patch": "@@ -44,7 +44,9 @@ class Helper extends Robot\n \n   # modified to accept a string and pass the Robot.Message to super()\n   receive: (text) ->\n-    user = new Robot.User 1, 'helper'\n+    user = new Robot.User 1, {\n+        name: 'helper'\n+    }\n     super new Robot.Message(user, text)\n \n class Helper.Response extends Robot.Response", "changes": 4}], "32": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/efa2629ce94983d2672e5e577a4215cc840a2c1a/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/efa2629ce94983d2672e5e577a4215cc840a2c1a/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=efa2629ce94983d2672e5e577a4215cc840a2c1a", "filename": "src/templates/README.md", "sha": "a1cbaf5fd170524c752a9327418230daeac1918e", "additions": 4, "patch": "@@ -55,7 +55,7 @@ Deployment\n \n You'll need to edit the `Procfile` to say what the bot's name is.\n \n-Hubot also needs four environmental variables set to run and to keep him\n+Hubot also needs three environmental variables set to run and to keep him\n running on heroku.\n \n Campfire Variables\n@@ -66,12 +66,13 @@ Create a separate user for your bot and get their token from the web UI.\n     % heroku config:add HUBOT_CAMPFIRE_TOKEN=\"...\"\n \n Get the numeric ids of the rooms you want the bot to join, comma\n-delimited.\n+delimited. If you want the bot to connect to `https://mysubdomain.campfirenow.com/room/42` \n+and `https://mysubdomain.campfirenow.com/room/1024` then you'd add it like this:\n \n     % heroku config:add HUBOT_CAMPFIRE_ROOMS=\"42,1024\"\n \n Add the subdomain hubot should connect to. If you web URL looks like\n-`http://mysubdomain.campfirenow.com` then you'd add it like this.\n+`http://mysubdomain.campfirenow.com` then you'd add it like this:\n \n     % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=\"mysubdomain\"\n ", "changes": 7}], "33": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3a19df823ceccf4d5c166185034fffe1f689cebd/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/3a19df823ceccf4d5c166185034fffe1f689cebd/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=3a19df823ceccf4d5c166185034fffe1f689cebd", "filename": "bin/hubot", "sha": "29a487ac55a741cd31565d51db522a4b3277858e", "additions": 2, "patch": "@@ -59,6 +59,8 @@ else\n       Hubot = require(\"hubot/irc\").IrcBot\n     when \"campfire\"\n       Hubot = require(\"hubot/campfire\").Campfire\n+    when \"hipchat\"\n+      Hubot = require(\"hubot/hipchat\").HipChat\n     else\n       Hubot = require(\"hubot/shell\").Shell\n ", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3a19df823ceccf4d5c166185034fffe1f689cebd/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3a19df823ceccf4d5c166185034fffe1f689cebd/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=3a19df823ceccf4d5c166185034fffe1f689cebd", "filename": "src/hubot/hipchat.coffee", "sha": "a611a75e5e106617d013b527c01687d05e927123", "additions": 74, "patch": "@@ -0,0 +1,74 @@\n+Robot        = require \"robot\"\n+Xmpp         = require \"node-xmpp\"\n+\n+class HipChat extends Robot\n+  send: (user, strings...) ->\n+    strings.forEach (str) =>\n+      @bot.send(new Xmpp.Element('message', { to: @options.room_jid + '/' + @options.room_nick, type: 'groupchat' }).\n+        c('body').t(str)\n+      )\n+\n+  reply: (user, strings...) ->\n+    strings.forEach (str) =>\n+      @send user, \"#{str}\"\n+\n+  trim: (string) ->\n+    string.replace(/^\\s*|\\s*$/g, '')\n+\n+  run: ->\n+    self = @\n+    options =\n+      nick: process.env.HUBOT_HC_NICK\n+      jid:  process.env.HUBOT_HC_JID\n+      password: process.env.HUBOT_HC_PASSWORD\n+      room_jid: process.env.HUBOT_HC_ROOM_JID\n+      room_nick: process.env.HUBOT_HC_ROOM_NICK\n+\n+    console.log options\n+    @options = options\n+    # Once connected, set available presence and join room\n+    bot = new Xmpp.Client\n+      jid: options.jid + '/bot'\n+      password: options.password\n+\n+    bot.on 'online', ->\n+      console.log \"Skynet is ready!\"\n+\n+      # set bot as online\n+      bot.send(new Xmpp.Element('presence', { type: 'available' })\n+        .c('show').t('chat')\n+      )\n+\n+      # join room (and request no chat history)\n+      bot.send(new Xmpp.Element('presence', { to: options.room_jid + '/' + options.nick }).\n+        c('x', { xmlns: 'http://jabber.org/protocol/muc' })\n+      )\n+\n+      # send keepalive data or server will disconnect us after 150s of inactivity\n+      setInterval ->\n+        bot.send ' '\n+      , 30000\n+\n+    bot.on 'stanza', (stanza) =>\n+      if stanza.attrs.type == 'error'\n+        console.log \"[error] #{stanza}\"\n+        return\n+\n+      # ignore everything that isn't a room message\n+      if (!stanza.is('message') || !stanza.attrs.type == 'groupchat')\n+        return\n+\n+      body = stanza.getChild('body')\n+      # message without body is probably a topic change\n+      if !body\n+        return\n+\n+      message = body.getText()\n+      query = @trim(message).replace(/^@[a-z]* /, \"\")\n+      console.log query\n+      user = new Robot.User stanza.attrs.from\n+      @receive new Robot.Message(user, query)\n+\n+    @bot = bot\n+\n+exports.HipChat = HipChat", "changes": 74}], "34": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/b7b735bd5ea2230d97efd8bf5eda4af4628192a7/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/b7b735bd5ea2230d97efd8bf5eda4af4628192a7/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=b7b735bd5ea2230d97efd8bf5eda4af4628192a7", "filename": "bin/hubot", "sha": "f21ef1ca304656c23febce483f21ae972162d1af", "additions": 2, "patch": "@@ -59,6 +59,8 @@ else\n       Hubot = require(\"hubot/irc\").IrcBot\n     when \"campfire\"\n       Hubot = require(\"hubot/campfire\").Campfire\n+    when \"hipchat\"\n+      Hubot = require(\"hubot/hipchat\").HipChat\n     when \"twilio\"\n       Hubot = require(\"hubot/twilio\").Twilio\n     else", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b7b735bd5ea2230d97efd8bf5eda4af4628192a7/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/b7b735bd5ea2230d97efd8bf5eda4af4628192a7/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=b7b735bd5ea2230d97efd8bf5eda4af4628192a7", "filename": "package.json", "sha": "a2419e25855f63645b66973f5bc1867afc678549", "additions": 2, "patch": "@@ -20,7 +20,8 @@\n     \"scoped-http-client\": \"0.9.4\",\n     \"irc\": \"0.2\",\n     \"hiredis\": \"0.1.12\",\n-    \"redis\": \"0.6.7\"\n+    \"redis\": \"0.6.7\",\n+    \"wobot\": \"0.3.0\"\n   },\n \n   \"directories\":  {", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/b7b735bd5ea2230d97efd8bf5eda4af4628192a7/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b7b735bd5ea2230d97efd8bf5eda4af4628192a7/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=b7b735bd5ea2230d97efd8bf5eda4af4628192a7", "filename": "src/hubot/hipchat.coffee", "sha": "4c6bebb793936635e2d70f032369e6446af51d4b", "additions": 102, "patch": "@@ -0,0 +1,102 @@\n+Robot        = require \"robot\"\n+HTTPS        = require \"https\"\n+EventEmitter = require(\"events\").EventEmitter\n+Wobot        = require(\"wobot\").Bot\n+\n+class HipChat extends Robot\n+  send: (user, strings...) ->\n+    console.log \"Sending\"\n+    strings.forEach (str) =>\n+      @bot.message user.room || user.id, str\n+\n+  reply: (user, strings...) ->\n+    console.log \"Replying\"\n+    strings.forEach (str) =>\n+      @send user, \"#{user.name}: #{str}\"\n+\n+  run: ->\n+    self = @\n+    @options =\n+      token:    process.env.HUBOT_HIPCHAT_TOKEN\n+      jid:      process.env.HUBOT_HIPCHAT_JID\n+      name:     process.env.HUBOT_HIPCHAT_NAME || \"Hubot, I\"\n+      password: process.env.HUBOT_HIPCHAT_PASSWORD\n+\n+    console.log \"Options:\", @options\n+    bot = new Wobot(jid: @options.jid, name: @options.name, password: @options.password)\n+    console.log \"Bot:\", bot\n+\n+    bot.onConnect =>\n+      console.log \"Connected to HipChat\"\n+      @get \"/v1/rooms/list\", (err, response)->\n+        response.rooms.forEach (room)->\n+          bot.join room.xmpp_jid\n+    bot.onError (message, stanza)->\n+      console.log \"Received error from HipChat:\", message, stanza\n+    bot.onMessage /^\\s*@hubot\\s/i, (channel, from, message)->\n+      author = self.userForId(from)\n+      author.room = channel\n+      self.receive new Robot.Message(author, message.replace(/^\\s*@hubot\\s+/, \"Hubot: \"))\n+    bot.onPrivateMessage (from, message)=>\n+      author = self.userForId(from)\n+      self.receive new Robot.Message(author, \"Hubot: #{message}\")\n+    bot.connect()\n+\n+    @bot = bot\n+\n+\n+  # Convenience HTTP Methods for posting on behalf of the token\"d user\n+  get: (path, callback) ->\n+    @request \"GET\", path, null, callback\n+\n+  post: (path, body, callback) ->\n+    @request \"POST\", path, body, callback\n+\n+  request: (method, path, body, callback) ->\n+    console.log method, path, body\n+    headers = { \"Host\": \"api.hipchat.com\" }\n+\n+    options =\n+      \"agent\"  : false\n+      \"host\"   : \"api.hipchat.com\"\n+      \"port\"   : 443\n+      \"path\"   : path\n+      \"method\" : method\n+      \"headers\": headers\n+\n+    if method == \"POST\"\n+      body.auth_token = @options.token\n+      body = JSON.stringify(body)\n+      headers[\"Content-Type\"] = \"application/json\"\n+\n+      body = new Buffer(body)\n+      options.headers[\"Content-Length\"] = body.length\n+    else\n+      options.path += \"?auth_token=#{@options.token}\"\n+\n+    request = HTTPS.request options, (response) ->\n+      data = \"\"\n+      response.on \"data\", (chunk) ->\n+        data += chunk\n+      response.on \"end\", ->\n+        if response.statusCode >= 400\n+          console.log \"hipchat error: #{response.statusCode}\"\n+\n+        try\n+          callback null, JSON.parse(data)\n+        catch err\n+          callback null, data || { }\n+      response.on \"error\", (err) ->\n+        callback err, { }\n+\n+    if method == \"POST\"\n+      request.end(body, 'binary')\n+    else\n+      request.end()\n+\n+    request.on \"error\", (err) ->\n+      console.log err\n+      console.log err.stack\n+      callback err\n+\n+exports.HipChat = HipChat", "changes": 102}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/b7b735bd5ea2230d97efd8bf5eda4af4628192a7/src/hubot/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b7b735bd5ea2230d97efd8bf5eda4af4628192a7/src/hubot/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/help.coffee?ref=b7b735bd5ea2230d97efd8bf5eda4af4628192a7", "filename": "src/hubot/scripts/help.coffee", "sha": "f85f5e69311a999b2f3e9dc1f94e0425b2c2c826", "additions": 1, "patch": "@@ -7,3 +7,4 @@\n module.exports = (robot) ->\n   robot.respond /help$/i, (msg) ->\n     msg.send robot.helpCommands().join(\"\\n\")\n+", "changes": 1}], "35": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3e199b389b2e4c16c5149236d15d476a38ddf73d/src/hubot/twilio.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3e199b389b2e4c16c5149236d15d476a38ddf73d/src/hubot/twilio.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/twilio.coffee?ref=3e199b389b2e4c16c5149236d15d476a38ddf73d", "filename": "src/hubot/twilio.coffee", "sha": "479fc2cb540eeaac48e6edf799dea879c32908ba", "additions": 4, "patch": "@@ -23,6 +23,9 @@ class Twilio extends Robot\n     strings.forEach (str) =>\n       @send user, \"#{user.name}: #{str}\"\n \n+  respond: (regex, callback) ->\n+    @hear regex, callback\n+\n   run: ->\n     console.log \"Hubot: the SMS reader.\"\n \n@@ -34,7 +37,7 @@ class Twilio extends Robot\n       response.writeHead 200, 'Content-Type': 'text/plain'\n       response.end()\n \n-    server.listen process.env.HUBOT_SMS_PORT, \"0.0.0.0\"\n+    server.listen (parseInt(process.env.HUBOT_SMS_PORT) || 8080), \"0.0.0.0\"\n \n   handle: (body, from) ->\n     return if body.length == 0", "changes": 5}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3e199b389b2e4c16c5149236d15d476a38ddf73d/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/3e199b389b2e4c16c5149236d15d476a38ddf73d/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=3e199b389b2e4c16c5149236d15d476a38ddf73d", "filename": "src/templates/README.md", "sha": "cce6ae7e386368e3849253652f0e1091818dd078", "additions": 2, "patch": "@@ -96,6 +96,8 @@ receive SMS messages.\n \n     % heroku config:add HUBOT_SMS_TOKEN=\"4ada63e18146a204e468fb6289030231\"\n \n+After getting Hubot up and running, update the \"SMS Request URL\" for your\n+Twilio number to point to your Hubot instance.\n \n Restart the bot\n ---------------", "changes": 2}], "36": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/393459524b1c15652e127e4102e52029408b9dbb/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/393459524b1c15652e127e4102e52029408b9dbb/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=393459524b1c15652e127e4102e52029408b9dbb", "filename": "bin/hubot", "sha": "9928464d4e495e7ad7d50e05e299a65dd2b38585", "additions": 2, "patch": "@@ -61,6 +61,8 @@ else\n       Hubot = require(\"hubot/campfire\").Campfire\n     when \"twilio\"\n       Hubot = require(\"hubot/twilio\").Twilio\n+    when \"xmpp\"\n+      Hubot = require(\"hubot/xmpp\").XmppBot\n     else\n       Hubot = require(\"hubot/shell\").Shell\n ", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/393459524b1c15652e127e4102e52029408b9dbb/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/393459524b1c15652e127e4102e52029408b9dbb/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=393459524b1c15652e127e4102e52029408b9dbb", "filename": "package.json", "sha": "153a7cce68446159673100570e38dba05453f7ba", "additions": 2, "patch": "@@ -20,7 +20,8 @@\n     \"scoped-http-client\": \"0.9.4\",\n     \"irc\": \"0.2\",\n     \"hiredis\": \"0.1.12\",\n-    \"redis\": \"0.6.7\"\n+    \"redis\": \"0.6.7\",\n+    \"node-xmpp\": \">=0.2.6\"\n   },\n \n   \"directories\":  {", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/393459524b1c15652e127e4102e52029408b9dbb/src/hubot/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/393459524b1c15652e127e4102e52029408b9dbb/src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/xmpp.coffee?ref=393459524b1c15652e127e4102e52029408b9dbb", "filename": "src/hubot/xmpp.coffee", "sha": "f8a0df57dd21e1835a04418f228243a25f0bf99c", "additions": 85, "patch": "@@ -0,0 +1,85 @@\n+Robot = require 'robot'\n+Xmpp  = require 'node-xmpp'\n+\n+class XmppBot extends Robot\n+  run: ->\n+    options = \n+      username: process.env.HUBOT_XMPP_USERNAME\n+      password: process.env.HUBOT_XMPP_PASSWORD\n+      rooms:    process.env.HUBOT_XMPP_ROOMS.split(',')\n+      keepaliveInterval: 30000 # ms interval to send whitespace to xmpp server\n+      \n+    console.log options\n+    \n+    @client = new Xmpp.Client\n+      jid: options.username\n+      password: options.password\n+\n+    @client.on 'online', @.online\n+    @client.on 'stanza', @.read\n+\n+    @options = options\n+\n+  online: =>\n+    console.log 'Hubot XMPP client online'\n+    \n+    @client.send new Xmpp.Element('presence', type: 'available' )\n+      .c('show').t('chat')\n+\n+    # join each room\n+    # http://xmpp.org/extensions/xep-0045.html for XMPP chat standard\n+    for room in @options.rooms\n+      @client.send(new Xmpp.Element('presence', to: \"#{room}/#{@options.username}\" )\n+        .c('x', xmlns: 'http://jabber.org/protocol/muc' )\n+        .c('history', seconds: 1 )) # prevent the server from confusing us with old messages\n+                                    # and it seems that servers don't reliably support maxchars\n+                                    # or zero values\n+      \n+    # send raw whitespace for keepalive \n+    setInterval => \n+      @client.send ' '\n+    , @options.keepaliveInterval\n+\n+  read: (stanza) =>\n+    if stanza.attrs.type is 'error'\n+      console.error '[xmpp error]' + stanza\n+      return\n+\n+    # ignore non-messages\n+    return if !stanza.is 'message' || stanza.attrs.type not in ['groupchat', 'direct', 'chat']\n+\n+    # ignore our own messages\n+    return if @options.username in stanza.attrs.from\n+      \n+    # ignore empty bodies (i.e., topic changes -- maybe watch these someday)\n+    body = stanza.getChild 'body'\n+    return unless body\n+    \n+    message = body.getText()\n+    \n+    [room, from] = stanza.attrs.from.split '/'\n+    user = new Robot.User from, {\n+      room: room\n+    }\n+    \n+    @receive new Robot.Message user, message\n+\n+  send: (user, strings...) ->\n+    strings.forEach (str) =>\n+      console.log \"Sending to #{user.room}: #{str}\"\n+      \n+      message = new Xmpp.Element('message', \n+                  from: @options.username\n+                  to: user.room\n+                  type: 'groupchat'\n+                ).\n+                c('body').t(str)\n+      \n+      @client.send message\n+\n+  reply: (user, strings...) ->\n+    strings.forEach (str) =>\n+      @send user, \"#{user.name}: #{str}\"\n+\n+\n+exports.XmppBot = XmppBot", "changes": 85}], "37": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/c8590120b038bc0086989d8e4a9a504464d08bd4/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c8590120b038bc0086989d8e4a9a504464d08bd4/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=c8590120b038bc0086989d8e4a9a504464d08bd4", "filename": "src/hubot/hipchat.coffee", "sha": "e147b6763bfc63cb76ed1b9c993001f5fce30255", "additions": 16, "patch": "@@ -7,12 +7,12 @@ class HipChat extends Robot\n   send: (user, strings...) ->\n     console.log \"Sending\"\n     strings.forEach (str) =>\n-      @bot.message user.room || user.id, str\n+      @bot.message user.room || user.jid, str\n \n   reply: (user, strings...) ->\n     console.log \"Replying\"\n     strings.forEach (str) =>\n-      @send user, \"#{user.name}: #{str}\"\n+      @send user, \"@#{user.name} #{str}\"\n \n   run: ->\n     self = @\n@@ -29,16 +29,26 @@ class HipChat extends Robot\n     bot.onConnect =>\n       console.log \"Connected to HipChat\"\n       @get \"/v1/rooms/list\", (err, response)->\n-        response.rooms.forEach (room)->\n-          bot.join room.xmpp_jid\n+        if response\n+          response.rooms.forEach (room)->\n+            bot.join room.xmpp_jid\n+        else\n+          console.log \"Can't list rooms: #{err}\"\n+      @get \"/v1/users/list\", (err, response)->\n+        if response\n+          response.users.forEach (user)->\n+            self.userForId user.user_id, user\n+        else\n+          console.log \"Can't list rooms: #{err}\"\n     bot.onError (message, stanza)->\n       console.log \"Received error from HipChat:\", message, stanza\n     bot.onMessage /^\\s*@hubot\\s/i, (channel, from, message)->\n-      author = self.userForId(from)\n+      author = self.userForId(from.match(/_(\\d+)@/)[1])\n       author.room = channel\n       self.receive new Robot.Message(author, message.replace(/^\\s*@hubot\\s+/, \"Hubot: \"))\n     bot.onPrivateMessage (from, message)=>\n-      author = self.userForId(from)\n+      author = self.userForId(from.match(/_(\\d+)@/)[1])\n+      author.jid = from\n       self.receive new Robot.Message(author, \"Hubot: #{message}\")\n     bot.connect()\n ", "changes": 22}], "38": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1990ede608d89d7eba8caa4c183f7ddb7ff0ddb2/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/1990ede608d89d7eba8caa4c183f7ddb7ff0ddb2/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=1990ede608d89d7eba8caa4c183f7ddb7ff0ddb2", "filename": "bin/hubot", "sha": "f0b590c71c6738f5a5f624cc4abaa6d403e92aca", "additions": 1, "patch": "@@ -73,7 +73,7 @@ else\n   robot = new Hubot scriptsPath, Options.name\n   robot.enableSlash = Options.enableSlash\n \n-  scriptsPath = Path.resolve \"src\", \"hubot\", \"scripts\"\n+  scriptsPath = Path.resolve __dirname, \"..\", \"src\", \"hubot\", \"scripts\"\n   console.log \"Loading hubot core scripts for relative scripts at #{scriptsPath}\"\n   robot.load scriptsPath\n ", "changes": 2}], "39": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f34738ddb30640b2c14cf8d6290ae9850ef19845/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f34738ddb30640b2c14cf8d6290ae9850ef19845/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=f34738ddb30640b2c14cf8d6290ae9850ef19845", "filename": "src/hubot/hipchat.coffee", "sha": "49d2402602bbab00df292a0876789ab245c03c3e", "additions": 2, "patch": "@@ -43,7 +43,8 @@ class HipChat extends Robot\n     bot.onError (message, stanza)->\n       console.log \"Received error from HipChat:\", message, stanza\n     bot.onMessage /^\\s*@hubot\\s/i, (channel, from, message)->\n-      author = self.userForId(from.match(/_(\\d+)@/)[1])\n+      console.log from\n+      author = self.userForName(from)\n       author.room = channel\n       self.receive new Robot.Message(author, message.replace(/^\\s*@hubot\\s+/, \"Hubot: \"))\n     bot.onPrivateMessage (from, message)=>", "changes": 3}], "40": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/48a267fe1c4b7577a1de9f596a14d8852f89b682/src/hubot/twilio.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/48a267fe1c4b7577a1de9f596a14d8852f89b682/src/hubot/twilio.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/twilio.coffee?ref=48a267fe1c4b7577a1de9f596a14d8852f89b682", "filename": "src/hubot/twilio.coffee", "sha": "7de2209084df8d6daa1e8444f7f31e82ffe2a163", "additions": 1, "patch": "@@ -37,7 +37,7 @@ class Twilio extends Robot\n       response.writeHead 200, 'Content-Type': 'text/plain'\n       response.end()\n \n-    server.listen (parseInt(process.env.HUBOT_SMS_PORT) || 8080), \"0.0.0.0\"\n+    server.listen (parseInt(process.env.PORT) || 8080), \"0.0.0.0\"\n \n   handle: (body, from) ->\n     return if body.length == 0", "changes": 2}], "41": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/6e604864b723c36fa8f7698d916486c4cba46532/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/6e604864b723c36fa8f7698d916486c4cba46532/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=6e604864b723c36fa8f7698d916486c4cba46532", "filename": "src/hubot/hipchat.coffee", "sha": "11c8410694c31e6e6cd54c7ef8403eea8f1488ef", "additions": 7, "patch": "@@ -7,7 +7,7 @@ class HipChat extends Robot\n   send: (user, strings...) ->\n     console.log \"Sending\"\n     strings.forEach (str) =>\n-      @bot.message user.room || user.jid, str\n+      @bot.message user.reply_to, str\n \n   reply: (user, strings...) ->\n     console.log \"Replying\"\n@@ -43,13 +43,14 @@ class HipChat extends Robot\n     bot.onError (message, stanza)->\n       console.log \"Received error from HipChat:\", message, stanza\n     bot.onMessage /^\\s*@hubot\\s/i, (channel, from, message)->\n-      console.log from\n-      author = self.userForName(from)\n-      author.room = channel\n+      # We get full name in from, but replies are sent back to room.\n+      author = { name: from, reply_to: channel }\n       self.receive new Robot.Message(author, message.replace(/^\\s*@hubot\\s+/, \"Hubot: \"))\n     bot.onPrivateMessage (from, message)=>\n-      author = self.userForId(from.match(/_(\\d+)@/)[1])\n-      author.jid = from\n+      # We get JID in from, and have to sent replies back to it. We need to\n+      # resolve user from user list to figure out name.\n+      user = self.userForId(from.match(/_(\\d+)@/)[1], name: from)\n+      author = { name: user.name, reply_to: from }\n       self.receive new Robot.Message(author, \"Hubot: #{message}\")\n     bot.connect()\n ", "changes": 13}], "43": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/731124bfab2a9c2ad7982dcc93646e5a1cef2fa1/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/731124bfab2a9c2ad7982dcc93646e5a1cef2fa1/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=731124bfab2a9c2ad7982dcc93646e5a1cef2fa1", "filename": "src/hubot/hipchat.coffee", "sha": "b3e649d0bf2fbf332b297be15abab13e780c1691", "additions": 2, "patch": "@@ -42,11 +42,11 @@ class HipChat extends Robot\n           console.log \"Can't list rooms: #{err}\"\n     bot.onError (message, stanza)->\n       console.log \"Received error from HipChat:\", message, stanza\n-    bot.onMessage /^\\s*@hubot\\s/i, (channel, from, message)->\n+    bot.onMessage /^\\s*@hubot[\\s|,]/i, (channel, from, message)->\n       console.log from\n       author = self.userForName(from)\n       author.room = channel\n-      self.receive new Robot.Message(author, message.replace(/^\\s*@hubot\\s+/, \"Hubot: \"))\n+      self.receive new Robot.Message(author, message.replace(/^\\s*@hubot[\\s+|,]/, \"Hubot: \"))\n     bot.onPrivateMessage (from, message)=>\n       author = self.userForId(from.match(/_(\\d+)@/)[1])\n       author.jid = from", "changes": 4}], "45": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/84e4e9c3123be5bd0395ad806e6e05172432f2a2/src/hubot/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/84e4e9c3123be5bd0395ad806e6e05172432f2a2/src/hubot/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/campfire.coffee?ref=84e4e9c3123be5bd0395ad806e6e05172432f2a2", "filename": "src/hubot/campfire.coffee", "sha": "cbdcfcca791dcaf50ede04a038c3aa0b241439b6", "additions": 12, "patch": "@@ -45,11 +45,14 @@ exports.Campfire = Campfire\n \n class CampfireStreaming extends EventEmitter\n   constructor: (options) ->\n-    @token         = options.token\n-    @rooms         = options.rooms.split(\",\")\n-    @account       = options.account\n-    @domain        = @account + \".campfirenow.com\"\n-    @authorization = \"Basic \" + new Buffer(\"#{@token}:x\").toString(\"base64\")\n+    if options.token? && options.rooms? && options.account?\n+      @token         = options.token\n+      @rooms         = options.rooms.split(\",\")\n+      @account       = options.account\n+      @domain        = @account + \".campfirenow.com\"\n+      @authorization = \"Basic \" + new Buffer(\"#{@token}:x\").toString(\"base64\")\n+    else\n+      throw new Error(\"Not enough parameters provided. I need a token, rooms and account\")\n \n   Rooms: (callback) ->\n     @get \"/rooms\", callback\n@@ -174,7 +177,10 @@ class CampfireStreaming extends EventEmitter\n         data += chunk\n       response.on \"end\", ->\n         if response.statusCode >= 400\n-          console.log \"campfire error: #{response.statusCode}\"\n+          switch response.statusCode\n+            when 401 then throw new Error(\"Invalid access token provided, campfire refused the authentication\")\n+            else console.log \"campfire error: #{err}\"\n+\n \n         try\n           callback null, JSON.parse(data)", "changes": 18}], "46": [{"status": "modified", "deletions": 17, "raw_url": "https://github.com/hubotio/hubot/raw/ecf1eb93d42f4aa79eb5423fe3b26492db891527/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ecf1eb93d42f4aa79eb5423fe3b26492db891527/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=ecf1eb93d42f4aa79eb5423fe3b26492db891527", "filename": "src/hubot/hipchat.coffee", "sha": "5968123c948e69970c9482f8ab331b25e6c2a4f1", "additions": 26, "patch": "@@ -7,7 +7,7 @@ class HipChat extends Robot\n   send: (user, strings...) ->\n     console.log \"Sending\"\n     strings.forEach (str) =>\n-      @bot.message user.room || user.jid, str\n+      @bot.message user.reply_to, str\n \n   reply: (user, strings...) ->\n     console.log \"Replying\"\n@@ -19,21 +19,30 @@ class HipChat extends Robot\n     @options =\n       token:    process.env.HUBOT_HIPCHAT_TOKEN\n       jid:      process.env.HUBOT_HIPCHAT_JID\n-      name:     process.env.HUBOT_HIPCHAT_NAME || \"Hubot, I\"\n+      name:     process.env.HUBOT_HIPCHAT_NAME || \"#{self.name} Bot\"\n       password: process.env.HUBOT_HIPCHAT_PASSWORD\n-\n+      rooms:    process.env.HUBOT_HIPCHAT_ROOMS || \"@All\"\n+    \n+    console.log process.env.HUBOT_HIPCHAT_NAME_TEST\n     console.log \"Options:\", @options\n     bot = new Wobot(jid: @options.jid, name: @options.name, password: @options.password)\n+    mention = '@'+@options.name.split(' ')[0]\n     console.log \"Bot:\", bot\n \n     bot.onConnect =>\n       console.log \"Connected to HipChat\"\n-      @get \"/v1/rooms/list\", (err, response)->\n-        if response\n-          response.rooms.forEach (room)->\n-            bot.join room.xmpp_jid\n-        else\n-          console.log \"Can't list rooms: #{err}\"\n+      if @options.rooms == \"@All\"\n+        @get \"/v1/rooms/list\", (err, response)->\n+          if response\n+            response.rooms.forEach (room)->\n+              console.log \"Joining #{room.xmpp_jid}\"\n+              bot.join room.xmpp_jid\n+          else\n+            console.log \"Can't list rooms: #{err}\"\n+      else\n+        @options.rooms.split(',').forEach (room_id)->\n+          console.log \"Joining #{room_id}\"\n+          bot.join room_id\n       @get \"/v1/users/list\", (err, response)->\n         if response\n           response.users.forEach (user)->\n@@ -42,15 +51,15 @@ class HipChat extends Robot\n           console.log \"Can't list rooms: #{err}\"\n     bot.onError (message, stanza)->\n       console.log \"Received error from HipChat:\", message, stanza\n-    bot.onMessage /^\\s*@hubot\\s/i, (channel, from, message)->\n-      console.log from\n-      author = self.userForName(from)\n-      author.room = channel\n-      self.receive new Robot.Message(author, message.replace(/^\\s*@hubot\\s+/, \"Hubot: \"))\n+    bot.onMessage RegExp(mention,'i'), (channel, from, message)->    \n+      #console.log \"#{from}@#{channel}: #{message}\"\n+      author = { name: from, reply_to: channel }\n+      hubot_msg = message.replace(RegExp(mention,'i'), \"#{self.name}: \")\n+      self.receive new Robot.Message(author, hubot_msg)\n     bot.onPrivateMessage (from, message)=>\n-      author = self.userForId(from.match(/_(\\d+)@/)[1])\n-      author.jid = from\n-      self.receive new Robot.Message(author, \"Hubot: #{message}\")\n+      user = self.userForId(from.match(/_(\\d+)@/)[1])\n+      author = { name: user.name, reply_to: from }\n+      self.receive new Robot.Message(author, \"#{self.name}: #{message}\")\n     bot.connect()\n \n     @bot = bot", "changes": 43}], "49": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c7ec529bd75161df49a1f7d702f93dab5af59b9b/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/c7ec529bd75161df49a1f7d702f93dab5af59b9b/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=c7ec529bd75161df49a1f7d702f93dab5af59b9b", "filename": "bin/hubot", "sha": "a95903af367a69775af56d31d11b5e1849b339b6", "additions": 19, "patch": "@@ -19,7 +19,8 @@ Switches = [\n   [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],\n   [ \"-c\", \"--create PATH\",       \"Create a deployable hubot\"],\n   [ \"-s\", \"--enable-slash\",      \"Enable replacing the robot's name with '/'\"],\n-  [ \"-n\", \"--name NAME\",         \"The name of the robot in chat\" ]\n+  [ \"-n\", \"--name NAME\",         \"The name of the robot in chat\" ],\n+  [ \"-v\", \"--version\",           \"Displays the version of hubot installed\"]\n ]\n \n Options =\n@@ -48,13 +49,30 @@ Parser.on \"help\", (opt, value) ->\n   console.log Parser.toString()\n   process.exit 0\n \n+Parser.on \"version\", (opt, value) ->\n+  Options.version = true\n+\n Parser.parse process.ARGV\n \n process.on 'SIGTERM', -> process.exit(0)\n \n if Options.create\n   creator = new Creator.Creator(Options.path)\n   creator.run()\n+\n+else if Options.version\n+  package_path = __dirname + \"/../package.json\"\n+\n+  Fs.readFile package_path, (err,data) ->\n+    if err\n+      console.error \"Could not open package file : %s\", err\n+      process.exit 1\n+\n+    content = JSON.parse(data.toString('ascii'))\n+    console.log content['version']\n+\n+    process.exit 0\n+\n else\n   switch Options.adapter\n     when \"irc\"", "changes": 20}], "50": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/482dd86fbe0bda1a807e99c346e25138d058351c/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/482dd86fbe0bda1a807e99c346e25138d058351c/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=482dd86fbe0bda1a807e99c346e25138d058351c", "filename": "README.md", "sha": "f57cff6a8daad5bdb069cbba0624946aade525bf", "additions": 1, "patch": "@@ -18,7 +18,7 @@ Then follow the instructions in the README in the `hubot` directory.\n \n Hubot ships with a couple of default scripts, but there's a growing\n number of extras in the [hubot-scripts](https://github.com/github/hubot-scripts)\n-repository.  `hubot-scripts` is a way to share scripts with the entire\n+repository. `hubot-scripts` is a way to share scripts with the entire\n community.  Check out the [README](https://github.com/github/hubot-scripts#readme)\n for more help on installing individual scripts.\n ", "changes": 2}, {"status": "modified", "deletions": 11, "raw_url": "https://github.com/hubotio/hubot/raw/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/campfire.coffee?ref=482dd86fbe0bda1a807e99c346e25138d058351c", "filename": "src/hubot/campfire.coffee", "sha": "97804aea6434c45f44da01887759e32a307ccc15", "additions": 6, "patch": "@@ -4,14 +4,12 @@ EventEmitter = require(\"events\").EventEmitter\n \n class Campfire extends Robot\n   send: (user, strings...) ->\n-    strings.forEach (str) =>\n+    for str in strings\n       @bot.Room(user.room).speak str, (err, data) ->\n-        if err\n-          console.log \"campfire error: #{err}\"\n+        console.log \"campfire error: #{err}\" if err\n \n   reply: (user, strings...) ->\n-    strings.forEach (str) =>\n-      @send user, \"#{user.name}: #{str}\"\n+    @send user, \"#{user.name}: #{str}\" for str in strings\n \n   run: ->\n     self = @\n@@ -20,9 +18,7 @@ class Campfire extends Robot\n       rooms:   process.env.HUBOT_CAMPFIRE_ROOMS\n       account: process.env.HUBOT_CAMPFIRE_ACCOUNT\n \n-    console.log options\n     bot = new CampfireStreaming(options)\n-    console.log bot\n \n     bot.on \"TextMessage\", (id, created, room, user, body) ->\n       bot.User user, (err, userData) ->\n@@ -32,7 +28,6 @@ class Campfire extends Robot\n           self.receive new Robot.Message(author, body)\n \n     bot.Me (err, data) ->\n-      console.log data\n       bot.info = data.user\n       bot.name = bot.info.name\n       bot.rooms.forEach (room_id) ->\n@@ -108,7 +103,7 @@ class CampfireStreaming extends EventEmitter\n \n         buf = ''\n         response.on \"data\", (chunk) ->\n-          if chunk == ' '\n+          if chunk is ' '\n             # campfire api sends a ' ' heartbeat every 3s\n \n           else if chunk.match(/^\\s*Access Denied/)\n@@ -164,7 +159,7 @@ class CampfireStreaming extends EventEmitter\n       \"method\" : method\n       \"headers\": headers\n \n-    if method == \"POST\"\n+    if method is \"POST\"\n       if typeof(body) != \"string\"\n         body = JSON.stringify body\n \n@@ -189,7 +184,7 @@ class CampfireStreaming extends EventEmitter\n       response.on \"error\", (err) ->\n         callback err, { }\n \n-    if method == \"POST\"\n+    if method is \"POST\"\n       request.end(body, 'binary')\n     else\n       request.end()", "changes": 17}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=482dd86fbe0bda1a807e99c346e25138d058351c", "filename": "src/hubot/hipchat.coffee", "sha": "eda181329330e00d6b600b2f44d4a65bc2a73250", "additions": 2, "patch": "@@ -75,7 +75,7 @@ class HipChat extends Robot\n       \"method\" : method\n       \"headers\": headers\n \n-    if method == \"POST\"\n+    if method is \"POST\"\n       body.auth_token = @options.token\n       body = JSON.stringify(body)\n       headers[\"Content-Type\"] = \"application/json\"\n@@ -100,7 +100,7 @@ class HipChat extends Robot\n       response.on \"error\", (err) ->\n         callback err, { }\n \n-    if method == \"POST\"\n+    if method is \"POST\"\n       request.end(body, 'binary')\n     else\n       request.end()", "changes": 4}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=482dd86fbe0bda1a807e99c346e25138d058351c", "filename": "src/hubot/irc.coffee", "sha": "37c8ae625641177053e6ccb2e10d5c713161d4cb", "additions": 5, "patch": "@@ -3,22 +3,20 @@ Irc   = require \"irc\"\n \n class IrcBot extends Robot\n   send: (user, strings...) ->\n-    strings.forEach (str) =>\n+    for str in strings\n       console.log \"#{user.name}: #{str}\"\n       @bot.say(user.room, str)\n \n   reply: (user, strings...) ->\n-    strings.forEach (str) =>\n+    for str in strings\n       @send user, \"#{user.name}: #{str}\"\n \n   run: ->\n     self = @\n     options =\n-      server:   process.env.HUBOT_IRC_SERVER\n-      rooms:   process.env.HUBOT_IRC_ROOMS.split(\",\")\n-      nick: process.env.HUBOT_IRC_NICK\n-\n-    console.log options\n+      server: process.env.HUBOT_IRC_SERVER\n+      rooms:  process.env.HUBOT_IRC_ROOMS.split(\",\")\n+      nick:   process.env.HUBOT_IRC_NICK\n \n     bot = new Irc.Client options.server, options.nick, {\n       debug: true,", "changes": 12}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/roles.coffee?ref=482dd86fbe0bda1a807e99c346e25138d058351c", "filename": "src/hubot/scripts/roles.coffee", "sha": "e6243c284f605a894c0de949dc730d273d04a10a", "additions": 3, "patch": "@@ -12,9 +12,9 @@ module.exports = (robot) ->\n   robot.respond /who is ([\\w .-]+)\\?*$/i, (msg) ->\n     name = msg.match[1]\n \n-    if name == \"you\"\n+    if name is \"you\"\n       msg.send \"Who ain't I?\"\n-    else if name == robot.name\n+    else if name is robot.name\n       msg.send \"The best.\"\n     else if user = robot.userForName name\n       user.roles = user.roles or [ ]\n@@ -38,7 +38,7 @@ module.exports = (robot) ->\n             msg.send \"I know\"\n           else\n             user.roles.push(newRole)\n-            if name.toLowerCase() == robot.name\n+            if name.toLowerCase() is robot.name\n               msg.send \"Ok, I am #{newRole}.\"\n             else\n               msg.send \"Ok, #{name} is #{newRole}.\"", "changes": 6}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/shell.coffee?ref=482dd86fbe0bda1a807e99c346e25138d058351c", "filename": "src/hubot/shell.coffee", "sha": "44a25f9107539d1f808a943f08e3e2c0f314377c", "additions": 3, "patch": "@@ -2,11 +2,11 @@ Robot = require 'robot'\n \n class Shell extends Robot\n   send: (user, strings...) ->\n-    strings.forEach (str) ->\n+    for str in strings\n       console.log str\n \n   reply: (user, strings...) ->\n-    strings.forEach (str) =>\n+    for str in strings\n       @send user, \"#{user.name}: #{str}\"\n \n   run: ->\n@@ -17,7 +17,7 @@ class Shell extends Robot\n     process.stdin.resume()\n     process.stdin.on 'data', (txt) =>\n       txt.toString().split(\"\\n\").forEach (line) =>\n-        return if line.length == 0\n+        return if line.length is 0\n         @receive new Robot.Message user, line\n \n     setTimeout =>", "changes": 6}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/twilio.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/twilio.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/twilio.coffee?ref=482dd86fbe0bda1a807e99c346e25138d058351c", "filename": "src/hubot/twilio.coffee", "sha": "5988d4b1abc1bc1fbf266c0147f625f80b787b0a", "additions": 1, "patch": "@@ -40,7 +40,7 @@ class Twilio extends Robot\n     server.listen (parseInt(process.env.HUBOT_SMS_PORT) || 8080), \"0.0.0.0\"\n \n   handle: (body, from) ->\n-    return if body.length == 0\n+    return if body.length is 0\n     user = @userForId from\n     @receive new Robot.Message user, body\n \n@@ -69,8 +69,6 @@ class Twilio extends Robot\n       path: path\n       headers: headers\n \n-    console.log opts\n-\n     request = Https.request opts, (response) ->\n       data = \"\"\n \n@@ -88,7 +86,6 @@ class Twilio extends Robot\n           callback body.message\n \n     request.write params\n-\n     request.end()\n \n exports.Twilio = Twilio", "changes": 5}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/482dd86fbe0bda1a807e99c346e25138d058351c/src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/xmpp.coffee?ref=482dd86fbe0bda1a807e99c346e25138d058351c", "filename": "src/hubot/xmpp.coffee", "sha": "fefe6485bc121945e57f37d81e25d4ac4e9649f0", "additions": 3, "patch": "@@ -3,7 +3,7 @@ Xmpp  = require 'node-xmpp'\n \n class XmppBot extends Robot\n   run: ->\n-    options = \n+    options =\n       username: process.env.HUBOT_XMPP_USERNAME\n       password: process.env.HUBOT_XMPP_PASSWORD\n       rooms:    process.env.HUBOT_XMPP_ROOMS.split(',')\n@@ -36,7 +36,7 @@ class XmppBot extends Robot\n                                     # or zero values\n       \n     # send raw whitespace for keepalive \n-    setInterval => \n+    setInterval =>\n       @client.send ' '\n     , @options.keepaliveInterval\n \n@@ -68,7 +68,7 @@ class XmppBot extends Robot\n     strings.forEach (str) =>\n       console.log \"Sending to #{user.room}: #{str}\"\n       \n-      message = new Xmpp.Element('message', \n+      message = new Xmpp.Element('message',\n                   from: @options.username\n                   to: user.room\n                   type: 'groupchat'", "changes": 6}, {"status": "modified", "deletions": 16, "raw_url": "https://github.com/hubotio/hubot/raw/482dd86fbe0bda1a807e99c346e25138d058351c/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/482dd86fbe0bda1a807e99c346e25138d058351c/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=482dd86fbe0bda1a807e99c346e25138d058351c", "filename": "src/robot.coffee", "sha": "e3e45563e89c9ed4c1190ab731a161f7843a5d72", "additions": 11, "patch": "@@ -28,8 +28,9 @@ class Robot\n   hear: (regex, callback) ->\n     @listeners.push new Listener(@, regex, callback)\n \n-  # Public: Adds a Listener that attempts to match incoming messages directed at the robot\n-  # based on a Regex.  All regexes treat patterns like they begin with a '^'\n+  # Public: Adds a Listener that attempts to match incoming messages directed\n+  # at the robot based on a Regex.  All regexes treat patterns like they begin\n+  # with a '^'\n   #\n   # regex    - A Regex that determines if the callback should be called.\n   # callback - A Function that is called with a Response object.\n@@ -40,7 +41,7 @@ class Robot\n     re.shift()           # remove empty first item\n     modifiers = re.pop() # pop off modifiers\n \n-    if re[0] and re[0][0] == \"^\"\n+    if re[0] and re[0][0] is \"^\"\n       console.log \"\\nWARNING: Anchors don't work well with respond, perhaps you want to use 'hear'\"\n       console.log \"WARNING: The regex in question was #{regex.toString()}\\n\"\n \n@@ -50,7 +51,6 @@ class Robot\n     else\n       newRegex = new RegExp(\"^#{@name}:?\\\\s*#{pattern}\", modifiers)\n \n-    console.log newRegex.toString()\n     @listeners.push new Listener(@, newRegex, callback)\n \n   # Public: Passes the given message to any interested Listeners.\n@@ -59,7 +59,7 @@ class Robot\n   #\n   # Returns nothing.\n   receive: (message) ->\n-    @listeners.forEach (lst) -> lst.call message\n+    listener.call message for listener in @listeners\n \n   # Public: Loads every script in the given path.\n   #\n@@ -70,7 +70,7 @@ class Robot\n     Path.exists path, (exists) =>\n       if exists\n         @loadPaths.push path\n-        Fs.readdirSync(path).forEach (file) =>\n+        for file in Fs.readdirSync(path)\n           @loadFile path, file\n \n   # Public: Loads a file in path\n@@ -82,7 +82,7 @@ class Robot\n   loadFile: (path, file) ->\n     ext  = Path.extname file\n     full = Path.join path, Path.basename(file, ext)\n-    if ext == '.coffee' or ext == '.js'\n+    if ext is '.coffee' or ext is '.js'\n       require(full) @\n       @parseHelp \"#{path}/#{file}\"\n \n@@ -133,7 +133,6 @@ class Robot\n     unless user\n       user = new Robot.User id, options\n       @brain.data.users[id] = user\n-\n     user\n \n   # Public: Get a User object given a name\n@@ -142,11 +141,9 @@ class Robot\n     result = null\n     lowerName = name.toLowerCase()\n     for k of (@brain.data.users or { })\n-      if @brain.data.users[k]['name'].toLowerCase() == lowerName\n+      if @brain.data.users[k]['name'].toLowerCase() is lowerName\n         result = @brain.data.users[k]\n-\n     result\n-    # (user for id in @brain.data.users when @users[id]['name'].toLowerCase() == lowerName)\n \n class Robot.User\n   # Represents a participating user in the chat.\n@@ -182,11 +179,9 @@ class Robot.Brain\n       console.log \"Successfully connected to Redis\"\n       @client.get \"hubot:storage\", (err, reply) =>\n         throw err if err\n-        if reply\n-          @mergeData JSON.parse reply.toString()\n+        @mergeData JSON.parse reply.toString() if reply\n \n       setInterval =>\n-        # console.log JSON.stringify @data\n         data = JSON.stringify @data\n         @client.set \"hubot:storage\", data, (err, reply) ->\n           # console.log \"Saved #{reply.toString()}\"\n@@ -217,8 +212,8 @@ class Robot.Message\n     @text.match regex\n \n class Listener\n-  # Listeners receive every message from the chat source and decide if they want\n-  # to act on it.\n+  # Listeners receive every message from the chat source and decide if they\n+  # want to act on it.\n   #\n   # robot    - The current Robot instance.\n   # regex    - The Regex that determines if this listener should trigger the", "changes": 27}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/482dd86fbe0bda1a807e99c346e25138d058351c/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/482dd86fbe0bda1a807e99c346e25138d058351c/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=482dd86fbe0bda1a807e99c346e25138d058351c", "filename": "src/templates/README.md", "sha": "09eb0f501489ca7d78dae8daf94fe27dc29a6122", "additions": 7, "patch": "@@ -1,14 +1,14 @@\n Hubot\n =====\n \n-This is a version of GitHub's Campfire bot, hubot.  He's pretty cool.\n+This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n \n This version is designed to be deployed on heroku.\n \n Playing with Hubot\n ==================\n \n-You'll need to install the necessary dependencies for hubot.  All of\n+You'll need to install the necessary dependencies for hubot. All of\n those dependencies are provided by [npm](http://npmjs.org).\n \n     % bin/hubot\n@@ -26,7 +26,7 @@ Then you can interact with Hubot by typing `hubot help`.\n \n     hubot help\n \n-    animate me <query>  - The same thing as `image me`, except adds a few\n+    animate me <query> - The same thing as `image me`, except adds a few\n     convert me <expression> to <units> - Convert expression to given units.\n     help - Displays all of the help commands that Hubot knows about.\n     ...\n@@ -39,9 +39,9 @@ want hubot to have.\n hubot-scripts\n =============\n \n-There will inevitably be functionality that everyone will want.  Instead\n+There will inevitably be functionality that everyone will want. Instead\n of adding it to hubot itself, you can submit pull requests to\n-[hubot-scripts](https://github.com/github/hubot-scripts).  To enable\n+[hubot-scripts](https://github.com/github/hubot-scripts). To enable\n scripts from the hubot-scripts package, add the script name with extension as a\n double quoted string to the hubot-scripts.json file in this repo.\n \n@@ -80,9 +80,9 @@ IRC Variables\n ------------------\n \n     % heroku config:add HUBOT_IRC_SERVER=\"irc.freenode.net\"\n-    \n+\n     % heroku config:add HUBOT_IRC_ROOMS=\"#github,#node.js\"\n-    \n+\n     % heroku config:add HUBOT_IRC_NICK=\"MICCHECK1212\"\n \n Twilio Variables", "changes": 14}], "52": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a1b7def3217971185152d32cd049ed29e0e2d23b/apt.txt", "blob_url": "https://github.com/hubotio/hubot/blob/a1b7def3217971185152d32cd049ed29e0e2d23b/apt.txt", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/apt.txt?ref=a1b7def3217971185152d32cd049ed29e0e2d23b", "filename": "apt.txt", "sha": "148ff639ba4e58b99652f88b2a3c696bc526c86b", "additions": 4, "patch": "@@ -0,0 +1,4 @@\n+nodejs\n+nodejs-dev\n+libexpat1-dev\n+redis-server", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/a1b7def3217971185152d32cd049ed29e0e2d23b/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/a1b7def3217971185152d32cd049ed29e0e2d23b/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=a1b7def3217971185152d32cd049ed29e0e2d23b", "filename": "package.json", "sha": "c75ed1b83e0d069203f3362e605724531103f17c", "additions": 4, "patch": "@@ -17,12 +17,14 @@\n   \"dependencies\": {\n     \"coffee-script\": \"1.1.1\",\n     \"optparse\": \"1.0.1\",\n-    \"scoped-http-client\": \"0.9.4\",\n+    \"scoped-http-client\": \"0.9.0\",\n     \"irc\": \"0.2\",\n     \"hiredis\": \"0.1.12\",\n     \"redis\": \"0.6.7\",\n     \"node-xmpp\": \">=0.2.6\",\n-    \"wobot\": \"0.3.0\"\n+    \"wobot\": \"0.3.0\",\n+    \"ltx\": \"0.0.5\",\n+    \"node-expat\": \"1.4.0\"\n   },\n \n   \"directories\":  {", "changes": 6}], "54": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ece6e381bb18f1e0bbfa1bf4c367375f207f6318/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ece6e381bb18f1e0bbfa1bf4c367375f207f6318/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=ece6e381bb18f1e0bbfa1bf4c367375f207f6318", "filename": "src/hubot/irc.coffee", "sha": "88a01d44dac4204ff7edd3d7fb5f2b25bd3ed5e9", "additions": 8, "patch": "@@ -17,17 +17,25 @@ class IrcBot extends Robot\n       server:   process.env.HUBOT_IRC_SERVER\n       rooms:   process.env.HUBOT_IRC_ROOMS.split(\",\")\n       nick: process.env.HUBOT_IRC_NICK\n+      password: process.env.HUBOT_IRC_PASSWORD\n+      nickpass: process.env.HUBOT_IRC_NICKSERV_PASSWORD\n \n     console.log options\n \n     bot = new Irc.Client options.server, options.nick, {\n+      password: options.password,\n       debug: true,\n       channels: options.rooms,\n     }\n \n     next_id = 1\n     user_id = {}\n \n+    if options.nickpass?\n+      bot.addListener 'notice', (from, to, text) ->\n+        if from == 'NickServ' and text.indexOf('registered') != -1\n+          bot.say 'NickServ', \"identify #{options.nickpass}\"\n+\n     bot.addListener 'message', (from, toRoom, message) ->\n       console.log \"From #{from} to #{toRoom}: #{message}\"\n ", "changes": 8}], "55": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d3f141ea9b6b51092f4bd7ad68079d3a4385d5ff/src/hubot/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d3f141ea9b6b51092f4bd7ad68079d3a4385d5ff/src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/xmpp.coffee?ref=d3f141ea9b6b51092f4bd7ad68079d3a4385d5ff", "filename": "src/hubot/xmpp.coffee", "sha": "dfa4e8ca6ed48522b063c2637bde8575447d50ee", "additions": 1, "patch": "@@ -29,7 +29,7 @@ class XmppBot extends Robot\n     # join each room\n     # http://xmpp.org/extensions/xep-0045.html for XMPP chat standard\n     for room in @options.rooms\n-      @client.send(new Xmpp.Element('presence', to: \"#{room}/#{@options.username}\" )\n+      @client.send(new Xmpp.Element('presence', to: \"#{room}/#{@name}\" )\n         .c('x', xmlns: 'http://jabber.org/protocol/muc' )\n         .c('history', seconds: 1 )) # prevent the server from confusing us with old messages\n                                     # and it seems that servers don't reliably support maxchars", "changes": 2}], "56": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6ec9ddfbe01f7ebfaff96618f20b1c66b332125a/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/6ec9ddfbe01f7ebfaff96618f20b1c66b332125a/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=6ec9ddfbe01f7ebfaff96618f20b1c66b332125a", "filename": "bin/hubot", "sha": "706c60ef52ae25a3cf7b0f6aa2ceebd9ecc4c03e", "additions": 1, "patch": "@@ -93,7 +93,7 @@ else\n   robot = new Hubot scriptsPath, Options.name\n   robot.enableSlash = Options.enableSlash\n \n-  scriptsPath = Path.resolve \"src\", \"hubot\", \"scripts\"\n+  scriptsPath = Path.resolve __dirname, \"..\", \"src\", \"hubot\", \"scripts\"\n   console.log \"Loading hubot core scripts for relative scripts at #{scriptsPath}\"\n   robot.load scriptsPath\n ", "changes": 2}, {"status": "modified", "deletions": 9, "raw_url": "https://github.com/hubotio/hubot/raw/6ec9ddfbe01f7ebfaff96618f20b1c66b332125a/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/6ec9ddfbe01f7ebfaff96618f20b1c66b332125a/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=6ec9ddfbe01f7ebfaff96618f20b1c66b332125a", "filename": "src/hubot/hipchat.coffee", "sha": "8841d71a44aee668586f35fdf12a59d33635b9a2", "additions": 12, "patch": "@@ -1,6 +1,5 @@\n Robot        = require \"robot\"\n HTTPS        = require \"https\"\n-EventEmitter = require(\"events\").EventEmitter\n Wobot        = require(\"wobot\").Bot\n \n class HipChat extends Robot\n@@ -23,10 +22,10 @@ class HipChat extends Robot\n       password: process.env.HUBOT_HIPCHAT_PASSWORD\n       rooms:    process.env.HUBOT_HIPCHAT_ROOMS || \"@All\"\n     \n-    console.log process.env.HUBOT_HIPCHAT_NAME_TEST\n     console.log \"Options:\", @options\n     bot = new Wobot(jid: @options.jid, name: @options.name, password: @options.password)\n-    mention = '@'+@options.name.split(' ')[0]\n+    mention = new RegExp(\"@#{@options.name.split(' ')[0]}\\\\b\", \"i\")\n+    console.log mention\n     console.log \"Bot:\", bot\n \n     bot.onConnect =>\n@@ -49,13 +48,17 @@ class HipChat extends Robot\n             self.userForId user.user_id, user\n         else\n           console.log \"Can't list rooms: #{err}\"\n-    bot.onError (message, stanza)->\n-      console.log \"Received error from HipChat:\", message, stanza\n-    bot.onMessage RegExp(mention,'i'), (channel, from, message)->    \n-      #console.log \"#{from}@#{channel}: #{message}\"\n+    bot.onError (message)->\n+      # If HipChat sends an error, we get the error message from XMPP.\n+      # Otherwise, we get an Error object from the Node connection.\n+      if message.message\n+        console.log \"Error talking to HipChat:\", message.message\n+      else\n+        console.log \"Received error from HipChat:\", message\n+    bot.onMessage (channel, from, message)->\n       author = { name: from, reply_to: channel }\n-      hubot_msg = message.replace(RegExp(mention,'i'), \"#{self.name}: \")\n-      self.receive new Robot.TextMessage(author, hubot_msg)\n+      hubot_msg = message.replace(mention, \"#{self.name}: \")\n+      self.receive new Robot.Message(author, hubot_msg)\n     bot.onPrivateMessage (from, message)=>\n       user = self.userForId(from.match(/_(\\d+)@/)[1])\n       author = { name: user.name, reply_to: from }", "changes": 21}], "57": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/7c1aa1784ef8abf4b21bc73447e3862892f581fd/src/hubot/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/7c1aa1784ef8abf4b21bc73447e3862892f581fd/src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/xmpp.coffee?ref=7c1aa1784ef8abf4b21bc73447e3862892f581fd", "filename": "src/hubot/xmpp.coffee", "sha": "759d679c05a3ee1c8ad19da40f2cff50bfec0a32", "additions": 6, "patch": "@@ -60,18 +60,21 @@ class XmppBot extends Robot\n     [room, from] = stanza.attrs.from.split '/'\n     user = new Robot.User from, {\n       room: room\n+      type: stanza.attrs.type\n     }\n     \n     @receive new Robot.Message user, message\n \n   send: (user, strings...) ->\n     strings.forEach (str) =>\n       console.log \"Sending to #{user.room}: #{str}\"\n-      \n+\n+      to = if user.type in ['direct', 'chat'] then user.room + '/' + user.id else user.room\n+\n       message = new Xmpp.Element('message', \n                   from: @options.username\n-                  to: user.room\n-                  type: 'groupchat'\n+                  to: to\n+                  type: user.type\n                 ).\n                 c('body').t(str)\n       ", "changes": 9}], "58": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/87c677e983b87b8af95b508582d30960fc7009da/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/87c677e983b87b8af95b508582d30960fc7009da/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=87c677e983b87b8af95b508582d30960fc7009da", "filename": "bin/hubot", "sha": "b6c0690eba735c4dcf7fe3a8bfbdbe9a7ca0086d", "additions": 14, "patch": "@@ -19,14 +19,16 @@ Switches = [\n   [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],\n   [ \"-c\", \"--create PATH\",       \"Create a deployable hubot\"],\n   [ \"-s\", \"--enable-slash\",      \"Enable replacing the robot's name with '/'\"],\n-  [ \"-n\", \"--name NAME\",         \"The name of the robot in chat\" ]\n+  [ \"-n\", \"--name NAME\",         \"The name of the robot in chat\"],\n+  [ \"-b\", \"--brain BRAIN\",       \"The brain to use\"]\n ]\n \n Options =\n   path: \".\"\n   name: \"Hubot\"\n   create: false\n   adapter: \"stdio\"\n+  brain: \"default\"\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n@@ -44,6 +46,9 @@ Parser.on \"create\", (opt, value) ->\n Parser.on \"enable-slash\", (opt) ->\n   Options.enableSlash = true\n \n+Parser.on \"brain\", (opt, value) ->\n+  Options.brain = value\n+\n Parser.on \"help\", (opt, value) ->\n   console.log Parser.toString()\n   process.exit 0\n@@ -62,9 +67,16 @@ else\n     else\n       Hubot = require(\"hubot/shell\").Shell\n \n+  switch Options.brain\n+    when \"redis\"\n+      Brain = require(\"hubot/brains/redis_brain\").RedisBrain\n+    else\n+      Brain = Hubot.Brain\n+\n   scriptsPath = Path.resolve \"./scripts\"\n   console.log \"Loading deploy-local scripts at #{scriptsPath}\"\n-  robot = new Hubot scriptsPath, Options.name\n+\n+  robot = new Hubot scriptsPath, Options.name, Brain\n   robot.enableSlash = Options.enableSlash\n \n   scriptsPath = Path.resolve \"src\", \"hubot\", \"scripts\"", "changes": 16}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/87c677e983b87b8af95b508582d30960fc7009da/src/hubot/brains/redis_brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/87c677e983b87b8af95b508582d30960fc7009da/src/hubot/brains/redis_brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/brains/redis_brain.coffee?ref=87c677e983b87b8af95b508582d30960fc7009da", "filename": "src/hubot/brains/redis_brain.coffee", "sha": "59bf8f872f15a2941715bef820bf0f65e0869c80", "additions": 45, "patch": "@@ -0,0 +1,45 @@\n+Robot = require('robot')\n+Redis = require 'redis'\n+Url   = require 'url'\n+\n+class RedisBrain extends Robot.Brain\n+  # Represents somewhat persistent storage for the robot.\n+  #\n+  # Returns a new Brain that's trying to connect to redis\n+  #\n+  # Previously persisted data is loaded on a successful connection\n+  #\n+  # Redis connects to a environmental variable REDISTOGO_URL or\n+  # fallsback to localhost\n+  constructor: () ->\n+    super()\n+\n+    info = Url.parse process.env.REDISTOGO_URL || 'redis://localhost:6379'\n+    @client = Redis.createClient(info.port, info.hostname)\n+\n+    if info.auth\n+      @client.auth info.auth.split(\":\")[1]\n+\n+    @client.on \"error\", (err) ->\n+      console.log \"Error #{err}\"\n+    @client.on \"connect\", =>\n+      console.log \"Successfully connected to Redis\"\n+      @client.get \"hubot:storage\", (err, reply) =>\n+        throw err if err\n+        if reply\n+          @mergeData JSON.parse reply.toString()\n+\n+      @saveInterval = setInterval =>\n+        @save()\n+      , 5000\n+\n+  save: (cb) ->\n+    data = JSON.stringify @data\n+    cb or= (err, reply) ->\n+    @client.set \"hubot:storage\", data, cb\n+\n+  close: ->\n+    clearInterval @saveInterval\n+    @save => @client.quit()\n+\n+exports.RedisBrain = RedisBrain", "changes": 45}, {"status": "modified", "deletions": 32, "raw_url": "https://github.com/hubotio/hubot/raw/87c677e983b87b8af95b508582d30960fc7009da/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/87c677e983b87b8af95b508582d30960fc7009da/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=87c677e983b87b8af95b508582d30960fc7009da", "filename": "src/robot.coffee", "sha": "e77df687d21b7e2bb5c52e9791f6fc2b84e25cae", "additions": 13, "patch": "@@ -1,16 +1,14 @@\n Fs    = require 'fs'\n-Url   = require 'url'\n Path  = require 'path'\n-Redis = require 'redis'\n \n class Robot\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n   # dispatch them to matching listeners.\n   #\n   # path - String directory full of Hubot scripts to load.\n-  constructor: (path, name = \"Hubot\") ->\n+  constructor: (path, name = \"Hubot\", brain = Robot.Brain) ->\n     @name        = name\n-    @brain       = new Robot.Brain()\n+    @brain       = new brain()\n     @commands    = []\n     @Response    = Robot.Response\n     @listeners   = []\n@@ -123,6 +121,11 @@ class Robot\n   # Extend this.\n   run: ->\n \n+  # Public: Raw method for shutting the bot down.\n+  # Extend this.\n+  close: ->\n+    @brain.close()\n+\n   users: () ->\n     @brain.data.users\n \n@@ -157,42 +160,19 @@ class Robot.User\n     for k of (options or { })\n       @[k] = options[k]\n \n+# http://www.the-isb.com/images/Nextwave-Aaron01.jpg\n class Robot.Brain\n   # Represents somewhat persistent storage for the robot.\n   #\n-  # Returns a new Brain that's trying to connect to redis\n-  #\n-  # Previously persisted data is loaded on a successful connection\n-  #\n-  # Redis connects to a environmental variable REDISTOGO_URL or\n-  # fallsback to localhost\n+  # Returns a new Brain with no external storage.  Extend this!\n   constructor: () ->\n     @data =\n       users: { }\n \n-    info = Url.parse process.env.REDISTOGO_URL || 'redis://localhost:6379'\n-    @client = Redis.createClient(info.port, info.hostname)\n+  save: (cb) ->\n+  close: ->\n \n-    if info.auth\n-      @client.auth info.auth.split(\":\")[1]\n-\n-    @client.on \"error\", (err) ->\n-      console.log \"Error #{err}\"\n-    @client.on \"connect\", () =>\n-      console.log \"Successfully connected to Redis\"\n-      @client.get \"hubot:storage\", (err, reply) =>\n-        throw err if err\n-        if reply\n-          @mergeData JSON.parse reply.toString()\n-\n-      setInterval =>\n-        # console.log JSON.stringify @data\n-        data = JSON.stringify @data\n-        @client.set \"hubot:storage\", data, (err, reply) ->\n-          # console.log \"Saved #{reply.toString()}\"\n-      , 5000\n-\n-  # Merge keys loaded from redis against the in memory representation\n+  # Merge keys loaded from a DB against the in memory representation\n   #\n   # Returns nothing\n   #\n@@ -201,6 +181,7 @@ class Robot.Brain\n     for k of (data or { })\n       @data[k] = data[k]\n \n+\n class Robot.Message\n   # Represents an incoming message from the chat.\n   #", "changes": 45}, {"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/87c677e983b87b8af95b508582d30960fc7009da/test/google_images_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/87c677e983b87b8af95b508582d30960fc7009da/test/google_images_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/google_images_test.coffee?ref=87c677e983b87b8af95b508582d30960fc7009da", "filename": "test/google_images_test.coffee", "sha": "4fb7f67611f44ff2aa856bf2b6c27cc0da07d116", "additions": 11, "patch": "@@ -1,9 +1,8 @@\n Tests  = require('./tests')\n assert = require 'assert'\n helper = Tests.helper()\n-mu     = \"http://mustachify.me/?src=\"\n \n-require('../scripts/google-images') helper\n+require('../src/hubot/scripts/google-images') helper\n \n # start up a danger room for google images\n danger = Tests.danger helper, (req, res, url) ->\n@@ -15,6 +14,7 @@ danger = Tests.danger helper, (req, res, url) ->\n   )\n \n # callbacks for when hubot sends messages\n+mu    = \"http://mustachify.me/?src=\"\n tests = [\n   (msg) -> assert.equal \"#{mu}(foo)#.png\", msg\n   (msg) -> assert.equal \"#{mu}(foo)#.png\", msg\n@@ -28,11 +28,12 @@ tests = [\n \n # run the async tests\n danger.start tests, ->\n-  helper.receive 'stache me foo'\n-  helper.receive 'stache foo'\n-  helper.receive 'mustache me foo'\n-  helper.receive 'mustache foo'\n-  helper.receive 'img foo'\n-  helper.receive 'image me foo'\n-  helper.receive 'image foo'\n-  helper.receive 'animate me foo'\n+  helper.receive 'helper: stache me foo'\n+  helper.receive 'helper: stache foo'\n+  helper.receive 'helper: mustache me foo'\n+  helper.receive 'helper: mustache foo'\n+  helper.receive 'helper: img foo'\n+  helper.receive 'helper: image me foo'\n+  helper.receive 'helper: image foo'\n+  helper.receive 'helper: animate me foo'\n+", "changes": 21}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/87c677e983b87b8af95b508582d30960fc7009da/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/87c677e983b87b8af95b508582d30960fc7009da/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=87c677e983b87b8af95b508582d30960fc7009da", "filename": "test/robot_test.coffee", "sha": "883cee12b2139c13d0f8e39289940714842cf554", "additions": 1, "patch": "@@ -24,6 +24,7 @@ server.listen 9001, ->\n   helper.cb = (msg) ->\n     assert.equal 4, helper.sent.length\n     assert.equal 'fetched', msg\n+    helper.close()\n     server.close()\n \n   helper.receive 'http'", "changes": 1}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/87c677e983b87b8af95b508582d30960fc7009da/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/87c677e983b87b8af95b508582d30960fc7009da/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=87c677e983b87b8af95b508582d30960fc7009da", "filename": "test/tests.coffee", "sha": "b42280518a2c651f2ea97441b37f7a31691460aa", "additions": 5, "patch": "@@ -25,11 +25,13 @@ exports.danger = (helper, cb) ->\n \n       cb()\n \n+  server.on 'close', -> helper.close()\n+\n   server\n \n class Helper extends Robot\n   constructor: (path) ->\n-    super path\n+    super path, 'helper', Robot.Brain\n     @sent = []\n     @Response = Helper.Response\n \n@@ -40,14 +42,15 @@ class Helper extends Robot\n \n   reply: (user, strings...) ->\n     strings.forEach (str) =>\n-      @send user, \"#{user.name}: #{str}\"\n+      @send user, \"#{@name}: #{str}\"\n \n   # modified to accept a string and pass the Robot.Message to super()\n   receive: (text) ->\n     user = new Robot.User 1, 'helper'\n     super new Robot.Message(user, text)\n \n class Helper.Response extends Robot.Response\n+  # This changes ever HTTP request to hit the danger server above\n   http: (url) ->\n     super(url).host('127.0.0.1').port(9001)\n ", "changes": 7}], "59": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/7c4007598fde9aa3a8bf7d355c760a289489bea3/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/7c4007598fde9aa3a8bf7d355c760a289489bea3/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=7c4007598fde9aa3a8bf7d355c760a289489bea3", "filename": "src/hubot/irc.coffee", "sha": "7b5aaefcd3d72bf4879ce536d954330cc958a31b", "additions": 4, "patch": "@@ -14,15 +14,17 @@ class IrcBot extends Robot\n   run: ->\n     self = @\n     options =\n-      server:   process.env.HUBOT_IRC_SERVER\n+      server:  process.env.HUBOT_IRC_SERVER\n+      port:    process.env.HUBOT_IRC_PORT\n       rooms:   process.env.HUBOT_IRC_ROOMS.split(\",\")\n-      nick: process.env.HUBOT_IRC_NICK\n+      nick:    process.env.HUBOT_IRC_NICK\n \n     console.log options\n \n     bot = new Irc.Client options.server, options.nick, {\n       debug: true,\n       channels: options.rooms,\n+      port: options.port,\n     }\n \n     next_id = 1", "changes": 6}], "60": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/campfire.coffee?ref=ad58193001f021cf57b01df1220cf7348df504ed", "filename": "src/hubot/campfire.coffee", "sha": "6335733f87afd0c1bace616ac1e17dec2778be99", "additions": 11, "patch": "@@ -24,12 +24,21 @@ class Campfire extends Robot\n     bot = new CampfireStreaming(options)\n     console.log bot\n \n-    bot.on \"TextMessage\", (id, created, room, user, body) ->\n+    withAuthor = (callback) -> (id, created, room, user, body) ->\n       bot.User user, (err, userData) ->\n         if userData.user\n           author = self.userForId(userData.user.id, userData.user)\n           author.room = room\n-          self.receive new Robot.Message(author, body)\n+          callback id, created, room, user, body, author\n+\n+    bot.on \"TextMessage\", withAuthor (id, created, room, user, body, author) ->\n+      self.receive new Robot.TextMessage(author, body)\n+\n+    bot.on \"EnterMessage\", withAuthor (id, created, room, user, body, author) ->\n+      self.receive new Robot.EnterMessage(author)\n+\n+    bot.on \"LeaveMessage\", withAuthor (id, created, room, user, body, author) ->\n+      self.receive new Robot.LeaveMessage(author)\n \n     bot.Me (err, data) ->\n       console.log data", "changes": 13}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=ad58193001f021cf57b01df1220cf7348df504ed", "filename": "src/hubot/hipchat.coffee", "sha": "78ecb0f3899ea2b24dcfa311567d37d97ccbf935", "additions": 2, "patch": "@@ -55,11 +55,11 @@ class HipChat extends Robot\n       #console.log \"#{from}@#{channel}: #{message}\"\n       author = { name: from, reply_to: channel }\n       hubot_msg = message.replace(RegExp(mention,'i'), \"#{self.name}: \")\n-      self.receive new Robot.Message(author, hubot_msg)\n+      self.receive new Robot.TextMessage(author, hubot_msg)\n     bot.onPrivateMessage (from, message)=>\n       user = self.userForId(from.match(/_(\\d+)@/)[1])\n       author = { name: user.name, reply_to: from }\n-      self.receive new Robot.Message(author, \"#{self.name}: #{message}\")\n+      self.receive new Robot.TextMessage(author, \"#{self.name}: #{message}\")\n     bot.connect()\n \n     @bot = bot", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=ad58193001f021cf57b01df1220cf7348df504ed", "filename": "src/hubot/irc.coffee", "sha": "07d6f463a59d4a635a5fd4afbcafc02b766bba75", "additions": 1, "patch": "@@ -40,7 +40,7 @@ class IrcBot extends Robot\n         room: toRoom,\n       }\n \n-      self.receive new Robot.Message(user, message)\n+      self.receive new Robot.TextMessage(user, message)\n \n     bot.addListener 'error', (message) ->\n         console.error('ERROR: %s: %s', message.command, message.args.join(' '))", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/shell.coffee?ref=ad58193001f021cf57b01df1220cf7348df504ed", "filename": "src/hubot/shell.coffee", "sha": "2a68fa775c9b142359d740b2476127f615d329ac", "additions": 1, "patch": "@@ -18,7 +18,7 @@ class Shell extends Robot\n     process.stdin.on 'data', (txt) =>\n       txt.toString().split(\"\\n\").forEach (line) =>\n         return if line.length == 0\n-        @receive new Robot.Message user, line\n+        @receive new Robot.TextMessage user, line\n \n     setTimeout =>\n       user   = @userForId('1', {name: \"Shell\"})", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/twilio.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/twilio.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/twilio.coffee?ref=ad58193001f021cf57b01df1220cf7348df504ed", "filename": "src/hubot/twilio.coffee", "sha": "34be1bf3f5069c0d524bb66f19e7465bd44b4ac5", "additions": 1, "patch": "@@ -42,7 +42,7 @@ class Twilio extends Robot\n   handle: (body, from) ->\n     return if body.length == 0\n     user = @userForId from\n-    @receive new Robot.Message user, body\n+    @receive new Robot.TextMessage user, body\n \n   post: (message, to, callback) ->\n     host = \"api.twilio.com\"", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ad58193001f021cf57b01df1220cf7348df504ed/src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/xmpp.coffee?ref=ad58193001f021cf57b01df1220cf7348df504ed", "filename": "src/hubot/xmpp.coffee", "sha": "16d91473b116399c9af165473835cb0bec7e5e97", "additions": 1, "patch": "@@ -62,7 +62,7 @@ class XmppBot extends Robot\n       room: room\n     }\n     \n-    @receive new Robot.Message user, message\n+    @receive new Robot.TextMessage user, message\n \n   send: (user, strings...) ->\n     strings.forEach (str) =>", "changes": 2}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/ad58193001f021cf57b01df1220cf7348df504ed/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ad58193001f021cf57b01df1220cf7348df504ed/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=ad58193001f021cf57b01df1220cf7348df504ed", "filename": "src/robot.coffee", "sha": "13d5e8f88e39b06b350127643664beaa63e2720a", "additions": 57, "patch": "@@ -26,7 +26,7 @@ class Robot\n   #\n   # Returns nothing.\n   hear: (regex, callback) ->\n-    @listeners.push new Listener(@, regex, callback)\n+    @listeners.push new TextListener(@, regex, callback)\n \n   # Public: Adds a Listener that attempts to match incoming messages directed at the robot\n   # based on a Regex.  All regexes treat patterns like they begin with a '^'\n@@ -51,15 +51,35 @@ class Robot\n       newRegex = new RegExp(\"^#{@name}:?\\\\s*#{pattern}\", modifiers)\n \n     console.log newRegex.toString()\n-    @listeners.push new Listener(@, newRegex, callback)\n+    @listeners.push new TextListener(@, newRegex, callback)\n+\n+  # Public: Adds a Listener that triggers when anyone enters the room.\n+  #\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  enter: (callback) ->\n+    @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.EnterMessage), callback)\n+\n+  # Public: Adds a Listener that triggers when anyone leaves the room.\n+  #\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  leave: (callback) ->\n+    @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.LeaveMessage), callback)\n \n   # Public: Passes the given message to any interested Listeners.\n   #\n   # message - A Robot.Message instance.\n   #\n   # Returns nothing.\n   receive: (message) ->\n-    @listeners.forEach (lst) -> lst.call message\n+    @listeners.forEach (lst) ->\n+      try\n+        lst.call message\n+      catch ex\n+        console.log \"error while calling listener: #{ex}\"\n \n   # Public: Loads every script in the given path.\n   #\n@@ -202,11 +222,18 @@ class Robot.Brain\n       @data[k] = data[k]\n \n class Robot.Message\n+  # Represents an incoming message from the chat.\n+  #\n+  # user - A Robot.User instance that sent the message.\n+  constructor: (@user) ->\n+\n+class Robot.TextMessage extends Robot.Message\n   # Represents an incoming message from the chat.\n   #\n   # user - A Robot.User instance that sent the message.\n   # text - The String message contents.\n   constructor: (@user, @text) ->\n+    super @user\n \n   # Determines if the message matches the given regex.\n   #\n@@ -216,15 +243,26 @@ class Robot.Message\n   match: (regex) ->\n     @text.match regex\n \n+# Represents an incoming user entrance notification.\n+#\n+# user - A Robot.User instance for the user who entered.\n+class Robot.EnterMessage extends Robot.Message\n+\n+# Represents an incoming user exit notification.\n+#\n+# user - A Robot.User instance for the user who left.\n+class Robot.LeaveMessage extends Robot.Message\n+\n+\n class Listener\n   # Listeners receive every message from the chat source and decide if they want\n   # to act on it.\n   #\n   # robot    - The current Robot instance.\n-  # regex    - The Regex that determines if this listener should trigger the\n+  # matcher  - The Function that determines if this listener should trigger the\n   #            callback.\n   # callback - The Function that is triggered if the incoming message matches.\n-  constructor: (@robot, @regex, @callback) ->\n+  constructor: (@robot, @matcher, @callback) ->\n \n   # Public: Determines if the listener likes the content of the message.  If\n   # so, a Response built from the given Message is passed to the Listener\n@@ -234,9 +272,22 @@ class Listener\n   #\n   # Returns nothing.\n   call: (message) ->\n-    if match = message.match @regex\n+    if match = @matcher message\n       @callback new @robot.Response(@robot, message, match)\n \n+class TextListener extends Listener\n+  # TextListeners receive every message from the chat source and decide if they want\n+  # to act on it.\n+  #\n+  # robot    - The current Robot instance.\n+  # regex    - The Regex that determines if this listener should trigger the\n+  #            callback.\n+  # callback - The Function that is triggered if the incoming message matches.\n+  constructor: (@robot, @regex, @callback) ->\n+    @matcher = (message) =>\n+      if message instanceof Robot.TextMessage\n+        message.match @regex\n+\n class Robot.Response\n   # Public: Responses are sent to matching listeners.  Messages know about the\n   # content and user that made the original message, and how to reply back to", "changes": 63}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/ad58193001f021cf57b01df1220cf7348df504ed/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ad58193001f021cf57b01df1220cf7348df504ed/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=ad58193001f021cf57b01df1220cf7348df504ed", "filename": "test/tests.coffee", "sha": "9e8ba8e8f70a93f7c23c0ab841e81f2b9b655e1f", "additions": 2, "patch": "@@ -42,10 +42,10 @@ class Helper extends Robot\n     strings.forEach (str) =>\n       @send user, \"#{user.name}: #{str}\"\n \n-  # modified to accept a string and pass the Robot.Message to super()\n+  # modified to accept a string and pass the Robot.TextMessage to super()\n   receive: (text) ->\n     user = new Robot.User 1, 'helper'\n-    super new Robot.Message(user, text)\n+    super new Robot.TextMessage(user, text)\n \n class Helper.Response extends Robot.Response\n   http: (url) ->", "changes": 4}], "61": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e2495f7e664f589478a2b9bf1a1065a41e839993/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e2495f7e664f589478a2b9bf1a1065a41e839993/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=e2495f7e664f589478a2b9bf1a1065a41e839993", "filename": "src/hubot/irc.coffee", "sha": "473eca3f52ff503a6f9808ed164adc18a34da78b", "additions": 2, "patch": "@@ -15,6 +15,7 @@ class IrcBot extends Robot\n     self = @\n     options =\n       server:   process.env.HUBOT_IRC_SERVER\n+      port:   process.env.HUBOT_IRC_PORT\n       rooms:   process.env.HUBOT_IRC_ROOMS.split(\",\")\n       nick: process.env.HUBOT_IRC_NICK\n \n@@ -23,6 +24,7 @@ class IrcBot extends Robot\n     bot = new Irc.Client options.server, options.nick, {\n       debug: true,\n       channels: options.rooms,\n+      port: options.port,\n     }\n \n     next_id = 1", "changes": 2}], "64": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/345528fd658757fa4a5db3f368ab40b825eb76dc/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/345528fd658757fa4a5db3f368ab40b825eb76dc/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=345528fd658757fa4a5db3f368ab40b825eb76dc", "filename": "src/hubot/irc.coffee", "sha": "a3eb15826002b5d2c32c2a263fd931a7e035b773", "additions": 14, "patch": "@@ -23,12 +23,16 @@ class IrcBot extends Robot\n \n     console.log options\n \n-    bot = new Irc.Client options.server, options.nick, {\n-      password: options.password,\n-      debug: true,\n-      channels: options.rooms,\n-      port: options.port\n-    }\n+    client_options = {\n+          password: options.password,\n+          debug: true,\n+          port: options.port,\n+        }\n+\n+    unless options.nickpass\n+        client_options['channels'] = options.rooms\n+\n+    bot = new Irc.Client options.server, options.nick, client_options\n \n     next_id = 1\n     user_id = {}\n@@ -37,6 +41,10 @@ class IrcBot extends Robot\n       bot.addListener 'notice', (from, to, text) ->\n         if from == 'NickServ' and text.indexOf('registered') != -1\n           bot.say 'NickServ', \"identify #{options.nickpass}\"\n+        else if options.nickpass and from == 'NickServ' and text.indexOf('now identified') != -1\n+            for room in options.rooms\n+                bot.join room, () ->\n+                    console.log('%s has joined %s', options.nick, room)\n \n     bot.addListener 'message', (from, toRoom, message) ->\n       console.log \"From #{from} to #{toRoom}: #{message}\"", "changes": 20}], "67": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/a56f0a75a08dc28e132ee8927faf700e1b9d23b8/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a56f0a75a08dc28e132ee8927faf700e1b9d23b8/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=a56f0a75a08dc28e132ee8927faf700e1b9d23b8", "filename": "src/hubot/irc.coffee", "sha": "03cce075ff8d70b57044aa92214f300e16f563a8", "additions": 4, "patch": "@@ -14,15 +14,17 @@ class IrcBot extends Robot\n   run: ->\n     self = @\n     options =\n-      server:   process.env.HUBOT_IRC_SERVER\n+      server:  process.env.HUBOT_IRC_SERVER\n+      port:    process.env.HUBOT_IRC_PORT\n       rooms:   process.env.HUBOT_IRC_ROOMS.split(\",\")\n-      nick: process.env.HUBOT_IRC_NICK\n+      nick:    process.env.HUBOT_IRC_NICK\n \n     console.log options\n \n     bot = new Irc.Client options.server, options.nick, {\n       debug: true,\n       channels: options.rooms,\n+      port: options.port || 6667\n     }\n \n     next_id = 1", "changes": 6}], "69": [{"status": "modified", "deletions": 11, "raw_url": "https://github.com/hubotio/hubot/raw/2cdd54a524463badb44dd631f5e053f425a34a88/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2cdd54a524463badb44dd631f5e053f425a34a88/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=2cdd54a524463badb44dd631f5e053f425a34a88", "filename": "src/hubot/irc.coffee", "sha": "1990b1f8b30feb9941fe77c342e123f14875d2d1", "additions": 18, "patch": "@@ -11,6 +11,12 @@ class IrcBot extends Robot\n     for str in strings\n       @send user, \"#{user.name}: #{str}\"\n \n+  userForName: (name) ->\n+    lowerName = name.toLowerCase()\n+    if lowerName of (@brain.data.users or { })\n+      return @brain.data.users[lowerName]\n+    null\n+\n   run: ->\n     self = @\n     options =\n@@ -34,9 +40,6 @@ class IrcBot extends Robot\n \n     bot = new Irc.Client options.server, options.nick, client_options\n \n-    next_id = 1\n-    user_id = {}\n-\n     if options.nickpass?\n       bot.addListener 'notice', (from, to, text) ->\n         if from == 'NickServ' and text.indexOf('registered') != -1\n@@ -49,17 +52,21 @@ class IrcBot extends Robot\n     bot.addListener 'message', (from, toRoom, message) ->\n       console.log \"From #{from} to #{toRoom}: #{message}\"\n \n-      if message.match new RegExp \"^#{options.nick}\", \"i\"\n-        unless user_id[from]\n-          user_id[from] = next_id\n-          next_id = next_id + 1\n-\n-      user = new Robot.User user_id[from], {\n-        room: toRoom,\n-      }\n+      user = self.userForId(from.toLowerCase(), {name: from})\n+      user.room = toRoom\n \n       self.receive new Robot.TextMessage(user, message)\n \n+    bot.addListener 'names', (channel, names) ->\n+      for name of names\n+        self.userForId(name.toLowerCase(), {name: name})\n+\n+    bot.addListener 'join', (channel, name) ->\n+      self.userForId(name.toLowerCase(), {name: name})\n+\n+    bot.addListener 'nick', (oldName, newName, channel) ->\n+      self.userForId(newName.toLowerCase(), {name: newName})\n+\n     bot.addListener 'error', (message) ->\n         console.error('ERROR: %s: %s', message.command, message.args.join(' '))\n ", "changes": 29}], "70": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/61e0bc644d6a89a7e17f69e848cf3d08ab660c39/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61e0bc644d6a89a7e17f69e848cf3d08ab660c39/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=61e0bc644d6a89a7e17f69e848cf3d08ab660c39", "filename": "src/hubot/hipchat.coffee", "sha": "339384411d3c5b363117d9702ed22a6bec16f22c", "additions": 1, "patch": "@@ -58,7 +58,7 @@ class HipChat extends Robot\n     bot.onMessage (channel, from, message)->\n       author = { name: from, reply_to: channel }\n       hubot_msg = message.replace(mention, \"#{self.name}: \")\n-      self.receive new Robot.Message(author, hubot_msg)\n+      self.receive new Robot.TextMessage(author, hubot_msg)\n     bot.onPrivateMessage (from, message)=>\n       user = self.userForId(from.match(/_(\\d+)@/)[1])\n       author = { name: user.name, reply_to: from }", "changes": 2}], "74": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/66fb4f9f12c053220075d98faee6f83c8ef4d01d/src/hubot/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/66fb4f9f12c053220075d98faee6f83c8ef4d01d/src/hubot/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/translate.coffee?ref=66fb4f9f12c053220075d98faee6f83c8ef4d01d", "filename": "src/hubot/scripts/translate.coffee", "sha": "180d33cc58e6d6ac6a6c2b6d1dd893e50ba8aa38", "additions": 74, "patch": "@@ -2,19 +2,83 @@\n #\n # translate me <phrase> - Searches for a translation for the <phrase> and then\n #                         prints that bad boy out.\n-module.exports = (robot) ->\n-  robot.respond /(translate)( me)? (.*)/i, (msg) ->\n-    term   = \"\\\"#{msg.match[3]}\\\"\"\n+#\n+# translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n+#\n \n+languages =\n+  \"af\":\"Afrikaans\",\n+  \"sq\":\"Albanian\",\n+  \"ar\":\"Arabic\",\n+  \"be\":\"Belarusian\",\n+  \"bg\":\"Bulgarian\",\n+  \"ca\":\"Catalan\",\n+  \"zh-CN\":\"Simplified Chinese\",\n+  \"zh-TW\":\"Traditional Chinese\",\n+  \"hr\":\"Croatian\",\n+  \"cs\":\"Czech\",\n+  \"da\":\"Danish\",\n+  \"nl\":\"Dutch\",\n+  \"en\":\"English\",\n+  \"et\":\"Estonian\",\n+  \"tl\":\"Filipino\",\n+  \"fi\":\"Finnish\",\n+  \"fr\":\"French\",\n+  \"gl\":\"Galician\",\n+  \"de\":\"German\",\n+  \"el\":\"Greek\",\n+  \"iw\":\"Hebrew\",\n+  \"hi\":\"Hindi\",\n+  \"hu\":\"Hungarian\",\n+  \"is\":\"Icelandic\",\n+  \"id\":\"Indonesian\",\n+  \"ga\":\"Irish\",\n+  \"it\":\"Italian\",\n+  \"ja\":\"Japanese\",\n+  \"ko\":\"Korean\",\n+  \"lv\":\"Latvian\",\n+  \"lt\":\"Lithuanian\",\n+  \"mk\":\"Macedonian\",\n+  \"ms\":\"Malay\",\n+  \"mt\":\"Maltese\",\n+  \"no\":\"Norwegian\",\n+  \"fa\":\"Persian\",\n+  \"pl\":\"Polish\",\n+  \"pt\":\"Portuguese\",\n+  \"ro\":\"Romanian\",\n+  \"ru\":\"Russian\",\n+  \"sr\":\"Serbian\",\n+  \"sk\":\"Slovak\",\n+  \"sl\":\"Slovenian\",\n+  \"es\":\"Spanish\",\n+  \"sw\":\"Swahili\",\n+  \"sv\":\"Swedish\",\n+  \"th\":\"Thai\",\n+  \"tr\":\"Turkish\",\n+  \"uk\":\"Ukranian\",\n+  \"vi\":\"Vietnamese\",\n+  \"cy\":\"Welsh\",\n+  \"yi\":\"Yiddish\"\n+  \n+getCode = (language,languages) ->\n+  for code, lang of languages\n+      return code if lang.toLowerCase() is language.toLowerCase()\n+\n+module.exports = (robot) ->\n+  robot.respond /(translate)( me)?(( from) ([a-z]*))?(( (in)?to) ([a-z]*))? (.*)/i, (msg) ->\n+    term   = \"\\\"#{msg.match[10]}\\\"\"\n+    origin = if msg.match[5] isnt undefined then getCode(msg.match[5], languages) else 'auto'\n+    target = if msg.match[9] isnt undefined then getCode(msg.match[9], languages) else 'en'\n+    \n     msg.http(\"http://translate.google.com/translate_a/t\")\n       .query({\n         client: 't'\n         hl: 'en'\n         multires: 1\n         sc: 1\n-        sl: 'auto'\n+        sl: origin\n         ssel: 0\n-        tl: 'en'\n+        tl: target\n         tsel: 0\n         uptl: \"en\"\n         text: term\n@@ -23,7 +87,11 @@ module.exports = (robot) ->\n         data   = body\n         if data.length > 4 && data[0] == '['\n           parsed = eval(data)\n+          language =languages[parsed[2]]\n           parsed = parsed[0] && parsed[0][0] && parsed[0][0][0]\n           if parsed\n-            msg.send \"#{term} means #{parsed}\"\n+            if msg.match[9] is undefined\n+              msg.send \"#{term} is #{language} for #{parsed}\"\n+            else\n+              msg.send \"The #{language} #{term} translates as #{parsed} in #{languages[target]}\"\n ", "changes": 80}], "75": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/creator.coffee", "sha": "5b0d31a0fa823d3d3eb114a9b39de574462cdb40", "additions": 11, "patch": "@@ -36,7 +36,7 @@ class Creator\n   #\n   # path - The destination\n   copyDefaultScripts: (path) ->\n-    Fs.readdirSync(@scriptsDir).forEach (file) =>\n+    for file in Fs.readdirSync(@scriptsDir)\n       @copy \"#{@scriptsDir}/#{file}\", \"#{path}/#{file}\"\n \n   # Run the creator process\n@@ -52,7 +52,15 @@ class Creator\n \n     @copyDefaultScripts(\"#{@path}/scripts\")\n \n-    [\"Procfile\", \"package.json\", \"README.md\", \".gitignore\", \"bin/hubot\", \"hubot-scripts.json\"].forEach (file) =>\n-      @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\"\n+    files = [\n+      \"Procfile\",\n+      \"package.json\",\n+      \"README.md\",\n+      \".gitignore\",\n+      \"bin/hubot\",\n+      \"hubot-scripts.json\"\n+    ]\n+\n+    @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\" for file in files\n \n exports.Creator = Creator", "changes": 14}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/campfire.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/hubot/campfire.coffee", "sha": "f4acaa88dbc8f03c8e44e4a1e3a5ce421137b7ea", "additions": 4, "patch": "@@ -39,7 +39,7 @@ class Campfire extends Robot\n     bot.Me (err, data) ->\n       bot.info = data.user\n       bot.name = bot.info.name\n-      bot.rooms.forEach (room_id) ->\n+      for room_id in bot.rooms\n         bot.Room(room_id).join (err, callback) ->\n           bot.Room(room_id).listen()\n \n@@ -49,7 +49,7 @@ module.exports = Campfire\n \n class CampfireStreaming extends EventEmitter\n   constructor: (options) ->\n-    if options.token? && options.rooms? && options.account?\n+    if options.token? and options.rooms? and options.account?\n       @token         = options.token\n       @rooms         = options.rooms.split(\",\")\n       @account       = options.account\n@@ -169,7 +169,7 @@ class CampfireStreaming extends EventEmitter\n       \"headers\": headers\n \n     if method is \"POST\"\n-      if typeof(body) != \"string\"\n+      if typeof(body) isnt \"string\"\n         body = JSON.stringify body\n \n       body = new Buffer(body)\n@@ -189,7 +189,7 @@ class CampfireStreaming extends EventEmitter\n         try\n           callback null, JSON.parse(data)\n         catch err\n-          callback null, data || { }\n+          callback null, data or { }\n       response.on \"error\", (err) ->\n         callback err, { }\n ", "changes": 8}, {"status": "modified", "deletions": 18, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/hubot/hipchat.coffee", "sha": "c93773a4a30d7566cca45365ea552d3eba01c281", "additions": 22, "patch": "@@ -5,22 +5,22 @@ Wobot        = require(\"wobot\").Bot\n class HipChat extends Robot\n   send: (user, strings...) ->\n     console.log \"Sending\"\n-    strings.forEach (str) =>\n+    for str in strings\n       @bot.message user.reply_to, str\n \n   reply: (user, strings...) ->\n     console.log \"Replying\"\n-    strings.forEach (str) =>\n+    for str in strings\n       @send user, \"@#{user.name} #{str}\"\n \n   run: ->\n     self = @\n     @options =\n       token:    process.env.HUBOT_HIPCHAT_TOKEN\n       jid:      process.env.HUBOT_HIPCHAT_JID\n-      name:     process.env.HUBOT_HIPCHAT_NAME || \"#{self.name} Bot\"\n+      name:     process.env.HUBOT_HIPCHAT_NAME or \"#{self.name} Bot\"\n       password: process.env.HUBOT_HIPCHAT_PASSWORD\n-      rooms:    process.env.HUBOT_HIPCHAT_ROOMS || \"@All\"\n+      rooms:    process.env.HUBOT_HIPCHAT_ROOMS or \"@All\"\n     \n     console.log \"Options:\", @options\n     bot = new Wobot(jid: @options.jid, name: @options.name, password: @options.password)\n@@ -30,44 +30,48 @@ class HipChat extends Robot\n \n     bot.onConnect =>\n       console.log \"Connected to HipChat\"\n-      if @options.rooms == \"@All\"\n-        @get \"/v1/rooms/list\", (err, response)->\n+      if @options.rooms is \"@All\"\n+        @get \"/v1/rooms/list\", (err, response) ->\n           if response\n-            response.rooms.forEach (room)->\n+            for room in response.rooms\n               console.log \"Joining #{room.xmpp_jid}\"\n               bot.join room.xmpp_jid\n           else\n             console.log \"Can't list rooms: #{err}\"\n       else\n-        @options.rooms.split(',').forEach (room_id)->\n+        for room_id in @options.rooms.split(',')\n           console.log \"Joining #{room_id}\"\n           bot.join room_id\n-      @get \"/v1/users/list\", (err, response)->\n+\n+      @get \"/v1/users/list\", (err, response) ->\n         if response\n-          response.users.forEach (user)->\n+          for user in response.users\n             self.userForId user.user_id, user\n         else\n           console.log \"Can't list rooms: #{err}\"\n-    bot.onError (message)->\n+\n+    bot.onError (message) ->\n       # If HipChat sends an error, we get the error message from XMPP.\n       # Otherwise, we get an Error object from the Node connection.\n       if message.message\n         console.log \"Error talking to HipChat:\", message.message\n       else\n         console.log \"Received error from HipChat:\", message\n-    bot.onMessage (channel, from, message)->\n-      author = { name: from, reply_to: channel }\n+\n+    bot.onMessage (channel, from, message) ->\n+      author = name: from, reply_to: channel\n       hubot_msg = message.replace(mention, \"#{self.name}: \")\n       self.receive new Robot.TextMessage(author, hubot_msg)\n-    bot.onPrivateMessage (from, message)=>\n+\n+    bot.onPrivateMessage (from, message) =>\n       user = self.userForId(from.match(/_(\\d+)@/)[1])\n-      author = { name: user.name, reply_to: from }\n+      author = name: user.name, reply_to: from\n       self.receive new Robot.TextMessage(author, \"#{self.name}: #{message}\")\n+\n     bot.connect()\n \n     @bot = bot\n \n-\n   # Convenience HTTP Methods for posting on behalf of the token\"d user\n   get: (path, callback) ->\n     @request \"GET\", path, null, callback\n@@ -77,7 +81,7 @@ class HipChat extends Robot\n \n   request: (method, path, body, callback) ->\n     console.log method, path, body\n-    headers = { \"Host\": \"api.hipchat.com\" }\n+    headers = \"Host\": \"api.hipchat.com\"\n \n     options =\n       \"agent\"  : false\n@@ -108,7 +112,7 @@ class HipChat extends Robot\n         try\n           callback null, JSON.parse(data)\n         catch err\n-          callback null, data || { }\n+          callback null, data or { }\n       response.on \"error\", (err) ->\n         callback err, { }\n ", "changes": 40}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/hubot/irc.coffee", "sha": "c73ce4735467cb52153ad65db67cf314cd37f4fe", "additions": 5, "patch": "@@ -39,12 +39,12 @@ class IrcBot extends Robot\n \n     if options.nickpass?\n       bot.addListener 'notice', (from, to, text) ->\n-        if from == 'NickServ' and text.indexOf('registered') != -1\n+        if from is 'NickServ' and text.indexOf('registered') isnt -1\n           bot.say 'NickServ', \"identify #{options.nickpass}\"\n-        else if options.nickpass and from == 'NickServ' and text.indexOf('now identified') != -1\n-            for room in options.rooms\n-                bot.join room, () ->\n-                    console.log('%s has joined %s', options.nick, room)\n+        else if options.nickpass and from is 'NickServ' and text.indexOf('now identified') isnt -1\n+          for room in options.rooms\n+            bot.join room, ->\n+              console.log('%s has joined %s', options.nick, room)\n \n     bot.addListener 'message', (from, toRoom, message) ->\n       console.log \"From #{from} to #{toRoom}: #{message}\"", "changes": 10}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/google-images.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/hubot/scripts/google-images.coffee", "sha": "5d6676d0b2aadd8164b74addea2f1c1505d3f1e8", "additions": 2, "patch": "@@ -17,7 +17,8 @@ module.exports = (robot) ->\n       msg.send url\n \n   robot.respond /(?:mo?u)?sta(?:s|c)he?(?: me)? (.*)/i, (msg) ->\n-    imagery    = msg.match[1]\n+    imagery = msg.match[1]\n+\n     if imagery.match /^https?:\\/\\//i\n       msg.send \"#{mustachify}#{imagery}\"\n     else", "changes": 3}, {"status": "modified", "deletions": 11, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/scripts/maps.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/scripts/maps.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/maps.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/hubot/scripts/maps.coffee", "sha": "5dbf370b22daaf79d1970198332de12bfc9449a7", "additions": 11, "patch": "@@ -5,19 +5,19 @@\n module.exports = (robot) ->\n \n   robot.respond /(?:(satellite|terrain|hybrid)[- ])?map me (.+)/i, (msg) ->\n-    mapType  = msg.match[1] || \"roadmap\"\n+    mapType  = msg.match[1] or \"roadmap\"\n     location = msg.match[2]\n-    mapUrl      = \"http://maps.google.com/maps/api/staticmap?markers=\" +\n+    mapUrl   = \"http://maps.google.com/maps/api/staticmap?markers=\" +\n+                escape(location) +\n+                \"&size=400x400&maptype=\" +\n+                mapType +\n+                \"&sensor=false\" +\n+                \"&format=png\" # So campfire knows it's an image\n+    url      = \"http://maps.google.com/maps?q=\" +\n                escape(location) +\n-               \"&size=400x400&maptype=\" +\n-               mapType +\n-               \"&sensor=false\" +\n-               \"&format=png\" # So campfire knows it's an image\n-    url         = \"http://maps.google.com/maps?q=\" +\n-                  escape(location) +\n-                  \"&hl=en&sll=37.0625,-95.677068&sspn=73.579623,100.371094&vpsrc=0&hnear=\" +\n-                  escape(location) +\n-                  \"&t=m&z=11\"\n+              \"&hl=en&sll=37.0625,-95.677068&sspn=73.579623,100.371094&vpsrc=0&hnear=\" +\n+              escape(location) +\n+              \"&t=m&z=11\"\n \n     msg.send mapUrl\n     msg.send url", "changes": 22}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/roles.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/hubot/scripts/roles.coffee", "sha": "91876feff455ef807c29e4ef043bd1d0c1f384a2", "additions": 1, "patch": "@@ -56,7 +56,7 @@ module.exports = (robot) ->\n         if newRole not in user.roles\n           msg.send \"I know.\"\n         else\n-          user.roles = (role for role in user.roles when role != newRole)\n+          user.roles = (role for role in user.roles when role isnt newRole)\n           msg.send \"Ok, #{name} is no longer #{newRole}.\"\n \n       else", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/scripts/rules.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/scripts/rules.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/rules.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/hubot/scripts/rules.coffee", "sha": "7d2266c8fbe85c013a410ad37da2027af310766b", "additions": 1, "patch": "@@ -18,7 +18,7 @@ otherRules = [\n module.exports = (robot) ->\n   robot.respond /(the rules|the laws)/i, (msg) ->\n     text = msg.message.text\n-    if text.match(/apple/i) || text.match(/dev/i)\n+    if text.match(/apple/i) or text.match(/dev/i)\n       msg.send otherRules.join('\\n')\n     else\n       msg.send rules.join('\\n')", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/scripts/youtube.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/scripts/youtube.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/youtube.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/hubot/scripts/youtube.coffee", "sha": "c3240d7dbc4eb0eb11c03a3f149f7a952717632e", "additions": 1, "patch": "@@ -18,5 +18,5 @@ module.exports = (robot) ->\n         video  = msg.random videos\n \n         video.link.forEach (link) ->\n-          if link.rel == \"alternate\" && link.type == \"text/html\"\n+          if link.rel is \"alternate\" and link.type is \"text/html\"\n             msg.send link.href", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/twilio.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/twilio.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/twilio.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/hubot/twilio.coffee", "sha": "0124957273bd77d292c437998ad53364d231e41a", "additions": 2, "patch": "@@ -20,7 +20,7 @@ class Twilio extends Robot\n         console.log \"successful sending #{body}\"\n \n   reply: (user, strings...) ->\n-    strings.forEach (str) =>\n+    for str in strings\n       @send user, \"#{user.name}: #{str}\"\n \n   respond: (regex, callback) ->\n@@ -37,7 +37,7 @@ class Twilio extends Robot\n       response.writeHead 200, 'Content-Type': 'text/plain'\n       response.end()\n \n-    server.listen (parseInt(process.env.PORT) || 8080), \"0.0.0.0\"\n+    server.listen (parseInt(process.env.PORT) or 8080), \"0.0.0.0\"\n \n   handle: (body, from) ->\n     return if body.length is 0", "changes": 4}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/xmpp.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/hubot/xmpp.coffee", "sha": "007aa7ad23d74d38ffe902c30e31553a2678fe6f", "additions": 3, "patch": "@@ -46,7 +46,7 @@ class XmppBot extends Robot\n       return\n \n     # ignore non-messages\n-    return if !stanza.is 'message' || stanza.attrs.type not in ['groupchat', 'direct', 'chat']\n+    return if !stanza.is 'message' or stanza.attrs.type not in ['groupchat', 'direct', 'chat']\n \n     # ignore our own messages\n     return if @options.username in stanza.attrs.from\n@@ -66,7 +66,7 @@ class XmppBot extends Robot\n     @receive new Robot.TextMessage user, message\n \n   send: (user, strings...) ->\n-    strings.forEach (str) =>\n+    for str in strings\n       console.log \"Sending to #{user.room}: #{str}\"\n \n       to = if user.type in ['direct', 'chat'] then user.room + '/' + user.id else user.room\n@@ -81,7 +81,7 @@ class XmppBot extends Robot\n       @client.send message\n \n   reply: (user, strings...) ->\n-    strings.forEach (str) =>\n+    for str in strings\n       @send user, \"#{user.name}: #{str}\"\n \n module.exports = XmppBot", "changes": 6}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/e0589a88ee34890894b2f07133710d7e4266af14/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e0589a88ee34890894b2f07133710d7e4266af14/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=e0589a88ee34890894b2f07133710d7e4266af14", "filename": "src/robot.coffee", "sha": "ef931dbd6cb714699e6c268d718f85bf81fb1d2c", "additions": 3, "patch": "@@ -16,7 +16,8 @@ class Robot\n     @listeners   = []\n     @loadPaths   = []\n     @enableSlash = false\n-    if path then @load path\n+\n+    @load path if path\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n@@ -76,7 +77,7 @@ class Robot\n   #\n   # Returns nothing.\n   receive: (message) ->\n-    @listeners.forEach (lst) ->\n+    for lst in @listeners\n       try\n         lst.call message\n       catch ex\n@@ -246,7 +247,6 @@ class Robot.EnterMessage extends Robot.Message\n # user - A Robot.User instance for the user who left.\n class Robot.LeaveMessage extends Robot.Message\n \n-\n class Listener\n   # Listeners receive every message from the chat source and decide if they\n   # want to act on it.", "changes": 6}], "76": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3a2318feb740f459c9c58e13709dd5105adb8e4e/src/hubot/scripts/jump.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3a2318feb740f459c9c58e13709dd5105adb8e4e/src/hubot/scripts/jump.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/jump.coffee?ref=3a2318feb740f459c9c58e13709dd5105adb8e4e", "filename": "src/hubot/scripts/jump.coffee", "sha": "b5b86e02b879d95872e24a79cfa70b72a9779aa8", "additions": 22, "patch": "@@ -0,0 +1,22 @@\n+# Makes humbot jump.\r\n+#\r\n+# jump - Make humbot jump.\r\n+\r\n+\r\n+jump = (msg, counter) ->\r\n+  height = (msg.match[1] ? '').trim()\r\n+  if height\r\n+    msg.send \"#{msg.robot.name} is jumping #{height}\"\r\n+    return\r\n+\r\n+  switch counter\r\n+    when 3 then msg.reply \"Are you mad at me? Why don't you talk to me? How height must I jump?\"\r\n+    when 4 then msg.reply \"Ok, I give up! :'(\"; return\r\n+    else        msg.reply \"How height?\"\r\n+\r\n+  msg.waitResponse (msg) -> jump(msg, counter + 1)\r\n+\r\n+\r\n+module.exports = (robot) ->\r\n+  robot.respond /jump( .*)?\\s*$/i, (msg) ->\r\n+    jump(msg, 0)\r", "changes": 22}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/3a2318feb740f459c9c58e13709dd5105adb8e4e/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3a2318feb740f459c9c58e13709dd5105adb8e4e/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=3a2318feb740f459c9c58e13709dd5105adb8e4e", "filename": "src/robot.coffee", "sha": "b2f77c5a81676990c2d06f18ecd2be952eac5556", "additions": 40, "patch": "@@ -14,6 +14,7 @@ class Robot\n     @commands    = []\n     @Response    = Robot.Response\n     @listeners   = []\n+    @eatListeners= {}\n     @loadPaths   = []\n     @enableSlash = false\n \n@@ -55,6 +56,22 @@ class Robot\n     console.log newRegex.toString()\n     @listeners.push new TextListener(@, newRegex, callback)\n \n+  # Public: Adds a Listener that receives the next message from the user and avoid\n+  # further processing of it.\n+  #\n+  # user     - The user name.\n+  # callback - A Function that is called with a Response object. msg.match[1] will \n+  #            contain the message text without the bot name\n+  #\n+  # Returns nothing.\n+  eatOneResponse: (user, callback) ->  \n+    if @enableSlash\n+      newRegex = new RegExp(\"^(?:\\/|#{@name}:?)\\\\s*(.*?)\\\\s*$\", \"i\")\n+    else\n+      newRegex = new RegExp(\"^#{@name}:?\\\\s*(.*?)\\\\s*$\", \"i\")\n+    \n+    @eatListeners[user.id] = new TextListener(@, newRegex, callback)\n+  \n   # Public: Adds a Listener that triggers when anyone enters the room.\n   #\n   # callback - A Function that is called with a Response object.\n@@ -77,6 +94,16 @@ class Robot\n   #\n   # Returns nothing.\n   receive: (message) ->\n+    if @eatListeners[message.user.id]?\n+      lst = @eatListeners[message.user.id]\n+      delete @eatListeners[message.user.id]\n+      \n+      if lst.call message\n+        return\n+      else\n+        # Put back to try again next time\n+        @eatListeners[message.user.id] = lst\n+    \n     for lst in @listeners\n       try\n         lst.call message\n@@ -263,10 +290,13 @@ class Listener\n   #\n   # message - a Robot.Message instance.\n   #\n-  # Returns nothing.\n+  # Returns true if it was used, false if ignored.\n   call: (message) ->\n     if match = @matcher message\n       @callback new @robot.Response(@robot, message, match)\n+      return true\n+    else\n+      return false\n \n class TextListener extends Listener\n   # TextListeners receive every message from the chat source and decide if they want\n@@ -308,7 +338,15 @@ class Robot.Response\n   # Returns nothing.\n   reply: (strings...) ->\n     @robot.reply @message.user, strings...\n-\n+  \n+  # Public: Waits for the next message from the current user.\n+  #\n+  # callback - Called with the user response\n+  #\n+  # Returns nothing.\n+  waitResponse: (callback) ->\n+    @robot.eatOneResponse @message.user, callback\n+    \n   # Public: Picks a random item from the given items.\n   #\n   # items - An Array of items (usually Strings).", "changes": 42}], "79": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/7c9e8a87fb88e1b8aa22fcd7b718c5f5419a7a8b/src/hubot/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/7c9e8a87fb88e1b8aa22fcd7b718c5f5419a7a8b/src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/xmpp.coffee?ref=7c9e8a87fb88e1b8aa22fcd7b718c5f5419a7a8b", "filename": "src/hubot/xmpp.coffee", "sha": "ddca6596ab340440fe0464046576240a324a57de", "additions": 12, "patch": "@@ -84,5 +84,17 @@ class XmppBot extends Robot\n     for str in strings\n       @send user, \"#{user.name}: #{str}\"\n \n+  topic: (user, strings...) ->\n+    string = strings.join \"\\n\"\n+\n+    message = new Xmpp.Element('message',\n+                from: @options.username,\n+                to: user.room\n+                type: user.type\n+              ).\n+              c('subject').t(string)\n+\n+    @client.send message\n+\n module.exports = XmppBot\n ", "changes": 12}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/7c9e8a87fb88e1b8aa22fcd7b718c5f5419a7a8b/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/7c9e8a87fb88e1b8aa22fcd7b718c5f5419a7a8b/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=7c9e8a87fb88e1b8aa22fcd7b718c5f5419a7a8b", "filename": "src/robot.coffee", "sha": "70e595a4a90b69f5bf68048b694aed244024dc52", "additions": 15, "patch": "@@ -141,6 +141,12 @@ class Robot\n   # strings - One or more Strings for each reply to send.\n   reply: (user, strings...) ->\n \n+  # Public: Raw method for setting a topic on the chat source. Extend this.\n+  #\n+  # user    - A Robot.User instance\n+  # strings - One more more Strings to set as the topic.\n+  topic: (user, strings...) ->\n+\n   # Public: Raw method for invoking the bot to run\n   # Extend this.\n   run: ->\n@@ -300,6 +306,15 @@ class Robot.Response\n   send: (strings...) ->\n     @robot.send @message.user, strings...\n \n+  # Public: Posts a topic changing message\n+  #\n+  # strings - One or more strings to set as the topic of the \n+  #           room the bot is in.\n+  #\n+  # Returns nothing.\n+  topic: (strings...) ->\n+    @robot.topic @message.user, strings...\n+\n   # Public: Posts a message mentioning the current user.\n   #\n   # strings - One or more strings to be posted.  The order of these strings", "changes": 15}], "80": [{"status": "modified", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/9a0dbb623476209074b4f135d38a1e255d82e0ce/src/hubot/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9a0dbb623476209074b4f135d38a1e255d82e0ce/src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/xmpp.coffee?ref=9a0dbb623476209074b4f135d38a1e255d82e0ce", "filename": "src/hubot/xmpp.coffee", "sha": "14ed9993abde25c623ea248145790a10a63d6e99", "additions": 82, "patch": "@@ -15,11 +15,15 @@ class XmppBot extends Robot\n       jid: options.username\n       password: options.password\n \n+    @client.on 'error', @.error\n     @client.on 'online', @.online\n     @client.on 'stanza', @.read\n \n     @options = options\n \n+  error: (error) =>\n+    console.error error\n+\n   online: =>\n     console.log 'Hubot XMPP client online'\n \n@@ -45,31 +49,89 @@ class XmppBot extends Robot\n       console.error '[xmpp error]' + stanza\n       return\n \n-    # ignore non-messages\n-    return if !stanza.is 'message' or stanza.attrs.type not in ['groupchat', 'direct', 'chat']\n-\n-    # ignore our own messages\n-    return if @options.username in stanza.attrs.from\n-\n-    # ignore empty bodies (i.e., topic changes -- maybe watch these someday)\n-    body = stanza.getChild 'body'\n-    return unless body\n-\n-    message = body.getText()\n-\n-    [room, from] = stanza.attrs.from.split '/'\n-    user = new Robot.User from, {\n-      room: room\n-      type: stanza.attrs.type\n-    }\n-\n-    @receive new Robot.TextMessage user, message\n+    switch stanza.name\n+      when 'message'\n+        @readMessage stanza\n+      when 'presence'\n+        @readPresence stanza\n+\n+  readMessage: (stanza) =>\n+     # ignore non-messages\n+      return if stanza.attrs.type not in ['groupchat', 'direct', 'chat']\n+\n+      # ignore our own messages\n+      return if @options.username in stanza.attrs.from\n+\n+      # ignore messages from the server. on Openfire, this includes \"This room is not anonymous\"\n+      return if stanza.attrs.from in @options.rooms\n+\n+      # ignore empty bodies (i.e., topic changes -- maybe watch these someday)\n+      body = stanza.getChild 'body'\n+      return unless body\n+\n+      message = body.getText()\n+\n+      [room, from] = stanza.attrs.from.split '/'\n+\n+      # note that 'from' isn't a full JID, just the local user part\n+      user = @userForId from\n+      user.room = room\n+      user.type = stanza.attrs.type\n+\n+      @receive new Robot.TextMessage user, message\n+\n+  readPresence: (stanza) =>\n+    jid = new Xmpp.JID(stanza.attrs.from)\n+    bareJid = jid.bare().toString()\n+\n+    # xmpp doesn't add types for standard available mesages\n+    # note that upon joining a room, server will send available\n+    # presences for all members\n+    # http://xmpp.org/rfcs/rfc3921.html#rfc.section.2.2.1\n+    stanza.attrs.type ?= 'available'\n+\n+    switch stanza.attrs.type\n+      when 'subscribe'\n+        console.log \"#{stanza.attrs.from} subscribed to us\"\n+\n+        @client.send new Xmpp.Element('presence',\n+            from: stanza.attrs.to\n+            to:   stanza.attrs.from\n+            id:   stanza.attrs.id\n+            type: 'subscribed'\n+        )\n+      when 'probe'\n+        @client.send new Xmpp.Element('presence',\n+            from: stanza.attrs.to\n+            to:   stanza.attrs.from\n+            id:   stanza.attrs.id\n+        )\n+      when 'available'\n+        if bareJid not in @options.rooms\n+          from = stanza.attrs.from\n+        else\n+          # room presence is stupid, and optional for some anonymous rooms\n+          # http://xmpp.org/extensions/xep-0045.html#enter-nonanon\n+          from = stanza.getChild('x', 'http://jabber.org/protocol/muc#user')?.getChild('item')?.attrs?.jid\n+\n+        return if not from?\n+\n+        # for now, user IDs and user names are the same. we don't\n+        # use full JIDs as user ID, since we don't get them in\n+        # standard groupchat messages\n+        jid = new Xmpp.JID(from)\n+        userId = userName = jid.user\n+\n+        console.log \"Availability received for #{userId}\"\n+\n+        user = @userForId userId, name: userName\n+        user.jid = jid.toString()\n \n   send: (user, strings...) ->\n     for str in strings\n       console.log \"Sending to #{user.room}: #{str}\"\n \n-      to = if user.type in ['direct', 'chat'] then user.room + '/' + user.id else user.room\n+      to = if user.type in ['direct', 'chat'] then \"#{user.room}/#{user.id}\" else user.room\n \n       message = new Xmpp.Element('message',\n                   from: @options.username", "changes": 102}], "82": [{"status": "modified", "deletions": 18, "raw_url": "https://github.com/hubotio/hubot/raw/571c8393d6f92774491d254caf6c51c6b6ef4e83/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/571c8393d6f92774491d254caf6c51c6b6ef4e83/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=571c8393d6f92774491d254caf6c51c6b6ef4e83", "filename": "bin/hubot", "sha": "bc8cb5fd93437bf26d8b94937cc9a3a1fd1bfac0", "additions": 43, "patch": "@@ -13,13 +13,14 @@ Creator    = require '../src/creator'\n OptParse   = require 'optparse'\n PortNumber = parseInt(process.env.PORT) || 8080\n \n-Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\"]\n+Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"cli\"]\n Switches = [\n   [ \"-h\", \"--help\",              \"Display the help information\"],\n   [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],\n   [ \"-c\", \"--create PATH\",       \"Create a deployable hubot\"],\n   [ \"-s\", \"--enable-slash\",      \"Enable replacing the robot's name with '/'\"],\n   [ \"-n\", \"--name NAME\",         \"The name of the robot in chat\" ],\n+  [ \"-q\", \"--quiet\",             \"Silence verbosity on STDOUT\" ],\n   [ \"-v\", \"--version\",           \"Displays the version of hubot installed\"]\n ]\n \n@@ -28,6 +29,7 @@ Options =\n   name: \"Hubot\"\n   create: false\n   adapter: \"stdio\"\n+  verbose: true\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n@@ -49,13 +51,26 @@ Parser.on \"help\", (opt, value) ->\n   console.log Parser.toString()\n   process.exit 0\n \n+Parser.on \"quiet\", (opt) ->\n+  Options.verbose = false\n+\n Parser.on \"version\", (opt, value) ->\n   Options.version = true\n \n-Parser.parse process.ARGV\n+argv = process.argv.slice 2\n+# don't process arguments after \"--\"\n+if (idx = argv.indexOf '--') >= 0\n+  extra = argv.slice idx + 1\n+  argv = argv.slice 0, idx\n+\n+Args = Parser.parse argv\n+Args.push extra... if extra\n \n process.on 'SIGTERM', -> process.exit(0)\n \n+debug = (msg) ->\n+  console.log msg if Options.verbose\n+\n if Options.create\n   creator = new Creator.Creator(Options.path)\n   creator.run()\n@@ -79,27 +94,37 @@ else\n   else\n     'shell'\n \n-  scriptsPath = Path.resolve \"./scripts\"\n-  console.log \"Loading deploy-local scripts at #{scriptsPath}\"\n-  robot = Hubot.loadBot adapter, scriptsPath, Options.name\n-  robot.enableSlash = Options.enableSlash\n+  robot = Hubot.loadBot adapter,\n+    name:        Options.name\n+    enableSlash: Options.enableSlash\n+    debugStream: if Options.verbose then process.stdout else null\n+    errStream:   process.stderr\n \n-  scriptsPath = Path.resolve \"src\", \"hubot\", \"scripts\"\n-  console.log \"Loading hubot core scripts for relative scripts at #{scriptsPath}\"\n-  robot.load scriptsPath\n+  expectedLoads = 3\n+  callback = ->\n+    if --expectedLoads is 0\n+      # run hubot after scripts have finished loading\n+      robot.run Args\n+\n+  loadScripts = (name, path, cb) ->\n+    scriptsPath = Path.resolve path...\n+    debug \"Loading #{name} at #{scriptsPath}\"\n+    robot.load scriptsPath, cb\n+\n+  loadScripts \"deploy-local scripts\", [ \"./scripts\" ], callback\n+  loadScripts \"hubot core scripts\",   [ \"src\", \"hubot\", \"scripts\" ], callback\n \n   scriptsFile = Path.resolve \"hubot-scripts.json\"\n   Path.exists scriptsFile, (exists) =>\n     if exists\n-      console.log \"Loading hubot-scripts from #{scriptsFile}\"\n-      Fs.readFile scriptsFile, (err, data) =>\n-        JSON.parse(data).forEach (plugin) =>\n-          robot.loadFile Path.resolve(\"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"), plugin\n+      debug \"Loading hubot-scripts listed in #{scriptsFile}\"\n+      Fs.readFile scriptsFile, (err, data) ->\n+        throw err if err\n+        scriptsPath = Path.resolve(\"node_modules\", \"hubot-scripts\", \"src\", \"scripts\")\n+        plugins = JSON.parse(data)\n+        plugins.forEach (plugin, idx) -> robot.loadFile scriptsPath, plugin, ->\n+          callback?() if idx is plugins.length - 1\n     else\n-      scriptsPath = Path.resolve \"src\", \"scripts\"\n-      console.log \"Loading hubot-scripts plugins at #{scriptsPath}\"\n-      robot.load scriptsPath\n-\n-  robot.run()\n+      loadScripts \"hubot-scripts plugins\", [ \"src\", \"scripts\" ], callback\n \n # vim:ft=coffee ts=2 sw=2 et :", "changes": 61}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/571c8393d6f92774491d254caf6c51c6b6ef4e83/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/571c8393d6f92774491d254caf6c51c6b6ef4e83/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=571c8393d6f92774491d254caf6c51c6b6ef4e83", "filename": "index.coffee", "sha": "48135fd2cd21f79e7171aa306ad7d0879ad9909f", "additions": 2, "patch": "@@ -4,9 +4,9 @@\n #     YourBot = Hubot.robot 'campfire', 'blah', 'yourbot'\n \n # Loads a Hubot robot\n-exports.loadBot = (adapterName, path, botName) ->\n+exports.loadBot = (adapterName, options = { }) ->\n   robot = require \"./src/hubot/#{adapterName}\"\n-  new robot path, botName\n+  new robot options\n \n exports.robot = ->\n   require './src/robot'", "changes": 4}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/571c8393d6f92774491d254caf6c51c6b6ef4e83/src/hubot/cli.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/571c8393d6f92774491d254caf6c51c6b6ef4e83/src/hubot/cli.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/cli.coffee?ref=571c8393d6f92774491d254caf6c51c6b6ef4e83", "filename": "src/hubot/cli.coffee", "sha": "677e22689851b2178813016d7cebf5b41d6f659e", "additions": 24, "patch": "@@ -0,0 +1,24 @@\n+Robot = require '../robot'\n+\n+class Cli extends Robot\n+  send: (user, strings...) ->\n+    console.log str for str in strings\n+    @finish()\n+\n+  reply: (user, strings...) ->\n+    @send user, \"#{user.name}: #{str}\" for str in strings\n+\n+  finish: ->\n+    clearTimeout @imminentDeath\n+    @imminentDeath = setTimeout (-> process.exit 0), 10\n+\n+  noMatch: (message) ->\n+    @warn \"nothing matched \\\"#{message.text}\\\"\"\n+    process.exit 1\n+\n+  run: (cmd) ->\n+    command = \"#{@name}: \" + cmd.join(' ')\n+    user = @userForId('1', {name: process.env.USER})\n+    @receive new Robot.TextMessage user, command\n+\n+module.exports = Cli", "changes": 24}, {"status": "modified", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/571c8393d6f92774491d254caf6c51c6b6ef4e83/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/571c8393d6f92774491d254caf6c51c6b6ef4e83/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=571c8393d6f92774491d254caf6c51c6b6ef4e83", "filename": "src/robot.coffee", "sha": "2b9901a3ac98a300dd75e2b475ee28a5f3f1f23d", "additions": 49, "patch": "@@ -8,16 +8,17 @@ class Robot\n   # dispatch them to matching listeners.\n   #\n   # path - String directory full of Hubot scripts to load.\n-  constructor: (path, name = \"Hubot\") ->\n-    @name        = name\n+  constructor: (options = { }) ->\n+    @name        = options.name || \"Hubot\"\n     @brain       = new Robot.Brain\n     @commands    = []\n     @Response    = Robot.Response\n     @listeners   = []\n     @loadPaths   = []\n-    @enableSlash = false\n-\n-    @load path if path\n+    @enableSlash = !!options.enableSlash\n+    @debugStream = options.debugStream\n+    @errStream   = options.errStream\n+    @errStream   = process.stderr if @errStream is undefined\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n@@ -27,7 +28,7 @@ class Robot\n   #\n   # Returns nothing.\n   hear: (regex, callback) ->\n-    @listeners.push new TextListener(@, regex, callback)\n+    @addListener TextListener, regex, callback\n \n   # Public: Adds a Listener that attempts to match incoming messages directed\n   # at the robot based on a Regex.  All regexes treat patterns like they begin\n@@ -43,70 +44,89 @@ class Robot\n     modifiers = re.pop() # pop off modifiers\n \n     if re[0] and re[0][0] is \"^\"\n-      console.log \"\\nWARNING: Anchors don't work well with respond, perhaps you want to use 'hear'\"\n-      console.log \"WARNING: The regex in question was #{regex.toString()}\\n\"\n+      @warn \"\\nWARNING: Anchors don't work well with respond, perhaps you want to use 'hear'\"\n+      @warn \"WARNING: The regex in question was #{regex.toString()}\\n\"\n \n     pattern = re.join(\"/\") # combine the pattern back again\n     if @enableSlash\n       newRegex = new RegExp(\"^(?:\\/|#{@name}:?)\\\\s*#{pattern}\", modifiers)\n     else\n       newRegex = new RegExp(\"^#{@name}:?\\\\s*#{pattern}\", modifiers)\n \n-    console.log newRegex.toString()\n-    @listeners.push new TextListener(@, newRegex, callback)\n+    @addListener TextListener, newRegex, callback\n \n   # Public: Adds a Listener that triggers when anyone enters the room.\n   #\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n   enter: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.EnterMessage), callback)\n+    @addListener Listener, ((msg) -> msg instanceof Robot.EnterMessage), callback\n \n   # Public: Adds a Listener that triggers when anyone leaves the room.\n   #\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n   leave: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.LeaveMessage), callback)\n+    @addListener Listener, ((msg) -> msg instanceof Robot.LeaveMessage), callback\n+\n+  # Private: Instantiates and adds a Listener by type\n+  #\n+  # type - A Listener class\n+  addListener: (type, args...) ->\n+    listener = new type(@, args...)\n+    @debug \"matching #{listener.regex}\" if listener.regex\n+    @listeners.push listener\n \n   # Public: Passes the given message to any interested Listeners.\n   #\n   # message - A Robot.Message instance.\n   #\n   # Returns nothing.\n   receive: (message) ->\n+    someMatched = false\n     for lst in @listeners\n       try\n-        lst.call message\n+        someMatched = true if lst.call message\n       catch ex\n-        console.log \"error while calling listener: #{ex}\"\n+        @warn \"error while calling listener: #{ex}\"\n+\n+    @noMatch message unless someMatched\n+\n+  # Called when no listener matched a message passed to `receive`\n+  noMatch: (message) ->\n \n   # Public: Loads every script in the given path.\n   #\n   # path - A String path on the filesystem.\n+  # callback - A Function called once loading is complete\n   #\n   # Returns nothing.\n-  load: (path) ->\n+  load: (path, callback) ->\n     Path.exists path, (exists) =>\n       if exists\n         @loadPaths.push path\n-        for file in Fs.readdirSync(path)\n-          @loadFile path, file\n+        files = Fs.readdirSync(path)\n+        remaining = files.length\n+        cb = -> callback exists if --remaining is 0 and callback\n+        @loadFile path, file, cb for file in files\n+      else\n+        callback? exists\n \n   # Public: Loads a file in path\n   #\n   # path - A String path on the filesystem.\n   # file - A String filename in path on the filesystem.\n+  # callback - A Function called once loading is complete\n   #\n   # Returns nothing.\n-  loadFile: (path, file) ->\n+  loadFile: (path, file, callback) ->\n     ext  = Path.extname file\n     full = Path.join path, Path.basename(file, ext)\n     if ext is '.coffee' or ext is '.js'\n       require(full) @\n-      @parseHelp \"#{path}/#{file}\"\n+      @parseHelp \"#{full}#{ext}\", callback\n \n   # Public: Help Commands for Running Scripts\n   #\n@@ -118,15 +138,17 @@ class Robot\n   # Private: load help info from a loaded script\n   #\n   # path - The path to the file on disk\n+  # callback - A Function called once parsing is complete\n   #\n   # Returns nothing\n-  parseHelp: (path) ->\n+  parseHelp: (path, callback) ->\n     Fs.readFile path, \"utf-8\", (err, body) =>\n       throw err if err\n       for i, line of body.split(\"\\n\")\n         break    if line[0] != '#'\n         continue if !line.match('-')\n         @commands.push line[2..line.length]\n+      callback?()\n \n   # Public: Raw method for sending data back to the chat source.  Extend this.\n   #\n@@ -150,6 +172,12 @@ class Robot\n   close: ->\n     @brain.close()\n \n+  debug: (msg) ->\n+    @debugStream.write msg.toString() + \"\\n\", 'utf8' if @debugStream\n+\n+  warn: (msg) ->\n+    @errStream.write msg.toString() + \"\\n\", 'utf8' if @errStream\n+\n   users: () ->\n     @brain.data.users\n \n@@ -267,6 +295,7 @@ class Listener\n   call: (message) ->\n     if match = @matcher message\n       @callback new @robot.Response(@robot, message, match)\n+      return true\n \n class TextListener extends Listener\n   # TextListeners receive every message from the chat source and decide if they want", "changes": 69}], "83": [{"status": "modified", "deletions": 9, "raw_url": "https://github.com/hubotio/hubot/raw/0e52877330e0c605a17ac42ccb0802b02d9e6913/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0e52877330e0c605a17ac42ccb0802b02d9e6913/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=0e52877330e0c605a17ac42ccb0802b02d9e6913", "filename": "src/hubot/irc.coffee", "sha": "39a55999a3db2439946a0ac1eecfcb5b8d0c717f", "additions": 27, "patch": "@@ -4,15 +4,29 @@ Irc   = require \"irc\"\n class IrcBot extends Robot\n   send: (user, strings...) ->\n     for str in strings\n-      console.log \"#{user.name}: #{str}\"\n-      @bot.say(user.room, str)\n+      if user.room\n+        console.log \"#{user.room} #{str}\"\n+        @bot.say(user.room, str)\n+      else\n+        console.log \"#{user.name} #{str}\"\n+        @bot.say(user.name, str)\n \n   reply: (user, strings...) ->\n     for str in strings\n       @send user, \"#{user.name}: #{str}\"\n \n+  join: (channel) ->\n+    self = @\n+    @bot.join channel, () ->\n+      console.log('joined %s', channel)\n+\n+  part: (channel) ->\n+    @bot.part channel, () ->\n+      console.log('left %s', channel)\n+\n   run: ->\n     self = @\n+\n     options =\n       nick:     process.env.HUBOT_IRC_NICK\n       port:     process.env.HUBOT_IRC_PORT\n@@ -27,6 +41,7 @@ class IrcBot extends Robot\n           password: options.password,\n           debug: true,\n           port: options.port,\n+          stripColors: true,\n         }\n \n     unless options.nickpass\n@@ -43,20 +58,23 @@ class IrcBot extends Robot\n           bot.say 'NickServ', \"identify #{options.nickpass}\"\n         else if options.nickpass and from is 'NickServ' and text.indexOf('now identified') isnt -1\n           for room in options.rooms\n-            bot.join room, ->\n-              console.log('%s has joined %s', options.nick, room)\n+            @join room\n \n-    bot.addListener 'message', (from, toRoom, message) ->\n-      console.log \"From #{from} to #{toRoom}: #{message}\"\n+    bot.addListener 'message', (from, to, message) ->\n+      console.log \"From #{from} to #{to}: #{message}\"\n \n       if message.match new RegExp \"^#{options.nick}\", \"i\"\n         unless user_id[from]\n           user_id[from] = next_id\n           next_id = next_id + 1\n \n-      user = new Robot.User user_id[from], {\n-        room: toRoom,\n-      }\n+      user = new Robot.User user_id[from]\n+      user.name = from\n+      if to.match(/^[&#]/)\n+        user.room = to\n+        console.log \"#{to} <#{from}> #{message}\"\n+      else\n+        console.log \"msg <#{from}> #{message}\"\n \n       self.receive new Robot.TextMessage(user, message)\n ", "changes": 36}], "85": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/16c0bb8819631c9cb829f2670e1781c162cb8259/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/16c0bb8819631c9cb829f2670e1781c162cb8259/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=16c0bb8819631c9cb829f2670e1781c162cb8259", "filename": "src/hubot/irc.coffee", "sha": "3fa92acac63f14b731eb0721686e0c9fdecb3dd1", "additions": 1, "patch": "@@ -55,6 +55,7 @@ class IrcBot extends Robot\n           next_id = next_id + 1\n \n       user = new Robot.User user_id[from], {\n+        name: from,\n         room: toRoom,\n       }\n ", "changes": 1}], "86": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a424faf508cc8408b44c28c122e73e765288a705/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a424faf508cc8408b44c28c122e73e765288a705/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=a424faf508cc8408b44c28c122e73e765288a705", "filename": "src/hubot/irc.coffee", "sha": "3fa92acac63f14b731eb0721686e0c9fdecb3dd1", "additions": 1, "patch": "@@ -55,6 +55,7 @@ class IrcBot extends Robot\n           next_id = next_id + 1\n \n       user = new Robot.User user_id[from], {\n+        name: from,\n         room: toRoom,\n       }\n ", "changes": 1}], "87": [{"status": "modified", "deletions": 18, "raw_url": "https://github.com/hubotio/hubot/raw/3a941322ba0ce01c76660abc1120b719550f77b0/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/3a941322ba0ce01c76660abc1120b719550f77b0/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=3a941322ba0ce01c76660abc1120b719550f77b0", "filename": "bin/hubot", "sha": "9a3ee62b459e45b1715543bbfded319c09f011eb", "additions": 43, "patch": "@@ -13,14 +13,15 @@ Creator    = require '../src/creator'\n OptParse   = require 'optparse'\n PortNumber = parseInt(process.env.PORT) || 8080\n \n-Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\", \"talker\", \"twitter\", \"flowdock\", \"gtalk\"]\n+Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\", \"talker\", \"twitter\", \"flowdock\", \"gtalk\", \"cli\"]\n \n Switches = [\n   [ \"-h\", \"--help\",              \"Display the help information\"],\n   [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],\n   [ \"-c\", \"--create PATH\",       \"Create a deployable hubot\"],\n   [ \"-s\", \"--enable-slash\",      \"Enable replacing the robot's name with '/'\"],\n   [ \"-n\", \"--name NAME\",         \"The name of the robot in chat\" ],\n+  [ \"-q\", \"--quiet\",             \"Silence verbosity on STDOUT\" ],\n   [ \"-v\", \"--version\",           \"Displays the version of hubot installed\"]\n ]\n \n@@ -29,6 +30,7 @@ Options =\n   name: \"Hubot\"\n   create: false\n   adapter: \"stdio\"\n+  verbose: true\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n@@ -50,13 +52,26 @@ Parser.on \"help\", (opt, value) ->\n   console.log Parser.toString()\n   process.exit 0\n \n+Parser.on \"quiet\", (opt) ->\n+  Options.verbose = false\n+\n Parser.on \"version\", (opt, value) ->\n   Options.version = true\n \n-Parser.parse process.ARGV\n+argv = process.argv.slice 2\n+# don't process arguments after \"--\"\n+if (idx = argv.indexOf '--') >= 0\n+  extra = argv.slice idx + 1\n+  argv = argv.slice 0, idx\n+\n+Args = Parser.parse argv\n+Args.push extra... if extra\n \n process.on 'SIGTERM', -> process.exit(0)\n \n+debug = (msg) ->\n+  console.log msg if Options.verbose\n+\n if Options.create\n   creator = new Creator.Creator(Options.path)\n   creator.run()\n@@ -80,27 +95,37 @@ else\n   else\n     'shell'\n \n-  scriptsPath = Path.resolve \"./scripts\"\n-  console.log \"Loading deploy-local scripts at #{scriptsPath}\"\n-  robot = Hubot.loadBot adapter, scriptsPath, Options.name\n-  robot.enableSlash = Options.enableSlash\n+  robot = Hubot.loadBot adapter,\n+    name:        Options.name\n+    enableSlash: Options.enableSlash\n+    debugStream: if Options.verbose then process.stdout else null\n+    errStream:   process.stderr\n \n-  scriptsPath = Path.resolve \"src\", \"hubot\", \"scripts\"\n-  console.log \"Loading hubot core scripts for relative scripts at #{scriptsPath}\"\n-  robot.load scriptsPath\n+  expectedLoads = 3\n+  callback = ->\n+    if --expectedLoads is 0\n+      # run hubot after scripts have finished loading\n+      robot.run Args\n+\n+  loadScripts = (name, path, cb) ->\n+    scriptsPath = Path.resolve path...\n+    debug \"Loading #{name} at #{scriptsPath}\"\n+    robot.load scriptsPath, cb\n+\n+  loadScripts \"deploy-local scripts\", [ \"./scripts\" ], callback\n+  loadScripts \"hubot core scripts\",   [ \"src\", \"hubot\", \"scripts\" ], callback\n \n   scriptsFile = Path.resolve \"hubot-scripts.json\"\n   Path.exists scriptsFile, (exists) =>\n     if exists\n-      console.log \"Loading hubot-scripts from #{scriptsFile}\"\n-      Fs.readFile scriptsFile, (err, data) =>\n-        JSON.parse(data).forEach (plugin) =>\n-          robot.loadFile Path.resolve(\"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"), plugin\n+      debug \"Loading hubot-scripts listed in #{scriptsFile}\"\n+      Fs.readFile scriptsFile, (err, data) ->\n+        throw err if err\n+        scriptsPath = Path.resolve(\"node_modules\", \"hubot-scripts\", \"src\", \"scripts\")\n+        plugins = JSON.parse(data)\n+        plugins.forEach (plugin, idx) -> robot.loadFile scriptsPath, plugin, ->\n+          callback?() if idx is plugins.length - 1\n     else\n-      scriptsPath = Path.resolve \"src\", \"scripts\"\n-      console.log \"Loading hubot-scripts plugins at #{scriptsPath}\"\n-      robot.load scriptsPath\n-\n-  robot.run()\n+      loadScripts \"hubot-scripts plugins\", [ \"src\", \"scripts\" ], callback\n \n # vim:ft=coffee ts=2 sw=2 et :", "changes": 61}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/3a941322ba0ce01c76660abc1120b719550f77b0/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3a941322ba0ce01c76660abc1120b719550f77b0/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=3a941322ba0ce01c76660abc1120b719550f77b0", "filename": "index.coffee", "sha": "48135fd2cd21f79e7171aa306ad7d0879ad9909f", "additions": 2, "patch": "@@ -4,9 +4,9 @@\n #     YourBot = Hubot.robot 'campfire', 'blah', 'yourbot'\n \n # Loads a Hubot robot\n-exports.loadBot = (adapterName, path, botName) ->\n+exports.loadBot = (adapterName, options = { }) ->\n   robot = require \"./src/hubot/#{adapterName}\"\n-  new robot path, botName\n+  new robot options\n \n exports.robot = ->\n   require './src/robot'", "changes": 4}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3a941322ba0ce01c76660abc1120b719550f77b0/src/hubot/cli.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3a941322ba0ce01c76660abc1120b719550f77b0/src/hubot/cli.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/cli.coffee?ref=3a941322ba0ce01c76660abc1120b719550f77b0", "filename": "src/hubot/cli.coffee", "sha": "677e22689851b2178813016d7cebf5b41d6f659e", "additions": 24, "patch": "@@ -0,0 +1,24 @@\n+Robot = require '../robot'\n+\n+class Cli extends Robot\n+  send: (user, strings...) ->\n+    console.log str for str in strings\n+    @finish()\n+\n+  reply: (user, strings...) ->\n+    @send user, \"#{user.name}: #{str}\" for str in strings\n+\n+  finish: ->\n+    clearTimeout @imminentDeath\n+    @imminentDeath = setTimeout (-> process.exit 0), 10\n+\n+  noMatch: (message) ->\n+    @warn \"nothing matched \\\"#{message.text}\\\"\"\n+    process.exit 1\n+\n+  run: (cmd) ->\n+    command = \"#{@name}: \" + cmd.join(' ')\n+    user = @userForId('1', {name: process.env.USER})\n+    @receive new Robot.TextMessage user, command\n+\n+module.exports = Cli", "changes": 24}, {"status": "modified", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/3a941322ba0ce01c76660abc1120b719550f77b0/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3a941322ba0ce01c76660abc1120b719550f77b0/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=3a941322ba0ce01c76660abc1120b719550f77b0", "filename": "src/robot.coffee", "sha": "8af988abacece81e72d82b57cdf3d649e32afc12", "additions": 49, "patch": "@@ -8,16 +8,17 @@ class Robot\n   # dispatch them to matching listeners.\n   #\n   # path - String directory full of Hubot scripts to load.\n-  constructor: (path, name = \"Hubot\") ->\n-    @name        = name\n+  constructor: (options = { }) ->\n+    @name        = options.name || \"Hubot\"\n     @brain       = new Robot.Brain\n     @commands    = []\n     @Response    = Robot.Response\n     @listeners   = []\n     @loadPaths   = []\n-    @enableSlash = false\n-\n-    @load path if path\n+    @enableSlash = !!options.enableSlash\n+    @debugStream = options.debugStream\n+    @errStream   = options.errStream\n+    @errStream   = process.stderr if @errStream is undefined\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n@@ -27,7 +28,7 @@ class Robot\n   #\n   # Returns nothing.\n   hear: (regex, callback) ->\n-    @listeners.push new TextListener(@, regex, callback)\n+    @addListener TextListener, regex, callback\n \n   # Public: Adds a Listener that attempts to match incoming messages directed\n   # at the robot based on a Regex.  All regexes treat patterns like they begin\n@@ -43,70 +44,89 @@ class Robot\n     modifiers = re.pop() # pop off modifiers\n \n     if re[0] and re[0][0] is \"^\"\n-      console.log \"\\nWARNING: Anchors don't work well with respond, perhaps you want to use 'hear'\"\n-      console.log \"WARNING: The regex in question was #{regex.toString()}\\n\"\n+      @warn \"\\nWARNING: Anchors don't work well with respond, perhaps you want to use 'hear'\"\n+      @warn \"WARNING: The regex in question was #{regex.toString()}\\n\"\n \n     pattern = re.join(\"/\") # combine the pattern back again\n     if @enableSlash\n       newRegex = new RegExp(\"^(?:\\/|#{@name}:?)\\\\s*(?:#{pattern})\", modifiers)\n     else\n       newRegex = new RegExp(\"^#{@name}:?\\\\s*(?:#{pattern})\", modifiers)\n \n-    console.log newRegex.toString()\n-    @listeners.push new TextListener(@, newRegex, callback)\n+    @addListener TextListener, newRegex, callback\n \n   # Public: Adds a Listener that triggers when anyone enters the room.\n   #\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n   enter: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.EnterMessage), callback)\n+    @addListener Listener, ((msg) -> msg instanceof Robot.EnterMessage), callback\n \n   # Public: Adds a Listener that triggers when anyone leaves the room.\n   #\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n   leave: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.LeaveMessage), callback)\n+    @addListener Listener, ((msg) -> msg instanceof Robot.LeaveMessage), callback\n+\n+  # Private: Instantiates and adds a Listener by type\n+  #\n+  # type - A Listener class\n+  addListener: (type, args...) ->\n+    listener = new type(@, args...)\n+    @debug \"matching #{listener.regex}\" if listener.regex\n+    @listeners.push listener\n \n   # Public: Passes the given message to any interested Listeners.\n   #\n   # message - A Robot.Message instance.\n   #\n   # Returns nothing.\n   receive: (message) ->\n+    someMatched = false\n     for lst in @listeners\n       try\n-        lst.call message\n+        someMatched = true if lst.call message\n       catch ex\n-        console.log \"error while calling listener: #{ex}\"\n+        @warn \"error while calling listener: #{ex}\"\n+\n+    @noMatch message unless someMatched\n+\n+  # Called when no listener matched a message passed to `receive`\n+  noMatch: (message) ->\n \n   # Public: Loads every script in the given path.\n   #\n   # path - A String path on the filesystem.\n+  # callback - A Function called once loading is complete\n   #\n   # Returns nothing.\n-  load: (path) ->\n+  load: (path, callback) ->\n     Path.exists path, (exists) =>\n       if exists\n         @loadPaths.push path\n-        for file in Fs.readdirSync(path)\n-          @loadFile path, file\n+        files = Fs.readdirSync(path)\n+        remaining = files.length\n+        cb = -> callback exists if --remaining is 0 and callback\n+        @loadFile path, file, cb for file in files\n+      else\n+        callback? exists\n \n   # Public: Loads a file in path\n   #\n   # path - A String path on the filesystem.\n   # file - A String filename in path on the filesystem.\n+  # callback - A Function called once loading is complete\n   #\n   # Returns nothing.\n-  loadFile: (path, file) ->\n+  loadFile: (path, file, callback) ->\n     ext  = Path.extname file\n     full = Path.join path, Path.basename(file, ext)\n     if ext is '.coffee' or ext is '.js'\n       require(full) @\n-      @parseHelp \"#{path}/#{file}\"\n+      @parseHelp \"#{full}#{ext}\", callback\n \n   # Public: Help Commands for Running Scripts\n   #\n@@ -118,15 +138,17 @@ class Robot\n   # Private: load help info from a loaded script\n   #\n   # path - The path to the file on disk\n+  # callback - A Function called once parsing is complete\n   #\n   # Returns nothing\n-  parseHelp: (path) ->\n+  parseHelp: (path, callback) ->\n     Fs.readFile path, \"utf-8\", (err, body) =>\n       throw err if err\n       for i, line of body.split(\"\\n\")\n         break    if !(line[0] == '#' or line.substr(0, 2) == '//')\n         continue if !line.match('-')\n         @commands.push line[2..line.length]\n+      callback?()\n \n   # Public: Raw method for sending data back to the chat source.  Extend this.\n   #\n@@ -156,6 +178,12 @@ class Robot\n   close: ->\n     @brain.close()\n \n+  debug: (msg) ->\n+    @debugStream.write msg.toString() + \"\\n\", 'utf8' if @debugStream\n+\n+  warn: (msg) ->\n+    @errStream.write msg.toString() + \"\\n\", 'utf8' if @errStream\n+\n   users: () ->\n     @brain.data.users\n \n@@ -275,6 +303,7 @@ class Listener\n   call: (message) ->\n     if match = @matcher message\n       @callback new @robot.Response(@robot, message, match)\n+      return true\n \n class TextListener extends Listener\n   # TextListeners receive every message from the chat source and decide if they want", "changes": 69}], "93": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/511d430359f037704886f52acc1b0218b3d9600b/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/511d430359f037704886f52acc1b0218b3d9600b/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=511d430359f037704886f52acc1b0218b3d9600b", "filename": "package.json", "sha": "466ffd3f857e57514fc7cf48b6ffa026bed29431", "additions": 2, "patch": "@@ -22,7 +22,8 @@\n     \"hiredis\": \"0.1.12\",\n     \"redis\": \"0.6.7\",\n     \"node-xmpp\": \">=0.2.6\",\n-    \"wobot\": \"0.3.0\"\n+    \"wobot\": \"0.3.0\",\n+    \"inotify\": \"0.1.8\"\n   },\n \n   \"directories\":  {", "changes": 3}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/511d430359f037704886f52acc1b0218b3d9600b/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/511d430359f037704886f52acc1b0218b3d9600b/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=511d430359f037704886f52acc1b0218b3d9600b", "filename": "src/robot.coffee", "sha": "7845742452d05d84542f8a946a8b839cee6de87f", "additions": 40, "patch": "@@ -2,6 +2,10 @@ Fs    = require 'fs'\n Url   = require 'url'\n Path  = require 'path'\n Redis = require 'redis'\n+Inotify = require('inotify').Inotify\n+\n+watchs = {}\n+robot = null\n \n class Robot\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n@@ -16,6 +20,8 @@ class Robot\n     @listeners   = []\n     @loadPaths   = []\n     @enableSlash = false\n+    @inotify     = new Inotify()\n+    robot        = this\n     if path then @load path\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n@@ -35,11 +41,15 @@ class Robot\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n-  respond: (regex, callback) ->\n+  respond: (regex, filename = null, callback) ->\n     re = regex.toString().split(\"/\")\n     re.shift()           # remove empty first item\n     modifiers = re.pop() # pop off modifiers\n \n+    if not callback?\n+      callback = filename\n+      filename = null\n+\n     if re[0] and re[0][0] == \"^\"\n       console.log \"\\nWARNING: Anchors don't work well with respond, perhaps you want to use 'hear'\"\n       console.log \"WARNING: The regex in question was #{regex.toString()}\\n\"\n@@ -51,7 +61,7 @@ class Robot\n       newRegex = new RegExp(\"^#{@name}:?\\\\s*#{pattern}\", modifiers)\n \n     console.log newRegex.toString()\n-    @listeners.push new Listener(@, newRegex, callback)\n+    @listeners.push new Listener(@, newRegex, callback, filename)\n \n   # Public: Passes the given message to any interested Listeners.\n   #\n@@ -85,6 +95,33 @@ class Robot\n     if ext == '.coffee' or ext == '.js'\n       require(full) @\n       @parseHelp \"#{path}/#{file}\"\n+      console.log('set inotify for ' + \"#{path}/#{file}\")\n+      watch_id = @inotify.addWatch({\n+        path: \"#{path}/#{file}\",\n+        watch_for: Inotify.IN_MODIFY,\n+        name: \"#{path}/#{file}\",\n+        callback: (event) ->\n+          file = watchs[event.watch]\n+          if file\n+            console.log('reload file '+ file)\n+\n+            # Filter out listeners\n+            new_listeners = robot.listeners.filter (element) ->\n+              console.log('element '+element.filename)\n+              console.log('target  '+file)\n+              element.filename != file\n+            robot.listeners = new_listeners\n+\n+            # Avoid nodejs cache\n+            delete require.cache[file]\n+            ext  = Path.extname file\n+            path = Path.dirname(file)\n+            name = Path.basename(file, ext)\n+\n+            # Let's reload\n+            robot.loadFile(path, name+ext)\n+        })\n+      watchs[watch_id] = \"#{path}/#{file}\"\n \n   # Public: Help Commands for Running Scripts\n   #\n@@ -224,7 +261,7 @@ class Listener\n   # regex    - The Regex that determines if this listener should trigger the\n   #            callback.\n   # callback - The Function that is triggered if the incoming message matches.\n-  constructor: (@robot, @regex, @callback) ->\n+  constructor: (@robot, @regex, @callback, @filename) ->\n \n   # Public: Determines if the listener likes the content of the message.  If\n   # so, a Response built from the given Message is passed to the Listener", "changes": 43}], "94": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/95e85fdca19314fd28b6c5cd23a84695320a0868/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/95e85fdca19314fd28b6c5cd23a84695320a0868/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=95e85fdca19314fd28b6c5cd23a84695320a0868", "filename": "src/robot.coffee", "sha": "011d7bfa4987b3834ac41f961ef25edcf300a648", "additions": 2, "patch": "@@ -213,6 +213,8 @@ class Robot.Brain extends EventEmitter\n   mergeData: (data) ->\n     for k of (data or { })\n       @data[k] = data[k]\n+      \n+    @emit 'loaded', @data\n \n class Robot.Message\n   # Represents an incoming message from the chat.", "changes": 2}], "98": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a51615b73d72433a81157d7629419190a90ee5e8/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/a51615b73d72433a81157d7629419190a90ee5e8/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=a51615b73d72433a81157d7629419190a90ee5e8", "filename": "bin/hubot", "sha": "4654fcc2fac7b5fa3a6cae06cb0abb0b5b0cac22", "additions": 1, "patch": "@@ -13,7 +13,7 @@ Creator    = require '../src/creator'\n OptParse   = require 'optparse'\n PortNumber = parseInt(process.env.PORT) || 8080\n \n-Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\"]\n+Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\",\"twitter\"]\n Switches = [\n   [ \"-h\", \"--help\",              \"Display the help information\"],\n   [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a51615b73d72433a81157d7629419190a90ee5e8/src/hubot/twitter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a51615b73d72433a81157d7629419190a90ee5e8/src/hubot/twitter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/twitter.coffee?ref=a51615b73d72433a81157d7629419190a90ee5e8", "filename": "src/hubot/twitter.coffee", "sha": "6de1e8d2ca24a949ebdc8d984f13bb3d888e5993", "additions": 92, "patch": "@@ -0,0 +1,92 @@\n+Robot        = require \"../robot\"\n+HTTPS        = require \"https\"\n+EventEmitter = require(\"events\").EventEmitter\n+oauth       = require('oauth');\n+\n+key = process.env.HUBOT_TWITTER_KEY\n+secret=process.env.HUBOT_TWITTER_SECRET\n+token=process.env.HUBOT_TWITTER_TOKEN\n+tokensecret=process.env.HUBOT_TWITTER_TOKEN_SECRET\n+\n+consumer = new oauth.OAuth(\"https://twitter.com/oauth/request_token\", \"https://twitter.com/oauth/access_token\",key, secret, \"1.0\", \"\", \"HMAC-SHA1\");\n+\n+\n+class Twitter extends Robot\n+  send: (user, strings...) ->\n+    strings.forEach (str) =>\n+        text= str\n+        console.log text\n+        tweetsText = str.split('\\n')\n+        tweetsText.forEach (tweetText) =>\n+            console.log \"send twitt to #{user} with text #{tweetText}\"\n+            consumer.post \"https://api.twitter.com/1/statuses/update.json\", token,tokensecret,{status:'@'+user+' '+tweetText},'UTF-8',  (error, data, response) ->\n+              if error\n+               console.log \"twitter send error: #{error} #{data}\"\n+              console.log \"Status #{response.statusCode}\"\n+\n+\n+  reply: (user, strings...) ->\n+    strings.forEach (str) =>\n+        text= str\n+        console.log \"send pm to #{user} with text #{text}\"\n+        consumer.post \"https://api.twitter.com/1/direct_messages/new.json\", token,tokensecret,{text:text,user:user},'UTF-8',  (error, data, response) ->\n+        if error\n+         console.log \"twitter send error: #{error} #{data}\"\n+        console.log \"Status #{response.statusCode}\"\n+\n+  run: ->\n+    self = @\n+    bot = new TwitterStreaming()\n+\n+    bot.Tweet self.name, (err, data) ->\n+        reg = new RegExp('@'+self.name,'i')\n+        console.log \"received #{data.text} from #{data.user.screen_name}\"\n+        self.receive new Robot.TextMessage data.user.screen_name,data.text.replace reg, self.name\n+        if err\n+          console.log \"received error: #{err}\"\n+\n+    @bot = bot\n+\n+module.exports = Twitter\n+\n+class TwitterStreaming extends EventEmitter\n+  self=@\n+  constructor: () ->\n+    @domain        = 'stream.twitter.com'\n+\n+  Tweet: (track,callback) ->\n+    @post \"/1/statuses/filter.json?track=\"+track,'', callback\n+\n+\n+  # Convenience HTTP Methods for posting on behalf of the token\"d user\n+  get: (path, callback) ->\n+    @request \"GET\", path, null, callback\n+\n+  post: (path, body, callback) ->\n+    @request \"POST\", path, body, callback\n+\n+  request: (method, path, body, callback) ->\n+    console.log @domain\n+    request = consumer.get 'https://'+@domain+path, token,tokensecret, null\n+    request.on \"response\",(response)->\n+          response.on \"data\", (chunk) ->\n+             parseResponse chunk+'',callback\n+          response.on \"end\", (data) ->\n+             console.log 'end request'\n+          response.on \"error\", (data) ->\n+             console.log 'error '+data\n+    request.end();\n+\n+\n+    parseResponse = (data,callback) ->\n+      while ((index = data.indexOf('\\r\\n')) > -1)\n+           json = data.slice(0, index);\n+           data = data.slice(index + 2);\n+           if(json.length > 0)\n+             try\n+                console.log \"json\"+json\n+                callback null, JSON.parse(json)\n+             catch err\n+                console.log \"error parse\"+json\n+                callback null, data || { }\n+", "changes": 92}], "99": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/062b671fc77b5d0cddfb345765c16f16870418b7/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/062b671fc77b5d0cddfb345765c16f16870418b7/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=062b671fc77b5d0cddfb345765c16f16870418b7", "filename": "src/hubot/irc.coffee", "sha": "c6d994ff6d87420306e108be8f4209e5a8b2a599", "additions": 1, "patch": "@@ -30,7 +30,7 @@ class IrcBot extends Robot\n     self = @\n \n     options =\n-      nick:     process.env.HUBOT_IRC_NICK\n+      nick:     process.env.HUBOT_IRC_NICK or @name\n       port:     process.env.HUBOT_IRC_PORT\n       rooms:    process.env.HUBOT_IRC_ROOMS.split(\",\")\n       server:   process.env.HUBOT_IRC_SERVER", "changes": 2}], "101": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/72996a5334919641363862506feeb2c8f6a475b0/src/hubot/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/72996a5334919641363862506feeb2c8f6a475b0/src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/xmpp.coffee?ref=72996a5334919641363862506feeb2c8f6a475b0", "filename": "src/hubot/xmpp.coffee", "sha": "d0266942f701ed75b6abb822713de3cfa227d5a9", "additions": 8, "patch": "@@ -6,14 +6,18 @@ class XmppBot extends Robot\n     options =\n       username: process.env.HUBOT_XMPP_USERNAME\n       password: process.env.HUBOT_XMPP_PASSWORD\n-      rooms:    process.env.HUBOT_XMPP_ROOMS.split(',')\n+      rooms:    if process.env.HUBOT_XMPP_ROOMS then process.env.HUBOT_XMPP_ROOMS.split(',') else []\n+      host:     process.env.HUBOT_XMPP_HOST or null\n+      port:     process.env.HUBOT_XMPP_PORT or null\n       keepaliveInterval: 30000 # ms interval to send whitespace to xmpp server\n \n     console.log options\n \n     @client = new Xmpp.Client\n       jid: options.username\n       password: options.password\n+      host: options.host\n+      port: options.port\n \n     @client.on 'error', @.error\n     @client.on 'online', @.online\n@@ -27,7 +31,7 @@ class XmppBot extends Robot\n   online: =>\n     console.log 'Hubot XMPP client online'\n \n-    @client.send new Xmpp.Element('presence', type: 'available' )\n+    @client.send new Xmpp.Element('presence')\n       .c('show').t('chat')\n \n     # join each room\n@@ -56,7 +60,7 @@ class XmppBot extends Robot\n         @readPresence stanza\n \n   readMessage: (stanza) =>\n-     # ignore non-messages\n+      # ignore non-messages\n       return if stanza.attrs.type not in ['groupchat', 'direct', 'chat']\n \n       # ignore our own messages\n@@ -134,7 +138,7 @@ class XmppBot extends Robot\n       to = if user.type in ['direct', 'chat'] then \"#{user.room}/#{user.id}\" else user.room\n \n       message = new Xmpp.Element('message',\n-                  from: @options.username\n+                  from: @client.jid.toString()\n                   to: to\n                   type: user.type\n                 ).", "changes": 12}], "103": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e326635f697875ec79aa64f6e0c2c5a34c95bedf/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e326635f697875ec79aa64f6e0c2c5a34c95bedf/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=e326635f697875ec79aa64f6e0c2c5a34c95bedf", "filename": "src/hubot/irc.coffee", "sha": "9ede155e4797db7e817065afe817f4affea1aaca", "additions": 1, "patch": "@@ -44,6 +44,7 @@ class IrcBot extends Robot\n           debug: true,\n           port: options.port,\n           stripColors: true,\n+          secure: if options.port is \"6697\" then true else false,\n         }\n \n     unless options.nickpass", "changes": 1}], "104": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/28101bf217618c264be7d76440539122a5adeb71/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/28101bf217618c264be7d76440539122a5adeb71/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=28101bf217618c264be7d76440539122a5adeb71", "filename": "bin/hubot", "sha": "7c2b12b4009a9962d67fbc40563ce6fcb10a1007", "additions": 1, "patch": "@@ -13,7 +13,7 @@ Creator    = require '../src/creator'\n OptParse   = require 'optparse'\n PortNumber = parseInt(process.env.PORT) || 8080\n \n-Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\"]\n+Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\", \"talker\"]\n Switches = [\n   [ \"-h\", \"--help\",              \"Display the help information\"],\n   [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/28101bf217618c264be7d76440539122a5adeb71/src/hubot/talker.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/28101bf217618c264be7d76440539122a5adeb71/src/hubot/talker.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/talker.coffee?ref=28101bf217618c264be7d76440539122a5adeb71", "filename": "src/hubot/talker.coffee", "sha": "4df36226164aeb47d5115b02ace3048326f8380d", "additions": 112, "patch": "@@ -0,0 +1,112 @@\n+Robot        = require \"../robot\"\n+HTTPS        = require \"https\"\n+EventEmitter = require(\"events\").EventEmitter\n+net          = require('net')\n+tls          = require('tls')\n+\n+class Talker extends Robot\n+  send: (user, strings...) ->\n+    strings.forEach (str) =>\n+      @bot.write {\"type\": \"message\", \"content\": str}\n+\n+  reply: (user, strings...) ->\n+    strings.forEach (str) =>\n+      @send user, \"#{user.name}: #{str}\"\n+\n+  run: ->\n+    self = @\n+    options =\n+      token:   process.env.HUBOT_TALKER_TOKEN\n+      rooms:   process.env.HUBOT_TALKER_ROOMS\n+\n+    console.log options\n+    bot = new TalkerClient(options)\n+    console.log bot\n+    \n+    bot.connect ->\n+      options.rooms.split(',').forEach (room) ->\n+        console.log \"Entering room: \" + room\n+        bot.write {\"room\": room, \"token\": options.token, \"type\": \"connect\"}\n+        \n+      setInterval -> \n+        bot.write {type: \"ping\"}\n+      , 25000\n+\n+    bot.on \"TextMessage\", (message)->\n+      console.log message\n+      author = self.userForId(message.user.id)\n+      self.receive new Robot.TextMessage(author, message.content.replace(/^\\s*@hubot\\s+/, \"Hubot: \"))\n+    \n+    bot.on \"EnterMessage\", (message) ->\n+      console.log message\n+      author = self.userForId(message.user.id)\n+      self.receive new Robot.EnterMessage(author)\n+    \n+    bot.on \"LeaveMessage\", (message) ->\n+      console.log message\n+      author = self.userForId(message.user.id)\n+      self.receive new Robot.LeaveMessage(author)\n+    \n+    @bot = bot\n+\n+module.exports = Talker\n+\n+class TalkerClient extends EventEmitter\n+  constructor: (options) ->\n+    @token         = options.token\n+    @rooms         = options.rooms.split(\",\")\n+    @domain        = 'talkerapp.com'\n+    @encoding      = 'utf8'\n+    @port          = 8500\n+\n+  connect: (callback) ->\n+    self = @    \n+    \n+    @socket = tls.connect @port, @domain, ->\n+      # callback called only after successful socket socket\n+      console.log \"Connected to \" + self.domain\n+      self.socket.setEncoding @encoding\n+      callback()\n+       \n+    #callback\n+    @socket.addListener 'data', (data) ->\n+      console.log data\n+      \n+      if data.indexOf('\"type\":\"users\"') > 0\n+        message = {\"type\": \"none\"}\n+      else\n+        message = JSON.parse(data)\n+        \n+      if message.type == \"connected\"\n+        console.log \"Succesfully connected, listing users:\"\n+      if message.type == \"message\"\n+        self.emit \"TextMessage\", message\n+      if message.type == \"join\"\n+        self.emit \"EnterMessage\", message\n+      if message.type == \"leave\"\n+        self.emit \"LeaveMessage\", message\n+      if message.type == \"error\"\n+        self.disconnect message.message\n+      \n+    @socket.addListener \"eof\", ->\n+      console.log \"eof\"\n+    @socket.addListener \"timeout\", ->\n+      console.log \"timeout\"\n+    @socket.addListener \"end\", ->\n+      console.log \"end\"\n+  \n+  write: (arguments) ->\n+    self = @\n+    \n+    if @socket.readyState != 'open'\n+      return self.disconnect 'cannot send with readyState: ' + @socket.readyState\n+  \n+    message = JSON.stringify(arguments)\n+    console.log message\n+    \n+    @socket.write message, @encoding\n+  \n+  disconnect: (why) ->\n+    if @socket.readyState != 'closed' \n+      @socket.close\n+      console.log 'disconnected (reason: ' + why + ')'\n\\ No newline at end of file", "changes": 112}], "106": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/78cf56eeabcd140a70baecf4c49bcf94294c33d1/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/78cf56eeabcd140a70baecf4c49bcf94294c33d1/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=78cf56eeabcd140a70baecf4c49bcf94294c33d1", "filename": "README.md", "sha": "8fa8dc0d6cf26ec4d3c24bc765c95529065b1757", "additions": 3, "patch": "@@ -12,7 +12,8 @@ Make sure you have [node.js](http://nodejs.org/) and [npm](http://npmjs.org/) in\n \n Download the [latest version of hubot](https://github.com/github/hubot/downloads).\n \n-Then follow the instructions in the README in the `hubot` directory.\n+Then follow the instructions in the\n+[README](https://github.com/github/hubot/blob/master/src/templates/README.md#readme).\n \n ## Scripts\n \n@@ -28,7 +29,7 @@ Install all of the required dependencies by running `npm install`.\n \n It's easy to test scripts locally with an interactive shell:\n \n-    % bin/hubot\n+    % PATH=\"node_modules/.bin:$PATH\" bin/hubot\n \n ...and to run tests:\n ", "changes": 5}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/78cf56eeabcd140a70baecf4c49bcf94294c33d1/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/78cf56eeabcd140a70baecf4c49bcf94294c33d1/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=78cf56eeabcd140a70baecf4c49bcf94294c33d1", "filename": "src/templates/README.md", "sha": "396373cb9826685e6533473f35131ec180b00390", "additions": 10, "patch": "@@ -8,9 +8,17 @@ This version is designed to be deployed on heroku.\n Playing with Hubot\n ==================\n \n-You'll need to install the necessary dependencies for hubot. All of\n+First, create your own hubot, nubot.\n+\n+    % npm install\n+    % PATH=\"node_modules/.bin:$PATH\" bin/hubot -c nubot\n+    Creating a hubot install at nubot\n+\n+You'll need to install the necessary dependencies for nubot. All of\n those dependencies are provided by [npm](http://npmjs.org).\n \n+    % cd nubot\n+    % npm install\n     % bin/hubot\n \n You'll see some startup output about where your scripts come from.\n@@ -68,7 +76,7 @@ Create a separate user for your bot and get their token from the web UI.\n     % heroku config:add HUBOT_CAMPFIRE_TOKEN=\"...\"\n \n Get the numeric ids of the rooms you want the bot to join, comma\n-delimited. If you want the bot to connect to `https://mysubdomain.campfirenow.com/room/42` \n+delimited. If you want the bot to connect to `https://mysubdomain.campfirenow.com/room/42`\n and `https://mysubdomain.campfirenow.com/room/1024` then you'd add it like this:\n \n     % heroku config:add HUBOT_CAMPFIRE_ROOMS=\"42,1024\"", "changes": 12}], "110": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/31302370537600a52f6ed64bc8480e286156b26c/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/31302370537600a52f6ed64bc8480e286156b26c/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=31302370537600a52f6ed64bc8480e286156b26c", "filename": "bin/hubot", "sha": "6ce5cc1c8a2c3dad2c31224187449c3b86322fb7", "additions": 1, "patch": "@@ -13,7 +13,7 @@ Creator    = require '../src/creator'\n OptParse   = require 'optparse'\n PortNumber = parseInt(process.env.PORT) || 8080\n \n-Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\"]\n+Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\",\"gtalk\"]\n Switches = [\n   [ \"-h\", \"--help\",              \"Display the help information\"],\n   [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/31302370537600a52f6ed64bc8480e286156b26c/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/31302370537600a52f6ed64bc8480e286156b26c/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=31302370537600a52f6ed64bc8480e286156b26c", "filename": "package.json", "sha": "056c97108452aa3f13f44ebdf9b5c5b727081f4f", "additions": 1, "patch": "@@ -30,4 +30,4 @@\n   },\n \n   \"engine\": \"node >= 0.4.1 < 0.5.0\"\n-}\n+}\n\\ No newline at end of file", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/31302370537600a52f6ed64bc8480e286156b26c/src/hubot/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/31302370537600a52f6ed64bc8480e286156b26c/src/hubot/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/gtalk.coffee?ref=31302370537600a52f6ed64bc8480e286156b26c", "filename": "src/hubot/gtalk.coffee", "sha": "6070c0a877491cf160e5295cfbd19db349bd74c9", "additions": 81, "patch": "@@ -0,0 +1,81 @@\n+Robot = require '../robot'\n+Xmpp = require 'node-xmpp'\n+\n+class Gtalkbot extends Robot\n+  run: ->\n+\n+    # Client Options\n+    options = \n+      jid: process.env.HUBOT_GTALK_USERNAME\n+      password: process.env.HUBOT_GTALK_PASSWORD\n+      host: 'talk.google.com'\n+      port: 5222\n+      keepaliveInterval: 30000 # ms interval to send whitespace to xmpp server\n+\n+    # Connect to gtalk servers\n+    @client = new Xmpp.Client options\n+\n+    # Events\n+    @client.on 'online', @.online\n+    @client.on 'stanza', @.read\n+    @client.on 'error', @.error\n+    \n+    # Log options\n+    console.log options\n+\n+    # Share the optionss\n+    @options = options\n+\n+  online: =>\n+    @client.send new Xmpp.Element('presence')\n+      .c('show').t('chat')\n+\n+    # send raw whitespace for keepalive\n+    setInterval =>\n+      @client.send ' '\n+    , @options.keepaliveInterval\n+\n+    # He is alive!\n+    console.log @name + ' is online, talk.google.com!'\n+\n+  read: (stanza) =>\n+    if stanza.attrs.type is 'error'\n+      console.error '[xmpp error] - ' + stanza\n+      return\n+\n+    # Make sure we have a message\n+    return if !stanza.is 'message' or stanza.attrs.type not in ['groupchat', 'direct', 'chat']\n+    \n+    # Strip the from attribute to get who this is from\n+    [from, room] = stanza.attrs.from.split '/'\n+    # ignore empty bodies (i.e., topic changes -- maybe watch these someday)\n+    body = stanza.getChild 'body'\n+    return unless body\n+    \n+    message = body.getText()\n+\n+    # Pad the message with robot name just incase it was not provided.\n+    message = if !message.match(new RegExp(\"^\"+@name+\":?\",\"i\")) then @name+\" \"+message else message\n+\n+    # Send the message to the robot\n+    @receive new Robot.TextMessage from, message\n+  \n+  send: (user, strings...) ->\n+    for str in strings\n+      message = new Xmpp.Element('message',\n+          from: @options.username\n+          to: user\n+          type: 'chat' \n+        ).\n+        c('body').t(str)\n+      # Send it off\n+      @client.send message\n+\n+  reply: (user, strings...) ->\n+    for str in strings\n+      @send user, \"#{str}\"\n+\n+  error: (err) =>\n+    console.error err\n+\n+module.exports = Gtalkbot\n\\ No newline at end of file", "changes": 81}], "111": [{"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/38494955cc8ca3e0bcfbd3485919908d75d2a3cd/src/hubot/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/38494955cc8ca3e0bcfbd3485919908d75d2a3cd/src/hubot/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/translate.coffee?ref=38494955cc8ca3e0bcfbd3485919908d75d2a3cd", "filename": "src/hubot/scripts/translate.coffee", "sha": "c4d911389679f593650d522766a292741a8e9abb", "additions": 5, "patch": "@@ -65,10 +65,10 @@ getCode = (language,languages) ->\n       return code if lang.toLowerCase() is language.toLowerCase()\n \n module.exports = (robot) ->\n-  robot.respond /(translate)( me)?(( from) ([a-z]*))?(( (in)?to) ([a-z]*))? (.*)/i, (msg) ->\n-    term   = \"\\\"#{msg.match[10]}\\\"\"\n-    origin = if msg.match[5] isnt undefined then getCode(msg.match[5], languages) else 'auto'\n-    target = if msg.match[9] isnt undefined then getCode(msg.match[9], languages) else 'en'\n+  robot.respond /(?:translate)(?: me)?(?:(?: from) ([a-z]*))?(?:(?: (?:in)?to) ([a-z]*))? (.*)/i, (msg) ->\n+    term   = \"\\\"#{msg.match[3]}\\\"\"\n+    origin = if msg.match[1] isnt undefined then getCode(msg.match[1], languages) else 'auto'\n+    target = if msg.match[2] isnt undefined then getCode(msg.match[2], languages) else 'en'\n     \n     msg.http(\"http://translate.google.com/translate_a/t\")\n       .query({\n@@ -90,7 +90,7 @@ module.exports = (robot) ->\n           language =languages[parsed[2]]\n           parsed = parsed[0] && parsed[0][0] && parsed[0][0][0]\n           if parsed\n-            if msg.match[9] is undefined\n+            if msg.match[2] is undefined\n               msg.send \"#{term} is #{language} for #{parsed}\"\n             else\n               msg.send \"The #{language} #{term} translates as #{parsed} in #{languages[target]}\"", "changes": 10}], "113": [{"status": "modified", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/306126afcd0a3d362ccbe1b665d0d6e417d6d650/src/hubot/talker.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/306126afcd0a3d362ccbe1b665d0d6e417d6d650/src/hubot/talker.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/talker.coffee?ref=306126afcd0a3d362ccbe1b665d0d6e417d6d650", "filename": "src/hubot/talker.coffee", "sha": "7b116625ea91b26e9c62b2a695d406c735023e6e", "additions": 29, "patch": "@@ -32,19 +32,23 @@ class Talker extends Robot\n         bot.write {type: \"ping\"}\n       , 25000\n \n+    bot.on \"Users\", (message)->\n+      for user in message.users\n+        self.userForId(user.id, user)\n+\n     bot.on \"TextMessage\", (message)->\n       console.log message\n-      author = self.userForId(message.user.id)\n+      author = self.userForId(message.user.id, message.user)\n       self.receive new Robot.TextMessage(author, message.content.replace(/^\\s*@hubot\\s+/, \"Hubot: \"))\n     \n     bot.on \"EnterMessage\", (message) ->\n       console.log message\n-      author = self.userForId(message.user.id)\n+      author = self.userForId(message.user.id, message.user)\n       self.receive new Robot.EnterMessage(author)\n     \n     bot.on \"LeaveMessage\", (message) ->\n       console.log message\n-      author = self.userForId(message.user.id)\n+      author = self.userForId(message.user.id, message.user)\n       self.receive new Robot.LeaveMessage(author)\n     \n     @bot = bot\n@@ -70,23 +74,28 @@ class TalkerClient extends EventEmitter\n        \n     #callback\n     @socket.addListener 'data', (data) ->\n-      console.log data\n-      \n-      if data.indexOf('\"type\":\"users\"') > 0\n-        message = {\"type\": \"none\"}\n-      else\n-        message = JSON.parse(data)\n-        \n-      if message.type == \"connected\"\n-        console.log \"Succesfully connected, listing users:\"\n-      if message.type == \"message\"\n-        self.emit \"TextMessage\", message\n-      if message.type == \"join\"\n-        self.emit \"EnterMessage\", message\n-      if message.type == \"leave\"\n-        self.emit \"LeaveMessage\", message\n-      if message.type == \"error\"\n-        self.disconnect message.message\n+      for line in data.split '\\n'\n+        console.log line\n+\n+        message = unless line is ''\n+          message = JSON.parse(line)\n+        else\n+          message = null\n+\n+        if message\n+          if message.type == \"connected\"\n+            self.emit \"Connected\"\n+          if message.type == \"users\"\n+            self.emit \"Users\", message\n+          if message.type == \"message\"\n+            self.emit \"TextMessage\", message\n+          if message.type == \"join\"\n+            self.emit \"EnterMessage\", message\n+          if message.type == \"leave\"\n+            self.emit \"LeaveMessage\", message\n+          if message.type == \"error\"\n+            self.disconnect message.message\n+\n       \n     @socket.addListener \"eof\", ->\n       console.log \"eof\"", "changes": 49}], "117": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1d1b69d3ed9b2643fba81af1af268157d5e61355/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1d1b69d3ed9b2643fba81af1af268157d5e61355/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=1d1b69d3ed9b2643fba81af1af268157d5e61355", "filename": "src/robot.coffee", "sha": "c6d100c1cab5656142e3f5b89fb519cb2145b1ed", "additions": 1, "patch": "@@ -124,7 +124,7 @@ class Robot\n     Fs.readFile path, \"utf-8\", (err, body) =>\n       throw err if err\n       for i, line of body.split(\"\\n\")\n-        break    if line[0] != '#'\n+        break    if !(line[0] == '#' or line.substr(0, 2) == '//')\n         continue if !line.match('-')\n         @commands.push line[2..line.length]\n ", "changes": 2}], "118": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/9a7514f8e4cb1ff9e34898bfea6a57bdbeeaa25d/src/hubot/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9a7514f8e4cb1ff9e34898bfea6a57bdbeeaa25d/src/hubot/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/google-images.coffee?ref=9a7514f8e4cb1ff9e34898bfea6a57bdbeeaa25d", "filename": "src/hubot/scripts/google-images.coffee", "sha": "427b7274a38e3aae49f47820bf22dc3e732a30b8", "additions": 1, "patch": "@@ -13,7 +13,7 @@ module.exports = (robot) ->\n       msg.send url\n \n   robot.respond /animate me (.*)/i, (msg) ->\n-    imageMe msg, \"animated #{msg.match[1]}\", (url) ->\n+    imageMe msg, \"animated gif #{msg.match[1]}\", (url) ->\n       msg.send url\n \n   robot.respond /(?:mo?u)?sta(?:s|c)he?(?: me)? (.*)/i, (msg) ->", "changes": 2}], "120": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8bf369bdbd8ae254b0ebb9739ae4f2441da01b9f/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/8bf369bdbd8ae254b0ebb9739ae4f2441da01b9f/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=8bf369bdbd8ae254b0ebb9739ae4f2441da01b9f", "filename": "bin/hubot", "sha": "b9c87c10348a6e97335e013d284dc4eccba5345b", "additions": 1, "patch": "@@ -13,7 +13,7 @@ Creator    = require '../src/creator'\n OptParse   = require 'optparse'\n PortNumber = parseInt(process.env.PORT) || 8080\n \n-Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\", \"talker\", \"twitter\"]\n+Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\", \"talker\", \"twitter\", \"jaconda\"]\n Switches = [\n   [ \"-h\", \"--help\",              \"Display the help information\"],\n   [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8bf369bdbd8ae254b0ebb9739ae4f2441da01b9f/src/hubot/jaconda.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8bf369bdbd8ae254b0ebb9739ae4f2441da01b9f/src/hubot/jaconda.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/jaconda.coffee?ref=8bf369bdbd8ae254b0ebb9739ae4f2441da01b9f", "filename": "src/hubot/jaconda.coffee", "sha": "168004c1b1036362bd4bf2e013fcee1d7db8eb53", "additions": 117, "patch": "@@ -0,0 +1,117 @@\n+Robot        = require \"../robot\"\n+HTTPS        = require \"https\"\n+URL   \t\t\t = require 'url'\n+\n+class Jaconda extends Robot\n+  \n+  send: (user, strings... ) ->\n+    for str in strings\n+      @post_message str\n+\n+  reply: (user, strings... ) ->\n+    for str in strings\n+      @send user, \"#{user.name}: #{str}\"\n+\n+  topic: (user, strings... ) ->\n+    for str in strings\n+      @update_topic str\n+\n+  # Public: Raw method for invoking the bot to run\n+  # Extend this.\n+  run: ->\n+    @account_id = process.env.HUBOT_JACONDA_ACCOUNT\n+    @room_id \t  = process.env.HUBOT_JACONDA_ROOM\n+    @api_token  = process.env.HUBOT_JACONDA_API_TOKEN\n+\n+    @last_id = 0\n+\n+    @timer = setInterval =>\n+      @fetch_messages (messages) =>\n+        for msg in messages\n+          @last_id = msg.message.id\n+          if msg.message.text and (new Date(msg.message.updated_at).getTime()) > new Date().getTime() - 8*1000\n+            console.log \"#{msg.message.sender_name}: #{msg.message.text}\"\n+            @receive new Robot.TextMessage msg.message.sender_name, msg.message.text\n+    , 2000\n+\n+\n+  # # Public: Raw method for shutting the bot down.\n+  # # Extend this.\n+  close: ->\n+    clearInterval @timer\n+\n+  fetch_messages: (callback) ->\n+    options =\n+      agent: false\n+      host: \"#{@account_id}.jaconda.im\"\n+      port: 443\n+      method: 'GET'\n+      path: \"/api/v2/rooms/#{@room_id}/messages.json?per_page=200\"\n+      headers:\n+        Host: \"#{@account_id}.jaconda.im\"\n+        Authorization: \"Basic \" + new Buffer(\"#{@api_token}:x\").toString(\"base64\")\n+      \n+\n+    request = HTTPS.request options, (response) =>\n+      data = ''\n+      response.on 'data', (chunk) -> data += chunk\n+      response.on 'end', =>\n+        if data\n+          json = JSON.parse(data)\n+          if json?\n+            filtered_messages = json.filter (message) =>\n+              message.message.id > @last_id\n+            callback(filtered_messages) if filtered_messages?\n+    request.end()\n+\n+  post_message: (message) ->\n+    \n+    formatted_message = \"{message: {text: #{JSON.stringify(message)}}}\"\n+    console.log(\"message is formatted to #{formatted_message}\")\n+    \n+    options =\n+      agent: false\n+      host: \"#{@account_id}.jaconda.im\"\n+      port: 443\n+      method: 'POST'\n+      path: \"/api/v2/rooms/#{@room_id}/messages.json\"\n+      headers:\n+        Host: \"#{@account_id}.jaconda.im\"\n+        Authorization: \"Basic \" + new Buffer(\"#{@api_token}:x\").toString(\"base64\")\n+        \"Content-Type\": \"application/json\"\n+        \"Content-Length\" : formatted_message.length\n+\n+\n+    request = HTTPS.request options, (response) =>\n+      data = ''\n+      response.on 'data', (chunk) -> data += chunk\n+      response.on 'end', =>\n+        console.log(data)\n+    request.end(formatted_message)\n+\n+  update_topic: (topic) ->\n+    \n+    formatted_topic = \"{room: {topic: #{JSON.stringify(topic)}}}\"\n+    \n+    options =\n+      agent: false\n+      host: \"#{@account_id}.jaconda.im\"\n+      port: 443\n+      method: 'PUT'\n+      path: \"/api/v2/rooms/#{@room_id}.json\"\n+      headers:\n+        \"Host\"          : \"#{@account_id}.jaconda.im\"\n+        \"Authorization\" : \"Basic \" + new Buffer(\"#{@api_token}:x\").toString(\"base64\")\n+        \"Content-Type\"  : \"application/json\"\n+        \"Content-Length\" : formatted_topic.length\n+\n+\n+    request = HTTPS.request options, (response) =>\n+      data = ''\n+      response.on 'data', (chunk) -> data += chunk\n+      response.on 'end', =>\n+        console.log(data)\n+    request.end(formatted_topic)\n+\n+\n+module.exports = Jaconda", "changes": 117}], "121": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/cf4b174ce9e7368907ce217c7fabec278350a92e/src/hubot/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/cf4b174ce9e7368907ce217c7fabec278350a92e/src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/hipchat.coffee?ref=cf4b174ce9e7368907ce217c7fabec278350a92e", "filename": "src/hubot/hipchat.coffee", "sha": "1c9a138c2ac2ac08d28506c0d5710d4607e52646", "additions": 1, "patch": "@@ -11,7 +11,7 @@ class HipChat extends Robot\n   reply: (user, strings...) ->\n     console.log \"Replying\"\n     for str in strings\n-      @send user, \"@#{user.name} #{str}\"\n+      @send user, \"@#{user.name.toString().split(' ')[0]} #{str}\"\n \n   run: ->\n     self = @", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/cf4b174ce9e7368907ce217c7fabec278350a92e/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/cf4b174ce9e7368907ce217c7fabec278350a92e/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=cf4b174ce9e7368907ce217c7fabec278350a92e", "filename": "src/robot.coffee", "sha": "e0c241204711406e4dcfd6d05d804c824d56c631", "additions": 2, "patch": "@@ -150,7 +150,7 @@ class Robot\n   close: ->\n     @brain.close()\n \n-  users: () ->\n+  users: ->\n     @brain.data.users\n \n   # Public: Get a User object given a unique identifier\n@@ -170,6 +170,7 @@ class Robot\n     for k of (@brain.data.users or { })\n       if @brain.data.users[k]['name'].toLowerCase() is lowerName\n         result = @brain.data.users[k]\n+        break\n     result\n \n class Robot.User", "changes": 3}], "123": [{"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/3dc51350a144684350fc4dfcd6b0ea40bc80a42a/src/hubot/talker.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3dc51350a144684350fc4dfcd6b0ea40bc80a42a/src/hubot/talker.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/talker.coffee?ref=3dc51350a144684350fc4dfcd6b0ea40bc80a42a", "filename": "src/hubot/talker.coffee", "sha": "cc5ece5287f40731e51e6c6f7254858252d6abb7", "additions": 6, "patch": "@@ -17,17 +17,16 @@ class Talker extends Robot\n     self = @\n     options =\n       token:   process.env.HUBOT_TALKER_TOKEN\n-      rooms:   process.env.HUBOT_TALKER_ROOMS\n+      room:    process.env.HUBOT_TALKER_ROOM\n \n     console.log options\n     bot = new TalkerClient(options)\n     console.log bot\n     \n     bot.connect ->\n-      options.rooms.split(',').forEach (room) ->\n-        console.log \"Entering room: \" + room\n-        bot.write {\"room\": room, \"token\": options.token, \"type\": \"connect\"}\n-        \n+      console.log \"Entering room: \" + options.room\n+      bot.write {\"room\": options.room, \"token\": options.token, \"type\": \"connect\"}\n+\n       setInterval -> \n         bot.write {type: \"ping\"}\n       , 25000\n@@ -58,7 +57,7 @@ module.exports = Talker\n class TalkerClient extends EventEmitter\n   constructor: (options) ->\n     @token         = options.token\n-    @rooms         = options.rooms.split(\",\")\n+    @room          = options.room\n     @domain        = 'talkerapp.com'\n     @encoding      = 'utf8'\n     @port          = 8500\n@@ -77,14 +76,9 @@ class TalkerClient extends EventEmitter\n       for line in data.split '\\n'\n         console.log line\n \n-        message = unless line is ''\n-          message = JSON.parse(line)\n-        else\n-          message = null\n+        message = if line is '' then null else JSON.parse(line)\n \n         if message\n-          if message.type == \"connected\"\n-            self.emit \"Connected\"\n           if message.type == \"users\"\n             self.emit \"Users\", message\n           if message.type == \"message\"", "changes": 18}], "124": [{"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/52bcdd3e7b0a031b78f654be4b09f46ab37f28fe/src/hubot/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/52bcdd3e7b0a031b78f654be4b09f46ab37f28fe/src/hubot/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/scripts/roles.coffee?ref=52bcdd3e7b0a031b78f654be4b09f46ab37f28fe", "filename": "src/hubot/scripts/roles.coffee", "sha": "ff9967492bab0c7d02f9e1499f742f95655acdd8", "additions": 26, "patch": "@@ -9,29 +9,40 @@\n #\n \n module.exports = (robot) ->\n+\n+  getAmbiguousUserText = (users) ->\n+    \"Be more specific, I know #{users.length} people named like that: #{(user.name for user in users).join(\", \")}\"\n+\n   robot.respond /who is ([\\w .-]+)\\?*$/i, (msg) ->\n     name = msg.match[1]\n \n     if name is \"you\"\n       msg.send \"Who ain't I?\"\n     else if name is robot.name\n       msg.send \"The best.\"\n-    else if user = robot.userForName name\n-      user.roles = user.roles or [ ]\n-      if user.roles.length > 0\n-        msg.send \"#{name} is #{user.roles.join(\", \")}.\"\n-      else\n-        msg.send \"#{name} is nothing to me.\"\n     else\n-      msg.send \"#{name}? Never heard of 'em\"\n+      users = robot.usersForFuzzyName(name)\n+      if users.length is 1\n+        user = users[0]\n+        user.roles = user.roles or [ ]\n+        if user.roles.length > 0\n+          msg.send \"#{name} is #{user.roles.join(\", \")}.\"\n+        else\n+          msg.send \"#{name} is nothing to me.\"\n+      else if users.length > 1\n+        msg.send getAmbiguousUserText users\n+      else\n+        msg.send \"#{name}? Never heard of 'em\"\n \n   robot.respond /([\\w .-]+) is ([\"'\\w: ]+)[.!]*$/i, (msg) ->\n     name    = msg.match[1]\n     newRole = msg.match[2].trim()\n \n     unless name in ['who', 'what', 'where', 'when', 'why']\n       unless newRole.match(/^not\\s+/i)\n-        if user = robot.userForName name\n+        users = robot.usersForFuzzyName(name)\n+        if users.length is 1\n+          user = users[0]\n           user.roles = user.roles or [ ]\n \n           if newRole in user.roles\n@@ -42,6 +53,8 @@ module.exports = (robot) ->\n               msg.send \"Ok, I am #{newRole}.\"\n             else\n               msg.send \"Ok, #{name} is #{newRole}.\"\n+        else if users.length > 1\n+          msg.send getAmbiguousUserText users\n         else\n           msg.send \"I don't know anything about #{name}.\"\n \n@@ -50,14 +63,17 @@ module.exports = (robot) ->\n     newRole = msg.match[2].trim()\n \n     unless name in ['who', 'what', 'where', 'when', 'why']\n-      if user = robot.userForName name\n+      users = robot.usersForFuzzyName(name)\n+      if users.length is 1\n+        user = users[0]\n         user.roles = user.roles or [ ]\n \n         if newRole not in user.roles\n           msg.send \"I know.\"\n         else\n           user.roles = (role for role in user.roles when role isnt newRole)\n           msg.send \"Ok, #{name} is no longer #{newRole}.\"\n-\n+      else if users.length > 1\n+        msg.send getAmbiguousUserText users\n       else\n         msg.send \"I don't know anything about #{name}.\"", "changes": 36}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/52bcdd3e7b0a031b78f654be4b09f46ab37f28fe/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/52bcdd3e7b0a031b78f654be4b09f46ab37f28fe/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=52bcdd3e7b0a031b78f654be4b09f46ab37f28fe", "filename": "src/robot.coffee", "sha": "592b837884b3eaf9c62b091d741120e526299c2e", "additions": 25, "patch": "@@ -170,8 +170,33 @@ class Robot\n     for k of (@brain.data.users or { })\n       if @brain.data.users[k]['name'].toLowerCase() is lowerName\n         result = @brain.data.users[k]\n+        break\n+\n     result\n \n+  # Public: Get all users whose names match fuzzyName. Currently, match\n+  # means 'starts with', but this could be extended to match initials,\n+  # nicknames, etc.\n+  #\n+  usersForRawFuzzyName: (fuzzyName) ->\n+    lowerFuzzyName = fuzzyName.toLowerCase()\n+    user for key, user of (@brain.data.users or {}) when (\n+         user.name.toLowerCase().lastIndexOf(lowerFuzzyName, 0) == 0)\n+      \n+  # Public: If fuzzyName is an exact match for a user, returns an array with\n+  # just that user. Otherwise, returns an array of all users for which\n+  # fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n+  #\n+  usersForFuzzyName: (fuzzyName) ->\n+    matchedUsers = @usersForRawFuzzyName(fuzzyName);\n+    lowerFuzzyName = fuzzyName.toLowerCase()\n+    # We can scan matchedUsers rather than all users since usersForRawFuzzyName\n+    # will include exact matches\n+    for user in matchedUsers\n+      return [user] if user.name.toLowerCase() is lowerFuzzyName\n+          \n+    matchedUsers\n+\n class Robot.User\n   # Represents a participating user in the chat.\n   #", "changes": 25}], "126": [{"status": "modified", "deletions": 61, "raw_url": "https://github.com/hubotio/hubot/raw/466b9c67b72fca2eeff0879717faa457704774c6/src/hubot/twilio.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/466b9c67b72fca2eeff0879717faa457704774c6/src/hubot/twilio.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/twilio.coffee?ref=466b9c67b72fca2eeff0879717faa457704774c6", "filename": "src/hubot/twilio.coffee", "sha": "a7d84448207da4231e66639bbc27165bde95380f", "additions": 45, "patch": "@@ -1,92 +1,76 @@\n Robot = require '../robot'\n-Http  = require 'http'\n-Https = require 'https'\n-Qs    = require 'querystring'\n+HTTP  = require 'http'\n+QS    = require 'querystring'\n \n class Twilio extends Robot\n   constructor: ->\n-    @config =\n-      sid: process.env.HUBOT_SMS_SID\n-      token: process.env.HUBOT_SMS_TOKEN\n-      from: process.env.HUBOT_SMS_FROM\n-    super\n+    @sid   = process.env.HUBOT_SMS_SID\n+    @token = process.env.HUBOT_SMS_TOKEN\n+    @from  = process.env.HUBOT_SMS_FROM\n+    super()\n \n   send: (user, strings...) ->\n     message = strings.join \"\\n\"\n-    @post message, user.id, (error, body) ->\n-      if error or not body\n-        console.log \"error sending response: #{error}\"\n-      else\n-        console.log \"successful sending #{body}\"\n+\n+    for msg in @split_long_sms(message)\n+      @send_sms message, user.id, (err, body) ->\n+        if err or not body?\n+          console.log \"Error sending reply SMS: #{err}\"\n+        else\n+          console.log \"Sending reply SMS: #{message} to #{user.id}\"\n \n   reply: (user, strings...) ->\n-    for str in strings\n-      @send user, \"#{user.name}: #{str}\"\n+    @send user, str for str in strings\n \n   respond: (regex, callback) ->\n     @hear regex, callback\n \n   run: ->\n-    console.log \"Hubot: the SMS reader.\"\n+    server = HTTP.createServer (request, response) =>\n+      payload = QS.parse(request.url)\n \n-    server = Http.createServer (request, response) =>\n-      payload = Qs.parse(request.url)\n-\n-      @handle payload.Body, payload.From if payload.Body and payload.From\n+      if payload.Body? and payload.From?\n+        console.log \"Received SMS: #{payload.Body} from #{payload.From}\"\n+        @receive_sms(payload.Body, payload.From)\n \n       response.writeHead 200, 'Content-Type': 'text/plain'\n       response.end()\n \n     server.listen (parseInt(process.env.PORT) or 8080), \"0.0.0.0\"\n \n-  handle: (body, from) ->\n+  receive_sms: (body, from) ->\n     return if body.length is 0\n     user = @userForId from\n     @receive new Robot.TextMessage user, body\n \n-  post: (message, to, callback) ->\n-    host = \"api.twilio.com\"\n-    path = \"/2010-04-01/Accounts/#{@config.sid}/SMS/Messages.json\"\n-\n-    auth = new Buffer(@config.sid + ':' + @config.token).toString(\"base64\")\n-\n-    headers =\n-      'Authorization': \"Basic \" + auth\n-      'Content-Type': \"application/x-www-form-urlencoded\"\n-      'Host': host\n-\n-    params = Qs.stringify\n-      'From': @config.from\n-      'To': to\n-      'Body': message\n-\n-    headers['Content-Length'] = params.length\n-\n-    opts =\n-      host: host\n-      port: 443\n-      method: \"POST\"\n-      path: path\n-      headers: headers\n-\n-    request = Https.request opts, (response) ->\n-      data = \"\"\n-\n-      response.setEncoding \"utf8\"\n-\n-      response.on \"data\", (chunk) ->\n-        data += chunk\n-\n-      response.on \"end\", ->\n-        body = JSON.parse data\n-\n-        if response.statusCode is 201\n+  send_sms: (message, to, callback) ->\n+    auth = new Buffer(@sid + ':' + @token).toString(\"base64\")\n+    data = QS.stringify From: @from, To: to, Body: message\n+\n+    @http(\"https://api.twilio.com\")\n+      .path(\"/2010-04-01/Accounts/#{@sid}/SMS/Messages.json\")\n+      .header(\"Authorization\", \"Basic #{auth}\")\n+      .header(\"Content-Type\", \"application/x-www-form-urlencoded\")\n+      .post(data) (err, res, body) ->\n+        if err\n+          callback err\n+        else if res.statusCode is 201\n+          json = JSON.parse(body)\n           callback null, body\n         else\n+          json = JSON.parse(body)\n           callback body.message\n \n-    request.write params\n-    request.end()\n+  split_long_sms: (message) ->\n+    strs = []\n+    while str.length > 150\n+      pos = str.substring(0, 150).lastIndexOf(\" \")\n+      pos = (if pos <= 0 then 150 else pos)\n+      strs.push str.substring(0, pos)\n+      i = str.indexOf(\" \", pos) + 1\n+      i = pos  if i < pos or i > pos + 150\n+      str = str.substring(i)\n+    strs.push str\n+    strs\n \n module.exports = Twilio\n-", "changes": 106}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/466b9c67b72fca2eeff0879717faa457704774c6/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/466b9c67b72fca2eeff0879717faa457704774c6/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=466b9c67b72fca2eeff0879717faa457704774c6", "filename": "src/robot.coffee", "sha": "cf0ad0172fc6d50f519359aecbaa8137faaddfe7", "additions": 35, "patch": "@@ -178,6 +178,37 @@ class Robot\n         result = @brain.data.users[k]\n     result\n \n+  # Public: Creates a scoped http client with chainable methods for\n+  # modifying the request.  This doesn't actually make a request though.\n+  # Once your request is assembled, you can call `get()`/`post()`/etc to\n+  # send the request.\n+  #\n+  # url - String URL to access.\n+  #\n+  # Examples:\n+  #\n+  #     res.http(\"http://example.com\")\n+  #       # set a single header\n+  #       .header('Authorization', 'bearer abcdef')\n+  #\n+  #       # set multiple headers\n+  #       .headers(Authorization: 'bearer abcdef', Accept: 'application/json')\n+  #\n+  #       # add URI query parameters\n+  #       .query(a: 1, b: 'foo & bar')\n+  #\n+  #       # make the actual request\n+  #       .get() (err, res, body) ->\n+  #         console.log body\n+  #\n+  #       # or, you can POST data\n+  #       .post(data) (err, res, body) ->\n+  #         console.log body\n+  #\n+  # Returns a ScopedClient instance.\n+  http: (url) ->\n+    @httpClient.create(url)\n+\n class Robot.User\n   # Represents a participating user in the chat.\n   #\n@@ -365,6 +396,9 @@ class Robot.Response\n   http: (url) ->\n     @httpClient.create(url)\n \n-Robot.Response.prototype.httpClient = require 'scoped-http-client'\n+HttpClient = require 'scoped-http-client'\n+\n+Robot.Response::httpClient = HttpClient\n+Robot::httpClient = HttpClient\n \n module.exports = Robot", "changes": 36}], "127": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f3dbe7cd97336fa47058a073c76a60b703790019/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/f3dbe7cd97336fa47058a073c76a60b703790019/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=f3dbe7cd97336fa47058a073c76a60b703790019", "filename": "bin/hubot", "sha": "1e1ebc4c60af73ca70f1a20df6b374848928d9b7", "additions": 1, "patch": "@@ -13,7 +13,7 @@ Creator    = require '../src/creator'\n OptParse   = require 'optparse'\n PortNumber = parseInt(process.env.PORT) || 8080\n \n-Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\", \"talker\", \"twitter\"]\n+Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\", \"talker\", \"twitter\", \"flowdock\"]\n Switches = [\n   [ \"-h\", \"--help\",              \"Display the help information\"],\n   [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f3dbe7cd97336fa47058a073c76a60b703790019/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/f3dbe7cd97336fa47058a073c76a60b703790019/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=f3dbe7cd97336fa47058a073c76a60b703790019", "filename": "package.json", "sha": "3384113e6c433ea9e5f63bdc4909578633e24f21", "additions": 2, "patch": "@@ -23,7 +23,8 @@\n     \"irc\": \"0.2\",\n     \"node-xmpp\": \">=0.2.6\",\n     \"wobot\": \"0.3.0\",\n-    \"imap\": \"0.2.5\"\n+    \"imap\": \"0.2.5\",\n+    \"flowdock\": \"0.2.x\"\n   },\n \n   \"main\": \"./index\",", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f3dbe7cd97336fa47058a073c76a60b703790019/src/hubot/flowdock.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f3dbe7cd97336fa47058a073c76a60b703790019/src/hubot/flowdock.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/flowdock.coffee?ref=f3dbe7cd97336fa47058a073c76a60b703790019", "filename": "src/hubot/flowdock.coffee", "sha": "70098cab5b51a6d37829e47682303f534224f4e7", "additions": 42, "patch": "@@ -0,0 +1,42 @@\n+Robot        = require \"../robot\"\n+flowdock     = require \"flowdock\"\n+\n+class Flowdock extends Robot\n+  send: (user, strings...) ->\n+    strings.forEach (str) =>\n+      @bot.chatMessage(user.flow.subdomain, user.flow.name, str)\n+\n+  reply: (user, strings...) ->\n+    strings.forEach (str) =>\n+      @send user, \"#{user.name}: #{str}\"\n+\n+  run: ->\n+    self = @\n+    options =\n+      login_email:    process.env.HUBOT_FLOWDOCK_LOGIN_EMAIL\n+      login_password: process.env.HUBOT_FLOWDOCK_LOGIN_PASSWORD\n+\n+    bot = new flowdock.Session(options.login_email, options.login_password)\n+    bot.fetchFlows((flows) =>\n+      flows.forEach (flow) =>\n+        bot.fetchUsers(flow.organization.subdomain, flow.slug, (users) =>\n+          users.forEach (flow_user) =>\n+            return if flow_user.user.disabled == true\n+            user =\n+              id: flow_user.user.id\n+              name: flow_user.user.nick\n+            @userForId(user.id, user)\n+        )\n+        bot.subscribe(flow.organization.subdomain, flow.slug)\n+    )\n+\n+    bot.on \"message\", (message) =>\n+      return unless message.event == 'message'\n+      flow = bot.flows.filter((flow) -> return flow.name == message.flow)[0]\n+      author = @userForId(message.user)\n+      author.flow = flow\n+      self.receive new Robot.TextMessage(author, message.content)\n+\n+    @bot = bot\n+\n+module.exports = Flowdock", "changes": 42}], "128": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/bfed72d515a9d3bbcf966f2e30eb4eb883559236/src/hubot/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/bfed72d515a9d3bbcf966f2e30eb4eb883559236/src/hubot/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/campfire.coffee?ref=bfed72d515a9d3bbcf966f2e30eb4eb883559236", "filename": "src/hubot/campfire.coffee", "sha": "406aa8d47edeed1a708baed9b7c82bbf82c1eb37", "additions": 4, "patch": "@@ -4,12 +4,13 @@ EventEmitter = require(\"events\").EventEmitter\n \n class Campfire extends Robot\n   send: (user, strings...) ->\n-    for str in strings\n-      @bot.Room(user.room).speak str, (err, data) ->\n+    if strings.length > 0\n+      @bot.Room(user.room).speak strings.shift(), (err, data) =>\n         console.log \"campfire error: #{err}\" if err\n+        @send user, strings...\n \n   reply: (user, strings...) ->\n-    @send user, \"#{user.name}: #{str}\" for str in strings\n+    @send user, strings.map((str) -> \"#{user.name}: #{str}\")...\n \n   run: ->\n     self = @", "changes": 7}], "129": [{"status": "modified", "deletions": 18, "raw_url": "https://github.com/hubotio/hubot/raw/fd0887f5c0d71557c307004e587b19757a330c1f/src/hubot/talker.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fd0887f5c0d71557c307004e587b19757a330c1f/src/hubot/talker.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/talker.coffee?ref=fd0887f5c0d71557c307004e587b19757a330c1f", "filename": "src/hubot/talker.coffee", "sha": "f7ef423c8d6d331a3a3af9183531119083cfdb3b", "additions": 27, "patch": "@@ -22,13 +22,13 @@ class Talker extends Robot\n     console.log options\n     bot = new TalkerClient(options)\n     console.log bot\n-    \n+\n     bot.connect ->\n       options.rooms.split(',').forEach (room) ->\n         console.log \"Entering room: \" + room\n         bot.write {\"room\": room, \"token\": options.token, \"type\": \"connect\"}\n-        \n-      setInterval -> \n+\n+      setInterval ->\n         bot.write {type: \"ping\"}\n       , 25000\n \n@@ -38,21 +38,30 @@ class Talker extends Robot\n \n     bot.on \"TextMessage\", (message)->\n       console.log message\n+\n       author = self.userForId(message.user.id, message.user)\n-      self.receive new Robot.TextMessage(author, message.content.replace(/^\\s*@hubot\\s+/, \"Hubot: \"))\n-    \n+\n+      # Replace \"@mention\" with \"mention: \", case-insensitively\n+      regexp = new RegExp(\"\\\\b@#{self.quoteRegex(self.name)}\\\\b\", 'i')\n+      content = message.content.replace(regexp, \"#{self.name}: \")\n+\n+      self.receive new Robot.TextMessage(author, content)\n+\n     bot.on \"EnterMessage\", (message) ->\n       console.log message\n       author = self.userForId(message.user.id, message.user)\n       self.receive new Robot.EnterMessage(author)\n-    \n+\n     bot.on \"LeaveMessage\", (message) ->\n       console.log message\n       author = self.userForId(message.user.id, message.user)\n       self.receive new Robot.LeaveMessage(author)\n-    \n+\n     @bot = bot\n \n+  quoteRegex: (string) ->\n+    string.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")\n+\n module.exports = Talker\n \n class TalkerClient extends EventEmitter\n@@ -64,14 +73,14 @@ class TalkerClient extends EventEmitter\n     @port          = 8500\n \n   connect: (callback) ->\n-    self = @    \n-    \n+    self = @\n+\n     @socket = tls.connect @port, @domain, ->\n       # callback called only after successful socket socket\n       console.log \"Connected to \" + self.domain\n       self.socket.setEncoding @encoding\n       callback()\n-       \n+\n     #callback\n     @socket.addListener 'data', (data) ->\n       for line in data.split '\\n'\n@@ -96,26 +105,26 @@ class TalkerClient extends EventEmitter\n           if message.type == \"error\"\n             self.disconnect message.message\n \n-      \n+\n     @socket.addListener \"eof\", ->\n       console.log \"eof\"\n     @socket.addListener \"timeout\", ->\n       console.log \"timeout\"\n     @socket.addListener \"end\", ->\n       console.log \"end\"\n-  \n+\n   write: (arguments) ->\n     self = @\n-    \n+\n     if @socket.readyState != 'open'\n       return self.disconnect 'cannot send with readyState: ' + @socket.readyState\n-  \n+\n     message = JSON.stringify(arguments)\n     console.log message\n-    \n+\n     @socket.write message, @encoding\n-  \n+\n   disconnect: (why) ->\n-    if @socket.readyState != 'closed' \n+    if @socket.readyState != 'closed'\n       @socket.close\n-      console.log 'disconnected (reason: ' + why + ')'\n\\ No newline at end of file\n+      console.log 'disconnected (reason: ' + why + ')'", "changes": 45}], "133": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "bin/hubot", "sha": "4fdd8098aba5e7e298e86074259dea466420e2f5", "additions": 6, "patch": "@@ -80,12 +80,15 @@ else\n   else\n     'shell'\n \n+  adaptersPath = Path.resolve \"src\", \"adapters\"\n+  robot = Hubot.loadBot adapter, adaptersPath, Options.name\n+  robot.enableSlash = Options.enableSlash\n+\n   scriptsPath = Path.resolve \"./scripts\"\n   console.log \"Loading deploy-local scripts at #{scriptsPath}\"\n-  robot = Hubot.loadBot adapter, scriptsPath, Options.name\n-  robot.enableSlash = Options.enableSlash\n+  robot.load scriptsPath\n \n-  scriptsPath = Path.resolve \"src\", \"hubot\", \"scripts\"\n+  scriptsPath = Path.resolve \"src\", \"scripts\"\n   console.log \"Loading hubot core scripts for relative scripts at #{scriptsPath}\"\n   robot.load scriptsPath\n ", "changes": 9}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "index.coffee", "sha": "69f9234b4eb95f28991319ef64a1b20c6cfe3123", "additions": 2, "patch": "@@ -5,8 +5,8 @@\n \n # Loads a Hubot robot\n exports.loadBot = (adapterName, path, botName) ->\n-  robot = require \"./src/hubot/#{adapterName}\"\n-  new robot path, botName\n+  robot = require \"./src/robot\"\n+  new robot adapterName, path, botName\n \n exports.robot = ->\n   require './src/robot'", "changes": 4}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/campfire.coffee", "previous_filename": "src/hubot/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/campfire.coffee", "sha": "78d9bb5b0da9e501da2d8da7c3936a6d7bf6e3a7", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/email.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/email.coffee", "previous_filename": "src/hubot/email.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/email.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/email.coffee", "sha": "1d66689115a63f2f626634d3cb35b10758299ea8", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/flowdock.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/flowdock.coffee", "previous_filename": "src/hubot/flowdock.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/flowdock.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/flowdock.coffee", "sha": "70098cab5b51a6d37829e47682303f534224f4e7", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/groupme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/groupme.coffee", "previous_filename": "src/hubot/groupme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/groupme.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/groupme.coffee", "sha": "6a238ad5009fee133f9b52394a18a310481da5e5", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/gtalk.coffee", "previous_filename": "src/hubot/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/gtalk.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/gtalk.coffee", "sha": "6070c0a877491cf160e5295cfbd19db349bd74c9", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/hipchat.coffee", "previous_filename": "src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/hipchat.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/hipchat.coffee", "sha": "c93773a4a30d7566cca45365ea552d3eba01c281", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/irc.coffee", "previous_filename": "src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/irc.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/irc.coffee", "sha": "cd0c155e378806371c252af12280cfb9f15c8cbb", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/shell.coffee", "previous_filename": "src/hubot/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/shell.coffee", "sha": "a2ccd894bce54eefaeccca483df9cbf552cecd78", "additions": 10, "patch": "@@ -1,7 +1,8 @@\n Robot = require '../robot'\n \n-class Shell extends Robot\n+class Shell extends Robot.Adapter\n   send: (user, strings...) ->\n+    console.log strings\n     for str in strings\n       console.log str\n \n@@ -10,9 +11,9 @@ class Shell extends Robot\n       @send user, \"#{user.name}: #{str}\"\n \n   run: ->\n-    console.log \"Hubot: the Shell.\"\n+    console.log \"Shell Adapter Running...\"\n \n-    user = @userForId('1', {name: \"Shell\"})\n+    user = @robot.userForId('1', {name: \"Shell\"})\n \n     process.stdin.resume()\n     process.stdin.on 'data', (txt) =>\n@@ -21,10 +22,13 @@ class Shell extends Robot\n         @receive new Robot.TextMessage user, line\n \n     setTimeout =>\n-      user   = @userForId('1', {name: \"Shell\"})\n-      atmos  = @userForId('2', {name: \"atmos\"})\n-      holman = @userForId('3', {name: \"Zach Holman\"})\n+      user   = @robot.userForId('1', {name: \"Shell\"})\n+      atmos  = @robot.userForId('2', {name: \"atmos\"})\n+      holman = @robot.userForId('3', {name: \"Zach Holman\"})\n     , 3000\n \n+  receive: (message) ->\n+    @robot.receive(message)\n+\n module.exports = Shell\n ", "changes": 16}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/talker.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/talker.coffee", "previous_filename": "src/hubot/talker.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/talker.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/talker.coffee", "sha": "f7ef423c8d6d331a3a3af9183531119083cfdb3b", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/twilio.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/twilio.coffee", "previous_filename": "src/hubot/twilio.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/twilio.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/twilio.coffee", "sha": "0124957273bd77d292c437998ad53364d231e41a", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/twitter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/twitter.coffee", "previous_filename": "src/hubot/twitter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/twitter.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/twitter.coffee", "sha": "6de1e8d2ca24a949ebdc8d984f13bb3d888e5993", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/adapters/xmpp.coffee", "previous_filename": "src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/xmpp.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/adapters/xmpp.coffee", "sha": "1f4c4a3de930e8a34ecbc898985390284c20ab9e", "additions": 0, "changes": 0}, {"status": "modified", "deletions": 27, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/robot.coffee", "sha": "2f7227b1048913d287f69aa7582abc24f79008ae", "additions": 33, "patch": "@@ -8,7 +8,7 @@ class Robot\n   # dispatch them to matching listeners.\n   #\n   # path - String directory full of Hubot scripts to load.\n-  constructor: (path, name = \"Hubot\") ->\n+  constructor: (adapter, adaptersPath, name = \"Hubot\") ->\n     @name        = name\n     @brain       = new Robot.Brain\n     @commands    = []\n@@ -17,7 +17,8 @@ class Robot\n     @loadPaths   = []\n     @enableSlash = false\n \n-    @load path if path\n+    Adapter = require(\"#{adaptersPath}/#{adapter}\")\n+    @adapter = new Adapter(@)\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n@@ -69,7 +70,7 @@ class Robot\n   #\n   # Returns nothing.\n   leave: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.LeaveMessage), callback)\n+    @listeners.push new Listener(@ ((msg) -> msg instanceof Robot.LeaveMessage), callback)\n \n   # Public: Passes the given message to any interested Listeners.\n   #\n@@ -128,28 +129,8 @@ class Robot\n         continue if !line.match('-')\n         @commands.push line[2..line.length]\n \n-  # Public: Raw method for sending data back to the chat source.  Extend this.\n-  #\n-  # user    - A Robot.User instance.\n-  # strings - One or more Strings for each message to send.\n-  send: (user, strings...) ->\n-\n-  # Public: Raw method for building a reply and sending it back to the chat\n-  # source. Extend this.\n-  #\n-  # user    - A Robot.User instance.\n-  # strings - One or more Strings for each reply to send.\n-  reply: (user, strings...) ->\n-\n-  # Public: Raw method for setting a topic on the chat source. Extend this.\n-  #\n-  # user    - A Robot.User instance\n-  # strings - One more more Strings to set as the topic.\n-  topic: (user, strings...) ->\n-\n-  # Public: Raw method for invoking the bot to run\n-  # Extend this.\n   run: ->\n+    @adapter.run()\n \n   # Public: Raw method for shutting the bot down.\n   # Extend this.\n@@ -178,6 +159,31 @@ class Robot\n         result = @brain.data.users[k]\n     result\n \n+class Robot.Adapter\n+  constructor: (@robot) ->\n+\n+  # Public: Raw method for sending data back to the chat source. Extend this.\n+  #\n+  # user    - A Robot.User instance.\n+  # strings - One or more Strings for each message to send.\n+  send: (user, strings...) ->\n+\n+  # Public: Raw method for building a reply and sending it back to the chat\n+  # source. Extend this.\n+  #\n+  # user    - A Robot.User instance.\n+  # strings - One or more Strings for each reply to send.\n+  reply: (user, strings...) ->\n+\n+  # Public: Raw method for setting a topic on the chat source. Extend this.\n+  #\n+  # user    - A Robot.User instance\n+  # strings - One more more Strings to set as the topic.\n+  topic: (user, strings...) ->\n+\n+  # Public: Raw method for invoking the bot to run. Extend this.\n+  run: ->\n+\n class Robot.User\n   # Represents a participating user in the chat.\n   #\n@@ -306,7 +312,7 @@ class Robot.Response\n   #\n   # Returns nothing.\n   send: (strings...) ->\n-    @robot.send @message.user, strings...\n+    @robot.adapter.send @message.user, strings...\n \n   # Public: Posts a topic changing message\n   #\n@@ -315,7 +321,7 @@ class Robot.Response\n   #\n   # Returns nothing.\n   topic: (strings...) ->\n-    @robot.topic @message.user, strings...\n+    @robot.adapter.topic @message.user, strings...\n \n   # Public: Posts a message mentioning the current user.\n   #\n@@ -324,7 +330,7 @@ class Robot.Response\n   #\n   # Returns nothing.\n   reply: (strings...) ->\n-    @robot.reply @message.user, strings...\n+    @robot.adapter.reply @message.user, strings...\n \n   # Public: Picks a random item from the given items.\n   #", "changes": 60}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/google-images.coffee", "previous_filename": "src/hubot/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/scripts/google-images.coffee", "sha": "5d6676d0b2aadd8164b74addea2f1c1505d3f1e8", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/help.coffee", "previous_filename": "src/hubot/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/scripts/help.coffee", "sha": "f85f5e69311a999b2f3e9dc1f94e0425b2c2c826", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/maps.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/maps.coffee", "previous_filename": "src/hubot/scripts/maps.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/maps.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/scripts/maps.coffee", "sha": "5dbf370b22daaf79d1970198332de12bfc9449a7", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/math.coffee", "previous_filename": "src/hubot/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/scripts/math.coffee", "sha": "0d25e031621d1d36cad3808a3e9d1deabdbae216", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/ping.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/ping.coffee", "previous_filename": "src/hubot/scripts/ping.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/ping.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/scripts/ping.coffee", "sha": "d645c8a2ea1e0479e1eab8c2f9731fe376803601", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/roles.coffee", "previous_filename": "src/hubot/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/scripts/roles.coffee", "sha": "91876feff455ef807c29e4ef043bd1d0c1f384a2", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/rules.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/rules.coffee", "previous_filename": "src/hubot/scripts/rules.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/rules.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/scripts/rules.coffee", "sha": "7d2266c8fbe85c013a410ad37da2027af310766b", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/storage.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/storage.coffee", "previous_filename": "src/hubot/scripts/storage.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/storage.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/scripts/storage.coffee", "sha": "5b4447d73b47f6f11d6c178d2814501dd57b3795", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/translate.coffee", "previous_filename": "src/hubot/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/scripts/translate.coffee", "sha": "c4d911389679f593650d522766a292741a8e9abb", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/youtube.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c/src/scripts/youtube.coffee", "previous_filename": "src/hubot/scripts/youtube.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/youtube.coffee?ref=8b5139167ca7f2cfc408e75c96c8d07cd1e6b03c", "filename": "src/scripts/youtube.coffee", "sha": "c3240d7dbc4eb0eb11c03a3f149f7a952717632e", "additions": 0, "changes": 0}], "134": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8f36df033d3f63d2aee239cb5fe44c2c02a1a241/src/hubot/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8f36df033d3f63d2aee239cb5fe44c2c02a1a241/src/hubot/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/gtalk.coffee?ref=8f36df033d3f63d2aee239cb5fe44c2c02a1a241", "filename": "src/hubot/gtalk.coffee", "sha": "8a7b0326ec650724a9f32196b429181802708a67", "additions": 0, "patch": "@@ -28,7 +28,6 @@ class Gtalkbot extends Robot\n \n   online: =>\n     @client.send new Xmpp.Element('presence')\n-      .c('show').t('chat')\n \n     # send raw whitespace for keepalive\n     setInterval =>", "changes": 1}], "135": [{"status": "modified", "deletions": 31, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "bin/hubot", "sha": "55011c02ea28aaf6922994ffdfdcb2f32a4c2633", "additions": 32, "patch": "@@ -11,30 +11,27 @@ Path       = require 'path'\n HTTP       = require 'http'\n Creator    = require '../src/creator'\n OptParse   = require 'optparse'\n-PortNumber = parseInt(process.env.PORT) || 8080\n-\n-Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\", \"talker\", \"twitter\", \"flowdock\", \"gtalk\"]\n \n Switches = [\n-  [ \"-h\", \"--help\",              \"Display the help information\"],\n-  [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],\n-  [ \"-c\", \"--create PATH\",       \"Create a deployable hubot\"],\n-  [ \"-s\", \"--enable-slash\",      \"Enable replacing the robot's name with '/'\"],\n-  [ \"-n\", \"--name NAME\",         \"The name of the robot in chat\" ],\n-  [ \"-v\", \"--version\",           \"Displays the version of hubot installed\"]\n+  [ \"-h\", \"--help\", \"Display the help information\"],\n+  [ \"-a\", \"--adapter ADAPTER[,ADAPTER2,...]\", \"The Adapter to use\"],\n+  [ \"-c\", \"--create PATH\", \"Create a deployable hubot\"],\n+  [ \"-s\", \"--enable-slash\", \"Enable replacing the robot's name with '/'\"],\n+  [ \"-n\", \"--name NAME\", \"The name of the robot in chat\"],\n+  [ \"-v\", \"--version\", \"Displays the version of hubot installed\"]\n ]\n \n Options =\n   path: \".\"\n   name: \"Hubot\"\n   create: false\n-  adapter: \"stdio\"\n+  adapters: [\"shell\"]\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n \n Parser.on \"adapter\", (opt, value) ->\n-  Options.adapter = value\n+  Options.adapters = value.split(\",\")\n \n Parser.on \"name\", (opt, value) ->\n   Options.name = value\n@@ -55,7 +52,9 @@ Parser.on \"version\", (opt, value) ->\n \n Parser.parse process.ARGV\n \n-process.on 'SIGTERM', -> process.exit(0)\n+process.on 'SIGTERM', ->\n+  console.log \"Shutting down...\"\n+  process.exit(0)\n \n if Options.create\n   creator = new Creator.Creator(Options.path)\n@@ -64,43 +63,45 @@ if Options.create\n else if Options.version\n   package_path = __dirname + \"/../package.json\"\n \n-  Fs.readFile package_path, (err,data) ->\n+  Fs.readFile package_path, (err, data) ->\n     if err\n-      console.error \"Could not open package file : %s\", err\n-      process.exit 1\n+      console.error \"Could not open package file: %s\", err\n+      process.exit(1)\n \n     content = JSON.parse(data.toString('ascii'))\n     console.log content['version']\n-\n-    process.exit 0\n-\n+    process.exit(0)\n else\n-  adapter = if Options.adapter in Adapters\n-    Options.adapter\n-  else\n-    'shell'\n+  # load the robot, and pass it the adapter and path to adapters...\n+  #\n+  adaptersPath = Path.resolve \"src\", \"adapters\"\n+  robot = Hubot.loadBot Options.adapters, adaptersPath, Options.name\n+  robot.enableSlash = Options.enableSlash\n \n+  # load the locally deployed scripts in ./scripts\n+  #\n   scriptsPath = Path.resolve \"./scripts\"\n   console.log \"Loading deploy-local scripts at #{scriptsPath}\"\n-  robot = Hubot.loadBot adapter, scriptsPath, Options.name\n-  robot.enableSlash = Options.enableSlash\n+  robot.load scriptsPath\n \n-  scriptsPath = Path.resolve \"src\", \"hubot\", \"scripts\"\n+  # load the core hubot scripts in ./src/scripts\n+  #\n+  scriptsPath = Path.resolve \"src\", \"scripts\"\n   console.log \"Loading hubot core scripts for relative scripts at #{scriptsPath}\"\n   robot.load scriptsPath\n \n+  # load the hubot-scripts which are specified in `hubot-scripts.json`\n+  #\n   scriptsFile = Path.resolve \"hubot-scripts.json\"\n   Path.exists scriptsFile, (exists) =>\n     if exists\n       console.log \"Loading hubot-scripts from #{scriptsFile}\"\n       Fs.readFile scriptsFile, (err, data) =>\n-        JSON.parse(data).forEach (plugin) =>\n-          robot.loadFile Path.resolve(\"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"), plugin\n-    else\n-      scriptsPath = Path.resolve \"src\", \"scripts\"\n-      console.log \"Loading hubot-scripts plugins at #{scriptsPath}\"\n-      robot.load scriptsPath\n+        for script in JSON.parse(data)\n+          path = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n+          robot.loadFile path, script\n \n   robot.run()\n \n # vim:ft=coffee ts=2 sw=2 et :\n+", "changes": 63}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "index.coffee", "sha": "69f9234b4eb95f28991319ef64a1b20c6cfe3123", "additions": 2, "patch": "@@ -5,8 +5,8 @@\n \n # Loads a Hubot robot\n exports.loadBot = (adapterName, path, botName) ->\n-  robot = require \"./src/hubot/#{adapterName}\"\n-  new robot path, botName\n+  robot = require \"./src/robot\"\n+  new robot adapterName, path, botName\n \n exports.robot = ->\n   require './src/robot'", "changes": 4}, {"status": "renamed", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/campfire.coffee", "previous_filename": "src/hubot/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/campfire.coffee", "sha": "7a79f01a01ab3eef7ed9e7050aeb37a7d0a9bf08", "additions": 5, "patch": "@@ -2,7 +2,7 @@ Robot        = require \"../robot\"\n HTTPS        = require \"https\"\n EventEmitter = require(\"events\").EventEmitter\n \n-class Campfire extends Robot\n+class Campfire extends Robot.Adapter\n   send: (user, strings...) ->\n     if strings.length > 0\n       @bot.Room(user.room).speak strings.shift(), (err, data) =>\n@@ -13,6 +13,8 @@ class Campfire extends Robot\n     @send user, strings.map((str) -> \"#{user.name}: #{str}\")...\n \n   run: ->\n+    console.log \"Campfire adapter running...\"\n+\n     self = @\n     options =\n       token:   process.env.HUBOT_CAMPFIRE_TOKEN\n@@ -25,8 +27,8 @@ class Campfire extends Robot\n       bot.User user, (err, userData) ->\n         if userData.user\n           author = self.userForId(userData.user.id, userData.user)\n-          self.brain.data.users[userData.user.id].name = userData.user.name\n-          self.brain.data.users[userData.user.id].email_address = userData.user.email_address\n+          self.robot.users[userData.user.id].name = userData.user.name\n+          self.robot.users[userData.user.id].email_address = userData.user.email_address\n           author.room = room\n           callback id, created, room, user, body, author\n \n@@ -192,7 +194,6 @@ class CampfireStreaming extends EventEmitter\n             when 401 then throw new Error(\"Invalid access token provided, campfire refused the authentication\")\n             else console.log \"campfire error: #{response.statusCode}\"\n \n-\n         try\n           callback null, JSON.parse(data)\n         catch err", "changes": 9}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/email.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/email.coffee", "previous_filename": "src/hubot/email.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/email.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/email.coffee", "sha": "1d66689115a63f2f626634d3cb35b10758299ea8", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/flowdock.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/flowdock.coffee", "previous_filename": "src/hubot/flowdock.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/flowdock.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/flowdock.coffee", "sha": "70098cab5b51a6d37829e47682303f534224f4e7", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/groupme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/groupme.coffee", "previous_filename": "src/hubot/groupme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/groupme.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/groupme.coffee", "sha": "6a238ad5009fee133f9b52394a18a310481da5e5", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/gtalk.coffee", "previous_filename": "src/hubot/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/gtalk.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/gtalk.coffee", "sha": "8a7b0326ec650724a9f32196b429181802708a67", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/hipchat.coffee", "previous_filename": "src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/hipchat.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/hipchat.coffee", "sha": "c93773a4a30d7566cca45365ea552d3eba01c281", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/irc.coffee", "previous_filename": "src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/irc.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/irc.coffee", "sha": "cd0c155e378806371c252af12280cfb9f15c8cbb", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/shell.coffee", "previous_filename": "src/hubot/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/shell.coffee", "sha": "379bbb713f9b8bf213f30f5858db7c700fa1efcc", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n Robot = require '../robot'\n \n-class Shell extends Robot\n+class Shell extends Robot.Adapter\n   send: (user, strings...) ->\n     for str in strings\n       console.log str\n@@ -10,8 +10,6 @@ class Shell extends Robot\n       @send user, \"#{user.name}: #{str}\"\n \n   run: ->\n-    console.log \"Hubot: the Shell.\"\n-\n     user = @userForId('1', {name: \"Shell\"})\n \n     process.stdin.resume()", "changes": 4}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/talker.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/talker.coffee", "previous_filename": "src/hubot/talker.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/talker.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/talker.coffee", "sha": "e76daffe6677394454be246725b1ae977f8a55cd", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/twilio.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/twilio.coffee", "previous_filename": "src/hubot/twilio.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/twilio.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/twilio.coffee", "sha": "0124957273bd77d292c437998ad53364d231e41a", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/twitter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/twitter.coffee", "previous_filename": "src/hubot/twitter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/twitter.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/twitter.coffee", "sha": "6de1e8d2ca24a949ebdc8d984f13bb3d888e5993", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/adapters/xmpp.coffee", "previous_filename": "src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/xmpp.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/adapters/xmpp.coffee", "sha": "1f4c4a3de930e8a34ecbc898985390284c20ab9e", "additions": 0, "changes": 0}, {"status": "modified", "deletions": 39, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/robot.coffee", "sha": "506e95d32e24a422b45abcc1fe3806896a93b8ec", "additions": 39, "patch": "@@ -8,7 +8,7 @@ class Robot\n   # dispatch them to matching listeners.\n   #\n   # path - String directory full of Hubot scripts to load.\n-  constructor: (path, name = \"Hubot\") ->\n+  constructor: (adapters, adaptersPath, name = \"Hubot\") ->\n     @name        = name\n     @brain       = new Robot.Brain\n     @commands    = []\n@@ -17,7 +17,14 @@ class Robot\n     @loadPaths   = []\n     @enableSlash = false\n \n-    @load path if path\n+    @adapters    = []\n+\n+    for adapter in adapters\n+      try\n+        Adapter = require(\"#{adaptersPath}/#{adapter}\")\n+        @adapters.push new Adapter(@)\n+      catch err\n+        console.log \"Error loading #{adapter} adapter: #{err}\"\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n@@ -76,10 +83,10 @@ class Robot\n   # message - A Robot.Message instance.\n   #\n   # Returns nothing.\n-  receive: (message) ->\n+  receive: (adapter, message) ->\n     for lst in @listeners\n       try\n-        lst.call message\n+        lst.call adapter, message\n       catch ex\n         console.log \"error while calling listener: #{ex}\"\n \n@@ -111,7 +118,6 @@ class Robot\n   # Public: Help Commands for Running Scripts\n   #\n   # Returns an array of help commands for running scripts\n-  #\n   helpCommands: () ->\n     @commands.sort()\n \n@@ -128,28 +134,8 @@ class Robot\n         continue if !line.match('-')\n         @commands.push line[2..line.length]\n \n-  # Public: Raw method for sending data back to the chat source.  Extend this.\n-  #\n-  # user    - A Robot.User instance.\n-  # strings - One or more Strings for each message to send.\n-  send: (user, strings...) ->\n-\n-  # Public: Raw method for building a reply and sending it back to the chat\n-  # source. Extend this.\n-  #\n-  # user    - A Robot.User instance.\n-  # strings - One or more Strings for each reply to send.\n-  reply: (user, strings...) ->\n-\n-  # Public: Raw method for setting a topic on the chat source. Extend this.\n-  #\n-  # user    - A Robot.User instance\n-  # strings - One more more Strings to set as the topic.\n-  topic: (user, strings...) ->\n-\n-  # Public: Raw method for invoking the bot to run\n-  # Extend this.\n   run: ->\n+    adapter.run() for adapter in @adapters\n \n   # Public: Raw method for shutting the bot down.\n   # Extend this.\n@@ -159,23 +145,36 @@ class Robot\n   users: () ->\n     @brain.data.users\n \n+\n+class Robot.Adapter\n+  constructor: (@robot) ->\n+\n+  send: (user, strings...) ->\n+\n+  reply: (user, strings...) ->\n+\n+  topic: (user, strings...) ->\n+\n+  run: ->\n+\n+  receive: (message) ->\n+    @robot.receive @, message\n+\n   # Public: Get a User object given a unique identifier\n-  #\n   userForId: (id, options) ->\n-    user = @brain.data.users[id]\n+    user = @robot.users[id]\n     unless user\n       user = new Robot.User id, options\n-      @brain.data.users[id] = user\n+      @robot.users[id] = user\n     user\n \n   # Public: Get a User object given a name\n-  #\n   userForName: (name) ->\n     result = null\n     lowerName = name.toLowerCase()\n-    for k of (@brain.data.users or { })\n-      if @brain.data.users[k]['name'].toLowerCase() is lowerName\n-        result = @brain.data.users[k]\n+    for k of (@robot.users or { })\n+      if @robot.users[k]['name'].toLowerCase() is lowerName\n+        result = @robot.users[k]\n     result\n \n class Robot.User\n@@ -272,9 +271,9 @@ class Listener\n   # message - a Robot.Message instance.\n   #\n   # Returns nothing.\n-  call: (message) ->\n+  call: (adapter, message) ->\n     if match = @matcher message\n-      @callback new @robot.Response(@robot, message, match)\n+      @callback new @robot.Response(adapter, message, match)\n \n class TextListener extends Listener\n   # TextListeners receive every message from the chat source and decide if they want\n@@ -297,7 +296,7 @@ class Robot.Response\n   # robot   - The current Robot instance.\n   # message - The current Robot.Message instance.\n   # match   - The Match object from the successful Regex match.\n-  constructor: (@robot, @message, @match) ->\n+  constructor: (@adapter, @message, @match) ->\n \n   # Public: Posts a message back to the chat source\n   #\n@@ -306,7 +305,7 @@ class Robot.Response\n   #\n   # Returns nothing.\n   send: (strings...) ->\n-    @robot.send @message.user, strings...\n+    @adapter.send @message.user, strings...\n \n   # Public: Posts a topic changing message\n   #\n@@ -315,7 +314,7 @@ class Robot.Response\n   #\n   # Returns nothing.\n   topic: (strings...) ->\n-    @robot.topic @message.user, strings...\n+    @adapter.topic @message.user, strings...\n \n   # Public: Posts a message mentioning the current user.\n   #\n@@ -324,7 +323,7 @@ class Robot.Response\n   #\n   # Returns nothing.\n   reply: (strings...) ->\n-    @robot.reply @message.user, strings...\n+    @adapter.reply @message.user, strings...\n \n   # Public: Picks a random item from the given items.\n   #\n@@ -368,3 +367,4 @@ class Robot.Response\n Robot.Response.prototype.httpClient = require 'scoped-http-client'\n \n module.exports = Robot\n+", "changes": 78}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/google-images.coffee", "previous_filename": "src/hubot/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/scripts/google-images.coffee", "sha": "5d6676d0b2aadd8164b74addea2f1c1505d3f1e8", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/help.coffee", "previous_filename": "src/hubot/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/scripts/help.coffee", "sha": "f85f5e69311a999b2f3e9dc1f94e0425b2c2c826", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/maps.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/maps.coffee", "previous_filename": "src/hubot/scripts/maps.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/maps.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/scripts/maps.coffee", "sha": "5dbf370b22daaf79d1970198332de12bfc9449a7", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/math.coffee", "previous_filename": "src/hubot/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/scripts/math.coffee", "sha": "0d25e031621d1d36cad3808a3e9d1deabdbae216", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/ping.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/ping.coffee", "previous_filename": "src/hubot/scripts/ping.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/ping.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/scripts/ping.coffee", "sha": "d645c8a2ea1e0479e1eab8c2f9731fe376803601", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/roles.coffee", "previous_filename": "src/hubot/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/scripts/roles.coffee", "sha": "91876feff455ef807c29e4ef043bd1d0c1f384a2", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/rules.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/rules.coffee", "previous_filename": "src/hubot/scripts/rules.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/rules.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/scripts/rules.coffee", "sha": "7d2266c8fbe85c013a410ad37da2027af310766b", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/storage.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/storage.coffee", "previous_filename": "src/hubot/scripts/storage.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/storage.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/scripts/storage.coffee", "sha": "5b4447d73b47f6f11d6c178d2814501dd57b3795", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/translate.coffee", "previous_filename": "src/hubot/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/scripts/translate.coffee", "sha": "c4d911389679f593650d522766a292741a8e9abb", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/youtube.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1c312c7cf211436f45eab41886637dbe921b342a/src/scripts/youtube.coffee", "previous_filename": "src/hubot/scripts/youtube.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/youtube.coffee?ref=1c312c7cf211436f45eab41886637dbe921b342a", "filename": "src/scripts/youtube.coffee", "sha": "c3240d7dbc4eb0eb11c03a3f149f7a952717632e", "additions": 0, "changes": 0}], "136": [{"status": "modified", "deletions": 65, "raw_url": "https://github.com/hubotio/hubot/raw/7d1030c6bf9b6bcd2522e16a8a6a81325dba3dc8/src/hubot/talker.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/7d1030c6bf9b6bcd2522e16a8a6a81325dba3dc8/src/hubot/talker.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/talker.coffee?ref=7d1030c6bf9b6bcd2522e16a8a6a81325dba3dc8", "filename": "src/hubot/talker.coffee", "sha": "e76daffe6677394454be246725b1ae977f8a55cd", "additions": 59, "patch": "@@ -7,124 +7,118 @@ tls          = require('tls')\n class Talker extends Robot\n   send: (user, strings...) ->\n     strings.forEach (str) =>\n-      @bot.write {\"type\": \"message\", \"content\": str}\n+      @bot.write user.room, {\"type\": \"message\", \"content\": str}\n \n   reply: (user, strings...) ->\n     strings.forEach (str) =>\n-      @send user, \"#{user.name}: #{str}\"\n+      @send user, \"@#{user.name} #{str}\"\n \n   run: ->\n     self = @\n-    options =\n-      token:   process.env.HUBOT_TALKER_TOKEN\n-      rooms:   process.env.HUBOT_TALKER_ROOMS\n+    token = process.env.HUBOT_TALKER_TOKEN\n+    rooms = process.env.HUBOT_TALKER_ROOMS.split(',')\n \n-    console.log options\n-    bot = new TalkerClient(options)\n+    bot = new TalkerClient()\n     console.log bot\n \n-    bot.connect ->\n-      options.rooms.split(',').forEach (room) ->\n-        console.log \"Entering room: \" + room\n-        bot.write {\"room\": room, \"token\": options.token, \"type\": \"connect\"}\n-\n+    ping = (room)->\n       setInterval ->\n-        bot.write {type: \"ping\"}\n+        bot.write room, {type: \"ping\"}\n       , 25000\n \n+    bot.on \"Ready\", (room)->\n+      message = {\"room\": room, \"token\": token, \"type\": \"connect\"}\n+      bot.write room, message\n+      ping room\n+\n     bot.on \"Users\", (message)->\n       for user in message.users\n         self.userForId(user.id, user)\n \n-    bot.on \"TextMessage\", (message)->\n-      console.log message\n+    bot.on \"TextMessage\", (room, message)->\n+      unless self.name == message.user.name\n+        # Replace \"@mention\" with \"mention: \", case-insensitively\n+        regexp = new RegExp \"^@#{self.name}\", 'i'\n+        content = message.content.replace(regexp, \"#{self.name}:\")\n \n-      author = self.userForId(message.user.id, message.user)\n+        self.receive new Robot.TextMessage self.userForMessage(room, message), content\n \n-      # Replace \"@mention\" with \"mention: \", case-insensitively\n-      regexp = new RegExp(\"\\\\b@#{self.quoteRegex(self.name)}\\\\b\", 'i')\n-      content = message.content.replace(regexp, \"#{self.name}: \")\n+    bot.on \"EnterMessage\", (room, message) ->\n+      unless self.name == message.user.name\n+        self.receive new Robot.EnterMessage self.userForMessage(room, message)\n \n-      self.receive new Robot.TextMessage(author, content)\n+    bot.on \"LeaveMessage\", (room, message) ->\n+      unless self.name == message.user.name\n+        self.receive new Robot.LeaveMessage self.userForMessage(room, message)\n \n-    bot.on \"EnterMessage\", (message) ->\n-      console.log message\n-      author = self.userForId(message.user.id, message.user)\n-      self.receive new Robot.EnterMessage(author)\n-\n-    bot.on \"LeaveMessage\", (message) ->\n-      console.log message\n-      author = self.userForId(message.user.id, message.user)\n-      self.receive new Robot.LeaveMessage(author)\n+    for room in rooms\n+      bot.sockets[room] = bot.createSocket(room)\n \n     @bot = bot\n \n-  quoteRegex: (string) ->\n-    string.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")\n+  userForMessage: (room, message)->\n+    author = @userForId(message.user.id, message.user)\n+    author.room = room\n+    author\n \n module.exports = Talker\n \n class TalkerClient extends EventEmitter\n-  constructor: (options) ->\n-    @token         = options.token\n-    @rooms         = options.rooms.split(\",\")\n+  constructor: ->\n     @domain        = 'talkerapp.com'\n     @encoding      = 'utf8'\n     @port          = 8500\n+    @sockets       = {}\n \n-  connect: (callback) ->\n+  createSocket: (room) ->\n     self = @\n \n-    @socket = tls.connect @port, @domain, ->\n-      # callback called only after successful socket socket\n-      console.log \"Connected to \" + self.domain\n-      self.socket.setEncoding @encoding\n-      callback()\n+    socket = tls.connect @port, @domain, ->\n+      console.log(\"Connected to room #{room}.\")\n+      self.emit \"Ready\", room\n \n     #callback\n-    @socket.addListener 'data', (data) ->\n+    socket.on 'data', (data) ->\n       for line in data.split '\\n'\n-        console.log line\n-\n-        message = unless line is ''\n-          message = JSON.parse(line)\n-        else\n-          message = null\n+        message = if line is '' then null else JSON.parse(line)\n \n         if message\n-          if message.type == \"connected\"\n-            self.emit \"Connected\"\n+          console.log \"From room #{room}: #{line}\"\n           if message.type == \"users\"\n             self.emit \"Users\", message\n           if message.type == \"message\"\n-            self.emit \"TextMessage\", message\n+            self.emit \"TextMessage\", room, message\n           if message.type == \"join\"\n-            self.emit \"EnterMessage\", message\n+            self.emit \"EnterMessage\", room, message\n           if message.type == \"leave\"\n-            self.emit \"LeaveMessage\", message\n+            self.emit \"LeaveMessage\", room, message\n           if message.type == \"error\"\n-            self.disconnect message.message\n+            self.disconnect room, message.message\n \n-\n-    @socket.addListener \"eof\", ->\n+    socket.addListener \"eof\", ->\n       console.log \"eof\"\n-    @socket.addListener \"timeout\", ->\n+    socket.addListener \"timeout\", ->\n       console.log \"timeout\"\n-    @socket.addListener \"end\", ->\n+    socket.addListener \"end\", ->\n       console.log \"end\"\n \n-  write: (arguments) ->\n+    socket.setEncoding @encoding\n+\n+    socket\n+\n+  write: (room, arguments) ->\n     self = @\n+    @sockets[room]\n \n-    if @socket.readyState != 'open'\n-      return self.disconnect 'cannot send with readyState: ' + @socket.readyState\n+    if @sockets[room].readyState != 'open'\n+      return @disconnect 'cannot send with readyState: ' + @sockets[room].readyState\n \n     message = JSON.stringify(arguments)\n-    console.log message\n+    console.log \"To room #{room}: #{message}\"\n \n-    @socket.write message, @encoding\n+    @sockets[room].write message, @encoding\n \n-  disconnect: (why) ->\n-    if @socket.readyState != 'closed'\n-      @socket.close\n+  disconnect: (room, why) ->\n+    if @sockets[room] != 'closed'\n+      @sockets[room]\n       console.log 'disconnected (reason: ' + why + ')'", "changes": 124}], "138": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e9cbaadcccaba0f200616bba14c6f987c1262c73/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e9cbaadcccaba0f200616bba14c6f987c1262c73/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=e9cbaadcccaba0f200616bba14c6f987c1262c73", "filename": "src/hubot/irc.coffee", "sha": "c090a1d08e86b7eb5ea3311cd3ff63340dbd36b9", "additions": 4, "patch": "@@ -94,6 +94,10 @@ class IrcBot extends Robot\n     bot.addListener 'kick', (channel, who, _by, reason) ->\n         console.log('%s was kicked from %s by %s: %s', who, channel, _by, reason)\n \n+    bot.addListener 'invite', (channel, from) ->\n+      console.log('%s invite you to join %s', from, channel)\n+      bot.join channel\n+\n     @bot = bot\n \n module.exports = IrcBot", "changes": 4}], "140": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8d503ada573b786f05fc4d4a00645a6b8bd27b41/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/8d503ada573b786f05fc4d4a00645a6b8bd27b41/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=8d503ada573b786f05fc4d4a00645a6b8bd27b41", "filename": "package.json", "sha": "b714f87a31d0bf51506e8a2e53e494011c264d79", "additions": 1, "patch": "@@ -18,7 +18,7 @@\n     \"coffee-script\": \"1.1.1\",\n     \"optparse\": \"1.0.1\",\n     \"scoped-http-client\": \"0.9.0\",\n-    \"irc\": \"0.2\",\n+    \"irc\": \"0.3.2\",\n     \"scoped-http-client\": \"0.9.4\",\n     \"irc\": \"0.2\",\n     \"node-xmpp\": \">=0.2.6\",", "changes": 2}], "141": [{"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/6721eabd03ebb9998ee2ae035d7286a03da79e84/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/6721eabd03ebb9998ee2ae035d7286a03da79e84/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=6721eabd03ebb9998ee2ae035d7286a03da79e84", "filename": "src/hubot/irc.coffee", "sha": "de6a20a073c9b766b446aecbdc53208570bdf33e", "additions": 7, "patch": "@@ -63,18 +63,18 @@ class IrcBot extends Robot\n \n     bot.addListener 'message', (from, to, message) ->\n       console.log \"From #{from} to #{to}: #{message}\"\n+      \n+      user = self.userForName from\n+      unless user?\n+        id = (new Date().getTime() / 1000).toString().replace('.','')\n+        user = self.userForId id\n+        user.name = from\n \n-      if message.match new RegExp \"^#{options.nick}\", \"i\"\n-        unless user_id[from]\n-          user_id[from] = next_id\n-          next_id = next_id + 1\n-\n-      user = new Robot.User user_id[from]\n-      user.name = from\n       if to.match(/^[&#]/)\n         user.room = to\n         console.log \"#{to} <#{from}> #{message}\"\n       else\n+        user.room = null\n         console.log \"msg <#{from}> #{message}\"\n \n       self.receive new Robot.TextMessage(user, message)", "changes": 14}], "142": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/6dfc3c8b85be8eab56faf17de44c301ccd477b7e/src/hubot/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/6dfc3c8b85be8eab56faf17de44c301ccd477b7e/src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/irc.coffee?ref=6dfc3c8b85be8eab56faf17de44c301ccd477b7e", "filename": "src/hubot/irc.coffee", "sha": "1e35885c3edf9d038b7d532f2991fd5758d12f49", "additions": 6, "patch": "@@ -34,6 +34,10 @@ class IrcBot extends Robot\n       server:   process.env.HUBOT_IRC_SERVER\n       password: process.env.HUBOT_IRC_PASSWORD\n       nickpass: process.env.HUBOT_IRC_NICKSERV_PASSWORD\n+      fakessl:  process.env.HUBOT_IRC_SERVER_FAKE_SSL or false\n+      unflood:  process.env.HUBOT_IRC_UNFLOOD or false\n+      debug:    process.env.HUBOT_IRC_DEBUG or false\n+\n \n     console.log options\n \n@@ -43,6 +47,8 @@ class IrcBot extends Robot\n           port: options.port,\n           stripColors: true,\n           secure: if options.port is \"6697\" then true else false,\n+          selfSigned: options.fakessl,\n+          floodProtection: options.unflood\n         }\n \n     unless options.nickpass", "changes": 6}], "143": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/fc33244320cf15a97ba52fad05ded1516da5fe2f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fc33244320cf15a97ba52fad05ded1516da5fe2f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=fc33244320cf15a97ba52fad05ded1516da5fe2f", "filename": "src/robot.coffee", "sha": "4b936d81638b72abb3f2a769050d2b41feb8b7d6", "additions": 2, "patch": "@@ -48,9 +48,9 @@ class Robot\n \n     pattern = re.join(\"/\") # combine the pattern back again\n     if @enableSlash\n-      newRegex = new RegExp(\"^(?:\\/|#{@name}:?)\\\\s*(?:#{pattern})\", modifiers)\n+      newRegex = new RegExp(\"^(?:\\/|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n     else\n-      newRegex = new RegExp(\"^#{@name}:?\\\\s*(?:#{pattern})\", modifiers)\n+      newRegex = new RegExp(\"^#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n \n     console.log newRegex.toString()\n     @listeners.push new TextListener(@, newRegex, callback)", "changes": 4}], "144": [{"status": "modified", "deletions": 23, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "bin/hubot", "sha": "cfa27c28c2daeb4cb6ae57e6cb654dd43e6e0fc5", "additions": 15, "patch": "@@ -13,22 +13,20 @@ Creator    = require '../src/creator'\n OptParse   = require 'optparse'\n PortNumber = parseInt(process.env.PORT) || 8080\n \n-Adapters = [\"irc\", \"campfire\", \"hipchat\", \"twilio\", \"xmpp\", \"groupme\", \"talker\", \"twitter\", \"flowdock\", \"gtalk\"]\n-\n Switches = [\n-  [ \"-h\", \"--help\",              \"Display the help information\"],\n-  [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],\n-  [ \"-c\", \"--create PATH\",       \"Create a deployable hubot\"],\n-  [ \"-s\", \"--enable-slash\",      \"Enable replacing the robot's name with '/'\"],\n-  [ \"-n\", \"--name NAME\",         \"The name of the robot in chat\" ],\n-  [ \"-v\", \"--version\",           \"Displays the version of hubot installed\"]\n+  [ \"-h\", \"--help\",            \"Display the help information\"],\n+  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\"],\n+  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\"],\n+  [ \"-s\", \"--enable-slash\",    \"Enable replacing the robot's name with '/'\"],\n+  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n+  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\"]\n ]\n \n Options =\n   path: \".\"\n   name: \"Hubot\"\n   create: false\n-  adapter: \"stdio\"\n+  adapter: \"shell\"\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n@@ -75,31 +73,25 @@ else if Options.version\n     process.exit 0\n \n else\n-  adapter = if Options.adapter in Adapters\n-    Options.adapter\n-  else\n-    'shell'\n+  adapterPath = Path.resolve \"src\", \"adapters\"\n+  robot = Hubot.loadBot adapterPath, Options.adapter, Options.name\n+  robot.enableSlash = Options.enableSlash\n \n-  scriptsPath = Path.resolve \"./scripts\"\n+  scriptsPath = Path.resolve \".\", \"scripts\"\n   console.log \"Loading deploy-local scripts at #{scriptsPath}\"\n-  robot = Hubot.loadBot adapter, scriptsPath, Options.name\n-  robot.enableSlash = Options.enableSlash\n+  robot.load scriptsPath\n \n-  scriptsPath = Path.resolve \"src\", \"hubot\", \"scripts\"\n+  scriptsPath = Path.resolve \"src\", \"scripts\"\n   console.log \"Loading hubot core scripts for relative scripts at #{scriptsPath}\"\n   robot.load scriptsPath\n \n   scriptsFile = Path.resolve \"hubot-scripts.json\"\n   Path.exists scriptsFile, (exists) =>\n     if exists\n       console.log \"Loading hubot-scripts from #{scriptsFile}\"\n-      Fs.readFile scriptsFile, (err, data) =>\n-        JSON.parse(data).forEach (plugin) =>\n+      Fs.readFile scriptsFile, (err, data) ->\n+        for plugin in JSON.parse(data)\n           robot.loadFile Path.resolve(\"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"), plugin\n-    else\n-      scriptsPath = Path.resolve \"src\", \"scripts\"\n-      console.log \"Loading hubot-scripts plugins at #{scriptsPath}\"\n-      robot.load scriptsPath\n \n   robot.run()\n ", "changes": 38}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "index.coffee", "sha": "ba0684c729cdfad032a68389b08e4f6cb910ee3c", "additions": 4, "patch": "@@ -1,12 +1,12 @@\n # This is the Hubot Loading Bay.  NPM uses it as an entry point.\n #\n #     Hubot = require 'hubot'\n-#     YourBot = Hubot.robot 'campfire', 'blah', 'yourbot'\n+#     YourBot = Hubot.robot 'campfire', 'yourbot'\n \n # Loads a Hubot robot\n-exports.loadBot = (adapterName, path, botName) ->\n-  robot = require \"./src/hubot/#{adapterName}\"\n-  new robot path, botName\n+exports.loadBot = (adapterName, botName) ->\n+  robot = require './src/robot'\n+  new robot adapterName, botName\n \n exports.robot = ->\n   require './src/robot'", "changes": 8}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "package.json", "sha": "939a4679e3cc3850b40c511d2821cfaa914c7594", "additions": 0, "patch": "@@ -18,11 +18,6 @@\n     \"coffee-script\": \"1.1.2\",\n     \"optparse\": \"1.0.3\",\n     \"scoped-http-client\": \"0.9.4\",\n-    \"irc\": \"0.3.2\",\n-    \"node-xmpp\": \"0.2.11\",\n-    \"wobot\": \"0.3.0\",\n-    \"imap\": \"0.2.5\",\n-    \"flowdock\": \"0.2.2\"\n   },\n \n   \"main\": \"./index\",", "changes": 5}, {"status": "renamed", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/campfire.coffee", "previous_filename": "src/hubot/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/campfire.coffee", "sha": "c9753f1ba8ceff22c5e67684e967643e8e988e93", "additions": 4, "patch": "@@ -2,7 +2,7 @@ Robot        = require \"../robot\"\n HTTPS        = require \"https\"\n EventEmitter = require(\"events\").EventEmitter\n \n-class Campfire extends Robot\n+class Campfire extends Robot.Adapter\n   send: (user, strings...) ->\n     if strings.length > 0\n       @bot.Room(user.room).speak strings.shift(), (err, data) =>\n@@ -14,6 +14,7 @@ class Campfire extends Robot\n \n   run: ->\n     self = @\n+\n     options =\n       token:   process.env.HUBOT_CAMPFIRE_TOKEN\n       rooms:   process.env.HUBOT_CAMPFIRE_ROOMS\n@@ -25,8 +26,8 @@ class Campfire extends Robot\n       bot.User user, (err, userData) ->\n         if userData.user\n           author = self.userForId(userData.user.id, userData.user)\n-          self.brain.data.users[userData.user.id].name = userData.user.name\n-          self.brain.data.users[userData.user.id].email_address = userData.user.email_address\n+          self.robot.brain.data.users[userData.user.id].name = userData.user.name\n+          self.robot.brain.data.users[userData.user.id].email_address = userData.user.email_address\n           author.room = room\n           callback id, created, room, user, body, author\n \n@@ -192,7 +193,6 @@ class CampfireStreaming extends EventEmitter\n             when 401 then throw new Error(\"Invalid access token provided, campfire refused the authentication\")\n             else console.log \"campfire error: #{response.statusCode}\"\n \n-\n         try\n           callback null, JSON.parse(data)\n         catch err", "changes": 8}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/email.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/email.coffee", "previous_filename": "src/hubot/email.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/email.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/email.coffee", "sha": "1d66689115a63f2f626634d3cb35b10758299ea8", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/flowdock.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/flowdock.coffee", "previous_filename": "src/hubot/flowdock.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/flowdock.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/flowdock.coffee", "sha": "70098cab5b51a6d37829e47682303f534224f4e7", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/groupme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/groupme.coffee", "previous_filename": "src/hubot/groupme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/groupme.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/groupme.coffee", "sha": "6a238ad5009fee133f9b52394a18a310481da5e5", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/gtalk.coffee", "previous_filename": "src/hubot/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/gtalk.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/gtalk.coffee", "sha": "8a7b0326ec650724a9f32196b429181802708a67", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/hipchat.coffee", "previous_filename": "src/hubot/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/hipchat.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/hipchat.coffee", "sha": "c93773a4a30d7566cca45365ea552d3eba01c281", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/irc.coffee", "previous_filename": "src/hubot/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/irc.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/irc.coffee", "sha": "d93cfc152707caaebdbdffed149b4960c3da63e6", "additions": 10, "patch": "@@ -1,7 +1,7 @@\n Robot = require \"../robot\"\n Irc   = require \"irc\"\n \n-class IrcBot extends Robot\n+class IrcBot extends Robot.Adapter\n   send: (user, strings...) ->\n     for str in strings\n       if user.room\n@@ -28,7 +28,7 @@ class IrcBot extends Robot\n     self = @\n \n     options =\n-      nick:     process.env.HUBOT_IRC_NICK or @name\n+      nick:     process.env.HUBOT_IRC_NICK or @robot.name\n       port:     process.env.HUBOT_IRC_PORT\n       rooms:    process.env.HUBOT_IRC_ROOMS.split(\",\")\n       server:   process.env.HUBOT_IRC_SERVER\n@@ -38,18 +38,14 @@ class IrcBot extends Robot\n       unflood:  process.env.HUBOT_IRC_UNFLOOD or false\n       debug:    process.env.HUBOT_IRC_DEBUG or false\n \n-\n-    console.log options\n-\n-    client_options = {\n-          password: options.password,\n-          debug: true,\n-          port: options.port,\n-          stripColors: true,\n-          secure: if options.port is \"6697\" then true else false,\n-          selfSigned: options.fakessl,\n-          floodProtection: options.unflood\n-        }\n+    client_options =\n+      password: options.password,\n+      debug: options.debug,\n+      port: options.port,\n+      stripColors: true,\n+      secure: if options.port is \"6697\" then true else false,\n+      selfSigned: options.fakessl,\n+      floodProtection: options.unflood\n \n     unless options.nickpass\n         client_options['channels'] = options.rooms", "changes": 24}, {"status": "renamed", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/shell.coffee", "previous_filename": "src/hubot/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/shell.coffee", "sha": "31a35a9697d0896d740df60b8dd706bccd07ce25", "additions": 5, "patch": "@@ -1,6 +1,6 @@\n Robot = require '../robot'\n \n-class Shell extends Robot\n+class Shell extends Robot.Adapter\n   send: (user, strings...) ->\n     for str in strings\n       console.log str\n@@ -12,7 +12,7 @@ class Shell extends Robot\n   run: ->\n     console.log \"Hubot: the Shell.\"\n \n-    user = @userForId('1', {name: \"Shell\"})\n+    user = @userForId('1', { name: \"Shell\" })\n \n     process.stdin.resume()\n     process.stdin.on 'data', (txt) =>\n@@ -21,9 +21,9 @@ class Shell extends Robot\n         @receive new Robot.TextMessage user, line\n \n     setTimeout =>\n-      user   = @userForId('1', {name: \"Shell\"})\n-      atmos  = @userForId('2', {name: \"atmos\"})\n-      holman = @userForId('3', {name: \"Zach Holman\"})\n+      user   = @userForId('1', { name: \"Shell\" })\n+      atmos  = @userForId('2', { name: \"atmos\" })\n+      holman = @userForId('3', { name: \"Zach Holman\" })\n     , 3000\n \n module.exports = Shell", "changes": 10}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/talker.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/talker.coffee", "previous_filename": "src/hubot/talker.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/talker.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/talker.coffee", "sha": "e76daffe6677394454be246725b1ae977f8a55cd", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/twilio.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/twilio.coffee", "previous_filename": "src/hubot/twilio.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/twilio.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/twilio.coffee", "sha": "87984b577d1727fa0d7293d29be346966d8d80aa", "additions": 1, "patch": "@@ -2,7 +2,7 @@ Robot = require '../robot'\n HTTP  = require 'http'\n QS    = require 'querystring'\n \n-class Twilio extends Robot\n+class Twilio extends Robot.Adapter\n   constructor: ->\n     @sid   = process.env.HUBOT_SMS_SID\n     @token = process.env.HUBOT_SMS_TOKEN", "changes": 2}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/twitter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/twitter.coffee", "previous_filename": "src/hubot/twitter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/twitter.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/twitter.coffee", "sha": "6de1e8d2ca24a949ebdc8d984f13bb3d888e5993", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/adapters/xmpp.coffee", "previous_filename": "src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/xmpp.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/adapters/xmpp.coffee", "sha": "1f4c4a3de930e8a34ecbc898985390284c20ab9e", "additions": 0, "changes": 0}, {"status": "modified", "deletions": 21, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/robot.coffee", "sha": "508a5478bf18b478d67a0af81c6808c0d7423697", "additions": 65, "patch": "@@ -8,7 +8,7 @@ class Robot\n   # dispatch them to matching listeners.\n   #\n   # path - String directory full of Hubot scripts to load.\n-  constructor: (path, name = \"Hubot\") ->\n+  constructor: (adapterPath, adapter, name = \"Hubot\") ->\n     @name        = name\n     @brain       = new Robot.Brain\n     @commands    = []\n@@ -17,7 +17,8 @@ class Robot\n     @loadPaths   = []\n     @enableSlash = false\n \n-    @load path if path\n+    Adapter = require \"#{adapterPath}/#{adapter}\"\n+    @adapter = new Adapter @\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n@@ -128,6 +129,39 @@ class Robot\n         continue if !line.match('-')\n         @commands.push line[2..line.length]\n \n+  # Public: Get an Array of User objects stored in the brain.\n+  users: ->\n+    @brain.data.users\n+\n+  # Public: Get a User object given a unique identifier\n+  userForId: (id, options) ->\n+    user = @brain.data.users[id]\n+    unless user\n+      user = new Robot.User id, options\n+      @brain.data.users[id] = user\n+    user\n+\n+  # Public: Get a User object given a name\n+  userForName: (name) ->\n+    result = null\n+    lowerName = name.toLowerCase()\n+    for k of (@brain.data.users or { })\n+      if @brain.data.users[k]['name'].toLowerCase() is lowerName\n+        result = @brain.data.users[k]\n+    result\n+\n+  # Public: Run Hubot using the loaded adapter.\n+  #\n+  # Returns nothing.\n+  run: ->\n+    @adapter.run()\n+\n+class Robot.Adapter\n+  # An adapter is a specific interface to a chat source for robots.\n+  #\n+  # robot - A Robot instance.\n+  constructor: (@robot) ->\n+\n   # Public: Raw method for sending data back to the chat source.  Extend this.\n   #\n   # user    - A Robot.User instance.\n@@ -154,29 +188,28 @@ class Robot\n   # Public: Raw method for shutting the bot down.\n   # Extend this.\n   close: ->\n-    @brain.close()\n+    @robot.brain.close()\n \n-  users: () ->\n-    @brain.data.users\n+  # Public: Dispatch a received message to the robot.\n+  #\n+  # message - A TextMessage instance of the received message.\n+  #\n+  # Returns nothing.\n+  receive: (message) ->\n+    @robot.receive message\n+\n+  # Public: Get an Array of User objects stored in the brain.\n+  users: ->\n+    @robot.users\n \n   # Public: Get a User object given a unique identifier\n-  #\n   userForId: (id, options) ->\n-    user = @brain.data.users[id]\n-    unless user\n-      user = new Robot.User id, options\n-      @brain.data.users[id] = user\n-    user\n+    @robot.userForId id, options\n \n   # Public: Get a User object given a name\n-  #\n   userForName: (name) ->\n-    result = null\n-    lowerName = name.toLowerCase()\n-    for k of (@brain.data.users or { })\n-      if @brain.data.users[k]['name'].toLowerCase() is lowerName\n-        result = @brain.data.users[k]\n-    result\n+    @robot.userForName name\n+\n \n   # Public: Creates a scoped http client with chainable methods for\n   # modifying the request.  This doesn't actually make a request though.\n@@ -229,14 +262,25 @@ class Robot.Brain extends EventEmitter\n \n     @resetSaveInterval 5\n \n+  # Emits the 'save' event so that 'brain' scripts can handle persisting.\n+  #\n+  # Returns nothing.\n   save: ->\n     @emit 'save', @data\n \n+  # Emits the 'close' event so that 'brain' scripts can handle closing.\n+  #\n+  # Returns nothing.\n   close: ->\n     clearInterval @saveInterval\n     @save()\n     @emit 'close'\n \n+  # Reset the interval between save function calls.\n+  #\n+  # seconds - An Integer of seconds between saves.\n+  #\n+  # Returns nothing.\n   resetSaveInterval: (seconds) ->\n     clearInterval @saveInterval if @saveInterval\n     @saveInterval = setInterval =>\n@@ -337,7 +381,7 @@ class Robot.Response\n   #\n   # Returns nothing.\n   send: (strings...) ->\n-    @robot.send @message.user, strings...\n+    @robot.adapter.send @message.user, strings...\n \n   # Public: Posts a topic changing message\n   #\n@@ -346,7 +390,7 @@ class Robot.Response\n   #\n   # Returns nothing.\n   topic: (strings...) ->\n-    @robot.topic @message.user, strings...\n+    @robot.adapter.topic @message.user, strings...\n \n   # Public: Posts a message mentioning the current user.\n   #\n@@ -355,7 +399,7 @@ class Robot.Response\n   #\n   # Returns nothing.\n   reply: (strings...) ->\n-    @robot.reply @message.user, strings...\n+    @robot.adapter.reply @message.user, strings...\n \n   # Public: Picks a random item from the given items.\n   #", "changes": 86}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/google-images.coffee", "previous_filename": "src/hubot/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/scripts/google-images.coffee", "sha": "5d6676d0b2aadd8164b74addea2f1c1505d3f1e8", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/help.coffee", "previous_filename": "src/hubot/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/scripts/help.coffee", "sha": "f85f5e69311a999b2f3e9dc1f94e0425b2c2c826", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/maps.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/maps.coffee", "previous_filename": "src/hubot/scripts/maps.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/maps.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/scripts/maps.coffee", "sha": "5dbf370b22daaf79d1970198332de12bfc9449a7", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/math.coffee", "previous_filename": "src/hubot/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/scripts/math.coffee", "sha": "0d25e031621d1d36cad3808a3e9d1deabdbae216", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/ping.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/ping.coffee", "previous_filename": "src/hubot/scripts/ping.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/ping.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/scripts/ping.coffee", "sha": "d645c8a2ea1e0479e1eab8c2f9731fe376803601", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/roles.coffee", "previous_filename": "src/hubot/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/scripts/roles.coffee", "sha": "91876feff455ef807c29e4ef043bd1d0c1f384a2", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/rules.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/rules.coffee", "previous_filename": "src/hubot/scripts/rules.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/rules.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/scripts/rules.coffee", "sha": "7d2266c8fbe85c013a410ad37da2027af310766b", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/storage.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/storage.coffee", "previous_filename": "src/hubot/scripts/storage.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/storage.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/scripts/storage.coffee", "sha": "5b4447d73b47f6f11d6c178d2814501dd57b3795", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/translate.coffee", "previous_filename": "src/hubot/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/scripts/translate.coffee", "sha": "c4d911389679f593650d522766a292741a8e9abb", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/youtube.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/src/scripts/youtube.coffee", "previous_filename": "src/hubot/scripts/youtube.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/youtube.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "src/scripts/youtube.coffee", "sha": "c3240d7dbc4eb0eb11c03a3f149f7a952717632e", "additions": 0, "changes": 0}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/test/danger_adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/test/danger_adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/danger_adapter.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "test/danger_adapter.coffee", "sha": "0c5a936e944cafc96b5775978190b5834b1d0915", "additions": 21, "patch": "@@ -0,0 +1,21 @@\n+Robot = require '../src/robot'\n+\n+class Danger extends Robot.Adapter\n+  send: (user, strings...) ->\n+    strings.forEach (str) =>\n+      @sent.push str\n+    @cb? strings...\n+\n+  reply: (user, strings...) ->\n+    strings.forEach (str) =>\n+      @send user, \"#{@name}: #{str}\"\n+\n+  run: ->\n+    console.log \"Hubot: The Danger Room.\"\n+\n+  receive: (text) ->\n+    user = new Robot.User 1, 'helper'\n+    super new Robot.TextMessage user, text\n+\n+module.exports = Danger\n+", "changes": 21}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/test/google_images_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/test/google_images_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/google_images_test.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "test/google_images_test.coffee", "sha": "0aa956330bc561179fb1dc2349e435659f82556a", "additions": 1, "patch": "@@ -2,7 +2,7 @@ Tests  = require './tests'\n assert = require 'assert'\n helper = Tests.helper()\n \n-require('../src/hubot/scripts/google-images') helper\n+require('../src/scripts/google-images') helper\n \n # start up a danger room for google images\n danger = Tests.danger helper, (req, res, url) ->", "changes": 2}, {"status": "modified", "deletions": 16, "raw_url": "https://github.com/hubotio/hubot/raw/3cd3844a724b00c8df6a2b23c35297378b130488/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3cd3844a724b00c8df6a2b23c35297378b130488/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=3cd3844a724b00c8df6a2b23c35297378b130488", "filename": "test/tests.coffee", "sha": "791799dde32566479b82db49a889b8b83bb2f0d5", "additions": 5, "patch": "@@ -1,4 +1,5 @@\n Robot = require '../src/robot'\n+Path  = require 'path'\n Url   = require 'url'\n \n # A programmer's best friend.\n@@ -30,25 +31,13 @@ exports.danger = (helper, cb) ->\n   server\n \n class Helper extends Robot\n-  constructor: (path) ->\n-    super path, 'helper'\n+  constructor: (scriptPath) ->\n+    adapterPath = Path.resolve \"test\"\n+    super adapterPath, 'danger_adapter', 'helper'\n+    @load scriptPath\n     @sent = []\n     @Response = Helper.Response\n \n-  send: (user, strings...) ->\n-    strings.forEach (str) =>\n-      @sent.push str\n-    @cb? strings...\n-\n-  reply: (user, strings...) ->\n-    strings.forEach (str) =>\n-      @send user, \"#{@name}: #{str}\"\n-\n-  # modified to accept a string and pass the Robot.TextMessage to super()\n-  receive: (text) ->\n-    user = new Robot.User 1, 'helper'\n-    super new Robot.TextMessage(user, text)\n-\n if not process.env.HUBOT_LIVE\n   class Helper.Response extends Robot.Response\n     # This changes ever HTTP request to hit the danger server above", "changes": 21}], "145": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/f021fd400622b5a3f5c8a9c2d50a4e5aca54a1de/src/hubot/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f021fd400622b5a3f5c8a9c2d50a4e5aca54a1de/src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/xmpp.coffee?ref=f021fd400622b5a3f5c8a9c2d50a4e5aca54a1de", "filename": "src/hubot/xmpp.coffee", "sha": "fe570671fde00a20cb34460cb2179143908760c2", "additions": 16, "patch": "@@ -6,7 +6,7 @@ class XmppBot extends Robot\n     options =\n       username: process.env.HUBOT_XMPP_USERNAME\n       password: process.env.HUBOT_XMPP_PASSWORD\n-      rooms:    process.env.HUBOT_XMPP_ROOMS.split(',')\n+      rooms:    @parseRooms process.env.HUBOT_XMPP_ROOMS.split(',')\n       keepaliveInterval: 30000 # ms interval to send whitespace to xmpp server\n \n     console.log options\n@@ -33,17 +33,29 @@ class XmppBot extends Robot\n     # join each room\n     # http://xmpp.org/extensions/xep-0045.html for XMPP chat standard\n     for room in @options.rooms\n-      @client.send(new Xmpp.Element('presence', to: \"#{room}/#{@name}\" )\n-        .c('x', xmlns: 'http://jabber.org/protocol/muc' )\n-        .c('history', seconds: 1 )) # prevent the server from confusing us with old messages\n+      @client.send do =>\n+        el = new Xmpp.Element('presence', to: \"#{room.jid}/#{@name}\" )\n+        x = el.c('x', xmlns: 'http://jabber.org/protocol/muc' )\n+        x.c('history', seconds: 1 ) # prevent the server from confusing us with old messages\n                                     # and it seems that servers don't reliably support maxchars\n                                     # or zero values\n+        if (room.password) then x.c('password').t(room.password)\n+        return x\n \n     # send raw whitespace for keepalive\n     setInterval =>\n       @client.send ' '\n     , @options.keepaliveInterval\n \n+  parseRooms: (items) ->\n+    rooms = []\n+    for room in items\n+      index = room.indexOf(':')\n+      rooms.push\n+        jid:      room.slice(0, if index > 0 then index else room.length)\n+        password: if index > 0 then room.slice(index+1) else false\n+    return rooms\n+\n   read: (stanza) =>\n     if stanza.attrs.type is 'error'\n       console.error '[xmpp error]' + stanza", "changes": 20}], "146": [{"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/8198d64b641533c03289e305e8de1c057e46db4d/src/hubot/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8198d64b641533c03289e305e8de1c057e46db4d/src/hubot/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/xmpp.coffee?ref=8198d64b641533c03289e305e8de1c057e46db4d", "filename": "src/hubot/xmpp.coffee", "sha": "e02d02405fd3ff6ad923da0c113819b5b1da6a16", "additions": 11, "patch": "@@ -131,13 +131,17 @@ class XmppBot extends Robot\n     for str in strings\n       console.log \"Sending to #{user.room}: #{str}\"\n \n-      to = if user.type in ['direct', 'chat'] then \"#{user.room}/#{user.id}\" else user.room\n-\n-      message = new Xmpp.Element('message',\n-                  from: @options.username\n-                  to: to\n-                  type: user.type\n-                ).\n+      params =\n+        to: if user.type in ['direct', 'chat'] then \"#{user.room}/#{user.id}\" else user.room\n+        type: user.type\n+      \n+      switch user.type\n+        when 'chat'\n+          params.from = \"#{@options.username}/#{@name}\"\n+        when 'direct'\n+          params.from = @options.username\n+\n+      message = new Xmpp.Element('message', params).\n                 c('body').t(str)\n \n       @client.send message\n@@ -150,7 +154,6 @@ class XmppBot extends Robot\n     string = strings.join \"\\n\"\n \n     message = new Xmpp.Element('message',\n-                from: @options.username,\n                 to: user.room\n                 type: user.type\n               ).", "changes": 19}], "147": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/6d20b0c899d6e7941649e646727ee18c77915814/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/6d20b0c899d6e7941649e646727ee18c77915814/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=6d20b0c899d6e7941649e646727ee18c77915814", "filename": "src/robot.coffee", "sha": "0907ca8614f009ab27ce8630fb3eab29852c9123", "additions": 5, "patch": "@@ -35,9 +35,10 @@ class Robot\n   #\n   # regex    - A Regex that determines if the callback should be called.\n   # callback - A Function that is called with a Response object.\n+  # all      - Parse all messages (not only those for bot)?\n   #\n   # Returns nothing.\n-  respond: (regex, callback) ->\n+  respond: (regex, callback, all = false) ->\n     re = regex.toString().split(\"/\")\n     re.shift()           # remove empty first item\n     modifiers = re.pop() # pop off modifiers\n@@ -47,7 +48,9 @@ class Robot\n       console.log \"WARNING: The regex in question was #{regex.toString()}\\n\"\n \n     pattern = re.join(\"/\") # combine the pattern back again\n-    if @enableSlash\n+    if all\n+      newRegex = new RegExp(\"^\\\\s*(?:#{pattern})\", modifiers)\n+    else if @enableSlash\n       newRegex = new RegExp(\"^(?:\\/|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n     else\n       newRegex = new RegExp(\"^#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)", "changes": 7}], "148": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/a39b8232cb0ffc5ac2f4826421b407b4f8a3b74f/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/a39b8232cb0ffc5ac2f4826421b407b4f8a3b74f/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=a39b8232cb0ffc5ac2f4826421b407b4f8a3b74f", "filename": "bin/hubot", "sha": "ecc76e85828ea8f31ec38c684dfcf5af5b08ac8c", "additions": 10, "patch": "@@ -19,7 +19,8 @@ Switches = [\n   [ \"-h\", \"--help\",              \"Display the help information\"],\n   [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],\n   [ \"-c\", \"--create PATH\",       \"Create a deployable hubot\"],\n-  [ \"-s\", \"--enable-slash\",      \"Enable replacing the robot's name with '/'\"],\n+  [ \"-s\", \"--enable-slash\",      \"Enable replacing the robot's name with '/' (deprecated)\"],\n+  [ \"-l\", \"--alias ALIAS\",       \"Enable replacing the robot's name with alias\"],\n   [ \"-n\", \"--name NAME\",         \"The name of the robot in chat\" ],\n   [ \"-v\", \"--version\",           \"Displays the version of hubot installed\"]\n ]\n@@ -29,6 +30,7 @@ Options =\n   name: \"Hubot\"\n   create: false\n   adapter: \"stdio\"\n+  alias: false\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n@@ -43,8 +45,13 @@ Parser.on \"create\", (opt, value) ->\n   Options.path = value\n   Options.create = true\n \n+# deprecated\n Parser.on \"enable-slash\", (opt) ->\n-  Options.enableSlash = true\n+  console.log \"-s and --enable-slash is deprecated please use -l or --alias '/'\"\n+  Options.alias = '/'\n+\n+Parser.on \"alias\", (opt, value) ->\n+  Options.alias = value\n \n Parser.on \"help\", (opt, value) ->\n   console.log Parser.toString()\n@@ -83,7 +90,7 @@ else\n   scriptsPath = Path.resolve \"./scripts\"\n   console.log \"Loading deploy-local scripts at #{scriptsPath}\"\n   robot = Hubot.loadBot adapter, scriptsPath, Options.name\n-  robot.enableSlash = Options.enableSlash\n+  robot.alias = Options.alias\n \n   scriptsPath = Path.resolve \"src\", \"hubot\", \"scripts\"\n   console.log \"Loading hubot core scripts for relative scripts at #{scriptsPath}\"", "changes": 13}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/a39b8232cb0ffc5ac2f4826421b407b4f8a3b74f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a39b8232cb0ffc5ac2f4826421b407b4f8a3b74f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=a39b8232cb0ffc5ac2f4826421b407b4f8a3b74f", "filename": "src/robot.coffee", "sha": "093303c963b6c9b16a9eea0c8bfd6f640bbb54a5", "additions": 4, "patch": "@@ -15,7 +15,7 @@ class Robot\n     @Response    = Robot.Response\n     @listeners   = []\n     @loadPaths   = []\n-    @enableSlash = false\n+    @alias       = false\n \n     @load path if path\n \n@@ -47,8 +47,9 @@ class Robot\n       console.log \"WARNING: The regex in question was #{regex.toString()}\\n\"\n \n     pattern = re.join(\"/\") # combine the pattern back again\n-    if @enableSlash\n-      newRegex = new RegExp(\"^(?:\\/|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n+    if @alias\n+      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\") # escape alias for regexp\n+      newRegex = new RegExp(\"^(?:#{alias}|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n     else\n       newRegex = new RegExp(\"^#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n ", "changes": 7}], "150": [{"status": "modified", "deletions": 18, "raw_url": "https://github.com/hubotio/hubot/raw/254f87d27666cdf5a7b5ef3861c00014952240bb/src/hubot/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/254f87d27666cdf5a7b5ef3861c00014952240bb/src/hubot/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/gtalk.coffee?ref=254f87d27666cdf5a7b5ef3861c00014952240bb", "filename": "src/hubot/gtalk.coffee", "sha": "1fccd0418dc1440bdbf0f5c3289390213d297949", "additions": 59, "patch": "@@ -8,58 +8,99 @@ class Gtalkbot extends Robot\n     options = \n       jid: process.env.HUBOT_GTALK_USERNAME\n       password: process.env.HUBOT_GTALK_PASSWORD\n+      acceptDomains: process.env.HUBOT_GTALK_WHITELIST_DOMAINS.split(',')\n+      acceptUsers: process.env.HUBOT_GTALK_WHITELIST_USERS.split(',')\n       host: 'talk.google.com'\n       port: 5222\n-      keepaliveInterval: 30000 # ms interval to send whitespace to xmpp server\n+      keepaliveInterval: 15000 # ms interval to send query to gtalk server\n \n     # Connect to gtalk servers\n-    @client = new Xmpp.Client options\n+    @client = new Xmpp.Client \n+      jid: options.jid\n+      password: options.password\n+      host: options.host\n+      port: options.port\n \n     # Events\n     @client.on 'online', @.online\n-    @client.on 'stanza', @.read\n+    @client.on 'stanza', @.readStanza\n     @client.on 'error', @.error\n-    \n-    # Log options\n-    console.log options\n \n     # Share the optionss\n     @options = options\n \n   online: =>\n     @client.send new Xmpp.Element('presence')\n-      .c('show').t('chat')\n \n-    # send raw whitespace for keepalive\n+    # He is alive!\n+    console.log @name + ' is online, talk.google.com!'\n+\n+    roster_query = new Xmpp.Element('iq',\n+        type: 'get'\n+        id: (new Date).getTime()\n+      )\n+      .c('query', \n+        xmlns: 'jabber:iq:roster'\n+      )\n+\n+    # Check for buddy requests every so often\n     setInterval =>\n-      @client.send ' '\n+      @client.send roster_query\n     , @options.keepaliveInterval\n \n-    # He is alive!\n-    console.log @name + ' is online, talk.google.com!'\n+  readStanza: (stanza) =>\n+    # Useful for debugging\n+    # console.log stanza\n \n-  read: (stanza) =>\n+    # Check for erros\n     if stanza.attrs.type is 'error'\n       console.error '[xmpp error] - ' + stanza\n       return\n \n-    # Make sure we have a message\n-    return if !stanza.is 'message' or stanza.attrs.type not in ['groupchat', 'direct', 'chat']\n-    \n+    # Check for presence responses\n+    if stanza.is 'presence'\n+      @handlePresence stanza\n+      return\n+\n+    # Check for message responses\n+    if stanza.is 'message' or stanza.attrs.type not in ['groupchat', 'direct', 'chat']\n+      @handleMessage stanza\n+      return\n+\n+  handleMessage: (stanza) =>\n+\n     # Strip the from attribute to get who this is from\n     [from, room] = stanza.attrs.from.split '/'\n     # ignore empty bodies (i.e., topic changes -- maybe watch these someday)\n     body = stanza.getChild 'body'\n     return unless body\n-    \n+\n     message = body.getText()\n \n     # Pad the message with robot name just incase it was not provided.\n-    message = if !message.match(new RegExp(\"^\"+@name+\":?\",\"i\")) then @name+\" \"+message else message\n+    message = if !message.match(new RegExp(\"^\"+@name+\":?\",\"i\")) then @name + \" \" + message else message\n \n     # Send the message to the robot\n     @receive new Robot.TextMessage from, message\n-  \n+\n+  handlePresence: (stanza) =>\n+\n+    domainRegexStr = \"^*@[\"+@options.acceptDomains.join('|')+\"]$\"\n+    domainRegex = new RegExp(domainRegexStr,\"i\")\n+    # Check for buddy request\n+    if stanza.attrs.type is 'subscribe' and stanza.attrs.from in @options.acceptUsers or stanza.attrs.from.match(domainRegex)\n+      @client.send new Xmpp.Element('presence',\n+        to:   stanza.attrs.from\n+        id:   stanza.attrs.id\n+        type: 'subscribed'\n+      )\n+    else\n+      console.log \"We denied: \" + stanza.attrs.from\n+      # Lets see what we are trying to match\n+      console.log \"Accepted Users: \" + @options.acceptUsers.join(',')\n+      console.log \"Accepted Domains: \" + @options.acceptDomains.join(',')\n+    \n+\n   send: (user, strings...) ->\n     for str in strings\n       message = new Xmpp.Element('message',", "changes": 77}], "152": [{"status": "modified", "deletions": 17, "raw_url": "https://github.com/hubotio/hubot/raw/d41e4047a38d661c7b791b642f09f7ef7c653ca4/src/hubot/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d41e4047a38d661c7b791b642f09f7ef7c653ca4/src/hubot/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/gtalk.coffee?ref=d41e4047a38d661c7b791b642f09f7ef7c653ca4", "filename": "src/hubot/gtalk.coffee", "sha": "5b41d4875cb918aebccd2a1ae042e12ac0bfd720", "additions": 32, "patch": "@@ -8,11 +8,14 @@ class Gtalkbot extends Robot\n     options = \n       jid: process.env.HUBOT_GTALK_USERNAME\n       password: process.env.HUBOT_GTALK_PASSWORD\n-      acceptDomains: process.env.HUBOT_GTALK_WHITELIST_DOMAINS.split(',')\n-      acceptUsers: process.env.HUBOT_GTALK_WHITELIST_USERS.split(',')\n+      acceptDomains: (entry.trim() for entry in (process.env.HUBOT_GTALK_WHITELIST_DOMAINS ? '').split(',') when entry.trim() != '')\n+      acceptUsers: (entry.trim() for entry in (process.env.HUBOT_GTALK_WHITELIST_USERS ? '').split(',') when entry.trim() != '')\n       host: 'talk.google.com'\n       port: 5222\n       keepaliveInterval: 15000 # ms interval to send query to gtalk server\n+    \n+    if not options.jid or not options.password\n+      throw Error('You need to set HUBOT_GTALK_USERNAME and HUBOT_GTALK_PASSWORD anv vars for gtalk to work')\n \n     # Connect to gtalk servers\n     @client = new Xmpp.Client \n@@ -44,6 +47,7 @@ class Gtalkbot extends Robot\n       )\n \n     # Check for buddy requests every so often\n+    @client.send roster_query\n     setInterval =>\n       @client.send roster_query\n     , @options.keepaliveInterval\n@@ -84,21 +88,32 @@ class Gtalkbot extends Robot\n     @receive new Robot.TextMessage from, message\n \n   handlePresence: (stanza) =>\n-\n-    domainRegexStr = \"^*@[\"+@options.acceptDomains.join('|')+\"]$\"\n-    domainRegex = new RegExp(domainRegexStr,\"i\")\n+    return if stanza.attrs.type isnt 'subscribe'\n+    \n+    ignore = false\n+    if @options.acceptDomains.length > 0 or @options.acceptUsers.length > 0\n+      ignore = true\n+      [from, room] = stanza.attrs.from.split '/'\n+      if @options.acceptDomains.length > 0\n+        [username, domain] = stanza.attrs.from.split '@'\n+        ignore = false if domain in @options.acceptDomains\n+        \n+      if @options.acceptUsers.length > 0\n+        ignore = false if from in @options.acceptUsers\n+    \n     # Check for buddy request\n-    if stanza.attrs.type is 'subscribe' and stanza.attrs.from in @options.acceptUsers or stanza.attrs.from.match(domainRegex)\n-      @client.send new Xmpp.Element('presence',\n-        to:   stanza.attrs.from\n-        id:   stanza.attrs.id\n-        type: 'subscribed'\n-      )\n-    else\n-      console.log \"We denied: \" + stanza.attrs.from\n-      # Lets see what we are trying to match\n-      console.log \"Accepted Users: \" + @options.acceptUsers.join(',')\n-      console.log \"Accepted Domains: \" + @options.acceptDomains.join(',')\n+    if stanza.attrs.type is 'subscribe'\n+      if not ignore\n+        @client.send new Xmpp.Element('presence',\n+          to:   stanza.attrs.from\n+          id:   stanza.attrs.id\n+          type: 'subscribed'\n+        )\n+      else\n+        console.log \"We denied: \" + stanza.attrs.from\n+        # Lets see what we are trying to match\n+        console.log \"Accepted Users: \" + @options.acceptUsers.join(',')\n+        console.log \"Accepted Domains: \" + @options.acceptDomains.join(',')\n     \n \n   send: (user, strings...) ->\n@@ -119,4 +134,4 @@ class Gtalkbot extends Robot\n   error: (err) =>\n     console.error err\n \n-module.exports = Gtalkbot\n\\ No newline at end of file\n+module.exports = Gtalkbot", "changes": 49}], "154": [{"status": "modified", "deletions": 17, "raw_url": "https://github.com/hubotio/hubot/raw/d42a762185440e348c26c8b4563e1725fea0c0b2/src/hubot/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d42a762185440e348c26c8b4563e1725fea0c0b2/src/hubot/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hubot/gtalk.coffee?ref=d42a762185440e348c26c8b4563e1725fea0c0b2", "filename": "src/hubot/gtalk.coffee", "sha": "ba1a12490c7800e309409cfb14b8efefcc174ecc", "additions": 25, "patch": "@@ -72,6 +72,11 @@ class Gtalkbot extends Robot\n       return\n \n   handleMessage: (stanza) =>\n+    if @ignoreUser(stanza.attrs.from)\n+      console.log \"Ignoring user message because of whitelist: #{stanza.attrs.from}\"\n+      console.log \"  Accepted Users: \" + @options.acceptUsers.join(',')\n+      console.log \"  Accepted Domains: \" + @options.acceptDomains.join(',')\n+      return\n \n     # Strip the from attribute to get who this is from\n     [from, room] = stanza.attrs.from.split '/'\n@@ -88,34 +93,37 @@ class Gtalkbot extends Robot\n     @receive new Robot.TextMessage from, message\n \n   handlePresence: (stanza) =>\n+    # Check for buddy request\n     return if stanza.attrs.type isnt 'subscribe'\n     \n+    if @ignoreUser(stanza.attrs.from)\n+      console.log \"Ignoring user subscribe because of whitelist: #{stanza.attrs.from}\"\n+      console.log \"  Accepted Users: \" + @options.acceptUsers.join(',')\n+      console.log \"  Accepted Domains: \" + @options.acceptDomains.join(',')\n+      return\n+\n+    # Accept\n+    @client.send new Xmpp.Element('presence',\n+      to:   stanza.attrs.from\n+      id:   stanza.attrs.id\n+      type: 'subscribed'\n+    )\n+    \n+  ignoreUser: (user) ->\n     ignore = false\n+    \n     if @options.acceptDomains.length > 0 or @options.acceptUsers.length > 0\n       ignore = true\n-      [from, room] = stanza.attrs.from.split '/'\n+      [from, room] = user.split '/'\n       if @options.acceptDomains.length > 0\n-        [username, domain] = stanza.attrs.from.split '@'\n+        [username, domain] = from.split '@'\n         ignore = false if domain in @options.acceptDomains\n         \n       if @options.acceptUsers.length > 0\n         ignore = false if from in @options.acceptUsers\n     \n-    # Check for buddy request\n-    if stanza.attrs.type is 'subscribe'\n-      if not ignore\n-        @client.send new Xmpp.Element('presence',\n-          to:   stanza.attrs.from\n-          id:   stanza.attrs.id\n-          type: 'subscribed'\n-        )\n-      else\n-        console.log \"We denied: \" + stanza.attrs.from\n-        # Lets see what we are trying to match\n-        console.log \"Accepted Users: \" + @options.acceptUsers.join(',')\n-        console.log \"Accepted Domains: \" + @options.acceptDomains.join(',')\n-    \n-\n+    return ignore\n+  \n   send: (user, strings...) ->\n     for str in strings\n       message = new Xmpp.Element('message',", "changes": 42}], "158": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/aec17e1dfb87bc57c7602850707a5ed870cf0568/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/aec17e1dfb87bc57c7602850707a5ed870cf0568/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=aec17e1dfb87bc57c7602850707a5ed870cf0568", "filename": "index.coffee", "sha": "18fe8a298221825525a48472592e3552fb965d9a", "additions": 2, "patch": "@@ -4,9 +4,9 @@\n #     YourBot = Hubot.robot 'campfire', 'yourbot'\n \n # Loads a Hubot robot\n-exports.loadBot = (adapterName, botName) ->\n+exports.loadBot = (adapterPath, adapterName, botName) ->\n   robot = require './src/robot'\n-  new robot adapterName, botName\n+  new robot adapterPath, adapterName, botName\n \n exports.robot = ->\n   require './src/robot'", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/aec17e1dfb87bc57c7602850707a5ed870cf0568/src/adapters/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/aec17e1dfb87bc57c7602850707a5ed870cf0568/src/adapters/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/xmpp.coffee?ref=aec17e1dfb87bc57c7602850707a5ed870cf0568", "filename": "src/adapters/xmpp.coffee", "sha": "ec3290cc5253832900c7e26c675d8c1d6dd863cf", "additions": 2, "patch": "@@ -1,7 +1,7 @@\n Robot = require '../robot'\n Xmpp  = require 'node-xmpp'\n \n-class XmppBot extends Robot\n+class XmppBot extends Robot.Adapter\n   run: ->\n     options =\n       username: process.env.HUBOT_XMPP_USERNAME\n@@ -34,7 +34,7 @@ class XmppBot extends Robot\n     # http://xmpp.org/extensions/xep-0045.html for XMPP chat standard\n     for room in @options.rooms\n       @client.send do =>\n-        el = new Xmpp.Element('presence', to: \"#{room.jid}/#{@name}\" )\n+        el = new Xmpp.Element('presence', to: \"#{room.jid}/#{@robot.name}\" )\n         x = el.c('x', xmlns: 'http://jabber.org/protocol/muc' )\n         x.c('history', seconds: 1 ) # prevent the server from confusing us with old messages\n                                     # and it seems that servers don't reliably support maxchars", "changes": 4}], "162": [{"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/07dff5edf0ca335a848f9baaf002acc76d1f8287/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/07dff5edf0ca335a848f9baaf002acc76d1f8287/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=07dff5edf0ca335a848f9baaf002acc76d1f8287", "filename": "bin/hubot", "sha": "16a1d9590830eac9cf309d564a41259a1a5331c6", "additions": 14, "patch": "@@ -14,19 +14,21 @@ OptParse   = require 'optparse'\n PortNumber = parseInt(process.env.PORT) || 8080\n \n Switches = [\n-  [ \"-h\", \"--help\",            \"Display the help information\"],\n-  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\"],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\"],\n-  [ \"-s\", \"--enable-slash\",    \"Enable replacing the robot's name with '/'\"],\n-  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n-  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\"]\n+  [ \"-h\", \"--help\",              \"Display the help information\"],\n+  [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],\n+  [ \"-c\", \"--create PATH\",       \"Create a deployable hubot\"],\n+  [ \"-s\", \"--enable-slash\",      \"Enable replacing the robot's name with '/' (deprecated)\"],\n+  [ \"-l\", \"--alias ALIAS\",       \"Enable replacing the robot's name with alias\"],\n+  [ \"-n\", \"--name NAME\",         \"The name of the robot in chat\" ],\n+  [ \"-v\", \"--version\",           \"Displays the version of hubot installed\"]\n ]\n \n Options =\n   path: \".\"\n   name: \"Hubot\"\n   create: false\n   adapter: \"shell\"\n+  alias: false\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n@@ -42,7 +44,11 @@ Parser.on \"create\", (opt, value) ->\n   Options.create = true\n \n Parser.on \"enable-slash\", (opt) ->\n-  Options.enableSlash = true\n+  console.log \"WARNING: -s and --enable-slash are deprecated please use -l or --alias '/'\"\n+  Options.alias = '/'\n+\n+Parser.on \"alias\", (opt, value) ->\n+  Options.alias = value\n \n Parser.on \"help\", (opt, value) ->\n   console.log Parser.toString()\n@@ -76,10 +82,10 @@ else\n   adapterPath = Path.resolve \"src\", \"adapters\"\n   robot = Hubot.loadBot adapterPath, Options.adapter, Options.name\n   robot.enableSlash = Options.enableSlash\n+  robot.alias = Options.alias\n \n   scriptsPath = Path.resolve \".\", \"scripts\"\n   console.log \"Loading deploy-local scripts at #{scriptsPath}\"\n-  robot.load scriptsPath\n \n   scriptsPath = Path.resolve \"src\", \"scripts\"\n   console.log \"Loading hubot core scripts for relative scripts at #{scriptsPath}\"", "changes": 22}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/07dff5edf0ca335a848f9baaf002acc76d1f8287/src/adapters/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/07dff5edf0ca335a848f9baaf002acc76d1f8287/src/adapters/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/irc.coffee?ref=07dff5edf0ca335a848f9baaf002acc76d1f8287", "filename": "src/adapters/irc.coffee", "sha": "719d2be8981e4d87cef19d356dea9fe62d31c819", "additions": 5, "patch": "@@ -34,17 +34,17 @@ class IrcBot extends Robot.Adapter\n       server:   process.env.HUBOT_IRC_SERVER\n       password: process.env.HUBOT_IRC_PASSWORD\n       nickpass: process.env.HUBOT_IRC_NICKSERV_PASSWORD\n-      fakessl:  process.env.HUBOT_IRC_SERVER_FAKE_SSL or false\n-      unflood:  process.env.HUBOT_IRC_UNFLOOD or false\n-      debug:    process.env.HUBOT_IRC_DEBUG or false\n-      usessl:   process.env.HUBOT_IRC_USESSL or true\n+      fakessl:  !!process.env.HUBOT_IRC_SERVER_FAKE_SSL\n+      unflood:  !!process.env.HUBOT_IRC_UNFLOOD\n+      debug:    !!process.env.HUBOT_IRC_DEBUG\n+      usessl:   !!process.env.HUBOT_IRC_USESSL\n \n     client_options =\n       password: options.password,\n       debug: options.debug,\n       port: options.port,\n       stripColors: true,\n-      secure: if options.port is \"6697\" and options.usessl then true else false,\n+      secure: options.usessl,\n       selfSigned: options.fakessl,\n       floodProtection: options.unflood\n ", "changes": 10}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/07dff5edf0ca335a848f9baaf002acc76d1f8287/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/07dff5edf0ca335a848f9baaf002acc76d1f8287/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=07dff5edf0ca335a848f9baaf002acc76d1f8287", "filename": "src/robot.coffee", "sha": "00b6da2ff848d4d71ed8ac9d6a36ed62d626c89c", "additions": 4, "patch": "@@ -15,7 +15,7 @@ class Robot\n     @Response    = Robot.Response\n     @listeners   = []\n     @loadPaths   = []\n-    @enableSlash = false\n+    @alias       = false\n \n     Adapter = require \"#{adapterPath}/#{adapter}\"\n     @adapter = new Adapter @\n@@ -48,8 +48,9 @@ class Robot\n       console.log \"WARNING: The regex in question was #{regex.toString()}\\n\"\n \n     pattern = re.join(\"/\") # combine the pattern back again\n-    if @enableSlash\n-      newRegex = new RegExp(\"^(?:\\/|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n+    if @alias\n+      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\") # escape alias for regexp\n+      newRegex = new RegExp(\"^(?:#{alias}|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n     else\n       newRegex = new RegExp(\"^#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n ", "changes": 7}], "164": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/bd91673df4ead72b79c716641f0d956c17ad8772/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/bd91673df4ead72b79c716641f0d956c17ad8772/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=bd91673df4ead72b79c716641f0d956c17ad8772", "filename": "bin/hubot", "sha": "65ed88d7a1c533e3cc881fe1b6384d0933f29b9f", "additions": 1, "patch": "@@ -51,7 +51,7 @@ Parser.on \"help\", (opt, value) ->\n Parser.on \"version\", (opt, value) ->\n   Options.version = true\n \n-Parser.parse process.ARGV\n+Parser.parse process.argv\n \n process.on 'SIGTERM', -> process.exit(0)\n ", "changes": 2}], "165": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a8ce58497a00b22039558e4f7474f1636c628148/src/adapters/flowdock.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8ce58497a00b22039558e4f7474f1636c628148/src/adapters/flowdock.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/flowdock.coffee?ref=a8ce58497a00b22039558e4f7474f1636c628148", "filename": "src/adapters/flowdock.coffee", "sha": "185b5013e958b2b08c6630c685e5a98d2dd0ca17", "additions": 1, "patch": "@@ -34,6 +34,7 @@ class Flowdock extends Robot\n       return unless message.event == 'message'\n       flow = bot.flows.filter((flow) -> return flow.name == message.flow)[0]\n       author = @userForId(message.user)\n+      return if @name == author.name\n       author.flow = flow\n       self.receive new Robot.TextMessage(author, message.content)\n ", "changes": 1}], "167": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/c4103119f88901a03cff1930d689eb68c3325187/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c4103119f88901a03cff1930d689eb68c3325187/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=c4103119f88901a03cff1930d689eb68c3325187", "filename": "src/scripts/roles.coffee", "sha": "8d8cd18c7e7664c59714c0445d167004ebc70872", "additions": 3, "patch": "@@ -9,7 +9,7 @@\n #\n \n module.exports = (robot) ->\n-  robot.respond /who is ([\\w .-]+)\\?*$/i, (msg) ->\n+  robot.respond /who is ([\\w .-_]+)\\?*$/i, (msg) ->\n     name = msg.match[1]\n \n     if name is \"you\"\n@@ -25,7 +25,7 @@ module.exports = (robot) ->\n     else\n       msg.send \"#{name}? Never heard of 'em\"\n \n-  robot.respond /([\\w .-]+) is ([\"'\\w: ]+)[.!]*$/i, (msg) ->\n+  robot.respond /([\\w .-_]+) is ([\"'\\w: -_]+)[.!]*$/i, (msg) ->\n     name    = msg.match[1]\n     newRole = msg.match[2].trim()\n \n@@ -45,7 +45,7 @@ module.exports = (robot) ->\n         else\n           msg.send \"I don't know anything about #{name}.\"\n \n-  robot.respond /([\\w .-]+) is not ([\"'\\w: ]+)[.!]*$/i, (msg) ->\n+  robot.respond /([\\w .-_]+) is not ([\"'\\w: -_]+)[.!]*$/i, (msg) ->\n     name    = msg.match[1]\n     newRole = msg.match[2].trim()\n ", "changes": 6}], "168": [{"status": "modified", "deletions": 26, "raw_url": "https://github.com/hubotio/hubot/raw/4c71fb7d713e263372f9547fcfadcade1700a03b/src/adapters/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4c71fb7d713e263372f9547fcfadcade1700a03b/src/adapters/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/gtalk.coffee?ref=4c71fb7d713e263372f9547fcfadcade1700a03b", "filename": "src/adapters/gtalk.coffee", "sha": "906b294ad93a4eb584284e5f09b6b52e826c5e55", "additions": 73, "patch": "@@ -3,6 +3,7 @@ Xmpp = require 'node-xmpp'\n \n class Gtalkbot extends Robot\n   run: ->\n+    Xmpp.JID.prototype.from = -> @bare().toString()\n \n     # Client Options\n     options = \n@@ -72,14 +73,17 @@ class Gtalkbot extends Robot\n       return\n \n   handleMessage: (stanza) =>\n-    if @ignoreUser(stanza.attrs.from)\n+    jid = new Xmpp.JID(stanza.attrs.from)\n+    \n+    if @isMe(jid)\n+      return\n+    \n+    if @ignoreUser(jid)\n       console.log \"Ignoring user message because of whitelist: #{stanza.attrs.from}\"\n       console.log \"  Accepted Users: \" + @options.acceptUsers.join(',')\n       console.log \"  Accepted Domains: \" + @options.acceptDomains.join(',')\n       return\n \n-    # Strip the from attribute to get who this is from\n-    [from, room] = stanza.attrs.from.split '/'\n     # ignore empty bodies (i.e., topic changes -- maybe watch these someday)\n     body = stanza.getChild 'body'\n     return unless body\n@@ -90,45 +94,88 @@ class Gtalkbot extends Robot\n     message = if !message.match(new RegExp(\"^\"+@name+\":?\",\"i\")) then @name + \" \" + message else message\n \n     # Send the message to the robot\n-    @receive new Robot.TextMessage from, message\n+    @receive new Robot.TextMessage @getUser(jid), message\n \n   handlePresence: (stanza) =>\n-    # Check for buddy request\n-    return if stanza.attrs.type isnt 'subscribe'\n+    jid = new Xmpp.JID(stanza.attrs.from)\n     \n-    if @ignoreUser(stanza.attrs.from)\n-      console.log \"Ignoring user subscribe because of whitelist: #{stanza.attrs.from}\"\n+    if @isMe(jid)\n+      return\n+\n+    if @ignoreUser(jid)\n+      console.log \"Ignoring user presence because of whitelist: #{stanza.attrs.from}\"\n       console.log \"  Accepted Users: \" + @options.acceptUsers.join(',')\n       console.log \"  Accepted Domains: \" + @options.acceptDomains.join(',')\n       return\n \n-    # Accept\n-    @client.send new Xmpp.Element('presence',\n-      to:   stanza.attrs.from\n-      id:   stanza.attrs.id\n-      type: 'subscribed'\n-    )\n+    # xmpp doesn't add types for standard available mesages\n+    # note that upon joining a room, server will send available\n+    # presences for all members\n+    # http://xmpp.org/rfcs/rfc3921.html#rfc.section.2.2.1\n+    stanza.attrs.type ?= 'available'\n+\n+    switch stanza.attrs.type\n+      when 'subscribe'\n+        console.log \"#{jid.from()} subscribed to us\"\n+\n+        @client.send new Xmpp.Element('presence',\n+            from: stanza.attrs.to\n+            to:   stanza.attrs.from\n+            id:   stanza.attrs.id\n+            type: 'subscribed'\n+        )\n+        \n+      when 'probe'\n+        @client.send new Xmpp.Element('presence',\n+            from: stanza.attrs.to\n+            to:   stanza.attrs.from\n+            id:   stanza.attrs.id\n+        )\n+        \n+      when 'available'\n+        user = @getUser jid\n+        user.online = true\n+        \n+        @receive new Robot.EnterMessage(user)\n+        \n+      when 'unavailable'\n+        user = @getUser jid\n+        user.online = false\n+        \n+        @receive new Robot.LeaveMessage(user)\n+  \n+  getUser: (jid) ->\n+    user = @userForId jid.from(),\n+      name: jid.user\n+      user: jid.user\n+      domain: jid.domain\n     \n-  ignoreUser: (user) ->\n-    ignore = false\n+    # This can change from request to request\n+    user.resource = jid.resource\n+    return user\n+  \n+  isMe: (jid) ->\n+    return jid.from() == @options.jid\n     \n-    if @options.acceptDomains.length > 0 or @options.acceptUsers.length > 0\n-      ignore = true\n-      [from, room] = user.split '/'\n-      if @options.acceptDomains.length > 0\n-        [username, domain] = from.split '@'\n-        ignore = false if domain in @options.acceptDomains\n-        \n-      if @options.acceptUsers.length > 0\n-        ignore = false if from in @options.acceptUsers\n+  ignoreUser: (jid) ->\n+    if @options.acceptDomains.length < 1 and @options.acceptUsers.length < 1\n+      return false\n+    \n+    ignore = true\n+    \n+    if @options.acceptDomains.length > 0\n+      ignore = false if jid.domain in @options.acceptDomains\n+      \n+    if @options.acceptUsers.length > 0\n+      ignore = false if jid.from() in @options.acceptUsers\n     \n     return ignore\n   \n   send: (user, strings...) ->\n     for str in strings\n       message = new Xmpp.Element('message',\n           from: @options.username\n-          to: user\n+          to: user.id\n           type: 'chat' \n         ).\n         c('body').t(str)", "changes": 99}], "170": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/7111e2cb72d5d85322f15f759104a5e09518dc1c/src/adapters/flowdock.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/7111e2cb72d5d85322f15f759104a5e09518dc1c/src/adapters/flowdock.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/flowdock.coffee?ref=7111e2cb72d5d85322f15f759104a5e09518dc1c", "filename": "src/adapters/flowdock.coffee", "sha": "3e85f1d9961c2d2b31b5becfd47012b65257f088", "additions": 1, "patch": "@@ -1,7 +1,7 @@\n Robot        = require \"../robot\"\n flowdock     = require \"flowdock\"\n \n-class Flowdock extends Robot\n+class Flowdock extends Robot.Adapter\n   send: (user, strings...) ->\n     strings.forEach (str) =>\n       @bot.chatMessage(user.flow.subdomain, user.flow.name, str)", "changes": 2}], "172": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8f5607ad1d4c9918f84cb56066ff9bc56d9beda4/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/8f5607ad1d4c9918f84cb56066ff9bc56d9beda4/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=8f5607ad1d4c9918f84cb56066ff9bc56d9beda4", "filename": "bin/hubot", "sha": "afb62d1d14d709fdbe652166adc927685ee93839", "additions": 4, "patch": "@@ -74,6 +74,10 @@ else if Options.version\n \n else\n   adapterPath = Path.resolve \"src\", \"adapters\"\n+  unless Path.existsSync adapterPath\n+    # we are running a deployable hubot\n+    adapterPath = Path.resolve \"node_modules\", \"hubot\", \"src\", \"adapters\"\n+\n   robot = Hubot.loadBot adapterPath, Options.adapter, Options.name\n   robot.enableSlash = Options.enableSlash\n ", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/8f5607ad1d4c9918f84cb56066ff9bc56d9beda4/src/adapters/flowdock.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8f5607ad1d4c9918f84cb56066ff9bc56d9beda4/src/adapters/flowdock.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/flowdock.coffee?ref=8f5607ad1d4c9918f84cb56066ff9bc56d9beda4", "filename": "src/adapters/flowdock.coffee", "sha": "1634151b8b51d66235a038b5ac24f86777604cfe", "additions": 3, "patch": "@@ -33,9 +33,10 @@ class Flowdock extends Robot.Adapter\n     bot.on \"message\", (message) =>\n       return unless message.event == 'message'\n       flow = bot.flows.filter((flow) -> return flow.name == message.flow)[0]\n-      author = @userForId(message.user)\n+      author =\n+        name: @userForId(message.user).name\n+        flow: flow\n       return if @name == author.name\n-      author.flow = flow\n       self.receive new Robot.TextMessage(author, message.content)\n \n     @bot = bot", "changes": 5}], "173": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/d6eb940d126bb37992e74f43ab822e9b073a0d7c/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d6eb940d126bb37992e74f43ab822e9b073a0d7c/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=d6eb940d126bb37992e74f43ab822e9b073a0d7c", "filename": "src/scripts/help.coffee", "sha": "d3ec00a7de57a64c0d7c3be6cacd3a9188ef8b71", "additions": 6, "patch": "@@ -3,8 +3,12 @@\n # These commands are grabbed from comment blocks at the top of each file.\n #\n # help - Displays all of the help commands that Hubot knows about.\n+# help <query> - Displays all help commands that match <query>.\n \n module.exports = (robot) ->\n-  robot.respond /help$/i, (msg) ->\n-    msg.send robot.helpCommands().join(\"\\n\")\n+  robot.respond /help\\s*(.*)?$/i, (msg) ->\n+    cmds = robot.helpCommands()\n+    if msg.match[1]\n+      cmds = cmds.filter (cmd) -> cmd.match(new RegExp(msg.match[1]))\n+    msg.send cmds.join(\"\\n\")\n ", "changes": 8}], "174": [{"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "README.md", "sha": "314b7ca33373567373193b5b4b20f1644e8e0378", "additions": 39, "patch": "@@ -1,15 +1,12 @@\n # Hubot\n \n-This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n+This is a version of GitHub's Campfire bot, hubot. He's <s>pretty<s> really\n+cool.\n \n-You'll probably never have to hack on this repo directly.  Instead this repo\n+You'll probably never have to hack on this repo directly. Instead this repo\n provides a library that's distributed by npm that you simply require in your\n project.\n \n-Please note that the repo is in an unstable state as it is going through some\n-changes to move the adapters out of the core and into their own packages. The\n-latest stable release is `v1.1.11`.\n-\n ## Getting Your Own\n \n Make sure you have [node.js](http://nodejs.org/) and [npm](http://npmjs.org/)\n@@ -19,12 +16,44 @@ Download the [latest version of hubot](https://github.com/github/hubot/downloads\n \n Then follow the instructions in the README in the `hubot` directory.\n \n+## Adapters\n+\n+Hubot ships with Campfire and Shell adapters. A number of third-party adapters\n+exist which you can install with npm and then use that with your hubot.\n+\n+### Creating an Adapter\n+\n+Creating an adapter for hubot is very simple. So simple infact hubot himself\n+has written his own adapters.\n+\n+1. Start a project for the npm package\n+2. Add `hubot` as a dependency to your `package.json` file\n+3. Add your main adapter file as the `main` file in `package.json`\n+\n+Below is an example of requiring hubot to extend `Robot.Adapter` and exporting\n+a `use` function that will be used to load your adapter when used.\n+\n+```coffeescript\n+\n+Robot = require(\"hubot\").robot()\n+\n+class MyAdapter extends Robot.Adapter\n+  # You'll want to override the various methods see existing adapters\n+  # ...\n+\n+exports.use = (robot) ->\n+  new MyAdapter robot\n+\n+```\n+\n ## Scripts\n \n-Hubot ships with a couple of default scripts, but there's a growing\n-number of extras in the [hubot-scripts](https://github.com/github/hubot-scripts)\n+Hubot ships with a number of default scripts, but there's a growing number of\n+extras in the [hubot-scripts](https://github.com/github/hubot-scripts)\n repository. `hubot-scripts` is a way to share scripts with the entire\n-community.  Check out the [README](https://github.com/github/hubot-scripts#readme)\n+community.\n+\n+Check out the [README](https://github.com/github/hubot-scripts#readme)\n for more help on installing individual scripts.\n \n ## Local Testing\n@@ -36,6 +65,6 @@ It's easy to test scripts locally with an interactive shell:\n     % export PATH=\"node_modules/.bin:$PATH\"\n     % bin/hubot\n \n-...and to run tests:\n+... and to run tests:\n \n     % make test", "changes": 49}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "bin/hubot", "sha": "9f18d1780e57645dcc6c3e07fa8d2e92fe11ee4d", "additions": 1, "patch": "@@ -16,7 +16,7 @@ PortNumber = parseInt(process.env.PORT) || 8080\n Switches = [\n   [ \"-h\", \"--help\",            \"Display the help information\"],\n   [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\"],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\"],\n+  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot for Campfire\"],\n   [ \"-s\", \"--enable-slash\",    \"Enable replacing the robot's name with '/'\"],\n   [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n   [ \"-v\", \"--version\",         \"Displays the version of hubot installed\"]", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "package.json", "sha": "ade82441fbfc7e97ac4db18718cd5f7c188d70b9", "additions": 2, "patch": "@@ -15,9 +15,9 @@\n   },\n \n   \"dependencies\": {\n-    \"coffee-script\": \"1.1.2\",\n+    \"coffee-script\": \"1.1.3\",\n     \"optparse\": \"1.0.3\",\n-    \"scoped-http-client\": \"0.9.4\"\n+    \"scoped-http-client\": \"0.9.6\"\n   },\n \n   \"main\": \"./index\",", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/campfire.coffee", "sha": "29659f2d97e9d17351ff8481ef458d19c1640837", "additions": 2, "patch": "@@ -53,7 +53,8 @@ class Campfire extends Robot.Adapter\n \n     @bot = bot\n \n-module.exports = Campfire\n+exports.use = (robot) ->\n+  new Campfire robot\n \n class CampfireStreaming extends EventEmitter\n   constructor: (options) ->", "changes": 3}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/shell.coffee", "sha": "02b31d5491edfb04352d0385614c15081d6f1ff2", "additions": 2, "patch": "@@ -26,5 +26,6 @@ class Shell extends Robot.Adapter\n       holman = @userForId('3', { name: \"Zach Holman\" })\n     , 3000\n \n-module.exports = Shell\n+exports.use = (robot) ->\n+  new Shell robot\n ", "changes": 3}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/email.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/email.coffee", "previous_filename": "src/adapters/email.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/email.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/third-party/email.coffee", "sha": "1d66689115a63f2f626634d3cb35b10758299ea8", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/flowdock.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/flowdock.coffee", "previous_filename": "src/adapters/flowdock.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/flowdock.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/third-party/flowdock.coffee", "sha": "185b5013e958b2b08c6630c685e5a98d2dd0ca17", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/groupme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/groupme.coffee", "previous_filename": "src/adapters/groupme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/groupme.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/third-party/groupme.coffee", "sha": "6a238ad5009fee133f9b52394a18a310481da5e5", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/gtalk.coffee", "previous_filename": "src/adapters/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/gtalk.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/third-party/gtalk.coffee", "sha": "906b294ad93a4eb584284e5f09b6b52e826c5e55", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/hipchat.coffee", "previous_filename": "src/adapters/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/hipchat.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/third-party/hipchat.coffee", "sha": "c93773a4a30d7566cca45365ea552d3eba01c281", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/irc.coffee", "previous_filename": "src/adapters/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/irc.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/third-party/irc.coffee", "sha": "d93cfc152707caaebdbdffed149b4960c3da63e6", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/talker.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/talker.coffee", "previous_filename": "src/adapters/talker.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/talker.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/third-party/talker.coffee", "sha": "e76daffe6677394454be246725b1ae977f8a55cd", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/twilio.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/twilio.coffee", "previous_filename": "src/adapters/twilio.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/twilio.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/third-party/twilio.coffee", "sha": "87984b577d1727fa0d7293d29be346966d8d80aa", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/twitter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/twitter.coffee", "previous_filename": "src/adapters/twitter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/twitter.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/third-party/twitter.coffee", "sha": "6de1e8d2ca24a949ebdc8d984f13bb3d888e5993", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/adapters/third-party/xmpp.coffee", "previous_filename": "src/adapters/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/xmpp.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/adapters/third-party/xmpp.coffee", "sha": "ec3290cc5253832900c7e26c675d8c1d6dd863cf", "additions": 0, "changes": 0}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd2b6b34e6f562f15d7519f0440a588d01840bea/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=dd2b6b34e6f562f15d7519f0440a588d01840bea", "filename": "src/robot.coffee", "sha": "faed4fd651ec999b2cc7d5cf18bafd41a00ca5f8", "additions": 19, "patch": "@@ -16,9 +16,9 @@ class Robot\n     @listeners   = []\n     @loadPaths   = []\n     @enableSlash = false\n+    @adapter     = null\n \n-    Adapter = require \"#{adapterPath}/#{adapter}\"\n-    @adapter = new Adapter @\n+    @loadAdapter adapterPath, adapter\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n@@ -109,10 +109,26 @@ class Robot\n       require(full) @\n       @parseHelp \"#{path}/#{file}\"\n \n+  # Load the adapter Hubot is going to use.\n+  #\n+  # path    - A String of the path to adapter if local.\n+  # adapter - A String of the adapter name to use.\n+  #\n+  # Returns nothing.\n+  loadAdapter: (path, adapter) ->\n+    try\n+      path = if adapter in [ \"campfire\", \"shell\" ]\n+        \"#{path}/#{adapter}\"\n+      else\n+        \"hubot-#{adapter}\"\n+\n+      @adapter = require(\"#{path}\").use(@)\n+    catch err\n+      console.log \"Can't load adapter '#{adapter}', try installing the package\"\n+\n   # Public: Help Commands for Running Scripts\n   #\n   # Returns an array of help commands for running scripts\n-  #\n   helpCommands: () ->\n     @commands.sort()\n ", "changes": 22}], "175": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/aa800c948b7c343caec8dc79312cf334265eae4e/src/adapters/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/aa800c948b7c343caec8dc79312cf334265eae4e/src/adapters/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/irc.coffee?ref=aa800c948b7c343caec8dc79312cf334265eae4e", "filename": "src/adapters/irc.coffee", "sha": "be3868990106f9c11b309f64ed3b9d1e63267aea", "additions": 3, "patch": "@@ -37,13 +37,14 @@ class IrcBot extends Robot.Adapter\n       fakessl:  process.env.HUBOT_IRC_SERVER_FAKE_SSL or false\n       unflood:  process.env.HUBOT_IRC_UNFLOOD or false\n       debug:    process.env.HUBOT_IRC_DEBUG or false\n+      usessl:   process.env.HUBOT_IRC_USESSL or true\n \n     client_options =\n       password: options.password,\n       debug: options.debug,\n       port: options.port,\n       stripColors: true,\n-      secure: if options.port is \"6697\" then true else false,\n+      secure: if options.port is \"6697\" and options.usessl then true else false,\n       selfSigned: options.fakessl,\n       floodProtection: options.unflood\n \n@@ -59,7 +60,7 @@ class IrcBot extends Robot.Adapter\n       bot.addListener 'notice', (from, to, text) ->\n         if from is 'NickServ' and text.indexOf('registered') isnt -1\n           bot.say 'NickServ', \"identify #{options.nickpass}\"\n-        else if options.nickpass and from is 'NickServ' and text.indexOf('now identified') isnt -1\n+        else if options.nickpass and from is 'NickServ' and text.indexOf('Password accepted.') isnt -1\n           for room in options.rooms\n             @join room\n ", "changes": 5}], "176": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/860a6036dd601b3ea18d3b8ff90a8e4a980a2ba5/src/adapters/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/860a6036dd601b3ea18d3b8ff90a8e4a980a2ba5/src/adapters/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/xmpp.coffee?ref=860a6036dd601b3ea18d3b8ff90a8e4a980a2ba5", "filename": "src/adapters/xmpp.coffee", "sha": "6733a971cab6e7cd8cf74f549ee0ad5f859c42b6", "additions": 4, "patch": "@@ -6,6 +6,8 @@ class XmppBot extends Robot.Adapter\n     options =\n       username: process.env.HUBOT_XMPP_USERNAME\n       password: process.env.HUBOT_XMPP_PASSWORD\n+      host: process.env.HUBOT_XMPP_HOST\n+      port: process.env.HUBOT_XMPP_PORT\n       rooms:    @parseRooms process.env.HUBOT_XMPP_ROOMS.split(',')\n       keepaliveInterval: 30000 # ms interval to send whitespace to xmpp server\n \n@@ -14,6 +16,8 @@ class XmppBot extends Robot.Adapter\n     @client = new Xmpp.Client\n       jid: options.username\n       password: options.password\n+      host: options.host\n+      port: options.port\n \n     @client.on 'error', @.error\n     @client.on 'online', @.online", "changes": 4}], "177": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/2723defe6767f30b842bb3ed23c0827329260f65/src/adapters/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2723defe6767f30b842bb3ed23c0827329260f65/src/adapters/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/hipchat.coffee?ref=2723defe6767f30b842bb3ed23c0827329260f65", "filename": "src/adapters/hipchat.coffee", "sha": "60a29a99f3ad81f567f1b524c447a3778e44d8a1", "additions": 2, "patch": "@@ -4,14 +4,12 @@ Wobot        = require(\"wobot\").Bot\n \n class HipChat extends Robot\n   send: (user, strings...) ->\n-    console.log \"Sending\"\n     for str in strings\n       @bot.message user.reply_to, str\n \n   reply: (user, strings...) ->\n-    console.log \"Replying\"\n     for str in strings\n-      @send user, \"@#{user.name} #{str}\"\n+      @send user, \"@\\\"#{user.name}\\\" #{str}\"\n \n   run: ->\n     self = @\n@@ -21,7 +19,7 @@ class HipChat extends Robot\n       name:     process.env.HUBOT_HIPCHAT_NAME or \"#{self.name} Bot\"\n       password: process.env.HUBOT_HIPCHAT_PASSWORD\n       rooms:    process.env.HUBOT_HIPCHAT_ROOMS or \"@All\"\n-    \n+\n     console.log \"Options:\", @options\n     bot = new Wobot(jid: @options.jid, name: @options.name, password: @options.password)\n     mention = new RegExp(\"@#{@options.name.split(' ')[0]}\\\\b\", \"i\")", "changes": 6}], "178": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/31c0cb4445d9a4603edb61e6fc9fd275df95586a/src/adapters/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/31c0cb4445d9a4603edb61e6fc9fd275df95586a/src/adapters/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/hipchat.coffee?ref=31c0cb4445d9a4603edb61e6fc9fd275df95586a", "filename": "src/adapters/hipchat.coffee", "sha": "23a72eabb80cbe320ddb2389745e174fe517b97f", "additions": 1, "patch": "@@ -2,7 +2,7 @@ Robot        = require \"../robot\"\n HTTPS        = require \"https\"\n Wobot        = require(\"wobot\").Bot\n \n-class HipChat extends Robot\n+class HipChat extends Robot.Adapter\n   send: (user, strings...) ->\n     for str in strings\n       @bot.message user.reply_to, str", "changes": 2}], "179": [{"status": "modified", "deletions": 16, "raw_url": "https://github.com/hubotio/hubot/raw/bebeb8e004ac5d7fb464358b1e45bb5ee9004b26/src/adapters/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/bebeb8e004ac5d7fb464358b1e45bb5ee9004b26/src/adapters/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/gtalk.coffee?ref=bebeb8e004ac5d7fb464358b1e45bb5ee9004b26", "filename": "src/adapters/gtalk.coffee", "sha": "51dfab661b6b37dcec221518e8c17e4bcdb0c2e5", "additions": 13, "patch": "@@ -6,36 +6,33 @@ class Gtalkbot extends Robot\n     Xmpp.JID.prototype.from = -> @bare().toString()\n \n     # Client Options\n-    options = \n-      jid: process.env.HUBOT_GTALK_USERNAME\n+    @options = \n+      username: process.env.HUBOT_GTALK_USERNAME\n       password: process.env.HUBOT_GTALK_PASSWORD\n       acceptDomains: (entry.trim() for entry in (process.env.HUBOT_GTALK_WHITELIST_DOMAINS ? '').split(',') when entry.trim() != '')\n       acceptUsers: (entry.trim() for entry in (process.env.HUBOT_GTALK_WHITELIST_USERS ? '').split(',') when entry.trim() != '')\n       host: 'talk.google.com'\n       port: 5222\n       keepaliveInterval: 15000 # ms interval to send query to gtalk server\n     \n-    if not options.jid or not options.password\n-      throw Error('You need to set HUBOT_GTALK_USERNAME and HUBOT_GTALK_PASSWORD anv vars for gtalk to work')\n+    if not @options.username or not @options.password\n+      throw new Error('You need to set HUBOT_GTALK_USERNAME and HUBOT_GTALK_PASSWORD anv vars for gtalk to work')\n \n     # Connect to gtalk servers\n     @client = new Xmpp.Client \n-      jid: options.jid\n-      password: options.password\n-      host: options.host\n-      port: options.port\n+      jid: @options.username\n+      password: @options.password\n+      host: @options.host\n+      port: @options.port\n \n     # Events\n     @client.on 'online', @.online\n     @client.on 'stanza', @.readStanza\n     @client.on 'error', @.error\n \n-    # Share the optionss\n-    @options = options\n-\n   online: =>\n     @client.send new Xmpp.Element('presence')\n-\n+    \n     # He is alive!\n     console.log @name + ' is online, talk.google.com!'\n \n@@ -119,15 +116,15 @@ class Gtalkbot extends Robot\n         console.log \"#{jid.from()} subscribed to us\"\n \n         @client.send new Xmpp.Element('presence',\n-            from: stanza.attrs.to\n+            from: @client.jid.toString()\n             to:   stanza.attrs.from\n             id:   stanza.attrs.id\n             type: 'subscribed'\n         )\n         \n       when 'probe'\n         @client.send new Xmpp.Element('presence',\n-            from: stanza.attrs.to\n+            from: @client.jid.toString()\n             to:   stanza.attrs.from\n             id:   stanza.attrs.id\n         )\n@@ -155,7 +152,7 @@ class Gtalkbot extends Robot\n     return user\n   \n   isMe: (jid) ->\n-    return jid.from() == @options.jid\n+    return jid.from() == @options.username\n     \n   ignoreUser: (jid) ->\n     if @options.acceptDomains.length < 1 and @options.acceptUsers.length < 1\n@@ -174,7 +171,7 @@ class Gtalkbot extends Robot\n   send: (user, strings...) ->\n     for str in strings\n       message = new Xmpp.Element('message',\n-          from: @options.username\n+          from: @client.jid.toString()\n           to: user.id\n           type: 'chat' \n         ).", "changes": 29}], "182": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3476a312fc317e6bc3bde86d21797fb7ceafb81b/src/adapters/xmpp.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3476a312fc317e6bc3bde86d21797fb7ceafb81b/src/adapters/xmpp.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/xmpp.coffee?ref=3476a312fc317e6bc3bde86d21797fb7ceafb81b", "filename": "src/adapters/xmpp.coffee", "sha": "4825fc6abe5888dd377fb63368fc6c2360a47308", "additions": 3, "patch": "@@ -88,6 +88,9 @@ class XmppBot extends Robot.Adapter\n       message = body.getText()\n \n       [room, from] = stanza.attrs.from.split '/'\n+      \n+      # ignore our own messages in rooms\n+      return if from == @robot.username\n \n       # note that 'from' isn't a full JID, just the local user part\n       user = @userForId from", "changes": 3}], "183": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d647c374bbb2bebee4b937be679b84c6c8b01800/src/adapters/irc.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d647c374bbb2bebee4b937be679b84c6c8b01800/src/adapters/irc.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/irc.coffee?ref=d647c374bbb2bebee4b937be679b84c6c8b01800", "filename": "src/adapters/irc.coffee", "sha": "686a5c9044a0b7c1422b2b4b5f19ad94aa9906f5", "additions": 1, "patch": "@@ -60,7 +60,7 @@ class IrcBot extends Robot.Adapter\n       bot.addListener 'notice', (from, to, text) ->\n         if from is 'NickServ' and text.indexOf('registered') isnt -1\n           bot.say 'NickServ', \"identify #{options.nickpass}\"\n-        else if options.nickpass and from is 'NickServ' and text.indexOf('Password accepted.') isnt -1\n+        else if options.nickpass and from is 'NickServ' and text.indexOf('Password accepted') isnt -1\n           for room in options.rooms\n             @join room\n ", "changes": 2}], "184": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8d925d43df94b22e03a67640a1aa4d333557917c/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8d925d43df94b22e03a67640a1aa4d333557917c/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=8d925d43df94b22e03a67640a1aa4d333557917c", "filename": "src/robot.coffee", "sha": "028db19ae43e1369d4e4d7f417aed28b4ec78f17", "additions": 1, "patch": "@@ -53,7 +53,7 @@ class Robot\n     pattern = re.join(\"/\") # combine the pattern back again\n     if @alias\n       alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\") # escape alias for regexp\n-      newRegex = new RegExp(\"^(?:#{alias}|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n+      newRegex = new RegExp(\"^(?:#{alias}[:,]?|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n     else\n       newRegex = new RegExp(\"^#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n ", "changes": 2}], "188": [{"status": "modified", "deletions": 9, "raw_url": "https://github.com/hubotio/hubot/raw/30644f5877aaa89b00dc6b0723e087055188712f/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/30644f5877aaa89b00dc6b0723e087055188712f/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=30644f5877aaa89b00dc6b0723e087055188712f", "filename": "bin/hubot", "sha": "fe466e8d160931d197b0fdd60f0f55c2a3316d72", "additions": 11, "patch": "@@ -14,13 +14,13 @@ OptParse   = require 'optparse'\n PortNumber = parseInt(process.env.PORT) || 8080\n \n Switches = [\n-  [ \"-h\", \"--help\",              \"Display the help information\"],\n-  [ \"-a\", \"--adapter ADAPTER\",   \"The Adapter to use\"],\n-  [ \"-c\", \"--create PATH\",       \"Create a deployable hubot\"],\n-  [ \"-s\", \"--enable-slash\",      \"Enable replacing the robot's name with '/' (deprecated)\"],\n-  [ \"-l\", \"--alias ALIAS\",       \"Enable replacing the robot's name with alias\"],\n-  [ \"-n\", \"--name NAME\",         \"The name of the robot in chat\" ],\n-  [ \"-v\", \"--version\",           \"Displays the version of hubot installed\"]\n+  [ \"-h\", \"--help\",            \"Display the help information\" ],\n+  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n+  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n+  [ \"-s\", \"--enable-slash\",    \"Enable replacing the robot's name with '/' (deprecated)\" ],\n+  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n+  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n+  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n ]\n \n Options =\n@@ -85,12 +85,12 @@ else\n   robot.alias = Options.alias\n \n   scriptsPath = Path.resolve \".\", \"scripts\"\n-  console.log \"Loading deploy-local scripts at #{scriptsPath}\"\n+  robot.load scriptsPath\n \n   scriptsPath = Path.resolve \"src\", \"scripts\"\n-  console.log \"Loading hubot core scripts for relative scripts at #{scriptsPath}\"\n   robot.load scriptsPath\n \n+  # TODO: move this loading into robot.coffee\n   scriptsFile = Path.resolve \"hubot-scripts.json\"\n   Path.exists scriptsFile, (exists) =>\n     if exists\n@@ -101,3 +101,5 @@ else\n \n   robot.run()\n \n+# vim:ft=coffee ts=2 sw=2 et :\n+", "changes": 20}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/30644f5877aaa89b00dc6b0723e087055188712f/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/30644f5877aaa89b00dc6b0723e087055188712f/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=30644f5877aaa89b00dc6b0723e087055188712f", "filename": "package.json", "sha": "a75dce30fef816cb49a977962513fa22b2146e9f", "additions": 2, "patch": "@@ -17,7 +17,8 @@\n   \"dependencies\": {\n     \"coffee-script\": \"1.1.3\",\n     \"optparse\": \"1.0.3\",\n-    \"scoped-http-client\": \"0.9.6\"\n+    \"scoped-http-client\": \"0.9.6\",\n+    \"log\": \"1.2.0\"\n   },\n \n   \"main\": \"./index\",", "changes": 3}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/30644f5877aaa89b00dc6b0723e087055188712f/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/30644f5877aaa89b00dc6b0723e087055188712f/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=30644f5877aaa89b00dc6b0723e087055188712f", "filename": "src/adapters/shell.coffee", "sha": "9d836b952e0dfc874d0a4d048a8f4933d54fe34f", "additions": 0, "patch": "@@ -11,8 +11,6 @@ class Shell extends Adapter\n       @send user, \"#{user.name}: #{str}\"\n \n   run: ->\n-    console.log \"Hubot: the Shell.\"\n-\n     user = @userForId('1', { name: \"Shell\" })\n \n     process.stdin.resume()", "changes": 2}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/30644f5877aaa89b00dc6b0723e087055188712f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/30644f5877aaa89b00dc6b0723e087055188712f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=30644f5877aaa89b00dc6b0723e087055188712f", "filename": "src/robot.coffee", "sha": "1c14df5c9b04578a6ad20ad1bc8d008f63a51d63", "additions": 13, "patch": "@@ -1,6 +1,7 @@\n Fs           = require 'fs'\n-Url          = require 'url'\n+Log          = require 'log'\n Path         = require 'path'\n+Url          = require 'url'\n \n Brain        = require './brain'\n User         = require './user'\n@@ -21,6 +22,9 @@ class Robot\n     @loadPaths   = []\n     @enableSlash = false\n \n+    @logLevel    = process.env.HUBOT_LOG_LEVEL || \"info\"\n+    @logger      = new Log @logLevel\n+\n     @loadAdapter adapterPath, adapter if adapter?\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n@@ -47,8 +51,8 @@ class Robot\n     modifiers = re.pop() # pop off modifiers\n \n     if re[0] and re[0][0] is \"^\"\n-      console.log \"\\nWARNING: Anchors don't work well with respond, perhaps you want to use 'hear'\"\n-      console.log \"WARNING: The regex in question was #{regex.toString()}\\n\"\n+      @logger.warning \"Anchors don't work well with respond, perhaps you want to use 'hear'\"\n+      @logger.warning \"The regex in question was #{regex.toString()}\"\n \n     pattern = re.join(\"/\") # combine the pattern back again\n     if @alias\n@@ -57,7 +61,7 @@ class Robot\n     else\n       newRegex = new RegExp(\"^#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n \n-    console.log newRegex.toString()\n+    @logger.debug newRegex.toString()\n     @listeners.push new TextListener(@, newRegex, callback)\n \n   # Public: Adds a Listener that triggers when anyone enters the room.\n@@ -86,14 +90,15 @@ class Robot\n       try\n         lst.call message\n       catch ex\n-        console.log \"error while calling listener: #{ex}\"\n+        @logger.error \"Unable to call the listener: #{ex}\"\n \n   # Public: Loads every script in the given path.\n   #\n   # path - A String path on the filesystem.\n   #\n   # Returns nothing.\n   load: (path) ->\n+    @logger.info \"Loading scripts from #{path}\"\n     Path.exists path, (exists) =>\n       if exists\n         @loadPaths.push path\n@@ -120,6 +125,8 @@ class Robot\n   #\n   # Returns nothing.\n   loadAdapter: (path, adapter) ->\n+    @logger.info \"Loading adapter #{adapter}\"\n+\n     try\n       path = if adapter in [ \"campfire\", \"shell\" ]\n         \"#{path}/#{adapter}\"\n@@ -128,7 +135,7 @@ class Robot\n \n       @adapter = require(\"#{path}\").use(@)\n     catch err\n-      console.log \"Can't load adapter '#{adapter}', try installing the package\"\n+      @logger.error \"Cannot load adapter #{adapter}, try installing the package\"\n \n   # Public: Help Commands for Running Scripts\n   #", "changes": 19}], "190": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/438178a446a2c3a4d295b308123bbeb39bb18f58/src/scripts/rules.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/438178a446a2c3a4d295b308123bbeb39bb18f58/src/scripts/rules.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/rules.coffee?ref=438178a446a2c3a4d295b308123bbeb39bb18f58", "filename": "src/scripts/rules.coffee", "sha": "81b39a3b66dfe380a38d4cd20ed0fa5543cdd69b", "additions": 1, "patch": "@@ -16,7 +16,7 @@ otherRules = [\n #\n # the rules - Make sure hubot still knows the rules.\n module.exports = (robot) ->\n-  robot.respond /(the rules|the laws)/i, (msg) ->\n+  robot.respond /(what are )?the (three |3 )?(rules|laws)/i, (msg) ->\n     text = msg.message.text\n     if text.match(/apple/i) or text.match(/dev/i)\n       msg.send otherRules.join('\\n')", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/438178a446a2c3a4d295b308123bbeb39bb18f58/test/rules_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/438178a446a2c3a4d295b308123bbeb39bb18f58/test/rules_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/rules_test.coffee?ref=438178a446a2c3a4d295b308123bbeb39bb18f58", "filename": "test/rules_test.coffee", "sha": "65e329a6ae1d7e62eaf7d1381639a08c03bc6146", "additions": 20, "patch": "@@ -0,0 +1,20 @@\n+Tests  = require './tests'\n+assert = require 'assert'\n+helper = Tests.helper()\n+require('../src/scripts/rules') helper\n+\n+tests = [\n+  'helper: the rules'\n+  'helper: the laws'\n+  'helper: what are the laws?'\n+  'helper: what are the three laws of robotics?'\n+  'helper: what are the 3 laws?'\n+]\n+\n+until tests.length == 0\n+  helper.reset()\n+  msg = tests.shift()\n+  helper.adapter.receive msg\n+  assert.ok helper.sent[0].match /1\\. A robot may not .+/\n+\n+helper.stop()", "changes": 20}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/438178a446a2c3a4d295b308123bbeb39bb18f58/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/438178a446a2c3a4d295b308123bbeb39bb18f58/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=438178a446a2c3a4d295b308123bbeb39bb18f58", "filename": "test/tests.coffee", "sha": "ff98502818fcd45cc6f5ff47d70461ba6164f90c", "additions": 3, "patch": "@@ -44,6 +44,9 @@ class Helper extends Robot\n   stop: ->\n     process.exit 0\n \n+  reset: ->\n+    @sent = []\n+\n class Danger extends Adapter\n   send: (user, strings...) ->\n     @robot.sent.push str for str in strings", "changes": 3}], "191": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd49b49e9a08037c48891174146fd8d0d0c72072/src/user.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd49b49e9a08037c48891174146fd8d0d0c72072/src/user.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/user.coffee?ref=dd49b49e9a08037c48891174146fd8d0d0c72072", "filename": "src/user.coffee", "sha": "89f2b45710c24a6be1bc461a7a2a1f12c0fe6838", "additions": 1, "patch": "@@ -8,6 +8,7 @@ class User\n   constructor: (@id, options = { }) ->\n     for k of (options or { })\n       @[k] = options[k]\n+    @['name'] ||= @id\n \n module.exports = User\n ", "changes": 1}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd49b49e9a08037c48891174146fd8d0d0c72072/test/user_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd49b49e9a08037c48891174146fd8d0d0c72072/test/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/user_test.coffee?ref=dd49b49e9a08037c48891174146fd8d0d0c72072", "filename": "test/user_test.coffee", "sha": "74317e0f3598e7a0941948648825226e1f73095a", "additions": 14, "patch": "@@ -0,0 +1,14 @@\n+User = require '../src/user'\n+assert = require 'assert'\n+\n+\n+user = new User \"Fake User\", {name: 'fake', type: \"groupchat\"}\n+assert.equal \"Fake User\", user.id\n+assert.equal \"groupchat\", user.type\n+assert.equal \"fake\", user.name\n+\n+user = new User \"Fake User\", {room: \"chat@room.jabber\", type: \"groupchat\"}\n+assert.equal \"Fake User\", user.id\n+assert.equal \"chat@room.jabber\", user.room\n+assert.equal \"groupchat\", user.type\n+assert.equal \"Fake User\", user.name # Make sure that if no name is given, we fallback to the ID", "changes": 14}], "192": [{"status": "modified", "deletions": 19, "raw_url": "https://github.com/hubotio/hubot/raw/1637f4d2983dc4474dd79f21737d924307437eb8/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1637f4d2983dc4474dd79f21737d924307437eb8/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=1637f4d2983dc4474dd79f21737d924307437eb8", "filename": "src/adapters/shell.coffee", "sha": "599b22343259676c3c705dcfd7eccb0b285b9843", "additions": 30, "patch": "@@ -1,29 +1,40 @@\n-Robot   = require '../robot'\n-Adapter = require '../adapter'\n+Readline = require 'readline'\n+\n+Robot    = require '../robot'\n+Adapter  = require '../adapter'\n \n class Shell extends Adapter\n   send: (user, strings...) ->\n-    for str in strings\n-      console.log str\n+    unless process.platform is \"win32\"\n+      console.log \"\\033[01;32m#{str}\\033[0m\" for str in strings\n+    else\n+      console.log \"#{str}\" for str in strings\n+    @repl.prompt()\n \n   reply: (user, strings...) ->\n-    for str in strings\n-      @send user, \"#{user.name}: #{str}\"\n+    @send user, strings...\n \n   run: ->\n-    user = @userForId('1', { name: \"Shell\" })\n-\n-    process.stdin.resume()\n-    process.stdin.on 'data', (txt) =>\n-      txt.toString().split(\"\\n\").forEach (line) =>\n-        return if line.length is 0\n-        @receive new Robot.TextMessage user, line\n-\n-    setTimeout =>\n-      user   = @userForId('1', { name: \"Shell\" })\n-      atmos  = @userForId('2', { name: \"atmos\" })\n-      holman = @userForId('3', { name: \"Zach Holman\" })\n-    , 3000\n+    stdin = process.openStdin()\n+    stdout = process.stdout\n+\n+    process.on \"uncaughtException\", (err) =>\n+      @robot.logger.error \"#{err}\"\n+\n+    @repl = Readline.createInterface stdin, stdout, null\n+\n+    @repl.on \"close\", =>\n+      stdin.destroy()\n+      process.exit 0\n+\n+    @repl.on \"line\", (buffer) =>\n+      @repl.close() if buffer.toLowerCase() is \"exit\"\n+      @repl.prompt()\n+      user = @userForId '1', name: \"Shell\"\n+      @receive new Robot.TextMessage user, buffer\n+\n+    @repl.setPrompt \"#{@robot.name}> \"\n+    @repl.prompt()\n \n exports.use = (robot) ->\n   new Shell robot", "changes": 49}], "193": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/ce83f5ba97ea01c98d59f76a6d7e49591b6aa4c2/src/adapters/third-party/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ce83f5ba97ea01c98d59f76a6d7e49591b6aa4c2/src/adapters/third-party/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/hipchat.coffee?ref=ce83f5ba97ea01c98d59f76a6d7e49591b6aa4c2", "filename": "src/adapters/third-party/hipchat.coffee", "sha": "4966eac6e0b2d898ce0853b92960ce55da1491cf", "additions": 6, "patch": "@@ -48,7 +48,7 @@ class HipChat extends Adapter\n           for user in response.users\n             self.userForId user.user_id, user\n         else\n-          console.log \"Can't list rooms: #{err}\"\n+          console.log \"Can't list users: #{err}\"\n \n     bot.onError (message) ->\n       # If HipChat sends an error, we get the error message from XMPP.\n@@ -59,13 +59,15 @@ class HipChat extends Adapter\n         console.log \"Received error from HipChat:\", message\n \n     bot.onMessage (channel, from, message) ->\n-      author = name: from, reply_to: channel\n+      author = self.userForName from\n+      author.name = from unless author.name\n+      author.reply_to = channel\n       hubot_msg = message.replace(mention, \"#{self.name}: \")\n       self.receive new Robot.TextMessage(author, hubot_msg)\n \n     bot.onPrivateMessage (from, message) =>\n-      user = self.userForId(from.match(/_(\\d+)@/)[1])\n-      author = name: user.name, reply_to: from\n+      author = self.userForId(from.match(/_(\\d+)@/)[1])\n+      author.reply_to = from\n       self.receive new Robot.TextMessage(author, \"#{self.name}: #{message}\")\n \n     bot.connect()", "changes": 10}], "194": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3a09cdea73f1bc396887d63167c34902d099b976/src/adapters/third-party/hipchat.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3a09cdea73f1bc396887d63167c34902d099b976/src/adapters/third-party/hipchat.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/hipchat.coffee?ref=3a09cdea73f1bc396887d63167c34902d099b976", "filename": "src/adapters/third-party/hipchat.coffee", "sha": "6280587f4be658283a5dafb5855ecec3ffe17250", "additions": 2, "patch": "@@ -59,7 +59,8 @@ class HipChat extends Adapter\n         console.log \"Received error from HipChat:\", message\n \n     bot.onMessage (channel, from, message) ->\n-      author = name: from, reply_to: channel\n+      author = self.userForName from\n+      author.reply_to = channel\n       hubot_msg = message.replace(mention, \"#{self.name}: \")\n       self.receive new Robot.TextMessage(author, hubot_msg)\n ", "changes": 3}], "195": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/44dd87eed959d61eca644723143e633b5c915be4/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/44dd87eed959d61eca644723143e633b5c915be4/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=44dd87eed959d61eca644723143e633b5c915be4", "filename": "src/adapters/shell.coffee", "sha": "608ff21809b939e082fa2b710409707c6e264520", "additions": 1, "patch": "@@ -25,6 +25,7 @@ class Shell extends Adapter\n \n     @repl.on \"close\", =>\n       stdin.destroy()\n+      @robot.shutdown()\n       process.exit 0\n \n     @repl.on \"line\", (buffer) =>", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/44dd87eed959d61eca644723143e633b5c915be4/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/44dd87eed959d61eca644723143e633b5c915be4/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=44dd87eed959d61eca644723143e633b5c915be4", "filename": "src/robot.coffee", "sha": "a747cbbcd3cc91175ce19bb7feeb361b90043a2b", "additions": 4, "patch": "@@ -230,6 +230,10 @@ class Robot\n   run: ->\n     @adapter.run()\n \n+  shutdown: ->\n+    @adapter.close()\n+    @brain.close()\n+\n class Robot.Message\n   # Represents an incoming message from the chat.\n   #", "changes": 4}], "196": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/b1997a3c020df9784f687a776faa5a5512150adf/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b1997a3c020df9784f687a776faa5a5512150adf/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=b1997a3c020df9784f687a776faa5a5512150adf", "filename": "src/robot.coffee", "sha": "6942a8ab15e78e3deb6365dcb0216fe837438789", "additions": 1, "patch": "@@ -147,6 +147,7 @@ class Robot\n       @adapter = require(\"#{path}\").use(@)\n     catch err\n       @logger.error \"Cannot load adapter #{adapter}, try installing the package\"\n+      @logger.error \"Reason: #{err}\"\n \n   # Public: Help Commands for Running Scripts\n   #", "changes": 1}], "198": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fde1c06f6178d9b13f4f6ca42bb8877d1f9cbb8d/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/fde1c06f6178d9b13f4f6ca42bb8877d1f9cbb8d/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=fde1c06f6178d9b13f4f6ca42bb8877d1f9cbb8d", "filename": "src/templates/README.md", "sha": "3cfecbd963a017e3f90c24d3da5e816782f739f4", "additions": 4, "patch": "@@ -9,7 +9,10 @@ Playing with Hubot\n ==================\n \n You'll need to install the necessary dependencies for hubot. All of\n-those dependencies are provided by [npm](http://npmjs.org).\n+those dependencies are provided by [npm](http://npmjs.org) except for       \n+Redis server.    \n+Ubuntu: ```sudo apt-get install redis-server```     \n+Then:\n \n     % bin/hubot\n ", "changes": 5}], "199": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/14b9016be7c970369d407fc5bea22c5ed492c992/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/14b9016be7c970369d407fc5bea22c5ed492c992/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=14b9016be7c970369d407fc5bea22c5ed492c992", "filename": "src/scripts/google-images.coffee", "sha": "d3b2b64672f5f9f30386bfe5389ffa192b254232", "additions": 2, "patch": "@@ -17,6 +17,8 @@ module.exports = (robot) ->\n       msg.send url\n \n   robot.respond /(?:mo?u)?sta(?:s|c)he?(?: me)? (.*)/i, (msg) ->\n+    type = Math.floor(Math.random() * 3)\n+    mustachify = \"http://mustachify.me/#{type}?src=\"\n     imagery = msg.match[1]\n \n     if imagery.match /^https?:\\/\\//i\n@@ -25,8 +27,6 @@ module.exports = (robot) ->\n       imageMe msg, imagery, (url) ->\n         msg.send \"#{mustachify}#{url}\"\n \n-mustachify = \"http://mustachify.me/?src=\"\n-\n imageMe = (msg, query, cb) ->\n   msg.http('http://ajax.googleapis.com/ajax/services/search/images')\n     .query(v: \"1.0\", rsz: '8', q: query)", "changes": 4}], "202": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/144570f9e9e0c6a26b1ed4c87031a83b16fcdde9/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/144570f9e9e0c6a26b1ed4c87031a83b16fcdde9/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=144570f9e9e0c6a26b1ed4c87031a83b16fcdde9", "filename": "src/robot.coffee", "sha": "2f96467352610997387031a84b6c078bef57f87e", "additions": 1, "patch": "@@ -297,7 +297,7 @@ class TextListener extends Listener\n   # callback - The Function that is triggered if the incoming message matches.\n   constructor: (@robot, @regex, @callback) ->\n     @matcher = (message) =>\n-      if message instanceof Robot.TextMessage\n+      if message.constructor.name is \"TextMessage\"\n         message.match @regex\n \n class Robot.Response", "changes": 2}], "204": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/a9a2fe3bf8d54a4b02b280ee2c4c500b13abd529/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a9a2fe3bf8d54a4b02b280ee2c4c500b13abd529/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=a9a2fe3bf8d54a4b02b280ee2c4c500b13abd529", "filename": "src/adapters/campfire.coffee", "sha": "883f376b4f4ae33929f49eea86c6f82ad7b3ce1f", "additions": 15, "patch": "@@ -15,6 +15,10 @@ class Campfire extends Adapter\n   reply: (user, strings...) ->\n     @send user, strings.map((str) -> \"#{user.name}: #{str}\")...\n \n+  topic: (user, strings...) ->\n+    @bot.Room(user.room).topic strings.join(\" / \"), (err, data) =>\n+      @robot.logger.error \"Campfire error: #{err}\" if err?\n+\n   run: ->\n     self = @\n \n@@ -108,6 +112,10 @@ class CampfireStreaming extends EventEmitter\n     paste: (text, callback) ->\n       @message text, \"PasteMessage\", callback\n \n+    topic: (text, callback) ->\n+      body = {room: {topic: text}}\n+      self.put \"/room/#{id}\", body, callback\n+\n     sound: (text, callback) ->\n       @message text, \"SoundMessage\", callback\n \n@@ -184,7 +192,12 @@ class CampfireStreaming extends EventEmitter\n   post: (path, body, callback) ->\n     @request \"POST\", path, body, callback\n \n+  put: (path, body, callback) ->\n+    @request \"PUT\", path, body, callback\n+\n   request: (method, path, body, callback) ->\n+    logger = @robot.logger\n+\n     headers =\n       \"Authorization\" : @authorization\n       \"Host\"          : @domain\n@@ -198,7 +211,7 @@ class CampfireStreaming extends EventEmitter\n       \"method\" : method\n       \"headers\": headers\n \n-    if method is \"POST\"\n+    if method is \"POST\" || method is \"PUT\"\n       if typeof(body) isnt \"string\"\n         body = JSON.stringify body\n \n@@ -228,7 +241,7 @@ class CampfireStreaming extends EventEmitter\n         logger.error \"Campfire response error: #{err}\"\n         callback err, { }\n \n-    if method is \"POST\"\n+    if method is \"POST\" || method is \"PUT\"\n       request.end(body, 'binary')\n     else\n       request.end()", "changes": 17}], "206": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/44d58abd8ca9327406a06a6f275174efe9b0d1e2/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/44d58abd8ca9327406a06a6f275174efe9b0d1e2/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=44d58abd8ca9327406a06a6f275174efe9b0d1e2", "filename": "test/tests.coffee", "sha": "b2fca438e0946cf5b63bd855af634fb9b156c109", "additions": 1, "patch": "@@ -22,7 +22,7 @@ exports.danger = (helper, cb) ->\n \n   server.start = (tests, cb) ->\n     server.listen 9001, ->\n-      helper.cb = (messages...) ->\n+      helper.adapter.cb = (messages...) ->\n         tests.shift() messages...\n         server.close() if tests.length == 0\n ", "changes": 2}], "208": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/af6818603c748fe9d25437efa9e91d6ba63d18b9/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/af6818603c748fe9d25437efa9e91d6ba63d18b9/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=af6818603c748fe9d25437efa9e91d6ba63d18b9", "filename": "src/robot.coffee", "sha": "38899c23e2438ad75bcd7bee416c99e7ab087754", "additions": 9, "patch": "@@ -175,6 +175,15 @@ class Robot\n   send: (user, strings...) ->\n     @adapter.send user, strings...\n \n+  # Public: A helper send function to message a room that the robot is in\n+  #\n+  # room    - String designating the room to message\n+  # strings - One or more Strings for each message to send.\n+  messageRoom: (room, strings...) ->\n+    user = @userForId @id, { room: room }\n+    @adapter.send user, strings...\n+\n+\n   # Public: A helper reply function which delegates to the adapter's reply\n   # function.\n   #", "changes": 9}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/af6818603c748fe9d25437efa9e91d6ba63d18b9/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/af6818603c748fe9d25437efa9e91d6ba63d18b9/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=af6818603c748fe9d25437efa9e91d6ba63d18b9", "filename": "test/robot_test.coffee", "sha": "f355690c6c4c8a1e4f1b90002d3c6b910e4ffe4b", "additions": 8, "patch": "@@ -22,9 +22,16 @@ server.listen 9001, ->\n   assert.equal 3, helper.sent.length\n   assert.ok helper.sent[2].match(/^(1|2)$/)\n \n+  # Test that when we message a room, the 'recipient' is the robot user and the room attribute is set properly\n+  helper.messageRoom \"chat@example.com\", \"Hello room\"\n+  assert.equal 4, helper.sent.length\n+  assert.equal \"chat@example.com\", helper.recipients[3].room\n+  assert.equal helper.id, helper.recipients[3].id\n+  assert.equal \"Hello room\", helper.sent[3]\n+\n   # set a callback for when the next message is replied to\n   helper.cb = (msg) ->\n-    assert.equal 4, helper.sent.length\n+    assert.equal 5, helper.sent.length\n     assert.equal 'fetched', msg\n     helper.close()\n     server.close()", "changes": 9}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/af6818603c748fe9d25437efa9e91d6ba63d18b9/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/af6818603c748fe9d25437efa9e91d6ba63d18b9/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=af6818603c748fe9d25437efa9e91d6ba63d18b9", "filename": "test/tests.coffee", "sha": "02fd75a2aba798c74d7e3d3e5502a5fb1316ad86", "additions": 3, "patch": "@@ -35,10 +35,10 @@ class Helper extends Robot\n   constructor: (scriptPath) ->\n     super null, null, 'helper'\n     @load scriptPath\n-\n+    @id = 1\n     @Response = Helper.Response\n     @sent = []\n-\n+    @recipients = []\n     @adapter = new Danger @\n \n   stop: ->\n@@ -50,6 +50,7 @@ class Helper extends Robot\n class Danger extends Adapter\n   send: (user, strings...) ->\n     @robot.sent.push str for str in strings\n+    @robot.recipients.push user for str in strings\n     @cb? strings...\n \n   reply: (user, strings...) ->", "changes": 5}], "209": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/0bd4cfa73399ac7265f99bbba836bc4f6559b5d5/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0bd4cfa73399ac7265f99bbba836bc4f6559b5d5/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=0bd4cfa73399ac7265f99bbba836bc4f6559b5d5", "filename": "src/scripts/roles.coffee", "sha": "0767a46b5a18ae013256cc0543fcfe3dd332f3d3", "additions": 0, "patch": "@@ -55,8 +55,6 @@ module.exports = (robot) ->\n               msg.send \"Ok, #{name} is #{newRole}.\"\n         else if users.length > 1\n           msg.send getAmbiguousUserText users\n-        else\n-          msg.send \"I don't know anything about #{name}.\"\n \n   robot.respond /([\\w .-_]+) is not ([\"'\\w: -_]+)[.!]*$/i, (msg) ->\n     name    = msg.match[1]\n@@ -75,6 +73,4 @@ module.exports = (robot) ->\n           msg.send \"Ok, #{name} is no longer #{newRole}.\"\n       else if users.length > 1\n         msg.send getAmbiguousUserText users\n-      else\n-        msg.send \"I don't know anything about #{name}.\"\n ", "changes": 4}], "210": [{"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/0496c322a0eef7033c1d1b23a05491f9ec51ad01/src/adapters/third-party/gtalk.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0496c322a0eef7033c1d1b23a05491f9ec51ad01/src/adapters/third-party/gtalk.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/third-party/gtalk.coffee?ref=0496c322a0eef7033c1d1b23a05491f9ec51ad01", "filename": "src/adapters/third-party/gtalk.coffee", "sha": "8237b5670c965e742c7a2922fe36277afc755cd6", "additions": 10, "patch": "@@ -7,6 +7,8 @@ class Gtalkbot extends Adapter\n   run: ->\n     Xmpp.JID.prototype.from = -> @bare().toString()\n \n+    @name = 'Hubot'\n+\t\n     # Client Options\n     @options = \n       username: process.env.HUBOT_GTALK_USERNAME\n@@ -28,13 +30,13 @@ class Gtalkbot extends Adapter\n       port: @options.port\n \n     # Events\n-    @client.on 'online', @online\n-    @client.on 'stanza', @readStanza\n-    @client.on 'error', @error\n+    @client.on 'online', => @online()\n+    @client.on 'stanza', (stanza) => @readStanza(stanza)\n+    @client.on 'error', => @error()\n \n   online: ->\n     @client.send new Xmpp.Element('presence')\n-    \n+\n     # He is alive!\n     console.log @name + ' is online, talk.google.com!'\n \n@@ -46,7 +48,7 @@ class Gtalkbot extends Adapter\n \n     # Check for buddy requests every so often\n     @client.send roster_query\n-    setInterval ->\n+    setInterval =>\n       @client.send roster_query\n     , @options.keepaliveInterval\n \n@@ -91,7 +93,8 @@ class Gtalkbot extends Adapter\n     message = if not message.match(new RegExp(\"^\"+@name+\":?\",\"i\")) then @name + \" \" + message else message\n \n     # Send the message to the robot\n-    @receive new Robot.TextMessage @getUser(jid), message\n+    user = @getUser jid\n+    @receive new Robot.TextMessage(user, message)\n \n   handlePresence: (stanza) ->\n     jid = new Xmpp.JID(stanza.attrs.from)\n@@ -187,5 +190,5 @@ class Gtalkbot extends Adapter\n     console.error err\n \n exports.use = (robot) ->\n-  new GtalkBot robot\n+  new Gtalkbot robot\n ", "changes": 17}], "211": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/01bed4ec1d1c1b458060d6319f572c04237d858f/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/01bed4ec1d1c1b458060d6319f572c04237d858f/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=01bed4ec1d1c1b458060d6319f572c04237d858f", "filename": "src/scripts/google-images.coffee", "sha": "97c8498d18149f15932067788f16298e2600ab13", "additions": 3, "patch": "@@ -33,6 +33,7 @@ imageMe = (msg, query, cb) ->\n     .get() (err, res, body) ->\n       images = JSON.parse(body)\n       images = images.responseData.results\n-      image  = msg.random images\n-      cb \"#{image.unescapedUrl}#.png\"\n+      if images.length > 0\n+        image  = msg.random images\n+        cb \"#{image.unescapedUrl}#.png\"\n ", "changes": 5}], "217": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/3d5e8295bbbd30e634592b8232024af9e1fc891f/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3d5e8295bbbd30e634592b8232024af9e1fc891f/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=3d5e8295bbbd30e634592b8232024af9e1fc891f", "filename": "src/scripts/roles.coffee", "sha": "97407c9f5fa94926c4b425e80dee7461a6ab8f98", "additions": 3, "patch": "@@ -13,7 +13,7 @@ module.exports = (robot) ->\n   getAmbiguousUserText = (users) ->\n     \"Be more specific, I know #{users.length} people named like that: #{(user.name for user in users).join(\", \")}\"\n \n-  robot.respond /who is ([\\w .-]+)\\?*$/i, (msg) ->\n+  robot.respond /who is @?([\\w .-]+)\\?*$/i, (msg) ->\n     name = msg.match[1]\n \n     if name is \"you\"\n@@ -34,7 +34,7 @@ module.exports = (robot) ->\n       else\n         msg.send \"#{name}? Never heard of 'em\"\n \n-  robot.respond /([\\w .-_]+) is ([\"'\\w: -_]+)[.!]*$/i, (msg) ->\n+  robot.respond /@?([\\w .-_]+) is ([\"'\\w: -_]+)[.!]*$/i, (msg) ->\n     name    = msg.match[1]\n     newRole = msg.match[2].trim()\n \n@@ -58,7 +58,7 @@ module.exports = (robot) ->\n         else\n           msg.send \"I don't know anything about #{name}.\"\n \n-  robot.respond /([\\w .-_]+) is not ([\"'\\w: -_]+)[.!]*$/i, (msg) ->\n+  robot.respond /@?([\\w .-_]+) is not ([\"'\\w: -_]+)[.!]*$/i, (msg) ->\n     name    = msg.match[1]\n     newRole = msg.match[2].trim()\n ", "changes": 6}], "218": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/6bbf5449a96e5bcffd948f26754d9dc2ebee0b04/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/6bbf5449a96e5bcffd948f26754d9dc2ebee0b04/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=6bbf5449a96e5bcffd948f26754d9dc2ebee0b04", "filename": "CHANGELOG.md", "sha": "a4ccfd4c81f5ae8289f23df3fba76067cff25d2a", "additions": 14, "patch": "@@ -1,3 +1,17 @@\n+v2.1.0\n+======\n+* Introduce Response.finish() to indicate that a message should not be\n+  passed on to any other listeners\n+* Scripts are evaluated in the following order\n+  * `./scripts` is loaded alphabetically\n+  * The contents of `./hubot-scripts.json` is loaded in order\n+\n+    module.exports = (robot) ->\n+      robot.respond /\\s*yo\\s*\\\\?/i, (msg) ->\n+        msg.reply \"Yo!\"\n+        msg.finish()\n+\n+\n v2.0.7\n ======\n * Update topic and logger scoping fixups - Horace Ko", "changes": 14}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6bbf5449a96e5bcffd948f26754d9dc2ebee0b04/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/6bbf5449a96e5bcffd948f26754d9dc2ebee0b04/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=6bbf5449a96e5bcffd948f26754d9dc2ebee0b04", "filename": "package.json", "sha": "8d1bc824a7ac6327ac2359b32fbda0e9ffc07b13", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\":        \"hubot\",\n-  \"version\":     \"2.0.7\",\n+  \"version\":     \"2.1.0\",\n   \"author\":      \"hubot\",\n   \"keywords\":    \"github hubot campfire bot\",\n   \"description\": \"A simple helpful Robot for your Company\",", "changes": 2}, {"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/6bbf5449a96e5bcffd948f26754d9dc2ebee0b04/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/6bbf5449a96e5bcffd948f26754d9dc2ebee0b04/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=6bbf5449a96e5bcffd948f26754d9dc2ebee0b04", "filename": "src/robot.coffee", "sha": "eca73cbcb7ab5283039cfcebae427353d08edfe0", "additions": 21, "patch": "@@ -84,15 +84,18 @@ class Robot\n \n   # Public: Passes the given message to any interested Listeners.\n   #\n-  # message - A Robot.Message instance.\n+  # message - A Robot.Message instance. Listeners can flag this message as\n+  #  'done' to prevent further execution\n   #\n   # Returns nothing.\n   receive: (message) ->\n-    for lst in @listeners\n-      try\n-        lst.call message\n-      catch ex\n-        @logger.error \"Unable to call the listener: #{ex}\"\n+    for listener in @listeners\n+      unless message.done\n+        try\n+          listener.call message\n+        catch ex\n+          @logger.error \"Unable to call the listener: #{ex}\"\n+\n \n   # Public: Loads every script in the given path.\n   #\n@@ -248,7 +251,11 @@ class Robot.Message\n   # Represents an incoming message from the chat.\n   #\n   # user - A User instance that sent the message.\n-  constructor: (@user) ->\n+  constructor: (@user, @done = false) ->\n+\n+  # Indicates that no other Listener should be called on this object\n+  finish: () ->\n+    @done = true\n \n class Robot.TextMessage extends Robot.Message\n   # Represents an incoming message from the chat.\n@@ -351,10 +358,16 @@ class Robot.Response\n   #\n   # items - An Array of items (usually Strings).\n   #\n-  # Returns a random item.\n+  # Returns an random item.\n   random: (items) ->\n     items[ Math.floor(Math.random() * items.length) ]\n \n+  # Public: Tell the message to stop dispatching to listeners\n+  #\n+  # Returns nothing.\n+  finish: () ->\n+    @message.finish()\n+\n   # Public: Creates a scoped http client with chainable methods for\n   # modifying the request.  This doesn't actually make a request though.\n   # Once your request is assembled, you can call `get()`/`post()`/etc to", "changes": 29}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6bbf5449a96e5bcffd948f26754d9dc2ebee0b04/src/templates/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/6bbf5449a96e5bcffd948f26754d9dc2ebee0b04/src/templates/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/package.json?ref=6bbf5449a96e5bcffd948f26754d9dc2ebee0b04", "filename": "src/templates/package.json", "sha": "b6f02a8118dad5c7351fcca246b10951655d04e7", "additions": 1, "patch": "@@ -15,7 +15,7 @@\n   },\n \n   \"dependencies\": {\n-    \"hubot\": \"2.0.7\",\n+    \"hubot\": \"2.1.0\",\n     \"hubot-scripts\": \"2.0.2\",\n     \"optparse\": \"1.0.3\"\n   }", "changes": 2}], "219": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d780392a1a3743979505a229b16ea63c11fc1ad7/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/d780392a1a3743979505a229b16ea63c11fc1ad7/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=d780392a1a3743979505a229b16ea63c11fc1ad7", "filename": "README.md", "sha": "6e15a7f4e9d0e957320cf25f56c4fb55a8ba5a97", "additions": 17, "patch": "@@ -49,6 +49,23 @@ individual scripts.\n [hubot-scripts]: https://github.com/github/hubot-scripts\n [hubot-scripts-readme]: https://github.com/github/hubot-scripts#readme\n \n+## HTTP Listener\n+\n+Hubot has a HTTP listener which listens on the port specified by the `PORT`\n+environment variable.\n+\n+You can specify routes to listen on in your scripts by using the `router`\n+property on `robot`.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.router.get \"/hubot/version\", (req, res) ->\n+    res.end robot.version\n+```\n+\n+There are functions for GET, POST, PUT and DELETE, which all take a route and\n+callback function that accepts a request and a response.\n+\n ## Testing hubot locally\n \n Install all of the required dependencies by running `npm install`.", "changes": 17}, {"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/d780392a1a3743979505a229b16ea63c11fc1ad7/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/d780392a1a3743979505a229b16ea63c11fc1ad7/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=d780392a1a3743979505a229b16ea63c11fc1ad7", "filename": "bin/hubot", "sha": "6d7a86d10860fd9fc9f64e89327fb06c1d29b8a6", "additions": 10, "patch": "@@ -19,6 +19,7 @@ Switches = [\n   [ \"-s\", \"--enable-slash\",    \"Enable replacing the robot's name with '/' (deprecated)\" ],\n   [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n   [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n+  [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n   [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n ]\n \n@@ -28,6 +29,7 @@ Options =\n   create: false\n   adapter: \"shell\"\n   alias: false\n+  enableHttpd: true\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n@@ -49,6 +51,9 @@ Parser.on \"enable-slash\", (opt) ->\n Parser.on \"alias\", (opt, value) ->\n   Options.alias = value\n \n+Parser.on \"disable-httpd\", (opt) ->\n+  Options.enableHttpd = false\n+\n Parser.on \"help\", (opt, value) ->\n   console.log Parser.toString()\n   process.exit 0\n@@ -66,22 +71,15 @@ if Options.create\n   creator = new Creator.Creator(Options.path)\n   creator.run()\n \n-else if Options.version\n-  package_path = __dirname + \"/../package.json\"\n-\n-  Fs.readFile package_path, (err,data) ->\n-    if err\n-      console.error \"Could not open package file : %s\", err\n-      process.exit 1\n+else\n+  adapterPath = Path.resolve __dirname, \"..\", \"src\", \"adapters\"\n \n-    content = JSON.parse(data.toString('ascii'))\n-    console.log content['version']\n+  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name\n \n+  if Options.version\n+    console.log robot.version\n     process.exit 0\n \n-else\n-  adapterPath = Path.resolve __dirname, \"..\", \"src\", \"adapters\"\n-  robot = Hubot.loadBot adapterPath, Options.adapter, Options.name\n   robot.enableSlash = Options.enableSlash\n   robot.alias = Options.alias\n ", "changes": 22}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/d780392a1a3743979505a229b16ea63c11fc1ad7/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d780392a1a3743979505a229b16ea63c11fc1ad7/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=d780392a1a3743979505a229b16ea63c11fc1ad7", "filename": "index.coffee", "sha": "909582acc78f53c95a836e052e70830f36bbf037", "additions": 2, "patch": "@@ -4,9 +4,9 @@\n #     YourBot = Hubot.robot 'campfire', 'yourbot'\n \n # Loads a Hubot robot\n-exports.loadBot = (adapterPath, adapterName, botName) ->\n+exports.loadBot = (adapterPath, adapterName, enableHttpd, botName) ->\n   robot = require './src/robot'\n-  new robot adapterPath, adapterName, botName\n+  new robot adapterPath, adapterName, enableHttpd, botName\n \n exports.robot = ->\n   require './src/robot'", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d780392a1a3743979505a229b16ea63c11fc1ad7/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/d780392a1a3743979505a229b16ea63c11fc1ad7/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=d780392a1a3743979505a229b16ea63c11fc1ad7", "filename": "package.json", "sha": "915bc5e253eb2562c93359a945771b8c2ee7ba47", "additions": 2, "patch": "@@ -18,7 +18,8 @@\n     \"coffee-script\": \"1.2.0\",\n     \"optparse\": \"1.0.3\",\n     \"scoped-http-client\": \"0.9.6\",\n-    \"log\": \"1.2.0\"\n+    \"log\": \"1.2.0\",\n+    \"connect\": \"1.8.5\"\n   },\n \n   \"main\": \"./index\",", "changes": 3}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d780392a1a3743979505a229b16ea63c11fc1ad7/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d780392a1a3743979505a229b16ea63c11fc1ad7/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=d780392a1a3743979505a229b16ea63c11fc1ad7", "filename": "src/adapters/shell.coffee", "sha": "65ce768347c438600786bdc18a6a7282430c3b5e", "additions": 1, "patch": "@@ -31,7 +31,7 @@ class Shell extends Adapter\n     @repl.on \"line\", (buffer) =>\n       @repl.close() if buffer.toLowerCase() is \"exit\"\n       @repl.prompt()\n-      user = @userForId '1', name: \"Shell\"\n+      user = @userForId '1', name: \"Shell\", room: \"Shell\"\n       @receive new Robot.TextMessage user, buffer\n \n     @repl.setPrompt \"#{@robot.name}> \"", "changes": 2}, {"status": "modified", "deletions": 11, "raw_url": "https://github.com/hubotio/hubot/raw/d780392a1a3743979505a229b16ea63c11fc1ad7/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d780392a1a3743979505a229b16ea63c11fc1ad7/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=d780392a1a3743979505a229b16ea63c11fc1ad7", "filename": "src/robot.coffee", "sha": "d792614df7a713d3ac9847679d520568f9ac886e", "additions": 75, "patch": "@@ -1,10 +1,11 @@\n-Fs           = require 'fs'\n-Log          = require 'log'\n-Path         = require 'path'\n-Url          = require 'url'\n+Fs      = require 'fs'\n+Url     = require 'url'\n+Log     = require 'log'\n+Path    = require 'path'\n+Connect = require 'connect'\n \n-Brain        = require './brain'\n-User         = require './user'\n+User    = require './user'\n+Brain   = require './brain'\n \n HUBOT_DEFAULT_ADAPTERS = [ \"campfire\", \"shell\" ]\n \n@@ -13,7 +14,7 @@ class Robot\n   # dispatch them to matching listeners.\n   #\n   # path - String directory full of Hubot scripts to load.\n-  constructor: (adapterPath, adapter, name = \"Hubot\") ->\n+  constructor: (adapterPath, adapter, httpd, name = \"Hubot\") ->\n     @name        = name\n     @brain       = new Brain\n     @alias       = false\n@@ -23,11 +24,21 @@ class Robot\n     @listeners   = []\n     @loadPaths   = []\n     @enableSlash = false\n-\n     @logger      = new Log process.env.HUBOT_LOG_LEVEL or \"info\"\n \n+    @parseVersion()\n+    @setupConnect() if httpd\n     @loadAdapter adapterPath, adapter if adapter?\n \n+  # Public: Specify a router and callback to register as Connect middleware.\n+  #\n+  # route    - A String of the route to match.\n+  # callback - A Function that is called when the route is requested\n+  #\n+  # Returns nothing.\n+  route: (route, callback) ->\n+    @router.get route, callback\n+\n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n   #\n@@ -132,14 +143,50 @@ class Robot\n     for script in scripts\n       @loadFile path, script\n \n+  # Setup the Connect server's defaults\n+  #\n+  # Sets up basic authentication if parameters are provided\n+  #\n+  # Returns: nothing.\n+  setupConnect: ->\n+    user = process.env.CONNECT_USER\n+    pass = process.env.CONNECT_PASSWORD\n+\n+    @connect = Connect()\n+\n+    if user and pass\n+      @connect.use Connect.basicAuth(user, path)\n+\n+    @connect.use Connect.bodyParser()\n+    @connect.use Connect.router (app) =>\n+\n+      @router =\n+        get: (route, callback) =>\n+          @logger.debug \"Registered route: GET #{route}\"\n+          app.get route, callback\n+\n+        post: (route, callback) =>\n+          @logger.debug \"Registered route: POST #{route}\"\n+          app.post route, callback\n+\n+        put: (route, callback) =>\n+          @logger.debug \"Registered route: PUT #{route}\"\n+          app.put route, callback\n+\n+        delete: (route, callback) =>\n+          @logger.debug \"Registered route: DELETE #{route}\"\n+          app.delete route, callback\n+\n+    @connect.listen process.env.PORT || 8080\n+\n   # Load the adapter Hubot is going to use.\n   #\n   # path    - A String of the path to adapter if local.\n   # adapter - A String of the adapter name to use.\n   #\n   # Returns nothing.\n   loadAdapter: (path, adapter) ->\n-    @logger.info \"Loading adapter #{adapter}\"\n+    @logger.debug \"Loading adapter #{adapter}\"\n \n     try\n       path = if adapter in HUBOT_DEFAULT_ADAPTERS\n@@ -240,21 +287,38 @@ class Robot\n \n     matchedUsers\n \n+  # Kick off the event loop for the adapter\n+  #\n+  # Returns: Nothing.\n   run: ->\n     @adapter.run()\n \n+  # Public: Gracefully shutdown the robot process\n+  #\n+  # Returns: Nothing.\n   shutdown: ->\n     @adapter.close()\n     @brain.close()\n \n+  # Public: The version of Hubot from npm\n+  #\n+  # Returns: SemVer compliant version number\n+  parseVersion: ->\n+    package_path = __dirname + \"/../package.json\"\n+\n+    data = Fs.readFileSync package_path, 'utf8'\n+\n+    content = JSON.parse data\n+    @version = content.version\n+\n class Robot.Message\n   # Represents an incoming message from the chat.\n   #\n   # user - A User instance that sent the message.\n   constructor: (@user, @done = false) ->\n \n   # Indicates that no other Listener should be called on this object\n-  finish: () ->\n+  finish: ->\n     @done = true\n \n class Robot.TextMessage extends Robot.Message\n@@ -365,7 +429,7 @@ class Robot.Response\n   # Public: Tell the message to stop dispatching to listeners\n   #\n   # Returns nothing.\n-  finish: () ->\n+  finish: ->\n     @message.finish()\n \n   # Public: Creates a scoped http client with chainable methods for", "changes": 86}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d780392a1a3743979505a229b16ea63c11fc1ad7/src/scripts/httpd.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d780392a1a3743979505a229b16ea63c11fc1ad7/src/scripts/httpd.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/httpd.coffee?ref=d780392a1a3743979505a229b16ea63c11fc1ad7", "filename": "src/scripts/httpd.coffee", "sha": "5a5cace49948be6bb1a2e0e81fc16a0cf6b909d9", "additions": 16, "patch": "@@ -0,0 +1,16 @@\n+# A simple interaction with the built in HTTP Daemon\n+spawn = require('child_process').spawn\n+\n+module.exports = (robot) ->\n+  robot.router.get \"/hubot/version\", (req, res) ->\n+    res.end robot.version\n+  robot.router.post \"/hubot/ping\", (req, res) ->\n+    res.end \"PONG\"\n+  robot.router.get \"/hubot/time\", (req, res) ->\n+    res.end \"Server time is: #{new Date()}\"\n+  robot.router.get \"/hubot/info\", (req, res) ->\n+    child = spawn('/bin/sh', ['-c', \"echo I\\\\'m $LOGNAME@$(hostname):$(pwd) \\\\($(git rev-parse HEAD)\\\\)\"])\n+\n+    child.stdout.on 'data', (data) ->\n+      res.end \"#{data.toString().trim()} running node #{process.version} [pid: #{process.pid}]\"\n+      child.stdin.end()", "changes": 16}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d780392a1a3743979505a229b16ea63c11fc1ad7/src/templates/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/d780392a1a3743979505a229b16ea63c11fc1ad7/src/templates/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/Procfile?ref=d780392a1a3743979505a229b16ea63c11fc1ad7", "filename": "src/templates/Procfile", "sha": "cf99af3140a32aa0c96da110532973b53c479663", "additions": 1, "patch": "@@ -1 +1 @@\n-app: bin/hubot -a campfire -n Hubot\n+web: bin/hubot -a campfire -n Hubot", "changes": 2}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d780392a1a3743979505a229b16ea63c11fc1ad7/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/d780392a1a3743979505a229b16ea63c11fc1ad7/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=d780392a1a3743979505a229b16ea63c11fc1ad7", "filename": "src/templates/README.md", "sha": "8bb01f52dfdcb59cb90e16e57cdf9b17f453aa95", "additions": 17, "patch": "@@ -13,6 +13,23 @@ those dependencies are provided by [npm][npmjs].\n \n [npmjs]: http://npmjs.org\n \n+## HTTP Listener\n+\n+Hubot has a HTTP listener which listens on the port specified by the `PORT`\n+environment variable.\n+\n+You can specify routes to listen on in your scripts by using the `router`\n+property on `robot`.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.router.get \"/hubot/version\", (req, res) ->\n+    res.end robot.version\n+```\n+\n+There are functions for GET, POST, PUT and DELETE, which all take a route and\n+callback function that accepts a request and a response.\n+\n ### Redis\n \n If you are going to use the `redis-brain.coffee` script from `hubot-scripts`", "changes": 17}], "220": [{"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c", "filename": "bin/hubot", "sha": "89ed413cdb6aaa210da8d2e22c53af0347fbda5e", "additions": 18, "patch": "@@ -1,4 +1,5 @@\n #!/usr/bin/env coffee\n+# -*- mode:coffee -*-\n ##\n # hubot [options]\n #\n@@ -30,13 +31,17 @@ Options =\n   adapter: \"shell\"\n   alias: false\n   enableHttpd: true\n+  waitForAdapter: false\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n \n Parser.on \"adapter\", (opt, value) ->\n   Options.adapter = value\n \n+Parser.on \"wait-for-adapter\", (opt) ->\n+  Options.waitForAdapter = true\n+\n Parser.on \"name\", (opt, value) ->\n   Options.name = value\n \n@@ -83,22 +88,23 @@ else\n   robot.enableSlash = Options.enableSlash\n   robot.alias = Options.alias\n \n-  scriptsFile = Path.resolve \"hubot-scripts.json\"\n-  Path.exists scriptsFile, (exists) =>\n-    if exists\n-      Fs.readFile scriptsFile, (err, data) ->\n-        scripts = JSON.parse data\n-        scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n-        robot.loadHubotScripts scriptsPath, scripts\n+  loadScripts = ->\n+    scriptsPath = Path.resolve \".\", \"scripts\"\n+    robot.load scriptsPath\n \n-  scriptsPath = Path.resolve \".\", \"scripts\"\n-  robot.load scriptsPath\n+    scriptsPath = Path.resolve \"src\", \"scripts\"\n+    robot.load scriptsPath\n \n-  scriptsPath = Path.resolve \"src\", \"scripts\"\n-  robot.load scriptsPath\n+    scriptsFile = Path.resolve \"hubot-scripts.json\"\n+    Path.exists scriptsFile, (exists) =>\n+      if exists\n+        Fs.readFile scriptsFile, (err, data) ->\n+          scripts = JSON.parse data\n+          scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n+          robot.loadHubotScripts scriptsPath, scripts\n \n+  robot.adapter.on 'connected', loadScripts\n \n   robot.run()\n \n # vim:ft=coffee ts=2 sw=2 et :\n-", "changes": 30}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c", "filename": "src/adapter.coffee", "sha": "30a5cb89936d02b58c4dfd07423c43eebd5ffd82", "additions": 2, "patch": "@@ -1,6 +1,7 @@\n Robot      = require './robot'\n+event     = require 'events'\n \n-class Adapter\n+class Adapter extends event.EventEmitter\n   # An adapter is a specific interface to a chat source for robots.\n   #\n   # robot - A Robot instance.", "changes": 3}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c", "filename": "src/adapters/campfire.coffee", "sha": "6fb558631f44061683906433d59ec4f06cac2edc", "additions": 2, "patch": "@@ -65,6 +65,8 @@ class Campfire extends Adapter\n \n     @bot = bot\n \n+    self.emit \"connected\"\n+\n exports.use = (robot) ->\n   new Campfire robot\n \n@@ -247,4 +249,3 @@ class CampfireStreaming extends EventEmitter\n \n     request.on \"error\", (err) ->\n       logger.error \"Campfire request error: #{err}\"\n-", "changes": 3}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=ee8a29e42d4edc7fbcb3b388dab29c58f90a8d7c", "filename": "src/adapters/shell.coffee", "sha": "9007c359e488be1cf617776785e7386dc43393b9", "additions": 1, "patch": "@@ -34,9 +34,9 @@ class Shell extends Adapter\n       user = @userForId '1', name: \"Shell\", room: \"Shell\"\n       @receive new Robot.TextMessage user, buffer\n \n+    self.emit \"connected\"\n     @repl.setPrompt \"#{@robot.name}> \"\n     @repl.prompt()\n \n exports.use = (robot) ->\n   new Shell robot\n-", "changes": 2}], "221": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4", "filename": "src/scripts/google-images.coffee", "sha": "505dbcb31764f59490021086272bb187ae5d682a", "additions": 3, "patch": "@@ -15,8 +15,10 @@ module.exports = (robot) ->\n   robot.respond /animate me (.*)/i, (msg) ->\n     imageMe msg, \"animated #{msg.match[1]}\", (url) ->\n       msg.send url\n+      msg.finish()\n \n   robot.respond /(?:mo?u)?sta(?:s|c)he?(?: me)? (.*)/i, (msg) ->\n+    msg.finish()\n     type = Math.floor(Math.random() * 3)\n     mustachify = \"http://mustachify.me/#{type}?src=\"\n     imagery = msg.match[1]\n@@ -28,6 +30,7 @@ module.exports = (robot) ->\n         msg.send \"#{mustachify}#{url}\"\n \n imageMe = (msg, query, cb) ->\n+  msg.finish()\n   msg.http('http://ajax.googleapis.com/ajax/services/search/images')\n     .query(v: \"1.0\", rsz: '8', q: query)\n     .get() (err, res, body) ->", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4", "filename": "src/scripts/help.coffee", "sha": "fde5018484361295247ba0ecfddf663b8577965c", "additions": 1, "patch": "@@ -7,6 +7,7 @@\n \n module.exports = (robot) ->\n   robot.respond /help\\s*(.*)?$/i, (msg) ->\n+    msg.finish()\n     cmds = robot.helpCommands()\n     if msg.match[1]\n       cmds = cmds.filter (cmd) -> cmd.match(new RegExp(msg.match[1]))", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/maps.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/maps.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/maps.coffee?ref=8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4", "filename": "src/scripts/maps.coffee", "sha": "95e03b8fddee40b4cc7c1bc13830403302cb0b3c", "additions": 1, "patch": "@@ -5,6 +5,7 @@\n module.exports = (robot) ->\n \n   robot.respond /(?:(satellite|terrain|hybrid)[- ])?map me (.+)/i, (msg) ->\n+    msg.finish()\n     mapType  = msg.match[1] or \"roadmap\"\n     location = msg.match[2]\n     mapUrl   = \"http://maps.google.com/maps/api/staticmap?markers=\" +", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4", "filename": "src/scripts/math.coffee", "sha": "b7ba7577fd3a62fe1bdd4f4c87e2db1e730f686d", "additions": 1, "patch": "@@ -4,6 +4,7 @@\n # convert me <expression> to <units> - Convert expression to given units.\n module.exports = (robot) ->\n   robot.respond /(calc|calculate|convert|math)( me)? (.*)/i, (msg) ->\n+    msg.finish()\n     msg\n       .http('http://www.google.com/ig/calculator')\n       .query", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/ping.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/ping.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/ping.coffee?ref=8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4", "filename": "src/scripts/ping.coffee", "sha": "3ca8e61957a4796979fdfafe58de45b8fb72e756", "additions": 1, "patch": "@@ -4,6 +4,7 @@ module.exports = (robot) ->\n     msg.send \"PONG\"\n \n   robot.respond /ECHO (.*)$/i, (msg) ->\n+    msg.finish()\n     msg.send msg.match[1]\n \n   robot.respond /TIME$/i, (msg) ->", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/pugme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/pugme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/pugme.coffee?ref=8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4", "filename": "src/scripts/pugme.coffee", "sha": "7c7d245d36511378c38a77aebee23aa0640ba23e", "additions": 3, "patch": "@@ -6,17 +6,20 @@\n module.exports = (robot) ->\n \n   robot.respond /pug me/i, (msg) ->\n+    msg.finish()\n     msg.http(\"http://pugme.herokuapp.com/random\")\n       .get() (err, res, body) ->\n         msg.send JSON.parse(body).pug\n \n   robot.respond /pug bomb( (\\d+))?/i, (msg) ->\n+    msg.finish()\n     count = msg.match[2] || 5\n     msg.http(\"http://pugme.herokuapp.com/bomb?count=\" + count)\n       .get() (err, res, body) ->\n         msg.send pug for pug in JSON.parse(body).pugs\n \n   robot.respond /how many pugs are there/i, (msg) ->\n+    msg.finish()\n     msg.http(\"http://pugme.herokuapp.com/count\")\n       .get() (err, res, body) ->\n         msg.send \"There are #{JSON.parse(body).pug_count} pugs.\"", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4", "filename": "src/scripts/roles.coffee", "sha": "b0a9838db7dc2e8024050ebfcd22b9d1953b48b1", "additions": 3, "patch": "@@ -27,6 +27,7 @@ module.exports = (robot) ->\n         user.roles = user.roles or [ ]\n         if user.roles.length > 0\n           msg.send \"#{name} is #{user.roles.join(\", \")}.\"\n+          msg.finish()\n         else\n           msg.send \"#{name} is nothing to me.\"\n       else if users.length > 1\n@@ -45,6 +46,7 @@ module.exports = (robot) ->\n           user = users[0]\n           user.roles = user.roles or [ ]\n \n+          msg.finish()\n           if newRole in user.roles\n             msg.send \"I know\"\n           else\n@@ -68,6 +70,7 @@ module.exports = (robot) ->\n         user = users[0]\n         user.roles = user.roles or [ ]\n \n+        msg.finish()\n         if newRole not in user.roles\n           msg.send \"I know.\"\n         else", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/rules.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/rules.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/rules.coffee?ref=8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4", "filename": "src/scripts/rules.coffee", "sha": "7d7857f50956aa29f997763ce535385451f41c62", "additions": 1, "patch": "@@ -22,4 +22,5 @@ module.exports = (robot) ->\n       msg.send otherRules.join('\\n')\n     else\n       msg.send rules.join('\\n')\n+    msg.finish()\n ", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4", "filename": "src/scripts/translate.coffee", "sha": "8d2a34c7b22df2fa043c6d6669403a8106732fef", "additions": 1, "patch": "@@ -70,6 +70,7 @@ module.exports = (robot) ->\n     origin = if msg.match[1] isnt undefined then getCode(msg.match[1], languages) else 'auto'\n     target = if msg.match[2] isnt undefined then getCode(msg.match[2], languages) else 'en'\n     \n+    msg.finish()\n     msg.http(\"http://translate.google.com/translate_a/t\")\n       .query({\n         client: 't'", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/youtube.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4/src/scripts/youtube.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/youtube.coffee?ref=8b0be7cc3927d36fd83cdde74ea5c3bb1b1248d4", "filename": "src/scripts/youtube.coffee", "sha": "f40b5746e68bd361875f280105a1b5a67747afb5", "additions": 1, "patch": "@@ -4,6 +4,7 @@\n #                      embed link.\n module.exports = (robot) ->\n   robot.respond /(youtube|yt)( me)? (.*)/i, (msg) ->\n+    msg.finish()\n     query = msg.match[3]\n     msg.http(\"http://gdata.youtube.com/feeds/api/videos\")\n       .query({", "changes": 1}], "224": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3a9883cbb0db6a3ba7df92e24cde680d2b19c6cb/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3a9883cbb0db6a3ba7df92e24cde680d2b19c6cb/src/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=3a9883cbb0db6a3ba7df92e24cde680d2b19c6cb", "filename": "src/scripts/translate.coffee", "sha": "877d5193e4b429099e3786ba8c38a0368f460fb0", "additions": 1, "patch": "@@ -83,6 +83,7 @@ module.exports = (robot) ->\n         uptl: \"en\"\n         text: term\n       })\n+      .header('User-Agent', 'Mozilla/5.0')\n       .get() (err, res, body) ->\n         data   = body\n         if data.length > 4 && data[0] == '['", "changes": 1}], "228": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002", "filename": "src/robot.coffee", "sha": "c5170d9907933ad5aadbc5d2ebefa7ea8e6b8209", "additions": 24, "patch": "@@ -93,19 +93,31 @@ class Robot\n   leave: (callback) ->\n     @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.LeaveMessage), callback)\n \n+\n+  # Public: Adds a Listener that triggers when no other text matchers match.\n+  #\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  catchall: (callback) ->\n+    @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.CatchAllMessage), ((msg) -> msg.message = msg.message.message; callback msg))\n+\n   # Public: Passes the given message to any interested Listeners.\n   #\n   # message - A Robot.Message instance. Listeners can flag this message as\n   #  'done' to prevent further execution\n   #\n   # Returns nothing.\n   receive: (message) ->\n-    for listener in @listeners\n+    results = for listener in @listeners\n       try\n         listener.call message\n         break if message.done\n       catch ex\n         @logger.error \"Unable to call the listener: #{ex}\"\n+        false\n+    if message not instanceof Robot.CatchAllMessage and results.indexOf(true) is -1\n+      @receive new Robot.CatchAllMessage(message)\n \n \n   # Public: Loads every script in the given path.\n@@ -347,6 +359,12 @@ class Robot.EnterMessage extends Robot.Message\n # user - A User instance for the user who left.\n class Robot.LeaveMessage extends Robot.Message\n \n+class Robot.CatchAllMessage extends Robot.Message\n+  # Represents a message that no matchers matched.\n+  #\n+  # message - The original message.\n+  constructor: (@message) ->\n+\n class Listener\n   # Listeners receive every message from the chat source and decide if they\n   # want to act on it.\n@@ -363,10 +381,13 @@ class Listener\n   #\n   # message - a Robot.Message instance.\n   #\n-  # Returns nothing.\n+  # Returns a boolean of whether the matcher matched.\n   call: (message) ->\n     if match = @matcher message\n-      @callback new @robot.Response(@robot, message, match) \n+      @callback new @robot.Response(@robot, message, match)\n+      true\n+    else\n+      false\n \n class TextListener extends Listener\n   # TextListeners receive every message from the chat source and decide if they want", "changes": 27}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002", "filename": "test/robot_test.coffee", "sha": "f811296ae9ef8e7734b3110d243e2294cb123af9", "additions": 8, "patch": "@@ -7,7 +7,7 @@ server = require('http').createServer (req, res) ->\n   res.end \"fetched\"\n \n server.listen 9001, ->\n-  assert.equal 4, helper.listeners.length\n+  assert.equal 5, helper.listeners.length\n   assert.equal 0, helper.sent.length\n \n   helper.adapter.receive 'test'\n@@ -22,16 +22,22 @@ server.listen 9001, ->\n   assert.equal 3, helper.sent.length\n   assert.ok helper.sent[2].match(/^(1|2)$/)\n \n+\n   # Test that when we message a room, the 'recipient' is the robot user and the room attribute is set properly\n   helper.messageRoom \"chat@example.com\", \"Hello room\"\n   assert.equal 4, helper.sent.length\n   assert.equal \"chat@example.com\", helper.recipients[3].room\n   assert.equal helper.id, helper.recipients[3].id\n   assert.equal \"Hello room\", helper.sent[3]\n \n+  helper.adapter.receive 'foobar'\n+  assert.equal 5, helper.sent.length\n+  assert.equal 'catch-all', helper.sent[4]\n+\n+\n   # set a callback for when the next message is replied to\n   helper.cb = (msg) ->\n-    assert.equal 5, helper.sent.length\n+    assert.equal 6, helper.sent.length\n     assert.equal 'fetched', msg\n     helper.close()\n     server.close()", "changes": 10}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002/test/scripts/test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002/test/scripts/test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/scripts/test.coffee?ref=e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002", "filename": "test/scripts/test.coffee", "sha": "13699b29c31072152672fa4f3c616f0913ccac4d", "additions": 2, "patch": "@@ -16,3 +16,5 @@ module.exports = (robot) ->\n       .get() (err, res, body) ->\n         msg.send body\n \n+  robot.catchall (msg) ->\n+    msg.send 'catch-all' if msg.message.text is 'foobar'", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=e5edc0f8cb1a0d6233d3df4e5ca48c9e5e8a8002", "filename": "test/tests.coffee", "sha": "921073c03321c683396ee40de2bf3e5fb4339d76", "additions": 5, "patch": "@@ -57,8 +57,11 @@ class Danger extends Adapter\n     @send user, \"#{@robot.name}: #{str}\" for str in strings\n \n   receive: (text) ->\n-    user = new User 1, 'helper'\n-    super new Robot.TextMessage user, text\n+    if typeof text is 'string'\n+      user = new User 1, 'helper'\n+      super new Robot.TextMessage user, text\n+    else\n+      super text\n \n if not process.env.HUBOT_LIVE\n   class Helper.Response extends Robot.Response", "changes": 7}], "229": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/2d89b0a25edbd8cd1505fa7b0d97df04baef410f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2d89b0a25edbd8cd1505fa7b0d97df04baef410f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=2d89b0a25edbd8cd1505fa7b0d97df04baef410f", "filename": "src/robot.coffee", "sha": "186b949774dd4712eecc03f83da8d3896229d08e", "additions": 3, "patch": "@@ -109,9 +109,10 @@ class Robot\n   #\n   # Returns nothing.\n   receive: (message) ->\n-    results = for listener in @listeners\n+    results = []\n+    for listener in @listeners\n       try\n-        listener.call message\n+        results.push listener.call(message)\n         break if message.done\n       catch ex\n         @logger.error \"Unable to call the listener: #{ex}\"", "changes": 5}, {"status": "modified", "deletions": 9, "raw_url": "https://github.com/hubotio/hubot/raw/2d89b0a25edbd8cd1505fa7b0d97df04baef410f/test/google_images_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2d89b0a25edbd8cd1505fa7b0d97df04baef410f/test/google_images_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/google_images_test.coffee?ref=2d89b0a25edbd8cd1505fa7b0d97df04baef410f", "filename": "test/google_images_test.coffee", "sha": "10f901765357e730c941567525fd6b761b2ae304", "additions": 15, "patch": "@@ -1,7 +1,7 @@\n Tests  = require './tests'\n assert = require 'assert'\n helper = Tests.helper()\n-\n+Robot  = require '../src/robot'\n require('../src/scripts/google-images') helper\n \n # start up a danger room for google images\n@@ -28,14 +28,20 @@ tests = [\n ]\n \n # run the async tests\n+messages = [\n+  'helper: stache me foo',\n+  'helper: stache foo',\n+  'helper: mustache me foo',\n+  'helper: mustache foo',\n+  'helper: img foo',\n+  'helper: image me foo',\n+  'helper: image foo',\n+  'helper: animate me foo'\n+]\n+user = {}\n danger.start tests, ->\n-  helper.receive 'helper: stache me foo'\n-  helper.receive 'helper: stache foo'\n-  helper.receive 'helper: mustache me foo'\n-  helper.receive 'helper: mustache foo'\n-  helper.receive 'helper: img foo'\n-  helper.receive 'helper: image me foo'\n-  helper.receive 'helper: image foo'\n-  helper.receive 'helper: animate me foo'\n+  for message in messages\n+    helper.receive new Robot.TextMessage user, message\n+\n   helper.stop()\n ", "changes": 24}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/2d89b0a25edbd8cd1505fa7b0d97df04baef410f/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2d89b0a25edbd8cd1505fa7b0d97df04baef410f/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=2d89b0a25edbd8cd1505fa7b0d97df04baef410f", "filename": "test/robot_test.coffee", "sha": "78fa39165d296d9c76b31512c9b3bcf6fa916874", "additions": 1, "patch": "@@ -1,6 +1,7 @@\n Tests  = require './tests'\n assert = require 'assert'\n helper = Tests.helper()\n+require './scripts/test'\n \n server = require('http').createServer (req, res) ->\n   res.writeHead 200", "changes": 1}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/2d89b0a25edbd8cd1505fa7b0d97df04baef410f/test/scripts/test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2d89b0a25edbd8cd1505fa7b0d97df04baef410f/test/scripts/test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/scripts/test.coffee?ref=2d89b0a25edbd8cd1505fa7b0d97df04baef410f", "filename": "test/scripts/test.coffee", "sha": "c5e96f68fc3e925371c834a1e86cdc7f3c2890be", "additions": 1, "patch": "@@ -17,4 +17,4 @@ module.exports = (robot) ->\n         msg.send body\n \n   robot.catchall (msg) ->\n-    msg.send 'catch-all' if msg.message.text is 'foobar'\n+    msg.send 'catch-all'", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/2d89b0a25edbd8cd1505fa7b0d97df04baef410f/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2d89b0a25edbd8cd1505fa7b0d97df04baef410f/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=2d89b0a25edbd8cd1505fa7b0d97df04baef410f", "filename": "test/tests.coffee", "sha": "175b86d325f7de60836d462bda4edc47e7ab9cbb", "additions": 1, "patch": "@@ -33,7 +33,7 @@ exports.danger = (helper, cb) ->\n \n class Helper extends Robot\n   constructor: (scriptPath) ->\n-    super null, null, 'helper'\n+    super null, null, true, 'helper'\n     @load scriptPath\n     @id = 1\n     @Response = Helper.Response", "changes": 2}], "237": [{"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/5e738f634bf5c88b0520a97dd9566abedfaa7f3f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5e738f634bf5c88b0520a97dd9566abedfaa7f3f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=5e738f634bf5c88b0520a97dd9566abedfaa7f3f", "filename": "src/robot.coffee", "sha": "a773c20eae43a64392e133e4aaea737eb4c74ceb", "additions": 14, "patch": "@@ -1,11 +1,12 @@\n-Fs      = require 'fs'\n-Url     = require 'url'\n-Log     = require 'log'\n-Path    = require 'path'\n-Connect = require 'connect'\n+Fs         = require 'fs'\n+Url        = require 'url'\n+Log        = require 'log'\n+Path       = require 'path'\n+Connect    = require 'connect'\n+HttpClient = require 'scoped-http-client'\n \n-User    = require './user'\n-Brain   = require './brain'\n+User       = require './user'\n+Brain      = require './brain'\n \n HUBOT_DEFAULT_ADAPTERS = [ \"campfire\", \"shell\" ]\n \n@@ -192,6 +193,12 @@ class Robot\n \n     @connect.listen process.env.PORT || 8080\n \n+    setInterval =>\n+      HttpClient.create(\"http://localhost:#{process.env.PORT || 8080}/hubot/ping\")\n+        .post() (err, res, bod) =>\n+          @logger.info \"Keep alive ping!\"\n+    , 1200000\n+\n   # Load the adapter Hubot is going to use.\n   #\n   # path    - A String of the path to adapter if local.\n@@ -485,9 +492,6 @@ class Robot.Response\n   http: (url) ->\n     @httpClient.create(url)\n \n-HttpClient = require 'scoped-http-client'\n-\n Robot.Response::httpClient = HttpClient\n \n module.exports = Robot\n-", "changes": 24}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/5e738f634bf5c88b0520a97dd9566abedfaa7f3f/src/scripts/httpd.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5e738f634bf5c88b0520a97dd9566abedfaa7f3f/src/scripts/httpd.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/httpd.coffee?ref=5e738f634bf5c88b0520a97dd9566abedfaa7f3f", "filename": "src/scripts/httpd.coffee", "sha": "cc25dbf54e400bb2d7193602074754ac712140dd", "additions": 4, "patch": "@@ -2,12 +2,16 @@\n spawn = require('child_process').spawn\n \n module.exports = (robot) ->\n+\n   robot.router.get \"/hubot/version\", (req, res) ->\n     res.end robot.version\n+\n   robot.router.post \"/hubot/ping\", (req, res) ->\n     res.end \"PONG\"\n+\n   robot.router.get \"/hubot/time\", (req, res) ->\n     res.end \"Server time is: #{new Date()}\"\n+\n   robot.router.get \"/hubot/info\", (req, res) ->\n     child = spawn('/bin/sh', ['-c', \"echo I\\\\'m $LOGNAME@$(hostname):$(pwd) \\\\($(git rev-parse HEAD)\\\\)\"])\n ", "changes": 4}], "241": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/eade30f8aa38ec81a9383074aa9f33048365ca26/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/eade30f8aa38ec81a9383074aa9f33048365ca26/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=eade30f8aa38ec81a9383074aa9f33048365ca26", "filename": "src/templates/README.md", "sha": "8ab2383914f64e1bd56424981da443932a483429", "additions": 1, "patch": "@@ -128,7 +128,7 @@ If you would like to deploy to either a UNIX operating system or Windows.\n Please check out the [deploying hubot onto UNIX][deploy-unix] and\n [deploying hubot onto Windows][deploy-windows] wiki pages.\n \n-[heroku-node-docs]: http://devcenter.heroku/com/articles/node-js\n+[heroku-node-docs]: http://devcenter.heroku.com/articles/node-js\n [deploy-heroku]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-Heroku\n [deploy-unix]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-UNIX\n [deploy-windows]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-Windows", "changes": 2}], "242": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8a735b87b864bcabb3feb6967a7f74a0e442a752/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8a735b87b864bcabb3feb6967a7f74a0e442a752/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=8a735b87b864bcabb3feb6967a7f74a0e442a752", "filename": "src/adapters/shell.coffee", "sha": "8ccb792b53f843f6995bbd7e3e2c09fffed70398", "additions": 1, "patch": "@@ -15,6 +15,7 @@ class Shell extends Adapter\n     @send user, strings...\n \n   run: ->\n+    self = @\n     stdin = process.openStdin()\n     stdout = process.stdout\n ", "changes": 1}], "243": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/3e0b2ed817d50aad6a82f9900198e4753233efa0/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/3e0b2ed817d50aad6a82f9900198e4753233efa0/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=3e0b2ed817d50aad6a82f9900198e4753233efa0", "filename": "bin/hubot", "sha": "a65412c85fbacf399ddadabf5ff6f09ce39d4eb7", "additions": 0, "patch": "@@ -31,17 +31,13 @@ Options =\n   adapter: \"shell\"\n   alias: false\n   enableHttpd: true\n-  waitForAdapter: false\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n \n Parser.on \"adapter\", (opt, value) ->\n   Options.adapter = value\n \n-Parser.on \"wait-for-adapter\", (opt) ->\n-  Options.waitForAdapter = true\n-\n Parser.on \"name\", (opt, value) ->\n   Options.name = value\n ", "changes": 4}], "247": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/57f5f098d1414663f85f93af7f20f9cae1b90018/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/57f5f098d1414663f85f93af7f20f9cae1b90018/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=57f5f098d1414663f85f93af7f20f9cae1b90018", "filename": "src/scripts/help.coffee", "sha": "65a4dc2dbd1f9859a9d187ecd32d2c1bc096cd94", "additions": 4, "patch": "@@ -10,5 +10,7 @@ module.exports = (robot) ->\n     cmds = robot.helpCommands()\n     if msg.match[1]\n       cmds = cmds.filter (cmd) -> cmd.match(new RegExp(msg.match[1]))\n-    msg.send cmds.join(\"\\n\")\n-\n+    emit = cmds.join(\"\\n\")\n+    unless robot.name is 'Hubot'\n+      emit = emit.replace(/(H|h)ubot/g, robot.name)\n+    msg.send emit", "changes": 6}], "253": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/dd1d2bf11d4e340696e19a2b4374d4777fffeb25/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd1d2bf11d4e340696e19a2b4374d4777fffeb25/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=dd1d2bf11d4e340696e19a2b4374d4777fffeb25", "filename": "src/scripts/google-images.coffee", "sha": "8fb01cd31732b8e239c913601bdfc4bc990027b4", "additions": 1, "patch": "@@ -29,7 +29,7 @@ module.exports = (robot) ->\n \n imageMe = (msg, query, cb) ->\n   msg.http('http://ajax.googleapis.com/ajax/services/search/images')\n-    .query(v: \"1.0\", rsz: '8', q: query)\n+    .query(v: \"1.0\", rsz: '8', q: query, safe: 'active')\n     .get() (err, res, body) ->\n       images = JSON.parse(body)\n       images = images.responseData.results", "changes": 2}], "254": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c4a5f28d0a6aed86b7246163b9dc5fc7bdf45eaf/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c4a5f28d0a6aed86b7246163b9dc5fc7bdf45eaf/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=c4a5f28d0a6aed86b7246163b9dc5fc7bdf45eaf", "filename": "src/adapters/campfire.coffee", "sha": "a3efd775ad4e7e4f0f4f9c9d970efe8620c8bae0", "additions": 3, "patch": "@@ -121,6 +121,9 @@ class CampfireStreaming extends EventEmitter\n     sound: (text, callback) ->\n       @message text, \"SoundMessage\", callback\n \n+    tweet: (text, callback) ->\n+      @message text, \"TweetMessage\", callback\n+\n     speak: (text, callback) ->\n       body = { message: { \"body\":text } }\n       self.post \"/room/#{id}/speak\", body, callback", "changes": 3}], "257": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/e057881583b697c6275b764b8564e6a24e1aa3b4/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e057881583b697c6275b764b8564e6a24e1aa3b4/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=e057881583b697c6275b764b8564e6a24e1aa3b4", "filename": "src/scripts/roles.coffee", "sha": "e6c251ad7ce245f8c6cd4a2d3897599e119e5398", "additions": 4, "patch": "@@ -35,10 +35,10 @@ module.exports = (robot) ->\n         msg.send \"#{name}? Never heard of 'em\"\n \n   robot.respond /@?([\\w .-_]+) is ([\"'\\w: -_]+)[.!]*$/i, (msg) ->\n-    name    = msg.match[1]\n+    name    = msg.match[1].trim()\n     newRole = msg.match[2].trim()\n \n-    unless name in ['who', 'what', 'where', 'when', 'why']\n+    unless name in ['', 'who', 'what', 'where', 'when', 'why']\n       unless newRole.match(/^not\\s+/i)\n         users = robot.usersForFuzzyName(name)\n         if users.length is 1\n@@ -59,10 +59,10 @@ module.exports = (robot) ->\n           msg.send \"I don't know anything about #{name}.\"\n \n   robot.respond /@?([\\w .-_]+) is not ([\"'\\w: -_]+)[.!]*$/i, (msg) ->\n-    name    = msg.match[1]\n+    name    = msg.match[1].trim()\n     newRole = msg.match[2].trim()\n \n-    unless name in ['who', 'what', 'where', 'when', 'why']\n+    unless name in ['', 'who', 'what', 'where', 'when', 'why']\n       users = robot.usersForFuzzyName(name)\n       if users.length is 1\n         user = users[0]", "changes": 8}], "261": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f622b92ed2ad0b0107fb6a503e431fff9dc1188e/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f622b92ed2ad0b0107fb6a503e431fff9dc1188e/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=f622b92ed2ad0b0107fb6a503e431fff9dc1188e", "filename": "src/scripts/help.coffee", "sha": "61b5be5e36efc57f52c2f4055d79a12d1ec34b83", "additions": 1, "patch": "@@ -9,7 +9,7 @@ module.exports = (robot) ->\n   robot.respond /help\\s*(.*)?$/i, (msg) ->\n     cmds = robot.helpCommands()\n     if msg.match[1]\n-      cmds = cmds.filter (cmd) -> cmd.match(new RegExp(msg.match[1]))\n+      cmds = cmds.filter (cmd) -> cmd.match(new RegExp(msg.match[1], 'i'))\n     emit = cmds.join(\"\\n\")\n     unless robot.name is 'Hubot'\n       emit = emit.replace(/(H|h)ubot/g, robot.name)", "changes": 2}], "264": [{"status": "modified", "deletions": 80, "raw_url": "https://github.com/hubotio/hubot/raw/10d659ba6730efccb15380acb033fafc80045b86/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/10d659ba6730efccb15380acb033fafc80045b86/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=10d659ba6730efccb15380acb033fafc80045b86", "filename": "bin/hubot", "sha": "6d952e41982b33020ca4d9911c170340325e7895", "additions": 45, "patch": "@@ -1,107 +1,72 @@\n #!/usr/bin/env coffee\n-# -*- mode:coffee -*-\n-##\n-# hubot [options]\n-#\n-# Launch an interactive hubot\n #\n # vim:ft=coffee ts=2 sw=2 et :\n # -*- mode:coffee -*-\n \n+App        = require 'commander'\n Hubot      = require '..'\n Fs         = require 'fs'\n Path       = require 'path'\n HTTP       = require 'http'\n Creator    = require '../src/creator'\n-OptParse   = require 'optparse'\n-\n-Switches = [\n-  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n-  [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n-  [ \"-h\", \"--help\",            \"Display the help information\" ],\n-  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n-  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n-  [ \"-s\", \"--enable-slash\",    \"Enable replacing the robot's name with '/' (deprecated)\" ],\n-  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n-]\n-\n-Options =\n-  adapter: \"shell\"\n-  alias: false\n-  create: false\n-  enableHttpd: true\n-  name: \"Hubot\"\n-  path: \".\"\n-\n-Parser = new OptParse.OptionParser(Switches)\n-Parser.banner = \"Usage hubot [options]\"\n-\n-Parser.on \"adapter\", (opt, value) ->\n-  Options.adapter = value\n-\n-Parser.on \"create\", (opt, value) ->\n-  Options.path = value\n-  Options.create = true\n-\n-Parser.on \"disable-httpd\", (opt) ->\n-  Options.enableHttpd = false\n-\n-Parser.on \"help\", (opt, value) ->\n-  console.log Parser.toString()\n-  process.exit 0\n \n-Parser.on \"alias\", (opt, value) ->\n-  Options.alias = value\n+contents = Fs.readFileSync __dirname + '/../package.json', 'utf8'\n+App.version (JSON.parse contents).version\n \n-Parser.on \"name\", (opt, value) ->\n-  Options.name = value\n+App\n+  .command('new [path]')\n+  .description('Create a new deployable hubot')\n+  .action (path) ->\n+    creator = new Creator.Creator(path)\n+    creator.run()\n \n-Parser.on \"enable-slash\", (opt) ->\n-  console.log \"WARNING: -s and --enable-slash are deprecated please use -l or --alias '/'\"\n-  Options.alias = '/'\n+App\n+  .command('start [name]')\n+  .description('Start a hubot instance')\n \n-Parser.on \"version\", (opt, value) ->\n-  Options.version = true\n+  .option('-a, --adapter [adapter]', 'adapter hubot will use')\n+  .option('-d, --no-http', 'disable the built in HTTP server')\n+  .option('-l, --alias [alias]', 'enable replacing the robot name with an alias')\n \n-Parser.parse process.argv\n+  .action (name, options) ->\n+    name or= 'hubot'\n \n-unless process.platform is \"win32\"\n-  process.on 'SIGTERM', ->\n-    process.exit 0\n+    adapter = options.adapter or 'shell'\n+    http    = !!options.http\n \n-if Options.create\n-  creator = new Creator.Creator(Options.path)\n-  creator.run()\n+    console.log \"HTTP: #{http}\"\n+    alias   = options.alias   or '/'\n \n-else\n-  adapterPath = Path.resolve __dirname, \"..\", \"src\", \"adapters\"\n+    adapterPath = Path.resolve __dirname, '..', 'src', 'adapters'\n \n-  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name\n+    robot = Hubot.loadBot adapterPath, adapter, http, name\n \n-  if Options.version\n-    console.log robot.version\n-    process.exit 0\n+    robot.enableSlash = !!alias\n+    robot.alias       = alias\n \n-  robot.enableSlash = Options.enableSlash\n-  robot.alias = Options.alias\n+    robot.adapter.on 'connected', ->\n+      scriptsPath = Path.resolve '.', 'scripts'\n+      robot.load scriptsPath\n \n-  loadScripts = ->\n-    scriptsPath = Path.resolve \".\", \"scripts\"\n-    robot.load scriptsPath\n+      scriptsPath = Path.resolve 'src', 'scripts'\n+      robot.load scriptsPath\n \n-    scriptsPath = Path.resolve \"src\", \"scripts\"\n-    robot.load scriptsPath\n+      scriptsFile = Path.resolve 'hubot-scripts.json'\n+      Path.exists scriptsFile, (exists) =>\n+        if exists\n+          Fs.readFile scriptsFile, (err, data) ->\n+            scripts = JSON.parse data\n+            scriptsPath = Path.resolve 'node_modules', 'hubot-scripts', 'src', 'scripts'\n+            robot.loadHubotScripts scriptsPath, scripts\n \n-    scriptsFile = Path.resolve \"hubot-scripts.json\"\n-    Path.exists scriptsFile, (exists) =>\n-      if exists\n-        Fs.readFile scriptsFile, (err, data) ->\n-          scripts = JSON.parse data\n-          scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n-          robot.loadHubotScripts scriptsPath, scripts\n+    robot.run()\n \n-  robot.adapter.on 'connected', loadScripts\n+App.parse process.argv\n \n-  robot.run()\n+if process.argv.length is 2\n+  console.log App.helpInformation()\n+  process.exit 0\n \n+unless process.platform is 'win32'\n+  process.on 'SIGTERM', ->\n+    process.exit 0", "changes": 125}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/10d659ba6730efccb15380acb033fafc80045b86/src/templates/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/10d659ba6730efccb15380acb033fafc80045b86/src/templates/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/Procfile?ref=10d659ba6730efccb15380acb033fafc80045b86", "filename": "src/templates/Procfile", "sha": "a6d87d2047f1217efd29615bac36a4c7ba4da4f5", "additions": 1, "patch": "@@ -1 +1 @@\n-web: bin/hubot -a campfire -n Hubot\n+web: bin/hubot start --adapter campfire hubot", "changes": 2}], "265": [{"status": "modified", "deletions": 80, "raw_url": "https://github.com/hubotio/hubot/raw/10d659ba6730efccb15380acb033fafc80045b86/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/10d659ba6730efccb15380acb033fafc80045b86/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=10d659ba6730efccb15380acb033fafc80045b86", "filename": "bin/hubot", "sha": "6d952e41982b33020ca4d9911c170340325e7895", "additions": 45, "patch": "@@ -1,107 +1,72 @@\n #!/usr/bin/env coffee\n-# -*- mode:coffee -*-\n-##\n-# hubot [options]\n-#\n-# Launch an interactive hubot\n #\n # vim:ft=coffee ts=2 sw=2 et :\n # -*- mode:coffee -*-\n \n+App        = require 'commander'\n Hubot      = require '..'\n Fs         = require 'fs'\n Path       = require 'path'\n HTTP       = require 'http'\n Creator    = require '../src/creator'\n-OptParse   = require 'optparse'\n-\n-Switches = [\n-  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n-  [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n-  [ \"-h\", \"--help\",            \"Display the help information\" ],\n-  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n-  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n-  [ \"-s\", \"--enable-slash\",    \"Enable replacing the robot's name with '/' (deprecated)\" ],\n-  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n-]\n-\n-Options =\n-  adapter: \"shell\"\n-  alias: false\n-  create: false\n-  enableHttpd: true\n-  name: \"Hubot\"\n-  path: \".\"\n-\n-Parser = new OptParse.OptionParser(Switches)\n-Parser.banner = \"Usage hubot [options]\"\n-\n-Parser.on \"adapter\", (opt, value) ->\n-  Options.adapter = value\n-\n-Parser.on \"create\", (opt, value) ->\n-  Options.path = value\n-  Options.create = true\n-\n-Parser.on \"disable-httpd\", (opt) ->\n-  Options.enableHttpd = false\n-\n-Parser.on \"help\", (opt, value) ->\n-  console.log Parser.toString()\n-  process.exit 0\n \n-Parser.on \"alias\", (opt, value) ->\n-  Options.alias = value\n+contents = Fs.readFileSync __dirname + '/../package.json', 'utf8'\n+App.version (JSON.parse contents).version\n \n-Parser.on \"name\", (opt, value) ->\n-  Options.name = value\n+App\n+  .command('new [path]')\n+  .description('Create a new deployable hubot')\n+  .action (path) ->\n+    creator = new Creator.Creator(path)\n+    creator.run()\n \n-Parser.on \"enable-slash\", (opt) ->\n-  console.log \"WARNING: -s and --enable-slash are deprecated please use -l or --alias '/'\"\n-  Options.alias = '/'\n+App\n+  .command('start [name]')\n+  .description('Start a hubot instance')\n \n-Parser.on \"version\", (opt, value) ->\n-  Options.version = true\n+  .option('-a, --adapter [adapter]', 'adapter hubot will use')\n+  .option('-d, --no-http', 'disable the built in HTTP server')\n+  .option('-l, --alias [alias]', 'enable replacing the robot name with an alias')\n \n-Parser.parse process.argv\n+  .action (name, options) ->\n+    name or= 'hubot'\n \n-unless process.platform is \"win32\"\n-  process.on 'SIGTERM', ->\n-    process.exit 0\n+    adapter = options.adapter or 'shell'\n+    http    = !!options.http\n \n-if Options.create\n-  creator = new Creator.Creator(Options.path)\n-  creator.run()\n+    console.log \"HTTP: #{http}\"\n+    alias   = options.alias   or '/'\n \n-else\n-  adapterPath = Path.resolve __dirname, \"..\", \"src\", \"adapters\"\n+    adapterPath = Path.resolve __dirname, '..', 'src', 'adapters'\n \n-  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name\n+    robot = Hubot.loadBot adapterPath, adapter, http, name\n \n-  if Options.version\n-    console.log robot.version\n-    process.exit 0\n+    robot.enableSlash = !!alias\n+    robot.alias       = alias\n \n-  robot.enableSlash = Options.enableSlash\n-  robot.alias = Options.alias\n+    robot.adapter.on 'connected', ->\n+      scriptsPath = Path.resolve '.', 'scripts'\n+      robot.load scriptsPath\n \n-  loadScripts = ->\n-    scriptsPath = Path.resolve \".\", \"scripts\"\n-    robot.load scriptsPath\n+      scriptsPath = Path.resolve 'src', 'scripts'\n+      robot.load scriptsPath\n \n-    scriptsPath = Path.resolve \"src\", \"scripts\"\n-    robot.load scriptsPath\n+      scriptsFile = Path.resolve 'hubot-scripts.json'\n+      Path.exists scriptsFile, (exists) =>\n+        if exists\n+          Fs.readFile scriptsFile, (err, data) ->\n+            scripts = JSON.parse data\n+            scriptsPath = Path.resolve 'node_modules', 'hubot-scripts', 'src', 'scripts'\n+            robot.loadHubotScripts scriptsPath, scripts\n \n-    scriptsFile = Path.resolve \"hubot-scripts.json\"\n-    Path.exists scriptsFile, (exists) =>\n-      if exists\n-        Fs.readFile scriptsFile, (err, data) ->\n-          scripts = JSON.parse data\n-          scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n-          robot.loadHubotScripts scriptsPath, scripts\n+    robot.run()\n \n-  robot.adapter.on 'connected', loadScripts\n+App.parse process.argv\n \n-  robot.run()\n+if process.argv.length is 2\n+  console.log App.helpInformation()\n+  process.exit 0\n \n+unless process.platform is 'win32'\n+  process.on 'SIGTERM', ->\n+    process.exit 0", "changes": 125}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/10d659ba6730efccb15380acb033fafc80045b86/src/templates/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/10d659ba6730efccb15380acb033fafc80045b86/src/templates/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/Procfile?ref=10d659ba6730efccb15380acb033fafc80045b86", "filename": "src/templates/Procfile", "sha": "a6d87d2047f1217efd29615bac36a4c7ba4da4f5", "additions": 1, "patch": "@@ -1 +1 @@\n-web: bin/hubot -a campfire -n Hubot\n+web: bin/hubot start --adapter campfire hubot", "changes": 2}], "270": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/43e43ccf3c5a6abdfdc4a9fd14927e7ca68c7c0e/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/43e43ccf3c5a6abdfdc4a9fd14927e7ca68c7c0e/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=43e43ccf3c5a6abdfdc4a9fd14927e7ca68c7c0e", "filename": "package.json", "sha": "9929368e42c943da8f7c8e68f3cefc4a63ed4780", "additions": 2, "patch": "@@ -15,11 +15,11 @@\n   },\n \n   \"dependencies\": {\n-    \"coffee-script\": \"1.2.0\",\n+    \"coffee-script\": \"1.3.1\",\n     \"optparse\": \"1.0.3\",\n     \"scoped-http-client\": \"0.9.6\",\n     \"log\": \"1.3.0\",\n-    \"connect\": \"2.0.3\",\n+    \"connect\": \"2.1.0\",\n     \"connect_router\": \"1.8.6\"\n   },\n ", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/43e43ccf3c5a6abdfdc4a9fd14927e7ca68c7c0e/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/43e43ccf3c5a6abdfdc4a9fd14927e7ca68c7c0e/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=43e43ccf3c5a6abdfdc4a9fd14927e7ca68c7c0e", "filename": "src/creator.coffee", "sha": "6602211bfc2eb33cd9c20b6851e0f7913cdbd426", "additions": 1, "patch": "@@ -17,7 +17,7 @@ class Creator\n   mkdirDashP: (path) ->\n     Path.exists path, (exists) ->\n       unless exists\n-        Fs.mkdir path, 0755, (err) ->\n+        Fs.mkdir path, 0o0755, (err) ->\n           throw err if err\n \n   # Copy the contents of a file from one place to another", "changes": 2}, {"status": "modified", "deletions": 9, "raw_url": "https://github.com/hubotio/hubot/raw/43e43ccf3c5a6abdfdc4a9fd14927e7ca68c7c0e/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/43e43ccf3c5a6abdfdc4a9fd14927e7ca68c7c0e/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=43e43ccf3c5a6abdfdc4a9fd14927e7ca68c7c0e", "filename": "src/robot.coffee", "sha": "9276d6200123657ff9701a4f3e88a4fd9d36e2a9", "additions": 10, "patch": "@@ -161,7 +161,7 @@ class Robot\n   #\n   # Sets up basic authentication if parameters are provided\n   #\n-  # Returns: nothing.\n+  # Returns nothing.\n   setupConnect: ->\n     user = process.env.CONNECT_USER\n     pass = process.env.CONNECT_PASSWORD\n@@ -170,9 +170,7 @@ class Robot\n \n     @connect = Connect()\n \n-    if user and pass\n-      @connect.use Connect.basicAuth(user, path)\n-\n+    @connect.use Connect.basicAuth(user, path) if user and pass\n     @connect.use Connect.bodyParser()\n     @connect.use Connect.router (app) =>\n \n@@ -195,11 +193,14 @@ class Robot\n \n     @connect.listen process.env.PORT || 8080\n \n-    setInterval =>\n-      HttpClient.create(\"http://localhost:#{process.env.PORT || 8080}/hubot/ping\")\n-        .post() (err, res, bod) =>\n-          @logger.info \"Keep alive ping!\"\n-    , 1200000\n+    hostname = process.env.HEROKU_HOSTNAME\n+\n+    if hostname\n+      setInterval =>\n+        httpclient.create(\"#{hostname}/hubot/ping\")\n+          .post() (err, res, body) =>\n+            @logger.info \"keep alive ping!\"\n+      , 1200000\n \n   # Load the adapter Hubot is going to use.\n   #", "changes": 19}], "271": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d94cc6aebd9aa833ad5723d10c826aaa225bd0ad/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/d94cc6aebd9aa833ad5723d10c826aaa225bd0ad/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=d94cc6aebd9aa833ad5723d10c826aaa225bd0ad", "filename": "package.json", "sha": "ecd572a603adc05850c23de69e567829971ba4f1", "additions": 1, "patch": "@@ -15,7 +15,7 @@\n   },\n \n   \"dependencies\": {\n-    \"coffee-script\": \"1.3.1\",\n+    \"coffee-script\": \"1.2.0\",\n     \"optparse\": \"1.0.3\",\n     \"scoped-http-client\": \"0.9.6\",\n     \"log\": \"1.3.0\",", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/d94cc6aebd9aa833ad5723d10c826aaa225bd0ad/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d94cc6aebd9aa833ad5723d10c826aaa225bd0ad/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=d94cc6aebd9aa833ad5723d10c826aaa225bd0ad", "filename": "src/robot.coffee", "sha": "4c253930ef062c6710cdba01ce0f0781b3cb9044", "additions": 2, "patch": "@@ -196,8 +196,8 @@ class Robot\n     hostname = process.env.HEROKU_HOSTNAME\n \n     if hostname\n-      setinterval =>\n-        httpclient.create(\"#{hostname}/hubot/ping\")\n+      setInterval =>\n+        HttpClient.create(\"http://#{hostname}/hubot/ping\")\n           .post() (err, res, body) =>\n             @logger.info \"keep alive ping!\"\n       , 1200000", "changes": 4}], "272": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/2f11797c34489ef643df57fefbe1e86855e462d1/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2f11797c34489ef643df57fefbe1e86855e462d1/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=2f11797c34489ef643df57fefbe1e86855e462d1", "filename": "src/adapters/shell.coffee", "sha": "b64c20f32ee718a2571cb257199ab35ea5f26820", "additions": 1, "patch": "@@ -6,7 +6,7 @@ Adapter  = require '../adapter'\n class Shell extends Adapter\n   send: (user, strings...) ->\n     unless process.platform is \"win32\"\n-      console.log \"\\033[01;32m#{str}\\033[0m\" for str in strings\n+      console.log \"\\x1b[01;32m#{str}\\x1b[0m\" for str in strings\n     else\n       console.log \"#{str}\" for str in strings\n     @repl.prompt()", "changes": 2}], "273": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/50fa9488feea09c53f2d9868a085922213fa4259/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/50fa9488feea09c53f2d9868a085922213fa4259/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=50fa9488feea09c53f2d9868a085922213fa4259", "filename": "src/robot.coffee", "sha": "ff707c955b62507bde04c9b0fb30f93440ca43f2", "additions": 4, "patch": "@@ -193,12 +193,12 @@ class Robot\n \n     @connect.listen process.env.PORT || 8080\n \n-    hostname = process.env.HEROKU_URL\n-    hostname += '/' unless /\\/$/.test hostname\n+    herokuUrl = process.env.HEROKU_URL\n \n-    if hostname\n+    if herokuUrl\n+      herokuUrl += '/' unless /\\/$/.test herokuUrl\n       setInterval =>\n-        HttpClient.create(\"#{hostname}/hubot/ping\")\n+        HttpClient.create(\"#{herokuUrl}hubot/ping\")\n           .post() (err, res, body) =>\n             @logger.info \"keep alive ping!\"\n       , 1200000", "changes": 8}], "274": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ea1085bf3b9fb474284a79a9ec2e0f28a8dae378/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ea1085bf3b9fb474284a79a9ec2e0f28a8dae378/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=ea1085bf3b9fb474284a79a9ec2e0f28a8dae378", "filename": "src/robot.coffee", "sha": "8b83346479c80bdd045fb571bfdd18383bd72129", "additions": 1, "patch": "@@ -170,7 +170,7 @@ class Robot\n \n     @connect = Connect()\n \n-    @connect.use Connect.basicAuth(user, path) if user and pass\n+    @connect.use Connect.basicAuth(user, pass) if user and pass\n     @connect.use Connect.bodyParser()\n     @connect.use Connect.router (app) =>\n ", "changes": 2}], "276": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fd1a41429309cedad24663739fe655bd2aade03a/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/fd1a41429309cedad24663739fe655bd2aade03a/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=fd1a41429309cedad24663739fe655bd2aade03a", "filename": "package.json", "sha": "d4e02a938458a97113b10433b75194662c05ee3a", "additions": 1, "patch": "@@ -17,7 +17,7 @@\n   \"dependencies\": {\n     \"coffee-script\": \"1.2.0\",\n     \"commander\": \"0.5.2\",\n-    \"scoped-http-client\": \"0.9.6\",\n+    \"scoped-http-client\": \"0.9.7\",\n     \"log\": \"1.3.0\",\n     \"connect\": \"2.0.3\",\n     \"connect_router\": \"1.8.6\"", "changes": 2}], "278": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/df1cb97593a1ba106e8ab5fb176d2ecf8d86188f/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/df1cb97593a1ba106e8ab5fb176d2ecf8d86188f/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=df1cb97593a1ba106e8ab5fb176d2ecf8d86188f", "filename": "package.json", "sha": "3fe9fffcb716702a22ddfd81226567d6ce5cfca6", "additions": 2, "patch": "@@ -10,8 +10,8 @@\n   }],\n \n   \"repository\" : {\n-    \"type\" : \"git\",\n-    \"url\" : \"http://github.com/github/hubot.git\"\n+    \"type\": \"git\",\n+    \"url\":  \"https://github.com/github/hubot.git\"\n   },\n \n   \"dependencies\": {", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/df1cb97593a1ba106e8ab5fb176d2ecf8d86188f/src/templates/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/df1cb97593a1ba106e8ab5fb176d2ecf8d86188f/src/templates/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/package.json?ref=df1cb97593a1ba106e8ab5fb176d2ecf8d86188f", "filename": "src/templates/package.json", "sha": "b42c1b7e753050a1a35828700de7c11ffdccfc72", "additions": 2, "patch": "@@ -10,8 +10,8 @@\n   }],\n \n   \"repository\" : {\n-    \"type\" : \"git\",\n-    \"url\" : \"http://github.com/github/hubot.git\"\n+    \"type\": \"git\",\n+    \"url\":  \"https://github.com/github/hubot.git\"\n   },\n \n   \"dependencies\": {", "changes": 4}], "282": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/91716e4a08f8fc9bc7a5a816e82c70dff9c9ebdf/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/91716e4a08f8fc9bc7a5a816e82c70dff9c9ebdf/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=91716e4a08f8fc9bc7a5a816e82c70dff9c9ebdf", "filename": "src/robot.coffee", "sha": "12a4d65ec982b0ad4e4ac05dad7449267a996d75", "additions": 5, "patch": "@@ -276,6 +276,11 @@ class Robot\n     unless user\n       user = new User id, options\n       @brain.data.users[id] = user\n+\n+    if options.room and (!user.room or user.room isnt options.room)\n+      user = new User id, options\n+      @brain.data.users[id] = user\n+\n     user\n \n   # Public: Get a User object given a name.", "changes": 5}], "283": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/52f287e9c108023161cfeed3f857dd20bc269c3b/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/52f287e9c108023161cfeed3f857dd20bc269c3b/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=52f287e9c108023161cfeed3f857dd20bc269c3b", "filename": "src/robot.coffee", "sha": "75561893e0fbb041fa818b3cf664383688078411", "additions": 1, "patch": "@@ -277,7 +277,7 @@ class Robot\n       user = new User id, options\n       @brain.data.users[id] = user\n \n-    if options.room and (!user.room or user.room isnt options.room)\n+    if options and options.room and (!user.room or user.room isnt options.room)\n       user = new User id, options\n       @brain.data.users[id] = user\n ", "changes": 2}], "285": [{"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=f86301587108f0b309a137296a95dff64fd3c6d2", "filename": "src/scripts/google-images.coffee", "sha": "4aebb0cc5f51b0e32179cd7849184967b8506238", "additions": 4, "patch": "@@ -1,12 +1,9 @@\n # A way to interact with the Google Images API.\n #\n-# image me <query>    - The Original. Queries Google Images for <query> and\n-#                       returns a random top result.\n-# animate me <query>  - The same thing as `image me`, except adds a few\n-#                       parameters to try to return an animated GIF instead.\n-# mustache me <url>   - Adds a mustache to the specified URL.\n-# mustache me <query> - Searches Google Images for the specified query and\n-#                       mustaches it.\n+# hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n+# hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.\n+# hubot mustache me <url> - Adds a mustache to the specified URL.\n+# hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n module.exports = (robot) ->\n   robot.respond /(image|img)( me)? (.*)/i, (msg) ->\n     imageMe msg, msg.match[3], (url) ->", "changes": 11}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=f86301587108f0b309a137296a95dff64fd3c6d2", "filename": "src/scripts/help.coffee", "sha": "030f6b2451044dde77b2cf675cb2ca5471420829", "additions": 2, "patch": "@@ -2,8 +2,8 @@\n #\n # These commands are grabbed from comment blocks at the top of each file.\n #\n-# help - Displays all of the help commands that Hubot knows about.\n-# help <query> - Displays all help commands that match <query>.\n+# hubot help - Displays all of the help commands that Hubot knows about.\n+# hubot help <query> - Displays all help commands that match <query>.\n \n module.exports = (robot) ->\n   robot.respond /help\\s*(.*)?$/i, (msg) ->", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/maps.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/maps.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/maps.coffee?ref=f86301587108f0b309a137296a95dff64fd3c6d2", "filename": "src/scripts/maps.coffee", "sha": "0e67f27d68f45db5a37c7680b636c457915500ba", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n # Interacts with the Google Maps API.\n #\n-# map me <query> - Returns a map view of the area returned by `query`.\n+# hubot map me <query> - Returns a map view of the area returned by `query`.\n \n module.exports = (robot) ->\n ", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=f86301587108f0b309a137296a95dff64fd3c6d2", "filename": "src/scripts/math.coffee", "sha": "e84494d1bedc870c98ec9e2d0b1be527084415ee", "additions": 2, "patch": "@@ -1,7 +1,7 @@\n # Allows Hubot to do mathematics.\n #\n-# math me <expression> - Calculate the given expression.\n-# convert me <expression> to <units> - Convert expression to given units.\n+# hubot math me <expression> - Calculate the given expression.\n+# hubot convert me <expression> to <units> - Convert expression to given units.\n module.exports = (robot) ->\n   robot.respond /(calc|calculate|convert|math)( me)? (.*)/i, (msg) ->\n     msg", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/pugme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/pugme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/pugme.coffee?ref=f86301587108f0b309a137296a95dff64fd3c6d2", "filename": "src/scripts/pugme.coffee", "sha": "626d62602a63df4e56681cb8d651708163011829", "additions": 2, "patch": "@@ -1,7 +1,7 @@\n # Pugme is the most important thing in your life\n #\n-# pug me - Receive a pug\n-# pug bomb N - get N pugs\n+# hubot pug me - Receive a pug\n+# hubot pug bomb N - get N pugs\n \n module.exports = (robot) ->\n ", "changes": 4}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=f86301587108f0b309a137296a95dff64fd3c6d2", "filename": "src/scripts/roles.coffee", "sha": "26f46b1bd20c0e15b4f978feccd329335e700de0", "additions": 3, "patch": "@@ -1,8 +1,8 @@\n # Assign roles to people you're chatting with\n #\n-# <user> is a badass guitarist - assign a role to a user\n-# <user> is not a badass guitarist - remove a role from a user\n-# who is <user> - see what roles a user has\n+# hubot <user> is a badass guitarist - assign a role to a user\n+# hubot <user> is not a badass guitarist - remove a role from a user\n+# hubot who is <user> - see what roles a user has\n \n # hubot holman is an ego surfer\n # hubot holman is not an ego surfer", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/rules.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/rules.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/rules.coffee?ref=f86301587108f0b309a137296a95dff64fd3c6d2", "filename": "src/scripts/rules.coffee", "sha": "c38065487eb756d3cf4f2ad4102ba471c91d87ea", "additions": 1, "patch": "@@ -14,7 +14,7 @@ otherRules = [\n \n # Make sure that hubot knows the rules.\n #\n-# the rules - Make sure hubot still knows the rules.\n+# hubot the rules - Make sure hubot still knows the rules.\n module.exports = (robot) ->\n   robot.respond /(what are )?the (three |3 )?(rules|laws)/i, (msg) ->\n     text = msg.message.text", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/storage.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/storage.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/storage.coffee?ref=f86301587108f0b309a137296a95dff64fd3c6d2", "filename": "src/scripts/storage.coffee", "sha": "ab855c9f61a9e4d8789766943aa8b12b267aba84", "additions": 2, "patch": "@@ -1,7 +1,7 @@\n # Inspect the data in redis easily\n #\n-# show users - Display all users that hubot knows about\n-# show storage - Display the contents that are persisted in redis\n+# hubot show users - Display all users that hubot knows about\n+# hubot show storage - Display the contents that are persisted in redis\n #\n \n Util = require \"util\"", "changes": 4}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=f86301587108f0b309a137296a95dff64fd3c6d2", "filename": "src/scripts/translate.coffee", "sha": "5773f91a816fa927cbae8fbfd0597dc1d0b2f90a", "additions": 2, "patch": "@@ -1,9 +1,7 @@\n # Allows Hubot to know many languages.\n #\n-# translate me <phrase> - Searches for a translation for the <phrase> and then\n-#                         prints that bad boy out.\n-#\n-# translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n+# hubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.\n+# hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n #\n \n languages =", "changes": 6}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/youtube.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f86301587108f0b309a137296a95dff64fd3c6d2/src/scripts/youtube.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/youtube.coffee?ref=f86301587108f0b309a137296a95dff64fd3c6d2", "filename": "src/scripts/youtube.coffee", "sha": "4e3b6a2d65e965a8997514488141b3784423d686", "additions": 1, "patch": "@@ -1,7 +1,6 @@\n # Messing around with the YouTube API.\n #\n-# youtube me <query> - Searches YouTube for the query and returns the video\n-#                      embed link.\n+# hubot youtube me <query> - Searches YouTube for the query and returns the video embed link.\n module.exports = (robot) ->\n   robot.respond /(youtube|yt)( me)? (.*)/i, (msg) ->\n     query = msg.match[3]", "changes": 3}], "290": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/fd0a38ecca1746b9f73be59e351450f327be6413/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fd0a38ecca1746b9f73be59e351450f327be6413/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=fd0a38ecca1746b9f73be59e351450f327be6413", "filename": "src/adapters/campfire.coffee", "sha": "24d04d077a9dd5e5e0d8082a7a7f060e589bffc2", "additions": 3, "patch": "@@ -169,8 +169,8 @@ class CampfireStreaming extends EventEmitter\n                 try\n                   data = JSON.parse part\n                   self.emit data.type, data.id, data.created_at, data.room_id, data.user_id, data.body\n-                catch err\n-                  logger.error \"Campfire error: #{err}\"\n+                catch error\n+                  logger.error \"Campfire error: #{error}\\n#{error.stack}\"\n \n         response.on \"end\", ->\n           logger.error \"Streaming connection closed for room #{id}. :(\"\n@@ -235,7 +235,7 @@ class CampfireStreaming extends EventEmitter\n \n         try\n           callback null, JSON.parse(data)\n-        catch err\n+        catch error\n           callback null, data or { }\n \n       response.on \"error\", (err) ->", "changes": 6}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/fd0a38ecca1746b9f73be59e351450f327be6413/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fd0a38ecca1746b9f73be59e351450f327be6413/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=fd0a38ecca1746b9f73be59e351450f327be6413", "filename": "src/robot.coffee", "sha": "7367ca2a6cc6b8f0fa50dadfb0501ca89eeaf7ec", "additions": 5, "patch": "@@ -115,8 +115,8 @@ class Robot\n       try\n         results.push listener.call(message)\n         break if message.done\n-      catch ex\n-        @logger.error \"Unable to call the listener: #{ex}\"\n+      catch error\n+        @logger.error \"Unable to call the listener: #{error}\\n#{error.stack}\"\n         false\n     if message not instanceof Robot.CatchAllMessage and results.indexOf(true) is -1\n       @receive new Robot.CatchAllMessage(message)\n@@ -149,8 +149,8 @@ class Robot\n       try\n         require(full) @\n         @parseHelp \"#{path}/#{file}\"\n-      catch err\n-        @logger.error \"#{err}\"\n+      catch error\n+        @logger.error \"Unable to load #{path}: #{error}\\n#{error.stack}\"\n \n   loadHubotScripts: (path, scripts) ->\n     @logger.info \"Loading hubot-scripts from #{path}\"\n@@ -220,7 +220,7 @@ class Robot\n \n       @adapter = require(\"#{path}\").use(@)\n     catch err\n-      @logger.error \"Cannot load adapter #{adapter} - #{err}\"\n+      @logger.error \"Cannot load adapter #{adapter} - #{err}\\n#{err.stack}\"\n \n   # Public: Help Commands for Running Scripts\n   #", "changes": 10}], "291": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/eacfeaaddda2ba89bbf8cb521620b44ac95ed2b7/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/eacfeaaddda2ba89bbf8cb521620b44ac95ed2b7/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=eacfeaaddda2ba89bbf8cb521620b44ac95ed2b7", "filename": "src/robot.coffee", "sha": "4d998a5e3fe437f8669ee7cf0b9ac7c62c5dee41", "additions": 1, "patch": "@@ -128,7 +128,7 @@ class Robot\n   #\n   # Returns nothing.\n   load: (path) ->\n-    @logger.info \"Loading scripts from #{path}\"\n+    @logger.debug \"Loading scripts from #{path}\"\n \n     Path.exists path, (exists) =>\n       if exists", "changes": 2}], "294": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "bin/hubot", "sha": "1381e98a003db5fc7440778de57bfb16649f3495", "additions": 2, "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env coffee\n-# -*- mode:coffee -*-\n+\n ##\n # hubot [options]\n #\n@@ -71,7 +71,7 @@ unless process.platform is \"win32\"\n     process.exit 0\n \n if Options.create\n-  creator = new Creator.Creator(Options.path)\n+  creator = new Creator(Options.path)\n   creator.run()\n \n else", "changes": 4}, {"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "index.coffee", "sha": "538c4fb939f3ce8e75fb8898eb72061bc897721a", "additions": 0, "patch": "@@ -1,9 +1,3 @@\n-# This is the Hubot Loading Bay.  NPM uses it as an entry point.\n-#\n-#     Hubot = require 'hubot'\n-#     YourBot = Hubot.robot 'campfire', 'yourbot'\n-\n-# Loads a Hubot robot\n exports.loadBot = (adapterPath, adapterName, enableHttpd, botName) ->\n   robot = require './src/robot'\n   new robot adapterPath, adapterName, enableHttpd, botName\n@@ -14,7 +8,5 @@ exports.robot = ->\n exports.adapter = ->\n   require './src/adapter'\n \n-# Loads the Hubot test harness.\n exports.tests = ->\n   require './test/tests'\n-", "changes": 8}, {"status": "modified", "deletions": 40, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "src/adapter.coffee", "sha": "8f61e311284efc8cc0ccb71fdaee352e7b8a447f", "additions": 28, "patch": "@@ -1,105 +1,93 @@\n-Robot      = require './robot'\n-event     = require 'events'\n+{EventEmitter} = require 'events'\n \n-class Adapter extends event.EventEmitter\n+class Adapter extends EventEmitter\n   # An adapter is a specific interface to a chat source for robots.\n   #\n   # robot - A Robot instance.\n   constructor: (@robot) ->\n-    @httpClient = require 'scoped-http-client'\n \n-  # Public: Raw method for sending data back to the chat source.  Extend this.\n+  # Public: Raw method for sending data back to the chat source. Extend this.\n   #\n   # user    - A User instance.\n   # strings - One or more Strings for each message to send.\n+  #\n+  # Returns nothing.\n   send: (user, strings...) ->\n \n   # Public: Raw method for building a reply and sending it back to the chat\n   # source. Extend this.\n   #\n   # user    - A User instance.\n   # strings - One or more Strings for each reply to send.\n+  #\n+  # Returns nothing.\n   reply: (user, strings...) ->\n \n   # Public: Raw method for setting a topic on the chat source. Extend this.\n   #\n-  # user    - A User instance\n+  # user    - A User instance.\n   # strings - One more more Strings to set as the topic.\n+  #\n+  # Returns nothing.\n   topic: (user, strings...) ->\n \n-  # Public: Raw method for invoking the bot to run\n-  # Extend this.\n+  # Public: Raw method for invoking the bot to run. Extend this.\n+  #\n+  # Returns nothing.\n   run: ->\n \n-  # Public: Raw method for shutting the bot down.\n-  # Extend this.\n+  # Public: Raw method for shutting the bot down. Extend this.\n+  #\n+  # Returns nothing.\n   close: ->\n-    @robot.brain.close()\n \n   # Public: Dispatch a received message to the robot.\n   #\n-  # message - A TextMessage instance of the received message.\n-  #\n   # Returns nothing.\n   receive: (message) ->\n     @robot.receive message\n \n   # Public: Get an Array of User objects stored in the brain.\n+  #\n+  # Returns an Array of User objects.\n   users: ->\n     @robot.users\n \n-  # Public: Get a User object given a unique identifier\n+  # Public: Get a User object given a unique identifier.\n+  #\n+  # Returns a User instance of the specified user.\n   userForId: (id, options) ->\n     @robot.userForId id, options\n \n-  # Public: Get a User object given a name\n+  # Public: Get a User object given a name.\n+  #\n+  # Returns a User instance for the user with the specified name.\n   userForName: (name) ->\n     @robot.userForName name\n \n   # Public: Get all users whose names match fuzzyName. Currently, match\n   # means 'starts with', but this could be extended to match initials,\n   # nicknames, etc.\n   #\n+  # Returns an Array of User instances matching the fuzzy name.\n   usersForRawFuzzyName: (fuzzyName) ->\n     @robot.usersForRawFuzzyName fuzzyName\n \n   # Public: If fuzzyName is an exact match for a user, returns an array with\n   # just that user. Otherwise, returns an array of all users for which\n   # fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n   #\n+  # Returns an Array of User instances matching the fuzzy name.\n   usersForFuzzyName: (fuzzyName) ->\n     @robot.usersForFuzzyName fuzzyName\n \n   # Public: Creates a scoped http client with chainable methods for\n-  # modifying the request.  This doesn't actually make a request though.\n+  # modifying the request. This doesn't actually make a request though.\n   # Once your request is assembled, you can call `get()`/`post()`/etc to\n   # send the request.\n   #\n-  # url - String URL to access.\n-  #\n-  # Examples:\n-  #\n-  #     res.http(\"http://example.com\")\n-  #       # set a single header\n-  #       .header('Authorization', 'bearer abcdef')\n-  #\n-  #       # set multiple headers\n-  #       .headers(Authorization: 'bearer abcdef', Accept: 'application/json')\n-  #\n-  #       # add URI query parameters\n-  #       .query(a: 1, b: 'foo & bar')\n-  #\n-  #       # make the actual request\n-  #       .get() (err, res, body) ->\n-  #         console.log body\n-  #\n-  #       # or, you can POST data\n-  #       .post(data) (err, res, body) ->\n-  #         console.log body\n-  #\n   # Returns a ScopedClient instance.\n   http: (url) ->\n-    @httpClient.create(url)\n+    @robot.http(url)\n \n module.exports = Adapter\n-", "changes": 68}, {"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "src/adapters/campfire.coffee", "sha": "f250bdfe8e66dcba944fcc5ec3e000b601228288", "additions": 8, "patch": "@@ -1,11 +1,11 @@\n-Robot        = require '../robot'\n-Adapter      = require '../adapter'\n+HTTPS          = require 'https'\n+{EventEmitter} = require 'events'\n \n-HTTPS        = require 'https'\n-EventEmitter = require('events').EventEmitter\n+Robot                                   = require '../robot'\n+Adapter                                 = require '../adapter'\n+{TextMessage,EnterMessage,LeaveMessage} = require '../message'\n \n class Campfire extends Adapter\n-\n   send: (user, strings...) ->\n     if strings.length > 0\n       @bot.Room(user.room).speak strings.shift(), (err, data) =>\n@@ -40,15 +40,15 @@ class Campfire extends Adapter\n \n     bot.on \"TextMessage\", withAuthor (id, created, room, user, body, author) ->\n       unless bot.info.id == author.id\n-        self.receive new Robot.TextMessage(author, body)\n+        self.receive new TextMessage(author, body)\n \n     bot.on \"EnterMessage\", withAuthor (id, created, room, user, body, author) ->\n       unless bot.info.id == author.id\n-        self.receive new Robot.EnterMessage(author)\n+        self.receive new EnterMessage(author)\n \n     bot.on \"LeaveMessage\", withAuthor (id, created, room, user, body, author) ->\n       unless bot.info.id == author.id\n-        self.receive new Robot.LeaveMessage(author)\n+        self.receive new LeaveMessage(author)\n \n     bot.Me (err, data) ->\n       bot.info = data.user", "changes": 16}, {"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "src/adapters/shell.coffee", "sha": "c51b53049dd2cc8c0de00658d134a9e130c20459", "additions": 12, "patch": "@@ -1,11 +1,12 @@\n Readline = require 'readline'\n \n-Robot    = require '../robot'\n-Adapter  = require '../adapter'\n+Robot         = require '../robot'\n+Adapter       = require '../adapter'\n+{TextMessage} = require '../message'\n \n class Shell extends Adapter\n   send: (user, strings...) ->\n-    unless process.platform is \"win32\"\n+    unless process.platform is 'win32'\n       console.log \"\\x1b[01;32m#{str}\\x1b[0m\" for str in strings\n     else\n       console.log \"#{str}\" for str in strings\n@@ -19,23 +20,24 @@ class Shell extends Adapter\n     stdin = process.openStdin()\n     stdout = process.stdout\n \n-    process.on \"uncaughtException\", (err) =>\n+    process.on 'uncaughtException', (err) =>\n       @robot.logger.error \"#{err}\"\n \n     @repl = Readline.createInterface stdin, stdout, null\n \n-    @repl.on \"close\", =>\n+    @repl.on 'close', =>\n       stdin.destroy()\n       @robot.shutdown()\n       process.exit 0\n \n-    @repl.on \"line\", (buffer) =>\n-      @repl.close() if buffer.toLowerCase() is \"exit\"\n+    @repl.on 'line', (buffer) =>\n+      @repl.close() if buffer.toLowerCase() is 'exit'\n       @repl.prompt()\n-      user = @userForId '1', name: \"Shell\", room: \"Shell\"\n-      @receive new Robot.TextMessage user, buffer\n+      user = @userForId '1', name: 'Shell', room: 'Shell'\n+      @receive new TextMessage user, buffer\n+\n+    self.emit 'connected'\n \n-    self.emit \"connected\"\n     @repl.setPrompt \"#{@robot.name}> \"\n     @repl.prompt()\n ", "changes": 22}, {"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "src/brain.coffee", "sha": "ea04ece9e24b96253099b7c415c1506cc99be528", "additions": 9, "patch": "@@ -1,31 +1,31 @@\n-EventEmitter = require('events').EventEmitter\n+{EventEmitter} = require 'events'\n \n # http://www.the-isb.com/images/Nextwave-Aaron01.jpg\n class Brain extends EventEmitter\n-  # Represents somewhat persistent storage for the robot.\n+  # Represents somewhat persistent storage for the robot. Extend this.\n   #\n-  # Returns a new Brain with no external storage.  Extend this!\n+  # Returns a new Brain with no external storage.\n   constructor: () ->\n     @data =\n       users: { }\n \n     @resetSaveInterval 5\n \n-  # Emits the 'save' event so that 'brain' scripts can handle persisting.\n+  # Public: Emits the 'save' event so that 'brain' scripts can handle persisting.\n   #\n   # Returns nothing.\n   save: ->\n     @emit 'save', @data\n \n-  # Emits the 'close' event so that 'brain' scripts can handle closing.\n+  # Public: Emits the 'close' event so that 'brain' scripts can handle closing.\n   #\n   # Returns nothing.\n   close: ->\n     clearInterval @saveInterval\n     @save()\n     @emit 'close'\n \n-  # Reset the interval between save function calls.\n+  # Public: Reset the interval between save function calls.\n   #\n   # seconds - An Integer of seconds between saves.\n   #\n@@ -36,16 +36,15 @@ class Brain extends EventEmitter\n       @save()\n     , seconds * 1000\n \n-  # Merge keys loaded from a DB against the in memory representation\n+  # Public: Merge keys loaded from a DB against the in memory representation.\n   #\n-  # Returns nothing\n+  # Returns nothing.\n   #\n-  # Caveats: Deeply nested structures don't merge well\n+  # Caveats: Deeply nested structures don't merge well.\n   mergeData: (data) ->\n     for k of (data or { })\n       @data[k] = data[k]\n \n     @emit 'loaded', @data\n \n module.exports = Brain\n-", "changes": 19}, {"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "src/creator.coffee", "sha": "a8ae851ada298725fdc9dc5f78f62667955959a0", "additions": 17, "patch": "@@ -5,44 +5,50 @@ Path = require 'path'\n class Creator\n   # Setup a ready to go version of hubot\n   #\n-  # path - String directory to create/upgrade scripts for\n+  # path - A String directory to create/upgrade scripts for\n   constructor: (path) ->\n     @path = path\n     @templateDir = \"#{__dirname}/templates\"\n     @scriptsDir  = \"#{__dirname}/scripts\"\n \n-  # Create a folder if it doesn't already exist\n+  # Create a folder if it doesn't already exist.\n   #\n-  # Throws an error if it fails\n+  # Returns nothing.\n   mkdirDashP: (path) ->\n     Path.exists path, (exists) ->\n       unless exists\n         Fs.mkdir path, 0o0755, (err) ->\n           throw err if err\n \n-  # Copy the contents of a file from one place to another\n+  # Copy the contents of a file from one place to another.\n   #\n-  # from - The source file to copy, must exist on disk\n-  # to - The destination filename to write to\n+  # from - A String source file to copy, must exist on disk.\n+  # to   - A String destination file to write to.\n+  #\n+  # Returns nothing.\n   copy: (from, to) ->\n     Fs.readFile from, \"utf8\", (err, data) ->\n       console.log \"Copying #{Path.resolve(from)} -> #{Path.resolve(to)}\"\n       Fs.writeFileSync to, data, \"utf8\"\n \n   # Copy the default scripts hubot ships with to the scripts folder\n   # This allows people to easily remove scripts hubot defaults to if\n-  # they want.  It also provides them with a few examples and a top\n-  # level scripts folder\n+  # they want. It also provides them with a few examples and a top\n+  # level scripts folder.\n+  #\n+  # path - The destination.\n   #\n-  # path - The destination\n+  # Returns nothing.\n   copyDefaultScripts: (path) ->\n     for file in Fs.readdirSync(@scriptsDir)\n       @copy \"#{@scriptsDir}/#{file}\", \"#{path}/#{file}\"\n \n-  # Run the creator process\n+  # Public: Run the creator process.\n   #\n   # Setup a ready to deploy folder that uses the hubot npm package\n   # Overwriting basic hubot files if they exist\n+  #\n+  # Returns nothing.\n   run: ->\n     console.log \"Creating a hubot install at #{@path}\"\n \n@@ -63,5 +69,4 @@ class Creator\n \n     @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\" for file in files\n \n-exports.Creator = Creator\n-\n+module.exports = Creator", "changes": 29}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "src/listener.coffee", "sha": "ec2262981cb2c50c1cb96a1b68b73da6ad99ded4", "additions": 41, "patch": "@@ -0,0 +1,41 @@\n+{TextMessage} = require './message'\n+\n+class Listener\n+  # Listeners receive every message from the chat source and decide if they\n+  # want to act on it.\n+  #\n+  # robot    - A Robot instance.\n+  # matcher  - A Function that determines if this listener should trigger the\n+  #            callback.\n+  # callback - A Function that is triggered if the incoming message matches.\n+  constructor: (@robot, @matcher, @callback) ->\n+\n+  # Public: Determines if the listener likes the content of the message. If\n+  # so, a Response built from the given Message is passed to the Listener\n+  # callback.\n+  #\n+  # message - A Message instance.\n+  #\n+  # Returns a boolean of whether the matcher matched.\n+  call: (message) ->\n+    if match = @matcher message\n+      @callback new @robot.Response(@robot, message, match)\n+      true\n+    else\n+      false\n+\n+class TextListener extends Listener\n+  # TextListeners receive every message from the chat source and decide if they want\n+  # to act on it.\n+  #\n+  # robot    - A Robot instance.\n+  # regex    - A Regex that determines if this listener should trigger the\n+  #            callback.\n+  # callback - A Function that is triggered if the incoming message matches.\n+  constructor: (@robot, @regex, @callback) ->\n+    @matcher = (message) =>\n+      if message instanceof TextMessage\n+        message.match @regex\n+\n+module.exports.Listener     = Listener\n+module.exports.TextListener = TextListener", "changes": 41}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "src/message.coffee", "sha": "60cb203de799dd48807ddc54f8f96a481c26e3d2", "additions": 49, "patch": "@@ -0,0 +1,49 @@\n+class Message\n+  # Represents an incoming message from the chat.\n+  #\n+  # user - A User instance that sent the message.\n+  constructor: (@user, @done = false) ->\n+\n+  # Indicates that no other Listener should be called on this object\n+  #\n+  # Returns nothing.\n+  finish: ->\n+    @done = true\n+\n+class TextMessage extends Message\n+  # Represents an incoming message from the chat.\n+  #\n+  # user - A User instance that sent the message.\n+  # text - A String message.\n+  constructor: (@user, @text) ->\n+    super @user\n+\n+  # Determines if the message matches the given regex.\n+  #\n+  # regex - A Regex to check.\n+  #\n+  # Returns a Match object or null.\n+  match: (regex) ->\n+    @text.match regex\n+\n+# Represents an incoming user entrance notification.\n+#\n+# user - A User instance for the user who entered.\n+class EnterMessage extends Message\n+\n+# Represents an incoming user exit notification.\n+#\n+# user - A User instance for the user who left.\n+class LeaveMessage extends Message\n+\n+class CatchAllMessage extends Message\n+  # Represents a message that no matchers matched.\n+  #\n+  # message - The original message.\n+  constructor: (@message) ->\n+\n+module.exports.Message         = Message\n+module.exports.TextMessage     = TextMessage\n+module.exports.EnterMessage    = EnterMessage\n+module.exports.LeaveMessage    = LeaveMessage\n+module.exports.CatchAllMessage = CatchAllMessage", "changes": 49}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "src/response.coffee", "sha": "53fca78e9b30fa57c468ff5aa39adabad521cd9d", "additions": 61, "patch": "@@ -0,0 +1,61 @@\n+class Response\n+  # Public: Responses are sent to matching listeners. Messages know about the\n+  # content and user that made the original message, and how to reply back to\n+  # them.\n+  #\n+  # robot   - A Robot instance.\n+  # message - A Message instance.\n+  # match   - A Match object from the successful Regex match.\n+  constructor: (@robot, @message, @match) ->\n+\n+  # Public: Posts a message back to the chat source\n+  #\n+  # strings - One or more strings to be posted. The order of these strings\n+  #           should be kept intact.\n+  #\n+  # Returns nothing.\n+  send: (strings...) ->\n+    @robot.adapter.send @message.user, strings...\n+\n+  # Public: Posts a topic changing message\n+  #\n+  # strings - One or more strings to set as the topic of the\n+  #           room the bot is in.\n+  #\n+  # Returns nothing.\n+  topic: (strings...) ->\n+    @robot.adapter.topic @message.user, strings...\n+\n+  # Public: Posts a message mentioning the current user.\n+  #\n+  # strings - One or more strings to be posted. The order of these strings\n+  #           should be kept intact.\n+  #\n+  # Returns nothing.\n+  reply: (strings...) ->\n+    @robot.adapter.reply @message.user, strings...\n+\n+  # Public: Picks a random item from the given items.\n+  #\n+  # items - An Array of items.\n+  #\n+  # Returns a random item.\n+  random: (items) ->\n+    items[ Math.floor(Math.random() * items.length) ]\n+\n+  # Public: Tell the message to stop dispatching to listeners\n+  #\n+  # Returns nothing.\n+  finish: ->\n+    @message.finish()\n+\n+  # Public: Creates a scoped http client with chainable methods for\n+  # modifying the request. This doesn't actually make a request though.\n+  # Once your request is assembled, you can call `get()`/`post()`/etc to\n+  # send the request.\n+  #\n+  # Returns a ScopedClient instance.\n+  http: (url) ->\n+    @robot.http(url)\n+\n+module.exports = Response", "changes": 61}, {"status": "modified", "deletions": 180, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "src/robot.coffee", "sha": "9289bc12258f8e68f767fbdd638856d97f1db928", "additions": 66, "patch": "@@ -1,31 +1,35 @@\n Fs         = require 'fs'\n-Url        = require 'url'\n Log        = require 'log'\n Path       = require 'path'\n-Connect    = require 'connect'\n HttpClient = require 'scoped-http-client'\n \n-User       = require './user'\n-Brain      = require './brain'\n+User                                                    = require './user'\n+Brain                                                   = require './brain'\n+Response                                                = require './response'\n+{Listener,TextListener}                                 = require './listener'\n+{TextMessage,EnterMessage,LeaveMessage,CatchAllMessage} = require './message'\n \n-HUBOT_DEFAULT_ADAPTERS = [ \"campfire\", \"shell\" ]\n+HUBOT_DEFAULT_ADAPTERS = [ 'campfire', 'shell' ]\n \n class Robot\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n   # dispatch them to matching listeners.\n   #\n-  # path - String directory full of Hubot scripts to load.\n-  constructor: (adapterPath, adapter, httpd, name = \"Hubot\") ->\n+  # adapterPath - A String of the path to local adapters.\n+  # adapter     - A String of the adapter name.\n+  # httpd       - A Boolean whether to enable the HTTP daemon.\n+  # name        - A String of the robot name, defaults to Hubot.\n+  constructor: (adapterPath, adapter, httpd, name = 'Hubot') ->\n     @name        = name\n     @brain       = new Brain\n     @alias       = false\n     @adapter     = null\n     @commands    = []\n-    @Response    = Robot.Response\n+    @Response    = Response\n     @listeners   = []\n     @loadPaths   = []\n     @enableSlash = false\n-    @logger      = new Log process.env.HUBOT_LOG_LEVEL or \"info\"\n+    @logger      = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n \n     @parseVersion()\n     @setupConnect() if httpd\n@@ -34,7 +38,7 @@ class Robot\n   # Public: Specify a router and callback to register as Connect middleware.\n   #\n   # route    - A String of the route to match.\n-  # callback - A Function that is called when the route is requested\n+  # callback - A Function that is called when the route is requested.\n   #\n   # Returns nothing.\n   route: (route, callback) ->\n@@ -51,26 +55,26 @@ class Robot\n     @listeners.push new TextListener(@, regex, callback)\n \n   # Public: Adds a Listener that attempts to match incoming messages directed\n-  # at the robot based on a Regex.  All regexes treat patterns like they begin\n+  # at the robot based on a Regex. All regexes treat patterns like they begin\n   # with a '^'\n   #\n   # regex    - A Regex that determines if the callback should be called.\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n   respond: (regex, callback) ->\n-    re = regex.toString().split(\"/\")\n+    re = regex.toString().split('/')\n     re.shift()           # remove empty first item\n     modifiers = re.pop() # pop off modifiers\n \n-    if re[0] and re[0][0] is \"^\"\n+    if re[0] and re[0][0] is '^'\n       @logger.warning \"Anchors don't work well with respond, perhaps you want to use 'hear'\"\n       @logger.warning \"The regex in question was #{regex.toString()}\"\n \n-    pattern = re.join(\"/\") # combine the pattern back again\n+    pattern = re.join('/') # combine the pattern back again\n \n     if @alias\n-      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\") # escape alias for regexp\n+      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&') # escape alias for regexp\n       newRegex = new RegExp(\"^(?:#{alias}[:,]?|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n     else\n       newRegex = new RegExp(\"^#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n@@ -84,29 +88,28 @@ class Robot\n   #\n   # Returns nothing.\n   enter: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.EnterMessage), callback)\n+    @listeners.push new Listener(@, ((msg) -> msg instanceof EnterMessage), callback)\n \n   # Public: Adds a Listener that triggers when anyone leaves the room.\n   #\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n   leave: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.LeaveMessage), callback)\n-\n+    @listeners.push new Listener(@, ((msg) -> msg instanceof LeaveMessage), callback)\n \n   # Public: Adds a Listener that triggers when no other text matchers match.\n   #\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n   catchAll: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof Robot.CatchAllMessage), ((msg) -> msg.message = msg.message.message; callback msg))\n+    @listeners.push new Listener(@, ((msg) -> msg instanceof CatchAllMessage), ((msg) -> msg.message = msg.message.message; callback msg))\n \n   # Public: Passes the given message to any interested Listeners.\n   #\n-  # message - A Robot.Message instance. Listeners can flag this message as\n-  #  'done' to prevent further execution\n+  # message - A Message instance. Listeners can flag this message as 'done' to\n+  #           prevent further execution.\n   #\n   # Returns nothing.\n   receive: (message) ->\n@@ -118,9 +121,8 @@ class Robot\n       catch error\n         @logger.error \"Unable to call the listener: #{error}\\n#{error.stack}\"\n         false\n-    if message not instanceof Robot.CatchAllMessage and results.indexOf(true) is -1\n-      @receive new Robot.CatchAllMessage(message)\n-\n+    if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n+      @receive new CatchAllMessage(message)\n \n   # Public: Loads every script in the given path.\n   #\n@@ -136,7 +138,7 @@ class Robot\n         for file in Fs.readdirSync(path)\n           @loadFile path, file\n \n-  # Public: Loads a file in path\n+  # Public: Loads a file in path.\n   #\n   # path - A String path on the filesystem.\n   # file - A String filename in path on the filesystem.\n@@ -152,20 +154,25 @@ class Robot\n       catch error\n         @logger.error \"Unable to load #{path}: #{error}\\n#{error.stack}\"\n \n+  # Public: Load scripts specfic in the `hubot-scripts.json` file.\n+  #\n+  # path    - A String path to the hubot-scripts files.\n+  # scripts - An Array of scripts to load.\n+  #\n+  # Returns nothing.\n   loadHubotScripts: (path, scripts) ->\n     @logger.info \"Loading hubot-scripts from #{path}\"\n     for script in scripts\n       @loadFile path, script\n \n-  # Setup the Connect server's defaults\n-  #\n-  # Sets up basic authentication if parameters are provided\n+  # Setup the Connect server's defaults.\n   #\n   # Returns nothing.\n   setupConnect: ->\n     user = process.env.CONNECT_USER\n     pass = process.env.CONNECT_PASSWORD\n \n+    Connect        = require 'connect'\n     Connect.router = require 'connect_router'\n \n     @connect = Connect()\n@@ -200,7 +207,7 @@ class Robot\n       setInterval =>\n         HttpClient.create(\"#{herokuUrl}hubot/ping\")\n           .post() (err, res, body) =>\n-            @logger.info \"keep alive ping!\"\n+            @logger.info 'keep alive ping!'\n       , 1200000\n \n   # Load the adapter Hubot is going to use.\n@@ -210,7 +217,7 @@ class Robot\n   #\n   # Returns nothing.\n   loadAdapter: (path, adapter) ->\n-    @logger.debug \"Loading adapter #{adapter}\"\n+    @logger.debug 'Loading adapter #{adapter}'\n \n     try\n       path = if adapter in HUBOT_DEFAULT_ADAPTERS\n@@ -222,19 +229,19 @@ class Robot\n     catch err\n       @logger.error \"Cannot load adapter #{adapter} - #{err}\\n#{err.stack}\"\n \n-  # Public: Help Commands for Running Scripts\n+  # Public: Help Commands for Running Scripts.\n   #\n-  # Returns an array of help commands for running scripts\n+  # Returns an Array of help commands for running scripts.\n   helpCommands: ->\n     @commands.sort()\n \n-  # Private: load help info from a loaded script\n+  # Private: load help info from a loaded script.\n   #\n-  # path - The path to the file on disk\n+  # path - A String path to the file on disk.\n   #\n-  # Returns nothing\n+  # Returns nothing.\n   parseHelp: (path) ->\n-    Fs.readFile path, \"utf-8\", (err, body) =>\n+    Fs.readFile path, 'utf-8', (err, body) =>\n       throw err if err?\n       for i, line of body.split(\"\\n\")\n         break    if !(line[0] == '#' or line.substr(0, 2) == '//')\n@@ -246,31 +253,40 @@ class Robot\n   #\n   # user    - A User instance.\n   # strings - One or more Strings for each message to send.\n+  #\n+  # Returns nothing.\n   send: (user, strings...) ->\n     @adapter.send user, strings...\n \n-  # Public: A helper send function to message a room that the robot is in\n+  # Public: A helper send function to message a room that the robot is in.\n   #\n-  # room    - String designating the room to message\n+  # room    - String designating the room to message.\n   # strings - One or more Strings for each message to send.\n+  #\n+  # Returns nothing.\n   messageRoom: (room, strings...) ->\n     user = @userForId @id, { room: room }\n     @adapter.send user, strings...\n \n-\n   # Public: A helper reply function which delegates to the adapter's reply\n   # function.\n   #\n   # user    - A User instance.\n   # strings - One or more Strings for each message to send.\n+  #\n+  # Returns nothing.\n   reply: (user, strings...) ->\n     @adapter.reply user, strings...\n \n   # Public: Get an Array of User objects stored in the brain.\n+  #\n+  # Returns an Array of User objects.\n   users: ->\n     @brain.data.users\n \n   # Public: Get a User object given a unique identifier.\n+  #\n+  # Returns a User instance of the specified user.\n   userForId: (id, options) ->\n     user = @brain.data.users[id]\n     unless user\n@@ -284,6 +300,8 @@ class Robot\n     user\n \n   # Public: Get a User object given a name.\n+  #\n+  # Returns a User instance for the user with the specified name.\n   userForName: (name) ->\n     result = null\n     lowerName = name.toLowerCase()\n@@ -297,6 +315,7 @@ class Robot\n   # means 'starts with', but this could be extended to match initials,\n   # nicknames, etc.\n   #\n+  # Returns an Array of User instances matching the fuzzy name.\n   usersForRawFuzzyName: (fuzzyName) ->\n     lowerFuzzyName = fuzzyName.toLowerCase()\n     user for key, user of (@brain.data.users or {}) when (\n@@ -306,6 +325,7 @@ class Robot\n   # just that user. Otherwise, returns an array of all users for which\n   # fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n   #\n+  # Returns an Array of User instances matching the fuzzy name.\n   usersForFuzzyName: (fuzzyName) ->\n     matchedUsers = @usersForRawFuzzyName(fuzzyName)\n     lowerFuzzyName = fuzzyName.toLowerCase()\n@@ -316,162 +336,30 @@ class Robot\n \n     matchedUsers\n \n-  # Kick off the event loop for the adapter\n+  # Public: Kick off the event loop for the adapter\n   #\n-  # Returns: Nothing.\n+  # Returns nothing.\n   run: ->\n     @adapter.run()\n \n   # Public: Gracefully shutdown the robot process\n   #\n-  # Returns: Nothing.\n+  # Returns nothing.\n   shutdown: ->\n     @adapter.close()\n     @brain.close()\n \n   # Public: The version of Hubot from npm\n   #\n-  # Returns: SemVer compliant version number\n+  # Returns a String of the version number.\n   parseVersion: ->\n-    package_path = __dirname + \"/../package.json\"\n-\n+    package_path = __dirname + '/../package.json'\n     data = Fs.readFileSync package_path, 'utf8'\n-\n     content = JSON.parse data\n     @version = content.version\n \n-class Robot.Message\n-  # Represents an incoming message from the chat.\n-  #\n-  # user - A User instance that sent the message.\n-  constructor: (@user, @done = false) ->\n-\n-  # Indicates that no other Listener should be called on this object\n-  finish: ->\n-    @done = true\n-\n-class Robot.TextMessage extends Robot.Message\n-  # Represents an incoming message from the chat.\n-  #\n-  # user - A User instance that sent the message.\n-  # text - The String message contents.\n-  constructor: (@user, @text) ->\n-    super @user\n-\n-  # Determines if the message matches the given regex.\n-  #\n-  # regex - The Regex to check.\n-  #\n-  # Returns a Match object or null.\n-  match: (regex) ->\n-    @text.match regex\n-\n-# Represents an incoming user entrance notification.\n-#\n-# user - A User instance for the user who entered.\n-class Robot.EnterMessage extends Robot.Message\n-\n-# Represents an incoming user exit notification.\n-#\n-# user - A User instance for the user who left.\n-class Robot.LeaveMessage extends Robot.Message\n-\n-class Robot.CatchAllMessage extends Robot.Message\n-  # Represents a message that no matchers matched.\n-  #\n-  # message - The original message.\n-  constructor: (@message) ->\n-\n-class Listener\n-  # Listeners receive every message from the chat source and decide if they\n-  # want to act on it.\n-  #\n-  # robot    - The current Robot instance.\n-  # matcher  - The Function that determines if this listener should trigger the\n-  #            callback.\n-  # callback - The Function that is triggered if the incoming message matches.\n-  constructor: (@robot, @matcher, @callback) ->\n-\n-  # Public: Determines if the listener likes the content of the message.  If\n-  # so, a Response built from the given Message is passed to the Listener\n-  # callback.\n-  #\n-  # message - a Robot.Message instance.\n-  #\n-  # Returns a boolean of whether the matcher matched.\n-  call: (message) ->\n-    if match = @matcher message\n-      @callback new @robot.Response(@robot, message, match)\n-      true\n-    else\n-      false\n-\n-class TextListener extends Listener\n-  # TextListeners receive every message from the chat source and decide if they want\n-  # to act on it.\n-  #\n-  # robot    - The current Robot instance.\n-  # regex    - The Regex that determines if this listener should trigger the\n-  #            callback.\n-  # callback - The Function that is triggered if the incoming message matches.\n-  constructor: (@robot, @regex, @callback) ->\n-    @matcher = (message) =>\n-      if message instanceof Robot.TextMessage\n-        message.match @regex\n-\n-class Robot.Response\n-  # Public: Responses are sent to matching listeners.  Messages know about the\n-  # content and user that made the original message, and how to reply back to\n-  # them.\n-  #\n-  # robot   - The current Robot instance.\n-  # message - The current Robot.Message instance.\n-  # match   - The Match object from the successful Regex match.\n-  constructor: (@robot, @message, @match) ->\n-\n-  # Public: Posts a message back to the chat source\n-  #\n-  # strings - One or more strings to be posted.  The order of these strings\n-  #           should be kept intact.\n-  #\n-  # Returns nothing.\n-  send: (strings...) ->\n-    @robot.adapter.send @message.user, strings...\n-\n-  # Public: Posts a topic changing message\n-  #\n-  # strings - One or more strings to set as the topic of the\n-  #           room the bot is in.\n-  #\n-  # Returns nothing.\n-  topic: (strings...) ->\n-    @robot.adapter.topic @message.user, strings...\n-\n-  # Public: Posts a message mentioning the current user.\n-  #\n-  # strings - One or more strings to be posted.  The order of these strings\n-  #           should be kept intact.\n-  #\n-  # Returns nothing.\n-  reply: (strings...) ->\n-    @robot.adapter.reply @message.user, strings...\n-\n-  # Public: Picks a random item from the given items.\n-  #\n-  # items - An Array of items (usually Strings).\n-  #\n-  # Returns an random item.\n-  random: (items) ->\n-    items[ Math.floor(Math.random() * items.length) ]\n-\n-  # Public: Tell the message to stop dispatching to listeners\n-  #\n-  # Returns nothing.\n-  finish: ->\n-    @message.finish()\n-\n   # Public: Creates a scoped http client with chainable methods for\n-  # modifying the request.  This doesn't actually make a request though.\n+  # modifying the request. This doesn't actually make a request though.\n   # Once your request is assembled, you can call `get()`/`post()`/etc to\n   # send the request.\n   #\n@@ -499,8 +387,6 @@ class Robot.Response\n   #\n   # Returns a ScopedClient instance.\n   http: (url) ->\n-    @httpClient.create(url)\n-\n-Robot.Response::httpClient = HttpClient\n+    HttpClient.create(url)\n \n module.exports = Robot", "changes": 246}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/user.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/src/user.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/user.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "src/user.coffee", "sha": "f0ea913f472d89a571e9f853c786f31d8994a924", "additions": 2, "patch": "@@ -1,14 +1,11 @@\n-Robot = require './robot'\n-\n class User\n   # Represents a participating user in the chat.\n   #\n   # id      - A unique ID for the user.\n   # options - An optional Hash of key, value pairs for this user.\n-  constructor: (@id, options = { }) ->\n-    for k of (options or { })\n+  constructor: (@id, options = {}) ->\n+    for k of (options or {})\n       @[k] = options[k]\n     @['name'] ||= @id\n \n module.exports = User\n-", "changes": 7}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/test/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "test/brain_test.coffee", "sha": "d970598c6511f776794eb65c794d853d2ccec2b3", "additions": 1, "patch": "@@ -1,5 +1,5 @@\n assert = require 'assert'\n-Robot  = require '../src/robot'\n+\n Brain  = require '../src/brain'\n \n saved   = false\n@@ -23,4 +23,3 @@ brain.resetSaveInterval 0.1\n process.on 'exit', ->\n   assert.ok saved\n   assert.ok closed\n-", "changes": 3}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/test/google_images_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/test/google_images_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/google_images_test.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "test/google_images_test.coffee", "sha": "fe8543793092649edc8cb02ffca76bc25ead3b65", "additions": 5, "patch": "@@ -1,7 +1,10 @@\n Tests  = require './tests'\n assert = require 'assert'\n helper = Tests.helper()\n-Robot  = require '../src/robot'\n+\n+Robot         = require '../src/robot'\n+{TextMessage} = require '../src/message'\n+\n require('../src/scripts/google-images') helper\n \n # start up a danger room for google images\n@@ -41,7 +44,7 @@ messages = [\n user = {}\n danger.start tests, ->\n   for message in messages\n-    helper.receive new Robot.TextMessage user, message\n+    helper.receive new TextMessage user, message\n \n   helper.stop()\n ", "changes": 7}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a8c67ea184edc8c3d949eb895156a1e02d1d28cc/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=a8c67ea184edc8c3d949eb895156a1e02d1d28cc", "filename": "test/tests.coffee", "sha": "54d9c8afb938f699c8a720e0200a20744dbe62d3", "additions": 10, "patch": "@@ -1,8 +1,11 @@\n-Robot   = require '../src/robot'\n-Adapter = require '../src/adapter'\n-User    = require '../src/user'\n-Path    = require 'path'\n-Url     = require 'url'\n+Url           = require 'url'\n+Path          = require 'path'\n+\n+Robot         = require '../src/robot'\n+Adapter       = require '../src/adapter'\n+User          = require '../src/user'\n+Response      = require '../src/response'\n+{TextMessage} = require '../src/message'\n \n # A programmer's best friend.\n # http://timenerdworld.files.wordpress.com/2010/12/joint-venture-s1e3_1.jpg\n@@ -59,12 +62,12 @@ class Danger extends Adapter\n   receive: (text) ->\n     if typeof text is 'string'\n       user = new User 1, 'helper'\n-      super new Robot.TextMessage user, text\n+      super new TextMessage user, text\n     else\n       super text\n \n if not process.env.HUBOT_LIVE\n-  class Helper.Response extends Robot.Response\n+  class Helper.Response extends Response\n     # This changes ever HTTP request to hit the danger server above\n     http: (url) ->\n       super(url).host('127.0.0.1').port(9001)", "changes": 17}], "296": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/4705ccf7a23afb2623ae9bfb9d9660a8c5402e25/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4705ccf7a23afb2623ae9bfb9d9660a8c5402e25/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=4705ccf7a23afb2623ae9bfb9d9660a8c5402e25", "filename": "src/robot.coffee", "sha": "4ac87bd845191452c380c102cf834c58aed515ca", "additions": 3, "patch": "@@ -244,9 +244,9 @@ class Robot\n     Fs.readFile path, 'utf-8', (err, body) =>\n       throw err if err?\n       for i, line of body.split(\"\\n\")\n-        break    if !(line[0] == '#' or line.substr(0, 2) == '//')\n-        continue if !line.match('-')\n-        @commands.push line[2..line.length]\n+        break    if not (line[0] == '#' or line.substr(0, 2) == '//')\n+        continue if not line.match('-')\n+        @commands.push line[2..line.length].replace /^hubot/i, @name\n \n   # Public: A helper send function which delegates to the adapter's send\n   # function.", "changes": 6}], "297": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/Makefile", "blob_url": "https://github.com/hubotio/hubot/blob/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/Makefile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Makefile?ref=fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213", "filename": "Makefile", "sha": "909fdcafcbd48ded5eb9a4f14ab4107f8bc11f84", "additions": 1, "patch": "@@ -3,7 +3,7 @@ NPM_EXECUTABLE_HOME := node_modules/.bin\n PATH := ${NPM_EXECUTABLE_HOME}:${PATH}\n \n test: deps\n-\t@find test -name '*_test.coffee' | xargs -n 1 -t coffee\n+\t@find test -name 'test_*.coffee' | xargs -n 1 -t coffee\n \n dev: generate-js\n \t@coffee -wc --bare -o lib src/*.coffee", "changes": 2}, {"status": "renamed", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/helper.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/helper.coffee", "previous_filename": "test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/helper.coffee?ref=fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213", "filename": "test/helper.coffee", "sha": "dac6bf12ef851f308081e8a4c3c4c63d2b465a09", "additions": 0, "patch": "@@ -1,5 +1,4 @@\n Url           = require 'url'\n-Path          = require 'path'\n \n Robot         = require '../src/robot'\n Adapter       = require '../src/adapter'", "changes": 1}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/test_adapter.coffee?ref=fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213", "filename": "test/test_adapter.coffee", "sha": "464090415c47109523e91779d4f40e19495c9cf1", "additions": 1, "patch": "@@ -0,0 +1 @@\n+# TODO", "changes": 1}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_brain.coffee", "previous_filename": "test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/test_brain.coffee?ref=fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213", "filename": "test/test_brain.coffee", "sha": "d970598c6511f776794eb65c794d853d2ccec2b3", "additions": 0, "changes": 0}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/test_creator.coffee?ref=fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213", "filename": "test/test_creator.coffee", "sha": "464090415c47109523e91779d4f40e19495c9cf1", "additions": 1, "patch": "@@ -0,0 +1 @@\n+# TODO", "changes": 1}, {"status": "renamed", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_google_images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_google_images.coffee", "previous_filename": "test/google_images_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/test_google_images.coffee?ref=fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213", "filename": "test/test_google_images.coffee", "sha": "b347616ebd33f907e499f8fc4adc4357918e9b56", "additions": 4, "patch": "@@ -1,14 +1,13 @@\n-Tests  = require './tests'\n assert = require 'assert'\n-helper = Tests.helper()\n \n-Robot         = require '../src/robot'\n+Helper  = require './helper'\n+helper  = Helper.helper()\n+\n {TextMessage} = require '../src/message'\n \n require('../src/scripts/google-images') helper\n \n-# start up a danger room for google images\n-danger = Tests.danger helper, (req, res, url) ->\n+danger = Helper.danger helper, (req, res, url) ->\n   res.writeHead 200\n   res.end JSON.stringify(\n     responseData:\n@@ -17,7 +16,6 @@ danger = Tests.danger helper, (req, res, url) ->\n       ]\n   )\n \n-# callbacks for when hubot sends messages\n mu    = \"http://mustachify.me/?src=\"\n tests = [\n   (msg) -> assert.equal \"#{mu}(foo)#.png\", msg\n@@ -30,7 +28,6 @@ tests = [\n   (msg) -> assert.equal \"(animated foo)#.png\", msg\n ]\n \n-# run the async tests\n messages = [\n   'helper: stache me foo',\n   'helper: stache foo',", "changes": 11}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/test_listener.coffee?ref=fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213", "filename": "test/test_listener.coffee", "sha": "464090415c47109523e91779d4f40e19495c9cf1", "additions": 1, "patch": "@@ -0,0 +1 @@\n+# TODO", "changes": 1}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/test_message.coffee?ref=fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213", "filename": "test/test_message.coffee", "sha": "464090415c47109523e91779d4f40e19495c9cf1", "additions": 1, "patch": "@@ -0,0 +1 @@\n+# TODO", "changes": 1}, {"status": "renamed", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_robot.coffee", "previous_filename": "test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/test_robot.coffee?ref=fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213", "filename": "test/test_robot.coffee", "sha": "1565615531e9a95d7b41932eedd5d9ebfc98fc5d", "additions": 3, "patch": "@@ -1,7 +1,7 @@\n-Tests  = require './tests'\n assert = require 'assert'\n-helper = Tests.helper()\n-require './scripts/test'\n+\n+Helper = require './helper'\n+helper = Helper.helper()\n \n server = require('http').createServer (req, res) ->\n   res.writeHead 200\n@@ -23,7 +23,6 @@ server.listen 9001, ->\n   assert.equal 3, helper.sent.length\n   assert.ok helper.sent[2].match(/^(1|2)$/)\n \n-\n   # Test that when we message a room, the 'recipient' is the robot user and the room attribute is set properly\n   helper.messageRoom \"chat@example.com\", \"Hello room\"\n   assert.equal 4, helper.sent.length\n@@ -35,7 +34,6 @@ server.listen 9001, ->\n   assert.equal 5, helper.sent.length\n   assert.equal 'catch-all', helper.sent[4]\n \n-\n   # set a callback for when the next message is replied to\n   helper.cb = (msg) ->\n     assert.equal 6, helper.sent.length", "changes": 8}, {"status": "renamed", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_rules.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_rules.coffee", "previous_filename": "test/rules_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/test_rules.coffee?ref=fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213", "filename": "test/test_rules.coffee", "sha": "d8eda37e0cc6d264e6b3eeab6ab172c581cbf0f2", "additions": 4, "patch": "@@ -1,6 +1,8 @@\n-Tests  = require './tests'\n assert = require 'assert'\n-helper = Tests.helper()\n+\n+Helper = require './helper'\n+helper = Helper.helper()\n+\n require('../src/scripts/rules') helper\n \n tests = [", "changes": 6}, {"status": "renamed", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_user.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213/test/test_user.coffee", "previous_filename": "test/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/test_user.coffee?ref=fefdd8c7e5e4e9bb2dd16ae50e4b52b0d5caf213", "filename": "test/test_user.coffee", "sha": "195ba4e8d9907db1e393ac063e80734bb3e793e5", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n-User = require '../src/user'\n assert = require 'assert'\n \n+User = require '../src/user'\n \n user = new User \"Fake User\", {name: 'fake', type: \"groupchat\"}\n assert.equal \"Fake User\", user.id", "changes": 2}], "298": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4ab35c301bbfcea76801c845310b58a62fde02f2/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4ab35c301bbfcea76801c845310b58a62fde02f2/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=4ab35c301bbfcea76801c845310b58a62fde02f2", "filename": "src/robot.coffee", "sha": "7280d10c5d14bc4651c8451d5f862f3dd023152f", "additions": 1, "patch": "@@ -152,7 +152,7 @@ class Robot\n         require(full) @\n         @parseHelp \"#{path}/#{file}\"\n       catch error\n-        @logger.error \"Unable to load #{path}: #{error}\\n#{error.stack}\"\n+        @logger.error \"Unable to load #{full}: #{error}\\n#{error.stack}\"\n \n   # Public: Load scripts specfic in the `hubot-scripts.json` file.\n   #", "changes": 2}], "299": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8e8176f7908a3d558681bc98d0727c310127b59a/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8e8176f7908a3d558681bc98d0727c310127b59a/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=8e8176f7908a3d558681bc98d0727c310127b59a", "filename": "src/robot.coffee", "sha": "1e0d55c16db6410975098a186859c338a7ba31df", "additions": 1, "patch": "@@ -161,7 +161,7 @@ class Robot\n   #\n   # Returns nothing.\n   loadHubotScripts: (path, scripts) ->\n-    @logger.info \"Loading hubot-scripts from #{path}\"\n+    @logger.debug \"Loading hubot-scripts from #{path}\"\n     for script in scripts\n       @loadFile path, script\n ", "changes": 2}], "301": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6ad7f9184bbf2bfe2ac9b83692207000fd12baf7/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/6ad7f9184bbf2bfe2ac9b83692207000fd12baf7/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=6ad7f9184bbf2bfe2ac9b83692207000fd12baf7", "filename": "src/creator.coffee", "sha": "feab53c0a24ff35da5349647d18b30099a4c5c40", "additions": 1, "patch": "@@ -17,7 +17,7 @@ class Creator\n   mkdirDashP: (path) ->\n     Path.exists path, (exists) ->\n       unless exists\n-        Fs.mkdir path, 0o0755, (err) ->\n+        Fs.mkdir path, 0x0755, (err) ->\n           throw err if err\n \n   # Copy the contents of a file from one place to another.", "changes": 2}], "302": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/38d5c5a52cb9aae0b093448443e0012044d4ff3b/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/38d5c5a52cb9aae0b093448443e0012044d4ff3b/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=38d5c5a52cb9aae0b093448443e0012044d4ff3b", "filename": "package.json", "sha": "88ab425268744fa538eed776d196c7d7609ccd05", "additions": 2, "patch": "@@ -20,7 +20,8 @@\n     \"scoped-http-client\": \"0.9.7\",\n     \"log\": \"1.3.0\",\n     \"connect\": \"2.1.0\",\n-    \"connect_router\": \"1.8.6\"\n+    \"connect_router\": \"1.8.6\",\n+    \"underscore\": \"1.3.3\"\n   },\n \n   \"main\": \"./index\",", "changes": 3}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/38d5c5a52cb9aae0b093448443e0012044d4ff3b/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/38d5c5a52cb9aae0b093448443e0012044d4ff3b/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=38d5c5a52cb9aae0b093448443e0012044d4ff3b", "filename": "src/scripts/google-images.coffee", "sha": "63191285a6702f192ea8f389f95c98a1e004316c", "additions": 7, "patch": "@@ -4,13 +4,16 @@\n # hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.\n # hubot mustache me <url> - Adds a mustache to the specified URL.\n # hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n+\n+_ = require('underscore')._\n+\n module.exports = (robot) ->\n   robot.respond /(image|img)( me)? (.*)/i, (msg) ->\n     imageMe msg, msg.match[3], (url) ->\n       msg.send url\n \n   robot.respond /animate me (.*)/i, (msg) ->\n-    imageMe msg, \"animated #{msg.match[1]}\", (url) ->\n+    imageMe msg, msg.match[1], as_filetype: \"gif\", (url) ->\n       msg.send url\n \n   robot.respond /(?:mo?u)?sta(?:s|c)he?(?: me)? (.*)/i, (msg) ->\n@@ -24,9 +27,10 @@ module.exports = (robot) ->\n       imageMe msg, imagery, (url) ->\n         msg.send \"#{mustachify}#{url}\"\n \n-imageMe = (msg, query, cb) ->\n+imageMe = (msg, query, queryOptions, cb) ->\n+  cb = queryOptions if typeof queryOptions == 'function' \n   msg.http('http://ajax.googleapis.com/ajax/services/search/images')\n-    .query(v: \"1.0\", rsz: '8', q: query, safe: 'active')\n+    .query(_.extend({v: \"1.0\", rsz: '8', q: query, safe: 'active'}, queryOptions ? {}))\n     .get() (err, res, body) ->\n       images = JSON.parse(body)\n       images = images.responseData.results", "changes": 10}], "304": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e60816e2ae4d5801a4592e8fb46d230977887361/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/e60816e2ae4d5801a4592e8fb46d230977887361/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=e60816e2ae4d5801a4592e8fb46d230977887361", "filename": "package.json", "sha": "9d421528e58bff409ae2b686f48ee22b05c17ab1", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\":        \"hubot\",\n-  \"version\":     \"2.2.1\",\n+  \"version\":     \"2.2.2\",\n   \"author\":      \"hubot\",\n   \"keywords\":    \"github hubot campfire bot\",\n   \"description\": \"A simple helpful Robot for your Company\",", "changes": 2}], "309": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6aaa8033ef91d4134c79a51c47e44a6ad5fecd9d/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/6aaa8033ef91d4134c79a51c47e44a6ad5fecd9d/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=6aaa8033ef91d4134c79a51c47e44a6ad5fecd9d", "filename": "package.json", "sha": "c98abed126f81db65f32945414d273c588965dea", "additions": 1, "patch": "@@ -19,7 +19,7 @@\n     \"optparse\": \"1.0.3\",\n     \"scoped-http-client\": \"0.9.7\",\n     \"log\": \"1.3.0\",\n-    \"connect\": \"2.1.0\",\n+    \"connect\": \"2.3.4\",\n     \"connect_router\": \"1.8.6\"\n   },\n ", "changes": 2}], "310": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/68f6271406fe26df80b997b7ebbde01a0bf29590/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/68f6271406fe26df80b997b7ebbde01a0bf29590/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=68f6271406fe26df80b997b7ebbde01a0bf29590", "filename": "src/robot.coffee", "sha": "7bef64d7c1246c01744ee0a594c0373e4262285d", "additions": 1, "patch": "@@ -265,7 +265,7 @@ class Robot\n   #\n   # Returns nothing.\n   messageRoom: (room, strings...) ->\n-    user = @userForId @id, { room: room }\n+    user = { room: room }\n     @adapter.send user, strings...\n \n   # Public: A helper reply function which delegates to the adapter's reply", "changes": 2}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/68f6271406fe26df80b997b7ebbde01a0bf29590/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/68f6271406fe26df80b997b7ebbde01a0bf29590/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=68f6271406fe26df80b997b7ebbde01a0bf29590", "filename": "test/robot_test.coffee", "sha": "fb37ed643e37d8527a900803f9c469548ff9f5fc", "additions": 9, "patch": "@@ -28,17 +28,22 @@ server.listen 9001, ->\n   helper.messageRoom \"chat@example.com\", \"Hello room\"\n   assert.equal 4, helper.sent.length\n   assert.equal \"chat@example.com\", helper.recipients[3].room\n-  assert.equal helper.id, helper.recipients[3].id\n   assert.equal \"Hello room\", helper.sent[3]\n \n-  helper.adapter.receive 'foobar'\n+  helper.messageRoom \"chat2@example.com\", \"Hello to another room\"\n   assert.equal 5, helper.sent.length\n-  assert.equal 'catch-all', helper.sent[4]\n+  assert.equal \"chat2@example.com\", helper.recipients[4].room\n+  assert.equal \"Hello to another room\", helper.sent[4]\n+\n+\n+  helper.adapter.receive 'foobar'\n+  assert.equal 6, helper.sent.length\n+  assert.equal 'catch-all', helper.sent[5]\n \n \n   # set a callback for when the next message is replied to\n   helper.cb = (msg) ->\n-    assert.equal 6, helper.sent.length\n+    assert.equal 7, helper.sent.length\n     assert.equal 'fetched', msg\n     helper.close()\n     server.close()", "changes": 13}], "313": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/e19650b4a1db41dc7bdc9903b45ee2874337836f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e19650b4a1db41dc7bdc9903b45ee2874337836f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=e19650b4a1db41dc7bdc9903b45ee2874337836f", "filename": "src/robot.coffee", "sha": "4fddef308a0ce706c68f307f88a9d421abcc09f6", "additions": 3, "patch": "@@ -249,14 +249,14 @@ class Robot\n       for i, line of body.split \"\\n\"\n         break unless line[0] is '#' or line.substr 0, 2 is '//'\n \n-        cleaned_line = line[2..line.length].replace \"\\n\", \"\"\n+        cleaned_line = line[2..line.length].replace(\"\\n\", \"\")\n \n-        if cleaned_line.length isnt 0 and cleaned_line.toLowerCase() isnt 'none'\n+        if cleaned_line.length isnt 0 and cleaned_line.trim().toLowerCase() isnt 'none'\n           if cleaned_line[0..1] isnt '  '\n             current_section = cleaned_line.replace(':', '').toLowerCase()\n           else\n             if current_section is 'commands'\n-              @commands.push cleaned_line\n+              @commands.push cleaned_line.trim()\n \n   # Public: A helper send function which delegates to the adapter's send\n   # function.", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e19650b4a1db41dc7bdc9903b45ee2874337836f/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e19650b4a1db41dc7bdc9903b45ee2874337836f/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=e19650b4a1db41dc7bdc9903b45ee2874337836f", "filename": "src/scripts/help.coffee", "sha": "e9dd232ca6070978e03c7e0f4f8c829b85cf960e", "additions": 52, "patch": "@@ -5,9 +5,51 @@\n #   hubot help - Displays all of the help commands that Hubot knows about.\n #   hubot help <query> - Displays all help commands that match <query>.\n #\n+# URLS:\n+#   /hubot/help\n+#\n # Notes:\n #   These commands are grabbed from comment blocks at the top of each file.\n \n+helpContents = (name, commands) ->\n+\n+  \"\"\"\n+<html>\n+  <head>\n+  <title>#{name} Help</title>\n+  <style type=\"text/css\">\n+    body {\n+      background: #d3d6d9;\n+      color: #636c75;\n+      text-shadow: 0 1px 1px rgba(255, 255, 255, .5);\n+      font-family: Helvetica, Arial, sans-serif;\n+    }\n+    h1 {\n+      margin: 8px 0;\n+      padding: 0;\n+    }\n+    .commands {\n+      font-size: 13px;\n+    }\n+    p {\n+      border-bottom: 1px solid #eee;\n+      margin: 6px 0 0 0;\n+      padding-bottom: 5px;\n+    }\n+    p:last-child {\n+      border: 0;\n+    }\n+  </style>\n+  </head>\n+  <body>\n+    <h1>#{name} Help</h1>\n+    <div class=\"commands\">\n+      #{commands}\n+    </div>\n+  </body>\n+</html>\n+  \"\"\"\n+\n module.exports = (robot) ->\n   robot.respond /help\\s*(.*)?$/i, (msg) ->\n     cmds = robot.helpCommands()\n@@ -19,6 +61,15 @@ module.exports = (robot) ->\n     emit = cmds.join \"\\n\"\n \n     unless robot.name.toLowerCase() is 'hubot'\n-      emit = emit.replace /(H|h)ubot/g, robot.name\n+      emit = emit.replace /hubot/ig, robot.name\n \n     msg.send emit\n+\n+  robot.router.get '/hubot/help', (req, res) ->\n+    cmds = robot.helpCommands()\n+    emit = \"<p>#{cmds.join '</p><p>'}</p>\"\n+\n+    emit = emit.replace /hubot/ig, \"<b>#{robot.name}</b>\"\n+\n+    res.setHeader 'content-type', 'text/html'\n+    res.end helpContents robot.name, emit", "changes": 53}], "317": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/57f189e919d51eef7ece7c40ebe1b8135cf39d2e/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/57f189e919d51eef7ece7c40ebe1b8135cf39d2e/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=57f189e919d51eef7ece7c40ebe1b8135cf39d2e", "filename": "src/scripts/roles.coffee", "sha": "a05d694907a3abf9d863b62f925f8416fe2464b8", "additions": 1, "patch": "@@ -16,7 +16,7 @@ module.exports = (robot) ->\n     \"Be more specific, I know #{users.length} people named like that: #{(user.name for user in users).join(\", \")}\"\n \n   robot.respond /who is @?([\\w .-]+)\\?*$/i, (msg) ->\n-    name = msg.match[1]\n+    name = msg.match[1].trim()\n \n     if name is \"you\"\n       msg.send \"Who ain't I?\"", "changes": 2}], "322": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/394db42002b0d98606774d22a27a5ab55416e07e/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/394db42002b0d98606774d22a27a5ab55416e07e/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=394db42002b0d98606774d22a27a5ab55416e07e", "filename": "src/robot.coffee", "sha": "20577f7ef77a89ff6d66b85059cfea94faeac960", "additions": 1, "patch": "@@ -247,7 +247,7 @@ class Robot\n       throw err if err?\n \n       for i, line of body.split \"\\n\"\n-        break unless line[0] is '#' or line.substr 0, 2 is '//'\n+        break unless line[0] is '#' or line.substr(0, 2) is '//'\n \n         cleaned_line = line[2..line.length].replace(\"\\n\", \"\")\n ", "changes": 2}], "325": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fedfa5a4a22639135acc76ac681e375c18312a6a/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/fedfa5a4a22639135acc76ac681e375c18312a6a/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=fedfa5a4a22639135acc76ac681e375c18312a6a", "filename": "bin/hubot", "sha": "75413411ee36d9be489b5b1347951749a21b99ea", "additions": 1, "patch": "@@ -94,7 +94,7 @@ else\n     robot.load scriptsPath\n \n     scriptsFile = Path.resolve \"hubot-scripts.json\"\n-    Path.exists scriptsFile, (exists) =>\n+    Fs.exists scriptsFile, (exists) =>\n       if exists\n         Fs.readFile scriptsFile, (err, data) ->\n           scripts = JSON.parse data", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fedfa5a4a22639135acc76ac681e375c18312a6a/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fedfa5a4a22639135acc76ac681e375c18312a6a/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=fedfa5a4a22639135acc76ac681e375c18312a6a", "filename": "src/creator.coffee", "sha": "1a6533ad1f88af14dd8c19d073301b1839ac0d3e", "additions": 1, "patch": "@@ -15,7 +15,7 @@ class Creator\n   #\n   # Returns nothing.\n   mkdirDashP: (path) ->\n-    Path.exists path, (exists) ->\n+    Fs.exists path, (exists) ->\n       unless exists\n         Fs.mkdir path, 0o0755, (err) ->\n           throw err if err", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fedfa5a4a22639135acc76ac681e375c18312a6a/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fedfa5a4a22639135acc76ac681e375c18312a6a/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=fedfa5a4a22639135acc76ac681e375c18312a6a", "filename": "src/robot.coffee", "sha": "c779713201a13a51b0a9bb9c03d2e2ab83af5c4b", "additions": 1, "patch": "@@ -134,7 +134,7 @@ class Robot\n   load: (path) ->\n     @logger.debug \"Loading scripts from #{path}\"\n \n-    Path.exists path, (exists) =>\n+    Fs.exists path, (exists) =>\n       if exists\n         @loadPaths.push path\n         for file in Fs.readdirSync(path)", "changes": 2}], "327": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/702b51871424eef244d5452f635845f0eb08d658/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/702b51871424eef244d5452f635845f0eb08d658/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=702b51871424eef244d5452f635845f0eb08d658", "filename": "src/scripts/roles.coffee", "sha": "c8a34044d1fb86f410cac4a58a5d5e72dd09fceb", "additions": 4, "patch": "@@ -16,6 +16,7 @@ module.exports = (robot) ->\n     \"Be more specific, I know #{users.length} people named like that: #{(user.name for user in users).join(\", \")}\"\n \n   robot.respond /who is @?([\\w .-]+)\\?*$/i, (msg) ->\n+    joiner = ', '\n     name = msg.match[1].trim()\n \n     if name is \"you\"\n@@ -28,7 +29,9 @@ module.exports = (robot) ->\n         user = users[0]\n         user.roles = user.roles or [ ]\n         if user.roles.length > 0\n-          msg.send \"#{name} is #{user.roles.join(\", \")}.\"\n+          if user.roles.join('').search(',') > -1\n+            joiner = '; '\n+          msg.send \"#{name} is #{user.roles.join(joiner)}.\"\n         else\n           msg.send \"#{name} is nothing to me.\"\n       else if users.length > 1", "changes": 5}], "328": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c7d4948546c00d44e64a19c9a6c4674a21f51950/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c7d4948546c00d44e64a19c9a6c4674a21f51950/src/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=c7d4948546c00d44e64a19c9a6c4674a21f51950", "filename": "src/scripts/translate.coffee", "sha": "fafa5d0848960415230a2ef324571dd6b4ba4a88", "additions": 12, "patch": "@@ -9,6 +9,9 @@ languages =\n   \"af\": \"Afrikaans\",\n   \"sq\": \"Albanian\",\n   \"ar\": \"Arabic\",\n+  \"az\": \"Azerbaijani\",\n+  \"eu\": \"Basque\",\n+  \"bn\": \"Bengali\",\n   \"be\": \"Belarusian\",\n   \"bg\": \"Bulgarian\",\n   \"ca\": \"Catalan\",\n@@ -19,13 +22,17 @@ languages =\n   \"da\": \"Danish\",\n   \"nl\": \"Dutch\",\n   \"en\": \"English\",\n+  \"eo\": \"Esperanto\",\n   \"et\": \"Estonian\",\n   \"tl\": \"Filipino\",\n   \"fi\": \"Finnish\",\n   \"fr\": \"French\",\n   \"gl\": \"Galician\",\n+  \"ka\": \"Georgian\",\n   \"de\": \"German\",\n   \"el\": \"Greek\",\n+  \"gu\": \"Gujarati\",\n+  \"ht\": \"Haitian Creole\",\n   \"iw\": \"Hebrew\",\n   \"hi\": \"Hindi\",\n   \"hu\": \"Hungarian\",\n@@ -34,7 +41,9 @@ languages =\n   \"ga\": \"Irish\",\n   \"it\": \"Italian\",\n   \"ja\": \"Japanese\",\n+  \"kn\": \"Kannada\",\n   \"ko\": \"Korean\",\n+  \"la\": \"Latin\",\n   \"lv\": \"Latvian\",\n   \"lt\": \"Lithuanian\",\n   \"mk\": \"Macedonian\",\n@@ -52,9 +61,12 @@ languages =\n   \"es\": \"Spanish\",\n   \"sw\": \"Swahili\",\n   \"sv\": \"Swedish\",\n+  \"ta\": \"Tamil\",\n+  \"te\": \"Telugu\",\n   \"th\": \"Thai\",\n   \"tr\": \"Turkish\",\n   \"uk\": \"Ukranian\",\n+  \"ur\": \"Urdu\",\n   \"vi\": \"Vietnamese\",\n   \"cy\": \"Welsh\",\n   \"yi\": \"Yiddish\"", "changes": 12}], "330": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/63c7573a3c6f82fe9564c01380bf62777071a856/src/scripts/httpd.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/63c7573a3c6f82fe9564c01380bf62777071a856/src/scripts/httpd.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/httpd.coffee?ref=63c7573a3c6f82fe9564c01380bf62777071a856", "filename": "src/scripts/httpd.coffee", "sha": "ba5db61a0e3052f693488119dcc648e9f76d799d", "additions": 5, "patch": "@@ -15,6 +15,7 @@\n #   /hubot/ping\n #   /hubot/time\n #   /hubot/info\n+#   /hubot/ip\n \n spawn = require('child_process').spawn\n \n@@ -35,3 +36,7 @@ module.exports = (robot) ->\n     child.stdout.on 'data', (data) ->\n       res.end \"#{data.toString().trim()} running node #{process.version} [pid: #{process.pid}]\"\n       child.stdin.end()\n+\n+  robot.router.get \"/hubot/ip\", (req, res) ->\n+    robot.http('http://checkip.dyndns.org').get() (err, r, body) ->\n+      res.end body", "changes": 5}], "334": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/4b6f9aa1a5db3bc71c3848a00d52bca68a4ebe8f/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/4b6f9aa1a5db3bc71c3848a00d52bca68a4ebe8f/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=4b6f9aa1a5db3bc71c3848a00d52bca68a4ebe8f", "filename": "bin/hubot", "sha": "56c4b6436123bc516aab7789e6f513f97fe8afdc", "additions": 5, "patch": "@@ -75,7 +75,7 @@ if Options.create\n   creator.run()\n \n else\n-  adapterPath = Path.resolve __dirname, \"..\", \"src\", \"adapters\"\n+  adapterPath = Path.join __dirname, \"..\", \"src\", \"adapters\"\n \n   robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name\n \n@@ -87,21 +87,20 @@ else\n   robot.alias = Options.alias\n \n   loadScripts = ->\n-    scriptsPath = Path.resolve \".\", \"scripts\"\n+    scriptsPath = Path.join __dirname, \"..\", \"scripts\"\n     robot.load scriptsPath\n \n-    scriptsPath = Path.resolve \"src\", \"scripts\"\n+    scriptsPath = Path.join __dirname, \"..\", \"src\", \"scripts\"\n     robot.load scriptsPath\n \n-    scriptsFile = Path.resolve \"hubot-scripts.json\"\n+    scriptsFile = Path.join __dirname, \"..\", \"hubot-scripts.json\"\n     Path.exists scriptsFile, (exists) =>\n       if exists\n         Fs.readFile scriptsFile, (err, data) ->\n           scripts = JSON.parse data\n-          scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n+          scriptsPath = Path.join __dirname, \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n           robot.loadHubotScripts scriptsPath, scripts\n \n   robot.adapter.on 'connected', loadScripts\n \n   robot.run()\n-", "changes": 11}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4b6f9aa1a5db3bc71c3848a00d52bca68a4ebe8f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4b6f9aa1a5db3bc71c3848a00d52bca68a4ebe8f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=4b6f9aa1a5db3bc71c3848a00d52bca68a4ebe8f", "filename": "src/robot.coffee", "sha": "4639b851ea71b4eacdee3b52120c685871c202ce", "additions": 1, "patch": "@@ -363,7 +363,7 @@ class Robot\n   #\n   # Returns a String of the version number.\n   parseVersion: ->\n-    package_path = __dirname + '/../package.json'\n+    package_path = Path.join __dirname, '..', 'package.json'\n     data = Fs.readFileSync package_path, 'utf8'\n     content = JSON.parse data\n     @version = content.version", "changes": 2}], "335": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/a9b4e1c662e28f64c43da8a1285cada16aa43aa1/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a9b4e1c662e28f64c43da8a1285cada16aa43aa1/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=a9b4e1c662e28f64c43da8a1285cada16aa43aa1", "filename": "src/scripts/google-images.coffee", "sha": "39809e2554a8faa9ca22c07a5c42904eea52d9b9", "additions": 4, "patch": "@@ -24,13 +24,15 @@ module.exports = (robot) ->\n     if imagery.match /^https?:\\/\\//i\n       msg.send \"#{mustachify}#{imagery}\"\n     else\n-      imageMe msg, imagery, (url) ->\n+      imageMe msg, imagery, false, true, (url) ->\n         msg.send \"#{mustachify}#{url}\"\n \n-imageMe = (msg, query, animated, cb) ->\n+imageMe = (msg, query, animated, faces, cb) ->\n   cb = animated if typeof animated == 'function'\n+  cb = faces if typeof faces == 'function'\n   q = v: '1.0', rsz: '8', q: query, safe: 'active'\n   q.as_filetype = 'gif' if typeof animated is 'boolean' and animated is true\n+  q.imgtype = 'face' if typeof faces is 'boolean' and faces is true\n   msg.http('http://ajax.googleapis.com/ajax/services/search/images')\n     .query(q)\n     .get() (err, res, body) ->", "changes": 6}], "336": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/0534f21a0cbb5ae64a73b429b609bdb86248bc19/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0534f21a0cbb5ae64a73b429b609bdb86248bc19/src/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=0534f21a0cbb5ae64a73b429b609bdb86248bc19", "filename": "src/scripts/translate.coffee", "sha": "f3f3a50f432c02377c1855988fcd1a74c3538eaf", "additions": 2, "patch": "@@ -97,10 +97,10 @@ module.exports = (robot) ->\n       .header('User-Agent', 'Mozilla/5.0')\n       .get() (err, res, body) ->\n         data   = body\n-        if data.length > 4 && data[0] == '['\n+        if data.length > 4 and data[0] == '['\n           parsed = eval(data)\n           language =languages[parsed[2]]\n-          parsed = parsed[0] && parsed[0][0] && parsed[0][0][0]\n+          parsed = parsed[0] and parsed[0][0] and parsed[0][0][0]\n           if parsed\n             if msg.match[2] is undefined\n               msg.send \"#{term} is #{language} for #{parsed}\"", "changes": 4}], "338": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/40522d9ce09455d944d5a500f1ba222d2b3de198/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/40522d9ce09455d944d5a500f1ba222d2b3de198/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=40522d9ce09455d944d5a500f1ba222d2b3de198", "filename": "bin/hubot", "sha": "dc9497203e444006c6ce22f8ad39f4733ee7e811", "additions": 3, "patch": "@@ -90,6 +90,9 @@ else\n     scriptsPath = Path.resolve \".\", \"scripts\"\n     robot.load scriptsPath\n \n+    scriptsPath = Path.resolve \"..\", \"scripts\"\n+    robot.load scriptsPath\n+\n     scriptsPath = Path.resolve \"src\", \"scripts\"\n     robot.load scriptsPath\n ", "changes": 3}], "339": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/b6b8dbb573e00ca0b16410212c49a6fab32939f4/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/b6b8dbb573e00ca0b16410212c49a6fab32939f4/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=b6b8dbb573e00ca0b16410212c49a6fab32939f4", "filename": "bin/hubot", "sha": "65c1dfea869eebe3c2e438034b2dc964d97ca495", "additions": 12, "patch": "@@ -75,7 +75,7 @@ if Options.create\n   creator.run()\n \n else\n-  adapterPath = Path.resolve __dirname, \"..\", \"src\", \"adapters\"\n+  adapterPath = Path.join __dirname, \"..\", \"src\", \"adapters\"\n \n   robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name\n \n@@ -87,21 +87,27 @@ else\n   robot.alias = Options.alias\n \n   loadScripts = ->\n-    scriptsPath = Path.resolve \".\", \"scripts\"\n+    scriptsPath = Path.join __dirname, \"..\", \"scripts\"\n     robot.load scriptsPath\n \n-    scriptsPath = Path.resolve \"src\", \"scripts\"\n+    scriptsPath = Path.join __dirname, \"..\", \"src\", \"scripts\"\n     robot.load scriptsPath\n \n-    scriptsFile = Path.resolve \"hubot-scripts.json\"\n+    scriptsFile = Path.join __dirname, \"..\", \"hubot-scripts.json\"\n+    if not Fs.existsSync scriptsFile\n+      scriptsFile = Path.join __dirname, \"..\", \"..\", \"..\", \"hubot-scripts.json\"\n+\n+    scriptsPath = Path.join __dirname, \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n+    if not Fs.existsSync scriptsPath\n+      scriptsPath = Path.join __dirname, \"..\", \"..\", \"hubot-scripts\", \"src\", \"scripts\"\n+\n     Path.exists scriptsFile, (exists) =>\n       if exists\n         Fs.readFile scriptsFile, (err, data) ->\n           scripts = JSON.parse data\n-          scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n           robot.loadHubotScripts scriptsPath, scripts\n \n   robot.adapter.on 'connected', loadScripts\n \n   robot.run()\n-\n+  \n\\ No newline at end of file", "changes": 18}], "341": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/89bdc04258073ce451984a15c4f57157a174adf4/src/scripts/httpd.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/89bdc04258073ce451984a15c4f57157a174adf4/src/scripts/httpd.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/httpd.coffee?ref=89bdc04258073ce451984a15c4f57157a174adf4", "filename": "src/scripts/httpd.coffee", "sha": "79cf60cbffc5fbfd085a68477b9363170a833c73", "additions": 1, "patch": "@@ -38,5 +38,5 @@ module.exports = (robot) ->\n       child.stdin.end()\n \n   robot.router.get \"/hubot/ip\", (req, res) ->\n-    robot.http('http://checkip.dyndns.org').get() (err, r, body) ->\n+    robot.http('http://ifconfig.me/ip').get() (err, r, body) ->\n       res.end body", "changes": 2}], "344": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/936acd7cde186791e54a5137f214150f65142d8e/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/936acd7cde186791e54a5137f214150f65142d8e/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=936acd7cde186791e54a5137f214150f65142d8e", "filename": "README.md", "sha": "660b77101b7e9e848234a94b6d2e8d6dc7ffd6d2", "additions": 27, "patch": "@@ -103,6 +103,33 @@ callback function that accepts a request and a response.\n In addition, if you set `CONNECT_STATIC`, the HTTP listener will serve static\n files from this directory.\n \n+## Eventsystem\n+\n+Hubot has also an node.js [EventEmitter][event-emitter] attached. It can be used for data exchange between scripts.\n+\n+```coffeescript\n+# src/scripts/github-commits.coffee\n+module.exports = (robot) ->\n+  robot.router.post \"/hubot/gh-commits\", (req, res) ->\n+  \t#code goes here\n+    robot.emit \"commit\", {\n+        user    : {}, #hubot user object\n+        repo    : 'https://github.com/github/hubot',\n+        hash  : '2e1951c089bd865839328592ff673d2f08153643'\n+    }\n+```\n+```coffeescript\n+# src/scripts/heroku.coffee\n+module.exports = (robot) ->\n+  robot.on \"commit\", (commit) ->\n+    robot.send commit.user, \"Will now deploy #{commit.hash} from #{commit.repo}!\"\n+    #deploy code goes here\n+```\n+\n+If you'll provide an event, it's very recommended to include a hubot user object in data. In case of other reacting scripts want to respond to chat.\n+\n+[event-emitter]: http://nodejs.org/api/events.html#events_class_events_eventemitter \n+\n ## Testing hubot locally\n \n Install all of the required dependencies by running `npm install`.", "changes": 27}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/936acd7cde186791e54a5137f214150f65142d8e/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/936acd7cde186791e54a5137f214150f65142d8e/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=936acd7cde186791e54a5137f214150f65142d8e", "filename": "src/robot.coffee", "sha": "3ef45a689d13cc26ca6dad4c9f4408a843db26df", "additions": 27, "patch": "@@ -1,7 +1,8 @@\n-Fs         = require 'fs'\n-Log        = require 'log'\n-Path       = require 'path'\n-HttpClient = require 'scoped-http-client'\n+Fs           = require 'fs'\n+Log          = require 'log'\n+Path         = require 'path'\n+HttpClient   = require 'scoped-http-client'\n+EventEmitter = require('events').EventEmitter;\n \n User                                                    = require './user'\n Brain                                                   = require './brain'\n@@ -36,6 +37,7 @@ class Robot\n   constructor: (adapterPath, adapter, httpd, name = 'Hubot') ->\n     @name         = name\n     @brain        = new Brain\n+    @events      = new EventEmitter\n     @alias        = false\n     @adapter      = null\n     @Response     = Response\n@@ -323,6 +325,27 @@ class Robot\n     user = { room: room }\n     @adapter.send user, strings...\n \n+  # Public: A wrapper around the EventEmitter API to make usage \n+  # semanticly better.\n+  #\n+  # event    - The event name.\n+  # listener - A Function that is called with the event parameter\n+  #            when event happens.\n+  #\n+  # Returns nothing.\n+  on: (event, args...) ->\n+    @events.on event, args...\n+\n+  # Public: A wrapper around the EventEmitter API to make usage \n+  # semanticly better.\n+  #\n+  # event   - The event name.\n+  # args...  - Arguments emitted by the event\n+  #\n+  # Returns nothing.\n+  emit: (event, args...) ->\n+    @events.emit event, args...\n+\n   # Public: Kick off the event loop for the adapter\n   #\n   # Returns nothing.", "changes": 31}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/936acd7cde186791e54a5137f214150f65142d8e/src/scripts/events.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/936acd7cde186791e54a5137f214150f65142d8e/src/scripts/events.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/events.coffee?ref=936acd7cde186791e54a5137f214150f65142d8e", "filename": "src/scripts/events.coffee", "sha": "b22010e6ca0ae89bd8642b9de427df7f4750da80", "additions": 19, "patch": "@@ -0,0 +1,19 @@\n+# Description:\n+#   Event system related utilities\n+#\n+# Commands:\n+#   hubot fake event <event> - Triggers the <event> event for debugging reasons\n+#\n+# Events:\n+#   debug - {user: <user object to send message to>}\n+\n+util = require 'util'\n+\n+module.exports = (robot) ->\n+\n+  robot.respond /FAKE EVENT (.*)/i, (msg) ->\n+    msg.send \"fake event '#{msg.match[1]}' triggered\"\n+    robot.emit msg.match[1], {user: msg.message.user}\n+\n+  robot.on 'debug', (event) ->\n+    robot.send event.user, util.inspect event\n\\ No newline at end of file", "changes": 19}], "345": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3de3502df81ef8e735d3a8606087b4d5baed9784/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3de3502df81ef8e735d3a8606087b4d5baed9784/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=3de3502df81ef8e735d3a8606087b4d5baed9784", "filename": "src/scripts/help.coffee", "sha": "7925735c8a09ed32b28d0e3392ae1f5b5d5e28e5", "additions": 1, "patch": "@@ -52,7 +52,7 @@ helpContents = (name, commands) ->\n \n module.exports = (robot) ->\n   robot.respond /help\\s*(.*)?$/i, (msg) ->\n-    cmds = robot.helpCommands().map (cmd) ->\n+    cmds = if process.env.HUBOT_ESCAPE_HELP is 'false' then robot.helpCommands() else robot.helpCommands().map (cmd) ->\n       cmd.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')\n \n     if msg.match[1]", "changes": 2}], "349": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ae91f20d588fe29aae48b1468f2621740073e428/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/ae91f20d588fe29aae48b1468f2621740073e428/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=ae91f20d588fe29aae48b1468f2621740073e428", "filename": "README.md", "sha": "fe8fbec074a03e7c3f8e2de4b7dec5b18dc97957", "additions": 52, "patch": "@@ -66,6 +66,58 @@ module.exports = (robot) ->\n There are functions for GET, POST, PUT and DELETE, which all take a route and\n callback function that accepts a request and a response.\n \n+## Robot Functionality\n+\n+### Hearing different messages\n+Hubot can <tt>hear</tt> messages based on a Regex:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.hear /problem/i, (msg) ->\n+    msg.send \"ruh-roh\"\n+```\n+\n+### Responding to messages\n+<tt>respond</tt> is similar to <tt>hear</tt> except Hubot will only respond to messages directed at him:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /hi|hello/i, (msg) ->\n+    msg.send \"Hello!\"\n+```\n+\n+Alternatively, use <tt>reply</tt> to reply directly back to the user who originated the message:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /hi|hello/i, (msg) ->\n+    msg.reply \"Hello!\"\n+```\n+\n+### Enter and Leave events\n+Hubot can react directly to enter and leave events:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.enter (msg) ->\n+    msg.send \"Welcome!\"\n+  robot.leave (msg) ->\n+    msg.send \"Goodbye!\"\n+```\n+\n+### Seeing different types of messages\n+Hubot has the ability to react to messages based on their type. For example, Campfire chatrooms will generate <tt>TextMessage</tt>, <tt>TopicChangeMessage</tt>, <tt>EnterMessage</tt>, etc.  To utilize this functionality, use the <tt>see</tt> function:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.see \"TopicChangeMessage\", (msg) ->\n+    # do something fun\n+  robot.see /TopicChangeMessage/, (msg) ->\n+    # works for funness as well\n+  robot.see TopicChangeMessage, (msg) ->\n+    # just remember to require TopicChangeMessage...\n+```\n+\n ## Testing hubot locally\n \n Install all of the required dependencies by running `npm install`.", "changes": 52}, {"status": "modified", "deletions": 13, "raw_url": "https://github.com/hubotio/hubot/raw/ae91f20d588fe29aae48b1468f2621740073e428/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ae91f20d588fe29aae48b1468f2621740073e428/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=ae91f20d588fe29aae48b1468f2621740073e428", "filename": "index.coffee", "sha": "59635e56e792009a564464a61323cb3864346a29", "additions": 15, "patch": "@@ -3,20 +3,22 @@ Brain                                                   = require './src/brain'\n Robot                                                   = require './src/robot'\n Adapter                                                 = require './src/adapter'\n Response                                                = require './src/response'\n-{Listener,TextListener}                                 = require './src/listener'\n-{TextMessage,EnterMessage,LeaveMessage,CatchAllMessage} = require './src/message'\n+{Listener,TextListener,MessageListener}                                     = require './src/listener'\n+{TextMessage,EnterMessage,LeaveMessage,TopicChangeMessage,CatchAllMessage}  = require './src/message'\n \n module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName) ->\n   new Robot adapterPath, adapterName, enableHttpd, botName\n \n-module.exports.User            = User\n-module.exports.Brain           = Brain\n-module.exports.Robot           = Robot\n-module.exports.Adapter         = Adapter\n-module.exports.Response        = Response\n-module.exports.Listener        = Listener\n-module.exports.TextListener    = TextListener\n-module.exports.TextMessage     = TextMessage\n-module.exports.EnterMessage    = EnterMessage\n-module.exports.LeaveMessage    = LeaveMessage\n-module.exports.CatchAllMessage = CatchAllMessage\n+module.exports.User               = User\n+module.exports.Brain              = Brain\n+module.exports.Robot              = Robot\n+module.exports.Adapter            = Adapter\n+module.exports.Response           = Response\n+module.exports.Listener           = Listener\n+module.exports.TextListener       = TextListener\n+module.exports.MessageListener    = MessageListener\n+module.exports.TextMessage        = TextMessage\n+module.exports.EnterMessage       = EnterMessage\n+module.exports.LeaveMessage       = LeaveMessage\n+module.exports.TopicChangeMessage = TopicChangeMessage\n+module.exports.CatchAllMessage    = CatchAllMessage", "changes": 28}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/ae91f20d588fe29aae48b1468f2621740073e428/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ae91f20d588fe29aae48b1468f2621740073e428/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=ae91f20d588fe29aae48b1468f2621740073e428", "filename": "src/adapters/campfire.coffee", "sha": "f8267faac5d66c0d2b7670c687e1f0cca2063cdd", "additions": 10, "patch": "@@ -1,9 +1,9 @@\n HTTPS          = require 'https'\n {EventEmitter} = require 'events'\n \n-Robot                                   = require '../robot'\n-Adapter                                 = require '../adapter'\n-{TextMessage,EnterMessage,LeaveMessage} = require '../message'\n+Robot                                                      = require '../robot'\n+Adapter                                                    = require '../adapter'\n+{TextMessage,EnterMessage,LeaveMessage,TopicChangeMessage} = require '../message'\n \n class Campfire extends Adapter\n   send: (user, strings...) ->\n@@ -50,6 +50,10 @@ class Campfire extends Adapter\n       unless bot.info.id == author.id\n         self.receive new LeaveMessage(author)\n \n+    bot.on \"TopicChangeMessage\", withAuthor (id, created, room, user, body, author) ->\n+      unless bot.info.id == author.id\n+        self.receive new TopicChangeMessage(author, body)\n+\n     bot.Me (err, data) ->\n       bot.info = data.user\n       bot.name = bot.info.name\n@@ -95,6 +99,9 @@ class CampfireStreaming extends EventEmitter\n     self = @\n     logger = @robot.logger\n \n+    info: (callback) ->\n+      self.get \"/room/#{id}\", callback\n+\n     show: (callback) ->\n       self.post \"/room/#{id}\", \"\", callback\n ", "changes": 13}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ae91f20d588fe29aae48b1468f2621740073e428/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ae91f20d588fe29aae48b1468f2621740073e428/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=ae91f20d588fe29aae48b1468f2621740073e428", "filename": "src/listener.coffee", "sha": "19d22a3399699c9e4a87da340355224764169e51", "additions": 26, "patch": "@@ -1,4 +1,4 @@\n-{TextMessage} = require './message'\n+{TextMessage, EnterMessage, LeaveMessage, TopicChangeMessage} = require './message'\n \n class Listener\n   # Listeners receive every message from the chat source and decide if they\n@@ -37,5 +37,30 @@ class TextListener extends Listener\n       if message instanceof TextMessage\n         message.match @regex\n \n+class MessageListener extends Listener\n+  # MessageListeners receive every message from the chat source and decide if\n+  # they wish to act on it based on the message type.\n+  #\n+  # robot     - A Robot instance\n+  # pattern   - A String or class name that should be matched\n+  # callback  - A Function that is triggered if the incoming message matches\n+  constructor: (@robot, @pattern, @callback) ->\n+    # If pattern is a string, convert it to a regex\n+    if ((typeof @pattern) == \"string\")\n+      @pattern = new RegExp(@pattern)\n+\n+    @matcher = (message) =>\n+      # If the pattern is of type object, it is a RegExp to test\n+      # If it is a function, we need to test instanceof\n+      result = null\n+      switch typeof @pattern\n+        when \"object\"\n+          result = @pattern.test message.constructor.name\n+        when \"function\"\n+          result = message if message instanceof @pattern\n+\n+      result\n+\n module.exports.Listener     = Listener\n module.exports.TextListener = TextListener\n+module.exports.MessageListener = MessageListener", "changes": 27}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/ae91f20d588fe29aae48b1468f2621740073e428/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ae91f20d588fe29aae48b1468f2621740073e428/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=ae91f20d588fe29aae48b1468f2621740073e428", "filename": "src/message.coffee", "sha": "e09923321ba6bef1a4d7ffd6025b9e185668c5d5", "additions": 12, "patch": "@@ -36,14 +36,21 @@ class EnterMessage extends Message\n # user - A User instance for the user who left.\n class LeaveMessage extends Message\n \n+# Represents a topic change message.\n+#\n+# user - A User instance for the user who changed the topic\n+# text - A String topic\n+class TopicChangeMessage extends TextMessage\n+\n class CatchAllMessage extends Message\n   # Represents a message that no matchers matched.\n   #\n   # message - The original message.\n   constructor: (@message) ->\n \n-module.exports.Message         = Message\n-module.exports.TextMessage     = TextMessage\n-module.exports.EnterMessage    = EnterMessage\n-module.exports.LeaveMessage    = LeaveMessage\n-module.exports.CatchAllMessage = CatchAllMessage\n+module.exports.Message            = Message\n+module.exports.TextMessage        = TextMessage\n+module.exports.EnterMessage       = EnterMessage\n+module.exports.LeaveMessage       = LeaveMessage\n+module.exports.TopicChangeMessage = TopicChangeMessage\n+module.exports.CatchAllMessage    = CatchAllMessage", "changes": 17}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/ae91f20d588fe29aae48b1468f2621740073e428/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ae91f20d588fe29aae48b1468f2621740073e428/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=ae91f20d588fe29aae48b1468f2621740073e428", "filename": "src/robot.coffee", "sha": "e8cbf4b48f8d3d0cf1da1f5fb17761204b47886a", "additions": 21, "patch": "@@ -3,11 +3,11 @@ Log        = require 'log'\n Path       = require 'path'\n HttpClient = require 'scoped-http-client'\n \n-User                                                    = require './user'\n-Brain                                                   = require './brain'\n-Response                                                = require './response'\n-{Listener,TextListener}                                 = require './listener'\n-{TextMessage,EnterMessage,LeaveMessage,CatchAllMessage} = require './message'\n+User                                                                       = require './user'\n+Brain                                                                      = require './brain'\n+Response                                                                   = require './response'\n+{Listener,TextListener,MessageListener}                                    = require './listener'\n+{TextMessage,EnterMessage,LeaveMessage,TopicChangeMessage,CatchAllMessage} = require './message'\n \n inspect = require('util').inspect\n \n@@ -60,6 +60,20 @@ class Robot\n   hear: (regex, callback) ->\n     @listeners.push new TextListener(@, regex, callback)\n \n+  # Public: Adds a Listener that attempts to match the incoming message type\n+  # to the pattern supplied.\n+  #\n+  # pattern   - A Regex, string, or message type to match against.\n+  #             Ex:\n+  #               /(?:Enter|Leave)Message/\n+  #               \"TextMessage\"\n+  #               TopicChangeMessage\n+  # callback  - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  see: (pattern, callback) ->\n+    @listeners.push new MessageListener(@, pattern, callback)\n+\n   # Public: Adds a Listener that attempts to match incoming messages directed\n   # at the robot based on a Regex. All regexes treat patterns like they begin\n   # with a '^'\n@@ -94,15 +108,15 @@ class Robot\n   #\n   # Returns nothing.\n   enter: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof EnterMessage), callback)\n+    this.see EnterMessage, callback\n \n   # Public: Adds a Listener that triggers when anyone leaves the room.\n   #\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n   leave: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof LeaveMessage), callback)\n+    this.see LeaveMessage, callback\n \n   # Public: Adds a Listener that triggers when no other text matchers match.\n   #", "changes": 28}], "355": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d2a44bb6c3892f3828e4b60faf500f5f37921994/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/d2a44bb6c3892f3828e4b60faf500f5f37921994/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=d2a44bb6c3892f3828e4b60faf500f5f37921994", "filename": "bin/hubot", "sha": "663ef156fa28f9d43ca9e3a392760123eb82a571", "additions": 12, "patch": "@@ -22,6 +22,7 @@ Switches = [\n   [ \"-h\", \"--help\",            \"Display the help information\" ],\n   [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n   [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n+  [ \"-r\", \"--scripts PATH\",    \"Alternative scripts path\" ],\n   [ \"-s\", \"--enable-slash\",    \"Enable replacing the robot's name with '/' (deprecated)\" ],\n   [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n ]\n@@ -31,6 +32,7 @@ Options =\n   alias: false\n   create: false\n   enableHttpd: true\n+  scripts: []\n   name: \"Hubot\"\n   path: \".\"\n \n@@ -57,6 +59,9 @@ Parser.on \"alias\", (opt, value) ->\n Parser.on \"name\", (opt, value) ->\n   Options.name = value\n \n+Parser.on \"scripts\", (opt, value) ->\n+  Options.scripts.push(value)\n+\n Parser.on \"enable-slash\", (opt) ->\n   console.log \"WARNING: -s and --enable-slash are deprecated please use -l or --alias '/'\"\n   Options.alias = '/'\n@@ -101,6 +106,13 @@ else\n           scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n           robot.loadHubotScripts scriptsPath, scripts\n \n+    for path in Options.scripts\n+      if path[0] == '/'\n+        scriptsPath = path\n+      else\n+        scriptsPath = Path.resolve \".\", path\n+      robot.load scriptsPath\n+\n   robot.adapter.on 'connected', loadScripts\n \n   robot.run()", "changes": 12}], "359": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c0c23eae38bed0319f0923ca49c30ab577731c84/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c0c23eae38bed0319f0923ca49c30ab577731c84/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=c0c23eae38bed0319f0923ca49c30ab577731c84", "filename": "src/creator.coffee", "sha": "6b9f778e844d52850b2dcef0b320381b95dba5a6", "additions": 1, "patch": "@@ -17,7 +17,7 @@ class Creator\n   mkdirDashP: (path) ->\n     Path.exists path, (exists) ->\n       unless exists\n-        Fs.mkdir path, 0o0755, (err) ->\n+        Fs.mkdir path, 0755, (err) ->\n           throw err if err\n \n   # Copy the contents of a file from one place to another.", "changes": 2}], "361": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/841dde33a7cff56fc9aa577b7e0c3651e7d95014/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/841dde33a7cff56fc9aa577b7e0c3651e7d95014/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=841dde33a7cff56fc9aa577b7e0c3651e7d95014", "filename": "src/scripts/roles.coffee", "sha": "f998a9dcef78c0ad9a5a7fb24a88ce314b154f33", "additions": 3, "patch": "@@ -15,7 +15,7 @@ module.exports = (robot) ->\n   getAmbiguousUserText = (users) ->\n     \"Be more specific, I know #{users.length} people named like that: #{(user.name for user in users).join(\", \")}\"\n \n-  robot.respond /who is @?([\\w .-]+)\\?*$/i, (msg) ->\n+  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n     joiner = ', '\n     name = msg.match[1].trim()\n \n@@ -39,7 +39,7 @@ module.exports = (robot) ->\n       else\n         msg.send \"#{name}? Never heard of 'em\"\n \n-  robot.respond /@?([\\w .-_]+) is ([\"'\\w: -_]+)[.!]*$/i, (msg) ->\n+  robot.respond /@?([\\w .\\-_]+) is ([\"'\\w: \\-_]+)[.!]*$/i, (msg) ->\n     name    = msg.match[1].trim()\n     newRole = msg.match[2].trim()\n \n@@ -63,7 +63,7 @@ module.exports = (robot) ->\n         else\n           msg.send \"I don't know anything about #{name}.\"\n \n-  robot.respond /@?([\\w .-_]+) is not ([\"'\\w: -_]+)[.!]*$/i, (msg) ->\n+  robot.respond /@?([\\w .\\-_]+) is not ([\"'\\w: \\-_]+)[.!]*$/i, (msg) ->\n     name    = msg.match[1].trim()\n     newRole = msg.match[2].trim()\n ", "changes": 6}], "364": [{"status": "modified", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/cb875b3df85c5c31de2528008b7cfd996c5b09df/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/cb875b3df85c5c31de2528008b7cfd996c5b09df/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=cb875b3df85c5c31de2528008b7cfd996c5b09df", "filename": "bin/hubot", "sha": "29f7722695b2586157db6caf4e038afe38454125", "additions": 37, "patch": "@@ -22,6 +22,7 @@ Switches = [\n   [ \"-h\", \"--help\",            \"Display the help information\" ],\n   [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n   [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n+  [ \"-i\", \"--config PATH\",     \"Use configuration file for env vars\"],\n   [ \"-s\", \"--enable-slash\",    \"Enable replacing the robot's name with '/' (deprecated)\" ],\n   [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n ]\n@@ -57,6 +58,9 @@ Parser.on \"alias\", (opt, value) ->\n Parser.on \"name\", (opt, value) ->\n   Options.name = value\n \n+Parser.on \"config\", (opt, value) ->\n+  Options.config = value\n+\n Parser.on \"enable-slash\", (opt) ->\n   console.log \"WARNING: -s and --enable-slash are deprecated please use -l or --alias '/'\"\n   Options.alias = '/'\n@@ -83,25 +87,38 @@ else\n     console.log robot.version\n     process.exit 0\n \n-  robot.enableSlash = Options.enableSlash\n-  robot.alias = Options.alias\n-\n-  loadScripts = ->\n-    scriptsPath = Path.resolve \".\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    scriptsPath = Path.resolve \"src\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    scriptsFile = Path.resolve \"hubot-scripts.json\"\n-    Path.exists scriptsFile, (exists) =>\n+  if Options.config\n+    configPath = Path.resolve Options.config\n+    Path.exists configPath, (exists) =>\n       if exists\n-        Fs.readFile scriptsFile, (err, data) ->\n-          scripts = JSON.parse data\n-          scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n-          robot.loadHubotScripts scriptsPath, scripts\n-\n-  robot.adapter.on 'connected', loadScripts\n-\n-  robot.run()\n+        config = require configPath\n+        for own attr, value of config\n+          process.env[attr] = value\n+          console.log value\n+        do next\n+  else\n+    do next\n+\n+  next = ->\n+    robot.enableSlash = Options.enableSlash\n+    robot.alias = Options.alias\n+\n+    loadScripts = ->\n+      scriptsPath = Path.resolve \".\", \"scripts\"\n+      robot.load scriptsPath\n+\n+      scriptsPath = Path.resolve \"src\", \"scripts\"\n+      robot.load scriptsPath\n+\n+      scriptsFile = Path.resolve \"hubot-scripts.json\"\n+      Path.exists scriptsFile, (exists) =>\n+        if exists\n+          Fs.readFile scriptsFile, (err, data) ->\n+            scripts = JSON.parse data\n+            scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n+            robot.loadHubotScripts scriptsPath, scripts\n+\n+    robot.adapter.on 'connected', loadScripts\n+\n+    robot.run()\n ", "changes": 57}], "370": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/cfd546f4de0e625dd833e010054168a01930716b/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/cfd546f4de0e625dd833e010054168a01930716b/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=cfd546f4de0e625dd833e010054168a01930716b", "filename": "src/scripts/google-images.coffee", "sha": "eae7c7a10597dae4b27b13a3d8d0ca0e1146f364", "additions": 2, "patch": "@@ -37,8 +37,8 @@ imageMe = (msg, query, animated, faces, cb) ->\n     .query(q)\n     .get() (err, res, body) ->\n       images = JSON.parse(body)\n-      images = images.responseData.results\n-      if images.length > 0\n+      images = images.responseData?.results\n+      if images?.length > 0\n         image  = msg.random images\n         cb \"#{image.unescapedUrl}#.png\"\n ", "changes": 4}], "375": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/4d76b4b4c3436669d06c86b18f40add67612fed2/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/4d76b4b4c3436669d06c86b18f40add67612fed2/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=4d76b4b4c3436669d06c86b18f40add67612fed2", "filename": "bin/hubot", "sha": "d621878fedcdfe50979fe925082ce649b00159c1", "additions": 1, "patch": "@@ -73,7 +73,6 @@ unless process.platform is \"win32\"\n if Options.create\n   creator = new Creator(Options.path)\n   creator.run()\n-\n else\n   adapterPath = Path.resolve __dirname, \"..\", \"src\", \"adapters\"\n \n@@ -94,7 +93,7 @@ else\n     robot.load scriptsPath\n \n     scriptsFile = Path.resolve \"hubot-scripts.json\"\n-    Path.exists scriptsFile, (exists) =>\n+    Fs.exists scriptsFile, (exists) =>\n       if exists\n         Fs.readFile scriptsFile, (err, data) ->\n           scripts = JSON.parse data", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4d76b4b4c3436669d06c86b18f40add67612fed2/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/4d76b4b4c3436669d06c86b18f40add67612fed2/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=4d76b4b4c3436669d06c86b18f40add67612fed2", "filename": "package.json", "sha": "a1037c30fc7fbaaa37f1cc371297d21e2c41f8d6", "additions": 5, "patch": "@@ -23,6 +23,11 @@\n     \"connect_router\": \"1.8.6\"\n   },\n \n+  \"engines\": {\n+    \"node\": \"0.8.x\",\n+    \"npm\":  \"1.1.x\"\n+  },\n+\n   \"main\": \"./index\",\n \n   \"bin\": {", "changes": 5}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/4d76b4b4c3436669d06c86b18f40add67612fed2/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4d76b4b4c3436669d06c86b18f40add67612fed2/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=4d76b4b4c3436669d06c86b18f40add67612fed2", "filename": "src/creator.coffee", "sha": "71606fa6e7d4b6f4c745091a5e50670b43b2d150", "additions": 2, "patch": "@@ -15,9 +15,9 @@ class Creator\n   #\n   # Returns nothing.\n   mkdirDashP: (path) ->\n-    Path.exists path, (exists) ->\n+    Fs.exists path, (exists) ->\n       unless exists\n-        Fs.mkdir path, 0o0755, (err) ->\n+        Fs.mkdir path, 0755, (err) ->\n           throw err if err\n \n   # Copy the contents of a file from one place to another.", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4d76b4b4c3436669d06c86b18f40add67612fed2/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4d76b4b4c3436669d06c86b18f40add67612fed2/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=4d76b4b4c3436669d06c86b18f40add67612fed2", "filename": "src/robot.coffee", "sha": "ac48356c3d22f4f74bcc199856059e4e541a7f5c", "additions": 1, "patch": "@@ -138,7 +138,7 @@ class Robot\n   load: (path) ->\n     @logger.debug \"Loading scripts from #{path}\"\n \n-    Path.exists path, (exists) =>\n+    Fs.exists path, (exists) =>\n       if exists\n         @loadPaths.push path\n         for file in Fs.readdirSync(path)", "changes": 2}], "376": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/de941450e319e9416257e311b618ee041309d430/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/de941450e319e9416257e311b618ee041309d430/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=de941450e319e9416257e311b618ee041309d430", "filename": "package.json", "sha": "f0951662c3198dd5952b3f65123bad261979d44b", "additions": 1, "patch": "@@ -15,7 +15,7 @@\n   },\n \n   \"dependencies\": {\n-    \"coffee-script\": \"1.3.3\",\n+    \"coffee-script\": \"~> 1.4.0\",\n     \"optparse\": \"1.0.3\",\n     \"scoped-http-client\": \"0.9.7\",\n     \"log\": \"1.3.0\",", "changes": 2}], "377": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/80bd2660d82d681df63788533302b74ecea0b23e/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/80bd2660d82d681df63788533302b74ecea0b23e/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=80bd2660d82d681df63788533302b74ecea0b23e", "filename": "src/creator.coffee", "sha": "6b9f778e844d52850b2dcef0b320381b95dba5a6", "additions": 1, "patch": "@@ -17,7 +17,7 @@ class Creator\n   mkdirDashP: (path) ->\n     Path.exists path, (exists) ->\n       unless exists\n-        Fs.mkdir path, 0o0755, (err) ->\n+        Fs.mkdir path, 0755, (err) ->\n           throw err if err\n \n   # Copy the contents of a file from one place to another.", "changes": 2}], "378": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1f6b98abd63de99fce9ff74b05d5faf3841be469/src/templates/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/1f6b98abd63de99fce9ff74b05d5faf3841be469/src/templates/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/Procfile?ref=1f6b98abd63de99fce9ff74b05d5faf3841be469", "filename": "src/templates/Procfile", "sha": "e7dfdbc806cc9b8681ea8dbd264363af38f392c5", "additions": 1, "patch": "@@ -1 +1 @@\n-web: bin/hubot -a campfire -n Hubot\n+web: bin/hubot -a gtalk -n Hubot", "changes": 2}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1f6b98abd63de99fce9ff74b05d5faf3841be469/src/templates/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/1f6b98abd63de99fce9ff74b05d5faf3841be469/src/templates/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/package.json?ref=1f6b98abd63de99fce9ff74b05d5faf3841be469", "filename": "src/templates/package.json", "sha": "09aae9c0f34b811471c6dadc350291f72cc172f4", "additions": 2, "patch": "@@ -15,6 +15,8 @@\n   },\n \n   \"dependencies\": {\n+    \"node-expat\": \"1.6.1\",\n+    \"hubot-gtalk\": \">= 0.0.1\",\n     \"hubot\": \"2.3.2\",\n     \"hubot-scripts\": \">= 2.1.0\",\n     \"optparse\": \"1.0.3\"", "changes": 2}], "380": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6e5f323ff2f15ca9ad63f1e27692b9ee9abeb4be/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/6e5f323ff2f15ca9ad63f1e27692b9ee9abeb4be/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=6e5f323ff2f15ca9ad63f1e27692b9ee9abeb4be", "filename": "README.md", "sha": "9ac924afa8674a787ff8fc0360fb2946242b3e27", "additions": 1, "patch": "@@ -30,7 +30,7 @@ adapters that the community have contributed. Check the\n [hubot wiki][hubot-wiki] for the available ones and how to create your own.\n \n Please submit issues and pull requests for third party adapters to the adapter\n-repo not this repo unless it's the Campfire or Shell adapter.\n+repo, not this repo (unless it's the Campfire or Shell adapter).\n \n [hubot-wiki]: https://github.com/github/hubot/wiki\n [third-party-adapters]: https://github.com/github/hubot/tree/master/src/adapters/third-party", "changes": 2}], "381": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d1b0f26039bf0a442a4c700a07f6282c6eae7e55/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/d1b0f26039bf0a442a4c700a07f6282c6eae7e55/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=d1b0f26039bf0a442a4c700a07f6282c6eae7e55", "filename": "bin/hubot", "sha": "b80855334e341502d52b23cfdd6a999eff334cc2", "additions": 5, "patch": "@@ -15,6 +15,10 @@ HTTP       = require 'http'\n Creator    = require '../src/creator'\n OptParse   = require 'optparse'\n \n+# compatible node v0.6\n+Fs.exists ||= (path, callback) ->\n+  Path.exists(path, callback)\n+\n Switches = [\n   [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n   [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n@@ -94,7 +98,7 @@ else\n     robot.load scriptsPath\n \n     scriptsFile = Path.resolve \"hubot-scripts.json\"\n-    Path.exists scriptsFile, (exists) =>\n+    Fs.exists scriptsFile, (exists) =>\n       if exists\n         Fs.readFile scriptsFile, (err, data) ->\n           scripts = JSON.parse data", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d1b0f26039bf0a442a4c700a07f6282c6eae7e55/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d1b0f26039bf0a442a4c700a07f6282c6eae7e55/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=d1b0f26039bf0a442a4c700a07f6282c6eae7e55", "filename": "src/creator.coffee", "sha": "1a6533ad1f88af14dd8c19d073301b1839ac0d3e", "additions": 1, "patch": "@@ -15,7 +15,7 @@ class Creator\n   #\n   # Returns nothing.\n   mkdirDashP: (path) ->\n-    Path.exists path, (exists) ->\n+    Fs.exists path, (exists) ->\n       unless exists\n         Fs.mkdir path, 0o0755, (err) ->\n           throw err if err", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d1b0f26039bf0a442a4c700a07f6282c6eae7e55/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d1b0f26039bf0a442a4c700a07f6282c6eae7e55/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=d1b0f26039bf0a442a4c700a07f6282c6eae7e55", "filename": "src/robot.coffee", "sha": "ac48356c3d22f4f74bcc199856059e4e541a7f5c", "additions": 1, "patch": "@@ -138,7 +138,7 @@ class Robot\n   load: (path) ->\n     @logger.debug \"Loading scripts from #{path}\"\n \n-    Path.exists path, (exists) =>\n+    Fs.exists path, (exists) =>\n       if exists\n         @loadPaths.push path\n         for file in Fs.readdirSync(path)", "changes": 2}], "383": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/bb7d66819ca89f53a6bbded8bc8ae2e77ff43c92/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/bb7d66819ca89f53a6bbded8bc8ae2e77ff43c92/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=bb7d66819ca89f53a6bbded8bc8ae2e77ff43c92", "filename": "src/adapters/campfire.coffee", "sha": "a8d47c3eb27e97bfbdf73bb95c3b2834257c2f70", "additions": 1, "patch": "@@ -96,7 +96,7 @@ class CampfireStreaming extends EventEmitter\n     logger = @robot.logger\n \n     show: (callback) ->\n-      self.post \"/room/#{id}\", \"\", callback\n+      self.get \"/room/#{id}\", \"\", callback\n \n     join: (callback) ->\n       self.post \"/room/#{id}/join\", \"\", callback", "changes": 2}], "384": [{"status": "removed", "deletions": 227, "raw_url": "https://github.com/hubotio/hubot/raw/010a6be1be29b9f2798e5b3862d3887e41400e3b/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/010a6be1be29b9f2798e5b3862d3887e41400e3b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=010a6be1be29b9f2798e5b3862d3887e41400e3b", "filename": "CHANGELOG.md", "sha": "ea479dedc2e25659d2cbb5d196290ec66a741072", "additions": 0, "patch": "@@ -1,227 +0,0 @@\n-v2.3.4\n-======\n-\n-* Add 'examples' and 'urls' to list of known documentation sections\n-\n-* Improve mustache results - marsam in #341\n-\n-v2.3.3\n-======\n-\n-* Fix help parsing of javascript iles - ferlores in #322 \n-\n-* Roles will correctly semicolon-delimit the list of roles if one (or more) roles contain a comma. - futuraprime in #327\n-\n-* Updated translations of supported languages as of 20120801 - sopel in #328\n-\n-* Escape brackets in html view of help - tombell, technicalpickles\n-\n-* More coffee-like translate.coffee - elmoeleven in #336\n-\n-* Fixed reference to when npm was included w/ node - technicalpickles in #347\n-\n-* Backwards-compatible help parsing, and tracking all documentation instead of just commands - technicalpickles\n-\n-v2.3.2\n-======\n-* New route `/hubot/help` to display command help - tombell\n-\n-* Role script fix - ferlores\n-\n-* Store connect server - tombell\n-\n-v2.3.0\n-======\n-* Extracted remaining classes into their own files - tombell\n-\n-**Note** this is a breaking change for adapters. Adapters are going to want to\n-use the following code snippet for requiring classes from hubot.\n-\n-    {Adapter,Robot} = require 'hubot'\n-\n-* Update the formatting of documentation comments at the top of\n-  scripts - technicalpickles\n-\n-* Update the parsing of the documentation comments - tombell\n-\n-v2.2.0\n-======\n-* Fixed keep alive ping, requires `HEROKU_URL` - tombell and jimeh\n-\n-* Updated dependency versions - tombell and jimeh\n-\n-v2.1.4\n-======\n-* Hubot now keeps himself alive due to Heroku's web processes shutting down\n-  when idle - tombell\n-\n-* Hubot's image search is now defaulted to safe search - kylev\n-\n-* Hubot now emits a 'connected' event when he connects to the chosen\n-  adapter - sbryant\n-\n-* Fix the roles.coffee not to respond to empty names - christierney\n-\n-v2.1.3 - The Heat Stroke Release\n-================================\n-* Hubot now has a web interface and supports connect middleware, examples in\n-  httpd.coffee - atmos / tombell\n-\n-    module.exports = (robot) ->\n-      robot.router.get \"/hubot/version\", (req, res) ->\n-        res.end robot.version\n-\n-* Add a catchAll callback that handles responses that match nothing\n-  else - titanous / ejfinnerman\n-\n-    module.exports = (robot) ->\n-      robot.catchAll (msg) ->\n-        router.get \"/hubot/version\", (req, res) ->\n-\n-v2.1.2\n-======\n-* Update behaviour of finishing further execution of listeners\n-* Scripts are now loaded in the following order\n-  * Scripts defined in `./hubot-scripts.json` are loaded in order\n-  * Scripts are loaded alphabetically from `/scripts`\n-\n-v2.1.1\n-======\n-* The hwhoops release, finish/done behavior is handled elsewhere\n-\n-v2.1.0\n-======\n-* Introduce Response.finish() to indicate that a message should not be\n-  passed on to any other listeners\n-* Scripts are evaluated in the following order\n-  * `./scripts` is loaded alphabetically\n-  * The contents of `./hubot-scripts.json` is loaded in order\n-\n-    module.exports = (robot) ->\n-      robot.respond /\\s*yo\\s*\\\\?/i, (msg) ->\n-        msg.reply \"Yo!\"\n-        msg.finish()\n-\n-v2.0.7\n-======\n-* Update topic and logger scoping fixups - Horace Ko\n-* Don't exit the process if listening to a room is denied\n-\n-v2.0.6\n-======\n-* Don't kill all username looks if some users don't have name attribute\n-\n-v2.0.5\n-======\n-* All adapters have been removed except for shell and campfire\n-* Better win32 compatability\n-* Campfire reconnects on streaming errors on a per-room basis\n-\n-v2.0.0\n-======\n-* Major adapter overhaul, they're now external - Tom Bell\n-* Shell adapter now functions like a REPL - Tom Bell\n-* Improved logging using log.js - Tom Bell\n-* Search help commands - Gabriel Horner\n-* Improvements to roles.coffee - Daniel Schauenberg\n-\n-Upgrading\n----------\n-If you are not using the Campfire or Shell adapters please be aware before\n-upgrading that adapters have been moved out of the code of hubot and you should\n-install the hubot adapters from npm when people make them available. Until your\n-adapter is available you may wish to remain on v1.1.11.\n-\n-v1.1.11\n-=======\n-* support self-signed SSL certs for IRC - Ville Lautanala <lautis@gmail.com>\n-* twilio adapter fixups - Tom Bell\n-* XMPP adapter fixups - Patrik Votocek <patrik@votocek.cz>\n-* Everyone gets a pug - Jon Maddox <jon@jonmaddox.com>\n-* Accept contact list requests - Arlo Carreon <arlo.carreon@gmail.com>\n-* Google talk whitelisting support - pescuma <pescuma@chaordicsystems.com>\n-\n-v1.1.10\n-=======\n-* Fix optparse problems on certain linuxes\n-* IRC adapter fixups for users - Andrew Nordman <cadwallion@gmail.com>\n-* Bump npm irc depedency - BrokenEnso <ericday96@gmail.com>\n-* accept invites on IRC - Dingding Ye <yedingding@gmail.com>\n-* Support talkerapp style @replies - Charles Barbier <unixcharles@gmail.com>\n-* Set hubot's google talk status properly - Matt McCormick <mbmccormick@gmail.com>\n-\n-v1.1.9\n-======\n-* Add a google talk adapter - Arlo Carreon <arlo.carreon@gmail.com>\n-\n-v1.1.8\n-======\n-* Fix a bug in robot.respond that allowed regexes to be constructed that\n-  could be triggered without prefixing with the robot's name - atmos\n-* Fixup rarely triggered response stuff that uses an undefined variable\n-\n-v1.1.7\n-======\n-* Fix username issues where campfire names weren't updated - atmos\n-* Allow help files to parse from raw js - Jason Ford <jason@jason-ford.com>\n-* Talkerapp bug fix ups - Charles Barbier <unixcharles@gmail.com>, Magnus Bergmark <magnus.bergmark@gmail.com>\n-* Preserve ordering in campfire message sending - Sean Cribbs <sean@basho.com>\n-* Flowdock adapter - Arttu Tervo <arttu.tervo@nodeta.fi>\n-\n-\n-v1.1.5\n-======\n-* Add a talkerapp adapter - Victor Castell <victorcoder@gmail.com>\n-* Add a twitter adapter - Mathilde Lemee <mathilde.lemee@yahoo.fr>\n-* Emit a loaded event in mergeData - codec <codec@fnord.cx>\n-\n-v1.1.2\n-======\n-* Fix the optparse npm install anomaly\n-\n-v1.1.1\n-======\n-* Fix campfire adapter getting duplicate messages - atmos\n-\n-v1.1.0\n-======\n-\n-* Explicity errors for misconfigured campfire setup - Damien Mathieu <damien.mathieu@shazino.com>\n-* Support '-v' as a CLI opt to display version - Damien Mathieu <damien.mathieu@shazino.com>\n-* Tons of fixups to the hipchat adapter - Codafoo <cesar@webzense.net>, Assaf Arkin <assaf@labnotes.org>\n-* Various IRC adapter fixups - Mark Paschal <markpasc@markpasc.org>, Jesse Szwedko\n-* Enter/Leave events for adapters - Brian Donovan <me@brian-donovan.com>\n-* XMPP adapter fixups - codec <codec@fnord.cx>,\n-* Break out persistence layer to make it easier to have multiple backends - technoweenie\n-* Various refactorings/cleanups - Tom Bell <tomb@tombell.org.uk>\n-* translation script enhancements - OiNutter <willmckenzie@oinutter.co.uk>\n-* XMPP user persistence fixups - Andy Fowler <andy@andyfowler.com>\n-\n-Upgrading\n----------\n-If you're using the redis persistence you're going to need to enable\n-'redis-brain.coffee' in your hubot-scripts.json file.  It was moved\n-there and the brain now supports events allowing you to use any\n-persistence backend you want.\n-\n-v1.0.5\n-======\n-\n-* Remove infinite loop script to keep things alive - atmos\n-\n-v1.0.4\n-======\n-\n-* HipChat adapter support - Assaf Arkin <assaf@labnotes.org>\n-* XMPP adapter support - Andy Fowler <andy@andyfowler.com>\n-* Twilio adapter fixups - Jesse Newland <jesse@jnewland.com>\n-* Fixup hubot-scripts.json template examples - Mike Skalnik <mike.skalnik@gmail.com>\n-\n-v1.0.3\n-======\n-\n-* Fix IRC adapter replies - Scott Moak <scott.moak@gmail.com>\n-* Ensure people are running node 0.4.x - Corey Donohoe <atmos@atmos.org>\n-* Doc fixups - Aitor Garc\u00eda Rey <aitor@linkingpaths.com>\n-* Twilio adapter support - Tom Bell <tomb@tombell.org.uk>\n-", "changes": 227}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/Makefile", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/Makefile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Makefile?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "Makefile", "sha": "eb26bfe950853cae5da854d447ec6c29968751b2", "additions": 4, "patch": "@@ -3,7 +3,10 @@ NPM_EXECUTABLE_HOME := node_modules/.bin\n PATH := ${NPM_EXECUTABLE_HOME}:${PATH}\n \n test: deps\n-\t@find test -name '*_test.coffee' | xargs -n 1 -t coffee\n+\t@npm test\n+\n+test-old: deps\n+\t@find test.old -name '*_test.coffee' | xargs -n 1 -t coffee\n \n dev: generate-js\n \t@coffee -wc --bare -o lib src/*.coffee", "changes": 5}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "README.md", "sha": "49032321e727dc1e63cdd6e990eee6056a565bde", "additions": 14, "patch": "@@ -33,9 +33,6 @@ Please submit issues and pull requests for third party adapters to the adapter\n repo, not this repo (unless it's the Campfire or Shell adapter).\n \n [hubot-wiki]: https://github.com/github/hubot/wiki\n-[third-party-adapters]: https://github.com/github/hubot/tree/master/src/adapters/third-party\n-[split-subpath]: http://help.github.com/split-a-subpath-into-a-new-repo/\n-[logjs]: https://github.com/visionmedia/log.js\n \n ## hubot-scripts\n \n@@ -49,6 +46,20 @@ individual scripts.\n [hubot-scripts]: https://github.com/github/hubot-scripts\n [hubot-scripts-readme]: https://github.com/github/hubot-scripts#readme\n \n+## external-scripts\n+\n+This functionality allows users to enable scripts from `npm` packages which\n+don't have to be included in the `hubot-scripts` repository.\n+\n+To enable to functionality you can follow the following steps.\n+\n+1. Add the packages as dependencies into your `package.json`\n+2. `npm install` to make sure those packages are installed\n+\n+To enable third-party scripts that you've added you will need to add the package\n+name as a double quoted string to the `external-scripts.json` file for your\n+hubot.\n+\n ## HTTP Listener\n \n Hubot has a HTTP listener which listens on the port specified by the `PORT`", "changes": 17}, {"status": "modified", "deletions": 112, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "bin/hubot", "sha": "cf70016d7002bd57d55bb849b65c765e2dc6fa2a", "additions": 68, "patch": "@@ -1,118 +1,74 @@\n #!/usr/bin/env coffee\n-\n-##\n-# hubot [options]\n-#\n-# Launch an interactive hubot\n-#\n # vim:ft=coffee ts=2 sw=2 et :\n # -*- mode:coffee -*-\n \n-Hubot      = require '..'\n-Fs         = require 'fs'\n-Path       = require 'path'\n-HTTP       = require 'http'\n-Creator    = require '../src/creator'\n-OptParse   = require 'optparse'\n-\n-Switches = [\n-  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n-  [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n-  [ \"-h\", \"--help\",            \"Display the help information\" ],\n-  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n-  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n-  [ \"-r\", \"--require PATH\",    \"Alternative scripts path\" ],\n-  [ \"-s\", \"--enable-slash\",    \"Enable replacing the robot's name with '/' (deprecated)\" ],\n-  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n-]\n-\n-Options =\n-  adapter: \"shell\"\n-  alias: false\n-  create: false\n-  enableHttpd: true\n-  scripts: []\n-  name: \"Hubot\"\n-  path: \".\"\n-\n-Parser = new OptParse.OptionParser(Switches)\n-Parser.banner = \"Usage hubot [options]\"\n-\n-Parser.on \"adapter\", (opt, value) ->\n-  Options.adapter = value\n-\n-Parser.on \"create\", (opt, value) ->\n-  Options.path = value\n-  Options.create = true\n-\n-Parser.on \"disable-httpd\", (opt) ->\n-  Options.enableHttpd = false\n-\n-Parser.on \"help\", (opt, value) ->\n-  console.log Parser.toString()\n+Creator  = require '../src/creator'\n+Hubot    = require '..'\n+\n+Fs       = require 'fs'\n+Path     = require 'path'\n+\n+App      = require 'commander'\n+\n+pkg = Fs.readFileSync \"#{__dirname}/../package.json\"\n+\n+App.name = 'hubot'\n+App.version = JSON.parse(pkg).version\n+\n+App\n+  .command('create [path]')\n+  .description('Create a new deployable hubot')\n+  .action (path, options) ->\n+    path or= './hubot'\n+    creator = new Creator(path)\n+    creator.run()\n+\n+App\n+  .command('start')\n+  .description('Start a hubot instance')\n+  .option('-a, --adapter <adapter>', 'Adapter for hubot to use')\n+  .option('-d, --no-http', 'Disable the built in HTTP server')\n+  .option('-l, --alias [alias]', 'Enable replacing the username with an alias')\n+  .option('-u, --username <username>', 'Name for hubot to use')\n+  .action (options) ->\n+    name = options.username or 'hubot'\n+    adapter = options.adapter or 'shell'\n+    http = !!options.http\n+    alias = if options.alias is true then '/' else options.alias\n+\n+    adapterPath = Path.join __dirname, '..', 'src', 'adapters'\n+    robot = Hubot.loadBot adapterPath, adapter, http, name\n+\n+    robot.enableSlash = !!alias\n+    robot.alias = alias\n+\n+    robot.adapter.on 'connected', ->\n+      robot.load Path.join __dirname, '..', 'scripts'\n+      robot.load Path.join __dirname, '..', 'src', 'scripts'\n+\n+      scriptsFile = Path.join __dirname, '..', 'hubot-scripts.json'\n+      Fs.exists scriptsFile, (exists) ->\n+        if exists\n+          Fs.readFile scriptsFile, (err, data) ->\n+            scripts = JSON.parse data\n+            path = Path.join __dirname, 'node_modules', 'hubot-scripts', 'src', 'scripts'\n+            robot.loadHubotScripts path, scripts\n+\n+      scriptsFile = Path.join __dirname, '..', 'external-scripts.json'\n+      Fs.exists scriptsFile, (exists) ->\n+        if exists\n+          Fs.readFile scriptsFile, (err, data) ->\n+            console.log err if err?\n+            scripts = JSON.parse data\n+            robot.loadExternalScripts scripts\n+\n+    robot.run()\n+\n+App.parse process.argv\n+\n+if process.argv.length is 2\n+  console.log App.helpInformation()\n   process.exit 0\n \n-Parser.on \"alias\", (opt, value) ->\n-  Options.alias = value\n-\n-Parser.on \"name\", (opt, value) ->\n-  Options.name = value\n-\n-Parser.on \"require\", (opt, value) ->\n-  Options.scripts.push(value)\n-\n-Parser.on \"enable-slash\", (opt) ->\n-  console.log \"WARNING: -s and --enable-slash are deprecated please use -l or --alias '/'\"\n-  Options.alias = '/'\n-\n-Parser.on \"version\", (opt, value) ->\n-  Options.version = true\n-\n-Parser.parse process.argv\n-\n-unless process.platform is \"win32\"\n-  process.on 'SIGTERM', ->\n-    process.exit 0\n-\n-if Options.create\n-  creator = new Creator(Options.path)\n-  creator.run()\n-\n-else\n-  adapterPath = Path.join __dirname, \"..\", \"src\", \"adapters\"\n-\n-  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name\n-\n-  if Options.version\n-    console.log robot.version\n-    process.exit 0\n-\n-  robot.enableSlash = Options.enableSlash\n-  robot.alias = Options.alias\n-\n-  loadScripts = ->\n-    scriptsPath = Path.join __dirname, \"..\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    scriptsPath = Path.join __dirname, \"..\", \"src\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    scriptsFile = Path.join __dirname, \"..\", \"hubot-scripts.json\"\n-    Fs.exists scriptsFile, (exists) =>\n-      if exists\n-        Fs.readFile scriptsFile, (err, data) ->\n-          scripts = JSON.parse data\n-          scriptsPath = Path.join __dirname, \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n-          robot.loadHubotScripts scriptsPath, scripts\n-\n-    for path in Options.scripts\n-      if path[0] == '/'\n-        scriptsPath = path\n-      else\n-        scriptsPath = Path.resolve \".\", path\n-      robot.load scriptsPath\n-\n-  robot.adapter.on 'connected', loadScripts\n-\n-  robot.run()\n+unless process.platform is 'win32'\n+  process.on 'SIGTERM', -> process.exit 0", "changes": 180}, {"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "index.coffee", "sha": "516076fab7143e5bdafda5f6674c37bec013695c", "additions": 14, "patch": "@@ -6,17 +6,19 @@ Response                                                = require './src/respons\n {Listener,TextListener}                                 = require './src/listener'\n {TextMessage,EnterMessage,LeaveMessage,CatchAllMessage} = require './src/message'\n \n+module.exports = {\n+  User\n+  Brain\n+  Robot\n+  Adapter\n+  Response\n+  Listener\n+  TextListener\n+  TextMessage\n+  EnterMessage\n+  LeaveMessage\n+  CatchAllMessage\n+}\n+\n module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName) ->\n   new Robot adapterPath, adapterName, enableHttpd, botName\n-\n-module.exports.User            = User\n-module.exports.Brain           = Brain\n-module.exports.Robot           = Robot\n-module.exports.Adapter         = Adapter\n-module.exports.Response        = Response\n-module.exports.Listener        = Listener\n-module.exports.TextListener    = TextListener\n-module.exports.TextMessage     = TextMessage\n-module.exports.EnterMessage    = EnterMessage\n-module.exports.LeaveMessage    = LeaveMessage\n-module.exports.CatchAllMessage = CatchAllMessage", "changes": 26}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "package.json", "sha": "46f120e6b9993e8f5a1dbce84ed901095fa202f0", "additions": 14, "patch": "@@ -15,12 +15,20 @@\n   },\n \n   \"dependencies\": {\n-    \"coffee-script\": \"~> 1.4.0\",\n-    \"optparse\": \"1.0.3\",\n-    \"scoped-http-client\": \"0.9.7\",\n-    \"log\": \"1.3.0\",\n-    \"connect\": \"2.3.4\",\n-    \"connect_router\": \"1.8.6\"\n+    \"coffee-script\":      \"~> 1.4.0\",\n+    \"commander\":          \"1.1.1\",\n+    \"connect\":            \"2.3.4\",\n+    \"connect_router\":     \"1.8.6\",\n+    \"log\":                \"1.3.0\",\n+    \"scoped-http-client\": \"0.9.7\"\n+  },\n+\n+  \"devDependencies\": {\n+    \"nodeunit\": \"~> 0.7.4\"\n+  },\n+\n+  \"scripts\": {\n+    \"test\": \"nodeunit --reporter minimal ./test\"\n   },\n \n   \"engines\": {", "changes": 20}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "src/adapter.coffee", "sha": "e19b8d315d181c90076e33912555f3a19fa021ce", "additions": 5, "patch": "@@ -51,35 +51,35 @@ class Adapter extends EventEmitter\n   #\n   # Returns an Array of User objects.\n   users: ->\n-    @robot.users\n+    @robot.brain.users\n \n   # Public: Get a User object given a unique identifier.\n   #\n   # Returns a User instance of the specified user.\n   userForId: (id, options) ->\n-    @robot.userForId id, options\n+    @robot.brain.userForId id, options\n \n   # Public: Get a User object given a name.\n   #\n   # Returns a User instance for the user with the specified name.\n   userForName: (name) ->\n-    @robot.userForName name\n+    @robot.brain.userForName name\n \n   # Public: Get all users whose names match fuzzyName. Currently, match\n   # means 'starts with', but this could be extended to match initials,\n   # nicknames, etc.\n   #\n   # Returns an Array of User instances matching the fuzzy name.\n   usersForRawFuzzyName: (fuzzyName) ->\n-    @robot.usersForRawFuzzyName fuzzyName\n+    @robot.brain.usersForRawFuzzyName fuzzyName\n \n   # Public: If fuzzyName is an exact match for a user, returns an array with\n   # just that user. Otherwise, returns an array of all users for which\n   # fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n   #\n   # Returns an Array of User instances matching the fuzzy name.\n   usersForFuzzyName: (fuzzyName) ->\n-    @robot.usersForFuzzyName fuzzyName\n+    @robot.brain.usersForFuzzyName fuzzyName\n \n   # Public: Creates a scoped http client with chainable methods for\n   # modifying the request. This doesn't actually make a request though.", "changes": 10}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "src/adapters/campfire.coffee", "sha": "f40ec15269e2aef09f8a5d414fa4632471f0ac55", "additions": 1, "patch": "@@ -73,7 +73,7 @@ exports.use = (robot) ->\n class CampfireStreaming extends EventEmitter\n   constructor: (options, @robot) ->\n     unless options.token? and options.rooms? and options.account?\n-      @robot.logger.error \"Not enough parameters provided. I Need a token, rooms and account\"\n+      @robot.logger.error \"Not enough parameters provided. I need a token, rooms and account\"\n       process.exit(1)\n \n     @token         = options.token", "changes": 2}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "src/brain.coffee", "sha": "baf86983518e110381abe3fadd88f9d9ef5f675f", "additions": 61, "patch": "@@ -1,14 +1,14 @@\n+User = require './user'\n+\n {EventEmitter} = require 'events'\n \n # http://www.the-isb.com/images/Nextwave-Aaron01.jpg\n class Brain extends EventEmitter\n   # Represents somewhat persistent storage for the robot. Extend this.\n   #\n   # Returns a new Brain with no external storage.\n-  constructor: () ->\n-    @data =\n-      users: { }\n-\n+  constructor: ->\n+    @data = users: { }\n     @resetSaveInterval 5\n \n   # Public: Emits the 'save' event so that 'brain' scripts can handle persisting.\n@@ -47,4 +47,61 @@ class Brain extends EventEmitter\n \n     @emit 'loaded', @data\n \n+  # Public: Get an Array of User objects stored in the brain.\n+  #\n+  # Returns an Array of User objects.\n+  users: ->\n+    @data.users\n+\n+  # Public: Get a User object given a unique identifier.\n+  #\n+  # Returns a User instance of the specified user.\n+  userForId: (id, options) ->\n+    user = @data.users[id]\n+    unless user\n+      user = new User id, options\n+      @data.users[id] = user\n+\n+    if options and options.room and (!user.room or user.room isnt options.room)\n+      user = new User id, options\n+      @data.users[id] = user\n+\n+    user\n+\n+  # Public: Get a User object given a name.\n+  #\n+  # Returns a User instance for the user with the specified name.\n+  userForName: (name) ->\n+    result = null\n+    lowerName = name.toLowerCase()\n+    for k of (@data.users or { })\n+      userName = @data.users[k]['name']\n+      if userName? and userName.toLowerCase() is lowerName\n+        result = @data.users[k]\n+    result\n+\n+  # Public: Get all users whose names match fuzzyName. Currently, match\n+  # means 'starts with', but this could be extended to match initials,\n+  # nicknames, etc.\n+  #\n+  # Returns an Array of User instances matching the fuzzy name.\n+  usersForRawFuzzyName: (fuzzyName) ->\n+    lowerFuzzyName = fuzzyName.toLowerCase()\n+    user for key, user of (@data.users or {}) when (\n+      user.name.toLowerCase().lastIndexOf(lowerFuzzyName, 0) is 0)\n+\n+  # Public: If fuzzyName is an exact match for a user, returns an array with\n+  # just that user. Otherwise, returns an array of all users for which\n+  # fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n+  #\n+  # Returns an Array of User instances matching the fuzzy name.\n+  usersForFuzzyName: (fuzzyName) ->\n+    matchedUsers = @usersForRawFuzzyName(fuzzyName)\n+    lowerFuzzyName = fuzzyName.toLowerCase()\n+    # We can scan matchedUsers rather than all users since usersForRawFuzzyName\n+    # will include exact matches\n+    for user in matchedUsers\n+      return [user] if user.name.toLowerCase() is lowerFuzzyName\n+    matchedUsers\n+\n module.exports = Brain", "changes": 65}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "src/creator.coffee", "sha": "94cdc71e2a25c4d36f8bb704eb93f6bf5f3d06b6", "additions": 4, "patch": "@@ -7,7 +7,7 @@ class Creator\n   #\n   # path - A String directory to create/upgrade scripts for\n   constructor: (path) ->\n-    @path = path\n+    @path = Path.resolve path\n     @templateDir = \"#{__dirname}/templates\"\n     @scriptsDir  = \"#{__dirname}/scripts\"\n \n@@ -18,7 +18,7 @@ class Creator\n     Fs.exists path, (exists) ->\n       unless exists\n         Fs.mkdir path, 0o0755, (err) ->\n-          throw err if err\n+          console.log err if err\n \n   # Copy the contents of a file from one place to another.\n   #\n@@ -64,7 +64,8 @@ class Creator\n       \"README.md\",\n       \".gitignore\",\n       \"bin/hubot\",\n-      \"hubot-scripts.json\"\n+      \"hubot-scripts.json\",\n+      \"external-scripts.json\"\n     ]\n \n     @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\" for file in files", "changes": 7}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "src/listener.coffee", "sha": "b704c7448773aa6cd330a3252e800d53f0991ee4", "additions": 4, "patch": "@@ -37,5 +37,7 @@ class TextListener extends Listener\n       if message instanceof TextMessage\n         message.match @regex\n \n-module.exports.Listener     = Listener\n-module.exports.TextListener = TextListener\n+module.exports = {\n+  Listener\n+  TextListener\n+}", "changes": 6}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "src/message.coffee", "sha": "b76943123498908c144e8559c2a7b497de91cb43", "additions": 7, "patch": "@@ -42,8 +42,10 @@ class CatchAllMessage extends Message\n   # message - The original message.\n   constructor: (@message) ->\n \n-module.exports.Message         = Message\n-module.exports.TextMessage     = TextMessage\n-module.exports.EnterMessage    = EnterMessage\n-module.exports.LeaveMessage    = LeaveMessage\n-module.exports.CatchAllMessage = CatchAllMessage\n+module.exports = {\n+  Message\n+  TextMessage\n+  EnterMessage\n+  LeaveMessage\n+  CatchAllMessage\n+}", "changes": 12}, {"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "src/response.coffee", "sha": "e62850fbb16d66e2584920f21bcb72020b0fe8f4", "additions": 33, "patch": "@@ -17,15 +17,6 @@ class Response\n   send: (strings...) ->\n     @robot.adapter.send @message.user, strings...\n \n-  # Public: Posts a topic changing message\n-  #\n-  # strings - One or more strings to set as the topic of the\n-  #           room the bot is in.\n-  #\n-  # Returns nothing.\n-  topic: (strings...) ->\n-    @robot.adapter.topic @message.user, strings...\n-\n   # Public: Posts a message mentioning the current user.\n   #\n   # strings - One or more strings to be posted. The order of these strings\n@@ -35,6 +26,15 @@ class Response\n   reply: (strings...) ->\n     @robot.adapter.reply @message.user, strings...\n \n+  # Public: Posts a topic changing message\n+  #\n+  # strings - One or more strings to set as the topic of the\n+  #           room the bot is in.\n+  #\n+  # Returns nothing.\n+  topic: (strings...) ->\n+    @robot.adapter.topic @message.user, strings...\n+\n   # Public: Picks a random item from the given items.\n   #\n   # items - An Array of items.\n@@ -54,8 +54,31 @@ class Response\n   # Once your request is assembled, you can call `get()`/`post()`/etc to\n   # send the request.\n   #\n+  # url - String URL to access.\n+  #\n+  # Examples:\n+  #\n+  #     res.http(\"http://example.com\")\n+  #       # set a single header\n+  #       .header('Authorization', 'bearer abcdef')\n+  #\n+  #       # set multiple headers\n+  #       .headers(Authorization: 'bearer abcdef', Accept: 'application/json')\n+  #\n+  #       # add URI query parameters\n+  #       .query(a: 1, b: 'foo & bar')\n+  #\n+  #       # make the actual request\n+  #       .get() (err, res, body) ->\n+  #         console.log body\n+  #\n+  #       # or, you can POST data\n+  #       .post(data) (err, res, body) ->\n+  #         console.log body\n+  #\n   # Returns a ScopedClient instance.\n   http: (url) ->\n-    @robot.http(url)\n+    @httpClient or= require 'scoped-http-client'\n+    @httpClient.create(url)\n \n module.exports = Response", "changes": 43}, {"status": "modified", "deletions": 146, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "src/robot.coffee", "sha": "d2cbe4489b0dc969513043d44fb6ff582b2a3154", "additions": 54, "patch": "@@ -1,19 +1,28 @@\n Fs         = require 'fs'\n Log        = require 'log'\n Path       = require 'path'\n-HttpClient = require 'scoped-http-client'\n \n User                                                    = require './user'\n Brain                                                   = require './brain'\n Response                                                = require './response'\n {Listener,TextListener}                                 = require './listener'\n {TextMessage,EnterMessage,LeaveMessage,CatchAllMessage} = require './message'\n \n-inspect = require('util').inspect\n-\n-HUBOT_DEFAULT_ADAPTERS = [ 'campfire', 'shell' ]\n-HUBOT_DOCUMENTATION_SECTIONS = [ 'description', 'dependencies', 'configuration', 'commands', 'notes', 'author', 'examples', 'urls' ]\n-\n+HUBOT_DEFAULT_ADAPTERS = [\n+  'campfire',\n+  'shell'\n+]\n+\n+HUBOT_DOCUMENTATION_SECTIONS = [\n+  'description',\n+  'dependencies',\n+  'configuration',\n+  'commands',\n+  'notes',\n+  'author',\n+  'examples',\n+  'urls'\n+]\n \n class Robot\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n@@ -31,25 +40,12 @@ class Robot\n     @Response     = Response\n     @commands     = []\n     @listeners    = []\n-    @loadPaths    = []\n-    @enableSlash  = false\n     @logger       = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n \n     @parseVersion()\n     @setupConnect() if httpd\n     @loadAdapter adapterPath, adapter if adapter?\n \n-    @documentation = {}\n-\n-  # Public: Specify a router and callback to register as Connect middleware.\n-  #\n-  # route    - A String of the route to match.\n-  # callback - A Function that is called when the route is requested.\n-  #\n-  # Returns nothing.\n-  route: (route, callback) ->\n-    @router.get route, callback\n-\n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n   #\n@@ -85,7 +81,6 @@ class Robot\n     else\n       newRegex = new RegExp(\"^#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n \n-    @logger.debug newRegex.toString()\n     @listeners.push new TextListener(@, newRegex, callback)\n \n   # Public: Adds a Listener that triggers when anyone enters the room.\n@@ -130,20 +125,6 @@ class Robot\n     if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n       @receive new CatchAllMessage(message)\n \n-  # Public: Loads every script in the given path.\n-  #\n-  # path - A String path on the filesystem.\n-  #\n-  # Returns nothing.\n-  load: (path) ->\n-    @logger.debug \"Loading scripts from #{path}\"\n-\n-    Fs.exists path, (exists) =>\n-      if exists\n-        @loadPaths.push path\n-        for file in Fs.readdirSync(path)\n-          @loadFile path, file\n-\n   # Public: Loads a file in path.\n   #\n   # path - A String path on the filesystem.\n@@ -160,7 +141,19 @@ class Robot\n       catch error\n         @logger.error \"Unable to load #{full}: #{error}\\n#{error.stack}\"\n \n-  # Public: Load scripts specfic in the `hubot-scripts.json` file.\n+  # Public: Loads every script in the given path.\n+  #\n+  # path - A String path on the filesystem.\n+  #\n+  # Returns nothing.\n+  load: (path) ->\n+    @logger.debug \"Loading scripts from #{path}\"\n+    Fs.exists path, (exists) =>\n+      if exists\n+        for file in Fs.readdirSync(path)\n+          @loadFile path, file\n+\n+  # Public: Load scripts specfied in the `hubot-scripts.json` file.\n   #\n   # path    - A String path to the hubot-scripts files.\n   # scripts - An Array of scripts to load.\n@@ -171,6 +164,20 @@ class Robot\n     for script in scripts\n       @loadFile path, script\n \n+  # Public: Load external scripts from npm packages specified in the\n+  # `external-scripts.json` file.\n+  #\n+  # packages - An Array of hubot script npm package names.\n+  #\n+  # Returns nothing.\n+  loadExternalScripts: (packages) ->\n+    @logger.debug \"Loading external-scripts from npm packages\"\n+    for pkg in packages\n+      try\n+        require(pkg)(@)\n+      catch error\n+        @logger.error \"Unable to load #{pkg}: #{error}\\n#{error.stack}\"\n+\n   # Setup the Connect server's defaults.\n   #\n   # Returns nothing.\n@@ -231,9 +238,9 @@ class Robot\n       else\n         \"hubot-#{adapter}\"\n \n-      @adapter = require(\"#{path}\").use(@)\n+      @adapter = require(path).use @\n     catch err\n-      @logger.error \"Cannot load adapter #{adapter} - #{err}\\n#{err.stack}\"\n+      @logger.error \"Cannot load adapter #{adapter} - #{err}\"\n \n   # Public: Help Commands for Running Scripts.\n   #\n@@ -247,22 +254,18 @@ class Robot\n   #\n   # Returns nothing.\n   parseHelp: (path) ->\n-    @logger.debug \"parseHelp of #{path}\"\n+    @logger.debug \"Parsing help for #{path}\"\n     scriptName = Path.basename(path).replace /\\.(coffee|js)$/, ''\n     scriptDocumentation = {}\n-    @documentation[scriptName] = scriptDocumentation\n \n-    @logger.debug \"parseHelp populating @documentation[#{scriptName}]\"\n     Fs.readFile path, 'utf-8', (err, body) =>\n       throw err if err?\n \n       currentSection = null\n       for line in body.split \"\\n\"\n         break unless line[0] is '#' or line.substr(0, 2) is '//'\n \n-        # remove leading comment\n         cleanedLine = line.replace(/^(#|\\/\\/)\\s?/, \"\").trim()\n-        @logger.debug \"parseHelp(#{scriptName}): read #{cleanedLine}\"\n \n         continue if cleanedLine.length is 0\n         continue if cleanedLine.toLowerCase() is 'none'\n@@ -271,25 +274,19 @@ class Robot\n         if nextSection in HUBOT_DOCUMENTATION_SECTIONS\n           currentSection = nextSection\n           scriptDocumentation[currentSection] = []\n-          @logger.debug \"parseHelp(#{scriptName}): adding #{currentSection} section\"\n-        # lines in a section _do_ have leading whitespace\n         else\n           if currentSection\n-            @logger.debug \"parseHelp(#{scriptName}) adding '#{cleanedLine.trim()}' to #{currentSection}\"\n             scriptDocumentation[currentSection].push cleanedLine.trim()\n-            if currentSection == 'commands'\n+            if currentSection is 'commands'\n               @commands.push cleanedLine.trim()\n \n-      # no current section? probably using old style documentation\n       if currentSection is null\n         @logger.info \"#{path} is using deprecated documentation syntax\"\n         scriptDocumentation.commands = []\n         for line in body.split(\"\\n\")\n-          break    if not (line[0] == '#' or line.substr(0, 2) == '//')\n+          break    if not (line[0] is '#' or line.substr(0, 2) is '//')\n           continue if not line.match('-')\n           cleanedLine = line[2..line.length].replace(/^hubot/i, @name).trim()\n-\n-          @logger.debug \"parseHelp(#{scriptName}) adding '#{cleanedLine}' to commands\"\n           scriptDocumentation.commands.push cleanedLine\n           @commands.push cleanedLine\n \n@@ -303,16 +300,6 @@ class Robot\n   send: (user, strings...) ->\n     @adapter.send user, strings...\n \n-  # Public: A helper send function to message a room that the robot is in.\n-  #\n-  # room    - String designating the room to message.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  messageRoom: (room, strings...) ->\n-    user = { room: room }\n-    @adapter.send user, strings...\n-\n   # Public: A helper reply function which delegates to the adapter's reply\n   # function.\n   #\n@@ -323,63 +310,15 @@ class Robot\n   reply: (user, strings...) ->\n     @adapter.reply user, strings...\n \n-  # Public: Get an Array of User objects stored in the brain.\n-  #\n-  # Returns an Array of User objects.\n-  users: ->\n-    @brain.data.users\n-\n-  # Public: Get a User object given a unique identifier.\n-  #\n-  # Returns a User instance of the specified user.\n-  userForId: (id, options) ->\n-    user = @brain.data.users[id]\n-    unless user\n-      user = new User id, options\n-      @brain.data.users[id] = user\n-\n-    if options and options.room and (!user.room or user.room isnt options.room)\n-      user = new User id, options\n-      @brain.data.users[id] = user\n-\n-    user\n-\n-  # Public: Get a User object given a name.\n-  #\n-  # Returns a User instance for the user with the specified name.\n-  userForName: (name) ->\n-    result = null\n-    lowerName = name.toLowerCase()\n-    for k of (@brain.data.users or { })\n-      userName = @brain.data.users[k]['name']\n-      if userName? and userName.toLowerCase() is lowerName\n-        result = @brain.data.users[k]\n-    result\n-\n-  # Public: Get all users whose names match fuzzyName. Currently, match\n-  # means 'starts with', but this could be extended to match initials,\n-  # nicknames, etc.\n+  # Public: A helper send function to message a room that the robot is in.\n   #\n-  # Returns an Array of User instances matching the fuzzy name.\n-  usersForRawFuzzyName: (fuzzyName) ->\n-    lowerFuzzyName = fuzzyName.toLowerCase()\n-    user for key, user of (@brain.data.users or {}) when (\n-      user.name.toLowerCase().lastIndexOf(lowerFuzzyName, 0) == 0)\n-\n-  # Public: If fuzzyName is an exact match for a user, returns an array with\n-  # just that user. Otherwise, returns an array of all users for which\n-  # fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n+  # room    - String designating the room to message.\n+  # strings - One or more Strings for each message to send.\n   #\n-  # Returns an Array of User instances matching the fuzzy name.\n-  usersForFuzzyName: (fuzzyName) ->\n-    matchedUsers = @usersForRawFuzzyName(fuzzyName)\n-    lowerFuzzyName = fuzzyName.toLowerCase()\n-    # We can scan matchedUsers rather than all users since usersForRawFuzzyName\n-    # will include exact matches\n-    for user in matchedUsers\n-      return [user] if user.name.toLowerCase() is lowerFuzzyName\n-\n-    matchedUsers\n+  # Returns nothing.\n+  messageRoom: (room, strings...) ->\n+    user = { room: room }\n+    @adapter.send user, strings...\n \n   # Public: Kick off the event loop for the adapter\n   #\n@@ -403,35 +342,4 @@ class Robot\n     content = JSON.parse data\n     @version = content.version\n \n-  # Public: Creates a scoped http client with chainable methods for\n-  # modifying the request. This doesn't actually make a request though.\n-  # Once your request is assembled, you can call `get()`/`post()`/etc to\n-  # send the request.\n-  #\n-  # url - String URL to access.\n-  #\n-  # Examples:\n-  #\n-  #     res.http(\"http://example.com\")\n-  #       # set a single header\n-  #       .header('Authorization', 'bearer abcdef')\n-  #\n-  #       # set multiple headers\n-  #       .headers(Authorization: 'bearer abcdef', Accept: 'application/json')\n-  #\n-  #       # add URI query parameters\n-  #       .query(a: 1, b: 'foo & bar')\n-  #\n-  #       # make the actual request\n-  #       .get() (err, res, body) ->\n-  #         console.log body\n-  #\n-  #       # or, you can POST data\n-  #       .post(data) (err, res, body) ->\n-  #         console.log body\n-  #\n-  # Returns a ScopedClient instance.\n-  http: (url) ->\n-    HttpClient.create(url)\n-\n module.exports = Robot", "changes": 200}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/src/templates/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/src/templates/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/Procfile?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "src/templates/Procfile", "sha": "c74af6ef78020c518f167f825cfe9b5b665c18f0", "additions": 1, "patch": "@@ -1 +1 @@\n-web: bin/hubot -a campfire -n Hubot\n+web: bin/hubot start -a campfire -u Hubot", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "src/templates/README.md", "sha": "3f269fe752bcc2664c493edf1af9c111ef2372e5", "additions": 16, "patch": "@@ -99,11 +99,26 @@ of adding it to hubot itself, you can submit pull requests to\n [hubot-scripts][hubot-scripts].\n \n To enable scripts from the hubot-scripts package, add the script name with\n-extension as a double quoted string to the hubot-scripts.json file in this\n+extension as a double quoted string to the `hubot-scripts.json` file in this\n repo.\n \n [hubot-scripts]: https://github.com/github/hubot-scripts\n \n+## external-scripts\n+\n+Tired of waiting for your script to be merged into `hubot-scripts`? Want to\n+maintain the repository and package yourself? Then this added functionality\n+maybe for you!\n+\n+Hubot is now able to load scripts from third-party `npm` packages! To enable\n+this functionality you can follow the following steps.\n+\n+1. Add the packages as dependencies into your `package.json`\n+2. `npm install` to make sure those packages are installed\n+\n+To enable third-party scripts that you've added you will need to add the package\n+name as a double quoted string to the `external-scripts.json` file in this repo.\n+\n ## Deployment\n \n     % heroku create --stack cedar", "changes": 17}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/src/templates/external-scripts.json", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/src/templates/external-scripts.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/external-scripts.json?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "src/templates/external-scripts.json", "sha": "fe51488c7066f6687ef680d6bfaa4f7768ef205c", "additions": 1, "patch": "@@ -0,0 +1 @@\n+[]", "changes": 1}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test.old/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test.old/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test.old/brain_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test.old/brain_test.coffee", "sha": "d970598c6511f776794eb65c794d853d2ccec2b3", "additions": 25, "patch": "@@ -0,0 +1,25 @@\n+assert = require 'assert'\n+\n+Brain  = require '../src/brain'\n+\n+saved   = false\n+closing = false\n+closed  = false\n+\n+brain = new Brain\n+\n+brain.on 'save', (data) ->\n+  is_closing = closing\n+  saved = closing = true\n+  brain.close() if !is_closing\n+  assert.equal 1, data.abc\n+\n+brain.on 'close', ->\n+  closed = true\n+\n+brain.data.abc = 1\n+brain.resetSaveInterval 0.1\n+\n+process.on 'exit', ->\n+  assert.ok saved\n+  assert.ok closed", "changes": 25}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test.old/google_images_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test.old/google_images_test.coffee", "previous_filename": "test/google_images_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test.old/google_images_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test.old/google_images_test.coffee", "sha": "fe8543793092649edc8cb02ffca76bc25ead3b65", "additions": 0, "changes": 0}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test.old/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test.old/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test.old/robot_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test.old/robot_test.coffee", "sha": "fb37ed643e37d8527a900803f9c469548ff9f5fc", "additions": 54, "patch": "@@ -0,0 +1,54 @@\n+Tests  = require './tests'\n+assert = require 'assert'\n+helper = Tests.helper()\n+require './scripts/test'\n+\n+server = require('http').createServer (req, res) ->\n+  res.writeHead 200\n+  res.end \"fetched\"\n+\n+server.listen 9001, ->\n+  assert.equal 5, helper.listeners.length\n+  assert.equal 0, helper.sent.length\n+\n+  helper.adapter.receive 'test'\n+  assert.equal 1, helper.sent.length\n+  assert.equal 'OK', helper.sent[0]\n+\n+  helper.adapter.receive 'reply'\n+  assert.equal 2, helper.sent.length\n+  assert.equal 'helper: OK', helper.sent[1]\n+\n+  helper.adapter.receive 'random'\n+  assert.equal 3, helper.sent.length\n+  assert.ok helper.sent[2].match(/^(1|2)$/)\n+\n+\n+  # Test that when we message a room, the 'recipient' is the robot user and the room attribute is set properly\n+  helper.messageRoom \"chat@example.com\", \"Hello room\"\n+  assert.equal 4, helper.sent.length\n+  assert.equal \"chat@example.com\", helper.recipients[3].room\n+  assert.equal \"Hello room\", helper.sent[3]\n+\n+  helper.messageRoom \"chat2@example.com\", \"Hello to another room\"\n+  assert.equal 5, helper.sent.length\n+  assert.equal \"chat2@example.com\", helper.recipients[4].room\n+  assert.equal \"Hello to another room\", helper.sent[4]\n+\n+\n+  helper.adapter.receive 'foobar'\n+  assert.equal 6, helper.sent.length\n+  assert.equal 'catch-all', helper.sent[5]\n+\n+\n+  # set a callback for when the next message is replied to\n+  helper.cb = (msg) ->\n+    assert.equal 7, helper.sent.length\n+    assert.equal 'fetched', msg\n+    helper.close()\n+    server.close()\n+\n+  helper.adapter.receive 'http'\n+\n+  helper.stop()\n+", "changes": 54}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test.old/rules_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test.old/rules_test.coffee", "previous_filename": "test/rules_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test.old/rules_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test.old/rules_test.coffee", "sha": "65e329a6ae1d7e62eaf7d1381639a08c03bc6146", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test.old/scripts/test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test.old/scripts/test.coffee", "previous_filename": "test/scripts/test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test.old/scripts/test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test.old/scripts/test.coffee", "sha": "b9838ab5e7412f5ed806ba03d8912bf0eb1af7de", "additions": 0, "changes": 0}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test.old/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test.old/tests.coffee", "previous_filename": "test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test.old/tests.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test.old/tests.coffee", "sha": "54d9c8afb938f699c8a720e0200a20744dbe62d3", "additions": 0, "changes": 0}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test.old/user_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test.old/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test.old/user_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test.old/user_test.coffee", "sha": "74317e0f3598e7a0941948648825226e1f73095a", "additions": 14, "patch": "@@ -0,0 +1,14 @@\n+User = require '../src/user'\n+assert = require 'assert'\n+\n+\n+user = new User \"Fake User\", {name: 'fake', type: \"groupchat\"}\n+assert.equal \"Fake User\", user.id\n+assert.equal \"groupchat\", user.type\n+assert.equal \"fake\", user.name\n+\n+user = new User \"Fake User\", {room: \"chat@room.jabber\", type: \"groupchat\"}\n+assert.equal \"Fake User\", user.id\n+assert.equal \"chat@room.jabber\", user.room\n+assert.equal \"groupchat\", user.type\n+assert.equal \"Fake User\", user.name # Make sure that if no name is given, we fallback to the ID", "changes": 14}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test/adapter_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test/adapter_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/adapter_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test/adapter_test.coffee", "sha": "15d79fb98229dc40bce473f0e74c9d6073690d48", "additions": 7, "patch": "@@ -0,0 +1,7 @@\n+module.exports = {\n+\n+  \"true should still equal true\": (test) ->\n+    test.ok true\n+    test.done()\n+\n+}", "changes": 7}, {"status": "modified", "deletions": 21, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test/brain_test.coffee", "sha": "b95cc0c243225fb50047f7e8d90d2a07f3f2c9c7", "additions": 3, "patch": "@@ -1,25 +1,7 @@\n-assert = require 'assert'\n+Brain = require '../src/brain'\n \n-Brain  = require '../src/brain'\n+module.exports = {\n \n-saved   = false\n-closing = false\n-closed  = false\n \n-brain = new Brain\n \n-brain.on 'save', (data) ->\n-  is_closing = closing\n-  saved = closing = true\n-  brain.close() if !is_closing\n-  assert.equal 1, data.abc\n-\n-brain.on 'close', ->\n-  closed = true\n-\n-brain.data.abc = 1\n-brain.resetSaveInterval 0.1\n-\n-process.on 'exit', ->\n-  assert.ok saved\n-  assert.ok closed\n+}", "changes": 24}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test/creator_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test/creator_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/creator_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test/creator_test.coffee", "sha": "e05868708c1d416c21ca50e464bc3daba5d27fa7", "additions": 7, "patch": "@@ -0,0 +1,7 @@\n+Creator = require '../src/creator'\n+\n+module.exports = {\n+\n+\n+\n+}", "changes": 7}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test/listener_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test/listener_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test/listener_test.coffee", "sha": "498cfc241d36e9dcd3e23fd0dbd4431f434cde83", "additions": 7, "patch": "@@ -0,0 +1,7 @@\n+{Listener, TextListener} = require '../src/listener'\n+\n+module.exports = {\n+\n+\n+\n+}", "changes": 7}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test/message_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test/message_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/message_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test/message_test.coffee", "sha": "01928d3b9ef1780f397c503921a76133d27b292f", "additions": 7, "patch": "@@ -0,0 +1,7 @@\n+{Message, TextMessage, EnterMessage, LeaveMessage, CatchAllMessage} = require '../src/message'\n+\n+module.exports = {\n+\n+\n+\n+}", "changes": 7}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test/response_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test/response_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/response_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test/response_test.coffee", "sha": "2da0d4220c15104c3af32ff07b33492a71aa9bce", "additions": 7, "patch": "@@ -0,0 +1,7 @@\n+Response = require '../src/response'\n+\n+module.exports = {\n+\n+\n+\n+}", "changes": 7}, {"status": "modified", "deletions": 50, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test/robot_test.coffee", "sha": "79e4b8baf9222bf62b29672c1d995a8f2504e5bf", "additions": 3, "patch": "@@ -1,54 +1,7 @@\n-Tests  = require './tests'\n-assert = require 'assert'\n-helper = Tests.helper()\n-require './scripts/test'\n+Robot = require '../src/robot'\n \n-server = require('http').createServer (req, res) ->\n-  res.writeHead 200\n-  res.end \"fetched\"\n+module.exports = {\n \n-server.listen 9001, ->\n-  assert.equal 5, helper.listeners.length\n-  assert.equal 0, helper.sent.length\n \n-  helper.adapter.receive 'test'\n-  assert.equal 1, helper.sent.length\n-  assert.equal 'OK', helper.sent[0]\n-\n-  helper.adapter.receive 'reply'\n-  assert.equal 2, helper.sent.length\n-  assert.equal 'helper: OK', helper.sent[1]\n-\n-  helper.adapter.receive 'random'\n-  assert.equal 3, helper.sent.length\n-  assert.ok helper.sent[2].match(/^(1|2)$/)\n-\n-\n-  # Test that when we message a room, the 'recipient' is the robot user and the room attribute is set properly\n-  helper.messageRoom \"chat@example.com\", \"Hello room\"\n-  assert.equal 4, helper.sent.length\n-  assert.equal \"chat@example.com\", helper.recipients[3].room\n-  assert.equal \"Hello room\", helper.sent[3]\n-\n-  helper.messageRoom \"chat2@example.com\", \"Hello to another room\"\n-  assert.equal 5, helper.sent.length\n-  assert.equal \"chat2@example.com\", helper.recipients[4].room\n-  assert.equal \"Hello to another room\", helper.sent[4]\n-\n-\n-  helper.adapter.receive 'foobar'\n-  assert.equal 6, helper.sent.length\n-  assert.equal 'catch-all', helper.sent[5]\n-\n-\n-  # set a callback for when the next message is replied to\n-  helper.cb = (msg) ->\n-    assert.equal 7, helper.sent.length\n-    assert.equal 'fetched', msg\n-    helper.close()\n-    server.close()\n-\n-  helper.adapter.receive 'http'\n-\n-  helper.stop()\n \n+}", "changes": 53}, {"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/0a77be37cd751832028b63298a5d048206c00350/test/user_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0a77be37cd751832028b63298a5d048206c00350/test/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/user_test.coffee?ref=0a77be37cd751832028b63298a5d048206c00350", "filename": "test/user_test.coffee", "sha": "9e966fcc0e157071ce5ce344ce79adcba5752133", "additions": 22, "patch": "@@ -1,14 +1,26 @@\n User = require '../src/user'\n-assert = require 'assert'\n \n+module.exports = {\n \n-user = new User \"Fake User\", {name: 'fake', type: \"groupchat\"}\n-assert.equal \"Fake User\", user.id\n-assert.equal \"groupchat\", user.type\n-assert.equal \"fake\", user.name\n+  'create a user': (test) ->\n+    user = new User 'Fake User',\n+      name: 'fake'\n+      type: 'groupchat'\n \n-user = new User \"Fake User\", {room: \"chat@room.jabber\", type: \"groupchat\"}\n-assert.equal \"Fake User\", user.id\n-assert.equal \"chat@room.jabber\", user.room\n-assert.equal \"groupchat\", user.type\n-assert.equal \"Fake User\", user.name # Make sure that if no name is given, we fallback to the ID\n+    test.ok 'Fake User' is user.id\n+    test.ok 'fake' is user.name\n+    test.ok 'groupchat' is user.type\n+    test.done()\n+\n+  'create a user without name defaults to ID as name': (test) ->\n+    user = new User 'Fake User',\n+      room: 'chat@room.jabber'\n+      type: 'groupchat'\n+\n+    test.ok 'Fake User' is user.id\n+    test.ok 'Fake User' is user.name\n+    test.ok 'groupchat' is user.type\n+    test.ok 'chat@room.jabber' is user.room\n+    test.done()\n+\n+}", "changes": 32}], "385": [{"status": "removed", "deletions": 227, "raw_url": "https://github.com/hubotio/hubot/raw/010a6be1be29b9f2798e5b3862d3887e41400e3b/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/010a6be1be29b9f2798e5b3862d3887e41400e3b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=010a6be1be29b9f2798e5b3862d3887e41400e3b", "filename": "CHANGELOG.md", "sha": "ea479dedc2e25659d2cbb5d196290ec66a741072", "additions": 0, "patch": "@@ -1,227 +0,0 @@\n-v2.3.4\n-======\n-\n-* Add 'examples' and 'urls' to list of known documentation sections\n-\n-* Improve mustache results - marsam in #341\n-\n-v2.3.3\n-======\n-\n-* Fix help parsing of javascript iles - ferlores in #322 \n-\n-* Roles will correctly semicolon-delimit the list of roles if one (or more) roles contain a comma. - futuraprime in #327\n-\n-* Updated translations of supported languages as of 20120801 - sopel in #328\n-\n-* Escape brackets in html view of help - tombell, technicalpickles\n-\n-* More coffee-like translate.coffee - elmoeleven in #336\n-\n-* Fixed reference to when npm was included w/ node - technicalpickles in #347\n-\n-* Backwards-compatible help parsing, and tracking all documentation instead of just commands - technicalpickles\n-\n-v2.3.2\n-======\n-* New route `/hubot/help` to display command help - tombell\n-\n-* Role script fix - ferlores\n-\n-* Store connect server - tombell\n-\n-v2.3.0\n-======\n-* Extracted remaining classes into their own files - tombell\n-\n-**Note** this is a breaking change for adapters. Adapters are going to want to\n-use the following code snippet for requiring classes from hubot.\n-\n-    {Adapter,Robot} = require 'hubot'\n-\n-* Update the formatting of documentation comments at the top of\n-  scripts - technicalpickles\n-\n-* Update the parsing of the documentation comments - tombell\n-\n-v2.2.0\n-======\n-* Fixed keep alive ping, requires `HEROKU_URL` - tombell and jimeh\n-\n-* Updated dependency versions - tombell and jimeh\n-\n-v2.1.4\n-======\n-* Hubot now keeps himself alive due to Heroku's web processes shutting down\n-  when idle - tombell\n-\n-* Hubot's image search is now defaulted to safe search - kylev\n-\n-* Hubot now emits a 'connected' event when he connects to the chosen\n-  adapter - sbryant\n-\n-* Fix the roles.coffee not to respond to empty names - christierney\n-\n-v2.1.3 - The Heat Stroke Release\n-================================\n-* Hubot now has a web interface and supports connect middleware, examples in\n-  httpd.coffee - atmos / tombell\n-\n-    module.exports = (robot) ->\n-      robot.router.get \"/hubot/version\", (req, res) ->\n-        res.end robot.version\n-\n-* Add a catchAll callback that handles responses that match nothing\n-  else - titanous / ejfinnerman\n-\n-    module.exports = (robot) ->\n-      robot.catchAll (msg) ->\n-        router.get \"/hubot/version\", (req, res) ->\n-\n-v2.1.2\n-======\n-* Update behaviour of finishing further execution of listeners\n-* Scripts are now loaded in the following order\n-  * Scripts defined in `./hubot-scripts.json` are loaded in order\n-  * Scripts are loaded alphabetically from `/scripts`\n-\n-v2.1.1\n-======\n-* The hwhoops release, finish/done behavior is handled elsewhere\n-\n-v2.1.0\n-======\n-* Introduce Response.finish() to indicate that a message should not be\n-  passed on to any other listeners\n-* Scripts are evaluated in the following order\n-  * `./scripts` is loaded alphabetically\n-  * The contents of `./hubot-scripts.json` is loaded in order\n-\n-    module.exports = (robot) ->\n-      robot.respond /\\s*yo\\s*\\\\?/i, (msg) ->\n-        msg.reply \"Yo!\"\n-        msg.finish()\n-\n-v2.0.7\n-======\n-* Update topic and logger scoping fixups - Horace Ko\n-* Don't exit the process if listening to a room is denied\n-\n-v2.0.6\n-======\n-* Don't kill all username looks if some users don't have name attribute\n-\n-v2.0.5\n-======\n-* All adapters have been removed except for shell and campfire\n-* Better win32 compatability\n-* Campfire reconnects on streaming errors on a per-room basis\n-\n-v2.0.0\n-======\n-* Major adapter overhaul, they're now external - Tom Bell\n-* Shell adapter now functions like a REPL - Tom Bell\n-* Improved logging using log.js - Tom Bell\n-* Search help commands - Gabriel Horner\n-* Improvements to roles.coffee - Daniel Schauenberg\n-\n-Upgrading\n----------\n-If you are not using the Campfire or Shell adapters please be aware before\n-upgrading that adapters have been moved out of the code of hubot and you should\n-install the hubot adapters from npm when people make them available. Until your\n-adapter is available you may wish to remain on v1.1.11.\n-\n-v1.1.11\n-=======\n-* support self-signed SSL certs for IRC - Ville Lautanala <lautis@gmail.com>\n-* twilio adapter fixups - Tom Bell\n-* XMPP adapter fixups - Patrik Votocek <patrik@votocek.cz>\n-* Everyone gets a pug - Jon Maddox <jon@jonmaddox.com>\n-* Accept contact list requests - Arlo Carreon <arlo.carreon@gmail.com>\n-* Google talk whitelisting support - pescuma <pescuma@chaordicsystems.com>\n-\n-v1.1.10\n-=======\n-* Fix optparse problems on certain linuxes\n-* IRC adapter fixups for users - Andrew Nordman <cadwallion@gmail.com>\n-* Bump npm irc depedency - BrokenEnso <ericday96@gmail.com>\n-* accept invites on IRC - Dingding Ye <yedingding@gmail.com>\n-* Support talkerapp style @replies - Charles Barbier <unixcharles@gmail.com>\n-* Set hubot's google talk status properly - Matt McCormick <mbmccormick@gmail.com>\n-\n-v1.1.9\n-======\n-* Add a google talk adapter - Arlo Carreon <arlo.carreon@gmail.com>\n-\n-v1.1.8\n-======\n-* Fix a bug in robot.respond that allowed regexes to be constructed that\n-  could be triggered without prefixing with the robot's name - atmos\n-* Fixup rarely triggered response stuff that uses an undefined variable\n-\n-v1.1.7\n-======\n-* Fix username issues where campfire names weren't updated - atmos\n-* Allow help files to parse from raw js - Jason Ford <jason@jason-ford.com>\n-* Talkerapp bug fix ups - Charles Barbier <unixcharles@gmail.com>, Magnus Bergmark <magnus.bergmark@gmail.com>\n-* Preserve ordering in campfire message sending - Sean Cribbs <sean@basho.com>\n-* Flowdock adapter - Arttu Tervo <arttu.tervo@nodeta.fi>\n-\n-\n-v1.1.5\n-======\n-* Add a talkerapp adapter - Victor Castell <victorcoder@gmail.com>\n-* Add a twitter adapter - Mathilde Lemee <mathilde.lemee@yahoo.fr>\n-* Emit a loaded event in mergeData - codec <codec@fnord.cx>\n-\n-v1.1.2\n-======\n-* Fix the optparse npm install anomaly\n-\n-v1.1.1\n-======\n-* Fix campfire adapter getting duplicate messages - atmos\n-\n-v1.1.0\n-======\n-\n-* Explicity errors for misconfigured campfire setup - Damien Mathieu <damien.mathieu@shazino.com>\n-* Support '-v' as a CLI opt to display version - Damien Mathieu <damien.mathieu@shazino.com>\n-* Tons of fixups to the hipchat adapter - Codafoo <cesar@webzense.net>, Assaf Arkin <assaf@labnotes.org>\n-* Various IRC adapter fixups - Mark Paschal <markpasc@markpasc.org>, Jesse Szwedko\n-* Enter/Leave events for adapters - Brian Donovan <me@brian-donovan.com>\n-* XMPP adapter fixups - codec <codec@fnord.cx>,\n-* Break out persistence layer to make it easier to have multiple backends - technoweenie\n-* Various refactorings/cleanups - Tom Bell <tomb@tombell.org.uk>\n-* translation script enhancements - OiNutter <willmckenzie@oinutter.co.uk>\n-* XMPP user persistence fixups - Andy Fowler <andy@andyfowler.com>\n-\n-Upgrading\n----------\n-If you're using the redis persistence you're going to need to enable\n-'redis-brain.coffee' in your hubot-scripts.json file.  It was moved\n-there and the brain now supports events allowing you to use any\n-persistence backend you want.\n-\n-v1.0.5\n-======\n-\n-* Remove infinite loop script to keep things alive - atmos\n-\n-v1.0.4\n-======\n-\n-* HipChat adapter support - Assaf Arkin <assaf@labnotes.org>\n-* XMPP adapter support - Andy Fowler <andy@andyfowler.com>\n-* Twilio adapter fixups - Jesse Newland <jesse@jnewland.com>\n-* Fixup hubot-scripts.json template examples - Mike Skalnik <mike.skalnik@gmail.com>\n-\n-v1.0.3\n-======\n-\n-* Fix IRC adapter replies - Scott Moak <scott.moak@gmail.com>\n-* Ensure people are running node 0.4.x - Corey Donohoe <atmos@atmos.org>\n-* Doc fixups - Aitor Garc\u00eda Rey <aitor@linkingpaths.com>\n-* Twilio adapter support - Tom Bell <tomb@tombell.org.uk>\n-", "changes": 227}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=d30ff84330ce247d2a87ac85bdf73f776cb6fa75", "filename": "README.md", "sha": "de81c578769b246783abf4c2976125e6e49b7a10", "additions": 0, "patch": "@@ -33,9 +33,6 @@ Please submit issues and pull requests for third party adapters to the adapter\n repo, not this repo (unless it's the Campfire or Shell adapter).\n \n [hubot-wiki]: https://github.com/github/hubot/wiki\n-[third-party-adapters]: https://github.com/github/hubot/tree/master/src/adapters/third-party\n-[split-subpath]: http://help.github.com/split-a-subpath-into-a-new-repo/\n-[logjs]: https://github.com/visionmedia/log.js\n \n ## hubot-scripts\n ", "changes": 3}, {"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=d30ff84330ce247d2a87ac85bdf73f776cb6fa75", "filename": "bin/hubot", "sha": "30895ea207d379abb8691c427bcd9fc527af43d6", "additions": 6, "patch": "@@ -1,19 +1,13 @@\n #!/usr/bin/env coffee\n-\n-##\n-# hubot [options]\n-#\n-# Launch an interactive hubot\n-#\n # vim:ft=coffee ts=2 sw=2 et :\n # -*- mode:coffee -*-\n \n-Hubot      = require '..'\n-Fs         = require 'fs'\n-Path       = require 'path'\n-HTTP       = require 'http'\n-Creator    = require '../src/creator'\n-OptParse   = require 'optparse'\n+Creator  = require '../src/creator'\n+Hubot    = require '..'\n+\n+Fs       = require 'fs'\n+OptParse = require 'optparse'\n+Path     = require 'path'\n \n Switches = [\n   [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],", "changes": 18}, {"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=d30ff84330ce247d2a87ac85bdf73f776cb6fa75", "filename": "index.coffee", "sha": "516076fab7143e5bdafda5f6674c37bec013695c", "additions": 14, "patch": "@@ -6,17 +6,19 @@ Response                                                = require './src/respons\n {Listener,TextListener}                                 = require './src/listener'\n {TextMessage,EnterMessage,LeaveMessage,CatchAllMessage} = require './src/message'\n \n+module.exports = {\n+  User\n+  Brain\n+  Robot\n+  Adapter\n+  Response\n+  Listener\n+  TextListener\n+  TextMessage\n+  EnterMessage\n+  LeaveMessage\n+  CatchAllMessage\n+}\n+\n module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName) ->\n   new Robot adapterPath, adapterName, enableHttpd, botName\n-\n-module.exports.User            = User\n-module.exports.Brain           = Brain\n-module.exports.Robot           = Robot\n-module.exports.Adapter         = Adapter\n-module.exports.Response        = Response\n-module.exports.Listener        = Listener\n-module.exports.TextListener    = TextListener\n-module.exports.TextMessage     = TextMessage\n-module.exports.EnterMessage    = EnterMessage\n-module.exports.LeaveMessage    = LeaveMessage\n-module.exports.CatchAllMessage = CatchAllMessage", "changes": 26}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=d30ff84330ce247d2a87ac85bdf73f776cb6fa75", "filename": "src/adapters/campfire.coffee", "sha": "f40ec15269e2aef09f8a5d414fa4632471f0ac55", "additions": 1, "patch": "@@ -73,7 +73,7 @@ exports.use = (robot) ->\n class CampfireStreaming extends EventEmitter\n   constructor: (options, @robot) ->\n     unless options.token? and options.rooms? and options.account?\n-      @robot.logger.error \"Not enough parameters provided. I Need a token, rooms and account\"\n+      @robot.logger.error \"Not enough parameters provided. I need a token, rooms and account\"\n       process.exit(1)\n \n     @token         = options.token", "changes": 2}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=d30ff84330ce247d2a87ac85bdf73f776cb6fa75", "filename": "src/brain.coffee", "sha": "4d296f11f14006cff1c206555fed8b6f05273db1", "additions": 2, "patch": "@@ -5,10 +5,8 @@ class Brain extends EventEmitter\n   # Represents somewhat persistent storage for the robot. Extend this.\n   #\n   # Returns a new Brain with no external storage.\n-  constructor: () ->\n-    @data =\n-      users: { }\n-\n+  constructor: ->\n+    @data = users: { }\n     @resetSaveInterval 5\n \n   # Public: Emits the 'save' event so that 'brain' scripts can handle persisting.", "changes": 6}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=d30ff84330ce247d2a87ac85bdf73f776cb6fa75", "filename": "src/listener.coffee", "sha": "b704c7448773aa6cd330a3252e800d53f0991ee4", "additions": 4, "patch": "@@ -37,5 +37,7 @@ class TextListener extends Listener\n       if message instanceof TextMessage\n         message.match @regex\n \n-module.exports.Listener     = Listener\n-module.exports.TextListener = TextListener\n+module.exports = {\n+  Listener\n+  TextListener\n+}", "changes": 6}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=d30ff84330ce247d2a87ac85bdf73f776cb6fa75", "filename": "src/message.coffee", "sha": "b76943123498908c144e8559c2a7b497de91cb43", "additions": 7, "patch": "@@ -42,8 +42,10 @@ class CatchAllMessage extends Message\n   # message - The original message.\n   constructor: (@message) ->\n \n-module.exports.Message         = Message\n-module.exports.TextMessage     = TextMessage\n-module.exports.EnterMessage    = EnterMessage\n-module.exports.LeaveMessage    = LeaveMessage\n-module.exports.CatchAllMessage = CatchAllMessage\n+module.exports = {\n+  Message\n+  TextMessage\n+  EnterMessage\n+  LeaveMessage\n+  CatchAllMessage\n+}", "changes": 12}, {"status": "modified", "deletions": 9, "raw_url": "https://github.com/hubotio/hubot/raw/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=d30ff84330ce247d2a87ac85bdf73f776cb6fa75", "filename": "src/response.coffee", "sha": "6996dc437a31512ca73fe8f9b141159004c9fa1f", "additions": 9, "patch": "@@ -17,15 +17,6 @@ class Response\n   send: (strings...) ->\n     @robot.adapter.send @message.user, strings...\n \n-  # Public: Posts a topic changing message\n-  #\n-  # strings - One or more strings to set as the topic of the\n-  #           room the bot is in.\n-  #\n-  # Returns nothing.\n-  topic: (strings...) ->\n-    @robot.adapter.topic @message.user, strings...\n-\n   # Public: Posts a message mentioning the current user.\n   #\n   # strings - One or more strings to be posted. The order of these strings\n@@ -35,6 +26,15 @@ class Response\n   reply: (strings...) ->\n     @robot.adapter.reply @message.user, strings...\n \n+  # Public: Posts a topic changing message\n+  #\n+  # strings - One or more strings to set as the topic of the\n+  #           room the bot is in.\n+  #\n+  # Returns nothing.\n+  topic: (strings...) ->\n+    @robot.adapter.topic @message.user, strings...\n+\n   # Public: Picks a random item from the given items.\n   #\n   # items - An Array of items.", "changes": 18}, {"status": "modified", "deletions": 60, "raw_url": "https://github.com/hubotio/hubot/raw/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d30ff84330ce247d2a87ac85bdf73f776cb6fa75/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=d30ff84330ce247d2a87ac85bdf73f776cb6fa75", "filename": "src/robot.coffee", "sha": "61b5659256f33a408cf5ecf8d85bde3c3f778a8f", "additions": 44, "patch": "@@ -9,11 +9,21 @@ Response                                                = require './response'\n {Listener,TextListener}                                 = require './listener'\n {TextMessage,EnterMessage,LeaveMessage,CatchAllMessage} = require './message'\n \n-inspect = require('util').inspect\n-\n-HUBOT_DEFAULT_ADAPTERS = [ 'campfire', 'shell' ]\n-HUBOT_DOCUMENTATION_SECTIONS = [ 'description', 'dependencies', 'configuration', 'commands', 'notes', 'author', 'examples', 'urls' ]\n-\n+HUBOT_DEFAULT_ADAPTERS = [\n+  'campfire',\n+  'shell'\n+]\n+\n+HUBOT_DOCUMENTATION_SECTIONS = [\n+  'description',\n+  'dependencies',\n+  'configuration',\n+  'commands',\n+  'notes',\n+  'author',\n+  'examples',\n+  'urls'\n+]\n \n class Robot\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n@@ -31,25 +41,12 @@ class Robot\n     @Response     = Response\n     @commands     = []\n     @listeners    = []\n-    @loadPaths    = []\n-    @enableSlash  = false\n     @logger       = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n \n     @parseVersion()\n     @setupConnect() if httpd\n     @loadAdapter adapterPath, adapter if adapter?\n \n-    @documentation = {}\n-\n-  # Public: Specify a router and callback to register as Connect middleware.\n-  #\n-  # route    - A String of the route to match.\n-  # callback - A Function that is called when the route is requested.\n-  #\n-  # Returns nothing.\n-  route: (route, callback) ->\n-    @router.get route, callback\n-\n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n   #\n@@ -85,7 +82,6 @@ class Robot\n     else\n       newRegex = new RegExp(\"^#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n \n-    @logger.debug newRegex.toString()\n     @listeners.push new TextListener(@, newRegex, callback)\n \n   # Public: Adds a Listener that triggers when anyone enters the room.\n@@ -130,20 +126,6 @@ class Robot\n     if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n       @receive new CatchAllMessage(message)\n \n-  # Public: Loads every script in the given path.\n-  #\n-  # path - A String path on the filesystem.\n-  #\n-  # Returns nothing.\n-  load: (path) ->\n-    @logger.debug \"Loading scripts from #{path}\"\n-\n-    Fs.exists path, (exists) =>\n-      if exists\n-        @loadPaths.push path\n-        for file in Fs.readdirSync(path)\n-          @loadFile path, file\n-\n   # Public: Loads a file in path.\n   #\n   # path - A String path on the filesystem.\n@@ -160,7 +142,19 @@ class Robot\n       catch error\n         @logger.error \"Unable to load #{full}: #{error}\\n#{error.stack}\"\n \n-  # Public: Load scripts specfic in the `hubot-scripts.json` file.\n+  # Public: Loads every script in the given path.\n+  #\n+  # path - A String path on the filesystem.\n+  #\n+  # Returns nothing.\n+  load: (path) ->\n+    @logger.debug \"Loading scripts from #{path}\"\n+    Fs.exists path, (exists) =>\n+      if exists\n+        for file in Fs.readdirSync(path)\n+          @loadFile path, file\n+\n+  # Public: Load scripts specfied in the `hubot-scripts.json` file.\n   #\n   # path    - A String path to the hubot-scripts files.\n   # scripts - An Array of scripts to load.\n@@ -231,9 +225,9 @@ class Robot\n       else\n         \"hubot-#{adapter}\"\n \n-      @adapter = require(\"#{path}\").use(@)\n+      @adapter = require(path).use @\n     catch err\n-      @logger.error \"Cannot load adapter #{adapter} - #{err}\\n#{err.stack}\"\n+      @logger.error \"Cannot load adapter #{adapter} - #{err}\"\n \n   # Public: Help Commands for Running Scripts.\n   #\n@@ -247,22 +241,18 @@ class Robot\n   #\n   # Returns nothing.\n   parseHelp: (path) ->\n-    @logger.debug \"parseHelp of #{path}\"\n+    @logger.debug \"Parsing help for #{path}\"\n     scriptName = Path.basename(path).replace /\\.(coffee|js)$/, ''\n     scriptDocumentation = {}\n-    @documentation[scriptName] = scriptDocumentation\n \n-    @logger.debug \"parseHelp populating @documentation[#{scriptName}]\"\n     Fs.readFile path, 'utf-8', (err, body) =>\n       throw err if err?\n \n       currentSection = null\n       for line in body.split \"\\n\"\n         break unless line[0] is '#' or line.substr(0, 2) is '//'\n \n-        # remove leading comment\n         cleanedLine = line.replace(/^(#|\\/\\/)\\s?/, \"\").trim()\n-        @logger.debug \"parseHelp(#{scriptName}): read #{cleanedLine}\"\n \n         continue if cleanedLine.length is 0\n         continue if cleanedLine.toLowerCase() is 'none'\n@@ -271,25 +261,19 @@ class Robot\n         if nextSection in HUBOT_DOCUMENTATION_SECTIONS\n           currentSection = nextSection\n           scriptDocumentation[currentSection] = []\n-          @logger.debug \"parseHelp(#{scriptName}): adding #{currentSection} section\"\n-        # lines in a section _do_ have leading whitespace\n         else\n           if currentSection\n-            @logger.debug \"parseHelp(#{scriptName}) adding '#{cleanedLine.trim()}' to #{currentSection}\"\n             scriptDocumentation[currentSection].push cleanedLine.trim()\n-            if currentSection == 'commands'\n+            if currentSection is 'commands'\n               @commands.push cleanedLine.trim()\n \n-      # no current section? probably using old style documentation\n       if currentSection is null\n         @logger.info \"#{path} is using deprecated documentation syntax\"\n         scriptDocumentation.commands = []\n         for line in body.split(\"\\n\")\n-          break    if not (line[0] == '#' or line.substr(0, 2) == '//')\n+          break    if not (line[0] is '#' or line.substr(0, 2) is '//')\n           continue if not line.match('-')\n           cleanedLine = line[2..line.length].replace(/^hubot/i, @name).trim()\n-\n-          @logger.debug \"parseHelp(#{scriptName}) adding '#{cleanedLine}' to commands\"\n           scriptDocumentation.commands.push cleanedLine\n           @commands.push cleanedLine\n \n@@ -303,16 +287,6 @@ class Robot\n   send: (user, strings...) ->\n     @adapter.send user, strings...\n \n-  # Public: A helper send function to message a room that the robot is in.\n-  #\n-  # room    - String designating the room to message.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  messageRoom: (room, strings...) ->\n-    user = { room: room }\n-    @adapter.send user, strings...\n-\n   # Public: A helper reply function which delegates to the adapter's reply\n   # function.\n   #\n@@ -323,6 +297,16 @@ class Robot\n   reply: (user, strings...) ->\n     @adapter.reply user, strings...\n \n+  # Public: A helper send function to message a room that the robot is in.\n+  #\n+  # room    - String designating the room to message.\n+  # strings - One or more Strings for each message to send.\n+  #\n+  # Returns nothing.\n+  messageRoom: (room, strings...) ->\n+    user = { room: room }\n+    @adapter.send user, strings...\n+\n   # Public: Get an Array of User objects stored in the brain.\n   #\n   # Returns an Array of User objects.\n@@ -364,7 +348,7 @@ class Robot\n   usersForRawFuzzyName: (fuzzyName) ->\n     lowerFuzzyName = fuzzyName.toLowerCase()\n     user for key, user of (@brain.data.users or {}) when (\n-      user.name.toLowerCase().lastIndexOf(lowerFuzzyName, 0) == 0)\n+      user.name.toLowerCase().lastIndexOf(lowerFuzzyName, 0) is 0)\n \n   # Public: If fuzzyName is an exact match for a user, returns an array with\n   # just that user. Otherwise, returns an array of all users for which", "changes": 104}], "386": [{"status": "modified", "deletions": 106, "raw_url": "https://github.com/hubotio/hubot/raw/390e44d928b7cb4bf17e89f65e12e3024be2aba8/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/390e44d928b7cb4bf17e89f65e12e3024be2aba8/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=390e44d928b7cb4bf17e89f65e12e3024be2aba8", "filename": "bin/hubot", "sha": "9e50931499795a7f738afd70ea62015079143220", "additions": 60, "patch": "@@ -2,111 +2,65 @@\n # vim:ft=coffee ts=2 sw=2 et :\n # -*- mode:coffee -*-\n \n-Creator  = require '../src/creator'\n-Hubot    = require '..'\n-\n-Fs       = require 'fs'\n-OptParse = require 'optparse'\n-Path     = require 'path'\n-\n-Switches = [\n-  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n-  [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n-  [ \"-h\", \"--help\",            \"Display the help information\" ],\n-  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n-  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n-  [ \"-r\", \"--require PATH\",    \"Alternative scripts path\" ],\n-  [ \"-s\", \"--enable-slash\",    \"Enable replacing the robot's name with '/' (deprecated)\" ],\n-  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n-]\n-\n-Options =\n-  adapter: \"shell\"\n-  alias: false\n-  create: false\n-  enableHttpd: true\n-  scripts: []\n-  name: \"Hubot\"\n-  path: \".\"\n-\n-Parser = new OptParse.OptionParser(Switches)\n-Parser.banner = \"Usage hubot [options]\"\n-\n-Parser.on \"adapter\", (opt, value) ->\n-  Options.adapter = value\n-\n-Parser.on \"create\", (opt, value) ->\n-  Options.path = value\n-  Options.create = true\n-\n-Parser.on \"disable-httpd\", (opt) ->\n-  Options.enableHttpd = false\n-\n-Parser.on \"help\", (opt, value) ->\n-  console.log Parser.toString()\n+Hubot   = require '..'\n+Creator = require '../src/creator'\n+\n+Fs      = require 'fs'\n+Path    = require 'path'\n+\n+App     = require 'commander'\n+\n+pkg = Fs.readFileSync \"#{__dirname}/../package.json\"\n+\n+App.name = 'hubot'\n+App.version = JSON.parse(pkg).version\n+\n+App\n+  .command('create [path]')\n+  .description('Create a new deployable hubot')\n+  .action (path, options) ->\n+    path or= './hubot'\n+    creator = new Creator(path)\n+    creator.run()\n+\n+App\n+  .command('start')\n+  .description('Start a hubot instance')\n+  .option('-a, --adapter <adapter>', 'Adapter for hubot to use')\n+  .option('-d, --no-http', 'Disable the built in HTTP server')\n+  .option('-l, --alias [alias]', 'Enable replacing the username with an alias')\n+  .option('-u, --username <username>', 'Name for hubot to use')\n+  .action (options) ->\n+    name = options.username or 'hubot'\n+    adapter = options.adapter or 'shell'\n+    http = !!options.http\n+    alias = if options.alias is true then '/' else options.alias\n+\n+    adapterPath = Path.join __dirname, '..', 'src', 'adapters'\n+    robot = Hubot.loadBot adapterPath, adapter, http, name\n+\n+    robot.enableSlash = !!alias\n+    robot.alias = alias\n+\n+    robot.adapter.on 'connected', ->\n+      robot.load Path.join __dirname, '..', 'scripts'\n+      robot.load Path.join __dirname, '..', 'src', 'scripts'\n+\n+      scriptsFile = Path.join __dirname, '..', 'hubot-scripts.json'\n+      Fs.exists scriptsFile, (exists) ->\n+        if exists\n+          Fs.readFile scriptsFile, (err, data) ->\n+            scripts = JSON.parse data\n+            path = Path.join __dirname, 'node_modules', 'hubot-scripts', 'src', 'scripts'\n+            robot.loadHubotScripts path, scripts\n+\n+    robot.run()\n+\n+App.parse process.argv\n+\n+if process.argv.length is 2\n+  console.log App.helpInformation()\n   process.exit 0\n \n-Parser.on \"alias\", (opt, value) ->\n-  Options.alias = value\n-\n-Parser.on \"name\", (opt, value) ->\n-  Options.name = value\n-\n-Parser.on \"require\", (opt, value) ->\n-  Options.scripts.push(value)\n-\n-Parser.on \"enable-slash\", (opt) ->\n-  console.log \"WARNING: -s and --enable-slash are deprecated please use -l or --alias '/'\"\n-  Options.alias = '/'\n-\n-Parser.on \"version\", (opt, value) ->\n-  Options.version = true\n-\n-Parser.parse process.argv\n-\n-unless process.platform is \"win32\"\n-  process.on 'SIGTERM', ->\n-    process.exit 0\n-\n-if Options.create\n-  creator = new Creator(Options.path)\n-  creator.run()\n-\n-else\n-  adapterPath = Path.join __dirname, \"..\", \"src\", \"adapters\"\n-\n-  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name\n-\n-  if Options.version\n-    console.log robot.version\n-    process.exit 0\n-\n-  robot.enableSlash = Options.enableSlash\n-  robot.alias = Options.alias\n-\n-  loadScripts = ->\n-    scriptsPath = Path.join __dirname, \"..\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    scriptsPath = Path.join __dirname, \"..\", \"src\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    scriptsFile = Path.join __dirname, \"..\", \"hubot-scripts.json\"\n-    Fs.exists scriptsFile, (exists) =>\n-      if exists\n-        Fs.readFile scriptsFile, (err, data) ->\n-          scripts = JSON.parse data\n-          scriptsPath = Path.join __dirname, \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n-          robot.loadHubotScripts scriptsPath, scripts\n-\n-    for path in Options.scripts\n-      if path[0] == '/'\n-        scriptsPath = path\n-      else\n-        scriptsPath = Path.resolve \".\", path\n-      robot.load scriptsPath\n-\n-  robot.adapter.on 'connected', loadScripts\n-\n-  robot.run()\n+unless process.platform is 'win32'\n+  process.on 'SIGTERM', -> process.exit 0", "changes": 166}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/390e44d928b7cb4bf17e89f65e12e3024be2aba8/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/390e44d928b7cb4bf17e89f65e12e3024be2aba8/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=390e44d928b7cb4bf17e89f65e12e3024be2aba8", "filename": "package.json", "sha": "a6a1afb9605b0eb5e029e30cef4b32032b14d541", "additions": 6, "patch": "@@ -15,12 +15,12 @@\n   },\n \n   \"dependencies\": {\n-    \"coffee-script\": \"~> 1.4.0\",\n-    \"optparse\": \"1.0.3\",\n-    \"scoped-http-client\": \"0.9.7\",\n-    \"log\": \"1.3.0\",\n-    \"connect\": \"2.3.4\",\n-    \"connect_router\": \"1.8.6\"\n+    \"coffee-script\":      \"~> 1.4.0\",\n+    \"commander\":          \"1.1.1\",\n+    \"connect\":            \"2.3.4\",\n+    \"connect_router\":     \"1.8.6\",\n+    \"log\":                \"1.3.0\",\n+    \"scoped-http-client\": \"0.9.7\"\n   },\n \n   \"engines\": {", "changes": 12}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/390e44d928b7cb4bf17e89f65e12e3024be2aba8/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/390e44d928b7cb4bf17e89f65e12e3024be2aba8/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=390e44d928b7cb4bf17e89f65e12e3024be2aba8", "filename": "src/creator.coffee", "sha": "22d6e122de980cfcabb713f8bb48282c9f1ef5e1", "additions": 2, "patch": "@@ -7,7 +7,7 @@ class Creator\n   #\n   # path - A String directory to create/upgrade scripts for\n   constructor: (path) ->\n-    @path = path\n+    @path = Path.resolve path\n     @templateDir = \"#{__dirname}/templates\"\n     @scriptsDir  = \"#{__dirname}/scripts\"\n \n@@ -18,7 +18,7 @@ class Creator\n     Fs.exists path, (exists) ->\n       unless exists\n         Fs.mkdir path, 0o0755, (err) ->\n-          throw err if err\n+          console.log err if err\n \n   # Copy the contents of a file from one place to another.\n   #", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/390e44d928b7cb4bf17e89f65e12e3024be2aba8/src/templates/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/390e44d928b7cb4bf17e89f65e12e3024be2aba8/src/templates/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/Procfile?ref=390e44d928b7cb4bf17e89f65e12e3024be2aba8", "filename": "src/templates/Procfile", "sha": "c74af6ef78020c518f167f825cfe9b5b665c18f0", "additions": 1, "patch": "@@ -1 +1 @@\n-web: bin/hubot -a campfire -n Hubot\n+web: bin/hubot start -a campfire -u Hubot", "changes": 2}], "387": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=39cf9a0f6332e82a1efb18b8a9cba542b7831cd8", "filename": "README.md", "sha": "88e0d9a10b67f4c9f6c7cfba309db019d0a3ed49", "additions": 37, "patch": "@@ -46,6 +46,43 @@ individual scripts.\n [hubot-scripts]: https://github.com/github/hubot-scripts\n [hubot-scripts-readme]: https://github.com/github/hubot-scripts#readme\n \n+## external-scripts\n+\n+This functionality allows users to enable scripts from `npm` packages which\n+don't have to be included in the `hubot-scripts` repository.\n+\n+To enable to functionality you can follow the following steps.\n+\n+1. Add the packages as dependencies into your `package.json`\n+2. `npm install` to make sure those packages are installed\n+\n+To enable third-party scripts that you've added you will need to add the package\n+name as a double quoted string to the `external-scripts.json` file for your\n+hubot.\n+\n+### Creating a script package\n+\n+Creating a script package for hubot is very simple. Start by creating a normal\n+`npm` package. Make sure you add a main file for the entry point (e.g.\n+`index.js` or `index.coffee`).\n+\n+In this entry point file you're going to have to export a function that hubot\n+will use to load the scripts in your package. Below is a simple example for\n+loading each script in a `./scripts` directory in your package.\n+\n+```coffeescript\n+Fs   = require 'fs'\n+Path = require 'path'\n+\n+module.exports = (robot) ->\n+  path = Path.resolve __dirname, 'scripts'\n+  Fs.exists path, (exists) ->\n+    if exists\n+      robot.loadFile path, file for file in Fs.readdirSync(path)\n+```\n+\n+After you've built your `npm` package you can publish it to [npmjs][npmjs].\n+\n ## HTTP Listener\n \n Hubot has a HTTP listener which listens on the port specified by the `PORT`", "changes": 37}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=39cf9a0f6332e82a1efb18b8a9cba542b7831cd8", "filename": "bin/hubot", "sha": "91560276b47b154ea40e40273b0581aa4e2b3b90", "additions": 7, "patch": "@@ -100,6 +100,13 @@ else\n           scriptsPath = Path.join __dirname, \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n           robot.loadHubotScripts scriptsPath, scripts\n \n+    scriptsFile = Path.join __dirname, \"..\", \"external-scripts.json\"\n+    Fs.exists scriptsFile, (exists) =>\n+      if exists\n+        Fs.readFile scriptsFile, (err, data) ->\n+          scripts = JSON.parse data\n+          robot.loadExternalScripts scripts\n+\n     for path in Options.scripts\n       if path[0] == '/'\n         scriptsPath = path", "changes": 7}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=39cf9a0f6332e82a1efb18b8a9cba542b7831cd8", "filename": "src/creator.coffee", "sha": "024c06e3c722ca3847dcd64368861b2e50498026", "additions": 2, "patch": "@@ -64,7 +64,8 @@ class Creator\n       \"README.md\",\n       \".gitignore\",\n       \"bin/hubot\",\n-      \"hubot-scripts.json\"\n+      \"hubot-scripts.json\",\n+      \"external-scripts.json\"\n     ]\n \n     @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\" for file in files", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=39cf9a0f6332e82a1efb18b8a9cba542b7831cd8", "filename": "src/robot.coffee", "sha": "1e95d8d2ba6cd99a7e8d54b5db60848b0bb64dd6", "additions": 14, "patch": "@@ -165,6 +165,20 @@ class Robot\n     for script in scripts\n       @loadFile path, script\n \n+  # Public: Load scripts from packages specfied in the\n+  # `external-scripts.json` file.\n+  #\n+  # packages - An Array of packages containing hubot scripts to load.\n+  #\n+  # Returns nothing.\n+  loadExternalScripts: (packages) ->\n+    @logger.debug \"Loading external-scripts from npm packages\"\n+    for pkg in packages\n+      try\n+        require(pkg) @\n+      catch error\n+        @logger.error \"Error loading scripts from npm package - #{error}\"\n+\n   # Setup the Connect server's defaults.\n   #\n   # Returns nothing.", "changes": 14}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=39cf9a0f6332e82a1efb18b8a9cba542b7831cd8", "filename": "src/templates/README.md", "sha": "3f269fe752bcc2664c493edf1af9c111ef2372e5", "additions": 16, "patch": "@@ -99,11 +99,26 @@ of adding it to hubot itself, you can submit pull requests to\n [hubot-scripts][hubot-scripts].\n \n To enable scripts from the hubot-scripts package, add the script name with\n-extension as a double quoted string to the hubot-scripts.json file in this\n+extension as a double quoted string to the `hubot-scripts.json` file in this\n repo.\n \n [hubot-scripts]: https://github.com/github/hubot-scripts\n \n+## external-scripts\n+\n+Tired of waiting for your script to be merged into `hubot-scripts`? Want to\n+maintain the repository and package yourself? Then this added functionality\n+maybe for you!\n+\n+Hubot is now able to load scripts from third-party `npm` packages! To enable\n+this functionality you can follow the following steps.\n+\n+1. Add the packages as dependencies into your `package.json`\n+2. `npm install` to make sure those packages are installed\n+\n+To enable third-party scripts that you've added you will need to add the package\n+name as a double quoted string to the `external-scripts.json` file in this repo.\n+\n ## Deployment\n \n     % heroku create --stack cedar", "changes": 17}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/src/templates/external-scripts.json", "blob_url": "https://github.com/hubotio/hubot/blob/39cf9a0f6332e82a1efb18b8a9cba542b7831cd8/src/templates/external-scripts.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/external-scripts.json?ref=39cf9a0f6332e82a1efb18b8a9cba542b7831cd8", "filename": "src/templates/external-scripts.json", "sha": "fe51488c7066f6687ef680d6bfaa4f7768ef205c", "additions": 1, "patch": "@@ -0,0 +1 @@\n+[]", "changes": 1}], "388": [{"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028", "filename": "src/adapter.coffee", "sha": "6a60f6ca2fffa962e508ff74076bc81ca09aaf9a", "additions": 7, "patch": "@@ -8,28 +8,28 @@ class Adapter extends EventEmitter\n \n   # Public: Raw method for sending data back to the chat source. Extend this.\n   #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n+  # envelope - A Object with message, room and user details.\n+  # strings  - One or more Strings for each message to send.\n   #\n   # Returns nothing.\n-  send: (user, strings...) ->\n+  send: (envelope, strings...) ->\n \n   # Public: Raw method for building a reply and sending it back to the chat\n   # source. Extend this.\n   #\n-  # user    - A User instance.\n+  # envelope - A Object with message, room and user details.\n   # strings - One or more Strings for each reply to send.\n   #\n   # Returns nothing.\n-  reply: (user, strings...) ->\n+  reply: (envelope, strings...) ->\n \n   # Public: Raw method for setting a topic on the chat source. Extend this.\n   #\n-  # user    - A User instance.\n+  # envelope - A Object with message, room and user details.\n   # strings - One more more Strings to set as the topic.\n   #\n   # Returns nothing.\n-  topic: (user, strings...) ->\n+  topic: (envelope, strings...) ->\n \n   # Public: Raw method for invoking the bot to run. Extend this.\n   #", "changes": 14}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028", "filename": "src/adapters/campfire.coffee", "sha": "512705dc84d1562b1901cba7944162bbae290ba1", "additions": 7, "patch": "@@ -6,17 +6,17 @@ Adapter                                 = require '../adapter'\n {TextMessage,EnterMessage,LeaveMessage} = require '../message'\n \n class Campfire extends Adapter\n-  send: (user, strings...) ->\n+  send: (envelope, strings...) ->\n     if strings.length > 0\n-      @bot.Room(user.room).speak strings.shift(), (err, data) =>\n+      @bot.Room(envelop.room).speak strings.shift(), (err, data) =>\n         @robot.logger.error \"Campfire error: #{err}\" if err?\n-        @send user, strings...\n+        @send envelop.user, strings...\n \n-  reply: (user, strings...) ->\n-    @send user, strings.map((str) -> \"#{user.name}: #{str}\")...\n+  reply: (envelope, strings...) ->\n+    @send envelope, strings.map((str) -> \"#{envelope.user.name}: #{str}\")...\n \n-  topic: (user, strings...) ->\n-    @bot.Room(user.room).topic strings.join(\" / \"), (err, data) =>\n+  topic: (envelope, strings...) ->\n+    @bot.Room(envelope.room).topic strings.join(\" / \"), (err, data) =>\n       @robot.logger.error \"Campfire error: #{err}\" if err?\n \n   run: ->", "changes": 14}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028", "filename": "src/adapters/shell.coffee", "sha": "a20512dd8945606039ff31c4ce16e07775fe42e9", "additions": 4, "patch": "@@ -5,16 +5,16 @@ Adapter       = require '../adapter'\n {TextMessage} = require '../message'\n \n class Shell extends Adapter\n-  send: (user, strings...) ->\n+  send: (envelope, strings...) ->\n     unless process.platform is 'win32'\n       console.log \"\\x1b[01;32m#{str}\\x1b[0m\" for str in strings\n     else\n       console.log \"#{str}\" for str in strings\n     @repl.prompt()\n \n-  reply: (user, strings...) ->\n-    strings = strings.map (s) -> \"#{user.name}: #{s}\"\n-    @send user, strings...\n+  reply: (envelope, strings...) ->\n+    strings = strings.map (s) -> \"#{envelope.user.name}: #{s}\"\n+    @send envelope.user, strings...\n \n   run: ->\n     self = @", "changes": 8}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028", "filename": "src/message.coffee", "sha": "8b6278080dc127b5739551910ec357863e40049c", "additions": 1, "patch": "@@ -3,6 +3,7 @@ class Message\n   #\n   # user - A User instance that sent the message.\n   constructor: (@user, @done = false) ->\n+    @room = @user.room\n \n   # Indicates that no other Listener should be called on this object\n   #", "changes": 1}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=dc27aca6fcbd0d5b8d7fdc47f2feeb6638d3a028", "filename": "src/response.coffee", "sha": "bc1accd943c4be0a912d3da3c96ce6c988ce333d", "additions": 6, "patch": "@@ -7,6 +7,9 @@ class Response\n   # message - A Message instance.\n   # match   - A Match object from the successful Regex match.\n   constructor: (@robot, @message, @match) ->\n+    @envelope =\n+      room: @message.room\n+      user: @message.user\n \n   # Public: Posts a message back to the chat source\n   #\n@@ -15,7 +18,7 @@ class Response\n   #\n   # Returns nothing.\n   send: (strings...) ->\n-    @robot.adapter.send @message.user, strings...\n+    @robot.adapter.send @envelope, strings...\n \n   # Public: Posts a message mentioning the current user.\n   #\n@@ -24,7 +27,7 @@ class Response\n   #\n   # Returns nothing.\n   reply: (strings...) ->\n-    @robot.adapter.reply @message.user, strings...\n+    @robot.adapter.reply @envelope, strings...\n \n   # Public: Posts a topic changing message\n   #\n@@ -33,7 +36,7 @@ class Response\n   #\n   # Returns nothing.\n   topic: (strings...) ->\n-    @robot.adapter.topic @message.user, strings...\n+    @robot.adapter.topic @envelope, strings...\n \n   # Public: Picks a random item from the given items.\n   #", "changes": 9}], "390": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c5ff65f222f71472dc4506b3278506025460918d/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c5ff65f222f71472dc4506b3278506025460918d/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=c5ff65f222f71472dc4506b3278506025460918d", "filename": "src/adapter.coffee", "sha": "ed2ec890871e7e4a91fad1f33abc164fbfde363a", "additions": 1, "patch": "@@ -51,7 +51,7 @@ class Adapter extends EventEmitter\n   #\n   # Returns an Array of User objects.\n   users: ->\n-    @robot.users\n+    @robot.users()\n \n   # Public: Get a User object given a unique identifier.\n   #", "changes": 2}], "393": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/2ddac790a1a0ff52b642048a153c3ad8f62b3490/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2ddac790a1a0ff52b642048a153c3ad8f62b3490/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=2ddac790a1a0ff52b642048a153c3ad8f62b3490", "filename": "src/response.coffee", "sha": "d15e3d8ca8ddf6adbe05b4e280647c8f9d63a444", "additions": 1, "patch": "@@ -10,6 +10,7 @@ class Response\n     @envelope =\n       room: @message.room\n       user: @message.user\n+      message: @message\n \n   # Public: Posts a message back to the chat source\n   #", "changes": 1}], "394": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fc9a6615bc72c14954e05b490138209d83f83c59/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/fc9a6615bc72c14954e05b490138209d83f83c59/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=fc9a6615bc72c14954e05b490138209d83f83c59", "filename": "README.md", "sha": "71e6e446d02a70a9ca11b89e98356e9fad6bc48d", "additions": 3, "patch": "@@ -100,6 +100,9 @@ module.exports = (robot) ->\n There are functions for GET, POST, PUT and DELETE, which all take a route and\n callback function that accepts a request and a response.\n \n+In addition, if you set `CONNECT_STATIC`, the HTTP listener will serve static\n+files from this directory.\n+\n ## Testing hubot locally\n \n Install all of the required dependencies by running `npm install`.", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fc9a6615bc72c14954e05b490138209d83f83c59/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fc9a6615bc72c14954e05b490138209d83f83c59/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=fc9a6615bc72c14954e05b490138209d83f83c59", "filename": "src/robot.coffee", "sha": "76b00e9117b39e3a422436b7b8d40b191ee054ea", "additions": 2, "patch": "@@ -185,6 +185,7 @@ class Robot\n   setupConnect: ->\n     user = process.env.CONNECT_USER\n     pass = process.env.CONNECT_PASSWORD\n+    stat = process.env.CONNECT_STATIC\n \n     Connect        = require 'connect'\n     Connect.router = require 'connect_router'\n@@ -193,6 +194,7 @@ class Robot\n \n     @connect.use Connect.basicAuth(user, pass) if user and pass\n     @connect.use Connect.bodyParser()\n+    @connect.use Connect.static(stat) if stat\n     @connect.use Connect.router (app) =>\n \n       @router =", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fc9a6615bc72c14954e05b490138209d83f83c59/test/httpd_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fc9a6615bc72c14954e05b490138209d83f83c59/test/httpd_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/httpd_test.coffee?ref=fc9a6615bc72c14954e05b490138209d83f83c59", "filename": "test/httpd_test.coffee", "sha": "7441ebed938a5754a188e9928924b5f4e0c4fb15", "additions": 15, "patch": "@@ -0,0 +1,15 @@\n+process.env.CONNECT_STATIC = 'test/static/'\n+Tests = require './tests'\n+assert = require 'assert'\n+helper = Tests.helper()\n+require './scripts/test'\n+\n+helper.adapter.cb = (msg) ->\n+    assert.equal 1, helper.sent.length\n+    assert.equal \"static\\n\", msg\n+    helper.stop()\n+\n+setTimeout( () ->\n+    helper.adapter.receive 'static'\n+, 100)\n+", "changes": 15}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fc9a6615bc72c14954e05b490138209d83f83c59/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fc9a6615bc72c14954e05b490138209d83f83c59/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=fc9a6615bc72c14954e05b490138209d83f83c59", "filename": "test/robot_test.coffee", "sha": "4e96d61cca44bba685e808ec4bfd11c9e33b4757", "additions": 1, "patch": "@@ -8,7 +8,7 @@ server = require('http').createServer (req, res) ->\n   res.end \"fetched\"\n \n server.listen 9001, ->\n-  assert.equal 5, helper.listeners.length\n+  assert.equal 6, helper.listeners.length\n   assert.equal 0, helper.sent.length\n \n   helper.adapter.receive 'test'", "changes": 2}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fc9a6615bc72c14954e05b490138209d83f83c59/test/scripts/test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fc9a6615bc72c14954e05b490138209d83f83c59/test/scripts/test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/scripts/test.coffee?ref=fc9a6615bc72c14954e05b490138209d83f83c59", "filename": "test/scripts/test.coffee", "sha": "c88146b76fbc9d155e58eb8ba7d051d7d72bddba", "additions": 4, "patch": "@@ -1,6 +1,10 @@\n # Tests hubot listeners\n module.exports = (robot) ->\n   assert = require 'assert'\n+  robot.hear /static/i, (msg) ->\n+    msg.http('http://127.0.0.1/test').port(process.env.PORT or 8080)\n+      .get() (err, res, body) ->\n+        msg.send body\n \n   robot.hear /test/i, (msg) ->\n     msg.send \"OK\"", "changes": 4}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fc9a6615bc72c14954e05b490138209d83f83c59/test/static/test", "blob_url": "https://github.com/hubotio/hubot/blob/fc9a6615bc72c14954e05b490138209d83f83c59/test/static/test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/static/test?ref=fc9a6615bc72c14954e05b490138209d83f83c59", "filename": "test/static/test", "sha": "7b4d4ba2e62dc741d2a6265a1ecbdba716d119f6", "additions": 1, "patch": "@@ -0,0 +1 @@\n+static", "changes": 1}], "402": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/5d9cb0cb3c8f5fd57f7d3276d0da625a4c58a216/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5d9cb0cb3c8f5fd57f7d3276d0da625a4c58a216/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=5d9cb0cb3c8f5fd57f7d3276d0da625a4c58a216", "filename": "src/adapters/campfire.coffee", "sha": "63bd2f5d6e91d16ce2781a111fee594442996c94", "additions": 3, "patch": "@@ -40,15 +40,15 @@ class Campfire extends Adapter\n \n     bot.on \"TextMessage\", withAuthor (id, created, room, user, body, author) ->\n       unless bot.info.id == author.id\n-        self.receive new TextMessage(author, body)\n+        self.receive new TextMessage(author, body, id)\n \n     bot.on \"EnterMessage\", withAuthor (id, created, room, user, body, author) ->\n       unless bot.info.id == author.id\n-        self.receive new EnterMessage(author)\n+        self.receive new EnterMessage(author, null, id)\n \n     bot.on \"LeaveMessage\", withAuthor (id, created, room, user, body, author) ->\n       unless bot.info.id == author.id\n-        self.receive new LeaveMessage(author)\n+        self.receive new LeaveMessage(author, null, id)\n \n     bot.Me (err, data) ->\n       bot.info = data.user", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/5d9cb0cb3c8f5fd57f7d3276d0da625a4c58a216/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5d9cb0cb3c8f5fd57f7d3276d0da625a4c58a216/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=5d9cb0cb3c8f5fd57f7d3276d0da625a4c58a216", "filename": "src/adapters/shell.coffee", "sha": "abcec0e797cfb4bd5423e1706c16352ea7a1234a", "additions": 1, "patch": "@@ -35,7 +35,7 @@ class Shell extends Adapter\n       @repl.close() if buffer.toLowerCase() is 'exit'\n       @repl.prompt()\n       user = @userForId '1', name: 'Shell', room: 'Shell'\n-      @receive new TextMessage user, buffer\n+      @receive new TextMessage user, buffer, 'messageId'\n \n     self.emit 'connected'\n ", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/5d9cb0cb3c8f5fd57f7d3276d0da625a4c58a216/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5d9cb0cb3c8f5fd57f7d3276d0da625a4c58a216/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=5d9cb0cb3c8f5fd57f7d3276d0da625a4c58a216", "filename": "src/message.coffee", "sha": "97302a3641c79ce84a2c99751995e1adc3d4dd47", "additions": 6, "patch": "@@ -16,7 +16,8 @@ class TextMessage extends Message\n   #\n   # user - A User instance that sent the message.\n   # text - A String message.\n-  constructor: (@user, @text) ->\n+  # id   - A String of the message ID.\n+  constructor: (@user, @text, @id) ->\n     super @user\n \n   # Determines if the message matches the given regex.\n@@ -30,11 +31,15 @@ class TextMessage extends Message\n # Represents an incoming user entrance notification.\n #\n # user - A User instance for the user who entered.\n+# text - Always null.\n+# id   - A String of the message ID.\n class EnterMessage extends Message\n \n # Represents an incoming user exit notification.\n #\n # user - A User instance for the user who left.\n+# text - Always null.\n+# id   - A String of the message ID.\n class LeaveMessage extends Message\n \n class CatchAllMessage extends Message", "changes": 7}], "403": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/c884d2b65147da497568066ec8de47742048803c/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c884d2b65147da497568066ec8de47742048803c/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=c884d2b65147da497568066ec8de47742048803c", "filename": "src/scripts/roles.coffee", "sha": "7f9c97c233166219533b19a1b1ca9a9a511fc893", "additions": 3, "patch": "@@ -24,7 +24,7 @@ module.exports = (robot) ->\n     else if name is robot.name\n       msg.send \"The best.\"\n     else\n-      users = robot.usersForFuzzyName(name)\n+      users = robot.brain.usersForFuzzyName(name)\n       if users.length is 1\n         user = users[0]\n         user.roles = user.roles or [ ]\n@@ -45,7 +45,7 @@ module.exports = (robot) ->\n \n     unless name in ['', 'who', 'what', 'where', 'when', 'why']\n       unless newRole.match(/^not\\s+/i)\n-        users = robot.usersForFuzzyName(name)\n+        users = robot.brain.usersForFuzzyName(name)\n         if users.length is 1\n           user = users[0]\n           user.roles = user.roles or [ ]\n@@ -68,7 +68,7 @@ module.exports = (robot) ->\n     newRole = msg.match[2].trim()\n \n     unless name in ['', 'who', 'what', 'where', 'when', 'why']\n-      users = robot.usersForFuzzyName(name)\n+      users = robot.brain.usersForFuzzyName(name)\n       if users.length is 1\n         user = users[0]\n         user.roles = user.roles or [ ]", "changes": 6}], "404": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/cbd8558595e98e1ae8bc7b0c632abcf01be644e6/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/cbd8558595e98e1ae8bc7b0c632abcf01be644e6/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=cbd8558595e98e1ae8bc7b0c632abcf01be644e6", "filename": "src/scripts/roles.coffee", "sha": "7f9c97c233166219533b19a1b1ca9a9a511fc893", "additions": 3, "patch": "@@ -24,7 +24,7 @@ module.exports = (robot) ->\n     else if name is robot.name\n       msg.send \"The best.\"\n     else\n-      users = robot.usersForFuzzyName(name)\n+      users = robot.brain.usersForFuzzyName(name)\n       if users.length is 1\n         user = users[0]\n         user.roles = user.roles or [ ]\n@@ -45,7 +45,7 @@ module.exports = (robot) ->\n \n     unless name in ['', 'who', 'what', 'where', 'when', 'why']\n       unless newRole.match(/^not\\s+/i)\n-        users = robot.usersForFuzzyName(name)\n+        users = robot.brain.usersForFuzzyName(name)\n         if users.length is 1\n           user = users[0]\n           user.roles = user.roles or [ ]\n@@ -68,7 +68,7 @@ module.exports = (robot) ->\n     newRole = msg.match[2].trim()\n \n     unless name in ['', 'who', 'what', 'where', 'when', 'why']\n-      users = robot.usersForFuzzyName(name)\n+      users = robot.brain.usersForFuzzyName(name)\n       if users.length is 1\n         user = users[0]\n         user.roles = user.roles or [ ]", "changes": 6}], "406": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/7205dff1013dd80d08e14057140eff3f2630ab9c/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/7205dff1013dd80d08e14057140eff3f2630ab9c/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=7205dff1013dd80d08e14057140eff3f2630ab9c", "filename": "README.md", "sha": "96c95228c9f9e17c7ddbfa52c3c61b4d345eb101", "additions": 1, "patch": "@@ -86,7 +86,7 @@ After you've built your `npm` package you can publish it to [npmjs][npmjs].\n ## HTTP Listener\n \n Hubot has a HTTP listener which listens on the port specified by the `PORT`\n-environment variable.\n+environment variable. If PORT is not specified, the default port will be 8080.\n \n You can specify routes to listen on in your scripts by using the `router`\n property on `robot`.", "changes": 2}], "408": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/d1cb49ee209e67080f3ffd2771abf4190bb27e16/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d1cb49ee209e67080f3ffd2771abf4190bb27e16/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=d1cb49ee209e67080f3ffd2771abf4190bb27e16", "filename": "src/robot.coffee", "sha": "b8b069632e0ef025bdd281c99dfbb88e43c8a378", "additions": 2, "patch": "@@ -78,9 +78,9 @@ class Robot\n \n     if @alias\n       alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&') # escape alias for regexp\n-      newRegex = new RegExp(\"^(?:#{alias}[:,]?|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n+      newRegex = new RegExp(\"^[@]?(?:#{alias}[:,]?|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n     else\n-      newRegex = new RegExp(\"^#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n+      newRegex = new RegExp(\"^[@]?#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n \n     @listeners.push new TextListener(@, newRegex, callback)\n ", "changes": 4}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/d1cb49ee209e67080f3ffd2771abf4190bb27e16/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d1cb49ee209e67080f3ffd2771abf4190bb27e16/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=d1cb49ee209e67080f3ffd2771abf4190bb27e16", "filename": "test/robot_test.coffee", "sha": "9ac9e2182cf5e20b34c1233351cf89604f341f6b", "additions": 23, "patch": "@@ -8,7 +8,7 @@ server = require('http').createServer (req, res) ->\n   res.end \"fetched\"\n \n server.listen 9001, ->\n-  assert.equal 6, helper.listeners.length\n+  assert.equal 7, helper.listeners.length\n   assert.equal 0, helper.sent.length\n \n   helper.adapter.receive 'test'\n@@ -23,7 +23,6 @@ server.listen 9001, ->\n   assert.equal 3, helper.sent.length\n   assert.ok helper.sent[2].match(/^(1|2)$/)\n \n-\n   # Test that when we message a room, the 'recipient' is the robot user and the room attribute is set properly\n   helper.messageRoom \"chat@example.com\", \"Hello room\"\n   assert.equal 4, helper.sent.length\n@@ -35,11 +34,32 @@ server.listen 9001, ->\n   assert.equal \"chat2@example.com\", helper.recipients[4].room\n   assert.equal \"Hello to another room\", helper.sent[4]\n \n-\n   helper.adapter.receive 'foobar'\n   assert.equal 6, helper.sent.length\n   assert.equal 'catch-all', helper.sent[5]\n \n+  # Testing replies\n+  # ============================\n+  # Using just the name\n+  helper.adapter.receive \"#{helper.name} rsvp\"\n+  assert.equal 7, helper.sent.length\n+  assert.equal \"responding\", helper.sent[6]\n+\n+  # Using name with @ form\n+  helper.adapter.receive \"@#{helper.name} rsvp\"\n+  assert.equal 8, helper.sent.length\n+  assert.equal \"responding\", helper.sent[7]\n+\n+  # Using just the alias\n+  helper.adapter.receive \"#{helper.alias} rsvp\"\n+  assert.equal 9, helper.sent.length\n+  assert.equal \"responding\", helper.sent[8]\n+\n+  # Using alias with @ form\n+  helper.adapter.receive \"@#{helper.alias} rsvp\"\n+  assert.equal 10, helper.sent.length\n+  assert.equal \"responding\", helper.sent[9]\n+\n \n   # set a callback for when the next message is replied to\n   helper.cb = (msg) ->", "changes": 26}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d1cb49ee209e67080f3ffd2771abf4190bb27e16/test/scripts/test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d1cb49ee209e67080f3ffd2771abf4190bb27e16/test/scripts/test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/scripts/test.coffee?ref=d1cb49ee209e67080f3ffd2771abf4190bb27e16", "filename": "test/scripts/test.coffee", "sha": "07af2636e5aa0a054a6c74fcb9e766d74d910bbb", "additions": 3, "patch": "@@ -12,6 +12,9 @@ module.exports = (robot) ->\n   robot.hear /reply/i, (msg) ->\n     msg.reply \"OK\"\n \n+  robot.respond /rsvp/i, (msg) ->\n+    msg.send \"responding\"\n+\n   robot.hear /random/i, (msg) ->\n     msg.send msg.random([1,2]).toString()\n ", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d1cb49ee209e67080f3ffd2771abf4190bb27e16/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d1cb49ee209e67080f3ffd2771abf4190bb27e16/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=d1cb49ee209e67080f3ffd2771abf4190bb27e16", "filename": "test/tests.coffee", "sha": "4bf4530cd21e9a939cfeaa8833f49f07afab26d6", "additions": 1, "patch": "@@ -43,6 +43,7 @@ class Helper extends Robot\n     @sent = []\n     @recipients = []\n     @adapter = new Danger @\n+    @alias = 'alias'\n \n   stop: ->\n     process.exit 0", "changes": 1}], "411": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1a7655f26c81590c7e8c7108e7bfd0a9449e918c/src/scripts/corgime.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1a7655f26c81590c7e8c7108e7bfd0a9449e918c/src/scripts/corgime.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/corgime.coffee?ref=1a7655f26c81590c7e8c7108e7bfd0a9449e918c", "filename": "src/scripts/corgime.coffee", "sha": "6c274165944eec444ba2a334ad6d7c45308c7527", "additions": 25, "patch": "@@ -0,0 +1,25 @@\n+# Description:\n+#   Corgime is your one true source for corgis\n+#\n+# Commands:\n+#   hubot corgi me - receive a corgi\n+#   hubot corgi bomb N - get N corgis\n+\n+module.exports = (robot) ->\n+\n+  robot.respond /corgi me/i, (msg) ->\n+    msg.http(\"http://corginator.herokuapp.com/random\")\n+      .get() (err, res, body) ->\n+        msg.send JSON.parse(body).corgi\n+\n+  robot.respond /corgi bomb( (\\d+))?/i, (msg) ->\n+    count = msg.match[2] || 5\n+    msg.http(\"http://corginator.herokuapp.com/bomb?count=\" + count)\n+      .get() (err, res, body) ->\n+        msg.send corgi for corgi in JSON.parse(body).corgis\n+\n+  robot.respond /how many corgis are there/i, (msg) ->\n+    msg.http(\"http://corginator.herokuapp.com/count\")\n+      .get() (err, res, body) ->\n+        msg.send \"There are #{JSON.parse(body).corgi_count} corgis.\"\n+", "changes": 25}], "412": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/65f032dca93000629109f8fdf26a92d85f67f851/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/65f032dca93000629109f8fdf26a92d85f67f851/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=65f032dca93000629109f8fdf26a92d85f67f851", "filename": "bin/hubot", "sha": "26497c49913c3420ff672a85aebaee7cda170646", "additions": 6, "patch": "@@ -17,6 +17,7 @@ Switches = [\n   [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n   [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n   [ \"-r\", \"--require PATH\",    \"Alternative scripts path\" ],\n+  [ \"-w\", \"--where\",           \"Display path where hubot execute\" ]\n   [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n ]\n \n@@ -56,6 +57,10 @@ Parser.on \"name\", (opt, value) ->\n Parser.on \"require\", (opt, value) ->\n   Options.scripts.push(value)\n \n+Parser.on \"where\", (opt, value) ->\n+  console.log __dirname\n+  process.exit 0\n+\n Parser.on \"version\", (opt, value) ->\n   Options.version = true\n \n@@ -78,6 +83,7 @@ else\n     console.log robot.version\n     process.exit 0\n \n+\n   robot.alias = Options.alias\n \n   loadScripts = ->", "changes": 6}], "414": [{"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/ad6f06ecc7c5e3d9d61ce37968c79e6a7a47ffee/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/ad6f06ecc7c5e3d9d61ce37968c79e6a7a47ffee/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=ad6f06ecc7c5e3d9d61ce37968c79e6a7a47ffee", "filename": "bin/hubot", "sha": "6e61cb36aaab531b82584a4e18556125a916fc0c", "additions": 7, "patch": "@@ -21,13 +21,13 @@ Switches = [\n ]\n \n Options =\n-  adapter: \"shell\"\n-  alias: false\n-  create: false\n-  enableHttpd: true\n-  scripts: []\n-  name: \"Hubot\"\n-  path: \".\"\n+  adapter:     process.env.HUBOT_ADAPTER or \"shell\"\n+  alias:       process.env.HUBOT_ALIAS   or false\n+  create:      process.env.HUBOT_CREATE  or false\n+  enableHttpd: process.env.HUBOT_HTTPD   or true\n+  scripts:     process.env.HUBOT_SCRIPTS or []\n+  name:        process.env.HUBOT_NAME    or \"Hubot\"\n+  path:        process.env.HUBOT_PATH    or \".\"\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"", "changes": 14}], "419": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a1ff021df8e900058f51d7b7e140572903b08bfb/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a1ff021df8e900058f51d7b7e140572903b08bfb/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=a1ff021df8e900058f51d7b7e140572903b08bfb", "filename": "src/brain.coffee", "sha": "ed0127e343db195452620359b20c02ba272b9dd8", "additions": 1, "patch": "@@ -51,7 +51,7 @@ class Brain extends EventEmitter\n   #\n   # Returns an Array of User objects.\n   users: ->\n-    @brain.data.users\n+    @data.users\n \n   # Public: Get a User object given a unique identifier.\n   #", "changes": 2}], "421": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3239efb7bca9388a6b2d8b843d2112e01d871fca/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3239efb7bca9388a6b2d8b843d2112e01d871fca/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=3239efb7bca9388a6b2d8b843d2112e01d871fca", "filename": "src/listener.coffee", "sha": "f7f1b23b1a5167fe1e34238a7476f430ebf117c2", "additions": 2, "patch": "@@ -1,5 +1,7 @@\n {TextMessage} = require './message'\n \n+inspect = require('util').inspect;\n+\n class Listener\n   # Listeners receive every message from the chat source and decide if they\n   # want to act on it.", "changes": 2}], "422": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8101b6fb99c5ce7accb4a2fb2fc853ab2f2c3b8b/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8101b6fb99c5ce7accb4a2fb2fc853ab2f2c3b8b/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=8101b6fb99c5ce7accb4a2fb2fc853ab2f2c3b8b", "filename": "src/creator.coffee", "sha": "542ba344ea55ded09fbd1680263dc1ce8097233e", "additions": 1, "patch": "@@ -64,6 +64,7 @@ class Creator\n       \"README.md\",\n       \".gitignore\",\n       \"bin/hubot\",\n+      \"bin/hubot.cmd\",\n       \"hubot-scripts.json\",\n       \"external-scripts.json\"\n     ]", "changes": 1}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8101b6fb99c5ce7accb4a2fb2fc853ab2f2c3b8b/src/templates/bin/hubot.cmd", "blob_url": "https://github.com/hubotio/hubot/blob/8101b6fb99c5ce7accb4a2fb2fc853ab2f2c3b8b/src/templates/bin/hubot.cmd", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/bin/hubot.cmd?ref=8101b6fb99c5ce7accb4a2fb2fc853ab2f2c3b8b", "filename": "src/templates/bin/hubot.cmd", "sha": "a284ba5fd3fca30a68e0d85c297013dba70cef57", "additions": 3, "patch": "@@ -0,0 +1,3 @@\n+@echo off\r\n+\r\n+npm install && node_modules\\.bin\\hubot.cmd %* \n\\ No newline at end of file", "changes": 3}], "423": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/5fddbc83448cc68fb52ac0b3b772987f6886963f/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5fddbc83448cc68fb52ac0b3b772987f6886963f/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=5fddbc83448cc68fb52ac0b3b772987f6886963f", "filename": "src/listener.coffee", "sha": "0aafb45ae0cbee69ef28bef4256b52b2ccc47c4f", "additions": 2, "patch": "@@ -1,4 +1,5 @@\n {TextMessage} = require './message'\n+Util = require 'util'\n \n class Listener\n   # Listeners receive every message from the chat source and decide if they\n@@ -19,7 +20,7 @@ class Listener\n   # Returns a boolean of whether the matcher matched.\n   call: (message) ->\n     if match = @matcher message\n-      @robot.logger.debug \"Message '#{message}' matched regex /#{inspect @regex}/\" if @regex\n+      @robot.logger.debug \"Message '#{message}' matched regex /#{Util.inspect @regex}/\" if @regex\n       @callback new @robot.Response(@robot, message, match)\n       true\n     else", "changes": 3}], "424": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9fcf7793c602247273772800b32613b7a84ae91d/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9fcf7793c602247273772800b32613b7a84ae91d/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=9fcf7793c602247273772800b32613b7a84ae91d", "filename": "src/adapter.coffee", "sha": "c167f2224c27fa8944133ad3eaf40c7e997243e9", "additions": 9, "patch": "@@ -31,6 +31,15 @@ class Adapter extends EventEmitter\n   # Returns nothing.\n   topic: (envelope, strings...) ->\n \n+  # Public: Raw method for playing a sound in the chat source. Extend this.\n+  #\n+  # envelope - A Object with message, room and user details.\n+  # strings - One or more strings for each play message to send.\n+  #\n+  # Returns nothing\n+  play: (envelope, strings...) ->\n+    @robot.logger.warning \"Adapter does not support the play function.\"\n+\n   # Public: Raw method for invoking the bot to run. Extend this.\n   #\n   # Returns nothing.", "changes": 9}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9fcf7793c602247273772800b32613b7a84ae91d/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9fcf7793c602247273772800b32613b7a84ae91d/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=9fcf7793c602247273772800b32613b7a84ae91d", "filename": "src/adapters/campfire.coffee", "sha": "a738aca7ee2495336fc61766aafd5e1ac72c4906", "additions": 6, "patch": "@@ -19,6 +19,12 @@ class Campfire extends Adapter\n     @bot.Room(envelope.room).topic strings.join(\" / \"), (err, data) =>\n       @robot.logger.error \"Campfire error: #{err}\" if err?\n \n+  play: (envelope, strings...) ->\n+    if strings.length > 0\n+      @bot.Room(envelope.room).sound strings.shift(), (err, data) =>\n+        @robot.logger.error \"Campfire error: #{err}\" if err?\n+        @play envelope, strings...\n+\n   run: ->\n     self = @\n ", "changes": 6}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9fcf7793c602247273772800b32613b7a84ae91d/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9fcf7793c602247273772800b32613b7a84ae91d/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=9fcf7793c602247273772800b32613b7a84ae91d", "filename": "src/adapters/shell.coffee", "sha": "1282a321e3190ea5b314f4e07203f86bb38e662f", "additions": 4, "patch": "@@ -16,6 +16,10 @@ class Shell extends Adapter\n     strings = strings.map (s) -> \"#{envelope.user.name}: #{s}\"\n     @send envelope.user, strings...\n \n+  play: (envelope, strings...) ->\n+    strings = strings.map (s) -> \"/play #{s}\"\n+    @send envelope.user, strings...\n+\n   run: ->\n     self = @\n     stdin = process.openStdin()", "changes": 4}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9fcf7793c602247273772800b32613b7a84ae91d/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9fcf7793c602247273772800b32613b7a84ae91d/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=9fcf7793c602247273772800b32613b7a84ae91d", "filename": "src/response.coffee", "sha": "05fdc15e15f0feeb62dc1237633085808945ced1", "additions": 9, "patch": "@@ -39,6 +39,15 @@ class Response\n   topic: (strings...) ->\n     @robot.adapter.topic @envelope, strings...\n \n+  # Public: Play a sound in the chat source\n+  #\n+  # strings - One or more strings to be posted as sounds to play. The order of\n+  #           these strings should be kept intact.\n+  #\n+  # Returns nothing\n+  play: (strings...) ->\n+    @robot.adapter.play @envelope, strings...\n+\n   # Public: Picks a random item from the given items.\n   #\n   # items - An Array of items.", "changes": 9}], "426": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/0fa349e17d12b13a7904f497d3716a309486ee81/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/0fa349e17d12b13a7904f497d3716a309486ee81/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=0fa349e17d12b13a7904f497d3716a309486ee81", "filename": "README.md", "sha": "0c6a26b5ebf6fec5947da0efa116192abe8de420", "additions": 2, "patch": "@@ -14,8 +14,8 @@ Make sure you have [node.js][nodejs] and [npm][npmjs] (npm comes with node v0.6.\n \n Download the [latest version of hubot][hubot-latest].\n \n-Then follow the instructions in the [README][readme] in the extracted `hubot`\n-directory.\n+Then follow the instructions in the [README][readme] in the extracted `hubot/src/templates`\n+directory. The `templates` directory is an example runnable hubot.\n \n [nodejs]: http://nodejs.org\n [npmjs]: http://npmjs.org", "changes": 4}], "429": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "CONTRIBUTING.md", "sha": "f601eb81e771b7cdc1c95b9d5714c0babfe1aeae", "additions": 28, "patch": "@@ -0,0 +1,28 @@\n+We love pull requests. Here's a quick guide:\n+\n+1. Check for [existing issues](https://github.com/github/hubot/issues) for duplicates and confirm that it hasn't been fixed already in the [master branch](https://github.com/github/hubot/commits/master)\n+2. Fork the repo, and clone it locally\n+3. `npm link` to make your cloned repo available to npm\n+4. `hubot --create testbot` to create a bot to test against (no automated tests yet :sob:)\n+5. `npm install && npm link hubot` in your newly created bot to install dependencies, and use your hubot fork\n+6. Push to your fork and submit a pull request.\n+\n+At this point you're waiting on us. We like to at least comment on, if not\n+accept, pull requests within a few days. We may suggest some changes or improvements or alternatives.\n+\n+Some things that will increase the chance that your pull request is accepted:\n+\n+* Use CoffeeScript [idioms](http://arcturo.github.io/library/coffeescript/04_idioms.html) and [style guide](https://github.com/polarmobile/coffeescript-style-guide)\n+* Update the documentation, the surrounding one, examples elsewhere, guides,\n+  whatever is affected by your contribution\n+* Include any information that would be relevant to reproducing bugs, use cases for new features, etc.\n+* Impact on existing [hubot installs](docs/README.md), [hubot adapters](docs/adapters.md), and [hubot scripts](docs/scripting.md) (e.g. backwards compatibility)\n+\n+Syntax:\n+\n+* Two spaces, no tabs.\n+* No trailing whitespace. Blank lines should not have any space.\n+* Prefer `and` and `or` over `&&` and `||`\n+* `MyClass.my_method(my_arg)` not `my_method( my_arg )` or `my_method my_arg`.\n+* `a = b` and not `a=b`.\n+* Follow the conventions you see used in the source already.", "changes": 28}, {"status": "renamed", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/LICENSE", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/LICENSE", "previous_filename": "LICENSE.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/LICENSE?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "LICENSE", "sha": "493db50edda9d35fb7fdba7a0e10ed68c257ffb0", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n-Copyright (c) 2011 GitHub Inc.\n+Copyright (c) 2013 GitHub Inc.\n \n Permission is hereby granted, free of charge, to any person obtaining\n a copy of this software and associated documentation files (the\n@@ -18,4 +18,3 @@ NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n-", "changes": 3}, {"status": "modified", "deletions": 202, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "README.md", "sha": "ae129a7937efc68d11f3973d3153882beb85467b", "additions": 12, "patch": "@@ -1,208 +1,18 @@\n # Hubot\n \n-This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n+Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n+cool. He's extendable with\n+[community scripts](https://github.com/github/hubot-scripts) and your own custom\n+scripts, and can work on [many different chat services](docs/adapters.md).\n \n-**You'll probably never have to hack on this repo directly.**\n+This repository provides a library that's distributed by `npm` that you\n+use for building your own bots.  See the [docs/README.md](docs/README.md)\n+for details on getting up and running with your very own robot friend.\n \n-Follow the instructions below and get your own hubot ready to deploy.\n+In most cases, you'll probably never have to hack on this repo directly if you\n+are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTING.md)\n \n-## Getting Your Own\n+## License\n \n-Make sure you have [node.js][nodejs] and [npm][npmjs] installed.\n-\n-You can install the `hubot` npm package globally and you will be able to run\n-`hubot --create <PATH>` if you've setup npm packages to be in your `PATH`.\n-\n-    $ npm install -g hubot coffee-script\n-    $ hubot --create <path>\n-\n-Then the directory at `<path>` contains a deployable hubot that you're able to\n-deploy to heroku or run locally.\n-\n-## Adapters\n-\n-Adapters are the interface to the service you want your hubot to run on. This\n-can be something like Campfire or IRC. There are a number of third party\n-adapters that the community have contributed. Check the\n-[hubot wiki][hubot-wiki] for the available ones and how to create your own.\n-\n-Please submit issues and pull requests for third party adapters to the adapter\n-repository, not this one (unless it's the Campfire or shell adapter).\n-\n-## Hubot Scripts\n-\n-Hubot ships with a number of default scripts, but there's a growing number of\n-extras in the [hubot-scripts][hubot-scripts] repository. `hubot-scripts` is a\n-way to share scripts with the entire community.\n-\n-Check out the [README][hubot-scripts-readme] for more help on installing\n-individual scripts.\n-\n-## External Scripts\n-\n-This functionality allows users to enable scripts from `npm` packages which\n-don't have to be included in the `hubot-scripts` repository.\n-\n-To enable to functionality you can follow the following steps.\n-\n-1. Add the packages as dependencies into your `package.json`\n-2. `npm install` to make sure those packages are installed\n-\n-To enable third-party scripts that you've added you will need to add the package\n-name as a double quoted string to the `external-scripts.json` file for your\n-hubot.\n-\n-**Please note that external scripts may become the default for hubot scripts in\n-future releases.**\n-\n-### Creating A Script Package\n-\n-Creating a script package for hubot is very simple. Start by creating a normal\n-`npm` package. Make sure you add a main file for the entry point (e.g.\n-`index.js` or `index.coffee`).\n-\n-In this entry point file you're going to have to export a function that hubot\n-will use to load the scripts in your package. Below is a simple example for\n-loading each script in a `./scripts` directory in your package.\n-\n-```coffeescript\n-Fs   = require 'fs'\n-Path = require 'path'\n-\n-module.exports = (robot) ->\n-  path = Path.resolve __dirname, 'scripts'\n-  Fs.exists path, (exists) ->\n-    if exists\n-      for file in Fs.readdirSync(path)\n-        robot.loadFile path, file\n-        robot.parseHelp Path.join(path, file)\n-```\n-\n-After you've built your `npm` package you can publish it to [npmjs][npmjs].\n-\n-## HTTP Listener\n-\n-Hubot has a HTTP listener which listens on the port specified by the `PORT`\n-environment variable. If PORT is not specified, the default port will be 8080.\n-\n-You can specify routes to listen on in your scripts by using the `router`\n-property on `robot`.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-  robot.router.get \"/hubot/version\", (req, res) ->\n-    res.end robot.version\n-```\n-\n-There are functions for GET, POST, PUT and DELETE, which all take a route and\n-callback function that accepts a request and a response.\n-\n-In addition, if you set `EXPRESS_STATIC`, the HTTP listener will serve static\n-files from this directory.\n-\n-## Events\n-\n-Hubot can also respond to events which can be used to pass data between scripts.\n-\n-```coffeescript\n-# src/scripts/github-commits.coffee\n-module.exports = (robot) ->\n-  robot.router.post \"/hubot/gh-commits\", (req, res) ->\n-  \t#code goes here\n-    robot.emit \"commit\", {\n-        user    : {}, #hubot user object\n-        repo    : 'https://github.com/github/hubot',\n-        hash  : '2e1951c089bd865839328592ff673d2f08153643'\n-    }\n-```\n-```coffeescript\n-# src/scripts/heroku.coffee\n-module.exports = (robot) ->\n-  robot.on \"commit\", (commit) ->\n-    robot.send commit.user, \"Will now deploy #{commit.hash} from #{commit.repo}!\"\n-    #deploy code goes here\n-```\n-\n-If you provide an event, it's very recommended to include a hubot user object\n-in data. In case of other reacting scripts want to respond to chat.\n-\n-## Authentication\n-\n-Hubot has first class support for specify roles which a user must have to run\n-specific commands. If you wish you use this support you must set the the\n-following environment variables:\n-\n-    * `HUBOT_AUTH_ADMIN` a comma separated list of admin IDs\n-\n-You can find the user IDs by running the `show users` command. The admin IDs\n-specify which users can add and remove roles from users. Please note you can\n-only assign the admin role using the environment variable.\n-\n-###\u00a0Assigning a Role\n-\n-You can assign a role to the user using the following command:\n-\n-    hubot Joe Bloggs has developer role\n-    hubot John Doe has ops role\n-\n-The name must be the exact name as stored in hubot's brain.\n-\n-###\u00a0Removing a Role\n-\n-You can remove a role from the user using the following command:\n-\n-    hubot Joe Bloggs doesn't have developer role\n-    hubot John Doe does not have ops role\n-\n-### Viewing a User's Roles\n-\n-You can view the roles a user has or see which users have the admin role with\n-the following commands:\n-\n-    hubot what roles does Joe Bloggs have?\n-    hubot who has admin role?\n-\n-## Persistence\n-\n-Hubot has an in-memory key-value store exposed as `robot.brain` that can be\n-used to store and retrieve data by scripts.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-\n-  robot.respond /have a beer/i, (msg) ->\n-    # Get number of beers had (coerced to a number).\n-    beersHad = robot.brain.get('totalBeers') * 1 or 0\n-\n-    if beersHad > 4\n-      msg.respond \"I'm too drunk..\"\n-\n-    else\n-      msg.respond 'Sure!'\n-\n-      robot.brain.set 'totalBeers', beersHad+1\n-      # Or robot.brain.set totalBeers: beersHad+1\n-```\n-\n-If the script needs to store user data, `robot.brain` has a built-in interface\n-for it.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-\n-  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n-    name = msg.match[1].trim()\n-\n-    users = robot.brain.usersForFuzzyName(name)\n-    if users.length is 1\n-      user = users[0]\n-      # Do something interesting here..\n-\n-      msg.send \"#{name} is user - #{user}\"\n-```\n-\n-[nodejs]: http://nodejs.org\n-[npmjs]: http://npmjs.org\n-[hubot-wiki]: https://github.com/github/hubot/wiki\n-[hubot-scripts]: https://github.com/github/hubot-scripts\n-[hubot-scripts-readme]: https://github.com/github/hubot-scripts#readme\n+Copyright (c) 2011-2013 GitHub, Inc. See the LICENSE file for license rights and\n+limitations (MIT).", "changes": 214}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "docs/README.md", "sha": "4b6d27834fe2e7b22290c9b0d3d00687ac87cafd", "additions": 109, "patch": "@@ -0,0 +1,109 @@\n+# Hubot\n+\n+## Getting Started With Hubot\n+\n+You will need [node.js](nodejs.org/) and [npm](https://npmjs.org/). Joyent has\n+an [excellent blog post on how to those installed](http://joyent.com/blog/installing-node-and-npm), so we'll omit those details here.\n+\n+Once node and npm are ready, we can install hubot and coffeescript:\n+\n+    % npm install -g hubot coffee-script\n+    \n+This will give us the `hubot` command, which is used for running a hubot, and more importantly now, generating your own hubot. The name of the new bot is\n+the last argument, and will be created in the directory of the same name. For\n+example, to create a new bot named myhubot:\n+\n+    % hubot --create myhubot\n+\n+If you are using git, the generated directory includes a .gitignore, so you can\n+initialize and add everything:\n+\n+    % cd myhubot\n+    % git init\n+    % git add .\n+    % git commit -m \"Initial commit\"\n+\n+You now have your own functional hubot! There's a `bin/hubot`\n+command for convenience, to handle installing npm dependencies, loading scripts,\n+and then launching your hubot.\n+\n+    % bin/hubot\n+    Hubot>\n+\n+This starts hubot using the [shell adapter](docs/adapters/shell.md), which\n+is mostly useful for development. Make note of  `Hubot>`; this is the name he'll\n+`respond` to with commands. For example, to list available commands:\n+\n+    % bin/hubot\n+    Hubot> hubot: help\n+    hubot <keyword> tweet - Returns a link to a tweet about <keyword>\n+    hubot <user> is a badass guitarist - assign a role to a user\n+    hubot <user> is not a badass guitarist - remove a role from a user\n+    hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.\n+    hubot convert me <expression> to <units> - Convert expression to given units.\n+    hubot die - End hubot process\n+    hubot echo <text> - Reply back with <text>\n+    hubot fake event <event> - Triggers the <event> event for debugging reasons\n+    hubot help - Displays all of the help commands that Hubot knows about.\n+    hubot help <query> - Displays all help commands that match <query>.\n+    hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n+    hubot map me <query> - Returns a map view of the area returned by `query`.\n+    hubot math me <expression> - Calculate the given expression.\n+    hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n+    hubot mustache me <url> - Adds a mustache to the specified URL.\n+    hubot ping - Reply with pong\n+    hubot show storage - Display the contents that are persisted in the brain\n+    hubot show users - Display all users that hubot knows about\n+    hubot the rules - Make sure hubot still knows the rules.\n+    hubot time - Reply with current time\n+    hubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.\n+    hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n+    hubot who is <user> - see what roles a user has\n+    hubot youtube me <query> - Searches YouTube for the query and returns the video embed link.\n+    pug bomb N - get N pugs\n+    pug me - Receive a pug\n+    ship it - Display a motivation squirrel\n+\n+You almost definitely will want to change his name to give him some more character. bin/hubot takes a `--name`:\n+\n+    % bin/hubot --name myhubot\n+    myhubot> \n+\n+Your hubot will now respond as `myhubot`. This is\n+case-insensitive, and can be prefixed with `@` or suffixed with `:`. These are equivalent:\n+\n+    MYHUBOT help\n+    myhubot help\n+    @myhubot help\n+    myhubot: help\n+\n+## Scripting\n+\n+Hubot's power comes through scripting. Read [docs/scripting.md](scripting.md) for the deal on bending hubot to your will using code.\n+\n+There are many community-contributed scripts available through [hubot-scripts](https://github.com/github/hubot-scripts). To use scripts from it:\n+\n+* Make sure `hubot-scripts` is listed as a dependency in `package.json` (it should by default)\n+* Update `hubot-scripts.json` to include the script you want in the list. Make sure the file is still valid JSON!\n+* Review the script to see if there's dependencies or configuration to add \n+\n+In addition, there are scripts released as npm packages. If you find one you want to use:\n+\n+1. Add the package to the list of `dependencies` into your `package.json`\n+2. `npm install` to make sure its installed\n+\n+**Please note that external scripts may become the default for hubot scripts in future releases.**\n+\n+## Adapters\n+\n+Hubot uses the adapter pattern to support multiple chat-backends. Read available adapters in [docs/adapters.md](adapters.md), along with how to configure them.\n+\n+## Deploying\n+\n+You can deploy hubot to Heroku, which is the officially supported method.\n+Additionally you are able to deploy hubot to a UNIX-like system or Windows.\n+Please note the support for deploying to Windows isn't officially supported.\n+\n+* [Deploying Hubot onto Heroku](deploying/heroku.md)\n+* [Deploying Hubot onto UNIX](deploying/unix.md)\n+* [Deploying Hubot onto Windows](deploying/windows.md)", "changes": 109}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "docs/adapters.md", "sha": "fb94744e32d87786bff3985bde7e29452cb63391", "additions": 38, "patch": "@@ -0,0 +1,38 @@\n+# Hubot Adapters\n+\n+Adapters are the interface to the service you want your hubot to run on.\n+\n+## Official Adapters\n+\n+Hubot includes two official adapters:\n+\n+* [Shell](adapters/shell.md), i.e. for use with development\n+* [Campfire](adapters/campfire.md)\n+\n+## Third-party Adapters\n+\n+Third-party adapters are available as `npm` packages. Here is a list of known\n+adapters, but please [submit an issue](https://github.com/github/hubot/issues)\n+to have yours added to the list:\n+\n+* [Flowdock](https://github.com/flowdock/hubot-flowdock)\n+* [HipChat](https://github.com/hipchat/hubot-hipchat)\n+* [IRC](https://github.com/nandub/hubot-irc)\n+* [Partychat](https://github.com/iangreenleaf/hubot-partychat-hooks)\n+* [Talker](https://github.com/unixcharles/hubot-talker)\n+* [Twilio](https://github.com/egparedes/hubot-twilio)\n+* [Twitter](https://github.com/MathildeLemee/hubot-twitter)\n+* [XMPP](https://github.com/markstory/hubot-xmpp)\n+* [Gtalk](https://github.com/atmos/hubot-gtalk)\n+* [Yammer](https://github.com/athieriot/hubot-yammer)\n+* [Skype](https://github.com/netpro2k/hubot-skype)\n+* [Jabbr](https://github.com/smoak/hubot-jabbr)\n+* [iMessage](https://github.com/lazerwalker/hubot-imessage)\n+* [Hall](https://github.com/Hall/hubot-hall)\n+\n+\n+## Writing Your Own adapter\n+\n+The best place to start is `src/adapter.coffee`, and inheriting from `Adapter`.\n+There is not as much documentation as could exist (yet!), so it is worth\n+reviewing existing adapters as well as how hubot internally uses an adapter.", "changes": 38}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/adapters/campfire.md", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/adapters/campfire.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/campfire.md?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "docs/adapters/campfire.md", "sha": "9f0f0c3642144f73373e1d6da4b0cd4e9cc730e8", "additions": 75, "patch": "@@ -0,0 +1,75 @@\n+# Adapter: Campfire\n+\n+[Campfire](http://campfirenow.com/) is a web based chat application built by\n+[37signals](http://37signals.com). The Campfire adapter is one of the original\n+adapters in Hubot.\n+\n+## Getting Started\n+\n+You will need a Campfire account to start, which you can\n+[sign up for free](https://signup.37signals.com/campfire/free/signup/new).\n+\n+Next, you will need to create a user on your Campfire account for your Hubot,\n+then give it access so it can join to your rooms. You will need to create a room\n+if you haven't already.\n+\n+Hubot defaults to using its [shell](shell.md), so to use Campfire instead, you\n+can run hubot with `-a campfire`:\n+\n+    % bin/hubot -a campfire\n+\n+If you are deploying to Heroku or using foreman, you need to make\n+sure the hubot is called with `-a campfire` in the `Procfile`:\n+\n+    web: bin/hubot -a campfire -n Hubot\n+\n+## Configuring\n+\n+The adapter requires the following environment variables.\n+\n+* `HUBOT_CAMPFIRE_ACCOUNT`\n+* `HUBOT_CAMPFIRE_TOKEN`\n+* `HUBOT_CAMPFIRE_ROOMS`\n+\n+### Campfire API Token\n+\n+This can be found by logging in with your hubot's account click the **My Info**\n+link and make a note of the API token.\n+\n+### Campfire Room IDs\n+\n+If you join the rooms you want your hubot to join will see notice a numerical\n+ID for the room in the URL. Make a note of each ID for the rooms you want your\n+hubot to join.\n+\n+### Campfire Account\n+\n+This is simply the first part of the domain you visit for your Campfire\n+account. For example if your Campfire was at `hubot.campfirenow.com` your\n+subdomain is `hubot`. Make a note of the subdomain.\n+\n+### Configuring the variables on Heroku\n+\n+    % heroku config:add HUBOT_CAMPFIRE_TOKEN=\"...\"\n+\n+    % heroku config:add HUBOT_CAMPFIRE_ROOMS=\"123,321\"\n+\n+    % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=\"...\"\n+\n+### Configuring the variables on UNIX\n+\n+    % export HUBOT_CAMPFIRE_TOKEN=\"...\"\n+\n+    % export HUBOT_CAMPFIRE_ROOMS=\"123,321\"\n+\n+    % export HUBOT_CAMPFIRE_ACCOUNT=\"...\"\n+\n+### Configuring the variables on Windows\n+\n+Using PowerShell:\n+\n+    setx HUBOT_CAMPFIRE_TOKEN \"...\" /m\n+\n+    setx HUBOT_CAMPFIRE_ROOMS \"123,321\" /m \n+\n+    setx HUBOT_CAMPFIRE_ACCOUNT \"...\" /m", "changes": 75}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/adapters/shell.md", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/adapters/shell.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/shell.md?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "docs/adapters/shell.md", "sha": "96139d83de51420498edb35d91af5152bab0dd06", "additions": 15, "patch": "@@ -0,0 +1,15 @@\n+# Adapters: Shell\n+\n+The shell adapter provides a simple read-eval-print loop for interacting with a hubot locally.\n+It can be useful for testing scripts before using them on a live hubot.\n+\n+## Getting Started\n+\n+To use the shell adapter you can simply omit the `-a` option when running\n+hubot as it will use the shell adapter by default.\n+\n+    % bin/hubot\n+\n+## Configuring\n+\n+This adapter doesn't require any configuration.", "changes": 15}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "docs/deploying/heroku.md", "sha": "8824c67351c6027ab4c8f8a3494bea600f30a6de", "additions": 67, "patch": "@@ -0,0 +1,67 @@\n+# Deploying Hubot to Heroku\n+\n+If you've been following along with [Getting Started](../README.md), it's time to deploy so you can use it beyond just your local machine.\n+[Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.\n+\n+Install the [Heroku Toolbelt](https://toolbelt.heroku.com/) to start, then follow their 'Getting Started' instructions, including logging in the first time:\n+\n+    % heroku login\n+    Enter your Heroku credentials.\n+    Email: youremail@example.com\n+    Password:\n+    Could not find an existing public key.\n+    Would you like to generate one? [Yn]\n+    Generating new SSH public key.\n+    Uploading ssh public key /Users/you/.ssh/id_rsa.pub\n+\n+Inside your new hubot directory, make sure you've created a git repository, and that your work is committed:\n+\n+    % git init\n+    % git add .\n+    % git commit -m \"Initial commit\"\n+\n+Then create a Heroku application:\n+\n+    % heroku create\n+    Creating rosemary-britches-123... done, stack is cedar\n+    http://rosemary-britches-123.herokuapp.com/ | git@heroku.com:rosemary-britches-123.git\n+    Git remote heroku added\n+\n+Before you deploy the application, you'll need to configure some environment\n+variables for hubot to use. Some variables you need depends on which\n+[adapter](../adapters.md) and scripts you are using. For Campfire, with no other\n+scripts, you'd need to at least:\n+\n+    % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=yourcampfireaccount\n+    % heroku config:add HUBOT_CAMPFIRE_TOKEN=yourcampfiretoken\n+    % heroku config:add HUBOT_CAMPFIRE_ROOMS=comma,separated,list,of,rooms,to,join\n+\n+In addition is one special environment variable for Heroku. The default hubot\n+[Procfile](https://devcenter.heroku.com/articles/procfile) marks the process as\n+a 'web' process type, in order to support serving up http requests (more on that\n+in the [scripting docs](../scripting.md). The downside of this is that dynos\n+will [idle after an hour of inactivity](https://devcenter.heroku.com/articles/dynos#dyno-idling).\n+That means your hubot would leave after an hour of idle web traffic, and only rejoin when it does get traffic. This is extremely\n+inconvenient since most interaction is done through chat, and hubot has to be online and in the room this. To get around this this,\n+there's a special environment variable to make hubot regularly ping itself over http. If\n+the app is deployed to http://rosemary-britches-123.herokuapp.com/, then you'd\n+configure:\n+\n+    % heroku config:add HUBOT_HEROKU_URL=http://rosemary-britches-123.herokuapp.com\n+\n+At this point, you are ready to deploy and start chatting. With Heroku, that's a\n+git push away:\n+\n+    % git push heroku master\n+\n+You'll see some text flying, and eventually some success. You should be able to\n+see your bot in your configured chat rooms at this point. If not, you can peek\n+at the logs to try to debug:\n+\n+    % heroku logs\n+\n+If you make any changes to your hubot, just commit them, and push them as\n+before:\n+\n+    % git ci -a -m \"Awesome scripts OMG\"\n+    % git push heroku master", "changes": 67}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/deploying/unix.md", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/deploying/unix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/unix.md?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "docs/deploying/unix.md", "sha": "862d1f5884f63f0ae27a8beb50a9fa02d5a80684", "additions": 65, "patch": "@@ -0,0 +1,65 @@\n+# Deploying Hubot to UNIX\n+\n+Because there are so many variations of Linux, and more generally UNIX, it's\n+difficult for the hubot team to have canonical documentation for installing and\n+deploying it to every version out there. So, this is an attempt to give an\n+overview of what's needed to get deploying.\n+\n+There are 3 primary things to deploying and running hubot:\n+\n+  * node and npm\n+  * a way to get source code updated on the server\n+  * a way to start hubot, start it up if it crashes, and restart it when code\n+    updates\n+\n+## node and npm\n+\n+To start, your UNIX server will need node and npm. Check out the node.js wiki\n+for [installing Node.js via package manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager), [Building on GNU/Linux and other UNIX](https://github.com/joyent/node/wiki/Installation#building-on-gnulinux-and-other-unix).\n+\n+## Updating code on the server\n+\n+The simplest way to update your hubot's code is going to be to have a git\n+checkout of your hubot's source code (that you've created during [Getting Started](../README.md), not the [github/hubot repository](http://github.com/github/hubot), and just git pull to get change. This may\n+feel a dirty hack, but it works when you are starting out.\n+\n+If you have a Ruby background, you might be more comfortable using\n+[capistrano](https://github.com/capistrano/capistrano).\n+\n+If you have a [Chef](http://www.opscode.com/chef/) background, there's a\n+[deploy](http://docs.opscode.com/resource_deploy.html) resource for managing\n+deployments.\n+\n+## Starting, stopping, and restarting hubot\n+\n+Every hubot install has a `bin/hubot` script to handle starting up the hubot.\n+You can run this command from your git checkout on the server, but there are some problems you can encounter:\n+\n+* you disconnect, and hubot dies\n+* hubot dies, for any reason, and doesn't start again\n+* it doesn't start up at boot automatically\n+\n+For handling you disconnecting, you can start with running `bin/hubot` in\n+[screen session](http://www.gnu.org/software/screen/) or with\n+[nohup](http://linux.die.net/man/1/nohup).\n+\n+For handling hubot dying, and restarting it automatically, you can imagine\n+running `bin/hubot` in a\n+[bash while loop](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-7.html#ss7.3). But\n+really, you probably want some process monitoring using tools like\n+[monit](http://mmonit.com/monit/),\n+[god](http://godrb.com/),\n+[bluepill](https://github.com/arya/bluepill),\n+[upstart](http://upstart.ubuntu.com/).\n+\n+For starting at boot, you can create an init script for appropriate your UNIX\n+distribution, or if you are using one the process monitoring tools above, make\n+sure it boots at startup.\n+\n+## Recommendations\n+\n+This document has been deliberately light on strong recommendations. At a high\n+level though, it's strongly recommended to avoid anything that is overly manual\n+and non-repeatable. That would mean using your OS's packages and tools whenever\n+possible, and having a proper deploy tool to update hubot, and process\n+management to keep hubot running.", "changes": 65}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/deploying/windows.md", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/deploying/windows.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/windows.md?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "docs/deploying/windows.md", "sha": "ebfeec202ffd8f77b11c3579685081ef7817c85c", "additions": 3, "patch": "@@ -0,0 +1,3 @@\n+# Deploying Hubot to Windows\n+\n+Not yet written. [Help me out by submitting a pull request, please?](https://github.com/github/hubot/pull/new/master)", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "docs/scripting.md", "sha": "f95fc94a5bcfdca8001f511d7ea5cd8d87b52bd3", "additions": 483, "patch": "@@ -0,0 +1,483 @@\n+# Scripting\n+\n+Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend.\n+\n+## Anatomy of a script\n+\n+When you created your hubot, the generator also created a `scripts` directory. If you peak around there, you will see some examples of scripts. For a script to be a script, it needs to:\n+\n+* live in a directory on the hubot script load path (`src/scripts` and `scripts` by default)\n+* be a `.coffee` or `.js` file\n+* export a function\n+\n+By export a function, we just mean: \n+\n+```coffeescript\n+module.exports = (robot) ->\n+  # your code here\n+```\n+\n+The `robot` parameter is an instance of your robot friend. At this point, we can start scripting up some awesomeness.\n+\n+## Hearing and responding\n+\n+Since this is a chat bot, the most common interactions are based on messages. Hubot can `hear` messages said in a room or `respond` to messages directly addressed at it. Both methods take a regular expression and a callback function as parameters. For example:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.hear /badger/i, (msg) ->\n+    # your code here\n+\n+  robot.respond /open the pod bay doors/i, (msg) ->\n+    # your code here\n+```\n+\n+The `robot.hear /badgers/` callback is called anytime a message's text matches. For example:\n+\n+* Stop badgering the witness\n+* badger me\n+* what exactly is a badger anyways\n+\n+The `robot.respond /open the pod bay doors/i` callback is only called for messages that are immediately preceded by the robot's name or alias. If the robot's name is HAL and alias is /, then this callback would be triggered for:\n+\n+*  hal open the pod bay doors\n+* HAL: open the pod bay doors\n+* @HAL open the pod bay doors\n+* /open the pod bay doors\n+\n+It wouldn't be called for:\n+\n+* HAL: please open the pod bay doors\n+   *  because its `respond` is bound to the text immediately following the robot name\n+*  has anyone ever mentioned how lovely you are when you open pod bay doors?\n+   * because it lacks the robot's name\n+\n+## Send & reply\n+\n+The `msg` parameter is, despite the name, an instance of [Response](../src/response.coffee). With it, you can `send` a message back to the room the `msg` came from, or `reply` to the person that sent the message. For example:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.hear /badger/i, (msg) ->\n+    msg.send \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\"\n+\n+  robot.respond /open the pod bay doors/i, (msg) ->\n+    msg.reply \"I'm afraid I can't let you do that.\"\n+```\n+\n+The `robot.hear /badgers/` callback sends a message exactly as specified regardless of who said it, \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\". \n+\n+If a user Dave says \"HAL: open the pod bay doors\", `robot.respond /open the pod bay doors/i` callback sends a message \"Dave: I'm afraid I can't let you do that.\"\n+\n+## Capturing data\n+\n+So far, our scripts have had static responses, which while amusing, are boring functionality-wise. `msg.match` has the result of `match`ing the incoming message against the regular expression. This is just a [JavaScript thing](http://www.w3schools.com/jsref/jsref_match.asp), which ends up being an array with index 0 being the full text matching the expression. If you include capture groups, those will be populated `msg.match`. For example, if we update a script like:\n+\n+```coffeescript\n+  robot.respond /open the (.*) doors/i, (msg) ->\n+    # your code here\n+```\n+\n+If Dave says \"HAL: open the pod bay doors\", then `msg.match[0]` is \"open the pod bay doors\", and `msg.match[1]` is just \"pod bay\" doors. Now we can start doing more dynamic things:\n+\n+```coffeescript\n+  robot.respond /open the (.*) doors/i, (msg) ->\n+    doorType = msg.match[1]\n+    if doorType is \"pod bay\"\n+      msg.reply \"I'm afraid I can't let you do that.\"\n+    else\n+      msg.reply \"Opening #{doorType} doors\"\n+```\n+\n+## Making HTTP calls\n+\n+Hubot can make HTTP calls on your behalf to integrate & consume third party APIs. This can be through an instance of [node-scoped-http-client](https://github.com/technoweenie/node-scoped-http-client) available at `robot.http`. The simplest case looks like:\n+\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      # your code here\n+```\n+\n+`err` is an error encountered on the way, if one was encountered. You'll generally want to check for this and handle accordingly:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      if err\n+        msg.send \"Encountered an error :( #{err}\n+        return\n+      # your code here, knowing it was successful\n+```\n+\n+`res` is an instance of node's [http.ServerResponse](http://nodejs.org/api/http.html#http_class_http_serverresponse). Most of the methods don't matter as much when using node-scoped-http-client, but of interest are `statusCode` and `getHeader`. Use `statusCode` to check for the HTTP status code, where usually non-200 means something bad happened. Use `getHeader` for peaking at the header, for example to check for rate limiting:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      # pretend there's error checking code here\n+\n+      if res.statusCode isnt 200\n+        msg.send \"Request didn't come back HTTP 200 :(\"\n+        return\n+\n+      rateLimitRemaining = parseInt res.getHeader('X-RateLimit-Limit') if res.getHeader('X-RateLimit-Limit')\n+      if rateLimitRemaining and rateLimitRemaining < 1\n+        msg.send \"Rate Limit hit, stop believing for awhile\"\n+\n+      # rest of your code\n+```\n+\n+`body` is the response's body as a string, the thing you probably care about the most:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      # error checking code here\n+\n+      msg.send \"Got back #{body}\"\n+```\n+\n+### JSON\n+\n+If you are talking to APIs, the easiest way is going to be JSON because it doesn't require any extra dependencies. When making the `robot.http` call, you should usually set the  `Accept` header to give the API a clue that's what you are expecting back. Once you get the `body` back, you can parse it with `JSON.parse`:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .header('Accept', 'application/json')\n+    .get() (err, res, body) ->\n+      # error checking code here\n+\n+      data = JSON.parse(body)\n+      msg.send \"#{data.passenger} taking midnight train going #{data.destination}\"\n+```\n+\n+It's possible to get non-JSON back, like if the API hit an error and it tries to render a normal HTML error instead of JSON. To be on the safe side, you should check the `Content-Type`, and catch any errors while parsing.\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .header('Accept', 'application/json')\n+    .get() (err, res, body) ->\n+      # err & response status checking code here\n+\n+      if response.getHeader('Content-Type') isnt 'application/json'\n+        msg.send \"Didn't get back JSON :(\"\n+        return\n+\n+      data = null\n+      try\n+        data = JSON.parse(body)\n+      catch error\n+       msg.send \"Ran into an error parsing JSON :(\"\n+       return\n+\n+      # your code here\n+```\n+\n+### XML\n+\n+XML APIs are harder because there's not a bundled XML parsing library. It's beyond the scope of this documentation to go into detail, but here are a few libraries to check out:\n+\n+* [xml2json](https://github.com/buglabs/node-xml2json) (simplest to use, but has some limitations)\n+* [jsdom](https://github.com/tmpvar/jsdom) (JavaScript implementation of the W3C DOM)\n+* [xml2js](https://github.com/Leonidas-from-XIV/node-xml2js)\n+\n+### Screen scraping\n+\n+For those times that there isn't an API, there's always the possibility of screen-scraping. It's beyond the scope of this documentation to go into detail, but here's a few libraries to check out:\n+\n+* [cheerio](https://github.com/MatthewMueller/cheerio) (familiar syntax and API to jQuery)\n+* [jsdom](https://github.com/tmpvar/jsdom) (JavaScript implementation of the W3C DOM)\n+\n+## Random\n+\n+A common pattern is to hear or respond to commands, and send with a random funny image or line of text from an array of possibilities. It's annoying to do this in JavaScript and CoffeeScript out of the box, so Hubot includes a convenience method:\n+\n+```coffeescript\n+lulz = ['lol', 'rofl', 'lmao']\n+\n+msg.send msg.random lulz\n+```\n+\n+## Topic\n+\n+Hubot can react to a room's topic changing, assuming that the adapter supports it.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.topic (msg) ->\n+    msg.send \"#{msg.message.text}? That's a Paddlin'\"\n+```\n+\n+## Entering and leaving\n+\n+Hubot can see users entering and leaving, assuming that the adapter supports it.\n+\n+```coffeescript\n+enterReplies = ['Hi', 'Target Acquired', 'Firing', 'Hello friend.', 'Gotcha', 'I see you']\n+leaveReplies = ['Are you still there?', 'Target lost', 'Searching']\n+\n+module.exports = (robot) ->\n+  robot.enter (msg) ->\n+    msg.send msg.random enterReplies\n+  robot.leave (msg) ->\n+    msg.send msg.random leaveReplies\n+```\n+\n+## Environment variables\n+\n+Hubot can access the environment he's running in, just like any other node program, using [`process.env`](http://nodejs.org/api/process.html#process_process_env). This can be used to configure how scripts are run, with the convention being to use the `HUBOT_` prefix.\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+Take care to make sure the script can load if it's not defined, give the Hubot developer notes on how to define it, or default to something. It's up to the script writer to decide if that should be a fatal error (e.g. hubot exits), or not (make any script that relies on it to say it needs to be configured. When possible and when it makes sense to, having a script work without any other configuration is preferred.\n+\n+Here we can default to something:\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING or 42\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+Here we exit if it's not defined:\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n+unless answer?\n+  console.log \"Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again\"\n+  process.exit(1)\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+And lastly, we update the `robot.respond` to check it:\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    unless answer?\n+      msg.send \"Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again\"\n+      return\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+## Dependencies\n+\n+Hubot uses [npm](https://github.com/isaacs/npm) to manage its dependencies. To additional packages, add them to `dependencies` in `package.json`. For example, to add lolimadeupthispackage 1.2.3, it'd look like:\n+\n+```json\n+  \"dependencies\": {\n+    \"hubot\":         \"2.5.5\",\n+    \"hubot-scripts\": \"2.4.6\",\n+    \"lolimadeupthispackage\": \"1.2.3\"\n+  },\n+```\n+\n+If you are using scripts from hubot-scripts, take note of the `Dependencies` documentation in the script to add. They are listed in a format that can be copy & pasted into `package.json`, just make sure to add commas as necessary to make it valid JSON.\n+\n+# Timeouts and Intervals\n+\n+Hubot can run code later using JavaScript's built-in [setTimeout](http://nodejs.org/api/timers.html#timers_settimeout_callback_delay_arg). It takes a callback method, and the amount of time to wait before calling it:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /you are a little slow/, (msg)\n+    setTimeout () ->\n+      msg.send \"Who you calling 'slow'?\"\n+    , 60 * 1000\n+```\n+\n+Additionally, Hubot can run code on an interval using [setInterval](http://nodejs.org/api/timers.html#timers_setinterval_callback_delay_arg). It takes a callback method, and the amount of time to wait between calls:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /annoy me/, (msg)\n+    msg.send \"Hey, want to hear the most annoying sound in the world?\"\n+    setInterval () ->\n+      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+    , 1000\n+```\n+\n+Both `setTimeout` and `setInterval` return the ID of the timeout or interval it created. This can be used to to `clearTimeout` and `clearInterval`.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  annoyIntervalId = null\n+\n+  robot.respond /annoy me/, (msg)\n+    if annoyIntervalId\n+      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+      return\n+\n+    msg.send \"Hey, want to hear the most annoying sound in the world?\"\n+    annoyIntervalId = setInterval () ->\n+      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+    , 1000\n+\n+  robot.respond /unannoy me/, (msg)\n+    if annoyIntervalId\n+      msg.send \"GUYS, GUYS, GUYS!\"\n+      clearInterval(annoyIntervalId)\n+      annoyIntervalId = null\n+    else\n+      msg.send \"Not annoying you right now, am I?\"\n+```\n+\n+## HTTP Listener\n+\n+Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to server up HTTP requests. It listens on the port specified by the `PORT` environment variable, and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EPXRESS_PASSWORD`. It can automatically server static files by setting `EXPRESS_STATIC`.\n+\n+The most common use of this is for providing HTTP end points for services with webhooks to push to, and have those show up in chat.\n+\n+\n+```\n+module.exports = (robot) ->\n+  robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n+    room = req.params.room\n+    data = JSON.parse req.body.payload\n+    secret = data.secret\n+\n+    robot.messageRoom \"I have a secret: #{secret}\"\n+```\n+\n+## Events\n+\n+Hubot can also respond to events which can be used to pass data between scripts. This is done by encapsulating node.js's [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter) with `robot.emit` and `robot.on`.\n+\n+One use case for this would be to have one script for handling interactions with a service, and then emitting events as they come up. For example, we could have a script that receives data from a GitHub post-commit hook, make that emit commits as they come in, and then have another script act on those commits.\n+\n+```coffeescript\n+# src/scripts/github-commits.coffee\n+module.exports = (robot) ->\n+  robot.router.post \"/hubot/gh-commits\", (req, res) ->\n+    robot.emit \"commit\", {\n+        user    : {}, #hubot user object\n+        repo    : 'https://github.com/github/hubot',\n+        hash  : '2e1951c089bd865839328592ff673d2f08153643'\n+    }\n+```\n+\n+```coffeescript\n+# src/scripts/heroku.coffee\n+module.exports = (robot) ->\n+  robot.on \"commit\", (commit) ->\n+    robot.send commit.user, \"Will now deploy #{commit.hash} from #{commit.repo}!\"\n+    #deploy code goes here\n+```\n+\n+If you provide an event, it's highly recommended to include a hubot user or room object in its data. This would allow for hubot to notify a user or room in chat.\n+\n+## Documenting Scripts\n+\n+Hubot scripts can be documented with comments at the top of their file, for example:\n+\n+```coffeescript\n+# Description\n+#   <description of the scripts functionality>\n+#\n+# Dependencies:\n+#   \"<module name>\": \"<module version>\"\n+#\n+# Configuration:\n+#   LIST_OF_ENV_VARS_TO_SET\n+#\n+# Commands:\n+#   hubot <trigger> - <what the respond trigger does>\n+#   <trigger> - <what the hear trigger does>\n+#\n+# Notes:\n+#   <optional notes required for the script>\n+#\n+# Author:\n+#   <github username of the original script author>\n+```\n+\n+The most important and user facing of these is `Commands`. At load time, Hubot looks at the `Commands` section of each scripts, and build a list of all commands. The included `help.coffee` lets a user ask for help across all commands, or with a search. Therefore, documenting the commands make them a lot more discoverable by users.\n+\n+When documenting commands, here are some best practices:\n+\n+* Stay on one line. Help commands get sorted, so would insert the second line at an unexpected location, where it probably won't make sense.\n+* Refer to the Hubot as hubot, even if your hubot is named something else. It will automatically be replaced with the correct name. This makes it easier to share scripts without having to update docs.\n+* For `robot.respond` documentation, always prefix with `hubot`. Hubot will automatically replace this with your robot's name, or the robot's alias if it has one\n+* Check out how man pages document themselves. In particular, brackets indicate optional parts, '...' for any number of arguments, etc.\n+\n+The other sections are more relevant to developers of the bot, particularly dependencies, configuration variables, and notes. All contributions to [hubot-scripts](https://github.com/github/hubot-scripts) should include all these sections that are related to getting up and running with the script.\n+\n+\n+\n+## Persistence\n+\n+Hubot has an in-memory key-value store exposed as `robot.brain` that can be\n+used to store and retrieve data by scripts.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /have a beer/i, (msg) ->\n+    # Get number of beers had (coerced to a number).\n+    beersHad = robot.brain.get('totalBeers') * 1 or 0\n+\n+    if beersHad > 4\n+      msg.respond \"I'm too drunk..\"\n+\n+    else\n+      msg.respond 'Sure!'\n+\n+      robot.brain.set 'totalBeers', beersHad+1\n+      # Or robot.brain.set totalBeers: beersHad+1\n+```\n+\n+If the script needs to lookup user data, there are methods on `robot.brain` for looking up one or many users by id, name, or 'fuzzy' matching of name: `userForName`, `userForId`, `userForFuzzyName`, and `usersForFuzzyName`.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+\n+  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n+    name = msg.match[1].trim()\n+\n+    users = robot.brain.usersForFuzzyName(name)\n+    if users.length is 1\n+      user = users[0]\n+      # Do something interesting here..\n+\n+      msg.send \"#{name} is user - #{user}\"\n+```\n+\n+\n+## Creating A Script Package\n+\n+Creating a script package for hubot is very simple. Start by creating a normal\n+`npm` package. Make sure you add a main file for the entry point (e.g.\n+`index.js` or `index.coffee`).\n+\n+In this entry point file you're going to have to export a function that hubot\n+will use to load the scripts in your package. Below is a simple example for\n+loading each script in a `./scripts` directory in your package.\n+\n+```coffeescript\n+Fs   = require 'fs'\n+Path = require 'path'\n+\n+module.exports = (robot) ->\n+  path = Path.resolve __dirname, 'scripts'\n+  Fs.exists path, (exists) ->\n+    if exists\n+      for file in Fs.readdirSync(path)\n+        robot.loadFile path, file\n+        robot.parseHelp Path.join(path, file)\n+```\n+\n+After you've built your `npm` package you can publish it to [npmjs](http://npmjs.org).", "changes": 483}, {"status": "modified", "deletions": 46, "raw_url": "https://github.com/hubotio/hubot/raw/701dfb964939aa8b5d6784e7acd81f51e44e3920/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/701dfb964939aa8b5d6784e7acd81f51e44e3920/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=701dfb964939aa8b5d6784e7acd81f51e44e3920", "filename": "src/templates/README.md", "sha": "f2a3feb7710860607afcf6e50e568057963c2550", "additions": 24, "patch": "@@ -2,49 +2,10 @@\n \n This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n \n-This version is designed to be deployed on [Heroku][heroku].\n+This version is designed to be deployed on [Heroku][heroku]. This README was generated for you by hubot to help get you started. Definitely update and improve to talk about your own instance, how to use and deploy, what functionality he has, etc!\n \n [heroku]: http://www.heroku.com\n \n-## Playing with Hubot\n-\n-You'll need to install the necessary dependencies for hubot. All of\n-those dependencies are provided by [npm][npmjs].\n-\n-[npmjs]: http://npmjs.org\n-\n-## HTTP Listener\n-\n-Hubot has a HTTP listener which listens on the port specified by the `PORT`\n-environment variable.\n-\n-You can specify routes to listen on in your scripts by using the `router`\n-property on `robot`.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-  robot.router.get \"/hubot/version\", (req, res) ->\n-    res.end robot.version\n-```\n-\n-There are functions for GET, POST, PUT and DELETE, which all take a route and\n-callback function that accepts a request and a response.\n-\n-### Redis\n-\n-If you are going to use the `redis-brain.coffee` script from `hubot-scripts`\n-you will need to add the Redis to Go addon on Heroku which requires a verified\n-account or you can create an account at [Redis to Go][redistogo] and manually\n-set the `REDISTOGO_URL` variable.\n-\n-    % heroku config:add REDISTOGO_URL=\"...\"\n-\n-If you don't require any persistence feel free to remove the\n-`redis-brain.coffee` from `hubot-scripts.json` and you don't need to worry\n-about redis at all.\n-\n-[redistogo]: https://redistogo.com/\n-\n ### Testing Hubot Locally\n \n You can test your hubot by running the following.\n@@ -68,9 +29,27 @@ Then you can interact with hubot by typing `hubot help`.\n     help - Displays all of the help commands that Hubot knows about.\n     ...\n \n+\n+### Scripting\n+\n Take a look at the scripts in the `./scripts` folder for examples.\n-Delete any scripts you think are silly.  Add whatever functionality you\n-want hubot to have.\n+Delete any scripts you think are useless or boring.  Add whatever functionality you\n+want hubot to have. Read up on what you can do with hubot in the [Scripting Guide](https://github.com/github/hubot/blob/master/docs/scripting.md).\n+\n+### Redis Persistence\n+\n+If you are going to use the `redis-brain.coffee` script from `hubot-scripts`\n+(strongly suggested), you will need to add the Redis to Go addon on Heroku which requires a verified\n+account or you can create an account at [Redis to Go][redistogo] and manually\n+set the `REDISTOGO_URL` variable.\n+\n+    % heroku config:add REDISTOGO_URL=\"...\"\n+\n+If you don't require any persistence feel free to remove the\n+`redis-brain.coffee` from `hubot-scripts.json` and you don't need to worry\n+about redis at all.\n+\n+[redistogo]: https://redistogo.com/\n \n ## Adapters\n \n@@ -144,9 +123,9 @@ Please check out the [deploying hubot onto UNIX][deploy-unix] and\n [deploying hubot onto Windows][deploy-windows] wiki pages.\n \n [heroku-node-docs]: http://devcenter.heroku.com/articles/node-js\n-[deploy-heroku]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-Heroku\n-[deploy-unix]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-UNIX\n-[deploy-windows]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-Windows\n+[deploy-heroku]: https://github.com/github/hubot/blob/master/docs/deploying/heroku.md\n+[deploy-unix]: https://github.com/github/hubot/blob/master/docs/deploying/unix.md\n+[deploy-windows]: https://github.com/github/hubot/blob/master/docs/deploying/unix.md\n \n ## Campfire Variables\n \n@@ -176,4 +155,3 @@ Add the subdomain hubot should connect to. If you web URL looks like\n \n You may want to get comfortable with `heroku logs` and `heroku restart`\n if you're having issues.\n-", "changes": 70}], "432": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e21b01f419c94b8bde5dfebec10702cbcfe33c20/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/e21b01f419c94b8bde5dfebec10702cbcfe33c20/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=e21b01f419c94b8bde5dfebec10702cbcfe33c20", "filename": "bin/hubot", "sha": "805fc89c6b071b075a526994bee0a175f87a7c33", "additions": 3, "patch": "@@ -98,6 +98,7 @@ else\n               robot.loadHubotScripts scriptsPath, scripts\n             catch err\n               console.error \"Error parsing JSON data from hubot-scripts.json: #{err}\"\n+              process.exit(1)\n \n     externalScripts = Path.resolve \".\", \"external-scripts.json\"\n     Fs.exists externalScripts, (exists) ->\n@@ -106,9 +107,10 @@ else\n           if data.length > 0\n             try\n               scripts = JSON.parse data\n-              robot.loadExternalScripts scripts\n             catch err\n               console.error \"Error parsing JSON data from external-scripts.json: #{err}\"\n+              process.exit(1)\n+            robot.loadExternalScripts scripts\n \n     for path in Options.scripts\n       if path[0] == '/'", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e21b01f419c94b8bde5dfebec10702cbcfe33c20/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e21b01f419c94b8bde5dfebec10702cbcfe33c20/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=e21b01f419c94b8bde5dfebec10702cbcfe33c20", "filename": "src/robot.coffee", "sha": "8fa256613eae85390f8a45f1c75091159ce89ebf", "additions": 4, "patch": "@@ -142,7 +142,8 @@ class Robot\n         require(full) @\n         @parseHelp \"#{path}/#{file}\"\n       catch error\n-        @logger.error \"Unable to load #{full}: #{error}\\n#{error.stack}\"\n+        @logger.error \"Unable to load #{full}: #{error.stack}\"\n+        process.exit(1)\n \n   # Public: Loads every script in the given path.\n   #\n@@ -180,6 +181,7 @@ class Robot\n         require(pkg) @\n       catch error\n         @logger.error \"Error loading scripts from npm package - #{error}\"\n+        process.exit(1)\n \n   # Setup the Connect server's defaults.\n   #\n@@ -246,6 +248,7 @@ class Robot\n       @adapter = require(path).use @\n     catch err\n       @logger.error \"Cannot load adapter #{adapter} - #{err}\"\n+      process.exit(1)\n \n   # Public: Help Commands for Running Scripts.\n   #", "changes": 5}], "434": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/.gitignore", "blob_url": "https://github.com/hubotio/hubot/blob/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/.gitignore", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.gitignore?ref=d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6", "filename": ".gitignore", "sha": "1e430d8cb673a70b9dff56372cb4b001f00f2700", "additions": 1, "patch": "@@ -1 +1,2 @@\n node_modules\n+docs", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/Makefile", "blob_url": "https://github.com/hubotio/hubot/blob/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/Makefile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Makefile?ref=d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6", "filename": "Makefile", "sha": "e167be2c335126062d7b96953785141b957c4773", "additions": 3, "patch": "@@ -2,6 +2,9 @@ NPM_EXECUTABLE_HOME := node_modules/.bin\n \n PATH := ${NPM_EXECUTABLE_HOME}:${PATH}\n \n+docs:\n+\t@./node_modules/docco/bin/docco --layout linear src/*.coffee\n+\n test: deps\n \t@find test -name '*_test.coffee' | xargs -n 1 -t coffee\n ", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6", "filename": "package.json", "sha": "49beb8ad6a4c251dd8d8cd0c8633ea8ac09e3666", "additions": 4, "patch": "@@ -26,6 +26,10 @@\n     \"connect_router\":     \"1.8.7\"\n   },\n \n+  \"devDependencies\": {\n+    \"docco\": \">= 0.6.0\"\n+  },\n+\n   \"engines\": {\n     \"node\": \">= 0.8.x\",\n     \"npm\":  \">= 1.1.x\"", "changes": 4}, {"status": "modified", "deletions": 62, "raw_url": "https://github.com/hubotio/hubot/raw/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6", "filename": "src/adapter.coffee", "sha": "5ddc33d68fe7d32c3d300d04575ed687e2700b5e", "additions": 0, "patch": "@@ -1,100 +1,38 @@\n {EventEmitter} = require 'events'\n \n class Adapter extends EventEmitter\n-  # An adapter is a specific interface to a chat source for robots.\n-  #\n-  # robot - A Robot instance.\n   constructor: (@robot) ->\n \n-  # Public: Raw method for sending data back to the chat source. Extend this.\n-  #\n-  # envelope - A Object with message, room and user details.\n-  # strings  - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n   send: (envelope, strings...) ->\n \n-  # Public: Raw method for building a reply and sending it back to the chat\n-  # source. Extend this.\n-  #\n-  # envelope - A Object with message, room and user details.\n-  # strings  - One or more Strings for each reply to send.\n-  #\n-  # Returns nothing.\n   reply: (envelope, strings...) ->\n \n-  # Public: Raw method for setting a topic on the chat source. Extend this.\n-  #\n-  # envelope - A Object with message, room and user details.\n-  # strings  - One more more Strings to set as the topic.\n-  #\n-  # Returns nothing.\n   topic: (envelope, strings...) ->\n \n-  # Public: Raw method for playing a sound in the chat source. Extend this.\n-  #\n-  # envelope - A Object with message, room and user details.\n-  # strings  - One or more strings for each play message to send.\n-  #\n-  # Returns nothing\n   play: (envelope, strings...) ->\n \n-  # Public: Raw method for invoking the bot to run. Extend this.\n-  #\n-  # Returns nothing.\n   run: ->\n \n-  # Public: Raw method for shutting the bot down. Extend this.\n-  #\n-  # Returns nothing.\n   close: ->\n \n-  # Public: Dispatch a received message to the robot.\n-  #\n-  # Returns nothing.\n   receive: (message) ->\n     @robot.receive message\n \n-  # Public: Get an Array of User objects stored in the brain.\n-  #\n-  # Returns an Array of User objects.\n   users: ->\n     @robot.brain.users()\n \n-  # Public: Get a User object given a unique identifier.\n-  #\n-  # Returns a User instance of the specified user.\n   userForId: (id, options) ->\n     @robot.brain.userForId id, options\n \n-  # Public: Get a User object given a name.\n-  #\n-  # Returns a User instance for the user with the specified name.\n   userForName: (name) ->\n     @robot.brain.userForName name\n \n-  # Public: Get all users whose names match fuzzyName. Currently, match\n-  # means 'starts with', but this could be extended to match initials,\n-  # nicknames, etc.\n-  #\n-  # Returns an Array of User instances matching the fuzzy name.\n   usersForRawFuzzyName: (fuzzyName) ->\n     @robot.brain.usersForRawFuzzyName fuzzyName\n \n-  # Public: If fuzzyName is an exact match for a user, returns an array with\n-  # just that user. Otherwise, returns an array of all users for which\n-  # fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n-  #\n-  # Returns an Array of User instances matching the fuzzy name.\n   usersForFuzzyName: (fuzzyName) ->\n     @robot.brain.usersForFuzzyName fuzzyName\n \n-  # Public: Creates a scoped http client with chainable methods for\n-  # modifying the request. This doesn't actually make a request though.\n-  # Once your request is assembled, you can call `get()`/`post()`/etc to\n-  # send the request.\n-  #\n-  # Returns a ScopedClient instance.\n   http: (url) ->\n     @robot.http(url)\n ", "changes": 62}, {"status": "modified", "deletions": 41, "raw_url": "https://github.com/hubotio/hubot/raw/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6", "filename": "src/brain.coffee", "sha": "5062047c0bdcbeb710b492a9ef52aac016b2e536", "additions": 0, "patch": "@@ -2,60 +2,34 @@\n \n User = require './user'\n \n-# http://www.the-isb.com/images/Nextwave-Aaron01.jpg\n class Brain extends EventEmitter\n-  # Represents somewhat persistent storage for the robot. Extend this.\n-  #\n-  # Returns a new Brain with no external storage.\n   constructor: ->\n     @data = users: { }\n     @resetSaveInterval 5\n \n-  # Public: Emits the 'save' event so that 'brain' scripts can handle persisting.\n-  #\n-  # Returns nothing.\n   save: ->\n     @emit 'save', @data\n \n-  # Public: Emits the 'close' event so that 'brain' scripts can handle closing.\n-  #\n-  # Returns nothing.\n   close: ->\n     clearInterval @saveInterval\n     @save()\n     @emit 'close'\n \n-  # Public: Reset the interval between save function calls.\n-  #\n-  # seconds - An Integer of seconds between saves.\n-  #\n-  # Returns nothing.\n   resetSaveInterval: (seconds) ->\n     clearInterval @saveInterval if @saveInterval\n     @saveInterval = setInterval =>\n       @save()\n     , seconds * 1000\n \n-  # Public: Merge keys loaded from a DB against the in memory representation.\n-  #\n-  # Returns nothing.\n-  #\n-  # Caveats: Deeply nested structures don't merge well.\n   mergeData: (data) ->\n     for k of (data or { })\n       @data[k] = data[k]\n \n     @emit 'loaded', @data\n \n-  # Public: Get an Array of User objects stored in the brain.\n-  #\n-  # Returns an Array of User objects.\n   users: ->\n     @data.users\n \n-  # Public: Get a User object given a unique identifier.\n-  #\n-  # Returns a User instance of the specified user.\n   userForId: (id, options) ->\n     user = @data.users[id]\n     unless user\n@@ -68,9 +42,6 @@ class Brain extends EventEmitter\n \n     user\n \n-  # Public: Get a User object given a name.\n-  #\n-  # Returns a User instance for the user with the specified name.\n   userForName: (name) ->\n     result = null\n     lowerName = name.toLowerCase()\n@@ -80,27 +51,15 @@ class Brain extends EventEmitter\n         result = @data.users[k]\n     result\n \n-  # Public: Get all users whose names match fuzzyName. Currently, match\n-  # means 'starts with', but this could be extended to match initials,\n-  # nicknames, etc.\n-  #\n-  # Returns an Array of User instances matching the fuzzy name.\n   usersForRawFuzzyName: (fuzzyName) ->\n     lowerFuzzyName = fuzzyName.toLowerCase()\n     user for key, user of (@data.users or {}) when (\n       user.name.toLowerCase().lastIndexOf(lowerFuzzyName, 0) is 0\n     )\n \n-  # Public: If fuzzyName is an exact match for a user, returns an array with\n-  # just that user. Otherwise, returns an array of all users for which\n-  # fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n-  #\n-  # Returns an Array of User instances matching the fuzzy name.\n   usersForFuzzyName: (fuzzyName) ->\n     matchedUsers = @usersForRawFuzzyName(fuzzyName)\n     lowerFuzzyName = fuzzyName.toLowerCase()\n-    # We can scan matchedUsers rather than all users since usersForRawFuzzyName\n-    # will include exact matches\n     for user in matchedUsers\n       return [user] if user.name.toLowerCase() is lowerFuzzyName\n ", "changes": 41}, {"status": "modified", "deletions": 27, "raw_url": "https://github.com/hubotio/hubot/raw/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6", "filename": "src/creator.coffee", "sha": "f20f9aa88d86f327f5b2d93fdae8f0697cd25dec", "additions": 0, "patch": "@@ -1,54 +1,27 @@\n Fs   = require 'fs'\n Path = require 'path'\n \n-# Simple generator class for deploying a version of hubot on heroku\n class Creator\n-  # Setup a ready to go version of hubot\n-  #\n-  # path - A String directory to create/upgrade scripts for\n   constructor: (path) ->\n     @path = path\n     @templateDir = \"#{__dirname}/templates\"\n     @scriptsDir  = \"#{__dirname}/scripts\"\n \n-  # Create a folder if it doesn't already exist.\n-  #\n-  # Returns nothing.\n   mkdirDashP: (path) ->\n     Fs.exists path, (exists) ->\n       unless exists\n         Fs.mkdir path, 0o0755, (err) ->\n           throw err if err\n \n-  # Copy the contents of a file from one place to another.\n-  #\n-  # from - A String source file to copy, must exist on disk.\n-  # to   - A String destination file to write to.\n-  #\n-  # Returns nothing.\n   copy: (from, to) ->\n     Fs.readFile from, \"utf8\", (err, data) ->\n       console.log \"Copying #{Path.resolve(from)} -> #{Path.resolve(to)}\"\n       Fs.writeFileSync to, data, \"utf8\"\n \n-  # Copy the default scripts hubot ships with to the scripts folder\n-  # This allows people to easily remove scripts hubot defaults to if\n-  # they want. It also provides them with a few examples and a top\n-  # level scripts folder.\n-  #\n-  # path - The destination.\n-  #\n-  # Returns nothing.\n   copyDefaultScripts: (path) ->\n     for file in Fs.readdirSync(@scriptsDir)\n       @copy \"#{@scriptsDir}/#{file}\", \"#{path}/#{file}\"\n \n-  # Public: Run the creator process.\n-  #\n-  # Setup a ready to deploy folder that uses the hubot npm package\n-  # Overwriting basic hubot files if they exist\n-  #\n-  # Returns nothing.\n   run: ->\n     console.log \"Creating a hubot install at #{@path}\"\n ", "changes": 27}, {"status": "modified", "deletions": 21, "raw_url": "https://github.com/hubotio/hubot/raw/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6", "filename": "src/listener.coffee", "sha": "8f0fde5da13916457b4a385bdc6ebe5646b68eef", "additions": 0, "patch": "@@ -3,22 +3,8 @@\n inspect = require('util').inspect;\n \n class Listener\n-  # Listeners receive every message from the chat source and decide if they\n-  # want to act on it.\n-  #\n-  # robot    - A Robot instance.\n-  # matcher  - A Function that determines if this listener should trigger the\n-  #            callback.\n-  # callback - A Function that is triggered if the incoming message matches.\n   constructor: (@robot, @matcher, @callback) ->\n \n-  # Public: Determines if the listener likes the content of the message. If\n-  # so, a Response built from the given Message is passed to the Listener\n-  # callback.\n-  #\n-  # message - A Message instance.\n-  #\n-  # Returns a boolean of whether the matcher matched.\n   call: (message) ->\n     if match = @matcher message\n       @robot.logger.debug \"Message '#{message}' matched regex /#{inspect @regex}/\" if @regex\n@@ -28,13 +14,6 @@ class Listener\n       false\n \n class TextListener extends Listener\n-  # TextListeners receive every message from the chat source and decide if they want\n-  # to act on it.\n-  #\n-  # robot    - A Robot instance.\n-  # regex    - A Regex that determines if this listener should trigger the\n-  #            callback.\n-  # callback - A Function that is triggered if the incoming message matches.\n   constructor: (@robot, @regex, @callback) ->\n     @matcher = (message) =>\n       if message instanceof TextMessage", "changes": 21}, {"status": "modified", "deletions": 34, "raw_url": "https://github.com/hubotio/hubot/raw/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6", "filename": "src/message.coffee", "sha": "34fc2c76379491000b1b059d1d987e68fff0566f", "additions": 0, "patch": "@@ -1,58 +1,24 @@\n class Message\n-  # Represents an incoming message from the chat.\n-  #\n-  # user - A User instance that sent the message.\n   constructor: (@user, @done = false) ->\n     @room = @user.room\n \n-  # Indicates that no other Listener should be called on this object\n-  #\n-  # Returns nothing.\n   finish: ->\n     @done = true\n \n class TextMessage extends Message\n-  # Represents an incoming message from the chat.\n-  #\n-  # user - A User instance that sent the message.\n-  # text - A String message.\n-  # id   - A String of the message ID.\n   constructor: (@user, @text, @id) ->\n     super @user\n \n-  # Determines if the message matches the given regex.\n-  #\n-  # regex - A Regex to check.\n-  #\n-  # Returns a Match object or null.\n   match: (regex) ->\n     @text.match regex\n \n-# Represents an incoming user entrance notification.\n-#\n-# user - A User instance for the user who entered.\n-# text - Always null.\n-# id   - A String of the message ID.\n class EnterMessage extends Message\n \n-# Represents an incoming user exit notification.\n-#\n-# user - A User instance for the user who left.\n-# text - Always null.\n-# id   - A String of the message ID.\n class LeaveMessage extends Message\n \n-# Represents an incoming topic change notification.\n-#\n-# user - A User instance for the user who changed the topic.\n-# text - A String of the new topic\n-# id   - A String of the message ID.\n class TopicMessage extends Message\n \n class CatchAllMessage extends Message\n-  # Represents a message that no matchers matched.\n-  #\n-  # message - The original message.\n   constructor: (@message) ->\n \n module.exports = {", "changes": 34}, {"status": "modified", "deletions": 45, "raw_url": "https://github.com/hubotio/hubot/raw/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6", "filename": "src/response.coffee", "sha": "bb8753d2aa9acfaa6d95598702d2efa57eeb5883", "additions": 0, "patch": "@@ -1,73 +1,28 @@\n class Response\n-  # Public: Responses are sent to matching listeners. Messages know about the\n-  # content and user that made the original message, and how to reply back to\n-  # them.\n-  #\n-  # robot   - A Robot instance.\n-  # message - A Message instance.\n-  # match   - A Match object from the successful Regex match.\n   constructor: (@robot, @message, @match) ->\n     @envelope =\n       room: @message.room\n       user: @message.user\n       message: @message\n \n-  # Public: Posts a message back to the chat source\n-  #\n-  # strings - One or more strings to be posted. The order of these strings\n-  #           should be kept intact.\n-  #\n-  # Returns nothing.\n   send: (strings...) ->\n     @robot.adapter.send @envelope, strings...\n \n-  # Public: Posts a message mentioning the current user.\n-  #\n-  # strings - One or more strings to be posted. The order of these strings\n-  #           should be kept intact.\n-  #\n-  # Returns nothing.\n   reply: (strings...) ->\n     @robot.adapter.reply @envelope, strings...\n \n-  # Public: Posts a topic changing message\n-  #\n-  # strings - One or more strings to set as the topic of the\n-  #           room the bot is in.\n-  #\n-  # Returns nothing.\n   topic: (strings...) ->\n     @robot.adapter.topic @envelope, strings...\n \n-  # Public: Play a sound in the chat source\n-  #\n-  # strings - One or more strings to be posted as sounds to play. The order of\n-  #           these strings should be kept intact.\n-  #\n-  # Returns nothing\n   play: (strings...) ->\n     @robot.adapter.play @envelope, strings...\n \n-  # Public: Picks a random item from the given items.\n-  #\n-  # items - An Array of items.\n-  #\n-  # Returns a random item.\n   random: (items) ->\n     items[ Math.floor(Math.random() * items.length) ]\n \n-  # Public: Tell the message to stop dispatching to listeners\n-  #\n-  # Returns nothing.\n   finish: ->\n     @message.finish()\n \n-  # Public: Creates a scoped http client with chainable methods for\n-  # modifying the request. This doesn't actually make a request though.\n-  # Once your request is assembled, you can call `get()`/`post()`/etc to\n-  # send the request.\n-  #\n-  # Returns a ScopedClient instance.\n   http: (url) ->\n     @robot.http(url)\n ", "changes": 45}, {"status": "modified", "deletions": 170, "raw_url": "https://github.com/hubotio/hubot/raw/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6", "filename": "src/robot.coffee", "sha": "d856cb9ba71b1efc20201cf28cbeae3dde36bdc5", "additions": 27, "patch": "@@ -27,17 +27,10 @@ HUBOT_DOCUMENTATION_SECTIONS = [\n ]\n \n class Robot\n-  # Robots receive messages from a chat source (Campfire, irc, etc), and\n-  # dispatch them to matching listeners.\n-  #\n-  # adapterPath - A String of the path to local adapters.\n-  # adapter     - A String of the adapter name.\n-  # httpd       - A Boolean whether to enable the HTTP daemon.\n-  # name        - A String of the robot name, defaults to Hubot.\n   constructor: (adapterPath, adapter, httpd, name = 'Hubot') ->\n     @name         = name\n     @brain        = new Brain\n-    @events      = new EventEmitter\n+    @events       = new EventEmitter\n     @alias        = false\n     @adapter      = null\n     @Response     = Response\n@@ -49,24 +42,9 @@ class Robot\n     @setupConnect() if httpd\n     @loadAdapter adapterPath, adapter if adapter?\n \n-  # Public: Adds a Listener that attempts to match incoming messages based on\n-  # a Regex.\n-  #\n-  # regex    - A Regex that determines if the callback should be called.\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n   hear: (regex, callback) ->\n     @listeners.push new TextListener(@, regex, callback)\n \n-  # Public: Adds a Listener that attempts to match incoming messages directed\n-  # at the robot based on a Regex. All regexes treat patterns like they begin\n-  # with a '^'\n-  #\n-  # regex    - A Regex that determines if the callback should be called.\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n   respond: (regex, callback) ->\n     re = regex.toString().split('/')\n     re.shift()           # remove empty first item\n@@ -79,55 +57,47 @@ class Robot\n     pattern = re.join('/') # combine the pattern back again\n \n     if @alias\n-      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&') # escape alias for regexp\n-      newRegex = new RegExp(\"^[@]?(?:#{alias}[:,]?|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n+      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+      newRegex = new RegExp(\n+        \"^[@]?(?:#{alias}[:,]?|#{@name}[:,]?)\\\\s*(?:#{pattern})\",\n+        modifiers\n+      )\n     else\n-      newRegex = new RegExp(\"^[@]?#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n+      newRegex = new RegExp(\n+        \"^[@]?#{@name}[:,]?\\\\s*(?:#{pattern})\",\n+        modifiers\n+      )\n \n     @listeners.push new TextListener(@, newRegex, callback)\n \n-  # Public: Adds a Listener that triggers when anyone enters the room.\n-  #\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n   enter: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof EnterMessage), callback)\n+    @listeners.push new Listener(\n+      @,\n+      ((msg) -> msg instanceof EnterMessage),\n+      callback\n+    )\n \n-  # Public: Adds a Listener that triggers when anyone leaves the room.\n-  #\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n   leave: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof LeaveMessage), callback)\n+    @listeners.push new Listener(\n+      @,\n+      ((msg) -> msg instanceof LeaveMessage),\n+      callback\n+    )\n \n-  # Public: Adds a Listener that triggers when anyone changes the topic.\n-  #\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n   topic: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof TopicMessage), callback)\n+    @listeners.push new Listener(\n+      @,\n+      ((msg) -> msg instanceof TopicMessage),\n+      callback\n+    )\n \n-  # Public: Adds a Listener that triggers when no other text matchers match.\n-  #\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n   catchAll: (callback) ->\n     @listeners.push new Listener(\n       @,\n       ((msg) -> msg instanceof CatchAllMessage),\n       ((msg) -> msg.message = msg.message.message; callback msg)\n     )\n \n-  # Public: Passes the given message to any interested Listeners.\n-  #\n-  # message - A Message instance. Listeners can flag this message as 'done' to\n-  #           prevent further execution.\n-  #\n-  # Returns nothing.\n   receive: (message) ->\n     results = []\n     for listener in @listeners\n@@ -140,12 +110,6 @@ class Robot\n     if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n       @receive new CatchAllMessage(message)\n \n-  # Public: Loads a file in path.\n-  #\n-  # path - A String path on the filesystem.\n-  # file - A String filename in path on the filesystem.\n-  #\n-  # Returns nothing.\n   loadFile: (path, file) ->\n     ext  = Path.extname file\n     full = Path.join path, Path.basename(file, ext)\n@@ -157,35 +121,18 @@ class Robot\n         @logger.error \"Unable to load #{full}: #{error.stack}\"\n         process.exit(1)\n \n-  # Public: Loads every script in the given path.\n-  #\n-  # path - A String path on the filesystem.\n-  #\n-  # Returns nothing.\n   load: (path) ->\n     @logger.debug \"Loading scripts from #{path}\"\n     Fs.exists path, (exists) =>\n       if exists\n         for file in Fs.readdirSync(path)\n           @loadFile path, file\n \n-  # Public: Load scripts specfied in the `hubot-scripts.json` file.\n-  #\n-  # path    - A String path to the hubot-scripts files.\n-  # scripts - An Array of scripts to load.\n-  #\n-  # Returns nothing.\n   loadHubotScripts: (path, scripts) ->\n     @logger.debug \"Loading hubot-scripts from #{path}\"\n     for script in scripts\n       @loadFile path, script\n \n-  # Public: Load scripts from packages specfied in the\n-  # `external-scripts.json` file.\n-  #\n-  # packages - An Array of packages containing hubot scripts to load.\n-  #\n-  # Returns nothing.\n   loadExternalScripts: (packages) ->\n     @logger.debug \"Loading external-scripts from npm packages\"\n     for pkg in packages\n@@ -195,9 +142,6 @@ class Robot\n         @logger.error \"Error loading scripts from npm package - #{error}\"\n         process.exit(1)\n \n-  # Setup the Connect server's defaults.\n-  #\n-  # Returns nothing.\n   setupConnect: ->\n     user = process.env.CONNECT_USER\n     pass = process.env.CONNECT_PASSWORD\n@@ -242,12 +186,6 @@ class Robot\n             @logger.info 'keep alive ping!'\n       , 1200000\n \n-  # Load the adapter Hubot is going to use.\n-  #\n-  # path    - A String of the path to adapter if local.\n-  # adapter - A String of the adapter name to use.\n-  #\n-  # Returns nothing.\n   loadAdapter: (path, adapter) ->\n     @logger.debug \"Loading adapter #{adapter}\"\n \n@@ -262,17 +200,9 @@ class Robot\n       @logger.error \"Cannot load adapter #{adapter} - #{err}\"\n       process.exit(1)\n \n-  # Public: Help Commands for Running Scripts.\n-  #\n-  # Returns an Array of help commands for running scripts.\n   helpCommands: ->\n     @commands.sort()\n \n-  # Private: load help info from a loaded script.\n-  #\n-  # path - A String path to the file on disk.\n-  #\n-  # Returns nothing.\n   parseHelp: (path) ->\n     @logger.debug \"Parsing help for #{path}\"\n     scriptName = Path.basename(path).replace /\\.(coffee|js)$/, ''\n@@ -310,107 +240,34 @@ class Robot\n           scriptDocumentation.commands.push cleanedLine\n           @commands.push cleanedLine\n \n-  # Public: A helper send function which delegates to the adapter's send\n-  # function.\n-  #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n   send: (user, strings...) ->\n     @adapter.send user, strings...\n \n-  # Public: A helper reply function which delegates to the adapter's reply\n-  # function.\n-  #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n   reply: (user, strings...) ->\n     @adapter.reply user, strings...\n \n-  # Public: A helper send function to message a room that the robot is in.\n-  #\n-  # room    - String designating the room to message.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n   messageRoom: (room, strings...) ->\n     user = { room: room }\n     @adapter.send user, strings...\n \n-  # Public: A wrapper around the EventEmitter API to make usage \n-  # semanticly better.\n-  #\n-  # event    - The event name.\n-  # listener - A Function that is called with the event parameter\n-  #            when event happens.\n-  #\n-  # Returns nothing.\n   on: (event, args...) ->\n     @events.on event, args...\n \n-  # Public: A wrapper around the EventEmitter API to make usage \n-  # semanticly better.\n-  #\n-  # event   - The event name.\n-  # args...  - Arguments emitted by the event\n-  #\n-  # Returns nothing.\n   emit: (event, args...) ->\n     @events.emit event, args...\n \n-  # Public: Kick off the event loop for the adapter\n-  #\n-  # Returns nothing.\n   run: ->\n     @adapter.run()\n \n-  # Public: Gracefully shutdown the robot process\n-  #\n-  # Returns nothing.\n   shutdown: ->\n     @adapter.close()\n     @brain.close()\n \n-  # Public: The version of Hubot from npm\n-  #\n-  # Returns a String of the version number.\n   parseVersion: ->\n     package_path = Path.join __dirname, '..', 'package.json'\n     data = Fs.readFileSync package_path, 'utf8'\n-    content = JSON.parse data\n-    @version = content.version\n-\n-  # Public: Creates a scoped http client with chainable methods for\n-  # modifying the request. This doesn't actually make a request though.\n-  # Once your request is assembled, you can call `get()`/`post()`/etc to\n-  # send the request.\n-  #\n-  # url - String URL to access.\n-  #\n-  # Examples:\n-  #\n-  #     res.http(\"http://example.com\")\n-  #       # set a single header\n-  #       .header('Authorization', 'bearer abcdef')\n-  #\n-  #       # set multiple headers\n-  #       .headers(Authorization: 'bearer abcdef', Accept: 'application/json')\n-  #\n-  #       # add URI query parameters\n-  #       .query(a: 1, b: 'foo & bar')\n-  #\n-  #       # make the actual request\n-  #       .get() (err, res, body) ->\n-  #         console.log body\n-  #\n-  #       # or, you can POST data\n-  #       .post(data) (err, res, body) ->\n-  #         console.log body\n-  #\n-  # Returns a ScopedClient instance.\n+    @version = JSON.parse(data).version\n+\n   http: (url) ->\n     HttpClient.create(url)\n ", "changes": 197}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/user.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6/src/user.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/user.coffee?ref=d3ca392cdc181f0b7d0b999f38f48c69f6fa69a6", "filename": "src/user.coffee", "sha": "26325f995462227e5e3b9e4c65e28039e0ea1db5", "additions": 0, "patch": "@@ -1,8 +1,4 @@\n class User\n-  # Represents a participating user in the chat.\n-  #\n-  # id      - A unique ID for the user.\n-  # options - An optional Hash of key, value pairs for this user.\n   constructor: (@id, options = {}) ->\n     for k of (options or {})\n       @[k] = options[k]", "changes": 4}], "435": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/085c9a5d96190615707841742f5a0d8f7fc5f8f9/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/085c9a5d96190615707841742f5a0d8f7fc5f8f9/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=085c9a5d96190615707841742f5a0d8f7fc5f8f9", "filename": "src/robot.coffee", "sha": "133ba7168ca374a0512b1adeb01d3a0d2f121237", "additions": 1, "patch": "@@ -209,6 +209,7 @@ class Robot\n     @connect = Connect()\n \n     @connect.use Connect.basicAuth(user, pass) if user and pass\n+    @connect.use Connect.query()\n     @connect.use Connect.bodyParser()\n     @connect.use Connect.static(stat) if stat\n     @connect.use Connect.router (app) =>", "changes": 1}], "436": [{"status": "modified", "deletions": 31, "raw_url": "https://github.com/hubotio/hubot/raw/a6d32b7251dc7441ac47fd712f48b1e673a6685c/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a6d32b7251dc7441ac47fd712f48b1e673a6685c/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=a6d32b7251dc7441ac47fd712f48b1e673a6685c", "filename": "src/adapters/campfire.coffee", "sha": "c30c8f3be69c82ff982543d72e17c47cd42fac5d", "additions": 45, "patch": "@@ -34,30 +34,38 @@ class Campfire extends Adapter\n \n     bot = new CampfireStreaming(options, @robot)\n \n-    withAuthor = (callback) -> (id, created, room, user, body) ->\n-      bot.User user, (err, userData) ->\n-        if userData.user\n-          author = self.userForId(userData.user.id, userData.user)\n-          self.robot.brain.data.users[userData.user.id].name = userData.user.name\n-          self.robot.brain.data.users[userData.user.id].email_address = userData.user.email_address\n-          author.room = room\n-          callback id, created, room, user, body, author\n-\n-    bot.on \"TextMessage\", withAuthor (id, created, room, user, body, author) ->\n-      unless bot.info.id == author.id\n-        self.receive new TextMessage(author, body, id)\n-\n-    bot.on \"EnterMessage\", withAuthor (id, created, room, user, body, author) ->\n-      unless bot.info.id == author.id\n-        self.receive new EnterMessage(author, null, id)\n-\n-    bot.on \"LeaveMessage\", withAuthor (id, created, room, user, body, author) ->\n-      unless bot.info.id == author.id\n-        self.receive new LeaveMessage(author, null, id)\n-\n-    bot.on \"TopicChangeMessage\", withAuthor (id, created, room, user, body, author) ->\n-      unless bot.info.id == author.id\n-        self.receive new TopicMessage(author, body, id)\n+    withAuthor = (callback) ->\n+      (id, created, room, user, body) ->\n+        bot.User user, (err, userData) ->\n+          if userData.user\n+            author = self.userForId(userData.user.id, userData.user)\n+            userId = userData.user.id\n+            self.robot.brain.data\n+              .users[userId].name = userData.user.name\n+            self.robot.brain.data\n+              .users[userId].email_address = userData.user.email_address\n+            author.room = room\n+            callback id, created, room, user, body, author\n+\n+    bot.on \"TextMessage\",\n+      withAuthor (id, created, room, user, body, author) ->\n+        unless bot.info.id is author.id\n+          self.receive new TextMessage author, body, id\n+\n+    bot.on \"EnterMessage\",\n+      withAuthor (id, created, room, user, body, author) ->\n+        unless bot.info.id is author.id\n+          self.receive new EnterMessage author, null, id\n+\n+    bot.on \"LeaveMessage\",\n+      withAuthor (id, created, room, user, body, author) ->\n+        unless bot.info.id is author.id\n+          self.receive new LeaveMessage author, null, id\n+\n+    bot.on \"TopicChangeMessage\",\n+      withAuthor (id, created, room, user, body, author) ->\n+        unless bot.info.id is author.id\n+          self.receive new TopicMessage author, body, id\n \n     bot.Me (err, data) ->\n       bot.info = data.user\n@@ -82,7 +90,8 @@ exports.use = (robot) ->\n class CampfireStreaming extends EventEmitter\n   constructor: (options, @robot) ->\n     unless options.token? and options.rooms? and options.account?\n-      @robot.logger.error \"Not enough parameters provided. I need a token, rooms and account\"\n+      @robot.logger.error \\\n+        \"Not enough parameters provided. I need a token, rooms and account\"\n       process.exit(1)\n \n     @token         = options.token\n@@ -162,7 +171,6 @@ class CampfireStreaming extends EventEmitter\n             # campfire api sends a ' ' heartbeat every 3s\n \n           else if chunk.match(/^\\s*Access Denied/)\n-            # errors are not json formatted\n             logger.error \"Campfire error on room #{id}: #{chunk}\"\n \n           else\n@@ -177,15 +185,22 @@ class CampfireStreaming extends EventEmitter\n               if part\n                 try\n                   data = JSON.parse part\n-                  self.emit data.type, data.id, data.created_at, data.room_id, data.user_id, data.body\n+                  self.emit(\n+                    data.type,\n+                    data.id,\n+                    data.created_at,\n+                    data.room_id,\n+                    data.user_id,\n+                    data.body\n+                  )\n                 catch error\n                   logger.error \"Campfire error: #{error}\\n#{error.stack}\"\n \n         response.on \"end\", ->\n           logger.error \"Streaming connection closed for room #{id}. :(\"\n-          setTimeout (->\n+          setTimeout ->\n             self.emit \"reconnect\", id\n-          ), 5000\n+          , 5000\n \n         response.on \"error\", (err) ->\n           logger.error \"Campfire response error: #{err}\"\n@@ -195,7 +210,6 @@ class CampfireStreaming extends EventEmitter\n \n       request.end()\n \n-  # Convenience HTTP Methods for posting on behalf of the token\"d user\n   get: (path, callback) ->\n     @request \"GET\", path, null, callback\n \n@@ -238,7 +252,7 @@ class CampfireStreaming extends EventEmitter\n         if response.statusCode >= 400\n           switch response.statusCode\n             when 401\n-              throw new Error \"Invalid access token provided, campfire refused the authentication\"\n+              throw new Error \"Invalid access token provided\"\n             else\n               logger.error \"Campfire error: #{response.statusCode}\"\n ", "changes": 76}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/a6d32b7251dc7441ac47fd712f48b1e673a6685c/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a6d32b7251dc7441ac47fd712f48b1e673a6685c/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=a6d32b7251dc7441ac47fd712f48b1e673a6685c", "filename": "src/brain.coffee", "sha": "bdbdfeb31875af86887fc3a3a9c1709658ac0873", "additions": 2, "patch": "@@ -2,7 +2,6 @@\n \n User = require './user'\n \n-# http://www.the-isb.com/images/Nextwave-Aaron01.jpg\n class Brain extends EventEmitter\n   # Represents somewhat persistent storage for the robot. Extend this.\n   #\n@@ -11,7 +10,8 @@ class Brain extends EventEmitter\n     @data = users: { }\n     @resetSaveInterval 5\n \n-  # Public: Emits the 'save' event so that 'brain' scripts can handle persisting.\n+  # Public: Emits the 'save' event so that 'brain' scripts can handle\n+  # persisting.\n   #\n   # Returns nothing.\n   save: ->", "changes": 4}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/a6d32b7251dc7441ac47fd712f48b1e673a6685c/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a6d32b7251dc7441ac47fd712f48b1e673a6685c/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=a6d32b7251dc7441ac47fd712f48b1e673a6685c", "filename": "src/listener.coffee", "sha": "74e9b10eba434a1f3ef5df12a41cf1c501f05ed7", "additions": 7, "patch": "@@ -1,6 +1,6 @@\n-{TextMessage} = require './message'\n+{inspect} = require 'util'\n \n-inspect = require('util').inspect;\n+{TextMessage} = require './message'\n \n class Listener\n   # Listeners receive every message from the chat source and decide if they\n@@ -21,15 +21,17 @@ class Listener\n   # Returns a boolean of whether the matcher matched.\n   call: (message) ->\n     if match = @matcher message\n-      @robot.logger.debug \"Message '#{message}' matched regex /#{inspect @regex}/\" if @regex\n+      @robot.logger.debug \\\n+        \"Message '#{message}' matched regex /#{inspect @regex}/\" if @regex\n+\n       @callback new @robot.Response(@robot, message, match)\n       true\n     else\n       false\n \n class TextListener extends Listener\n-  # TextListeners receive every message from the chat source and decide if they want\n-  # to act on it.\n+  # TextListeners receive every message from the chat source and decide if they\n+  # want to act on it.\n   #\n   # robot    - A Robot instance.\n   # regex    - A Regex that determines if this listener should trigger the", "changes": 12}, {"status": "modified", "deletions": 38, "raw_url": "https://github.com/hubotio/hubot/raw/a6d32b7251dc7441ac47fd712f48b1e673a6685c/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a6d32b7251dc7441ac47fd712f48b1e673a6685c/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=a6d32b7251dc7441ac47fd712f48b1e673a6685c", "filename": "src/robot.coffee", "sha": "d388aa9e76b309b4d24fa29f9093c2662ec36ef0", "additions": 58, "patch": "@@ -4,25 +4,25 @@ Path           = require 'path'\n HttpClient     = require 'scoped-http-client'\n {EventEmitter} = require 'events'\n \n-User                                                    = require './user'\n-Brain                                                   = require './brain'\n-Response                                                = require './response'\n-{Listener,TextListener}                                 = require './listener'\n-{TextMessage,EnterMessage,LeaveMessage,CatchAllMessage} = require './message'\n+User                                        = require './user'\n+Brain                                       = require './brain'\n+Response                                    = require './response'\n+{Listener,TextListener}                     = require './listener'\n+{EnterMessage,LeaveMessage,CatchAllMessage} = require './message'\n \n HUBOT_DEFAULT_ADAPTERS = [\n-  'campfire',\n+  'campfire'\n   'shell'\n ]\n \n HUBOT_DOCUMENTATION_SECTIONS = [\n-  'description',\n-  'dependencies',\n-  'configuration',\n-  'commands',\n-  'notes',\n-  'author',\n-  'examples',\n+  'description'\n+  'dependencies'\n+  'configuration'\n+  'commands'\n+  'notes'\n+  'author'\n+  'examples'\n   'urls'\n ]\n \n@@ -34,20 +34,22 @@ class Robot\n   # adapter     - A String of the adapter name.\n   # httpd       - A Boolean whether to enable the HTTP daemon.\n   # name        - A String of the robot name, defaults to Hubot.\n+  #\n+  # Returns nothing.\n   constructor: (adapterPath, adapter, httpd, name = 'Hubot') ->\n-    @name         = name\n-    @brain        = new Brain\n-    @events      = new EventEmitter\n-    @alias        = false\n-    @adapter      = null\n-    @Response     = Response\n-    @commands     = []\n-    @listeners    = []\n-    @logger       = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n+    @name      = name\n+    @brain     = new Brain\n+    @events    = new EventEmitter\n+    @alias     = false\n+    @adapter   = null\n+    @Response  = Response\n+    @commands  = []\n+    @listeners = []\n+    @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n \n     @parseVersion()\n     @setupConnect() if httpd\n-    @loadAdapter adapterPath, adapter if adapter?\n+    @loadAdapter adapterPath, adapter\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n@@ -69,20 +71,27 @@ class Robot\n   # Returns nothing.\n   respond: (regex, callback) ->\n     re = regex.toString().split('/')\n-    re.shift()           # remove empty first item\n-    modifiers = re.pop() # pop off modifiers\n+    re.shift()\n+    modifiers = re.pop()\n \n     if re[0] and re[0][0] is '^'\n-      @logger.warning \"Anchors don't work well with respond, perhaps you want to use 'hear'\"\n+      @logger.warning \\\n+        \"Anchors don't work well with respond, perhaps you want to use 'hear'\"\n       @logger.warning \"The regex in question was #{regex.toString()}\"\n \n-    pattern = re.join('/') # combine the pattern back again\n+    pattern = re.join('/')\n \n     if @alias\n-      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&') # escape alias for regexp\n-      newRegex = new RegExp(\"^[@]?(?:#{alias}[:,]?|#{@name}[:,]?)\\\\s*(?:#{pattern})\", modifiers)\n+      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+      newRegex = new RegExp(\n+        \"^[@]?(?:#{alias}[:,]?|#{@name}[:,]?)\\\\s*(?:#{pattern})\"\n+        modifiers\n+      )\n     else\n-      newRegex = new RegExp(\"^[@]?#{@name}[:,]?\\\\s*(?:#{pattern})\", modifiers)\n+      newRegex = new RegExp(\n+        \"^[@]?#{@name}[:,]?\\\\s*(?:#{pattern})\",\n+        modifiers\n+      )\n \n     @listeners.push new TextListener(@, newRegex, callback)\n \n@@ -92,23 +101,35 @@ class Robot\n   #\n   # Returns nothing.\n   enter: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof EnterMessage), callback)\n+    @listeners.push new Listener(\n+      @,\n+      ((msg) -> msg instanceof EnterMessage),\n+      callback\n+    )\n \n   # Public: Adds a Listener that triggers when anyone leaves the room.\n   #\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n   leave: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof LeaveMessage), callback)\n+    @listeners.push new Listener(\n+      @,\n+      ((msg) -> msg instanceof LeaveMessage),\n+      callback\n+    )\n \n   # Public: Adds a Listener that triggers when anyone changes the topic.\n   #\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n   topic: (callback) ->\n-    @listeners.push new Listener(@, ((msg) -> msg instanceof TopicMessage), callback)\n+    @listeners.push new Listener(\n+      @,\n+      ((msg) -> msg instanceof TopicMessage),\n+      callback\n+    )\n \n   # Public: Adds a Listener that triggers when no other text matchers match.\n   #\n@@ -237,9 +258,8 @@ class Robot\n     if herokuUrl\n       herokuUrl += '/' unless /\\/$/.test herokuUrl\n       setInterval =>\n-        HttpClient.create(\"#{herokuUrl}hubot/ping\")\n-          .post() (err, res, body) =>\n-            @logger.info 'keep alive ping!'\n+        HttpClient.create(\"#{herokuUrl}hubot/ping\").post() (err, res, body) =>\n+          @logger.info 'keep alive ping!'\n       , 1200000\n \n   # Load the adapter Hubot is going to use.\n@@ -340,7 +360,7 @@ class Robot\n     user = { room: room }\n     @adapter.send user, strings...\n \n-  # Public: A wrapper around the EventEmitter API to make usage \n+  # Public: A wrapper around the EventEmitter API to make usage\n   # semanticly better.\n   #\n   # event    - The event name.\n@@ -351,7 +371,7 @@ class Robot\n   on: (event, args...) ->\n     @events.on event, args...\n \n-  # Public: A wrapper around the EventEmitter API to make usage \n+  # Public: A wrapper around the EventEmitter API to make usage\n   # semanticly better.\n   #\n   # event   - The event name.", "changes": 96}], "438": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8fe33469043b06f8ae3482713ce2a0ffcd040238/src/templates/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/8fe33469043b06f8ae3482713ce2a0ffcd040238/src/templates/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/package.json?ref=8fe33469043b06f8ae3482713ce2a0ffcd040238", "filename": "src/templates/package.json", "sha": "b0bae2538de1d63db5ccaa3a897335054afab47f", "additions": 1, "patch": "@@ -21,7 +21,7 @@\n   },\n \n   \"engines\": {\n-    \"node\": \">= 0.8.x\",\n+    \"node\": \"0.8.x\",\n     \"npm\": \"1.1.x\"\n   }\n }", "changes": 2}], "445": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6156e55df18cb7454c33e7be456460b9acf30aa8/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/6156e55df18cb7454c33e7be456460b9acf30aa8/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=6156e55df18cb7454c33e7be456460b9acf30aa8", "filename": "src/scripts/help.coffee", "sha": "8ea3f95e50403c02d2ec0e64914b6ea988fc118e", "additions": 1, "patch": "@@ -65,7 +65,7 @@ module.exports = (robot) ->\n \n     msg.send emit\n \n-  robot.router.get '/hubot/help', (req, res) ->\n+  robot.router.get '/#{robot.name}/help', (req, res) ->\n     cmds = robot.helpCommands().map (cmd) ->\n       cmd.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')\n ", "changes": 2}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/6156e55df18cb7454c33e7be456460b9acf30aa8/src/scripts/httpd.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/6156e55df18cb7454c33e7be456460b9acf30aa8/src/scripts/httpd.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/httpd.coffee?ref=6156e55df18cb7454c33e7be456460b9acf30aa8", "filename": "src/scripts/httpd.coffee", "sha": "15a891532e320ea17dbb94055e17af965aefa4ce", "additions": 5, "patch": "@@ -21,22 +21,22 @@ spawn = require('child_process').spawn\n \n module.exports = (robot) ->\n \n-  robot.router.get \"/hubot/version\", (req, res) ->\n+  robot.router.get \"/#{robot.name}/version\", (req, res) ->\n     res.end robot.version\n \n-  robot.router.post \"/hubot/ping\", (req, res) ->\n+  robot.router.post \"/#{robot.name}/ping\", (req, res) ->\n     res.end \"PONG\"\n \n-  robot.router.get \"/hubot/time\", (req, res) ->\n+  robot.router.get \"/#{robot.name}/time\", (req, res) ->\n     res.end \"Server time is: #{new Date()}\"\n \n-  robot.router.get \"/hubot/info\", (req, res) ->\n+  robot.router.get \"/#{robot.name}/info\", (req, res) ->\n     child = spawn('/bin/sh', ['-c', \"echo I\\\\'m $LOGNAME@$(hostname):$(pwd) \\\\($(git rev-parse HEAD)\\\\)\"])\n \n     child.stdout.on 'data', (data) ->\n       res.end \"#{data.toString().trim()} running node #{process.version} [pid: #{process.pid}]\"\n       child.stdin.end()\n \n-  robot.router.get \"/hubot/ip\", (req, res) ->\n+  robot.router.get \"/#{robot.name}/ip\", (req, res) ->\n     robot.http('http://ifconfig.me/ip').get() (err, r, body) ->\n       res.end body", "changes": 10}], "446": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/b2c016949406b15ebd5b7df7cf31a9730d2748eb/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/b2c016949406b15ebd5b7df7cf31a9730d2748eb/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=b2c016949406b15ebd5b7df7cf31a9730d2748eb", "filename": "README.md", "sha": "335e3ed8de753a945381e6f3ef805a106f65f1be", "additions": 12, "patch": "@@ -102,9 +102,19 @@ module.exports = (robot) ->\n There are functions for GET, POST, PUT and DELETE, which all take a route and\n callback function that accepts a request and a response.\n \n-In addition, if you set `CONNECT_STATIC`, the HTTP listener will serve static\n+In addition, if you set `EXPRESS_STATIC`, the HTTP listener will serve static\n files from this directory.\n \n+Also, set `EXPRESS_SOCKETS` to true to setup sokect.io; you can configure it in your scripts using the `io` property on `robot`.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  io = robot.router.io\n+  io.sockets.on 'connection', (socket) ->\n+    socket.emit 'news', hello: 'world'\n+    socket.on 'event', (data) -> console.log data\n+```\n+\n ## Events\n \n Hubot has also an node.js [EventEmitter][event-emitter] attached. It can be used\n@@ -132,4 +142,4 @@ module.exports = (robot) ->\n If you'll provide an event, it's very recommended to include a hubot user object\n in data. In case of other reacting scripts want to respond to chat.\n \n-[event-emitter]: http://nodejs.org/api/events.html#events_class_events_eventemitter \n+[event-emitter]: http://nodejs.org/api/events.html#events_class_events_eventemitter", "changes": 14}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/b2c016949406b15ebd5b7df7cf31a9730d2748eb/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/b2c016949406b15ebd5b7df7cf31a9730d2748eb/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=b2c016949406b15ebd5b7df7cf31a9730d2748eb", "filename": "package.json", "sha": "bad727f7e18ef031f27262a1699ac490b213bd66", "additions": 2, "patch": "@@ -22,8 +22,8 @@\n     \"optparse\":           \"1.0.4\",\n     \"scoped-http-client\": \"0.9.8\",\n     \"log\":                \"1.3.1\",\n-    \"connect\":            \"2.7.3\",\n-    \"connect_router\":     \"1.8.7\"\n+    \"express\":            \"3.1.0\",\n+    \"socket.io\":          \"0.9.13\"\n   },\n \n   \"engines\": {", "changes": 4}, {"status": "modified", "deletions": 29, "raw_url": "https://github.com/hubotio/hubot/raw/b2c016949406b15ebd5b7df7cf31a9730d2748eb/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b2c016949406b15ebd5b7df7cf31a9730d2748eb/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=b2c016949406b15ebd5b7df7cf31a9730d2748eb", "filename": "src/robot.coffee", "sha": "dbc7476b076c2db74fc742ca0bc14fd41df42209", "additions": 23, "patch": "@@ -48,7 +48,7 @@ class Robot\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n \n     @parseVersion()\n-    @setupConnect() if httpd\n+    @setupExpress() if httpd\n     @loadAdapter adapterPath, adapter\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n@@ -216,43 +216,37 @@ class Robot\n         @logger.error \"Error loading scripts from npm package - #{error}\"\n         process.exit(1)\n \n-  # Setup the Connect server's defaults.\n+  # Setup the Express server's defaults.\n   #\n   # Returns nothing.\n-  setupConnect: ->\n-    user = process.env.CONNECT_USER\n-    pass = process.env.CONNECT_PASSWORD\n-    stat = process.env.CONNECT_STATIC\n+  setupExpress: ->\n+    # Load config.\n+    user    = process.env.EXPRESS_USER\n+    pass    = process.env.EXPRESS_PASSWORD\n \n-    Connect        = require 'connect'\n-    Connect.router = require 'connect_router'\n+    stat    = process.env.EXPRESS_STATIC\n+    sockets = process.env.EXPRESS_SOCKETS\n \n-    @connect = Connect()\n+    # Require express.\n+    express = require 'express'\n \n-    @connect.use Connect.basicAuth(user, pass) if user and pass\n-    @connect.use Connect.query()\n-    @connect.use Connect.bodyParser()\n-    @connect.use Connect.static(stat) if stat\n-    @connect.use Connect.router (app) =>\n+    # Initialize server and middleware.\n+    app = express()\n \n-      @router =\n-        get: (route, callback) =>\n-          @logger.debug \"Registered route: GET #{route}\"\n-          app.get route, callback\n+    app.use express.basicAuth user, pass if user and pass\n+    app.use express.query()\n+    app.use express.bodyParser()\n+    app.use express.static stat if stat\n \n-        post: (route, callback) =>\n-          @logger.debug \"Registered route: POST #{route}\"\n-          app.post route, callback\n+    # Listen to incoming requests.\n+    server = app.listen process.env.PORT || 8080\n \n-        put: (route, callback) =>\n-          @logger.debug \"Registered route: PUT #{route}\"\n-          app.put route, callback\n+    # Attach socket.io to server if predicate has been set.\n+    if sockets\n+      @io = (require 'socket.io').listen server\n \n-        delete: (route, callback) =>\n-          @logger.debug \"Registered route: DELETE #{route}\"\n-          app.delete route, callback\n-\n-    @server = @connect.listen process.env.PORT || 8080\n+    # Expose express app as router.\n+    @router = app\n \n     herokuUrl = process.env.HEROKU_URL\n ", "changes": 52}], "447": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8906f28d32bb3dbedd71637bbe7a99b8018e1785/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/8906f28d32bb3dbedd71637bbe7a99b8018e1785/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=8906f28d32bb3dbedd71637bbe7a99b8018e1785", "filename": "README.md", "sha": "00133a563b1faf8fd970aa8b8d35904f9139fd27", "additions": 44, "patch": "@@ -143,3 +143,47 @@ If you'll provide an event, it's very recommended to include a hubot user object\n in data. In case of other reacting scripts want to respond to chat.\n \n [event-emitter]: http://nodejs.org/api/events.html#events_class_events_eventemitter\n+\n+## Persistence\n+\n+Hubot also has an in-memory key-value store exposed as `robot.brain` that can be\n+used to store and retrieve data by scripts.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /have a beer/i, (msg) ->\n+    # Get number of beers had (coerced to a number).\n+    beersHad = (robot.brain.get 'totalBeers')*1 or 0\n+    \n+    if beersHad > 4\n+      msg.respond \"I'm too drunk..\"\n+    \n+    else\n+      msg.respond 'Sure!'\n+      \n+      robot.brain.set 'totalBeers', beersHad+1\n+      # Or robot.brain.set totalBeers: beersHad+1\n+      \n+```\n+\n+Look in [storage.coffee](src/scripts/storage.coffee) for more examples.\n+\n+You may also install the script `redis-brain.coffee`\n+(instructions [here](https://github.com/github/hubot-scripts/blob/master/src/scripts/redis-brain.coffee))\n+for persisting the key-value store in a redis database.\n+\n+If the script needs to store user data, `robot.brain` has a built-in interface for it.\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n+    name = msg.match[1].trim()\n+\n+    users = robot.brain.usersForFuzzyName(name)\n+    if users.length is 1\n+      user = users[0]\n+      # Do something interesting here..\n+\n+      msg.send \"#{ name } is user - #{ user }\"\n+```\n+\n+More examples in [roles.coffee](src/scripts/roles.coffee)", "changes": 44}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8906f28d32bb3dbedd71637bbe7a99b8018e1785/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8906f28d32bb3dbedd71637bbe7a99b8018e1785/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=8906f28d32bb3dbedd71637bbe7a99b8018e1785", "filename": "src/brain.coffee", "sha": "47d5c85af687b9cdf45b66a99388abf0b86438e9", "additions": 42, "patch": "@@ -7,9 +7,36 @@ class Brain extends EventEmitter\n   #\n   # Returns a new Brain with no external storage.\n   constructor: ->\n-    @data = users: { }\n+    @data =\n+      users:    { }\n+      _private: { }\n+      \n     @resetSaveInterval 5\n \n+  # Public: Store key-value pair under the private namespace and extend\n+  # existing @data before emitting the 'loaded' event.\n+  #\n+  # Returns the instance for chaining.\n+  set: (key, value) ->\n+    # Parse key if key is object.\n+    if isObject key\n+      pair = key\n+    else\n+      pair = {}\n+      pair[key] = value\n+\n+    # Store key-value pair.\n+    extend @data._private, pair\n+    @emit 'loaded', @data\n+\n+    @\n+\n+  # Public: Get value by key from the private namespace in @data\n+  # or return null if not found.\n+  #\n+  # Returns the value.\n+  get: (key) -> @data._private[key] ? null\n+  \n   # Public: Emits the 'save' event so that 'brain' scripts can handle\n   # persisting.\n   #\n@@ -105,5 +132,19 @@ class Brain extends EventEmitter\n       return [user] if user.name.toLowerCase() is lowerFuzzyName\n \n     matchedUsers\n+  \n+# Private: Extend obj with objects passed as additional args.\n+#\n+# Returns the original object with updated changes.\n+extend = (obj, sources...) ->\n+  for source in sources\n+    obj[key] = value for own key, value of source\n+\n+  obj\n+\n+# Private: Check if argument is an object.\n+#\n+# Returns true/false.\n+isObject = (obj) -> obj is Object obj\n \n module.exports = Brain", "changes": 43}], "448": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b202dccc2845acb7ea00881f91e94c6adf03bdd0/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b202dccc2845acb7ea00881f91e94c6adf03bdd0/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=b202dccc2845acb7ea00881f91e94c6adf03bdd0", "filename": "src/scripts/help.coffee", "sha": "980ea148a09a59991c5cfb5298da915867bc0980", "additions": 1, "patch": "@@ -65,7 +65,7 @@ module.exports = (robot) ->\n \n     msg.send emit\n \n-  robot.router.get '/#{robot.name}/help', (req, res) ->\n+  robot.router.get \"/#{robot.name}/help\", (req, res) ->\n     cmds = robot.helpCommands().map (cmd) ->\n       cmd.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')\n ", "changes": 2}], "449": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/94552fb2cbb13e70b43e736588e500349c89957a/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/94552fb2cbb13e70b43e736588e500349c89957a/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=94552fb2cbb13e70b43e736588e500349c89957a", "filename": "src/scripts/help.coffee", "sha": "980ea148a09a59991c5cfb5298da915867bc0980", "additions": 1, "patch": "@@ -65,7 +65,7 @@ module.exports = (robot) ->\n \n     msg.send emit\n \n-  robot.router.get '/#{robot.name}/help', (req, res) ->\n+  robot.router.get \"/#{robot.name}/help\", (req, res) ->\n     cmds = robot.helpCommands().map (cmd) ->\n       cmd.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')\n ", "changes": 2}], "450": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1e4a956180446324546dccc93495c91ab1e8797c/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/1e4a956180446324546dccc93495c91ab1e8797c/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=1e4a956180446324546dccc93495c91ab1e8797c", "filename": "package.json", "sha": "c46deaea3d0e662ae59faf94466e17dea23fca7c", "additions": 1, "patch": "@@ -22,7 +22,7 @@\n     \"optparse\":           \"1.0.4\",\n     \"scoped-http-client\": \"0.9.8\",\n     \"log\":                \"1.3.1\",\n-    \"express\":            \"3.1.0\",\n+    \"express\":            \"3.1.0\"\n   },\n \n   \"engines\": {", "changes": 2}], "451": [{"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/d133b4f4cd8eb317f3d9a28380a493da05a267ec/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d133b4f4cd8eb317f3d9a28380a493da05a267ec/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=d133b4f4cd8eb317f3d9a28380a493da05a267ec", "filename": "src/robot.coffee", "sha": "788cf715471f715053b1b062d78bdbe28ba7777d", "additions": 1, "patch": "@@ -239,11 +239,7 @@ class Robot\n     app.use express.static stat if stat\n \n     # Listen to incoming requests.\n-    server = app.listen process.env.PORT || 8080\n-\n-    # Attach socket.io to server if predicate has been set.\n-    if sockets\n-      @io = (require 'socket.io').listen server\n+    @server = app.listen process.env.PORT || 8080\n \n     # Expose express app as router.\n     @router = app", "changes": 6}], "452": [{"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/6c304a65e29bfe67575a3a6e2f928556945641a0/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/6c304a65e29bfe67575a3a6e2f928556945641a0/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=6c304a65e29bfe67575a3a6e2f928556945641a0", "filename": "README.md", "sha": "bf1143121554c80e5d8dad802b809d5e72409df6", "additions": 0, "patch": "@@ -105,16 +105,6 @@ callback function that accepts a request and a response.\n In addition, if you set `EXPRESS_STATIC`, the HTTP listener will serve static\n files from this directory.\n \n-Also, set `EXPRESS_SOCKETS` to true to setup sokect.io; you can configure it in your scripts using the `io` property on `robot`.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-  io = robot.router.io\n-  io.sockets.on 'connection', (socket) ->\n-    socket.emit 'news', hello: 'world'\n-    socket.on 'event', (data) -> console.log data\n-```\n-\n ## Events\n \n Hubot has also an node.js [EventEmitter][event-emitter] attached. It can be used", "changes": 10}], "454": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ba6205e82cd0fd351bdee06e114f43ad134af822/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ba6205e82cd0fd351bdee06e114f43ad134af822/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=ba6205e82cd0fd351bdee06e114f43ad134af822", "filename": "src/scripts/google-images.coffee", "sha": "8f4586ddd217c762ec654ac85bdc057134658670", "additions": 1, "patch": "@@ -31,7 +31,7 @@ imageMe = (msg, query, animated, faces, cb) ->\n   cb = animated if typeof animated == 'function'\n   cb = faces if typeof faces == 'function'\n   q = v: '1.0', rsz: '8', q: query, safe: 'active'\n-  q.as_filetype = 'gif' if typeof animated is 'boolean' and animated is true\n+  q.imgtype = 'animated' if typeof animated is 'boolean' and animated is true\n   q.imgtype = 'face' if typeof faces is 'boolean' and faces is true\n   msg.http('http://ajax.googleapis.com/ajax/services/search/images')\n     .query(q)", "changes": 2}], "455": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1540c1d9220ce29ad3756aa6c505322bf409546f/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1540c1d9220ce29ad3756aa6c505322bf409546f/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=1540c1d9220ce29ad3756aa6c505322bf409546f", "filename": "src/brain.coffee", "sha": "2f2e0879474d585f3ccd4578f6fac53aed6c084f", "additions": 7, "patch": "@@ -35,6 +35,13 @@ class Brain extends EventEmitter\n   get: (key) ->\n     @data._private[key] ? null\n   \n+  # Public: Remove value by key from the private namespace in @data\n+  # if it exists\n+  #\n+  # Returns the instance for chaining.\n+  remove: (key) ->\n+    delete @data._private[key] if @data._private[key]?\n+  \n   # Public: Emits the 'save' event so that 'brain' scripts can handle\n   # persisting.\n   #", "changes": 7}], "456": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b55d062e3a8a30b1401bae8ce93e0a946624073c/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/b55d062e3a8a30b1401bae8ce93e0a946624073c/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=b55d062e3a8a30b1401bae8ce93e0a946624073c", "filename": "src/templates/README.md", "sha": "d6e253552341546c8b64761b92312f3542cc5c3e", "additions": 1, "patch": "@@ -49,7 +49,7 @@ about redis at all.\n \n You can test your hubot by running the following.\n \n-    % bin/hubot\n+    % PATH=\"node_modules/.bin:$PATH\" bin/hubot\n \n You'll see some start up output about where your scripts come from and a\n prompt.", "changes": 2}], "457": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f9627011d7de6790180c0ef7d6be0874318100c5/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f9627011d7de6790180c0ef7d6be0874318100c5/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=f9627011d7de6790180c0ef7d6be0874318100c5", "filename": "src/brain.coffee", "sha": "321716fcd3cf0992658507ca38c27140e7d0e02a", "additions": 1, "patch": "@@ -41,6 +41,7 @@ class Brain extends EventEmitter\n   # Returns the instance for chaining.\n   remove: (key) ->\n     delete @data._private[key] if @data._private[key]?\n+    @\n   \n   # Public: Emits the 'save' event so that 'brain' scripts can handle\n   # persisting.", "changes": 1}], "458": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/96aa84c7ea87a0cd34f59fc5e75ad55a1ca67dd2/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/96aa84c7ea87a0cd34f59fc5e75ad55a1ca67dd2/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=96aa84c7ea87a0cd34f59fc5e75ad55a1ca67dd2", "filename": "README.md", "sha": "d3b6890d44acc317522dfc5dd88dd930f71633a0", "additions": 3, "patch": "@@ -4,10 +4,12 @@ This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n \n **You'll probably never have to hack on this repo directly.**\n \n-Instead this repo provides a library that's distributed by `npm` that you\n+Instead this repo provides a [hubot](https://npmjs.org/package/hubot) library that's distributed by `npm` that you\n simply require in your project. Follow the instructions below and get your own\n hubot ready to deploy.\n \n+    $ npm install hubot\n+\n ## Getting Your Own\n \n Make sure you have [node.js][nodejs] and [npm][npmjs] (npm comes with node", "changes": 4}], "459": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/59a7851b549f401c2c6dcf1ec2b34a4aec41d610/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/59a7851b549f401c2c6dcf1ec2b34a4aec41d610/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=59a7851b549f401c2c6dcf1ec2b34a4aec41d610", "filename": "README.md", "sha": "76e3612e6698445a698a9b5c368c38c7c425e44b", "additions": 7, "patch": "@@ -5,10 +5,15 @@ This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n **You'll probably never have to hack on this repo directly.**\n \n Instead this repo provides a [hubot](https://npmjs.org/package/hubot) library that's distributed by `npm` that you\n-simply require in your project. Follow the instructions below and get your own\n-hubot ready to deploy.\n+simply require in your project to satisfy dependencies. Example:\n \n+    $ git clone git@github.com:github/hubot.git\n+    $ cd hubot\n     $ npm install hubot\n+    $ export PATH=\"node_modules/.bin:$PATH\"\n+    $ bin/hubot\n+    \n+Follow the instructions below and get your own hubot ready to deploy.\n \n ## Getting Your Own\n ", "changes": 9}], "460": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/77a457181566aeafad5f596bdc002a7250b71d32/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/77a457181566aeafad5f596bdc002a7250b71d32/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=77a457181566aeafad5f596bdc002a7250b71d32", "filename": "src/scripts/roles.coffee", "sha": "89d049166e3ca3abde62edee8b9a2eb2c8901655", "additions": 1, "patch": "@@ -54,7 +54,7 @@ module.exports = (robot) ->\n             msg.send \"I know\"\n           else\n             user.roles.push(newRole)\n-            if name.toLowerCase() is robot.name\n+            if name.toLowerCase() is robot.name.toLowerCase()\n               msg.send \"Ok, I am #{newRole}.\"\n             else\n               msg.send \"Ok, #{name} is #{newRole}.\"", "changes": 2}], "462": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/996b517d798aa83fa59e80f182767d49f86b41e2/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/996b517d798aa83fa59e80f182767d49f86b41e2/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=996b517d798aa83fa59e80f182767d49f86b41e2", "filename": "src/creator.coffee", "sha": "c487a883946e8b76077e6c0f4e69e0d2e67e84fb", "additions": 9, "patch": "@@ -63,12 +63,19 @@ class Creator\n       \"package.json\",\n       \"README.md\",\n       \".gitignore\",\n-      \"bin/hubot\",\n-      \"bin/hubot.cmd\",\n       \"hubot-scripts.json\",\n       \"external-scripts.json\"\n     ]\n \n     @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\" for file in files\n \n+    bins = [\n+      \"bin/hubot\",\n+      \"bin/hubot.cmd\"\n+    ]\n+\n+    for bin in bins\n+      @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\"\n+      Fs.chmodSync \"#{@path}/#{file}\", 0o755\n+\n module.exports = Creator", "changes": 11}], "465": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/1ee406598ce60f14d0ace034193ac65527225c69/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1ee406598ce60f14d0ace034193ac65527225c69/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=1ee406598ce60f14d0ace034193ac65527225c69", "filename": "src/creator.coffee", "sha": "960a3490772da2d9e662d3b930f9df701e0ee28f", "additions": 2, "patch": "@@ -75,7 +75,7 @@ class Creator\n     ]\n \n     for bin in bins\n-      @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\"\n-      Fs.chmodSync \"#{@path}/#{file}\", 0o755\n+      @copy \"#{@templateDir}/#{bin}\", \"#{@path}/#{bin}\"\n+      Fs.chmodSync \"#{@path}/#{bin}\", 0o755\n \n module.exports = Creator", "changes": 4}], "466": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/b656287fe3eb74066aaf292f9ff110b14d539942/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b656287fe3eb74066aaf292f9ff110b14d539942/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=b656287fe3eb74066aaf292f9ff110b14d539942", "filename": "src/scripts/help.coffee", "sha": "debca06051f5a9abc9aa5540d93749199b4d9e2d", "additions": 3, "patch": "@@ -58,6 +58,9 @@ module.exports = (robot) ->\n       cmds = cmds.filter (cmd) ->\n         cmd.match new RegExp(msg.match[1], 'i')\n \n+      if cmds.length == 0\n+        msg.send \"No available commands match #{msg.match[1]}\"\n+        return\n     emit = cmds.join \"\\n\"\n \n     unless robot.name.toLowerCase() is 'hubot'", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/b656287fe3eb74066aaf292f9ff110b14d539942/src/scripts/pugme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b656287fe3eb74066aaf292f9ff110b14d539942/src/scripts/pugme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/pugme.coffee?ref=b656287fe3eb74066aaf292f9ff110b14d539942", "filename": "src/scripts/pugme.coffee", "sha": "6c6bfe1cd9e98120c2626ea0fe3ae2c658a5c4e2", "additions": 9, "patch": "@@ -1,6 +1,15 @@\n+# pug me - Receive a pug\n+# pug bomb N - get N pugs\n+\n # Description:\n #   Pugme is the most important thing in your life\n #\n+# Dependencies:\n+#   None\n+#\n+# Configuration:\n+#   None\n+#\n # Commands:\n #   hubot pug me - Receive a pug\n #   hubot pug bomb N - get N pugs", "changes": 9}], "467": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8adfecc23b76e9d843a6a73c2f06f50a96566b32/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8adfecc23b76e9d843a6a73c2f06f50a96566b32/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=8adfecc23b76e9d843a6a73c2f06f50a96566b32", "filename": "src/creator.coffee", "sha": "e42922a593815f89786a8027c7ca171c541f94b9", "additions": 1, "patch": "@@ -17,7 +17,7 @@ class Creator\n   mkdirDashP: (path) ->\n     Fs.exists path, (exists) ->\n       unless exists\n-        Fs.mkdir path, 0o0755, (err) ->\n+        Fs.mkdir path, 0755, (err) ->\n           throw err if err\n \n   # Copy the contents of a file from one place to another.", "changes": 2}], "469": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "package.json", "sha": "818d5966f8329d5b7c9db4cccfdd153bcc24a955", "additions": 2, "patch": "@@ -26,8 +26,8 @@\n   },\n \n   \"engines\": {\n-    \"node\": \">= 0.8.x\",\n-    \"npm\":  \">= 1.1.x\"\n+    \"node\": \">= 0.10.x\",\n+    \"npm\":  \">= 1.2.x\"\n   },\n \n   \"main\": \"./index\",", "changes": 4}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/robot.coffee", "sha": "36532013cc09a3e91ba32fa478a8bdc4c3e4eace", "additions": 28, "patch": "@@ -36,6 +36,8 @@ class Robot\n   # name        - A String of the robot name, defaults to Hubot.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: reduce the amount of parameters?\n   constructor: (adapterPath, adapter, httpd, name = 'Hubot') ->\n     @name      = name\n     @brain     = new Brain\n@@ -58,6 +60,8 @@ class Robot\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: update to work with the new script format and backcompat\n   hear: (regex, callback) ->\n     @listeners.push new TextListener(@, regex, callback)\n \n@@ -69,6 +73,8 @@ class Robot\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: update to work with the new script format, and backcompat\n   respond: (regex, callback) ->\n     re = regex.toString().split('/')\n     re.shift()\n@@ -136,6 +142,8 @@ class Robot\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: not really a fan of this, remove or keep?\n   catchAll: (callback) ->\n     @listeners.push new Listener(\n       @,\n@@ -167,6 +175,8 @@ class Robot\n   # file - A String filename in path on the filesystem.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: consider finding a way to simplify file loading\n   loadFile: (path, file) ->\n     ext  = Path.extname file\n     full = Path.join path, Path.basename(file, ext)\n@@ -183,6 +193,8 @@ class Robot\n   # path - A String path on the filesystem.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: consider finding a way to simplify file loading\n   load: (path) ->\n     @logger.debug \"Loading scripts from #{path}\"\n     Fs.exists path, (exists) =>\n@@ -196,6 +208,8 @@ class Robot\n   # scripts - An Array of scripts to load.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: consider finding a way to simplify file loading\n   loadHubotScripts: (path, scripts) ->\n     @logger.debug \"Loading hubot-scripts from #{path}\"\n     for script in scripts\n@@ -207,6 +221,8 @@ class Robot\n   # packages - An Array of packages containing hubot scripts to load.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: consider finding a way to simplify file loading\n   loadExternalScripts: (packages) ->\n     @logger.debug \"Loading external-scripts from npm packages\"\n     for pkg in packages\n@@ -219,6 +235,8 @@ class Robot\n   # Setup the Express server's defaults.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: maybe move the entire connect part into a third-party package?\n   setupExpress: ->\n     # Load config.\n     user    = process.env.EXPRESS_USER\n@@ -276,6 +294,8 @@ class Robot\n   # Public: Help Commands for Running Scripts.\n   #\n   # Returns an Array of help commands for running scripts.\n+  #\n+  # TODO: maybe remove this method and just have scripts use @commands\n   helpCommands: ->\n     @commands.sort()\n \n@@ -284,6 +304,8 @@ class Robot\n   # path - A String path to the file on disk.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: update to use new script format and backcompat\n   parseHelp: (path) ->\n     @logger.debug \"Parsing help for #{path}\"\n     scriptName = Path.basename(path).replace /\\.(coffee|js)$/, ''\n@@ -328,6 +350,8 @@ class Robot\n   # strings - One or more Strings for each message to send.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: update as may clash with new script format\n   send: (user, strings...) ->\n     @adapter.send user, strings...\n \n@@ -338,6 +362,8 @@ class Robot\n   # strings - One or more Strings for each message to send.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: update as may clash with new script format\n   reply: (user, strings...) ->\n     @adapter.reply user, strings...\n \n@@ -347,6 +373,8 @@ class Robot\n   # strings - One or more Strings for each message to send.\n   #\n   # Returns nothing.\n+  #\n+  # TODO: maybe be redundant depending on new script format functions\n   messageRoom: (room, strings...) ->\n     user = { room: room }\n     @adapter.send user, strings...", "changes": 28}, {"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/events.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/events.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/events.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/events.coffee", "sha": "ec65103ce5b7bc14818b4c80df05d702aaa9c3c0", "additions": 9, "patch": "@@ -1,19 +1,16 @@\n-# Description:\n-#   Event system related utilities\n-#\n-# Commands:\n-#   hubot fake event <event> - Triggers the <event> event for debugging reasons\n-#\n-# Events:\n-#   debug - {user: <user object to send message to>}\n-\n util = require 'util'\n \n module.exports = (robot) ->\n \n   robot.respond /FAKE EVENT (.*)/i, (msg) ->\n-    msg.send \"fake event '#{msg.match[1]}' triggered\"\n-    robot.emit msg.match[1], {user: msg.message.user}\n+\n+  robot.respond\n+    description: 'Trigger a fake event'\n+    example: 'hubot fake event [data]'\n+    match: /fake event (.*)/i\n+    handler: (msg, user, room, matches) ->\n+      room.send \"fake event '#{matches[1]}' triggered\"\n+      robot.emit matches[1], user: user\n \n   robot.on 'debug', (event) ->\n-    robot.send event.user, util.inspect event\n\\ No newline at end of file\n+    robot.send event.user, util.input event", "changes": 21}, {"status": "modified", "deletions": 38, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/google-images.coffee", "sha": "eb6481d4d81e2e2164038fd5b0af343f5cfa89ab", "additions": 41, "patch": "@@ -1,44 +1,47 @@\n-# Description:\n-#   A way to interact with the Google Images API.\n-#\n-# Commands:\n-#   hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n-#   hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.\n-#   hubot mustache me <url> - Adds a mustache to the specified URL.\n-#   hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n-\n module.exports = (robot) ->\n-  robot.respond /(image|img)( me)? (.*)/i, (msg) ->\n-    imageMe msg, msg.match[3], (url) ->\n-      msg.send url\n \n-  robot.respond /animate( me)? (.*)/i, (msg) ->\n-    imageMe msg, msg.match[2], true, (url) ->\n-      msg.send url\n+  imageMe = (query, animated, faces, cb) ->\n+    cb = animated if typeof animated == 'function'\n+    cb = faces if typeof faces == 'function'\n+    q = v: '1.0', rsz: '8', q: query, safe: 'active'\n+    q.imgtype = 'animated' if typeof animated is 'boolean' and animated is true\n+    q.imgtype = 'face' if typeof faces is 'boolean' and faces is true\n+    robot.http('http://ajax.googleapis.com/ajax/services/search/images')\n+      .query(q)\n+      .get() (err, res, body) ->\n+        images = JSON.parse(body)\n+        images = images.responseData?.results\n+        if images?.length > 0\n+          image  = robot.random images\n+          cb \"#{image.unescapedUrl}#.png\"\n \n-  robot.respond /(?:mo?u)?sta(?:s|c)he?(?: me)? (.*)/i, (msg) ->\n-    type = Math.floor(Math.random() * 3)\n-    mustachify = \"http://mustachify.me/#{type}?src=\"\n-    imagery = msg.match[1]\n+  robot.respond\n+    description: 'The Original. Queries Google images for <query> and returns a random top result'\n+    example: 'hubot image me <query>'\n+    match: /(image|img)( me)? (.*)/i\n+    handler: (msg, user, room, matches) ->\n+      imageMe matches[3], (url) ->\n+        room.send url\n \n-    if imagery.match /^https?:\\/\\//i\n-      msg.send \"#{mustachify}#{imagery}\"\n-    else\n-      imageMe msg, imagery, false, true, (url) ->\n-        msg.send \"#{mustachify}#{url}\"\n+  robot.respond\n+    description: 'The same thing as `image me` except tries to find an animated gif'\n+    example: 'hubot animate me <query>'\n+    match: /animated( me)? (.*)/i\n+    handler: (msg, user, room, matches) ->\n+      imageMe matches[2], true, (url) ->\n+        room.send url\n \n-imageMe = (msg, query, animated, faces, cb) ->\n-  cb = animated if typeof animated == 'function'\n-  cb = faces if typeof faces == 'function'\n-  q = v: '1.0', rsz: '8', q: query, safe: 'active'\n-  q.imgtype = 'animated' if typeof animated is 'boolean' and animated is true\n-  q.imgtype = 'face' if typeof faces is 'boolean' and faces is true\n-  msg.http('http://ajax.googleapis.com/ajax/services/search/images')\n-    .query(q)\n-    .get() (err, res, body) ->\n-      images = JSON.parse(body)\n-      images = images.responseData?.results\n-      if images?.length > 0\n-        image  = msg.random images\n-        cb \"#{image.unescapedUrl}#.png\"\n+  robot.respond\n+    description: 'Adds a mustache to the specified URL or search for an image'\n+    example: 'hubot mustache me <url|query>'\n+    match: /(?:mo?u)?sta(?:s|c)he?(?: me)? (.*)/i\n+    handler: (msg, user, room, matches) ->\n+      type = Math.floor(Math.random() * 3)\n+      mustachify = \"http://mustachify.me/#{type}?src=\"\n+      imagery = matches[1]\n \n+      if imagery.match /^https?:\\/\\//i\n+        room.send \"#{mustachify}#{imagery}\"\n+      else\n+        imageMe imagery, false, true, (url) ->\n+          room.send \"#{mustachify}#{url}\"", "changes": 79}, {"status": "modified", "deletions": 78, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/help.coffee", "sha": "36c70463b35ca680705a0bd2c2a2aacf2703b5f8", "additions": 17, "patch": "@@ -1,80 +1,19 @@\n-# Description: \n-#   Generates help commands for Hubot.\n-#\n-# Commands:\n-#   hubot help - Displays all of the help commands that Hubot knows about.\n-#   hubot help <query> - Displays all help commands that match <query>.\n-#\n-# URLS:\n-#   /hubot/help\n-#\n-# Notes:\n-#   These commands are grabbed from comment blocks at the top of each file.\n-\n-helpContents = (name, commands) ->\n-\n-  \"\"\"\n-<html>\n-  <head>\n-  <title>#{name} Help</title>\n-  <style type=\"text/css\">\n-    body {\n-      background: #d3d6d9;\n-      color: #636c75;\n-      text-shadow: 0 1px 1px rgba(255, 255, 255, .5);\n-      font-family: Helvetica, Arial, sans-serif;\n-    }\n-    h1 {\n-      margin: 8px 0;\n-      padding: 0;\n-    }\n-    .commands {\n-      font-size: 13px;\n-    }\n-    p {\n-      border-bottom: 1px solid #eee;\n-      margin: 6px 0 0 0;\n-      padding-bottom: 5px;\n-    }\n-    p:last-child {\n-      border: 0;\n-    }\n-  </style>\n-  </head>\n-  <body>\n-    <h1>#{name} Help</h1>\n-    <div class=\"commands\">\n-      #{commands}\n-    </div>\n-  </body>\n-</html>\n-  \"\"\"\n-\n module.exports = (robot) ->\n-  robot.respond /help\\s*(.*)?$/i, (msg) ->\n-    cmds = robot.helpCommands()\n-\n-    if msg.match[1]\n-      cmds = cmds.filter (cmd) ->\n-        cmd.match new RegExp(msg.match[1], 'i')\n-\n-      if cmds.length == 0\n-        msg.send \"No available commands match #{msg.match[1]}\"\n-        return\n-    emit = cmds.join \"\\n\"\n-\n-    unless robot.name.toLowerCase() is 'hubot'\n-      emit = emit.replace /hubot/ig, robot.name\n-\n-    msg.send emit\n-\n-  robot.router.get \"/#{robot.name}/help\", (req, res) ->\n-    cmds = robot.helpCommands().map (cmd) ->\n-      cmd.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')\n-\n-    emit = \"<p>#{cmds.join '</p><p>'}</p>\"\n-\n-    emit = emit.replace /hubot/ig, \"<b>#{robot.name}</b>\"\n \n-    res.setHeader 'content-type', 'text/html'\n-    res.end helpContents robot.name, emit\n+  robot.respond\n+    description: 'Display all or filtered help for hubot commands'\n+    example: 'hubot help (filter)'\n+    match: /help\\s*(.*)?$/i\n+    handler: (msg, user, room, matches) ->\n+      cmds = robot.helpCommands()\n+      if matches[1]\n+        cmds = cmds.filter (cmd) ->\n+          cmd.match new RegExp matches[1], 'i'\n+\n+        if cmds.length == 0\n+          room.send \"No available commands match #{matches[1]}\"\n+        else\n+          emit = cmds.join \"\\n\"\n+          unless robot.name.toLowerCase() is 'hubot'\n+            emit = emit.replace /hubot/ig, robot.name\n+          msg.send emit", "changes": 95}, {"status": "modified", "deletions": 19, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/httpd.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/httpd.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/httpd.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/httpd.coffee", "sha": "294f36e0121cc48436a7a7f18f70bfb00693ff75", "additions": 0, "patch": "@@ -1,22 +1,3 @@\n-# Description:\n-#   A simple interaction with the built in HTTP Daemon\n-#\n-# Dependencies:\n-#   None\n-#\n-# Configuration:\n-#   None\n-#\n-# Commands:\n-#   None\n-#\n-# URLS:\n-#   /hubot/version\n-#   /hubot/ping\n-#   /hubot/time\n-#   /hubot/info\n-#   /hubot/ip\n-\n spawn = require('child_process').spawn\n \n module.exports = (robot) ->", "changes": 19}, {"status": "modified", "deletions": 22, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/maps.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/maps.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/maps.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/maps.coffee", "sha": "4ae6081bd5ba6e5ed4aa633f2ec691b09a5561e3", "additions": 20, "patch": "@@ -1,26 +1,24 @@\n-# Description:\n-#   Interacts with the Google Maps API.\n-#\n-# Commands:\n-#   hubot map me <query> - Returns a map view of the area returned by `query`.\n-\n module.exports = (robot) ->\n \n-  robot.respond /(?:(satellite|terrain|hybrid)[- ])?map me (.+)/i, (msg) ->\n-    mapType  = msg.match[1] or \"roadmap\"\n-    location = msg.match[2]\n-    mapUrl   = \"http://maps.google.com/maps/api/staticmap?markers=\" +\n-                escape(location) +\n-                \"&size=400x400&maptype=\" +\n-                mapType +\n-                \"&sensor=false\" +\n-                \"&format=png\" # So campfire knows it's an image\n-    url      = \"http://maps.google.com/maps?q=\" +\n-               escape(location) +\n-              \"&hl=en&sll=37.0625,-95.677068&sspn=73.579623,100.371094&vpsrc=0&hnear=\" +\n-              escape(location) +\n-              \"&t=m&z=11\"\n+  robot.respond\n+    description: 'Returns a map view of the area returned by <query>'\n+    example: 'hubot map me <query>'\n+    match: /(?:(satellite|terrain|hybrid)[- ])?map me (.+)/i\n+    handler: (msg, room, user, matches) ->\n+      mapType  = matches[1] or \"roadmap\"\n+      location = matches[2]\n+      mapUrl   = \"http://maps.google.com/maps/api/staticmap?markers=\" +\n+                 escape(location) +\n+                 \"&size=400x400&maptype=\" +\n+                 mapType +\n+                 \"&sensor=false\" +\n+                 \"&format=png\"\n \n-    msg.send mapUrl\n-    msg.send url\n+      url      = \"http://maps.google.com/maps?q=\" +\n+                 escape(location) +\n+                 \"&hl=en&sll=37.0625,-95.677068&sspn=73.579623,100.371094&vpsrc=0&hnear=\" +\n+                 escape(location) +\n+                 \"&t=m&z=11\"\n \n+      room.send mapUrl\n+      room.send url", "changes": 42}, {"status": "modified", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/math.coffee", "sha": "77e0ea86386745bd0dc460cadd2e655fdb650d86", "additions": 23, "patch": "@@ -1,22 +1,25 @@\n-# Description:\n-#   Allows Hubot to do mathematics.\n-#\n-# Commands:\n-#   hubot math me <expression> - Calculate the given expression.\n-#   hubot convert me <expression> to <units> - Convert expression to given units.\n module.exports = (robot) ->\n-  robot.respond /(calc|calculate|convert|math)( me)? (.*)/i, (msg) ->\n-    msg\n-      .http('https://www.google.com/ig/calculator')\n-      .query\n-        hl: 'en'\n-        q: msg.match[3]\n-      .headers\n-        'Accept-Language': 'en-us,en;q=0.5',\n-        'Accept-Charset': 'utf-8',\n-        'User-Agent': \"Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\"\n-      .get() (err, res, body) ->\n-        # Response includes non-string keys, so we can't use JSON.parse here.\n-        json = eval(\"(#{body})\")\n-        msg.send json.rhs || 'Could not compute.'\n \n+  robot.respond\n+    description: [\n+      'Calculate the given expression'\n+      'Convert the given expression to units'\n+    ]\n+    example: [\n+      'hubot math me <expr>'\n+      'hubot convert me <expr> to <unit>'\n+    ]\n+    match: /(calc|calculate|convert|math)( me)? (.*)/i\n+    handler: (msg, room, user, matches) ->\n+      robot\n+        .http('https://www.google.com/ig/calculator')\n+        .query\n+          hl: 'en'\n+          q: matches[3]\n+        .headers\n+          'Accept-Language': 'en-us,en;q=0.5',\n+          'Accept-Charset': 'utf-8',\n+          'User-Agent': \"Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\"\n+        .get() (err, res, body) ->\n+          json = eval(\"(#{body})\")\n+          room.send json.rhs or 'Could not compute.'", "changes": 43}, {"status": "modified", "deletions": 18, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/ping.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/ping.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/ping.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/ping.coffee", "sha": "1a3bd9664590ed6f8fda85efd9fdd62bd6900ade", "additions": 25, "patch": "@@ -1,23 +1,30 @@\n-# Description:\n-#   Utility commands surrounding Hubot uptime.\n-#\n-# Commands:\n-#   hubot ping - Reply with pong\n-#   hubot echo <text> - Reply back with <text>\n-#   hubot time - Reply with current time\n-#   hubot die - End hubot process\n-\n module.exports = (robot) ->\n-  robot.respond /PING$/i, (msg) ->\n-    msg.send \"PONG\"\n \n-  robot.respond /ECHO (.*)$/i, (msg) ->\n-    msg.send msg.match[1]\n+  robot.respond\n+    description: 'Reply with pong'\n+    example: 'hubot ping'\n+    match: /PING$/i\n+    handler: (msg, user, room, matches) ->\n+      room.send 'PONG'\n \n-  robot.respond /TIME$/i, (msg) ->\n-    msg.send \"Server time is: #{new Date()}\"\n+  robot.respond\n+    description: 'Reply back with <text>'\n+    example: 'hubot echo <text>'\n+    match: /ECHO (.*)$/i\n+    handler: (msg, user, room, matches) ->\n+      room.send matches[1]\n \n-  robot.respond /DIE$/i, (msg) ->\n-    msg.send \"Goodbye, cruel world.\"\n-    process.exit 0\n+  robot.respond\n+    description: 'Reply with the current time'\n+    example: 'hubot time'\n+    match: /TIME$/i\n+    handler: (msg, user, room, matches) ->\n+      room.send \"Server time is: #{new Date}\"\n \n+  robot.respond\n+    description: 'End the hubot process'\n+    example: 'hubot die'\n+    match: /DIE$/i\n+    handler: (msg, user, room, matches) ->\n+      room.send \"Goodbye, cruel world.\"\n+      process.exit 0", "changes": 43}, {"status": "modified", "deletions": 30, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/pugme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/pugme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/pugme.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/pugme.coffee", "sha": "4a5848f308f0c7e0a0d9d162e0e92d229cbae194", "additions": 25, "patch": "@@ -1,34 +1,29 @@\n-# pug me - Receive a pug\n-# pug bomb N - get N pugs\n-\n-# Description:\n-#   Pugme is the most important thing in your life\n-#\n-# Dependencies:\n-#   None\n-#\n-# Configuration:\n-#   None\n-#\n-# Commands:\n-#   hubot pug me - Receive a pug\n-#   hubot pug bomb N - get N pugs\n-\n module.exports = (robot) ->\n \n-  robot.respond /pug me/i, (msg) ->\n-    msg.http(\"http://pugme.herokuapp.com/random\")\n-      .get() (err, res, body) ->\n-        msg.send JSON.parse(body).pug\n-\n-  robot.respond /pug bomb( (\\d+))?/i, (msg) ->\n-    count = msg.match[2] || 5\n-    msg.http(\"http://pugme.herokuapp.com/bomb?count=\" + count)\n-      .get() (err, res, body) ->\n-        msg.send pug for pug in JSON.parse(body).pugs\n+  robot.respond\n+    description: 'Receive a pug'\n+    example: 'hubot pug me'\n+    match: /pug me/i\n+    handler: (msg, user, room, matches) ->\n+      robot.http(\"http://pugme.herokuapp.com/random\")\n+        .get() (err, res, body) ->\n+          room.send JSON.parse(body).pug\n \n-  robot.respond /how many pugs are there/i, (msg) ->\n-    msg.http(\"http://pugme.herokuapp.com/count\")\n-      .get() (err, res, body) ->\n-        msg.send \"There are #{JSON.parse(body).pug_count} pugs.\"\n+  robot.respond\n+    description: 'Receive <amount> pugs'\n+    example: 'hubot pug bomb <amount>'\n+    match: /pug bomb( (\\d+))?/i\n+    handler: (msg, user, room, matches) ->\n+      count = matches[2] || 5\n+      robot.http(\"http://pugme.herokuapp.com/bomb?count=#{count}\")\n+        .get() (err, res, body) ->\n+          room.send pug for pug in JSON.parse(body).pugs\n \n+  robot.respond\n+    description: 'Get how many pugs are available'\n+    example: 'hubot how many pugs are there'\n+    match: /how many pugs are there/i\n+    handler: (msg, user, room, matches) ->\n+      robot.http(\"http://pugme.herokuapp.com/count\")\n+        .get() (err, res, body) ->\n+          room.send \"There are #{JSON.parse(body).pug_count} pugs.\"", "changes": 55}, {"status": "modified", "deletions": 66, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/roles.coffee", "sha": "3384d270e58af97a6615bb8a72697bf3c6c4b209", "additions": 65, "patch": "@@ -1,85 +1,84 @@\n-# Description:\n-#   Assign roles to people you're chatting with\n-#\n-# Commands:\n-#   hubot <user> is a badass guitarist - assign a role to a user\n-#   hubot <user> is not a badass guitarist - remove a role from a user\n-#   hubot who is <user> - see what roles a user has\n-#\n-# Examples:\n-#   hubot holman is an ego surfer\n-#   hubot holman is not an ego surfer\n-\n module.exports = (robot) ->\n \n   getAmbiguousUserText = (users) ->\n     \"Be more specific, I know #{users.length} people named like that: #{(user.name for user in users).join(\", \")}\"\n \n-  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n-    joiner = ', '\n-    name = msg.match[1].trim()\n+  robot.respond\n+    description: 'Assign a role to a user'\n+    example: 'hubot holman is an ego surfer'\n+    match: /@?([\\w .\\-_]+) is ([\"'\\w: \\-_]+)[.!]*$/i\n+    handler: (msg, user, room, matches) ->\n+      name    = matches[1].trim()\n+      newRole = matches[2].trim()\n \n-    if name is \"you\"\n-      msg.send \"Who ain't I?\"\n-    else if name is robot.name\n-      msg.send \"The best.\"\n-    else\n-      users = robot.brain.usersForFuzzyName(name)\n-      if users.length is 1\n-        user = users[0]\n-        user.roles = user.roles or [ ]\n-        if user.roles.length > 0\n-          if user.roles.join('').search(',') > -1\n-            joiner = '; '\n-          msg.send \"#{name} is #{user.roles.join(joiner)}.\"\n-        else\n-          msg.send \"#{name} is nothing to me.\"\n-      else if users.length > 1\n-        msg.send getAmbiguousUserText users\n-      else\n-        msg.send \"#{name}? Never heard of 'em\"\n+      unless name in ['', 'who', 'what', 'where', 'when', 'why']\n+        unless newRole.match(/^not\\s+/i)\n+          users = robot.brain.usersForFuzzyName(name)\n+          if users.length is 1\n+            user = users[0]\n+            user.roles = user.roles or [ ]\n \n-  robot.respond /@?([\\w .\\-_]+) is ([\"'\\w: \\-_]+)[.!]*$/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[2].trim()\n+            if newRole in user.roles\n+              room.send \"I know\"\n+            else\n+              user.roles.push(newRole)\n+              if name.toLowerCase() is robot.name.toLowerCase()\n+                room.send \"Ok, I am #{newRole}.\"\n+              else\n+                room.send \"Ok, #{name} is #{newRole}.\"\n+          else if users.length > 1\n+            room.send getAmbiguousUserText users\n+          else\n+            room.send \"I don't know anything about #{name}.\"\n \n-    unless name in ['', 'who', 'what', 'where', 'when', 'why']\n-      unless newRole.match(/^not\\s+/i)\n+  robot.respond\n+    description: 'Remove a role from a user'\n+    example: 'hubot holman is not an ego surfer'\n+    match: /@?([\\w .\\-_]+) is not ([\"'\\w: \\-_]+)[.!]*$/i\n+    handler: (msg, user, room, matches) ->\n+      name    = matches[1].trim()\n+      newRole = matches[2].trim()\n+\n+      unless name in ['', 'who', 'what', 'where', 'when', 'why']\n         users = robot.brain.usersForFuzzyName(name)\n         if users.length is 1\n           user = users[0]\n           user.roles = user.roles or [ ]\n \n-          if newRole in user.roles\n-            msg.send \"I know\"\n+          if newRole not in user.roles\n+            room.send \"I know.\"\n           else\n-            user.roles.push(newRole)\n-            if name.toLowerCase() is robot.name.toLowerCase()\n-              msg.send \"Ok, I am #{newRole}.\"\n-            else\n-              msg.send \"Ok, #{name} is #{newRole}.\"\n+            user.roles = (role for role in user.roles when role isnt newRole)\n+            room.send \"Ok, #{name} is no longer #{newRole}.\"\n         else if users.length > 1\n-          msg.send getAmbiguousUserText users\n+          room.send getAmbiguousUserText users\n         else\n-          msg.send \"I don't know anything about #{name}.\"\n+          room.send \"I don't know anything about #{name}.\"\n \n-  robot.respond /@?([\\w .\\-_]+) is not ([\"'\\w: \\-_]+)[.!]*$/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[2].trim()\n+  robot.respond\n+    description: 'See what roles a user has'\n+    example: 'hubot who is holman'\n+    match: /who is @?([\\w .\\-]+)\\?*$/i\n+    handler: (msg, user, room, matches) ->\n+      joiner = ', '\n+      name = matches[1].trim()\n \n-    unless name in ['', 'who', 'what', 'where', 'when', 'why']\n-      users = robot.brain.usersForFuzzyName(name)\n-      if users.length is 1\n-        user = users[0]\n-        user.roles = user.roles or [ ]\n-\n-        if newRole not in user.roles\n-          msg.send \"I know.\"\n-        else\n-          user.roles = (role for role in user.roles when role isnt newRole)\n-          msg.send \"Ok, #{name} is no longer #{newRole}.\"\n-      else if users.length > 1\n-        msg.send getAmbiguousUserText users\n+      if name is \"you\"\n+        room.send \"Who ain't I?\"\n+      else if name is robot.name\n+        room.send \"The best.\"\n       else\n-        msg.send \"I don't know anything about #{name}.\"\n-\n+        users = robot.brain.usersForFuzzyName(name)\n+        if users.length is 1\n+          user = users[0]\n+          user.roles = user.roles or [ ]\n+          if user.roles.length > 0\n+            if user.roles.join('').search(',') > -1\n+              joiner = '; '\n+            room.send \"#{name} is #{user.roles.join(joiner)}.\"\n+          else\n+            room.send \"#{name} is nothing to me.\"\n+        else if users.length > 1\n+          room.send getAmbiguousUserText users\n+        else\n+          room.send \"#{name}? Never heard of 'em\"", "changes": 131}, {"status": "modified", "deletions": 15, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/rules.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/rules.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/rules.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/rules.coffee", "sha": "ba5c6906115f1b2bb2e7e364704c9edcd952c7f9", "additions": 10, "patch": "@@ -1,12 +1,3 @@\n-# Description:\n-#   Make sure that hubot knows the rules.\n-#\n-# Commands:\n-#   hubot the rules - Make sure hubot still knows the rules.\n-#\n-# Notes:\n-#   DON'T DELETE THIS SCRIPT! ALL ROBAWTS MUST KNOW THE RULES\n-\n rules = [\n   \"1. A robot may not injure a human being or, through inaction, allow a human being to come to harm.\",\n   \"2. A robot must obey any orders given to it by human beings, except where such orders would conflict with the First Law.\",\n@@ -20,10 +11,14 @@ otherRules = [\n   ]\n \n module.exports = (robot) ->\n-  robot.respond /(what are )?the (three |3 )?(rules|laws)/i, (msg) ->\n-    text = msg.message.text\n-    if text.match(/apple/i) or text.match(/dev/i)\n-      msg.send otherRules.join('\\n')\n-    else\n-      msg.send rules.join('\\n')\n \n+  robot.respond\n+    description: 'Make sure hubot still knows the rules'\n+    example: 'hubot what are the rules'\n+    match: /(what are )?the (three |3 )?(rules|laws)/i\n+    handler: (msg, user, room, matches) ->\n+      text = msg.text\n+      if text.match(/apple/i) or text.match(/dev/i)\n+        room.send otherRules.join('\\n')\n+      else\n+        room.send rules.join('\\n')", "changes": 25}, {"status": "modified", "deletions": 21, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/storage.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/storage.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/storage.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/storage.coffee", "sha": "875ab5110d9522386ec75b7a34a30a2eb4e3d2a5", "additions": 19, "patch": "@@ -1,25 +1,23 @@\n-# Description:\n-#   Inspect the data in redis easily\n-#\n-# Commands:\n-#   hubot show users - Display all users that hubot knows about\n-#   hubot show storage - Display the contents that are persisted in the brain\n-\n-\n-Util = require \"util\"\n+util = require \"util\"\n \n module.exports = (robot) ->\n-  robot.respond /show storage$/i, (msg) ->\n-    output = Util.inspect(robot.brain.data, false, 4)\n-    msg.send output\n-\n-  robot.respond /show users$/i, (msg) ->\n-    response = \"\"\n-\n-    for own key, user of robot.brain.data.users\n-      response += \"#{user.id} #{user.name}\"\n-      response += \" <#{user.email_address}>\" if user.email_address\n-      response += \"\\n\"\n \n-    msg.send response\n+  robot.respond\n+    description: 'Display all the contents that are persisted to the brain'\n+    example: 'hubot show storage'\n+    match: /show storage$/i\n+    handler: (msg, user, room, matches) ->\n+      output = util.inspect(robot.brain.data, false, 4)\n+      room.send output\n \n+  robot.respond\n+    description: 'Display all the user that hubot knows about'\n+    example: 'hubot show users'\n+    match: /show users$/i\n+    handler: (msg, user, room, matches) ->\n+      response = \"\"\n+      for own key, user of robot.brain.data.users\n+        response += \"#{user.id} #{user.name}\"\n+        response += \" <#{user.email_address}>\" if user.email_address\n+        response += \"\\n\"\n+      room.send response", "changes": 40}, {"status": "modified", "deletions": 102, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/translate.coffee", "sha": "849094e49957923796dd28c99b2bea9d4aa9f786", "additions": 108, "patch": "@@ -1,109 +1,115 @@\n-# Description:\n-#   Allows Hubot to know many languages.\n-#\n-# Commands:\n-#   hubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.\n-#   hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n-\n languages =\n-  \"af\": \"Afrikaans\",\n-  \"sq\": \"Albanian\",\n-  \"ar\": \"Arabic\",\n-  \"az\": \"Azerbaijani\",\n-  \"eu\": \"Basque\",\n-  \"bn\": \"Bengali\",\n-  \"be\": \"Belarusian\",\n-  \"bg\": \"Bulgarian\",\n-  \"ca\": \"Catalan\",\n-  \"zh-CN\": \"Simplified Chinese\",\n-  \"zh-TW\": \"Traditional Chinese\",\n-  \"hr\": \"Croatian\",\n-  \"cs\": \"Czech\",\n-  \"da\": \"Danish\",\n-  \"nl\": \"Dutch\",\n-  \"en\": \"English\",\n-  \"eo\": \"Esperanto\",\n-  \"et\": \"Estonian\",\n-  \"tl\": \"Filipino\",\n-  \"fi\": \"Finnish\",\n-  \"fr\": \"French\",\n-  \"gl\": \"Galician\",\n-  \"ka\": \"Georgian\",\n-  \"de\": \"German\",\n-  \"el\": \"Greek\",\n-  \"gu\": \"Gujarati\",\n-  \"ht\": \"Haitian Creole\",\n-  \"iw\": \"Hebrew\",\n-  \"hi\": \"Hindi\",\n-  \"hu\": \"Hungarian\",\n-  \"is\": \"Icelandic\",\n-  \"id\": \"Indonesian\",\n-  \"ga\": \"Irish\",\n-  \"it\": \"Italian\",\n-  \"ja\": \"Japanese\",\n-  \"kn\": \"Kannada\",\n-  \"ko\": \"Korean\",\n-  \"la\": \"Latin\",\n-  \"lv\": \"Latvian\",\n-  \"lt\": \"Lithuanian\",\n-  \"mk\": \"Macedonian\",\n-  \"ms\": \"Malay\",\n-  \"mt\": \"Maltese\",\n-  \"no\": \"Norwegian\",\n-  \"fa\": \"Persian\",\n-  \"pl\": \"Polish\",\n-  \"pt\": \"Portuguese\",\n-  \"ro\": \"Romanian\",\n-  \"ru\": \"Russian\",\n-  \"sr\": \"Serbian\",\n-  \"sk\": \"Slovak\",\n-  \"sl\": \"Slovenian\",\n-  \"es\": \"Spanish\",\n-  \"sw\": \"Swahili\",\n-  \"sv\": \"Swedish\",\n-  \"ta\": \"Tamil\",\n-  \"te\": \"Telugu\",\n-  \"th\": \"Thai\",\n-  \"tr\": \"Turkish\",\n-  \"uk\": \"Ukranian\",\n-  \"ur\": \"Urdu\",\n-  \"vi\": \"Vietnamese\",\n-  \"cy\": \"Welsh\",\n-  \"yi\": \"Yiddish\"\n+  \"af\":    \"Afrikaans\"\n+  \"sq\":    \"Albanian\"\n+  \"ar\":    \"Arabic\"\n+  \"az\":    \"Azerbaijani\"\n+  \"eu\":    \"Basque\"\n+  \"bn\":    \"Bengali\"\n+  \"be\":    \"Belarusian\"\n+  \"bg\":    \"Bulgarian\"\n+  \"ca\":    \"Catalan\"\n+  \"zh-CN\": \"Simplified Chinese\"\n+  \"zh-TW\": \"Traditional Chinese\"\n+  \"hr\":    \"Croatian\"\n+  \"cs\":    \"Czech\"\n+  \"da\":    \"Danish\"\n+  \"nl\":    \"Dutch\"\n+  \"en\":    \"English\"\n+  \"eo\":    \"Esperanto\"\n+  \"et\":    \"Estonian\"\n+  \"tl\":    \"Filipino\"\n+  \"fi\":    \"Finnish\"\n+  \"fr\":    \"French\"\n+  \"gl\":    \"Galician\"\n+  \"ka\":    \"Georgian\"\n+  \"de\":    \"German\"\n+  \"el\":    \"Greek\"\n+  \"gu\":    \"Gujarati\"\n+  \"ht\":    \"Haitian Creole\"\n+  \"iw\":    \"Hebrew\"\n+  \"hi\":    \"Hindi\"\n+  \"hu\":    \"Hungarian\"\n+  \"is\":    \"Icelandic\"\n+  \"id\":    \"Indonesian\"\n+  \"ga\":    \"Irish\"\n+  \"it\":    \"Italian\"\n+  \"ja\":    \"Japanese\"\n+  \"kn\":    \"Kannada\"\n+  \"ko\":    \"Korean\"\n+  \"la\":    \"Latin\"\n+  \"lv\":    \"Latvian\"\n+  \"lt\":    \"Lithuanian\"\n+  \"mk\":    \"Macedonian\"\n+  \"ms\":    \"Malay\"\n+  \"mt\":    \"Maltese\"\n+  \"no\":    \"Norwegian\"\n+  \"fa\":    \"Persian\"\n+  \"pl\":    \"Polish\"\n+  \"pt\":    \"Portuguese\"\n+  \"ro\":    \"Romanian\"\n+  \"ru\":    \"Russian\"\n+  \"sr\":    \"Serbian\"\n+  \"sk\":    \"Slovak\"\n+  \"sl\":    \"Slovenian\"\n+  \"es\":    \"Spanish\"\n+  \"sw\":    \"Swahili\"\n+  \"sv\":    \"Swedish\"\n+  \"ta\":    \"Tamil\"\n+  \"te\":    \"Telugu\"\n+  \"th\":    \"Thai\"\n+  \"tr\":    \"Turkish\"\n+  \"uk\":    \"Ukranian\"\n+  \"ur\":    \"Urdu\"\n+  \"vi\":    \"Vietnamese\"\n+  \"cy\":    \"Welsh\"\n+  \"yi\":    \"Yiddish\"\n \n-getCode = (language,languages) ->\n+getCode = (language, languages) ->\n   for code, lang of languages\n       return code if lang.toLowerCase() is language.toLowerCase()\n \n module.exports = (robot) ->\n-  robot.respond /(?:translate)(?: me)?(?:(?: from) ([a-z]*))?(?:(?: (?:in)?to) ([a-z]*))? (.*)/i, (msg) ->\n-    term   = \"\\\"#{msg.match[3]}\\\"\"\n-    origin = if msg.match[1] isnt undefined then getCode(msg.match[1], languages) else 'auto'\n-    target = if msg.match[2] isnt undefined then getCode(msg.match[2], languages) else 'en'\n-    \n-    msg.http(\"https://translate.google.com/translate_a/t\")\n-      .query({\n-        client: 't'\n-        hl: 'en'\n-        multires: 1\n-        sc: 1\n-        sl: origin\n-        ssel: 0\n-        tl: target\n-        tsel: 0\n-        uptl: \"en\"\n-        text: term\n-      })\n-      .header('User-Agent', 'Mozilla/5.0')\n-      .get() (err, res, body) ->\n-        data   = body\n-        if data.length > 4 and data[0] == '['\n-          parsed = eval(data)\n-          language =languages[parsed[2]]\n-          parsed = parsed[0] and parsed[0][0] and parsed[0][0][0]\n-          if parsed\n-            if msg.match[2] is undefined\n-              msg.send \"#{term} is #{language} for #{parsed}\"\n-            else\n-              msg.send \"The #{language} #{term} translates as #{parsed} in #{languages[target]}\"\n \n+  robot.respond\n+    description: 'Search for a translation of <phrase> or specify languages'\n+    example: [\n+      'hubot translate me <phrase>'\n+      'hubot translate me from <source> into <target> <phrase>'\n+    ]\n+    match: /(?:translate)(?: me)?(?:(?: from) ([a-z]*))?(?:(?: (?:in)?to) ([a-z]*))? (.*)/i\n+    handler: (msg, user, room, matches) ->\n+      term   = \"\\\"#{matches[3]}\\\"\"\n+      origin = if matches[1] isnt undefined\n+        getCode(matches[1], languages)\n+      else\n+        'auto'\n+      target = if matches[2] isnt undefined\n+        getCode(matches[2], languages)\n+      else\n+        'en'\n+      \n+      robot.http(\"https://translate.google.com/translate_a/t\")\n+        .query({\n+          client: 't'\n+          hl: 'en'\n+          multires: 1\n+          sc: 1\n+          sl: origin\n+          ssel: 0\n+          tl: target\n+          tsel: 0\n+          uptl: \"en\"\n+          text: term\n+        })\n+        .header('User-Agent', 'Mozilla/5.0')\n+        .get() (err, res, body) ->\n+          data   = body\n+          if data.length > 4 and data[0] == '['\n+            parsed = eval(data)\n+            language =languages[parsed[2]]\n+            parsed = parsed[0] and parsed[0][0] and parsed[0][0][0]\n+            if parsed\n+              if matches[2] is undefined\n+                room.send \"#{term} is #{language} for #{parsed}\"\n+              else\n+                room.send \"The #{language} #{term} translates as #{parsed} in #{languages[target]}\"", "changes": 210}, {"status": "modified", "deletions": 21, "raw_url": "https://github.com/hubotio/hubot/raw/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/youtube.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/61daec53195fae513815b94b939c1a0db663f9a1/src/scripts/youtube.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/youtube.coffee?ref=61daec53195fae513815b94b939c1a0db663f9a1", "filename": "src/scripts/youtube.coffee", "sha": "97373b56134a4b89703d0ef2ca70d2e0a23087ae", "additions": 20, "patch": "@@ -1,24 +1,23 @@\n-# Description:\n-#   Messing around with the YouTube API.\n-#\n-# Commands:\n-#   hubot youtube me <query> - Searches YouTube for the query and returns the video embed link.\n module.exports = (robot) ->\n-  robot.respond /(youtube|yt)( me)? (.*)/i, (msg) ->\n-    query = msg.match[3]\n-    msg.http(\"http://gdata.youtube.com/feeds/api/videos\")\n-      .query({\n-        orderBy: \"relevance\"\n-        'max-results': 15\n-        alt: 'json'\n-        q: query\n-      })\n-      .get() (err, res, body) ->\n-        videos = JSON.parse(body)\n-        videos = videos.feed.entry\n-        video  = msg.random videos\n \n-        video.link.forEach (link) ->\n-          if link.rel is \"alternate\" and link.type is \"text/html\"\n-            msg.send link.href\n+  robot.respond\n+    description: 'Searches YouTube for the <query> and returns the video link'\n+    example: 'hubot youtube me <query>'\n+    match: /(youtube|yt)( me)? (.*)/i\n+    handler: (msg, user, room, matches) ->\n+      query = matches[3]\n+      robot.http(\"http://gdata.youtube.com/feeds/api/videos\")\n+        .query({\n+          'orderBy': \"relevance\"\n+          'max-results': 15\n+          'alt': 'json'\n+          'q': query\n+        })\n+        .get() (err, res, body) ->\n+          videos = JSON.parse(body)\n+          videos = videos.feed.entry\n+          video  = robot.random videos\n \n+          for link in video.link\n+            if link.rel is \"alternate\" and link.type is \"text/html\"\n+              room.send link.href", "changes": 41}], "471": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1222633fa2bd41b71191eb8f0532db9054cd3229/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1222633fa2bd41b71191eb8f0532db9054cd3229/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=1222633fa2bd41b71191eb8f0532db9054cd3229", "filename": "src/brain.coffee", "sha": "e208ddf6d731c339ea353e7665bc518d378c8996", "additions": 12, "patch": "@@ -112,7 +112,18 @@ class Brain extends EventEmitter\n       if userName? and userName.toLowerCase() is lowerName\n         result = @data.users[k]\n     result\n-\n+    \n+  # Public: Get a User object given a mention_name.\n+  #\n+  # Returns a User intance for the user with the specified mention_name.\n+  userForMentionName: (mention_name) ->\n+    result = null\n+    lowerMentionName = mention_name.toLowerCase()\n+    for k of (@data.users or { })\n+      userMentionName = @data.users[k]['mention_name']\n+      if userMentionName? and userMentionName.toLowerCase() is lowerMentionName\n+        result = @data.users[k]\n+    result\n   # Public: Get all users whose names match fuzzyName. Currently, match\n   # means 'starts with', but this could be extended to match initials,\n   # nicknames, etc.", "changes": 13}], "472": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/78ce8ddb47afdadc21c1112e71c7df5db4df6dd2/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/78ce8ddb47afdadc21c1112e71c7df5db4df6dd2/src/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=78ce8ddb47afdadc21c1112e71c7df5db4df6dd2", "filename": "src/scripts/translate.coffee", "sha": "6b8fe96d05aa22dd92d17065d278c4c73f84e73b", "additions": 1, "patch": "@@ -65,7 +65,7 @@ languages =\n   \"te\": \"Telugu\",\n   \"th\": \"Thai\",\n   \"tr\": \"Turkish\",\n-  \"uk\": \"Ukranian\",\n+  \"uk\": \"Ukrainian\",\n   \"ur\": \"Urdu\",\n   \"vi\": \"Vietnamese\",\n   \"cy\": \"Welsh\",", "changes": 2}], "475": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/14dab1420dd4ab47f0b13583b76c526159ea5a1c/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/14dab1420dd4ab47f0b13583b76c526159ea5a1c/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=14dab1420dd4ab47f0b13583b76c526159ea5a1c", "filename": "README.md", "sha": "d81cd359a3627eac308d07ae9d21448092fdbcdc", "additions": 36, "patch": "@@ -124,6 +124,42 @@ module.exports = (robot) ->\n If you provide an event, it's very recommended to include a hubot user object\n in data. In case of other reacting scripts want to respond to chat.\n \n+## Authentication\n+\n+Hubot has first class support for specify roles which a user must have to run\n+specific commands. If you wish you use this support you must set the the\n+following environment variables:\n+\n+    * `HUBOT_AUTH_ADMINS` a comma separated list of admin IDs\n+\n+You can find the user IDs by running the `show users` command. The admin IDs\n+specify which users can add and remove roles from users. Please note you can\n+only assign the admin role using the environment variable.\n+\n+###\u00a0Assigning a Role\n+\n+You can assign a role to the user using the following command:\n+\n+    hubot Joe Bloggs has developer role\n+    hubot John Doe has ops role\n+\n+The name must be the exact name as stored in hubot's brain.\n+\n+###\u00a0Removing a Role\n+\n+You can remove a role from the user using the following command:\n+\n+    hubot Joe Bloggs doesn't have developer role\n+    hubot John Doe does not have ops role\n+\n+### Viewing a Users Roles\n+\n+You can view the roles a user has or see which users have the admin role with\n+the following commands:\n+\n+    hubot what roles does Joe Bloggs have?\n+    hubot who has admin role?\n+\n ## Persistence\n \n Hubot has an in-memory key-value store exposed as `robot.brain` that can be", "changes": 36}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/14dab1420dd4ab47f0b13583b76c526159ea5a1c/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/14dab1420dd4ab47f0b13583b76c526159ea5a1c/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=14dab1420dd4ab47f0b13583b76c526159ea5a1c", "filename": "src/scripts/auth.coffee", "sha": "693ecca54c8b74a558836959a56e6feb1a2f3b63", "additions": 104, "patch": "@@ -0,0 +1,104 @@\n+# Description:\n+#   Auth allows you to assign roles to users which can be used by other scripts\n+#   to restrict access to Hubot commands\n+#\n+# Dependencies:\n+#   None\n+#\n+# Configuration:\n+#   HUBOT_AUTH_ADMIN - A comma separate list of user IDs\n+#\n+# Commands:\n+#   hubot <user> has <role> role - Assigns a role to a user\n+#   hubot <user> doesn't have <role> role - Removes a role from a user\n+#   hubot what role does <user> have - Find out what roles are assigned to a specific user\n+#   hubot who has admin role - Find out who's an admin and can assign roles\n+#\n+# Notes:\n+#   * Call the method: robot.auth.hasRole(msg.envelope.user,'<role>')\n+#   * returns bool true or false\n+#\n+#   * the 'admin' role can only be assigned through the environment variable\n+#   * roles are all transformed to lower case\n+#\n+#   * The script assumes that user IDs will be unique on the service end as to\n+#     correctly identify a user. Names were insecure as a user could impersonate\n+#     a user\n+#\n+# Author:\n+#   alexwilliamsca, tombell\n+\n+module.exports = (robot) ->\n+\n+  unless process.env.HUBOT_AUTH_ADMIN?\n+    robot.logger.warn 'The HUBOT_AUTH_ADMIN environment variable not set'\n+\n+  admins = (process.env.HUBOT_AUTH_ADMIN or []).split ','\n+\n+  class Auth\n+    hasRole: (user, roles) ->\n+      user = robot.brain.userForId(user.id)\n+      if user? and user.roles?\n+        roles = [roles] if roles typeof String\n+        for role in roles\n+          return true if role in user.roles\n+      return false\n+\n+  robot.auth = new Auth\n+\n+  robot.respond /@?(.+) (has) ([\"'\\w: -_]+) (role)/i, (msg) ->\n+    name    = msg.match[1].trim()\n+    newRole = msg.match[3].trim().toLowerCase()\n+\n+    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n+      user = robot.brain.userForName(name)\n+      return msg.reply \"#{name} does not exist\" unless user?\n+      user.roles or= []\n+\n+      if newRole in user.roles\n+        msg.reply \"#{name} already has the '#{newRole}' role.\"\n+      else\n+        if newRole is 'admin'\n+          msg.reply \"Sorry, the 'admin' role can only be defined in the HUBOT_AUTH_ADMIN env variable.\"\n+        else\n+          myRoles = msg.message.user.roles or []\n+          if msg.message.user.id.toString() in admins\n+            user.roles.push(newRole)\n+            msg.reply \"Ok, #{name} has the '#{newRole}' role.\"\n+\n+  robot.respond /@?(.+) (doesn't have|does not have) ([\"'\\w: -_]+) (role)/i, (msg) ->\n+    name    = msg.match[1].trim()\n+    newRole = msg.match[3].trim().toLowerCase()\n+\n+    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n+      user = robot.brain.userForName(name)\n+      return msg.reply \"#{name} does not exist\" unless user?\n+      user.roles or= []\n+\n+      if newRole is 'admin'\n+        msg.reply \"Sorry, the 'admin' role can only be removed from the HUBOT_AUTH_ADMIN env variable.\"\n+      else\n+        myRoles = msg.message.user.roles or []\n+        if msg.message.user.id.toString() in admins\n+          user.roles = (role for role in user.roles when role isnt newRole)\n+          msg.reply \"Ok, #{name} doesn't have the '#{newRole}' role.\"\n+\n+  robot.respond /(what role does|what roles does) @?(.+) (have)\\?*$/i, (msg) ->\n+    name = msg.match[2].trim()\n+    user = robot.brain.userForId(msg.message.user.id)\n+    return msg.reply \"#{name} does not exist\" unless user?\n+    user.roles or= []\n+\n+    if user.id.toString() in admins\n+      isAdmin = ' and is also an admin'\n+    else\n+      isAdmin = ''\n+    msg.reply \"#{name} has the following roles: #{user.roles.join(', ')}#{isAdmin}.\"\n+\n+  robot.respond /who has admin role\\?*$/i, (msg) ->\n+    adminNames = []\n+    for admin in admins\n+      user = robot.brain.userForId(admin)\n+      adminNames.push user.name if user?\n+\n+    msg.reply \"The following people have the 'admin' role: #{adminNames.join(', ')}\"", "changes": 104}], "479": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e426a49f37d2fc69ffbe21750adb1602be3cd4e1/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/e426a49f37d2fc69ffbe21750adb1602be3cd4e1/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=e426a49f37d2fc69ffbe21750adb1602be3cd4e1", "filename": "README.md", "sha": "5cf9878f4ccbe86181224992b39f8348d7f1a405", "additions": 1, "patch": "@@ -130,7 +130,7 @@ Hubot has first class support for specify roles which a user must have to run\n specific commands. If you wish you use this support you must set the the\n following environment variables:\n \n-    * `HUBOT_AUTH_ADMINS` a comma separated list of admin IDs\n+    * `HUBOT_AUTH_ADMIN` a comma separated list of admin IDs\n \n You can find the user IDs by running the `show users` command. The admin IDs\n specify which users can add and remove roles from users. Please note you can", "changes": 2}], "481": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/acdbc0b8da3031817aa7eb647d63eca1dc256c64/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/acdbc0b8da3031817aa7eb647d63eca1dc256c64/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=acdbc0b8da3031817aa7eb647d63eca1dc256c64", "filename": "src/scripts/auth.coffee", "sha": "a3663c0ae400b1016d0dba7c90a7a6c2d05b9952", "additions": 1, "patch": "@@ -42,7 +42,7 @@ module.exports = (robot) ->\n     hasRole: (user, roles) ->\n       user = robot.brain.userForId(user.id)\n       if user? and user.roles?\n-        roles = [roles] if roles typeof String\n+        roles = [roles] if typeof roles is 'string'\n         for role in roles\n           return true if role in user.roles\n       return false", "changes": 2}], "482": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/bbfd7ddc9322c4e6f69854133a0238c0e1adb06d/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/bbfd7ddc9322c4e6f69854133a0238c0e1adb06d/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=bbfd7ddc9322c4e6f69854133a0238c0e1adb06d", "filename": "src/adapters/campfire.coffee", "sha": "2b22ed84ec9e6307363cb643549185ccb243c300", "additions": 1, "patch": "@@ -38,7 +38,7 @@ class Campfire extends Adapter\n       (id, created, room, user, body) ->\n         bot.User user, (err, userData) ->\n           if userData.user\n-            author = self.userForId(userData.user.id, userData.user)\n+            author = self.robot.brain.userForId(userData.user.id, userData.user)\n             userId = userData.user.id\n             self.robot.brain.data\n               .users[userId].name = userData.user.name", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/bbfd7ddc9322c4e6f69854133a0238c0e1adb06d/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/bbfd7ddc9322c4e6f69854133a0238c0e1adb06d/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=bbfd7ddc9322c4e6f69854133a0238c0e1adb06d", "filename": "src/adapters/shell.coffee", "sha": "ab1cef02fe002c1f2991ad5e2e4fe126d0a0873e", "additions": 1, "patch": "@@ -34,7 +34,7 @@ class Shell extends Adapter\n     @repl.on 'line', (buffer) =>\n       @repl.close() if buffer.toLowerCase() is 'exit'\n       @repl.prompt()\n-      user = @userForId '1', name: 'Shell', room: 'Shell'\n+      user = @robot.brain.userForId '1', name: 'Shell', room: 'Shell'\n       @receive new TextMessage user, buffer, 'messageId'\n \n     self.emit 'connected'", "changes": 2}], "483": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/5edff870a49eb90f68f0855015e425c2f7e819dc/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5edff870a49eb90f68f0855015e425c2f7e819dc/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=5edff870a49eb90f68f0855015e425c2f7e819dc", "filename": "src/message.coffee", "sha": "3776e9f94c6349a5a0ba6a090d9f92e73fd51201", "additions": 1, "patch": "@@ -54,6 +54,7 @@ class CatchAllMessage extends Message\n   #\n   # message - The original message.\n   constructor: (@message) ->\n+    super @message.user\n \n module.exports = {\n   Message", "changes": 1}], "489": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/db8b4c02b3f4c6604bfc3d78504b545d0afaa8ed/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/db8b4c02b3f4c6604bfc3d78504b545d0afaa8ed/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=db8b4c02b3f4c6604bfc3d78504b545d0afaa8ed", "filename": "src/robot.coffee", "sha": "65e213d5f9ea5af56df9027fcaa114d8f26027d1", "additions": 3, "patch": "@@ -80,16 +80,17 @@ class Robot\n       @logger.warning \"The regex in question was #{regex.toString()}\"\n \n     pattern = re.join('/')\n+    name = @name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n \n     if @alias\n       alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n       newRegex = new RegExp(\n-        \"^[@]?(?:#{alias}[:,]?|#{@name}[:,]?)\\\\s*(?:#{pattern})\"\n+        \"^[@]?(?:#{alias}[:,]?|#{name}[:,]?)\\\\s*(?:#{pattern})\"\n         modifiers\n       )\n     else\n       newRegex = new RegExp(\n-        \"^[@]?#{@name}[:,]?\\\\s*(?:#{pattern})\",\n+        \"^[@]?#{name}[:,]?\\\\s*(?:#{pattern})\",\n         modifiers\n       )\n ", "changes": 5}], "490": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/589165d7355c0be662f89009b0813b1700a3b679/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/589165d7355c0be662f89009b0813b1700a3b679/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=589165d7355c0be662f89009b0813b1700a3b679", "filename": "src/robot.coffee", "sha": "e51a09f40f201493b83b6ce55fb200339af51ce8", "additions": 1, "patch": "@@ -415,5 +415,6 @@ class Robot\n   # Returns a ScopedClient instance.\n   http: (url) ->\n     HttpClient.create(url)\n+      .header('User-Agent', 'Hubot')\n \n module.exports = Robot", "changes": 1}], "491": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/9484cf5c34671e073d100b0e7cdae2067595cacb/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9484cf5c34671e073d100b0e7cdae2067595cacb/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=9484cf5c34671e073d100b0e7cdae2067595cacb", "filename": "src/creator.coffee", "sha": "8dfc942c49070905ee8bb4992b62dade1dba798e", "additions": 12, "patch": "@@ -26,11 +26,13 @@ class Creator\n   # to   - A String destination file to write to.\n   #\n   # Returns nothing.\n-  copy: (from, to) ->\n+  copy: (from, to, callback) ->\n     Fs.readFile from, \"utf8\", (err, data) ->\n       console.log \"Copying #{Path.resolve(from)} -> #{Path.resolve(to)}\"\n       Fs.writeFileSync to, data, \"utf8\"\n \n+      callback(err, to) if callback?\n+\n   # Copy the default scripts hubot ships with to the scripts folder\n   # This allows people to easily remove scripts hubot defaults to if\n   # they want. It also provides them with a few examples and a top\n@@ -63,12 +65,19 @@ class Creator\n       \"package.json\",\n       \"README.md\",\n       \".gitignore\",\n-      \"bin/hubot\",\n-      \"bin/hubot.cmd\",\n       \"hubot-scripts.json\",\n       \"external-scripts.json\"\n     ]\n \n     @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\" for file in files\n \n+    bins = [\n+      \"bin/hubot\",\n+      \"bin/hubot.cmd\"\n+    ]\n+\n+    for bin in bins\n+      @copy \"#{@templateDir}/#{bin}\", \"#{@path}/#{bin}\", (err, binPath) =>\n+        Fs.chmodSync binPath, 0o755\n+\n module.exports = Creator", "changes": 15}], "492": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d08f29a8747d17d2f12ccbcb7a69c2bab2583827/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d08f29a8747d17d2f12ccbcb7a69c2bab2583827/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=d08f29a8747d17d2f12ccbcb7a69c2bab2583827", "filename": "src/robot.coffee", "sha": "fbe8604db4346aea84955e419b2e76acb4630163", "additions": 1, "patch": "@@ -240,7 +240,7 @@ class Robot\n     if herokuUrl\n       herokuUrl += '/' unless /\\/$/.test herokuUrl\n       setInterval =>\n-        HttpClient.create(\"#{herokuUrl}hubot/ping\").post() (err, res, body) =>\n+        HttpClient.create(\"#{herokuUrl}#{@name}/ping\").post() (err, res, body) =>\n           @logger.info 'keep alive ping!'\n       , 1200000\n ", "changes": 2}], "496": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/ac505d52a6cd0a23f5c42a9675f243b90da2ba07/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ac505d52a6cd0a23f5c42a9675f243b90da2ba07/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=ac505d52a6cd0a23f5c42a9675f243b90da2ba07", "filename": "src/creator.coffee", "sha": "b61092d2d4030b81fbae1128b6677ea79bb6a8bf", "additions": 5, "patch": "@@ -14,11 +14,10 @@ class Creator\n   # Create a folder if it doesn't already exist.\n   #\n   # Returns nothing.\n-  mkdirDashP: (path) ->\n+  mkdir: (path) ->\n     Fs.exists path, (exists) ->\n       unless exists\n-        Fs.mkdir path, 0o0755, (err) ->\n-          throw err if err\n+        Fs.mkdirSync path, 0o0755\n \n   # Copy the contents of a file from one place to another.\n   #\n@@ -54,9 +53,9 @@ class Creator\n   run: ->\n     console.log \"Creating a hubot install at #{@path}\"\n \n-    @mkdirDashP(@path)\n-    @mkdirDashP(\"#{@path}/bin\")\n-    @mkdirDashP(\"#{@path}/scripts\")\n+    @mkdir(@path)\n+    @mkdir(\"#{@path}/bin\")\n+    @mkdir(\"#{@path}/scripts\")\n \n     @copyDefaultScripts(\"#{@path}/scripts\")\n ", "changes": 11}], "497": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/94352514c0804db53a25a1689728a22437c194f9/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/94352514c0804db53a25a1689728a22437c194f9/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=94352514c0804db53a25a1689728a22437c194f9", "filename": "src/robot.coffee", "sha": "8de1b5216c205e974466c39202c7af6276006126", "additions": 1, "patch": "@@ -213,6 +213,7 @@ class Robot\n     for pkg in packages\n       try\n         require(pkg) @\n+        @parseHelp require.resolve(pkg)\n       catch error\n         @logger.error \"Error loading scripts from npm package - #{error}\"\n         process.exit(1)", "changes": 1}], "500": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/e45c3d07ba85764ecee015ca7c13583683894fb4/src/scripts/pugme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e45c3d07ba85764ecee015ca7c13583683894fb4/src/scripts/pugme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/pugme.coffee?ref=e45c3d07ba85764ecee015ca7c13583683894fb4", "filename": "src/scripts/pugme.coffee", "sha": "8e3661b24a6fd35aee3eb8b70547757670524074", "additions": 0, "patch": "@@ -1,6 +1,3 @@\n-# pug me - Receive a pug\n-# pug bomb N - get N pugs\n-\n # Description:\n #   Pugme is the most important thing in your life\n #", "changes": 3}], "503": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/25d8d7ff599b5cd3535c67d5a01f39063586858f/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/25d8d7ff599b5cd3535c67d5a01f39063586858f/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=25d8d7ff599b5cd3535c67d5a01f39063586858f", "filename": "src/adapters/campfire.coffee", "sha": "c7418f7bc708171f8532aa7b31a56f8b238385a7", "additions": 1, "patch": "@@ -10,7 +10,7 @@ class Campfire extends Adapter\n     if strings.length > 0\n       @bot.Room(envelope.room).speak strings.shift(), (err, data) =>\n         @robot.logger.error \"Campfire error: #{err}\" if err?\n-        @send envelope.user, strings...\n+        @send envelope, strings...\n \n   reply: (envelope, strings...) ->\n     @send envelope, strings.map((str) -> \"#{envelope.user.name}: #{str}\")...", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/25d8d7ff599b5cd3535c67d5a01f39063586858f/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/25d8d7ff599b5cd3535c67d5a01f39063586858f/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=25d8d7ff599b5cd3535c67d5a01f39063586858f", "filename": "src/adapters/shell.coffee", "sha": "1b3d33cf54f263ccda9c22db2e4c4dd00ce1572a", "additions": 1, "patch": "@@ -14,7 +14,7 @@ class Shell extends Adapter\n \n   reply: (envelope, strings...) ->\n     strings = strings.map (s) -> \"#{envelope.user.name}: #{s}\"\n-    @send envelope.user, strings...\n+    @send envelope, strings...\n \n   run: ->\n     self = @", "changes": 2}], "504": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/babf764dd676e96f18702ab1ac6822d843cc1cfd/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/babf764dd676e96f18702ab1ac6822d843cc1cfd/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=babf764dd676e96f18702ab1ac6822d843cc1cfd", "filename": ".travis.yml", "sha": "d706ac2f91c6039fe38cc7b8bd72e1baabfff2b2", "additions": 3, "patch": "@@ -0,0 +1,3 @@\n+language: node_js\n+node_js:\n+  - \"0.8\"", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/babf764dd676e96f18702ab1ac6822d843cc1cfd/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/babf764dd676e96f18702ab1ac6822d843cc1cfd/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=babf764dd676e96f18702ab1ac6822d843cc1cfd", "filename": "package.json", "sha": "35c3c3fd1d3c8c8a83e4135c8624a86e11d5ef23", "additions": 3, "patch": "@@ -40,5 +40,8 @@\n \n   \"bin\": {\n     \"hubot\": \"./bin/hubot\"\n+  },\n+  \"scripts\": {\n+    \"test\": \"make\"\n   }\n }", "changes": 3}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/babf764dd676e96f18702ab1ac6822d843cc1cfd/test/httpd_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/babf764dd676e96f18702ab1ac6822d843cc1cfd/test/httpd_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/httpd_test.coffee?ref=babf764dd676e96f18702ab1ac6822d843cc1cfd", "filename": "test/httpd_test.coffee", "sha": "c644855543747aacd78ed68be77863e836360bfc", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n-process.env.CONNECT_STATIC = 'test/static/'\n+process.env.EXPRESS_STATIC = 'test/static/'\n Tests = require './tests'\n assert = require 'assert'\n helper = Tests.helper()", "changes": 2}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/babf764dd676e96f18702ab1ac6822d843cc1cfd/test/scripts/test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/babf764dd676e96f18702ab1ac6822d843cc1cfd/test/scripts/test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/scripts/test.coffee?ref=babf764dd676e96f18702ab1ac6822d843cc1cfd", "filename": "test/scripts/test.coffee", "sha": "0c4e37a55defacb7ce556804bf31fc4f90fef1d5", "additions": 16, "patch": "@@ -1,8 +1,21 @@\n-# Tests hubot listeners\n+# Description:\n+#   None\n+#\n+# Dependencies:\n+#   None\n+#\n+# Configuration:\n+#   None\n+#\n+# Commands:\n+#   hubot !! - Repeat the last command directed at hubot\n+#\n+# Author:\n+#   None\n module.exports = (robot) ->\n   assert = require 'assert'\n   robot.hear /static/i, (msg) ->\n-    msg.http('http://127.0.0.1/test').port(process.env.PORT or 8080)\n+    robot.http('http://127.0.0.1/test').port(process.env.PORT or 8080)\n       .get() (err, res, body) ->\n         msg.send body\n \n@@ -19,7 +32,7 @@ module.exports = (robot) ->\n     msg.send msg.random([1,2]).toString()\n \n   robot.hear /http/i, (msg) ->\n-    msg.http('http://127.0.0.1').port(9001)\n+    robot.http('http://127.0.0.1').port(9001)\n       .get() (err, res, body) ->\n         msg.send body\n ", "changes": 19}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/babf764dd676e96f18702ab1ac6822d843cc1cfd/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/babf764dd676e96f18702ab1ac6822d843cc1cfd/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=babf764dd676e96f18702ab1ac6822d843cc1cfd", "filename": "test/tests.coffee", "sha": "a72e80392ae0a7316495a92cabfa9c8cc5e8b948", "additions": 4, "patch": "@@ -45,6 +45,9 @@ class Helper extends Robot\n     @adapter = new Danger @\n     @alias = 'alias'\n \n+  loadAdapter: (path, adapter) ->\n+    # Don't need to actually load the adapter in tests\n+\n   stop: ->\n     process.exit 0\n \n@@ -71,5 +74,5 @@ if not process.env.HUBOT_LIVE\n   class Helper.Response extends Response\n     # This changes ever HTTP request to hit the danger server above\n     http: (url) ->\n-      super(url).host('127.0.0.1').port(9001)\n+      @robot.http(url).host('127.0.0.1').port(9001)\n ", "changes": 5}], "505": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f4b7c09c7340e84a255cf5c16fc070a0f32faa28/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f4b7c09c7340e84a255cf5c16fc070a0f32faa28/src/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=f4b7c09c7340e84a255cf5c16fc070a0f32faa28", "filename": "src/scripts/math.coffee", "sha": "a947f1f9aef87b9cc483c0ddddb57a69c15215be", "additions": 1, "patch": "@@ -5,7 +5,7 @@\n #   hubot math me <expression> - Calculate the given expression.\n #   hubot convert me <expression> to <units> - Convert expression to given units.\n module.exports = (robot) ->\n-  robot.respond /(calc|calculate|convert|math)( me)? (.*)/i, (msg) ->\n+  robot.respond /(calc|calculate|convert|math|maths)( me)? (.*)/i, (msg) ->\n     msg\n       .http('https://www.google.com/ig/calculator')\n       .query", "changes": 2}], "506": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/c15a56171ea1c26cf19f91a5dff6fe8660bb4452/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c15a56171ea1c26cf19f91a5dff6fe8660bb4452/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=c15a56171ea1c26cf19f91a5dff6fe8660bb4452", "filename": "src/scripts/auth.coffee", "sha": "d0c02823f36633b9d6eb2c0c3b7b88f1fb37f56b", "additions": 4, "patch": "@@ -65,7 +65,7 @@ module.exports = (robot) ->\n           msg.reply \"Sorry, the 'admin' role can only be defined in the HUBOT_AUTH_ADMIN env variable.\"\n         else\n           myRoles = msg.message.user.roles or []\n-          if msg.message.user.id.toString() in admins\n+          if msg.message.user.name.toString() in admins\n             user.roles.push(newRole)\n             msg.reply \"Ok, #{name} has the '#{newRole}' role.\"\n \n@@ -82,7 +82,7 @@ module.exports = (robot) ->\n         msg.reply \"Sorry, the 'admin' role can only be removed from the HUBOT_AUTH_ADMIN env variable.\"\n       else\n         myRoles = msg.message.user.roles or []\n-        if msg.message.user.id.toString() in admins\n+        if msg.message.user.name.toString() in admins\n           user.roles = (role for role in user.roles when role isnt newRole)\n           msg.reply \"Ok, #{name} doesn't have the '#{newRole}' role.\"\n \n@@ -92,7 +92,7 @@ module.exports = (robot) ->\n     return msg.reply \"#{name} does not exist\" unless user?\n     user.roles or= []\n \n-    if user.id.toString() in admins\n+    if user.name.toString() in admins\n       isAdmin = ' and is also an admin'\n     else\n       isAdmin = ''\n@@ -101,7 +101,7 @@ module.exports = (robot) ->\n   robot.respond /who has admin role\\?*$/i, (msg) ->\n     adminNames = []\n     for admin in admins\n-      user = robot.brain.userForId(admin)\n+      user = robot.brain.userForName(admin)\n       adminNames.push user.name if user?\n \n     msg.reply \"The following people have the 'admin' role: #{adminNames.join(', ')}\"", "changes": 8}], "508": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ff384dec1ed57349a0baf54dd76b3bd8ac24ab4c/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ff384dec1ed57349a0baf54dd76b3bd8ac24ab4c/src/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=ff384dec1ed57349a0baf54dd76b3bd8ac24ab4c", "filename": "src/scripts/translate.coffee", "sha": "673c2b84e2f82a2ac9371411baaa90fb08b87ed6", "additions": 6, "patch": "@@ -76,7 +76,12 @@ getCode = (language,languages) ->\n       return code if lang.toLowerCase() is language.toLowerCase()\n \n module.exports = (robot) ->\n-  robot.respond /(?:translate)(?: me)?(?:(?: from) ([a-z]*))?(?:(?: (?:in)?to) ([a-z]*))? (.*)/i, (msg) ->\n+  language_choices = (language for _, language of languages).sort().join('|')\n+  pattern = new RegExp('translate(?: me)?' +\n+                       \"(?: from (#{language_choices}))?\" +\n+                       \"(?: (?:in)?to (#{language_choices}))?\" +\n+                       '(.*)', 'i')\n+  robot.respond pattern, (msg) ->\n     term   = \"\\\"#{msg.match[3]}\\\"\"\n     origin = if msg.match[1] isnt undefined then getCode(msg.match[1], languages) else 'auto'\n     target = if msg.match[2] isnt undefined then getCode(msg.match[2], languages) else 'en'", "changes": 7}], "509": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/9b788ba946f45b2d01a087b7cf268a1c92922a78/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9b788ba946f45b2d01a087b7cf268a1c92922a78/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=9b788ba946f45b2d01a087b7cf268a1c92922a78", "filename": "src/scripts/auth.coffee", "sha": "b3fe4c200694bd343893b0c049ae8f788b685e81", "additions": 1, "patch": "@@ -88,7 +88,7 @@ module.exports = (robot) ->\n \n   robot.respond /(what role does|what roles does) @?(.+) (have)\\?*$/i, (msg) ->\n     name = msg.match[2].trim()\n-    user = robot.brain.userForId(msg.message.user.id)\n+    user = robot.brain.userForName(name)\n     return msg.reply \"#{name} does not exist\" unless user?\n     user.roles or= []\n ", "changes": 2}], "512": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/43ee84ba24e31c3ecd1fd2d2ac32298728ac81dc/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/43ee84ba24e31c3ecd1fd2d2ac32298728ac81dc/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=43ee84ba24e31c3ecd1fd2d2ac32298728ac81dc", "filename": "src/brain.coffee", "sha": "990ef2884138639c0bc95f90ba184ac9933b199c", "additions": 15, "patch": "@@ -6,12 +6,15 @@ class Brain extends EventEmitter\n   # Represents somewhat persistent storage for the robot. Extend this.\n   #\n   # Returns a new Brain with no external storage.\n-  constructor: ->\n+  constructor: (robot) ->\n     @data =\n       users:    { }\n       _private: { }\n-      \n-    @resetSaveInterval 5\n+\n+    @autoSave = true\n+\n+    robot.on \"running\", =>\n+      @resetSaveInterval 5\n \n   # Public: Store key-value pair under the private namespace and extend\n   # existing @data before emitting the 'loaded' event.\n@@ -58,6 +61,14 @@ class Brain extends EventEmitter\n     @save()\n     @emit 'close'\n \n+  # Public: Enable or disable the automatic saving\n+  # \n+  # enabled - A boolean whether to autosave or not\n+  # \n+  # Returns nothing\n+  setAutoSave: (enabled) ->\n+    @autoSave = enabled\n+\n   # Public: Reset the interval between save function calls.\n   #\n   # seconds - An Integer of seconds between saves.\n@@ -66,7 +77,7 @@ class Brain extends EventEmitter\n   resetSaveInterval: (seconds) ->\n     clearInterval @saveInterval if @saveInterval\n     @saveInterval = setInterval =>\n-      @save()\n+      @save() if @autoSave\n     , seconds * 1000\n \n   # Public: Merge keys loaded from a DB against the in memory representation.", "changes": 19}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/43ee84ba24e31c3ecd1fd2d2ac32298728ac81dc/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/43ee84ba24e31c3ecd1fd2d2ac32298728ac81dc/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=43ee84ba24e31c3ecd1fd2d2ac32298728ac81dc", "filename": "src/robot.coffee", "sha": "ef9d7896f3c7db9d699fbc65246f47e6569270a5", "additions": 2, "patch": "@@ -38,8 +38,8 @@ class Robot\n   # Returns nothing.\n   constructor: (adapterPath, adapter, httpd, name = 'Hubot') ->\n     @name      = name\n-    @brain     = new Brain\n     @events    = new EventEmitter\n+    @brain     = new Brain @\n     @alias     = false\n     @adapter   = null\n     @Response  = Response\n@@ -369,6 +369,7 @@ class Robot\n   #\n   # Returns nothing.\n   run: ->\n+    @emit \"running\"\n     @adapter.run()\n \n   # Public: Gracefully shutdown the robot process", "changes": 3}], "515": [{"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/a440910727b7296d22cc5336926f52f078ab2bcd/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a440910727b7296d22cc5336926f52f078ab2bcd/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=a440910727b7296d22cc5336926f52f078ab2bcd", "filename": "src/adapters/campfire.coffee", "sha": "769c22aedf6c8812adaa33248e0633981600d0d2", "additions": 35, "patch": "@@ -8,9 +8,14 @@ Adapter                                              = require '../adapter'\n class Campfire extends Adapter\n   send: (envelope, strings...) ->\n     if strings.length > 0\n-      @bot.Room(envelope.room).speak strings.shift(), (err, data) =>\n-        @robot.logger.error \"Campfire error: #{err}\" if err?\n+      string = strings.shift()\n+      if typeof(string) == 'function'\n+        string()\n         @send envelope, strings...\n+      else\n+        @bot.Room(envelope.room).speak string, (err, data) =>\n+          @robot.logger.error \"Campfire error: #{err}\" if err?\n+          @send envelope, strings...\n \n   reply: (envelope, strings...) ->\n     @send envelope, strings.map((str) -> \"#{envelope.user.name}: #{str}\")...\n@@ -24,6 +29,17 @@ class Campfire extends Adapter\n       @robot.logger.error \"Campfire error: #{err}\" if err?\n       @play envelope, strings...\n \n+  locked: (envelope, strings...) ->\n+    if envelope.message.private\n+      @send envelope, strings...\n+    else\n+      @bot.Room(envelope.room).lock (args...) =>\n+        strings.push =>\n+          # campfire won't send messages from just before a room unlock. 3000\n+          # is the 3-second poll.\n+          setTimeout (=> @bot.Room(envelope.room).unlock()), 3000\n+        @send envelope, strings...\n+\n   run: ->\n     self = @\n \n@@ -50,7 +66,9 @@ class Campfire extends Adapter\n     bot.on \"TextMessage\",\n       withAuthor (id, created, room, user, body, author) ->\n         unless bot.info.id is author.id\n-          self.receive new TextMessage author, body, id\n+          message = new TextMessage author, body, id\n+          message.private = bot.private[room]\n+          self.receive message\n \n     bot.on \"EnterMessage\",\n       withAuthor (id, created, room, user, body, author) ->\n@@ -67,6 +85,14 @@ class Campfire extends Adapter\n         unless bot.info.id is author.id\n           self.receive new TopicMessage author, body, id\n \n+    bot.on \"LockMessage\",\n+      withAuthor (id, created, room, user, body, author) ->\n+        bot.private[room] = true\n+\n+    bot.on \"UnlockMessage\",\n+      withAuthor (id, created, room, user, body, author) ->\n+        bot.private[room] = false\n+\n     bot.Me (err, data) ->\n       bot.info = data.user\n       bot.name = bot.info.name\n@@ -99,6 +125,7 @@ class CampfireStreaming extends EventEmitter\n     @account       = options.account\n     @host          = @account + \".campfirenow.com\"\n     @authorization = \"Basic \" + new Buffer(\"#{@token}:x\").toString(\"base64\")\n+    @private       = {}\n \n   Rooms: (callback) ->\n     @get \"/rooms\", callback\n@@ -256,10 +283,11 @@ class CampfireStreaming extends EventEmitter\n             else\n               logger.error \"Campfire error: #{response.statusCode}\"\n \n-        try\n-          callback null, JSON.parse(data)\n-        catch error\n-          callback null, data or { }\n+        if callback\n+          try\n+            callback null, JSON.parse(data)\n+          catch error\n+            callback null, data or { }\n \n       response.on \"error\", (err) ->\n         logger.error \"Campfire response error: #{err}\"", "changes": 42}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a440910727b7296d22cc5336926f52f078ab2bcd/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a440910727b7296d22cc5336926f52f078ab2bcd/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=a440910727b7296d22cc5336926f52f078ab2bcd", "filename": "src/response.coffee", "sha": "1627516066327fcd502d96023be6e68a382e4411", "additions": 9, "patch": "@@ -48,6 +48,15 @@ class Response\n   play: (strings...) ->\n     @robot.adapter.play @envelope, strings...\n \n+  # Public: Posts a message in an unlogged room\n+  #\n+  # strings - One or more strings to be posted. The order of these strings\n+  #           should be kept intact.\n+  #\n+  # Returns nothing\n+  locked: (strings...) ->\n+    @robot.adapter.locked @envelope, strings...\n+\n   # Public: Picks a random item from the given items.\n   #\n   # items - An Array of items.", "changes": 9}], "520": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/5c14ec90dd613e693adb18952b5425f1601f77de/src/scripts/youtube.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5c14ec90dd613e693adb18952b5425f1601f77de/src/scripts/youtube.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/youtube.coffee?ref=5c14ec90dd613e693adb18952b5425f1601f77de", "filename": "src/scripts/youtube.coffee", "sha": "702c4e27147fab31cbe17a31b02a6edc501af897", "additions": 6, "patch": "@@ -6,7 +6,7 @@\n module.exports = (robot) ->\n   robot.respond /(youtube|yt)( me)? (.*)/i, (msg) ->\n     query = msg.match[3]\n-    msg.http(\"http://gdata.youtube.com/feeds/api/videos\")\n+    robot.http(\"http://gdata.youtube.com/feeds/api/videos\")\n       .query({\n         orderBy: \"relevance\"\n         'max-results': 15\n@@ -16,8 +16,12 @@ module.exports = (robot) ->\n       .get() (err, res, body) ->\n         videos = JSON.parse(body)\n         videos = videos.feed.entry\n-        video  = msg.random videos\n \n+        unless videos?\n+          msg.send \"No video results for \\\"#{query}\\\"\"\n+          return\n+\n+        video  = msg.random videos\n         video.link.forEach (link) ->\n           if link.rel is \"alternate\" and link.type is \"text/html\"\n             msg.send link.href", "changes": 8}], "521": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a4a7e21d340dd1ecc4e71b4e470ac7d517df0f3d/src/templates/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/a4a7e21d340dd1ecc4e71b4e470ac7d517df0f3d/src/templates/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/package.json?ref=a4a7e21d340dd1ecc4e71b4e470ac7d517df0f3d", "filename": "src/templates/package.json", "sha": "2637871cdbd8d1606a1f03527dfed90a8f8e7dae", "additions": 4, "patch": "@@ -31,5 +31,9 @@\n   \"engines\": {\n     \"node\": \">= 0.8.x\",\n     \"npm\":  \">= 1.1.x\"\n+  },\n+\n+  \"scripts\": {\n+    \"start\": \"bin/hubot -a campfire -n Hubot\"\n   }\n }", "changes": 4}], "524": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f87d87e6e6df6cc40d2a60a57ae70fe63d9264f3/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/f87d87e6e6df6cc40d2a60a57ae70fe63d9264f3/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=f87d87e6e6df6cc40d2a60a57ae70fe63d9264f3", "filename": "docs/README.md", "sha": "c5caf96d1c679f0239f01fdb8cea95ac70ecdfad", "additions": 1, "patch": "@@ -7,7 +7,7 @@ an [excellent blog post on how to those installed](http://joyent.com/blog/instal\n \n Once node and npm are ready, we can install hubot and coffeescript:\n \n-    % npm install -g hubot coffeescript\n+    % npm install -g hubot coffee-script\n     \n This will give us the `hubot` script, which is used for running a hubot, but\n more importantly to start, generating your own hubot. The name of the new bot is", "changes": 2}], "529": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/2c09c65c9af3f2040dd534cd80079fc364458c24/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/2c09c65c9af3f2040dd534cd80079fc364458c24/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=2c09c65c9af3f2040dd534cd80079fc364458c24", "filename": "README.md", "sha": "eb8bd403f43ba5fd64d203fca9df1da1e69ad178", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n # Hubot\n \n-This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n+This is a version of GitHub's Campfire bot, hubot. He's pretty awesome.\n \n **You'll probably never have to hack on this repo directly.**\n ", "changes": 2}], "532": [{"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/e088699ec938d998a1375e9e7c50025756aa5d50/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e088699ec938d998a1375e9e7c50025756aa5d50/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=e088699ec938d998a1375e9e7c50025756aa5d50", "filename": "src/scripts/help.coffee", "sha": "354d95b312f608dfbe5c66b1a49144d12fa9983e", "additions": 10, "patch": "@@ -53,18 +53,21 @@ helpContents = (name, commands) ->\n module.exports = (robot) ->\n   robot.respond /help\\s*(.*)?$/i, (msg) ->\n     cmds = robot.helpCommands()\n+    filter = msg.match[1]\n \n-    if msg.match[1]\n+    if filter\n       cmds = cmds.filter (cmd) ->\n-        cmd.match new RegExp(msg.match[1], 'i')\n-\n+        cmd.match new RegExp(filter, 'i')\n       if cmds.length == 0\n-        msg.send \"No available commands match #{msg.match[1]}\"\n+        msg.send \"No available commands match #{filter}\"\n         return\n-    emit = cmds.join \"\\n\"\n \n-    unless robot.name.toLowerCase() is 'hubot'\n-      emit = emit.replace /hubot/ig, robot.name\n+    prefix = robot.alias or \"#{robot.name} \"\n+    cmds = cmds.map (cmd) ->\n+      cmd = cmd.replace /^hubot /, prefix\n+      cmd.replace /hubot/ig, robot.name\n+\n+    emit = cmds.join \"\\n\"\n \n     msg.send emit\n ", "changes": 17}], "533": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/46b9ed02027390efa7d0d72b6b627d2c81528ec8/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/46b9ed02027390efa7d0d72b6b627d2c81528ec8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=46b9ed02027390efa7d0d72b6b627d2c81528ec8", "filename": "CHANGELOG.md", "sha": "8f1ec7ead6f24ad87e2a1438ff5b0af66b9951d0", "additions": 11, "patch": "@@ -1,3 +1,14 @@\n+v2.6.1\n+======\n+\n+* Show robot.alias in help commands if defined - technicalpickles\n+* Epic documentation update - technicalpickels\n+* Remove tweet.coffee from generated hubot-scripts.json since it has a npm dependency - tombell\n+* Don't load roles.coffee if using auth.coffee - tombell\n+* Make sure to clear interval for pinging Heroku URL - tombell\n+* Fix deprecation warning in youtube.coffee - timclipsham\n+* Fix youtube results bug - timclipsham\n+\n v2.6.0\n ======\n ", "changes": 11}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/46b9ed02027390efa7d0d72b6b627d2c81528ec8/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/46b9ed02027390efa7d0d72b6b627d2c81528ec8/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=46b9ed02027390efa7d0d72b6b627d2c81528ec8", "filename": "package.json", "sha": "74575a5a85638447163fc79cd2c789499a8ff55b", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.6.0\",\n+  \"version\": \"2.6.1\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}], "535": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/752f71282ccebf1c105e2efb679c06a40ab2e043/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/752f71282ccebf1c105e2efb679c06a40ab2e043/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=752f71282ccebf1c105e2efb679c06a40ab2e043", "filename": ".travis.yml", "sha": "0fc18f6ea18a40e3f83ab3d7bab5e7b57f012b6c", "additions": 6, "patch": "@@ -0,0 +1,6 @@\n+language: node_js\n+node_js:\n+  - \"0.11\"\n+  - \"0.10\"\n+notifications:\n+  email: false", "changes": 6}, {"status": "removed", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/e21ee83d2bcf9591edd5ac4e6e7cf71e1dcc22df/Makefile", "blob_url": "https://github.com/hubotio/hubot/blob/e21ee83d2bcf9591edd5ac4e6e7cf71e1dcc22df/Makefile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Makefile?ref=e21ee83d2bcf9591edd5ac4e6e7cf71e1dcc22df", "filename": "Makefile", "sha": "7f7f64bbe6259a922aed67760c071e0dd1b7bf3e", "additions": 0, "patch": "@@ -1,14 +0,0 @@\n-NPM_EXECUTABLE_HOME := node_modules/.bin\n-\n-PATH := ${NPM_EXECUTABLE_HOME}:${PATH}\n-\n-test: deps\n-\t@./node_modules/nodeunit/bin/nodeunit --reporter minimal test\n-\n-package:\n-\t@bin/hubot -c hubot\n-\t@chmod 0755 hubot/bin/hubot\n-\n-deps:\n-\n-.PHONY: all", "changes": 14}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/752f71282ccebf1c105e2efb679c06a40ab2e043/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/752f71282ccebf1c105e2efb679c06a40ab2e043/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=752f71282ccebf1c105e2efb679c06a40ab2e043", "filename": "package.json", "sha": "19ac388262c303c78c88339fa6d83df7178005b1", "additions": 4, "patch": "@@ -43,6 +43,10 @@\n     \"npm\": \">= 1.2.x\"\n   },\n \n+  \"scripts\": {\n+    \"test\": \"script/test\"\n+  },\n+\n   \"main\": \"./index\",\n \n   \"bin\": {", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/752f71282ccebf1c105e2efb679c06a40ab2e043/test/response_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/752f71282ccebf1c105e2efb679c06a40ab2e043/test/response_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/response_test.coffee?ref=752f71282ccebf1c105e2efb679c06a40ab2e043", "filename": "test/response_test.coffee", "sha": "0ede88b193c535b05dd02eaffd01a54ad97c14ca", "additions": 0, "patch": "@@ -24,7 +24,6 @@ describe 'Response', ->\n       room: 123\n       user: \"thisguy\"\n \n-\n     @envelope =\n       message: @message\n       room: @message.room\n@@ -49,7 +48,6 @@ describe 'Response', ->\n       expect(@response.envelope.user).to.equal(\"thisguy\")\n       expect(@response.envelope.message).to.equal(@message)\n \n-\n   describe 'send', ->\n     it 'calls the adapter', ->\n       @response.send('what', 'up')", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/752f71282ccebf1c105e2efb679c06a40ab2e043/test/user_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/752f71282ccebf1c105e2efb679c06a40ab2e043/test/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/user_test.coffee?ref=752f71282ccebf1c105e2efb679c06a40ab2e043", "filename": "test/user_test.coffee", "sha": "105dd38f6144e0c89a23710a42adadb19049c3b9", "additions": 3, "patch": "@@ -5,15 +5,16 @@ describe 'User', ->\n   describe 'new', ->\n     it 'uses id as the default name', ->\n       user = new User('hubot')\n+\n       expect(user.name).to.equal('hubot')\n \n     it 'sets attributes passed in', ->\n       user = new User('hubot', foo: 1, bar: 2)\n+\n       expect(user.foo).to.equal(1)\n       expect(user.bar).to.equal(2)\n \n     it 'uses name attribute when passed in, not id', ->\n       user = new User('hubot', name: 'tobuh')\n-      expect(user.name).to.equal('tobuh')\n-\n \n+      expect(user.name).to.equal('tobuh')", "changes": 5}], "536": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/dcd94d44d4360b6616b684212b6fa74750ffb415/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/dcd94d44d4360b6616b684212b6fa74750ffb415/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=dcd94d44d4360b6616b684212b6fa74750ffb415", "filename": "docs/README.md", "sha": "ea26491482545c09e10b5cef1a2515269ee9be22", "additions": 1, "patch": "@@ -30,7 +30,7 @@ and then launching your hubot.\n     % bin/hubot\n     Hubot>\n \n-This starts hubot using the [shell adapter](docs/adapters/shell.md), which\n+This starts hubot using the [shell adapter](adapters/shell.md), which\n is mostly useful for development. Make note of  `Hubot>`; this is the name he'll\n `respond` to with commands. For example, to list available commands:\n ", "changes": 2}], "538": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/92796ed27a7ef292a4c0ab43ff8ad1be315f7356/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/92796ed27a7ef292a4c0ab43ff8ad1be315f7356/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=92796ed27a7ef292a4c0ab43ff8ad1be315f7356", "filename": ".travis.yml", "sha": "172a680ac56f5064bd1e9ee268aac7bcefdfcdf6", "additions": 3, "patch": "@@ -2,5 +2,8 @@ language: node_js\n node_js:\n   - \"0.11\"\n   - \"0.10\"\n+branches:\n+  except:\n+    - master\n notifications:\n   email: false", "changes": 3}], "539": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=f7ef708cfbe2ead46781b99a6f8be101deb9a1ec", "filename": ".travis.yml", "sha": "172a680ac56f5064bd1e9ee268aac7bcefdfcdf6", "additions": 9, "patch": "@@ -0,0 +1,9 @@\n+language: node_js\n+node_js:\n+  - \"0.11\"\n+  - \"0.10\"\n+branches:\n+  except:\n+    - master\n+notifications:\n+  email: false", "changes": 9}, {"status": "removed", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/Makefile", "blob_url": "https://github.com/hubotio/hubot/blob/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/Makefile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Makefile?ref=576b0e3106e1070bbe7473ad43ee9f3acd6f78fb", "filename": "Makefile", "sha": "7f7f64bbe6259a922aed67760c071e0dd1b7bf3e", "additions": 0, "patch": "@@ -1,14 +0,0 @@\n-NPM_EXECUTABLE_HOME := node_modules/.bin\n-\n-PATH := ${NPM_EXECUTABLE_HOME}:${PATH}\n-\n-test: deps\n-\t@./node_modules/nodeunit/bin/nodeunit --reporter minimal test\n-\n-package:\n-\t@bin/hubot -c hubot\n-\t@chmod 0755 hubot/bin/hubot\n-\n-deps:\n-\n-.PHONY: all", "changes": 14}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=f7ef708cfbe2ead46781b99a6f8be101deb9a1ec", "filename": "package.json", "sha": "19ac388262c303c78c88339fa6d83df7178005b1", "additions": 8, "patch": "@@ -32,14 +32,21 @@\n   },\n \n   \"devDependencies\": {\n-    \"nodeunit\":           \"0.8.1\"\n+    \"chai\": \"*\",\n+    \"mocha\": \"*\",\n+    \"sinon-chai\": \"*\",\n+    \"sinon\": \"*\"\n   },\n \n   \"engines\": {\n     \"node\": \">= 0.10.x\",\n     \"npm\": \">= 1.2.x\"\n   },\n \n+  \"scripts\": {\n+    \"test\": \"script/test\"\n+  },\n+\n   \"main\": \"./index\",\n \n   \"bin\": {", "changes": 9}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/script/bootstrap", "blob_url": "https://github.com/hubotio/hubot/blob/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/script/bootstrap", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/bootstrap?ref=f7ef708cfbe2ead46781b99a6f8be101deb9a1ec", "filename": "script/bootstrap", "sha": "30e87e12cd8cfee86a6f46130c06446469204c66", "additions": 18, "patch": "@@ -0,0 +1,18 @@\n+#!/bin/bash\n+\n+# Make sure everything is development forever\n+export NODE_ENV=development\n+\n+# Load environment specific environment variables\n+if [ -f .env ]; then \n+  source .env\n+fi\n+\n+if [ -f .env.${NODE_ENV} ]; then\n+  source .env.${NODE_ENV}\n+fi\n+\n+npm install\n+\n+# Make sure coffee and mocha are on the path\n+export PATH=\"node_modules/.bin:$PATH\"", "changes": 18}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/script/test", "blob_url": "https://github.com/hubotio/hubot/blob/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/script/test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/test?ref=f7ef708cfbe2ead46781b99a6f8be101deb9a1ec", "filename": "script/test", "sha": "bd23cb911493255fc5a0270b74545dfec3dedd18", "additions": 6, "patch": "@@ -0,0 +1,6 @@\n+#!/bin/bash\n+\n+# bootstrap environment\n+source script/bootstrap\n+\n+mocha --compilers coffee:coffee-script  ", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=f7ef708cfbe2ead46781b99a6f8be101deb9a1ec", "filename": "src/message.coffee", "sha": "57e479a2fe579833c01978c90abedfd180704056", "additions": 3, "patch": "@@ -2,10 +2,12 @@ class Message\n   # Represents an incoming message from the chat.\n   #\n   constructor: (@type, options) ->\n+    options ?= {}\n     @user = options.user\n-    @room = @user.room\n+    @room = @user?.room\n     @text = options.text\n     @id = options.id\n+    @done = false\n \n   # Indicates that no other Listener should be called on this object\n   #", "changes": 4}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/test/adapter_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/test/adapter_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/adapter_test.coffee?ref=f7ef708cfbe2ead46781b99a6f8be101deb9a1ec", "filename": "test/adapter_test.coffee", "sha": "1903f71cd489b67afd012ef6651ea6765967fbf4", "additions": 79, "patch": "@@ -0,0 +1,79 @@\n+chai = require 'chai'\n+sinon = require 'sinon'\n+chai.use require 'sinon-chai'\n+\n+expect = chai.expect\n+\n+Adapter = require '../src/adapter.coffee'\n+\n+\n+describe 'Adapter', ->\n+  beforeEach ->\n+    @robot =\n+      receive: sinon.spy()\n+\n+  # this one is hard, as it requires files\n+  it \"can load adapter by name\"\n+\n+  describe 'Public API', ->\n+    beforeEach ->\n+      @adapter = new Adapter(@robot)\n+\n+    describe 'send', ->\n+      it 'is a function', ->\n+        expect(@adapter.send).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.send({}, 'nothing')\n+\n+    describe 'reply', ->\n+      it 'is a function', ->\n+        expect(@adapter.reply).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.reply({}, 'nothing')\n+\n+    describe 'topic', ->\n+      it 'is a function', ->\n+        expect(@adapter.topic).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.topic({}, 'nothing')\n+\n+    describe 'topic', ->\n+      it 'is a function', ->\n+        expect(@adapter.topic).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.topic({}, 'nothing')\n+\n+    describe 'play', ->\n+      it 'is a function', ->\n+        expect(@adapter.play).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.play({}, 'nothing')\n+\n+    describe 'run', ->\n+      it 'is a function', ->\n+        expect(@adapter.run).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.run()\n+\n+    describe 'close', ->\n+      it 'is a function', ->\n+        expect(@adapter.close).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.close()\n+\n+\n+  it 'dispatches received messages to the robot', ->\n+    @robot.receive = sinon.spy()\n+    @adapter = new Adapter(@robot)\n+    @message = sinon.spy()\n+    \n+    @adapter.receive(@message)\n+\n+    expect(@robot.receive).to.have.been.calledWith(@message)", "changes": 79}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/test/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.coffee?ref=f7ef708cfbe2ead46781b99a6f8be101deb9a1ec", "filename": "test/brain_test.coffee", "sha": "c3dc89d5a4ecfca256b4697bda6ed422d4f01817", "additions": 103, "patch": "@@ -0,0 +1,103 @@\n+chai = require 'chai'\n+sinon = require 'sinon'\n+chai.use require 'sinon-chai'\n+\n+expect = chai.expect\n+\n+Brain = require '../src/brain.coffee'\n+\n+describe \"Brain\", ->\n+\n+  beforeEach ->\n+    @clock = sinon.useFakeTimers()\n+\n+  afterEach ->\n+    @clock.restore()\n+\n+  describe 'new', ->\n+    beforeEach ->\n+      @brain = new Brain\n+\n+    it 'has data for users and private', ->\n+      expect(@brain.data).to.have.keys('users', '_private')\n+\n+    it 'waits to be connected before setting a save interval', ->\n+      expect(@brain.saveInterval).to.not.exist\n+\n+    it 'sets save interval to 5 seconds after being connected', ->\n+      @brain.resetSaveInterval = sinon.spy()\n+\n+      expect(@brain.resetSaveInterval).to.not.have.been.called\n+      @brain.emit('connected')\n+      expect(@brain.resetSaveInterval).to.have.been.calledWith(5)\n+\n+  describe 'resetSaveInterval', ->\n+    beforeEach ->\n+      @brain = new Brain\n+      @saveSpy = sinon.spy()\n+      @brain.on 'save', @saveSpy\n+\n+    it 'remembers the interval', ->\n+      @brain.resetSaveInterval(1)\n+\n+      expect(@brain.saveInterval).to.exist\n+\n+    it 'actually sets an interval', ->\n+      @brain.resetSaveInterval(1)\n+\n+      expect(@clock.timeouts).to.have.property(@brain.saveInterval)\n+\n+    it 'clears a previous interval', ->\n+      @brain.resetSaveInterval(1)\n+      oldSaveInterval = @brain.saveInterval\n+      @brain.resetSaveInterval(1)\n+\n+      expect(@clock.timeouts).to.not.have.property(oldSaveInterval)\n+\n+    it 'does not save before the interval but saves after the interval', ->\n+      @brain.resetSaveInterval(5)\n+\n+      @clock.tick(4999)\n+      expect(@saveSpy).to.have.not.been.called\n+\n+      @clock.tick(2)\n+      expect(@saveSpy).to.have.been.called\n+\n+  describe 'saving', ->\n+    beforeEach ->\n+      @brain = new Brain\n+\n+    it 'emits save', ->\n+      save = sinon.spy()\n+      @brain.on 'save', save\n+\n+      @brain.save()\n+\n+      expect(save).to.have.been.called\n+\n+  describe 'closing a connected brain', ->\n+    beforeEach ->\n+      @brain = new Brain\n+      @brain.emit 'connected'\n+      \n+      @closeSpy = sinon.spy()\n+      @brain.on 'close', @closeSpy\n+\n+      @saveSpy = sinon.spy()\n+      @brain.on 'save', @saveSpy\n+\n+    it 'clears the interval', ->\n+      @brain.close()\n+\n+      expect(@clock.timeouts).to.not.have.property(@brain.saveInterval)\n+\n+    it 'saves', ->\n+      @brain.close()\n+\n+      expect(@saveSpy).to.have.been.called\n+\n+    it 'emits close', ->\n+      @brain.close()\n+\n+      expect(@closeSpy).to.have.been.called\n+", "changes": 103}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/test/message_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/test/message_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/message_test.coffee?ref=f7ef708cfbe2ead46781b99a6f8be101deb9a1ec", "filename": "test/message_test.coffee", "sha": "2571270032767f5974644b1a163fadddd3e45c21", "additions": 40, "patch": "@@ -0,0 +1,40 @@\n+{expect} = require 'chai'\n+Message = require '../src/message.coffee'\n+\n+describe \"Message\", ->\n+\n+  it \"knows its user and room\", ->\n+    room = 123\n+    user = {room: room}\n+    message = new Message 'text', user: user\n+\n+    expect(message.user).to.equal(user)\n+    expect(message.room).to.equal(room)\n+\n+  it \"knows its text\", ->\n+    text = \"omgwtfbbq\"\n+    message = new Message 'text', user: {room: 123}, text: text\n+\n+    expect(message.text).to.equal(text)\n+\n+  it \"knows its id\", ->\n+    message = new Message 'text', id: 1337\n+\n+    expect(message.id).to.equal(1337)\n+\n+  it \"is finishable\", ->\n+    message = new Message 'text'\n+\n+    expect(message.done).to.be.false\n+    message.finish()\n+    expect(message.done).to.be.true\n+\n+  it \"matches text message  when the text matches the regex\", ->\n+    message = new Message 'text', text: \"omgwtfbbq\"\n+\n+    expect(message.match(/omg/)).to.be.ok\n+\n+  it \"doesn't match text message  when the text doesn't matches the regex\", ->\n+    message = new Message 'text', text: \"omgwtfbbq\"\n+\n+    expect(message.match(/lol/)).to.not.be.ok", "changes": 40}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/test/response_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/test/response_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/response_test.coffee?ref=f7ef708cfbe2ead46781b99a6f8be101deb9a1ec", "filename": "test/response_test.coffee", "sha": "0ede88b193c535b05dd02eaffd01a54ad97c14ca", "additions": 96, "patch": "@@ -0,0 +1,96 @@\n+chai = require 'chai'\n+sinon = require 'sinon'\n+chai.use require 'sinon-chai'\n+\n+expect = chai.expect\n+\n+Response = require '../src/response.coffee'\n+\n+describe 'Response', ->\n+  beforeEach ->\n+    @adapter =\n+      send: sinon.spy()\n+      reply: sinon.spy()\n+      topic: sinon.spy()\n+      play: sinon.spy()\n+      locked: sinon.spy()\n+\n+    @robot =\n+      adapter: @adapter\n+      http: sinon.spy()\n+\n+    @message =\n+      finish: sinon.spy()\n+      room: 123\n+      user: \"thisguy\"\n+\n+    @envelope =\n+      message: @message\n+      room: @message.room\n+      user: @message.user\n+\n+    @match = \"thisguy\".match(/guy/)\n+\n+    @response = new Response(@robot, @message, @match)\n+\n+  describe 'new', ->\n+    it 'sets the robot', ->\n+      expect(@response.robot).to.equal(@robot)\n+\n+    it 'sets the message', ->\n+      expect(@response.message).to.equal(@message)\n+\n+    it 'sets the match', ->\n+      expect(@response.match).to.equal(@match)\n+\n+    it 'builds an envelope containing the room, user, and message', ->\n+      expect(@response.envelope.room).to.equal(123)\n+      expect(@response.envelope.user).to.equal(\"thisguy\")\n+      expect(@response.envelope.message).to.equal(@message)\n+\n+  describe 'send', ->\n+    it 'calls the adapter', ->\n+      @response.send('what', 'up')\n+\n+      expect(@adapter.send).to.have.been.calledWith(@envelope, 'what', 'up')\n+\n+  describe 'reply', ->\n+    it 'calls the adapter', ->\n+      @response.reply('soooo', 'about that...')\n+\n+      expect(@adapter.reply).to.have.been.calledWith(@envelope, 'soooo', 'about that...')\n+\n+  describe 'topic', ->\n+    it 'calls the adapter', ->\n+      @response.topic('for a limited time only...')\n+\n+      expect(@adapter.topic).to.have.been.calledWith(@envelope, 'for a limited time only...')\n+\n+  describe 'play', ->\n+    it 'calls the adapter', ->\n+      @response.play('trombone', 'tmyk')\n+\n+      expect(@adapter.play).to.have.been.calledWith(@envelope, 'trombone', 'tmyk')\n+\n+  describe 'locked', ->\n+    it 'calls the adapter', ->\n+      @response.locked('there is no spoon')\n+\n+      expect(@adapter.locked).to.have.been.calledWith(@envelope, 'there is no spoon')\n+\n+\n+  describe 'random', ->\n+    it 'returns a random element of an array'\n+      # how do you test random, lol\n+  \n+  describe 'finish', ->\n+    it 'marks the message as finished', ->\n+      @response.finish()\n+\n+      expect(@response.message.finish).to.have.been.called\n+\n+  describe 'http', ->\n+    it 'calls to the robot', ->\n+      @response.http('http://youtube.com')\n+\n+      expect(@robot.http).to.have.been.calledWith('http://youtube.com')", "changes": 96}, {"status": "removed", "deletions": 11, "raw_url": "https://github.com/hubotio/hubot/raw/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test/sanity_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test/sanity_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/sanity_test.coffee?ref=576b0e3106e1070bbe7473ad43ee9f3acd6f78fb", "filename": "test/sanity_test.coffee", "sha": "28e40039854c4f44badd0c20b5ec31d7c7781ea6", "additions": 0, "patch": "@@ -1,11 +0,0 @@\n-suite =\n-\n-  \"sanity check\": (test) ->\n-    test.ok true, \"true should be true\"\n-    test.done()\n-\n-  # \"fail check\": (test) ->\n-  #   test.ok true is false, \"should fail\"\n-  #   test.done()\n-\n-module.exports = suite", "changes": 11}, {"status": "modified", "deletions": 30, "raw_url": "https://github.com/hubotio/hubot/raw/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/test/user_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f7ef708cfbe2ead46781b99a6f8be101deb9a1ec/test/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/user_test.coffee?ref=f7ef708cfbe2ead46781b99a6f8be101deb9a1ec", "filename": "test/user_test.coffee", "sha": "105dd38f6144e0c89a23710a42adadb19049c3b9", "additions": 14, "patch": "@@ -1,36 +1,20 @@\n-User = require '../src/user'\n+{expect} = require 'chai'\n+User = require '../src/user.coffee'\n \n-suite =\n+describe 'User', ->\n+  describe 'new', ->\n+    it 'uses id as the default name', ->\n+      user = new User('hubot')\n \n-  'can create a user': (test) ->\n-    user = new User 1\n-    test.ok user\n-    test.ok user.id is 1\n-    test.done()\n+      expect(user.name).to.equal('hubot')\n \n-  'can create a user with optional key value pairs': (test) ->\n-    user = new User 1, location: 'San Francisco'\n-    test.ok user\n-    test.ok user.location is 'San Francisco'\n-    test.done()\n+    it 'sets attributes passed in', ->\n+      user = new User('hubot', foo: 1, bar: 2)\n \n-  'can create a user with a name': (test) ->\n-    user = new User 1, name: 'Hubot'\n-    test.ok user\n-    test.ok user.name is 'Hubot'\n-    test.done()\n+      expect(user.foo).to.equal(1)\n+      expect(user.bar).to.equal(2)\n \n-  'can create a user without a name, defaults name to id': (test) ->\n-    user = new User 1\n-    test.ok user\n-    test.ok user.name is user.id\n-    test.done()\n+    it 'uses name attribute when passed in, not id', ->\n+      user = new User('hubot', name: 'tobuh')\n \n-  'can create a user with multiple key value pairs': (test) ->\n-    user = new User 1, name: 'Hubot', email: 'hubot@github.com'\n-    test.ok user\n-    test.ok user.name is 'Hubot'\n-    test.ok user.email is 'hubot@github.com'\n-    test.done()\n-\n-module.exports = suite\n+      expect(user.name).to.equal('tobuh')", "changes": 44}, {"status": "removed", "deletions": 25, "raw_url": "https://github.com/hubotio/hubot/raw/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test_obselete/brain_test.coffee?ref=576b0e3106e1070bbe7473ad43ee9f3acd6f78fb", "filename": "test_obselete/brain_test.coffee", "sha": "d970598c6511f776794eb65c794d853d2ccec2b3", "additions": 0, "patch": "@@ -1,25 +0,0 @@\n-assert = require 'assert'\n-\n-Brain  = require '../src/brain'\n-\n-saved   = false\n-closing = false\n-closed  = false\n-\n-brain = new Brain\n-\n-brain.on 'save', (data) ->\n-  is_closing = closing\n-  saved = closing = true\n-  brain.close() if !is_closing\n-  assert.equal 1, data.abc\n-\n-brain.on 'close', ->\n-  closed = true\n-\n-brain.data.abc = 1\n-brain.resetSaveInterval 0.1\n-\n-process.on 'exit', ->\n-  assert.ok saved\n-  assert.ok closed", "changes": 25}, {"status": "removed", "deletions": 50, "raw_url": "https://github.com/hubotio/hubot/raw/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/google_images_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/google_images_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test_obselete/google_images_test.coffee?ref=576b0e3106e1070bbe7473ad43ee9f3acd6f78fb", "filename": "test_obselete/google_images_test.coffee", "sha": "fe8543793092649edc8cb02ffca76bc25ead3b65", "additions": 0, "patch": "@@ -1,50 +0,0 @@\n-Tests  = require './tests'\n-assert = require 'assert'\n-helper = Tests.helper()\n-\n-Robot         = require '../src/robot'\n-{TextMessage} = require '../src/message'\n-\n-require('../src/scripts/google-images') helper\n-\n-# start up a danger room for google images\n-danger = Tests.danger helper, (req, res, url) ->\n-  res.writeHead 200\n-  res.end JSON.stringify(\n-    responseData:\n-      results: [\n-        unescapedUrl: \"(#{url.query.q})\"\n-      ]\n-  )\n-\n-# callbacks for when hubot sends messages\n-mu    = \"http://mustachify.me/?src=\"\n-tests = [\n-  (msg) -> assert.equal \"#{mu}(foo)#.png\", msg\n-  (msg) -> assert.equal \"#{mu}(foo)#.png\", msg\n-  (msg) -> assert.equal \"#{mu}(foo)#.png\", msg\n-  (msg) -> assert.equal \"#{mu}(foo)#.png\", msg\n-  (msg) -> assert.equal \"(foo)#.png\", msg\n-  (msg) -> assert.equal \"(foo)#.png\", msg\n-  (msg) -> assert.equal \"(foo)#.png\", msg\n-  (msg) -> assert.equal \"(animated foo)#.png\", msg\n-]\n-\n-# run the async tests\n-messages = [\n-  'helper: stache me foo',\n-  'helper: stache foo',\n-  'helper: mustache me foo',\n-  'helper: mustache foo',\n-  'helper: img foo',\n-  'helper: image me foo',\n-  'helper: image foo',\n-  'helper: animate me foo'\n-]\n-user = {}\n-danger.start tests, ->\n-  for message in messages\n-    helper.receive new TextMessage user, message\n-\n-  helper.stop()\n-", "changes": 50}, {"status": "removed", "deletions": 15, "raw_url": "https://github.com/hubotio/hubot/raw/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/httpd_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/httpd_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test_obselete/httpd_test.coffee?ref=576b0e3106e1070bbe7473ad43ee9f3acd6f78fb", "filename": "test_obselete/httpd_test.coffee", "sha": "7441ebed938a5754a188e9928924b5f4e0c4fb15", "additions": 0, "patch": "@@ -1,15 +0,0 @@\n-process.env.CONNECT_STATIC = 'test/static/'\n-Tests = require './tests'\n-assert = require 'assert'\n-helper = Tests.helper()\n-require './scripts/test'\n-\n-helper.adapter.cb = (msg) ->\n-    assert.equal 1, helper.sent.length\n-    assert.equal \"static\\n\", msg\n-    helper.stop()\n-\n-setTimeout( () ->\n-    helper.adapter.receive 'static'\n-, 100)\n-", "changes": 15}, {"status": "removed", "deletions": 74, "raw_url": "https://github.com/hubotio/hubot/raw/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test_obselete/robot_test.coffee?ref=576b0e3106e1070bbe7473ad43ee9f3acd6f78fb", "filename": "test_obselete/robot_test.coffee", "sha": "9ac9e2182cf5e20b34c1233351cf89604f341f6b", "additions": 0, "patch": "@@ -1,74 +0,0 @@\n-Tests  = require './tests'\n-assert = require 'assert'\n-helper = Tests.helper()\n-require './scripts/test'\n-\n-server = require('http').createServer (req, res) ->\n-  res.writeHead 200\n-  res.end \"fetched\"\n-\n-server.listen 9001, ->\n-  assert.equal 7, helper.listeners.length\n-  assert.equal 0, helper.sent.length\n-\n-  helper.adapter.receive 'test'\n-  assert.equal 1, helper.sent.length\n-  assert.equal 'OK', helper.sent[0]\n-\n-  helper.adapter.receive 'reply'\n-  assert.equal 2, helper.sent.length\n-  assert.equal 'helper: OK', helper.sent[1]\n-\n-  helper.adapter.receive 'random'\n-  assert.equal 3, helper.sent.length\n-  assert.ok helper.sent[2].match(/^(1|2)$/)\n-\n-  # Test that when we message a room, the 'recipient' is the robot user and the room attribute is set properly\n-  helper.messageRoom \"chat@example.com\", \"Hello room\"\n-  assert.equal 4, helper.sent.length\n-  assert.equal \"chat@example.com\", helper.recipients[3].room\n-  assert.equal \"Hello room\", helper.sent[3]\n-\n-  helper.messageRoom \"chat2@example.com\", \"Hello to another room\"\n-  assert.equal 5, helper.sent.length\n-  assert.equal \"chat2@example.com\", helper.recipients[4].room\n-  assert.equal \"Hello to another room\", helper.sent[4]\n-\n-  helper.adapter.receive 'foobar'\n-  assert.equal 6, helper.sent.length\n-  assert.equal 'catch-all', helper.sent[5]\n-\n-  # Testing replies\n-  # ============================\n-  # Using just the name\n-  helper.adapter.receive \"#{helper.name} rsvp\"\n-  assert.equal 7, helper.sent.length\n-  assert.equal \"responding\", helper.sent[6]\n-\n-  # Using name with @ form\n-  helper.adapter.receive \"@#{helper.name} rsvp\"\n-  assert.equal 8, helper.sent.length\n-  assert.equal \"responding\", helper.sent[7]\n-\n-  # Using just the alias\n-  helper.adapter.receive \"#{helper.alias} rsvp\"\n-  assert.equal 9, helper.sent.length\n-  assert.equal \"responding\", helper.sent[8]\n-\n-  # Using alias with @ form\n-  helper.adapter.receive \"@#{helper.alias} rsvp\"\n-  assert.equal 10, helper.sent.length\n-  assert.equal \"responding\", helper.sent[9]\n-\n-\n-  # set a callback for when the next message is replied to\n-  helper.cb = (msg) ->\n-    assert.equal 7, helper.sent.length\n-    assert.equal 'fetched', msg\n-    helper.close()\n-    server.close()\n-\n-  helper.adapter.receive 'http'\n-\n-  helper.stop()\n-", "changes": 74}, {"status": "removed", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/rules_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/rules_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test_obselete/rules_test.coffee?ref=576b0e3106e1070bbe7473ad43ee9f3acd6f78fb", "filename": "test_obselete/rules_test.coffee", "sha": "65e329a6ae1d7e62eaf7d1381639a08c03bc6146", "additions": 0, "patch": "@@ -1,20 +0,0 @@\n-Tests  = require './tests'\n-assert = require 'assert'\n-helper = Tests.helper()\n-require('../src/scripts/rules') helper\n-\n-tests = [\n-  'helper: the rules'\n-  'helper: the laws'\n-  'helper: what are the laws?'\n-  'helper: what are the three laws of robotics?'\n-  'helper: what are the 3 laws?'\n-]\n-\n-until tests.length == 0\n-  helper.reset()\n-  msg = tests.shift()\n-  helper.adapter.receive msg\n-  assert.ok helper.sent[0].match /1\\. A robot may not .+/\n-\n-helper.stop()", "changes": 20}, {"status": "removed", "deletions": 27, "raw_url": "https://github.com/hubotio/hubot/raw/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/scripts/test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/scripts/test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test_obselete/scripts/test.coffee?ref=576b0e3106e1070bbe7473ad43ee9f3acd6f78fb", "filename": "test_obselete/scripts/test.coffee", "sha": "07af2636e5aa0a054a6c74fcb9e766d74d910bbb", "additions": 0, "patch": "@@ -1,27 +0,0 @@\n-# Tests hubot listeners\n-module.exports = (robot) ->\n-  assert = require 'assert'\n-  robot.hear /static/i, (msg) ->\n-    msg.http('http://127.0.0.1/test').port(process.env.PORT or 8080)\n-      .get() (err, res, body) ->\n-        msg.send body\n-\n-  robot.hear /test/i, (msg) ->\n-    msg.send \"OK\"\n-\n-  robot.hear /reply/i, (msg) ->\n-    msg.reply \"OK\"\n-\n-  robot.respond /rsvp/i, (msg) ->\n-    msg.send \"responding\"\n-\n-  robot.hear /random/i, (msg) ->\n-    msg.send msg.random([1,2]).toString()\n-\n-  robot.hear /http/i, (msg) ->\n-    msg.http('http://127.0.0.1').port(9001)\n-      .get() (err, res, body) ->\n-        msg.send body\n-\n-  robot.catchAll (msg) ->\n-    msg.send 'catch-all'", "changes": 27}, {"status": "removed", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/static/test", "blob_url": "https://github.com/hubotio/hubot/blob/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/static/test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test_obselete/static/test?ref=576b0e3106e1070bbe7473ad43ee9f3acd6f78fb", "filename": "test_obselete/static/test", "sha": "7b4d4ba2e62dc741d2a6265a1ecbdba716d119f6", "additions": 0, "patch": "@@ -1 +0,0 @@\n-static", "changes": 1}, {"status": "removed", "deletions": 75, "raw_url": "https://github.com/hubotio/hubot/raw/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test_obselete/tests.coffee?ref=576b0e3106e1070bbe7473ad43ee9f3acd6f78fb", "filename": "test_obselete/tests.coffee", "sha": "80f08aba1bb5470a56e81250d02b52a37f30ac8a", "additions": 0, "patch": "@@ -1,75 +0,0 @@\n-Url = require 'url'\n-Path = require 'path'\n-\n-Robot = require '../src/robot'\n-Adapter = require '../src/adapter'\n-User = require '../src/user'\n-Response = require '../src/response'\n-TextMessage = require '../src/message'\n-\n-# A programmer's best friend.\n-# http://timenerdworld.files.wordpress.com/2010/12/joint-venture-s1e3_1.jpg\n-#\n-# Instantiates a test-only Robot that sends messages to an optional callback\n-# and a @sent array.\n-exports.helper = ->\n-  new Helper \"#{__dirname}/scripts\"\n-\n-# Training facility built for the Hubot scripts.  Starts up a web server to\n-# emulate backends (like google images) so we can test that the response\n-# parsing code functions.\n-exports.danger = (helper, cb) ->\n-  server = require('http').createServer (req, res) ->\n-    url = Url.parse req.url, true\n-    cb req, res, url\n-\n-  server.start = (tests, cb) ->\n-    server.listen 9001, ->\n-      helper.adapter.cb = (messages...) ->\n-        tests.shift() messages...\n-        server.close() if tests.length == 0\n-\n-      cb()\n-\n-  server.on 'close', -> helper.close()\n-  server\n-\n-class Helper extends Robot\n-  constructor: (scriptPath) ->\n-    super null, null, true, 'helper'\n-    @load scriptPath\n-    @id = 1\n-    @Response = Helper.Response\n-    @sent = []\n-    @recipients = []\n-    @adapter = new Danger @\n-    @alias = 'alias'\n-\n-  stop: ->\n-    process.exit 0\n-\n-  reset: ->\n-    @sent = []\n-\n-class Danger extends Adapter\n-  send: (user, strings...) ->\n-    @robot.sent.push str for str in strings\n-    @robot.recipients.push user for str in strings\n-    @cb? strings...\n-\n-  reply: (user, strings...) ->\n-    @send user, \"#{@robot.name}: #{str}\" for str in strings\n-\n-  receive: (text) ->\n-    if typeof text is 'string'\n-      user = new User 1, 'helper'\n-      super new TextMessage user, text\n-    else\n-      super text\n-\n-if not process.env.HUBOT_LIVE\n-  class Helper.Response extends Response\n-    # This changes ever HTTP request to hit the danger server above\n-    http: (url) ->\n-      super(url).host('127.0.0.1').port(9001)\n-", "changes": 75}, {"status": "removed", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/user_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/576b0e3106e1070bbe7473ad43ee9f3acd6f78fb/test_obselete/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test_obselete/user_test.coffee?ref=576b0e3106e1070bbe7473ad43ee9f3acd6f78fb", "filename": "test_obselete/user_test.coffee", "sha": "74317e0f3598e7a0941948648825226e1f73095a", "additions": 0, "patch": "@@ -1,14 +0,0 @@\n-User = require '../src/user'\n-assert = require 'assert'\n-\n-\n-user = new User \"Fake User\", {name: 'fake', type: \"groupchat\"}\n-assert.equal \"Fake User\", user.id\n-assert.equal \"groupchat\", user.type\n-assert.equal \"fake\", user.name\n-\n-user = new User \"Fake User\", {room: \"chat@room.jabber\", type: \"groupchat\"}\n-assert.equal \"Fake User\", user.id\n-assert.equal \"chat@room.jabber\", user.room\n-assert.equal \"groupchat\", user.type\n-assert.equal \"Fake User\", user.name # Make sure that if no name is given, we fallback to the ID", "changes": 14}], "540": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a45194344f33c9dd6425d1365158d3a469237cd2/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a45194344f33c9dd6425d1365158d3a469237cd2/src/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=a45194344f33c9dd6425d1365158d3a469237cd2", "filename": "src/scripts/math.coffee", "sha": "6a8541468c27f51f449e32328743daca99acffa2", "additions": 1, "patch": "@@ -5,7 +5,7 @@\n #   hubot math me <expression> - Calculate the given expression.\n #   hubot convert me <expression> to <units> - Convert expression to given units.\n module.exports = (robot) ->\n-  robot.respond /(calc|calculate|convert|math|maths)( me)? (.*)/i, (msg) ->\n+  robot.respond /(calc|calculate|calculator|convert|math|maths)( me)? (.*)/i, (msg) ->\n     msg\n       .http('https://www.google.com/ig/calculator')\n       .query", "changes": 2}], "541": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3d6e73b675abe37978a09597970f40ff211c4968/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/3d6e73b675abe37978a09597970f40ff211c4968/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=3d6e73b675abe37978a09597970f40ff211c4968", "filename": "README.md", "sha": "14446224efa3fff326ffbb9dc9008371636d0823", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n-# Hubot\n+# Hubot [![Travis](https://secure.travis-ci.org/github/hubot.png)](http://travis-ci.org/github/hubot)\n \n Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n cool. He's extendable with", "changes": 2}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/3d6e73b675abe37978a09597970f40ff211c4968/test/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3d6e73b675abe37978a09597970f40ff211c4968/test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.coffee?ref=3d6e73b675abe37978a09597970f40ff211c4968", "filename": "test/brain_test.coffee", "sha": "5cd29a5e4ee551697b5ad0cf4af6d646564817e0", "additions": 7, "patch": "@@ -1,12 +1,13 @@\n assert = require 'assert'\n-\n+Tests = require './tests'\n+helper = Tests.helper()\n Brain  = require '../src/brain'\n \n saved   = false\n closing = false\n closed  = false\n \n-brain = new Brain\n+brain = new Brain(helper)\n \n brain.on 'save', (data) ->\n   is_closing = closing\n@@ -17,9 +18,10 @@ brain.on 'save', (data) ->\n brain.on 'close', ->\n   closed = true\n \n-brain.data.abc = 1\n-brain.resetSaveInterval 0.1\n-\n process.on 'exit', ->\n   assert.ok saved\n   assert.ok closed\n+\n+brain.data.abc = 1\n+brain.save()\n+helper.stop()", "changes": 12}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3d6e73b675abe37978a09597970f40ff211c4968/test/httpd_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3d6e73b675abe37978a09597970f40ff211c4968/test/httpd_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/httpd_test.coffee?ref=3d6e73b675abe37978a09597970f40ff211c4968", "filename": "test/httpd_test.coffee", "sha": "c644855543747aacd78ed68be77863e836360bfc", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n-process.env.CONNECT_STATIC = 'test/static/'\n+process.env.EXPRESS_STATIC = 'test/static/'\n Tests = require './tests'\n assert = require 'assert'\n helper = Tests.helper()", "changes": 2}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3d6e73b675abe37978a09597970f40ff211c4968/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3d6e73b675abe37978a09597970f40ff211c4968/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=3d6e73b675abe37978a09597970f40ff211c4968", "filename": "test/tests.coffee", "sha": "294514a6a83f659080f4644d896442dd6d9809c0", "additions": 3, "patch": "@@ -45,6 +45,9 @@ class Helper extends Robot\n     @adapter = new Danger @\n     @alias = 'alias'\n \n+  loadAdapter: (path, adapter) ->\n+    true\n+\n   stop: ->\n     process.exit 0\n ", "changes": 3}], "543": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/97f1cc60e2b3c721fc2f0e3fb50c3600a3b5e8f6/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/97f1cc60e2b3c721fc2f0e3fb50c3600a3b5e8f6/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=97f1cc60e2b3c721fc2f0e3fb50c3600a3b5e8f6", "filename": "src/creator.coffee", "sha": "19f9235c5c8e28ff87cd693270a3d04b06011d30", "additions": 16, "patch": "@@ -32,6 +32,18 @@ class Creator\n \n       callback(err, to) if callback?\n \n+  # Rename a file.\n+  #\n+  # from - A String source file to rename, must exist on disk.\n+  # to   - A String destination file to write to.\n+  #\n+  # Returns nothing.\n+  rename: (from, to, callback) ->\n+    Fs.rename from, to, (err, data) ->\n+      console.log \"Renaming #{Path.resolve(from)} -> #{Path.resolve(to)}\"\n+\n+      callback(err, to) if callback?\n+\n   # Copy the default scripts hubot ships with to the scripts folder\n   # This allows people to easily remove scripts hubot defaults to if\n   # they want. It also provides them with a few examples and a top\n@@ -63,12 +75,13 @@ class Creator\n       \"Procfile\",\n       \"package.json\",\n       \"README.md\",\n-      \".gitignore\",\n+      \"gitignore\",\n       \"hubot-scripts.json\",\n       \"external-scripts.json\"\n     ]\n-\n-    @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\" for file in files\n+    for file in files\n+      @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\", (err, to)=>\n+        @rename \"#{@path}/gitignore\", \"#{@path}/.gitignore\" if to == \"#{@path}/gitignore\"\n \n     bins = [\n       \"bin/hubot\",", "changes": 19}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/97f1cc60e2b3c721fc2f0e3fb50c3600a3b5e8f6/src/templates/gitignore", "blob_url": "https://github.com/hubotio/hubot/blob/97f1cc60e2b3c721fc2f0e3fb50c3600a3b5e8f6/src/templates/gitignore", "previous_filename": "src/templates/.gitignore", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/gitignore?ref=97f1cc60e2b3c721fc2f0e3fb50c3600a3b5e8f6", "filename": "src/templates/gitignore", "sha": "b010ffd23c90e37c50fe0d27dfb3d2192999c5c3", "additions": 0, "changes": 0}], "544": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": ".travis.yml", "sha": "06eef32c42db46626731b9e7851e4d91d4da26c8", "additions": 1, "patch": "@@ -4,6 +4,6 @@ node_js:\n   - \"0.10\"\n branches:\n   only:\n-    - vthree-rethink\n+    - /^vthree-rethink.*$/\n notifications:\n   email: false", "changes": 2}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "CHANGELOG.md", "sha": "b65c77d338e5afb5421fbf45970f7edc7ec6e627", "additions": 12, "patch": "@@ -29,6 +29,18 @@ New:\n * TopicMessage is now type 'topic'\n * CatchAllMessage has been deprecated and removed\n \n+v2.6.1\n+======\n+\n+* Show robot.alias in help commands if defined - technicalpickles\n+* Epic documentation update - technicalpickels\n+* Remove tweet.coffee from generated hubot-scripts.json since it has a npm dependency - tombell\n+* Don't load roles.coffee if using auth.coffee - tombell\n+* Make sure to clear interval for pinging Heroku URL - tombell\n+* Fix deprecation warning in youtube.coffee - timclipsham\n+* Fix youtube results bug - timclipsham\n+>>>>>>> master\n+\n v2.6.0\n ======\n ", "changes": 12}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "CONTRIBUTING.md", "sha": "f601eb81e771b7cdc1c95b9d5714c0babfe1aeae", "additions": 28, "patch": "@@ -0,0 +1,28 @@\n+We love pull requests. Here's a quick guide:\n+\n+1. Check for [existing issues](https://github.com/github/hubot/issues) for duplicates and confirm that it hasn't been fixed already in the [master branch](https://github.com/github/hubot/commits/master)\n+2. Fork the repo, and clone it locally\n+3. `npm link` to make your cloned repo available to npm\n+4. `hubot --create testbot` to create a bot to test against (no automated tests yet :sob:)\n+5. `npm install && npm link hubot` in your newly created bot to install dependencies, and use your hubot fork\n+6. Push to your fork and submit a pull request.\n+\n+At this point you're waiting on us. We like to at least comment on, if not\n+accept, pull requests within a few days. We may suggest some changes or improvements or alternatives.\n+\n+Some things that will increase the chance that your pull request is accepted:\n+\n+* Use CoffeeScript [idioms](http://arcturo.github.io/library/coffeescript/04_idioms.html) and [style guide](https://github.com/polarmobile/coffeescript-style-guide)\n+* Update the documentation, the surrounding one, examples elsewhere, guides,\n+  whatever is affected by your contribution\n+* Include any information that would be relevant to reproducing bugs, use cases for new features, etc.\n+* Impact on existing [hubot installs](docs/README.md), [hubot adapters](docs/adapters.md), and [hubot scripts](docs/scripting.md) (e.g. backwards compatibility)\n+\n+Syntax:\n+\n+* Two spaces, no tabs.\n+* No trailing whitespace. Blank lines should not have any space.\n+* Prefer `and` and `or` over `&&` and `||`\n+* `MyClass.my_method(my_arg)` not `my_method( my_arg )` or `my_method my_arg`.\n+* `a = b` and not `a=b`.\n+* Follow the conventions you see used in the source already.", "changes": 28}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/LICENSE", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/LICENSE", "previous_filename": "LICENSE.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/LICENSE?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "LICENSE", "sha": "493db50edda9d35fb7fdba7a0e10ed68c257ffb0", "additions": 0, "changes": 0}, {"status": "modified", "deletions": 202, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "README.md", "sha": "ae129a7937efc68d11f3973d3153882beb85467b", "additions": 12, "patch": "@@ -1,208 +1,18 @@\n # Hubot\n \n-This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n+Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n+cool. He's extendable with\n+[community scripts](https://github.com/github/hubot-scripts) and your own custom\n+scripts, and can work on [many different chat services](docs/adapters.md).\n \n-**You'll probably never have to hack on this repo directly.**\n+This repository provides a library that's distributed by `npm` that you\n+use for building your own bots.  See the [docs/README.md](docs/README.md)\n+for details on getting up and running with your very own robot friend.\n \n-Follow the instructions below and get your own hubot ready to deploy.\n+In most cases, you'll probably never have to hack on this repo directly if you\n+are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTING.md)\n \n-## Getting Your Own\n+## License\n \n-Make sure you have [node.js][nodejs] and [npm][npmjs] installed.\n-\n-You can install the `hubot` npm package globally and you will be able to run\n-`hubot --create <PATH>` if you've setup npm packages to be in your `PATH`.\n-\n-    $ npm install -g hubot coffee-script\n-    $ hubot --create <path>\n-\n-Then the directory at `<path>` contains a deployable hubot that you're able to\n-deploy to heroku or run locally.\n-\n-## Adapters\n-\n-Adapters are the interface to the service you want your hubot to run on. This\n-can be something like Campfire or IRC. There are a number of third party\n-adapters that the community have contributed. Check the\n-[hubot wiki][hubot-wiki] for the available ones and how to create your own.\n-\n-Please submit issues and pull requests for third party adapters to the adapter\n-repository, not this one (unless it's the Campfire or shell adapter).\n-\n-## Hubot Scripts\n-\n-Hubot ships with a number of default scripts, but there's a growing number of\n-extras in the [hubot-scripts][hubot-scripts] repository. `hubot-scripts` is a\n-way to share scripts with the entire community.\n-\n-Check out the [README][hubot-scripts-readme] for more help on installing\n-individual scripts.\n-\n-## External Scripts\n-\n-This functionality allows users to enable scripts from `npm` packages which\n-don't have to be included in the `hubot-scripts` repository.\n-\n-To enable to functionality you can follow the following steps.\n-\n-1. Add the packages as dependencies into your `package.json`\n-2. `npm install` to make sure those packages are installed\n-\n-To enable third-party scripts that you've added you will need to add the package\n-name as a double quoted string to the `external-scripts.json` file for your\n-hubot.\n-\n-**Please note that external scripts may become the default for hubot scripts in\n-future releases.**\n-\n-### Creating A Script Package\n-\n-Creating a script package for hubot is very simple. Start by creating a normal\n-`npm` package. Make sure you add a main file for the entry point (e.g.\n-`index.js` or `index.coffee`).\n-\n-In this entry point file you're going to have to export a function that hubot\n-will use to load the scripts in your package. Below is a simple example for\n-loading each script in a `./scripts` directory in your package.\n-\n-```coffeescript\n-Fs   = require 'fs'\n-Path = require 'path'\n-\n-module.exports = (robot) ->\n-  path = Path.resolve __dirname, 'scripts'\n-  Fs.exists path, (exists) ->\n-    if exists\n-      for file in Fs.readdirSync(path)\n-        robot.loadFile path, file\n-        robot.parseHelp Path.join(path, file)\n-```\n-\n-After you've built your `npm` package you can publish it to [npmjs][npmjs].\n-\n-## HTTP Listener\n-\n-Hubot has a HTTP listener which listens on the port specified by the `PORT`\n-environment variable. If PORT is not specified, the default port will be 8080.\n-\n-You can specify routes to listen on in your scripts by using the `router`\n-property on `robot`.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-  robot.router.get \"/hubot/version\", (req, res) ->\n-    res.end robot.version\n-```\n-\n-There are functions for GET, POST, PUT and DELETE, which all take a route and\n-callback function that accepts a request and a response.\n-\n-In addition, if you set `EXPRESS_STATIC`, the HTTP listener will serve static\n-files from this directory.\n-\n-## Events\n-\n-Hubot can also respond to events which can be used to pass data between scripts.\n-\n-```coffeescript\n-# src/scripts/github-commits.coffee\n-module.exports = (robot) ->\n-  robot.router.post \"/hubot/gh-commits\", (req, res) ->\n-  \t#code goes here\n-    robot.emit \"commit\", {\n-        user    : {}, #hubot user object\n-        repo    : 'https://github.com/github/hubot',\n-        hash  : '2e1951c089bd865839328592ff673d2f08153643'\n-    }\n-```\n-```coffeescript\n-# src/scripts/heroku.coffee\n-module.exports = (robot) ->\n-  robot.on \"commit\", (commit) ->\n-    robot.send commit.user, \"Will now deploy #{commit.hash} from #{commit.repo}!\"\n-    #deploy code goes here\n-```\n-\n-If you provide an event, it's very recommended to include a hubot user object\n-in data. In case of other reacting scripts want to respond to chat.\n-\n-## Authentication\n-\n-Hubot has first class support for specify roles which a user must have to run\n-specific commands. If you wish you use this support you must set the the\n-following environment variables:\n-\n-    * `HUBOT_AUTH_ADMIN` a comma separated list of admin IDs\n-\n-You can find the user IDs by running the `show users` command. The admin IDs\n-specify which users can add and remove roles from users. Please note you can\n-only assign the admin role using the environment variable.\n-\n-###\u00a0Assigning a Role\n-\n-You can assign a role to the user using the following command:\n-\n-    hubot Joe Bloggs has developer role\n-    hubot John Doe has ops role\n-\n-The name must be the exact name as stored in hubot's brain.\n-\n-###\u00a0Removing a Role\n-\n-You can remove a role from the user using the following command:\n-\n-    hubot Joe Bloggs doesn't have developer role\n-    hubot John Doe does not have ops role\n-\n-### Viewing a User's Roles\n-\n-You can view the roles a user has or see which users have the admin role with\n-the following commands:\n-\n-    hubot what roles does Joe Bloggs have?\n-    hubot who has admin role?\n-\n-## Persistence\n-\n-Hubot has an in-memory key-value store exposed as `robot.brain` that can be\n-used to store and retrieve data by scripts.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-\n-  robot.respond /have a beer/i, (msg) ->\n-    # Get number of beers had (coerced to a number).\n-    beersHad = robot.brain.get('totalBeers') * 1 or 0\n-\n-    if beersHad > 4\n-      msg.respond \"I'm too drunk..\"\n-\n-    else\n-      msg.respond 'Sure!'\n-\n-      robot.brain.set 'totalBeers', beersHad+1\n-      # Or robot.brain.set totalBeers: beersHad+1\n-```\n-\n-If the script needs to store user data, `robot.brain` has a built-in interface\n-for it.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-\n-  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n-    name = msg.match[1].trim()\n-\n-    users = robot.brain.usersForFuzzyName(name)\n-    if users.length is 1\n-      user = users[0]\n-      # Do something interesting here..\n-\n-      msg.send \"#{name} is user - #{user}\"\n-```\n-\n-[nodejs]: http://nodejs.org\n-[npmjs]: http://npmjs.org\n-[hubot-wiki]: https://github.com/github/hubot/wiki\n-[hubot-scripts]: https://github.com/github/hubot-scripts\n-[hubot-scripts-readme]: https://github.com/github/hubot-scripts#readme\n+Copyright (c) 2011-2013 GitHub, Inc. See the LICENSE file for license rights and\n+limitations (MIT).", "changes": 214}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "bin/hubot", "sha": "7b5d33038385b76d899bf6d56bdedc6d00169e4e", "additions": 5, "patch": "@@ -3,13 +3,12 @@\n # vim:ft=coffee ts=2 sw=2 et :\n # -*- mode:coffee -*-\n \n-Creator  = require '../src/creator'\n-Robot    = require '../src/robot'\n-Options  = require '../src/options'\n+Fs = require 'fs'\n+Path = require 'path'\n \n-Fs       = require 'fs'\n-OptParse = require 'optparse'\n-Path     = require 'path'\n+Creator = require '../src/creator'\n+Robot = require '../src/robot'\n+Options = require '../src/options'\n \n options = new Options process.argv\n ", "changes": 11}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "docs/README.md", "sha": "ea26491482545c09e10b5cef1a2515269ee9be22", "additions": 109, "patch": "@@ -0,0 +1,109 @@\n+# Hubot\n+\n+## Getting Started With Hubot\n+\n+You will need [node.js](nodejs.org/) and [npm](https://npmjs.org/). Joyent has\n+an [excellent blog post on how to those installed](http://joyent.com/blog/installing-node-and-npm), so we'll omit those details here.\n+\n+Once node and npm are ready, we can install hubot and coffeescript:\n+\n+    % npm install -g hubot coffee-script\n+    \n+This will give us the `hubot` command, which is used for running a hubot, and more importantly now, generating your own hubot. The name of the new bot is\n+the last argument, and will be created in the directory of the same name. For\n+example, to create a new bot named myhubot:\n+\n+    % hubot --create myhubot\n+\n+If you are using git, the generated directory includes a .gitignore, so you can\n+initialize and add everything:\n+\n+    % cd myhubot\n+    % git init\n+    % git add .\n+    % git commit -m \"Initial commit\"\n+\n+You now have your own functional hubot! There's a `bin/hubot`\n+command for convenience, to handle installing npm dependencies, loading scripts,\n+and then launching your hubot.\n+\n+    % bin/hubot\n+    Hubot>\n+\n+This starts hubot using the [shell adapter](adapters/shell.md), which\n+is mostly useful for development. Make note of  `Hubot>`; this is the name he'll\n+`respond` to with commands. For example, to list available commands:\n+\n+    % bin/hubot\n+    Hubot> hubot: help\n+    hubot <keyword> tweet - Returns a link to a tweet about <keyword>\n+    hubot <user> is a badass guitarist - assign a role to a user\n+    hubot <user> is not a badass guitarist - remove a role from a user\n+    hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.\n+    hubot convert me <expression> to <units> - Convert expression to given units.\n+    hubot die - End hubot process\n+    hubot echo <text> - Reply back with <text>\n+    hubot fake event <event> - Triggers the <event> event for debugging reasons\n+    hubot help - Displays all of the help commands that Hubot knows about.\n+    hubot help <query> - Displays all help commands that match <query>.\n+    hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n+    hubot map me <query> - Returns a map view of the area returned by `query`.\n+    hubot math me <expression> - Calculate the given expression.\n+    hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n+    hubot mustache me <url> - Adds a mustache to the specified URL.\n+    hubot ping - Reply with pong\n+    hubot show storage - Display the contents that are persisted in the brain\n+    hubot show users - Display all users that hubot knows about\n+    hubot the rules - Make sure hubot still knows the rules.\n+    hubot time - Reply with current time\n+    hubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.\n+    hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n+    hubot who is <user> - see what roles a user has\n+    hubot youtube me <query> - Searches YouTube for the query and returns the video embed link.\n+    pug bomb N - get N pugs\n+    pug me - Receive a pug\n+    ship it - Display a motivation squirrel\n+\n+You almost definitely will want to change his name to give him some more character. bin/hubot takes a `--name`:\n+\n+    % bin/hubot --name myhubot\n+    myhubot> \n+\n+Your hubot will now respond as `myhubot`. This is\n+case-insensitive, and can be prefixed with `@` or suffixed with `:`. These are equivalent:\n+\n+    MYHUBOT help\n+    myhubot help\n+    @myhubot help\n+    myhubot: help\n+\n+## Scripting\n+\n+Hubot's power comes through scripting. Read [docs/scripting.md](scripting.md) for the deal on bending hubot to your will using code.\n+\n+There are many community-contributed scripts available through [hubot-scripts](https://github.com/github/hubot-scripts). To use scripts from it:\n+\n+* Make sure `hubot-scripts` is listed as a dependency in `package.json` (it should by default)\n+* Update `hubot-scripts.json` to include the script you want in the list. Make sure the file is still valid JSON!\n+* Review the script to see if there's dependencies or configuration to add \n+\n+In addition, there are scripts released as npm packages. If you find one you want to use:\n+\n+1. Add the package to the list of `dependencies` into your `package.json`\n+2. `npm install` to make sure its installed\n+\n+**Please note that external scripts may become the default for hubot scripts in future releases.**\n+\n+## Adapters\n+\n+Hubot uses the adapter pattern to support multiple chat-backends. Read available adapters in [docs/adapters.md](adapters.md), along with how to configure them.\n+\n+## Deploying\n+\n+You can deploy hubot to Heroku, which is the officially supported method.\n+Additionally you are able to deploy hubot to a UNIX-like system or Windows.\n+Please note the support for deploying to Windows isn't officially supported.\n+\n+* [Deploying Hubot onto Heroku](deploying/heroku.md)\n+* [Deploying Hubot onto UNIX](deploying/unix.md)\n+* [Deploying Hubot onto Windows](deploying/windows.md)", "changes": 109}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "docs/adapters.md", "sha": "fb94744e32d87786bff3985bde7e29452cb63391", "additions": 38, "patch": "@@ -0,0 +1,38 @@\n+# Hubot Adapters\n+\n+Adapters are the interface to the service you want your hubot to run on.\n+\n+## Official Adapters\n+\n+Hubot includes two official adapters:\n+\n+* [Shell](adapters/shell.md), i.e. for use with development\n+* [Campfire](adapters/campfire.md)\n+\n+## Third-party Adapters\n+\n+Third-party adapters are available as `npm` packages. Here is a list of known\n+adapters, but please [submit an issue](https://github.com/github/hubot/issues)\n+to have yours added to the list:\n+\n+* [Flowdock](https://github.com/flowdock/hubot-flowdock)\n+* [HipChat](https://github.com/hipchat/hubot-hipchat)\n+* [IRC](https://github.com/nandub/hubot-irc)\n+* [Partychat](https://github.com/iangreenleaf/hubot-partychat-hooks)\n+* [Talker](https://github.com/unixcharles/hubot-talker)\n+* [Twilio](https://github.com/egparedes/hubot-twilio)\n+* [Twitter](https://github.com/MathildeLemee/hubot-twitter)\n+* [XMPP](https://github.com/markstory/hubot-xmpp)\n+* [Gtalk](https://github.com/atmos/hubot-gtalk)\n+* [Yammer](https://github.com/athieriot/hubot-yammer)\n+* [Skype](https://github.com/netpro2k/hubot-skype)\n+* [Jabbr](https://github.com/smoak/hubot-jabbr)\n+* [iMessage](https://github.com/lazerwalker/hubot-imessage)\n+* [Hall](https://github.com/Hall/hubot-hall)\n+\n+\n+## Writing Your Own adapter\n+\n+The best place to start is `src/adapter.coffee`, and inheriting from `Adapter`.\n+There is not as much documentation as could exist (yet!), so it is worth\n+reviewing existing adapters as well as how hubot internally uses an adapter.", "changes": 38}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/adapters/campfire.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/adapters/campfire.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/campfire.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "docs/adapters/campfire.md", "sha": "9f0f0c3642144f73373e1d6da4b0cd4e9cc730e8", "additions": 75, "patch": "@@ -0,0 +1,75 @@\n+# Adapter: Campfire\n+\n+[Campfire](http://campfirenow.com/) is a web based chat application built by\n+[37signals](http://37signals.com). The Campfire adapter is one of the original\n+adapters in Hubot.\n+\n+## Getting Started\n+\n+You will need a Campfire account to start, which you can\n+[sign up for free](https://signup.37signals.com/campfire/free/signup/new).\n+\n+Next, you will need to create a user on your Campfire account for your Hubot,\n+then give it access so it can join to your rooms. You will need to create a room\n+if you haven't already.\n+\n+Hubot defaults to using its [shell](shell.md), so to use Campfire instead, you\n+can run hubot with `-a campfire`:\n+\n+    % bin/hubot -a campfire\n+\n+If you are deploying to Heroku or using foreman, you need to make\n+sure the hubot is called with `-a campfire` in the `Procfile`:\n+\n+    web: bin/hubot -a campfire -n Hubot\n+\n+## Configuring\n+\n+The adapter requires the following environment variables.\n+\n+* `HUBOT_CAMPFIRE_ACCOUNT`\n+* `HUBOT_CAMPFIRE_TOKEN`\n+* `HUBOT_CAMPFIRE_ROOMS`\n+\n+### Campfire API Token\n+\n+This can be found by logging in with your hubot's account click the **My Info**\n+link and make a note of the API token.\n+\n+### Campfire Room IDs\n+\n+If you join the rooms you want your hubot to join will see notice a numerical\n+ID for the room in the URL. Make a note of each ID for the rooms you want your\n+hubot to join.\n+\n+### Campfire Account\n+\n+This is simply the first part of the domain you visit for your Campfire\n+account. For example if your Campfire was at `hubot.campfirenow.com` your\n+subdomain is `hubot`. Make a note of the subdomain.\n+\n+### Configuring the variables on Heroku\n+\n+    % heroku config:add HUBOT_CAMPFIRE_TOKEN=\"...\"\n+\n+    % heroku config:add HUBOT_CAMPFIRE_ROOMS=\"123,321\"\n+\n+    % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=\"...\"\n+\n+### Configuring the variables on UNIX\n+\n+    % export HUBOT_CAMPFIRE_TOKEN=\"...\"\n+\n+    % export HUBOT_CAMPFIRE_ROOMS=\"123,321\"\n+\n+    % export HUBOT_CAMPFIRE_ACCOUNT=\"...\"\n+\n+### Configuring the variables on Windows\n+\n+Using PowerShell:\n+\n+    setx HUBOT_CAMPFIRE_TOKEN \"...\" /m\n+\n+    setx HUBOT_CAMPFIRE_ROOMS \"123,321\" /m \n+\n+    setx HUBOT_CAMPFIRE_ACCOUNT \"...\" /m", "changes": 75}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/adapters/shell.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/adapters/shell.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/shell.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "docs/adapters/shell.md", "sha": "96139d83de51420498edb35d91af5152bab0dd06", "additions": 15, "patch": "@@ -0,0 +1,15 @@\n+# Adapters: Shell\n+\n+The shell adapter provides a simple read-eval-print loop for interacting with a hubot locally.\n+It can be useful for testing scripts before using them on a live hubot.\n+\n+## Getting Started\n+\n+To use the shell adapter you can simply omit the `-a` option when running\n+hubot as it will use the shell adapter by default.\n+\n+    % bin/hubot\n+\n+## Configuring\n+\n+This adapter doesn't require any configuration.", "changes": 15}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "docs/deploying/heroku.md", "sha": "8824c67351c6027ab4c8f8a3494bea600f30a6de", "additions": 67, "patch": "@@ -0,0 +1,67 @@\n+# Deploying Hubot to Heroku\n+\n+If you've been following along with [Getting Started](../README.md), it's time to deploy so you can use it beyond just your local machine.\n+[Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.\n+\n+Install the [Heroku Toolbelt](https://toolbelt.heroku.com/) to start, then follow their 'Getting Started' instructions, including logging in the first time:\n+\n+    % heroku login\n+    Enter your Heroku credentials.\n+    Email: youremail@example.com\n+    Password:\n+    Could not find an existing public key.\n+    Would you like to generate one? [Yn]\n+    Generating new SSH public key.\n+    Uploading ssh public key /Users/you/.ssh/id_rsa.pub\n+\n+Inside your new hubot directory, make sure you've created a git repository, and that your work is committed:\n+\n+    % git init\n+    % git add .\n+    % git commit -m \"Initial commit\"\n+\n+Then create a Heroku application:\n+\n+    % heroku create\n+    Creating rosemary-britches-123... done, stack is cedar\n+    http://rosemary-britches-123.herokuapp.com/ | git@heroku.com:rosemary-britches-123.git\n+    Git remote heroku added\n+\n+Before you deploy the application, you'll need to configure some environment\n+variables for hubot to use. Some variables you need depends on which\n+[adapter](../adapters.md) and scripts you are using. For Campfire, with no other\n+scripts, you'd need to at least:\n+\n+    % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=yourcampfireaccount\n+    % heroku config:add HUBOT_CAMPFIRE_TOKEN=yourcampfiretoken\n+    % heroku config:add HUBOT_CAMPFIRE_ROOMS=comma,separated,list,of,rooms,to,join\n+\n+In addition is one special environment variable for Heroku. The default hubot\n+[Procfile](https://devcenter.heroku.com/articles/procfile) marks the process as\n+a 'web' process type, in order to support serving up http requests (more on that\n+in the [scripting docs](../scripting.md). The downside of this is that dynos\n+will [idle after an hour of inactivity](https://devcenter.heroku.com/articles/dynos#dyno-idling).\n+That means your hubot would leave after an hour of idle web traffic, and only rejoin when it does get traffic. This is extremely\n+inconvenient since most interaction is done through chat, and hubot has to be online and in the room this. To get around this this,\n+there's a special environment variable to make hubot regularly ping itself over http. If\n+the app is deployed to http://rosemary-britches-123.herokuapp.com/, then you'd\n+configure:\n+\n+    % heroku config:add HUBOT_HEROKU_URL=http://rosemary-britches-123.herokuapp.com\n+\n+At this point, you are ready to deploy and start chatting. With Heroku, that's a\n+git push away:\n+\n+    % git push heroku master\n+\n+You'll see some text flying, and eventually some success. You should be able to\n+see your bot in your configured chat rooms at this point. If not, you can peek\n+at the logs to try to debug:\n+\n+    % heroku logs\n+\n+If you make any changes to your hubot, just commit them, and push them as\n+before:\n+\n+    % git ci -a -m \"Awesome scripts OMG\"\n+    % git push heroku master", "changes": 67}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/deploying/unix.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/deploying/unix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/unix.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "docs/deploying/unix.md", "sha": "862d1f5884f63f0ae27a8beb50a9fa02d5a80684", "additions": 65, "patch": "@@ -0,0 +1,65 @@\n+# Deploying Hubot to UNIX\n+\n+Because there are so many variations of Linux, and more generally UNIX, it's\n+difficult for the hubot team to have canonical documentation for installing and\n+deploying it to every version out there. So, this is an attempt to give an\n+overview of what's needed to get deploying.\n+\n+There are 3 primary things to deploying and running hubot:\n+\n+  * node and npm\n+  * a way to get source code updated on the server\n+  * a way to start hubot, start it up if it crashes, and restart it when code\n+    updates\n+\n+## node and npm\n+\n+To start, your UNIX server will need node and npm. Check out the node.js wiki\n+for [installing Node.js via package manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager), [Building on GNU/Linux and other UNIX](https://github.com/joyent/node/wiki/Installation#building-on-gnulinux-and-other-unix).\n+\n+## Updating code on the server\n+\n+The simplest way to update your hubot's code is going to be to have a git\n+checkout of your hubot's source code (that you've created during [Getting Started](../README.md), not the [github/hubot repository](http://github.com/github/hubot), and just git pull to get change. This may\n+feel a dirty hack, but it works when you are starting out.\n+\n+If you have a Ruby background, you might be more comfortable using\n+[capistrano](https://github.com/capistrano/capistrano).\n+\n+If you have a [Chef](http://www.opscode.com/chef/) background, there's a\n+[deploy](http://docs.opscode.com/resource_deploy.html) resource for managing\n+deployments.\n+\n+## Starting, stopping, and restarting hubot\n+\n+Every hubot install has a `bin/hubot` script to handle starting up the hubot.\n+You can run this command from your git checkout on the server, but there are some problems you can encounter:\n+\n+* you disconnect, and hubot dies\n+* hubot dies, for any reason, and doesn't start again\n+* it doesn't start up at boot automatically\n+\n+For handling you disconnecting, you can start with running `bin/hubot` in\n+[screen session](http://www.gnu.org/software/screen/) or with\n+[nohup](http://linux.die.net/man/1/nohup).\n+\n+For handling hubot dying, and restarting it automatically, you can imagine\n+running `bin/hubot` in a\n+[bash while loop](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-7.html#ss7.3). But\n+really, you probably want some process monitoring using tools like\n+[monit](http://mmonit.com/monit/),\n+[god](http://godrb.com/),\n+[bluepill](https://github.com/arya/bluepill),\n+[upstart](http://upstart.ubuntu.com/).\n+\n+For starting at boot, you can create an init script for appropriate your UNIX\n+distribution, or if you are using one the process monitoring tools above, make\n+sure it boots at startup.\n+\n+## Recommendations\n+\n+This document has been deliberately light on strong recommendations. At a high\n+level though, it's strongly recommended to avoid anything that is overly manual\n+and non-repeatable. That would mean using your OS's packages and tools whenever\n+possible, and having a proper deploy tool to update hubot, and process\n+management to keep hubot running.", "changes": 65}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/deploying/windows.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/deploying/windows.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/windows.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "docs/deploying/windows.md", "sha": "ebfeec202ffd8f77b11c3579685081ef7817c85c", "additions": 3, "patch": "@@ -0,0 +1,3 @@\n+# Deploying Hubot to Windows\n+\n+Not yet written. [Help me out by submitting a pull request, please?](https://github.com/github/hubot/pull/new/master)", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "docs/scripting.md", "sha": "f95fc94a5bcfdca8001f511d7ea5cd8d87b52bd3", "additions": 483, "patch": "@@ -0,0 +1,483 @@\n+# Scripting\n+\n+Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend.\n+\n+## Anatomy of a script\n+\n+When you created your hubot, the generator also created a `scripts` directory. If you peak around there, you will see some examples of scripts. For a script to be a script, it needs to:\n+\n+* live in a directory on the hubot script load path (`src/scripts` and `scripts` by default)\n+* be a `.coffee` or `.js` file\n+* export a function\n+\n+By export a function, we just mean: \n+\n+```coffeescript\n+module.exports = (robot) ->\n+  # your code here\n+```\n+\n+The `robot` parameter is an instance of your robot friend. At this point, we can start scripting up some awesomeness.\n+\n+## Hearing and responding\n+\n+Since this is a chat bot, the most common interactions are based on messages. Hubot can `hear` messages said in a room or `respond` to messages directly addressed at it. Both methods take a regular expression and a callback function as parameters. For example:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.hear /badger/i, (msg) ->\n+    # your code here\n+\n+  robot.respond /open the pod bay doors/i, (msg) ->\n+    # your code here\n+```\n+\n+The `robot.hear /badgers/` callback is called anytime a message's text matches. For example:\n+\n+* Stop badgering the witness\n+* badger me\n+* what exactly is a badger anyways\n+\n+The `robot.respond /open the pod bay doors/i` callback is only called for messages that are immediately preceded by the robot's name or alias. If the robot's name is HAL and alias is /, then this callback would be triggered for:\n+\n+*  hal open the pod bay doors\n+* HAL: open the pod bay doors\n+* @HAL open the pod bay doors\n+* /open the pod bay doors\n+\n+It wouldn't be called for:\n+\n+* HAL: please open the pod bay doors\n+   *  because its `respond` is bound to the text immediately following the robot name\n+*  has anyone ever mentioned how lovely you are when you open pod bay doors?\n+   * because it lacks the robot's name\n+\n+## Send & reply\n+\n+The `msg` parameter is, despite the name, an instance of [Response](../src/response.coffee). With it, you can `send` a message back to the room the `msg` came from, or `reply` to the person that sent the message. For example:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.hear /badger/i, (msg) ->\n+    msg.send \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\"\n+\n+  robot.respond /open the pod bay doors/i, (msg) ->\n+    msg.reply \"I'm afraid I can't let you do that.\"\n+```\n+\n+The `robot.hear /badgers/` callback sends a message exactly as specified regardless of who said it, \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\". \n+\n+If a user Dave says \"HAL: open the pod bay doors\", `robot.respond /open the pod bay doors/i` callback sends a message \"Dave: I'm afraid I can't let you do that.\"\n+\n+## Capturing data\n+\n+So far, our scripts have had static responses, which while amusing, are boring functionality-wise. `msg.match` has the result of `match`ing the incoming message against the regular expression. This is just a [JavaScript thing](http://www.w3schools.com/jsref/jsref_match.asp), which ends up being an array with index 0 being the full text matching the expression. If you include capture groups, those will be populated `msg.match`. For example, if we update a script like:\n+\n+```coffeescript\n+  robot.respond /open the (.*) doors/i, (msg) ->\n+    # your code here\n+```\n+\n+If Dave says \"HAL: open the pod bay doors\", then `msg.match[0]` is \"open the pod bay doors\", and `msg.match[1]` is just \"pod bay\" doors. Now we can start doing more dynamic things:\n+\n+```coffeescript\n+  robot.respond /open the (.*) doors/i, (msg) ->\n+    doorType = msg.match[1]\n+    if doorType is \"pod bay\"\n+      msg.reply \"I'm afraid I can't let you do that.\"\n+    else\n+      msg.reply \"Opening #{doorType} doors\"\n+```\n+\n+## Making HTTP calls\n+\n+Hubot can make HTTP calls on your behalf to integrate & consume third party APIs. This can be through an instance of [node-scoped-http-client](https://github.com/technoweenie/node-scoped-http-client) available at `robot.http`. The simplest case looks like:\n+\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      # your code here\n+```\n+\n+`err` is an error encountered on the way, if one was encountered. You'll generally want to check for this and handle accordingly:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      if err\n+        msg.send \"Encountered an error :( #{err}\n+        return\n+      # your code here, knowing it was successful\n+```\n+\n+`res` is an instance of node's [http.ServerResponse](http://nodejs.org/api/http.html#http_class_http_serverresponse). Most of the methods don't matter as much when using node-scoped-http-client, but of interest are `statusCode` and `getHeader`. Use `statusCode` to check for the HTTP status code, where usually non-200 means something bad happened. Use `getHeader` for peaking at the header, for example to check for rate limiting:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      # pretend there's error checking code here\n+\n+      if res.statusCode isnt 200\n+        msg.send \"Request didn't come back HTTP 200 :(\"\n+        return\n+\n+      rateLimitRemaining = parseInt res.getHeader('X-RateLimit-Limit') if res.getHeader('X-RateLimit-Limit')\n+      if rateLimitRemaining and rateLimitRemaining < 1\n+        msg.send \"Rate Limit hit, stop believing for awhile\"\n+\n+      # rest of your code\n+```\n+\n+`body` is the response's body as a string, the thing you probably care about the most:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      # error checking code here\n+\n+      msg.send \"Got back #{body}\"\n+```\n+\n+### JSON\n+\n+If you are talking to APIs, the easiest way is going to be JSON because it doesn't require any extra dependencies. When making the `robot.http` call, you should usually set the  `Accept` header to give the API a clue that's what you are expecting back. Once you get the `body` back, you can parse it with `JSON.parse`:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .header('Accept', 'application/json')\n+    .get() (err, res, body) ->\n+      # error checking code here\n+\n+      data = JSON.parse(body)\n+      msg.send \"#{data.passenger} taking midnight train going #{data.destination}\"\n+```\n+\n+It's possible to get non-JSON back, like if the API hit an error and it tries to render a normal HTML error instead of JSON. To be on the safe side, you should check the `Content-Type`, and catch any errors while parsing.\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .header('Accept', 'application/json')\n+    .get() (err, res, body) ->\n+      # err & response status checking code here\n+\n+      if response.getHeader('Content-Type') isnt 'application/json'\n+        msg.send \"Didn't get back JSON :(\"\n+        return\n+\n+      data = null\n+      try\n+        data = JSON.parse(body)\n+      catch error\n+       msg.send \"Ran into an error parsing JSON :(\"\n+       return\n+\n+      # your code here\n+```\n+\n+### XML\n+\n+XML APIs are harder because there's not a bundled XML parsing library. It's beyond the scope of this documentation to go into detail, but here are a few libraries to check out:\n+\n+* [xml2json](https://github.com/buglabs/node-xml2json) (simplest to use, but has some limitations)\n+* [jsdom](https://github.com/tmpvar/jsdom) (JavaScript implementation of the W3C DOM)\n+* [xml2js](https://github.com/Leonidas-from-XIV/node-xml2js)\n+\n+### Screen scraping\n+\n+For those times that there isn't an API, there's always the possibility of screen-scraping. It's beyond the scope of this documentation to go into detail, but here's a few libraries to check out:\n+\n+* [cheerio](https://github.com/MatthewMueller/cheerio) (familiar syntax and API to jQuery)\n+* [jsdom](https://github.com/tmpvar/jsdom) (JavaScript implementation of the W3C DOM)\n+\n+## Random\n+\n+A common pattern is to hear or respond to commands, and send with a random funny image or line of text from an array of possibilities. It's annoying to do this in JavaScript and CoffeeScript out of the box, so Hubot includes a convenience method:\n+\n+```coffeescript\n+lulz = ['lol', 'rofl', 'lmao']\n+\n+msg.send msg.random lulz\n+```\n+\n+## Topic\n+\n+Hubot can react to a room's topic changing, assuming that the adapter supports it.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.topic (msg) ->\n+    msg.send \"#{msg.message.text}? That's a Paddlin'\"\n+```\n+\n+## Entering and leaving\n+\n+Hubot can see users entering and leaving, assuming that the adapter supports it.\n+\n+```coffeescript\n+enterReplies = ['Hi', 'Target Acquired', 'Firing', 'Hello friend.', 'Gotcha', 'I see you']\n+leaveReplies = ['Are you still there?', 'Target lost', 'Searching']\n+\n+module.exports = (robot) ->\n+  robot.enter (msg) ->\n+    msg.send msg.random enterReplies\n+  robot.leave (msg) ->\n+    msg.send msg.random leaveReplies\n+```\n+\n+## Environment variables\n+\n+Hubot can access the environment he's running in, just like any other node program, using [`process.env`](http://nodejs.org/api/process.html#process_process_env). This can be used to configure how scripts are run, with the convention being to use the `HUBOT_` prefix.\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+Take care to make sure the script can load if it's not defined, give the Hubot developer notes on how to define it, or default to something. It's up to the script writer to decide if that should be a fatal error (e.g. hubot exits), or not (make any script that relies on it to say it needs to be configured. When possible and when it makes sense to, having a script work without any other configuration is preferred.\n+\n+Here we can default to something:\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING or 42\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+Here we exit if it's not defined:\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n+unless answer?\n+  console.log \"Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again\"\n+  process.exit(1)\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+And lastly, we update the `robot.respond` to check it:\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    unless answer?\n+      msg.send \"Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again\"\n+      return\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+## Dependencies\n+\n+Hubot uses [npm](https://github.com/isaacs/npm) to manage its dependencies. To additional packages, add them to `dependencies` in `package.json`. For example, to add lolimadeupthispackage 1.2.3, it'd look like:\n+\n+```json\n+  \"dependencies\": {\n+    \"hubot\":         \"2.5.5\",\n+    \"hubot-scripts\": \"2.4.6\",\n+    \"lolimadeupthispackage\": \"1.2.3\"\n+  },\n+```\n+\n+If you are using scripts from hubot-scripts, take note of the `Dependencies` documentation in the script to add. They are listed in a format that can be copy & pasted into `package.json`, just make sure to add commas as necessary to make it valid JSON.\n+\n+# Timeouts and Intervals\n+\n+Hubot can run code later using JavaScript's built-in [setTimeout](http://nodejs.org/api/timers.html#timers_settimeout_callback_delay_arg). It takes a callback method, and the amount of time to wait before calling it:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /you are a little slow/, (msg)\n+    setTimeout () ->\n+      msg.send \"Who you calling 'slow'?\"\n+    , 60 * 1000\n+```\n+\n+Additionally, Hubot can run code on an interval using [setInterval](http://nodejs.org/api/timers.html#timers_setinterval_callback_delay_arg). It takes a callback method, and the amount of time to wait between calls:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /annoy me/, (msg)\n+    msg.send \"Hey, want to hear the most annoying sound in the world?\"\n+    setInterval () ->\n+      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+    , 1000\n+```\n+\n+Both `setTimeout` and `setInterval` return the ID of the timeout or interval it created. This can be used to to `clearTimeout` and `clearInterval`.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  annoyIntervalId = null\n+\n+  robot.respond /annoy me/, (msg)\n+    if annoyIntervalId\n+      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+      return\n+\n+    msg.send \"Hey, want to hear the most annoying sound in the world?\"\n+    annoyIntervalId = setInterval () ->\n+      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+    , 1000\n+\n+  robot.respond /unannoy me/, (msg)\n+    if annoyIntervalId\n+      msg.send \"GUYS, GUYS, GUYS!\"\n+      clearInterval(annoyIntervalId)\n+      annoyIntervalId = null\n+    else\n+      msg.send \"Not annoying you right now, am I?\"\n+```\n+\n+## HTTP Listener\n+\n+Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to server up HTTP requests. It listens on the port specified by the `PORT` environment variable, and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EPXRESS_PASSWORD`. It can automatically server static files by setting `EXPRESS_STATIC`.\n+\n+The most common use of this is for providing HTTP end points for services with webhooks to push to, and have those show up in chat.\n+\n+\n+```\n+module.exports = (robot) ->\n+  robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n+    room = req.params.room\n+    data = JSON.parse req.body.payload\n+    secret = data.secret\n+\n+    robot.messageRoom \"I have a secret: #{secret}\"\n+```\n+\n+## Events\n+\n+Hubot can also respond to events which can be used to pass data between scripts. This is done by encapsulating node.js's [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter) with `robot.emit` and `robot.on`.\n+\n+One use case for this would be to have one script for handling interactions with a service, and then emitting events as they come up. For example, we could have a script that receives data from a GitHub post-commit hook, make that emit commits as they come in, and then have another script act on those commits.\n+\n+```coffeescript\n+# src/scripts/github-commits.coffee\n+module.exports = (robot) ->\n+  robot.router.post \"/hubot/gh-commits\", (req, res) ->\n+    robot.emit \"commit\", {\n+        user    : {}, #hubot user object\n+        repo    : 'https://github.com/github/hubot',\n+        hash  : '2e1951c089bd865839328592ff673d2f08153643'\n+    }\n+```\n+\n+```coffeescript\n+# src/scripts/heroku.coffee\n+module.exports = (robot) ->\n+  robot.on \"commit\", (commit) ->\n+    robot.send commit.user, \"Will now deploy #{commit.hash} from #{commit.repo}!\"\n+    #deploy code goes here\n+```\n+\n+If you provide an event, it's highly recommended to include a hubot user or room object in its data. This would allow for hubot to notify a user or room in chat.\n+\n+## Documenting Scripts\n+\n+Hubot scripts can be documented with comments at the top of their file, for example:\n+\n+```coffeescript\n+# Description\n+#   <description of the scripts functionality>\n+#\n+# Dependencies:\n+#   \"<module name>\": \"<module version>\"\n+#\n+# Configuration:\n+#   LIST_OF_ENV_VARS_TO_SET\n+#\n+# Commands:\n+#   hubot <trigger> - <what the respond trigger does>\n+#   <trigger> - <what the hear trigger does>\n+#\n+# Notes:\n+#   <optional notes required for the script>\n+#\n+# Author:\n+#   <github username of the original script author>\n+```\n+\n+The most important and user facing of these is `Commands`. At load time, Hubot looks at the `Commands` section of each scripts, and build a list of all commands. The included `help.coffee` lets a user ask for help across all commands, or with a search. Therefore, documenting the commands make them a lot more discoverable by users.\n+\n+When documenting commands, here are some best practices:\n+\n+* Stay on one line. Help commands get sorted, so would insert the second line at an unexpected location, where it probably won't make sense.\n+* Refer to the Hubot as hubot, even if your hubot is named something else. It will automatically be replaced with the correct name. This makes it easier to share scripts without having to update docs.\n+* For `robot.respond` documentation, always prefix with `hubot`. Hubot will automatically replace this with your robot's name, or the robot's alias if it has one\n+* Check out how man pages document themselves. In particular, brackets indicate optional parts, '...' for any number of arguments, etc.\n+\n+The other sections are more relevant to developers of the bot, particularly dependencies, configuration variables, and notes. All contributions to [hubot-scripts](https://github.com/github/hubot-scripts) should include all these sections that are related to getting up and running with the script.\n+\n+\n+\n+## Persistence\n+\n+Hubot has an in-memory key-value store exposed as `robot.brain` that can be\n+used to store and retrieve data by scripts.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /have a beer/i, (msg) ->\n+    # Get number of beers had (coerced to a number).\n+    beersHad = robot.brain.get('totalBeers') * 1 or 0\n+\n+    if beersHad > 4\n+      msg.respond \"I'm too drunk..\"\n+\n+    else\n+      msg.respond 'Sure!'\n+\n+      robot.brain.set 'totalBeers', beersHad+1\n+      # Or robot.brain.set totalBeers: beersHad+1\n+```\n+\n+If the script needs to lookup user data, there are methods on `robot.brain` for looking up one or many users by id, name, or 'fuzzy' matching of name: `userForName`, `userForId`, `userForFuzzyName`, and `usersForFuzzyName`.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+\n+  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n+    name = msg.match[1].trim()\n+\n+    users = robot.brain.usersForFuzzyName(name)\n+    if users.length is 1\n+      user = users[0]\n+      # Do something interesting here..\n+\n+      msg.send \"#{name} is user - #{user}\"\n+```\n+\n+\n+## Creating A Script Package\n+\n+Creating a script package for hubot is very simple. Start by creating a normal\n+`npm` package. Make sure you add a main file for the entry point (e.g.\n+`index.js` or `index.coffee`).\n+\n+In this entry point file you're going to have to export a function that hubot\n+will use to load the scripts in your package. Below is a simple example for\n+loading each script in a `./scripts` directory in your package.\n+\n+```coffeescript\n+Fs   = require 'fs'\n+Path = require 'path'\n+\n+module.exports = (robot) ->\n+  path = Path.resolve __dirname, 'scripts'\n+  Fs.exists path, (exists) ->\n+    if exists\n+      for file in Fs.readdirSync(path)\n+        robot.loadFile path, file\n+        robot.parseHelp Path.join(path, file)\n+```\n+\n+After you've built your `npm` package you can publish it to [npmjs](http://npmjs.org).", "changes": 483}, {"status": "modified", "deletions": 16, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/src/options.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/src/options.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/options.coffee?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "src/options.coffee", "sha": "7d1abe01753de8412060377e40e5f1608aa38307", "additions": 16, "patch": "@@ -4,24 +4,25 @@ class Options\n   constructor: (argv) ->\n     argv or= []\n \n-    @adapter= \"shell\"\n-    @alias= false\n-    @create= false\n-    @enableHttpd= true\n-    @scripts= []\n-    @name= \"Hubot\"\n-    @path= \".\"\n-    @help= false\n+    @adapter = \"shell\"\n+    @alias = false\n+    @create = false\n+    @enableHttpd = true\n+    @scripts = []\n+    @name = \"Hubot\"\n+    @path = \".\"\n+    @help = false\n \n     switches = [\n       [ '-a', '--adapter ADAPTER', 'Adapter name for hubot to use' ],\n-      [ '-c', '--create PATH',     'Path to create your new hubot' ],\n-      [ '-d', '--disable-httpd',   'Disable the internal HTTP server' ],\n-      [ '-h', '--help',            'Display hubot usage' ],\n-      [ '-l', '--alias ALIAS',     'Alias name for your hubot' ],\n-      [ '-n', '--name NAME',       'Name for your hubot' ],\n-      [ '-v', '--version',         'Display hubot version' ]\n+      [ '-c', '--create PATH', 'Path to create your new hubot' ],\n+      [ '-d', '--disable-httpd', 'Disable the internal HTTP server' ],\n+      [ '-h', '--help', 'Display hubot usage' ],\n+      [ '-l', '--alias ALIAS', 'Alias name for your hubot' ],\n+      [ '-n', '--name NAME', 'Name for your hubot' ],\n+      [ '-v', '--version', 'Display hubot version' ]\n     ]\n+\n     parser = new OptParse.OptionParser(switches)\n     parser.banner = \"Usage hubot [options]\"\n \n@@ -35,9 +36,8 @@ class Options\n     parser.on \"disable-httpd\", (opt) =>\n       @enableHttpd = false\n \n-    # FIXME don't exit here\n     parser.on \"help\", (opt, value) =>\n-      @help= parser.toString()\n+      @help = parser.toString()\n \n     parser.on \"alias\", (opt, value) =>\n       value or= '/'", "changes": 32}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "src/scripts/help.coffee", "sha": "db3bee91271e666566c71ab7d0d79168ff7ac66c", "additions": 9, "patch": "@@ -54,17 +54,19 @@ module.exports = (robot) ->\n   robot.respond /help\\s*(.*)?$/i, (msg) ->\n     cmds = robot.scripts.helpCommands()\n \n-    if msg.match[1]\n+    if filter\n       cmds = cmds.filter (cmd) ->\n-        cmd.match new RegExp(msg.match[1], 'i')\n-\n+        cmd.match new RegExp(filter, 'i')\n       if cmds.length == 0\n-        msg.send \"No available commands match #{msg.match[1]}\"\n+        msg.send \"No available commands match #{filter}\"\n         return\n-    emit = cmds.join \"\\n\"\n \n-    unless robot.name.toLowerCase() is 'hubot'\n-      emit = emit.replace /hubot/ig, robot.name\n+    prefix = robot.alias or \"#{robot.name} \"\n+    cmds = cmds.map (cmd) ->\n+      cmd = cmd.replace /^hubot /, prefix\n+      cmd.replace /hubot/ig, robot.name\n+\n+    emit = cmds.join \"\\n\"\n \n     msg.send emit\n ", "changes": 16}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/src/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "src/scripts/math.coffee", "sha": "5c2f324473793728d40b2fe3b82a8edd889a3e81", "additions": 2, "patch": "@@ -6,7 +6,8 @@\n #   hubot convert me <expression> to <units> - Convert expression to given units.\n module.exports = (robot) ->\n   robot.respond /(calc|calculate|convert|math|maths)( me)? (.*)/i, (msg) ->\n-    robot.http('https://www.google.com/ig/calculator')\n+    robot\n+      .http('https://www.google.com/ig/calculator')\n       .query\n         hl: 'en'\n         q: msg.match[3]", "changes": 3}, {"status": "modified", "deletions": 46, "raw_url": "https://github.com/hubotio/hubot/raw/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=c6e5d83db57419bf237e0d4313fc0b4dc90f8b6b", "filename": "src/templates/README.md", "sha": "f2a3feb7710860607afcf6e50e568057963c2550", "additions": 24, "patch": "@@ -2,49 +2,10 @@\n \n This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n \n-This version is designed to be deployed on [Heroku][heroku].\n+This version is designed to be deployed on [Heroku][heroku]. This README was generated for you by hubot to help get you started. Definitely update and improve to talk about your own instance, how to use and deploy, what functionality he has, etc!\n \n [heroku]: http://www.heroku.com\n \n-## Playing with Hubot\n-\n-You'll need to install the necessary dependencies for hubot. All of\n-those dependencies are provided by [npm][npmjs].\n-\n-[npmjs]: http://npmjs.org\n-\n-## HTTP Listener\n-\n-Hubot has a HTTP listener which listens on the port specified by the `PORT`\n-environment variable.\n-\n-You can specify routes to listen on in your scripts by using the `router`\n-property on `robot`.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-  robot.router.get \"/hubot/version\", (req, res) ->\n-    res.end robot.version\n-```\n-\n-There are functions for GET, POST, PUT and DELETE, which all take a route and\n-callback function that accepts a request and a response.\n-\n-### Redis\n-\n-If you are going to use the `redis-brain.coffee` script from `hubot-scripts`\n-you will need to add the Redis to Go addon on Heroku which requires a verified\n-account or you can create an account at [Redis to Go][redistogo] and manually\n-set the `REDISTOGO_URL` variable.\n-\n-    % heroku config:add REDISTOGO_URL=\"...\"\n-\n-If you don't require any persistence feel free to remove the\n-`redis-brain.coffee` from `hubot-scripts.json` and you don't need to worry\n-about redis at all.\n-\n-[redistogo]: https://redistogo.com/\n-\n ### Testing Hubot Locally\n \n You can test your hubot by running the following.\n@@ -68,9 +29,27 @@ Then you can interact with hubot by typing `hubot help`.\n     help - Displays all of the help commands that Hubot knows about.\n     ...\n \n+\n+### Scripting\n+\n Take a look at the scripts in the `./scripts` folder for examples.\n-Delete any scripts you think are silly.  Add whatever functionality you\n-want hubot to have.\n+Delete any scripts you think are useless or boring.  Add whatever functionality you\n+want hubot to have. Read up on what you can do with hubot in the [Scripting Guide](https://github.com/github/hubot/blob/master/docs/scripting.md).\n+\n+### Redis Persistence\n+\n+If you are going to use the `redis-brain.coffee` script from `hubot-scripts`\n+(strongly suggested), you will need to add the Redis to Go addon on Heroku which requires a verified\n+account or you can create an account at [Redis to Go][redistogo] and manually\n+set the `REDISTOGO_URL` variable.\n+\n+    % heroku config:add REDISTOGO_URL=\"...\"\n+\n+If you don't require any persistence feel free to remove the\n+`redis-brain.coffee` from `hubot-scripts.json` and you don't need to worry\n+about redis at all.\n+\n+[redistogo]: https://redistogo.com/\n \n ## Adapters\n \n@@ -144,9 +123,9 @@ Please check out the [deploying hubot onto UNIX][deploy-unix] and\n [deploying hubot onto Windows][deploy-windows] wiki pages.\n \n [heroku-node-docs]: http://devcenter.heroku.com/articles/node-js\n-[deploy-heroku]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-Heroku\n-[deploy-unix]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-UNIX\n-[deploy-windows]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-Windows\n+[deploy-heroku]: https://github.com/github/hubot/blob/master/docs/deploying/heroku.md\n+[deploy-unix]: https://github.com/github/hubot/blob/master/docs/deploying/unix.md\n+[deploy-windows]: https://github.com/github/hubot/blob/master/docs/deploying/unix.md\n \n ## Campfire Variables\n \n@@ -176,4 +155,3 @@ Add the subdomain hubot should connect to. If you web URL looks like\n \n You may want to get comfortable with `heroku logs` and `heroku restart`\n if you're having issues.\n-", "changes": 70}], "545": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ef4ddae53a433dd437fc1177218846cee1046826/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/ef4ddae53a433dd437fc1177218846cee1046826/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=ef4ddae53a433dd437fc1177218846cee1046826", "filename": "docs/README.md", "sha": "f5c03f46f695082f3aea8a8e907a3d901d7ac66e", "additions": 1, "patch": "@@ -3,7 +3,7 @@\n ## Getting Started With Hubot\n \n You will need [node.js](nodejs.org/) and [npm](https://npmjs.org/). Joyent has\n-an [excellent blog post on how to those installed](http://joyent.com/blog/installing-node-and-npm), so we'll omit those details here.\n+an [excellent blog post on how to get those installed](http://joyent.com/blog/installing-node-and-npm), so we'll omit those details here.\n \n Once node and npm are ready, we can install hubot and coffeescript:\n ", "changes": 2}], "546": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/58894c1ee8dfa26ad65c36d20c36147cd1affe8d/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/58894c1ee8dfa26ad65c36d20c36147cd1affe8d/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=58894c1ee8dfa26ad65c36d20c36147cd1affe8d", "filename": "docs/scripting.md", "sha": "a0ca20075a628fd2af01a99d442583e142c603a7", "additions": 4, "patch": "@@ -54,7 +54,7 @@ It wouldn't be called for:\n \n ## Send & reply\n \n-The `msg` parameter is, despite the name, an instance of [Response](../src/response.coffee). With it, you can `send` a message back to the room the `msg` came from, or `reply` to the person that sent the message. For example:\n+The `msg` parameter is, despite the name, an instance of [Response](../src/response.coffee). With it, you can `send` a message back to the room the `msg` came from, `emote` a message to a room (If the given adapter supports it), or `reply` to the person that sent the message. For example:\n \n ```coffeescript\n module.exports = (robot) ->\n@@ -63,6 +63,9 @@ module.exports = (robot) ->\n \n   robot.respond /open the pod bay doors/i, (msg) ->\n     msg.reply \"I'm afraid I can't let you do that.\"\n+\n+  robot.hear /I like pie/i, (msg) ->\n+    msg.emote \"makes a freshly baked pie\"\n ```\n \n The `robot.hear /badgers/` callback sends a message exactly as specified regardless of who said it, \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\". ", "changes": 5}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/58894c1ee8dfa26ad65c36d20c36147cd1affe8d/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/58894c1ee8dfa26ad65c36d20c36147cd1affe8d/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=58894c1ee8dfa26ad65c36d20c36147cd1affe8d", "filename": "src/adapter.coffee", "sha": "5f31bbd4dd4691376f9be2e2c037e4f962d44cd5", "additions": 10, "patch": "@@ -14,6 +14,16 @@ class Adapter extends EventEmitter\n   # Returns nothing.\n   send: (envelope, strings...) ->\n \n+  # Public: Raw method for sending emote data back to the chat source.\n+  # Defaults as an alias for send\n+  #\n+  # envelope - A Object with message, room and user details.\n+  # strings  - One or more Strings for each message to send.\n+  #\n+  # Returns nothing.\n+  emote: (envelope, strings...) ->\n+    @send envelope, strings...\n+\n   # Public: Raw method for building a reply and sending it back to the chat\n   # source. Extend this.\n   #", "changes": 10}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/58894c1ee8dfa26ad65c36d20c36147cd1affe8d/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/58894c1ee8dfa26ad65c36d20c36147cd1affe8d/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=58894c1ee8dfa26ad65c36d20c36147cd1affe8d", "filename": "src/adapters/campfire.coffee", "sha": "437e3028e0b8e5c6c154382812de002c79aaef6c", "additions": 3, "patch": "@@ -17,6 +17,9 @@ class Campfire extends Adapter\n           @robot.logger.error \"Campfire error: #{err}\" if err?\n           @send envelope, strings...\n \n+  emote: (envelope, strings...) ->\n+    @send envelope, strings.map((str) -> \"*#{str}*\")...\n+\n   reply: (envelope, strings...) ->\n     @send envelope, strings.map((str) -> \"#{envelope.user.name}: #{str}\")...\n ", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/58894c1ee8dfa26ad65c36d20c36147cd1affe8d/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/58894c1ee8dfa26ad65c36d20c36147cd1affe8d/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=58894c1ee8dfa26ad65c36d20c36147cd1affe8d", "filename": "src/adapters/shell.coffee", "sha": "83f8e00cfdbcc2f4c7baa674a66346d299999a81", "additions": 3, "patch": "@@ -12,6 +12,9 @@ class Shell extends Adapter\n       console.log \"#{str}\" for str in strings\n     @repl.prompt()\n \n+  emote: (envelope, strings...) ->\n+    @send envelope, \"* #{str}\" for str in strings\n+\n   reply: (envelope, strings...) ->\n     strings = strings.map (s) -> \"#{envelope.user.name}: #{s}\"\n     @send envelope, strings...", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/58894c1ee8dfa26ad65c36d20c36147cd1affe8d/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/58894c1ee8dfa26ad65c36d20c36147cd1affe8d/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=58894c1ee8dfa26ad65c36d20c36147cd1affe8d", "filename": "src/response.coffee", "sha": "ac4845ede2d5c9f9ace2ead02fdd362eaa99ae97", "additions": 9, "patch": "@@ -21,6 +21,15 @@ class Response\n   send: (strings...) ->\n     @robot.adapter.send @envelope, strings...\n \n+  # Public: Posts an emote back to the chat source\n+  #\n+  # strings - One or more strings to be posted. The order of these strings\n+  #           should be kept intact.\n+  #\n+  # Returns nothing.\n+  emote: (strings...) ->\n+    @robot.adapter.emote @envelope, strings...\n+\n   # Public: Posts a message mentioning the current user.\n   #\n   # strings - One or more strings to be posted. The order of these strings", "changes": 9}], "547": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/472a29de658e97e2e86fdf472dfc4b2baae07adb/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/472a29de658e97e2e86fdf472dfc4b2baae07adb/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=472a29de658e97e2e86fdf472dfc4b2baae07adb", "filename": "docs/deploying/heroku.md", "sha": "c4eed5202e3dbb60f85321d28c8ccac61ba13194", "additions": 1, "patch": "@@ -47,7 +47,7 @@ there's a special environment variable to make hubot regularly ping itself over\n the app is deployed to http://rosemary-britches-123.herokuapp.com/, then you'd\n configure:\n \n-    % heroku config:add HUBOT_HEROKU_URL=http://rosemary-britches-123.herokuapp.com\n+    % heroku config:add HEROKU_URL=http://rosemary-britches-123.herokuapp.com\n \n At this point, you are ready to deploy and start chatting. With Heroku, that's a\n git push away:", "changes": 2}], "548": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e80de52b75c9bdb1e2234545847745156c414233/docs/deploying/windows.md", "blob_url": "https://github.com/hubotio/hubot/blob/e80de52b75c9bdb1e2234545847745156c414233/docs/deploying/windows.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/windows.md?ref=e80de52b75c9bdb1e2234545847745156c414233", "filename": "docs/deploying/windows.md", "sha": "145a1fa8995b9adf446bf5f6156fcd0f9afab680", "additions": 33, "patch": "@@ -1,3 +1,35 @@\n # Deploying Hubot to Windows\n \n-Not yet written. [Help me out by submitting a pull request, please?](https://github.com/github/hubot/pull/new/master)\n+Hasn't been fully tested - YMMV\n+\n+There are 3 primary things to deploying and running hubot:\n+\n+  * node and npm\n+  * a way to get source code updated on the server\n+  * a way to start hubot, start it up if it crashes, and restart it when code\n+    updates\n+\n+## node and npm\n+\n+To start, your windows server will need node and npm. \n+The best way to do this is with [chocolatey](http://chocolatey.org) using the [nodejs.install](http://chocolatey.org/packages/nodejs.install) package.\n+I've found that sometimes the system path variable is not correctly set; ensure you can run node/npm from the command line. If needed set the PATH variable with \"setx PATH \\\"%PATH%;C:\\Program Files\\nodejs\\\" \"\n+\n+## Updating code on the server\n+\n+The simplest way to update your hubot's code is going to be to have a git\n+checkout of your hubot's source code (that you've created during [Getting Started](../README.md), not the [github/hubot repository](http://github.com/github/hubot), and just git pull to get change. This may\n+feel a dirty hack, but it works when you are starting out.\n+\n+## Starting, stopping, and restarting hubot\n+\n+Every hubot install has a `bin/hubot` script to handle starting up the hubot.\n+You can run this command from your git checkout on the server, but there are some problems you can encounter:\n+\n+* you disconnect, and hubot dies\n+* hubot dies, for any reason, and doesn't start again\n+* it doesn't start up at boot automatically\n+\n+## Expanding the documentation\n+\n+Not yet fleshed out. [Help contribute by submitting a pull request, please?](https://github.com/github/hubot/pull/new/master)\n\\ No newline at end of file", "changes": 34}], "549": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/d97e52a61178614989b91c7b61a9b809a6e72356/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/d97e52a61178614989b91c7b61a9b809a6e72356/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=d97e52a61178614989b91c7b61a9b809a6e72356", "filename": "bin/hubot", "sha": "fb92f1fe20a5a9c71a0d393b57a0b3ed40d0e545", "additions": 4, "patch": "@@ -14,15 +14,15 @@ Switches = [\n   [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n   [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n   [ \"-h\", \"--help\",            \"Display the help information\" ],\n-  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n+  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias (can add multiple)\" ],\n   [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n   [ \"-r\", \"--require PATH\",    \"Alternative scripts path\" ],\n   [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n ]\n \n Options =\n   adapter:     process.env.HUBOT_ADAPTER or \"shell\"\n-  alias:       process.env.HUBOT_ALIAS   or false\n+  aliases:     process.env.HUBOT_ALIAS   or []\n   create:      process.env.HUBOT_CREATE  or false\n   enableHttpd: process.env.HUBOT_HTTPD   or true\n   scripts:     process.env.HUBOT_SCRIPTS or []\n@@ -48,7 +48,7 @@ Parser.on \"help\", (opt, value) ->\n \n Parser.on \"alias\", (opt, value) ->\n   value or= '/'\n-  Options.alias = value\n+  Options.aliases.push value\n \n Parser.on \"name\", (opt, value) ->\n   Options.name = value\n@@ -78,7 +78,7 @@ else\n     console.log robot.version\n     process.exit 0\n \n-  robot.alias = Options.alias\n+  robot.aliases = Options.aliases\n \n   loadScripts = ->\n     scriptsPath = Path.resolve \".\", \"scripts\"", "changes": 8}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/d97e52a61178614989b91c7b61a9b809a6e72356/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d97e52a61178614989b91c7b61a9b809a6e72356/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=d97e52a61178614989b91c7b61a9b809a6e72356", "filename": "src/robot.coffee", "sha": "c27a6c715ea5a84ace250b4cf41cb9f0a06e5900", "additions": 4, "patch": "@@ -40,7 +40,7 @@ class Robot\n     @name      = name\n     @events    = new EventEmitter\n     @brain     = new Brain @\n-    @alias     = false\n+    @aliases   = []\n     @adapter   = null\n     @Response  = Response\n     @commands  = []\n@@ -83,10 +83,10 @@ class Robot\n     pattern = re.join('/')\n     name = @name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n \n-    if @alias\n-      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+    if @aliases.length > 0\n+      aliases = (a.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&') for a in @aliases)\n       newRegex = new RegExp(\n-        \"^[@]?(?:#{alias}[:,]?|#{name}[:,]?)\\\\s*(?:#{pattern})\"\n+        \"^[@]?(?:(#{aliases.join('|')})[:,]?|#{name}[:,]?)\\\\s*(?:#{pattern})\"\n         modifiers\n       )\n     else", "changes": 8}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d97e52a61178614989b91c7b61a9b809a6e72356/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d97e52a61178614989b91c7b61a9b809a6e72356/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=d97e52a61178614989b91c7b61a9b809a6e72356", "filename": "src/scripts/help.coffee", "sha": "08af3ebbce08ab60883319d6bd33d76749f97578", "additions": 1, "patch": "@@ -62,7 +62,7 @@ module.exports = (robot) ->\n         msg.send \"No available commands match #{filter}\"\n         return\n \n-    prefix = robot.alias or \"#{robot.name} \"\n+    prefix = robot.aliases[0] or \"#{robot.name} \"\n     cmds = cmds.map (cmd) ->\n       cmd = cmd.replace /^hubot /, prefix\n       cmd.replace /hubot/ig, robot.name", "changes": 2}], "553": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4ff476bd4f3661d06f5952a4c4cb7061ee2cd4db/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/4ff476bd4f3661d06f5952a4c4cb7061ee2cd4db/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=4ff476bd4f3661d06f5952a4c4cb7061ee2cd4db", "filename": ".travis.yml", "sha": "877d3d9bea2480898dc075f1594bf9bfd760fbbd", "additions": 1, "patch": "@@ -4,6 +4,6 @@ node_js:\n   - \"0.10\"\n branches:\n   only:\n-    - vthree-rethink\n+    - /^vthree-rethink/\n notifications:\n   email: false", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4ff476bd4f3661d06f5952a4c4cb7061ee2cd4db/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4ff476bd4f3661d06f5952a4c4cb7061ee2cd4db/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=4ff476bd4f3661d06f5952a4c4cb7061ee2cd4db", "filename": "src/robot.coffee", "sha": "4fec061577595153783234425b28fc5abe9cf64e", "additions": 1, "patch": "@@ -144,7 +144,7 @@ class Robot\n     app.use express.bodyParser()\n     app.use express.static stat if stat\n \n-    @server = app.listen process.env.PORT || 8080\n+    @server = app.listen process.env.PORT or 8080\n     @router = app\n \n     herokuUrl = process.env.HEROKU_URL", "changes": 2}], "554": [{"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/17e48f8ca57c5e23a849073970fe3285c44cd9e3/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/17e48f8ca57c5e23a849073970fe3285c44cd9e3/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=17e48f8ca57c5e23a849073970fe3285c44cd9e3", "filename": "src/robot.coffee", "sha": "ac7f18b018df1e8f5d42dbe0465f73661ae34dcd", "additions": 5, "patch": "@@ -4,11 +4,11 @@ Path           = require 'path'\n HttpClient     = require 'scoped-http-client'\n {EventEmitter} = require 'events'\n \n-User                                        = require './user'\n-Brain                                       = require './brain'\n-Response                                    = require './response'\n-{Listener,TextListener}                     = require './listener'\n-{EnterMessage,LeaveMessage,CatchAllMessage} = require './message'\n+User = require './user'\n+Brain = require './brain'\n+Response = require './response'\n+{Listener,TextListener} = require './listener'\n+{EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n \n HUBOT_DEFAULT_ADAPTERS = [\n   'campfire'", "changes": 10}], "555": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fe20d71768f964276dcc33ec8b4f1588f2be9ace/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/fe20d71768f964276dcc33ec8b4f1588f2be9ace/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=fe20d71768f964276dcc33ec8b4f1588f2be9ace", "filename": "docs/scripting.md", "sha": "9ac22830de2528784cf18254dc9af60f1427a11a", "additions": 1, "patch": "@@ -106,7 +106,7 @@ Hubot can make HTTP calls on your behalf to integrate & consume third party APIs\n   robot.http(\"https://midnight-train\")\n     .get() (err, res, body) ->\n       if err\n-        msg.send \"Encountered an error :( #{err}\n+        msg.send \"Encountered an error :( #{err}\"\n         return\n       # your code here, knowing it was successful\n ```", "changes": 2}], "557": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4f4c93b958943d33df12d298c432b7f1983bc7ac/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4f4c93b958943d33df12d298c432b7f1983bc7ac/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=4f4c93b958943d33df12d298c432b7f1983bc7ac", "filename": "src/robot.coffee", "sha": "8cb70184df7af1ffae355e2087c49debbb8935c3", "additions": 24, "patch": "@@ -35,6 +35,12 @@ class Robot extends EventEmitter\n     @setupExpress() if args.httpd\n     @pingIntervalId = null\n \n+    @errorHandlers = []\n+\n+    @on 'error', @invokeErrorHandlers\n+    process.on 'uncaughtException', @invokeErrorhandlers\n+\n+\n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n   #\n@@ -111,6 +117,24 @@ class Robot extends EventEmitter\n     matcher = (msg) -> msg.type is 'topic'\n     @listeners.push new Listener(@, matcher, callback)\n \n+  # Public: Adds an error handler when an uncaught exception or user emitted\n+  # error event occurs.\n+  #\n+  # callback - A Function that is called with the error object.\n+  #\n+  # Returns nothing.\n+  error: (callback) ->\n+    @errorHandlers.push callback\n+\n+  # Private: Calls and passes any registered error handlers for unhandled\n+  # exceptions or user emitted error events.\n+  #\n+  # err - An Error object.\n+  #\n+  # Returns nothing.\n+  invokeErrorHandlers: (err) ->\n+    errorHandler err for errorHandler in @errorHandlers\n+\n   # Public: Passes the given message to any interested Listeners.\n   #\n   # message - A Message instance. Listeners can flag this message as 'done' to", "changes": 24}], "558": [{"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/2e25a48f6b7cb92a0c6ac8733d7b59b77d9b8306/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/2e25a48f6b7cb92a0c6ac8733d7b59b77d9b8306/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=2e25a48f6b7cb92a0c6ac8733d7b59b77d9b8306", "filename": "src/templates/README.md", "sha": "b26a8300d89cfe8bdf213e43e68cce318cc217a8", "additions": 5, "patch": "@@ -55,8 +55,8 @@ about redis at all.\n \n Adapters are the interface to the service you want your hubot to run on. This\n can be something like Campfire or IRC. There are a number of third party\n-adapters that the community have contributed. Check the\n-[hubot wiki][hubot-wiki] for the available ones.\n+adapters that the community have contributed. Check\n+[Hubot Adapters][hubot-adapters] for the available ones.\n \n If you would like to run a non-Campfire or shell adapter you will need to add\n the adapter package as a dependency to the `package.json` file in the\n@@ -69,7 +69,7 @@ then run hubot with the adapter.\n \n Where `<adapter>` is the name of your adapter without the `hubot-` prefix.\n \n-[hubot-wiki]: https://github.com/github/hubot/wiki\n+[hubot-adapters]: https://github.com/github/hubot/blob/master/docs/adapters.md\n \n ## hubot-scripts\n \n@@ -131,7 +131,7 @@ Please check out the [deploying hubot onto UNIX][deploy-unix] and\n \n If you are using the Campfire adapter you will need to set some environment\n variables. Refer to the documentation for other adapters and the configuraiton\n-of those, links to the adapters can be found on the [hubot wiki][hubot-wiki].\n+of those, links to the adapters can be found on [Hubot Adapters][hubot-adapters].\n \n Create a separate Campfire user for your bot and get their token from the web\n UI.\n@@ -149,7 +149,7 @@ Add the subdomain hubot should connect to. If you web URL looks like\n \n     % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=\"mysubdomain\"\n \n-[hubot-wiki]: https://github.com/github/hubot/wiki\n+[hubot-adapters]: https://github.com/github/hubot/blob/master/docs/adapters.md\n \n ## Restart the bot\n ", "changes": 10}], "559": [{"status": "modified", "deletions": 23, "raw_url": "https://github.com/hubotio/hubot/raw/22bf814d7815229e2e7a155144daea7d09398e00/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/22bf814d7815229e2e7a155144daea7d09398e00/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=22bf814d7815229e2e7a155144daea7d09398e00", "filename": "src/robot.coffee", "sha": "664d4ad87f702dfd7bcd3d94d0560f5e7505a11a", "additions": 1, "patch": "@@ -12,7 +12,7 @@ Response  = require './response'\n Listener = require './listener'\n Message = require './message'\n \n-class Robot\n+class Robot extends EventEmitter\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n   # dispatch them to matching listeners.\n   #\n@@ -23,7 +23,6 @@ class Robot\n     @name = args.name or 'Hubot'\n     @alias = args.alias\n     @brain = new Brain @\n-    @events = new EventEmitter\n \n     Adapter.load @, args.adapterPath, args.adapter\n \n@@ -186,27 +185,6 @@ class Robot\n     user = { room: room }\n     @adapter.send user, strings...\n \n-  # Public: A wrapper around the EventEmitter API to make usage\n-  # semanticly better.\n-  #\n-  # event    - The event name.\n-  # listener - A Function that is called with the event parameter\n-  #            when event happens.\n-  #\n-  # Returns nothing.\n-  on: (event, args...) ->\n-    @events.on event, args...\n-\n-  # Public: A wrapper around the EventEmitter API to make usage\n-  # semanticly better.\n-  #\n-  # event   - The event name.\n-  # args...  - Arguments emitted by the event\n-  #\n-  # Returns nothing.\n-  emit: (event, args...) ->\n-    @events.emit event, args...\n-\n   # Public: Kick off the event loop for the adapter\n   #\n   # Returns nothing.", "changes": 24}], "560": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f95415524085fe70350bf4702e1675cbf582547b/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/f95415524085fe70350bf4702e1675cbf582547b/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=f95415524085fe70350bf4702e1675cbf582547b", "filename": "docs/adapters.md", "sha": "ad08b4c7138fc47cb50cb8e96d7b179a883990c2", "additions": 1, "patch": "@@ -20,7 +20,7 @@ to have yours added to the list:\n * [IRC](https://github.com/nandub/hubot-irc)\n * [Partychat](https://github.com/iangreenleaf/hubot-partychat-hooks)\n * [Talker](https://github.com/unixcharles/hubot-talker)\n-* [Twilio](https://github.com/egparedes/hubot-twilio)\n+* [Twilio](https://github.com/jkarmel/hubot-twilio)\n * [Twitter](https://github.com/MathildeLemee/hubot-twitter)\n * [XMPP](https://github.com/markstory/hubot-xmpp)\n * [Gtalk](https://github.com/atmos/hubot-gtalk)", "changes": 2}], "561": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8282d2ceabe7e360493a885133b13bf9d4badd5d/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8282d2ceabe7e360493a885133b13bf9d4badd5d/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=8282d2ceabe7e360493a885133b13bf9d4badd5d", "filename": "src/scripts/help.coffee", "sha": "dbbfc1a3347d13b638e11bae4f19f7378bf7edc0", "additions": 1, "patch": "@@ -62,7 +62,7 @@ module.exports = (robot) ->\n         msg.send \"No available commands match #{filter}\"\n         return\n \n-    prefix = robot.alias or \"#{robot.name} \"\n+    prefix = if robot.alias then \"#{robot.alias} \" else \"#{robot.name} \"\n     cmds = cmds.map (cmd) ->\n       cmd = cmd.replace /^hubot /, prefix\n       cmd.replace /hubot/ig, robot.name", "changes": 2}], "562": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/5377ea852a95d9a3626baa73569405cca7dcf7b8/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/5377ea852a95d9a3626baa73569405cca7dcf7b8/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=5377ea852a95d9a3626baa73569405cca7dcf7b8", "filename": "bin/hubot", "sha": "288d8dded740ca0a6ad591234f01d8f36326337c", "additions": 2, "patch": "@@ -33,6 +33,6 @@ else\n \n   if options.version\n     console.log robot.version\n-    process.exit()\n+    process.exit 0\n \n-  robot.run()\n+  robot.run options.brain or 'memory'", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/5377ea852a95d9a3626baa73569405cca7dcf7b8/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5377ea852a95d9a3626baa73569405cca7dcf7b8/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=5377ea852a95d9a3626baa73569405cca7dcf7b8", "filename": "src/brain.coffee", "sha": "f2f9efee90c860f3dec99b0cea6d369c9f1e8602", "additions": 14, "patch": "@@ -3,13 +3,25 @@\n User = require './user'\n \n class Brain extends EventEmitter\n-  # Represents somewhat persistent storage for the robot. Extend this.\n+\n+  @load: (robot, brain) ->\n+    robot.logger.debug \"Loading brain #{brain}\"\n+\n+    try\n+      if brain is 'memory'\n+        robot.brain.emit 'ready'\n+      else\n+        require(\"hubot-brain-#{brain}\")(robot)\n+    catch err\n+      robot.logger.error \"Cannot load brain #{brain}:\\n#{err.stack}\"\n+      process.exit 1\n+\n   constructor: ->\n     @data =\n       users: {}\n       _private: {}\n \n-    @on 'connected', =>\n+    @on 'ready', =>\n       @resetSaveInterval 5\n \n   # Public: Store key-value pair under the private namespace and extend", "changes": 16}, {"status": "modified", "deletions": 23, "raw_url": "https://github.com/hubotio/hubot/raw/5377ea852a95d9a3626baa73569405cca7dcf7b8/src/options.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5377ea852a95d9a3626baa73569405cca7dcf7b8/src/options.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/options.coffee?ref=5377ea852a95d9a3626baa73569405cca7dcf7b8", "filename": "src/options.coffee", "sha": "ab3afc2b620647ccc7ec9cdd4e0cd0af9a65cb49", "additions": 28, "patch": "@@ -4,52 +4,57 @@ class Options\n   constructor: (argv) ->\n     argv or= []\n \n-    @adapter= \"shell\"\n-    @alias= false\n-    @create= false\n-    @enableHttpd= true\n-    @scripts= []\n-    @name= \"Hubot\"\n-    @path= \".\"\n-    @help= false\n+    @adapter = 'shell'\n+    @brain = false\n+    @create = false\n+    @enableHttpd = true\n+    @help = false\n+    @alias = false\n+    @name = 'Hubot'\n+    @scripts = []\n+    @path = '.'\n \n     switches = [\n-      [ '-a', '--adapter ADAPTER', 'Adapter name for hubot to use' ],\n-      [ '-c', '--create PATH',     'Path to create your new hubot' ],\n-      [ '-d', '--disable-httpd',   'Disable the internal HTTP server' ],\n-      [ '-h', '--help',            'Display hubot usage' ],\n-      [ '-l', '--alias ALIAS',     'Alias name for your hubot' ],\n-      [ '-n', '--name NAME',       'Name for your hubot' ],\n-      [ '-v', '--version',         'Display hubot version' ]\n+      [ '-a', '--adapter ADAPTER', 'Adapter name for hubot to use' ]\n+      [ '-b', '--brain BRAIN', 'Brain for hubot to use' ]\n+      [ '-c', '--create PATH', 'Path to create your new hubot' ]\n+      [ '-d', '--disable-httpd', 'Disable the internal HTTP server' ]\n+      [ '-h', '--help', 'Display hubot usage' ]\n+      [ '-l', '--alias ALIAS', 'Alias name for your hubot' ]\n+      [ '-n', '--name NAME', 'Name for your hubot' ]\n+      [ '-v', '--version', 'Display hubot version' ]\n     ]\n     parser = new OptParse.OptionParser(switches)\n-    parser.banner = \"Usage hubot [options]\"\n+    parser.banner = 'Usage hubot [options]'\n \n-    parser.on \"adapter\", (opt, value) =>\n+    parser.on 'adapter', (opt, value) =>\n       @adapter = value\n \n-    parser.on \"create\", (opt, value) =>\n+    parser.on 'brain', (opt, value) =>\n+      @brain = value\n+\n+    parser.on 'create', (opt, value) =>\n       @path = value if value\n       @create = true\n \n-    parser.on \"disable-httpd\", (opt) =>\n+    parser.on 'disable-httpd', (opt) =>\n       @enableHttpd = false\n \n     # FIXME don't exit here\n     parser.on \"help\", (opt, value) =>\n       @help= parser.toString()\n \n-    parser.on \"alias\", (opt, value) =>\n+    parser.on 'alias', (opt, value) =>\n       value or= '/'\n       @alias = value\n \n-    parser.on \"name\", (opt, value) =>\n+    parser.on 'name', (opt, value) =>\n       @name = value\n \n-    parser.on \"require\", (opt, value) =>\n+    parser.on 'require', (opt, value) =>\n       @scripts.push(value)\n \n-    parser.on \"version\", (opt, value) =>\n+    parser.on 'version', (opt, value) =>\n       @version = true\n \n     parser.parse argv", "changes": 51}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/5377ea852a95d9a3626baa73569405cca7dcf7b8/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5377ea852a95d9a3626baa73569405cca7dcf7b8/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=5377ea852a95d9a3626baa73569405cca7dcf7b8", "filename": "src/robot.coffee", "sha": "890b3de9169bfa608a3bea27c689746a04e7843b", "additions": 7, "patch": "@@ -22,10 +22,9 @@ class Robot extends EventEmitter\n \n     @name = args.name or 'Hubot'\n     @alias = args.alias\n-    @brain = new Brain @\n+    @brain = new Brain\n \n     Adapter.load @, args.adapterPath, args.adapter\n-\n     @scripts = new Scripts @\n \n     @Response = Response\n@@ -212,9 +211,12 @@ class Robot extends EventEmitter\n   # Public: Kick off the event loop for the adapter\n   #\n   # Returns nothing.\n-  run: ->\n-    @emit 'running'\n-    @adapter.run()\n+  run: (brain) ->\n+    @brain.on 'ready', =>\n+      @adapter.run()\n+      @emit 'running'\n+\n+    Brain.load @, brain\n \n   # Public: Gracefully shutdown the robot process\n   #", "changes": 12}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/5377ea852a95d9a3626baa73569405cca7dcf7b8/test/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5377ea852a95d9a3626baa73569405cca7dcf7b8/test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.coffee?ref=5377ea852a95d9a3626baa73569405cca7dcf7b8", "filename": "test/brain_test.coffee", "sha": "6ed091f54d32368f2290f03ecceccc2162fcfe9a", "additions": 2, "patch": "@@ -28,7 +28,7 @@ describe \"Brain\", ->\n       @brain.resetSaveInterval = sinon.spy()\n \n       expect(@brain.resetSaveInterval).to.not.have.been.called\n-      @brain.emit('connected')\n+      @brain.emit 'ready'\n       expect(@brain.resetSaveInterval).to.have.been.calledWith(5)\n \n   describe 'resetSaveInterval', ->\n@@ -78,7 +78,7 @@ describe \"Brain\", ->\n   describe 'closing a connected brain', ->\n     beforeEach ->\n       @brain = new Brain\n-      @brain.emit 'connected'\n+      @brain.emit 'ready'\n       \n       @closeSpy = sinon.spy()\n       @brain.on 'close', @closeSpy", "changes": 4}], "563": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/9f81b5d191264f0cb2990dff02ddbdf9c71675a9/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9f81b5d191264f0cb2990dff02ddbdf9c71675a9/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=9f81b5d191264f0cb2990dff02ddbdf9c71675a9", "filename": "src/robot.coffee", "sha": "95ba9fa128426861150307534f903f8ab7472166", "additions": 2, "patch": "@@ -38,8 +38,8 @@ class Robot extends EventEmitter\n     @errorHandlers = []\n \n     @on 'error', @invokeErrorHandlers\n-    process.on 'uncaughtException', @invokeErrorhandlers\n-\n+    process.on 'uncaughtException', (err) =>\n+      @invokeErrorhandlers(err)\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.", "changes": 4}], "565": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/5ea7c3100d7c67fcd0ffd41ad2ee0588c377795e/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/5ea7c3100d7c67fcd0ffd41ad2ee0588c377795e/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=5ea7c3100d7c67fcd0ffd41ad2ee0588c377795e", "filename": "docs/scripting.md", "sha": "7cd3d0dd5bc0d35d5049a1dd10f85f10dadd5bdb", "additions": 52, "patch": "@@ -2,6 +2,54 @@\n \n Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend.\n \n+## Anatomy of script loading\n+\n+There are three main sources to load scripts from:\n+\n+* all scripts __bundled__ with your hubot installation under `scripts/` dir\n+* __community scripts__ specified in `hubot-scripts.json` and shipped in the `hubot-scripts` npm package\n+* scripts loaded from external __npm packages__ and specified in `external-scripts.json`\n+\n+### Community Scripts\n+\n+To use community scripts, place the name of the script in the `hubot-scripts.json` file. For example:\n+\n+```coffeescript\n+[\"redis-brain.coffee\", \"shipit.coffee\", \"whatis.coffee\", \"<new-script-name>.coffee\"]\n+```\n+\n+(Please check the [script catalog](http://hubot-script-catalog.herokuapp.com) and the [hubot-scripts repo](https://github.com/github/hubot-scripts/tree/master/src/scripts) for scripts carefully crafted for you by lots of nice folks)\n+\n+### NPM Packages\n+\n+Another way is to install scripts via an npm package (you can check some of them [here](https://npmjs.org/search?q=hubot)).\n+\n+To load those scripts to your hubot installation, you need to place them in the `external-scripts.json` file after adding the required npm packages to the `package.json` dependency section.\n+\n+Here is an example of adding the [hubot-botriot](https://npmjs.org/package/hubot-botriot) npm package:\n+\n+```json\n+{\n+ ...\n+\n+  \"dependencies\": {\n+    \"hubot\":         \">= 2.6.0 < 3.0.0\",\n+    \"hubot-scripts\": \">= 2.5.0 < 3.0.0\",\n+    \"hubot-botriot\": \"\",\n+  },\n+\n+...\n+}\n+```\n+\n+### Bundled Scripts\n+\n+Last but not least, you can put your own scripts under the `scripts/` directory. All scripts placed there are automatically loaded and ready to use with your hubot.\n+\n+You can also use this for customizing scripts from other sources. Just copy the *.coffee file into this directory and make whatever changes you'd like.\n+\n+Instructions for writing your own scripts can be found below.\n+\n ## Anatomy of a script\n \n When you created your hubot, the generator also created a `scripts` directory. If you peak around there, you will see some examples of scripts. For a script to be a script, it needs to:\n@@ -10,7 +58,7 @@ When you created your hubot, the generator also created a `scripts` directory. I\n * be a `.coffee` or `.js` file\n * export a function\n \n-By export a function, we just mean: \n+By export a function, we just mean:\n \n ```coffeescript\n module.exports = (robot) ->\n@@ -68,7 +116,7 @@ module.exports = (robot) ->\n     msg.emote \"makes a freshly baked pie\"\n ```\n \n-The `robot.hear /badgers/` callback sends a message exactly as specified regardless of who said it, \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\". \n+The `robot.hear /badgers/` callback sends a message exactly as specified regardless of who said it, \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\".\n \n If a user Dave says \"HAL: open the pod bay doors\", `robot.respond /open the pod bay doors/i` callback sends a message \"Dave: I'm afraid I can't let you do that.\"\n \n@@ -484,3 +532,5 @@ module.exports = (robot) ->\n ```\n \n After you've built your `npm` package you can publish it to [npmjs](http://npmjs.org).\n+\n+", "changes": 54}], "566": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/05195d816a56d3b7457e57e18abb28fd7f966728/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/05195d816a56d3b7457e57e18abb28fd7f966728/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=05195d816a56d3b7457e57e18abb28fd7f966728", "filename": "src/scripts/auth.coffee", "sha": "77bdef25c655b28276358c367c694e69bbc89986", "additions": 7, "patch": "@@ -47,6 +47,13 @@ module.exports = (robot) ->\n           return true if role in user.roles\n       return false\n \n+    usersWithRole: (role) ->\n+      users = []\n+      for own key, user of robot.brain.data.users\n+        if robot.auth.hasRole(msg.envelope.user, role)\n+          users.push(user)\n+      users\n+\n   robot.auth = new Auth\n \n   robot.respond /@?(.+) (has) ([\"'\\w: -_]+) (role)/i, (msg) ->", "changes": 7}], "569": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/ed6657ea725f07a80e5c6c81ae401bc1bdce5b77/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/ed6657ea725f07a80e5c6c81ae401bc1bdce5b77/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=ed6657ea725f07a80e5c6c81ae401bc1bdce5b77", "filename": "docs/README.md", "sha": "20e7e0a88963f6c8f11315066fe8b4592eb28446", "additions": 7, "patch": "@@ -8,7 +8,7 @@ an [excellent blog post on how to get those installed](http://joyent.com/blog/in\n Once node and npm are ready, we can install hubot and coffeescript:\n \n     % npm install -g hubot coffee-script\n-    \n+\n This will give us the `hubot` command, which is used for running a hubot, and more importantly now, generating your own hubot. The name of the new bot is\n the last argument, and will be created in the directory of the same name. For\n example, to create a new bot named myhubot:\n@@ -67,7 +67,7 @@ is mostly useful for development. Make note of  `Hubot>`; this is the name he'll\n You almost definitely will want to change his name to give him some more character. bin/hubot takes a `--name`:\n \n     % bin/hubot --name myhubot\n-    myhubot> \n+    myhubot>\n \n Your hubot will now respond as `myhubot`. This is\n case-insensitive, and can be prefixed with `@` or suffixed with `:`. These are equivalent:\n@@ -85,7 +85,7 @@ There are many community-contributed scripts available through [hubot-scripts](h\n \n * Make sure `hubot-scripts` is listed as a dependency in `package.json` (it should by default)\n * Update `hubot-scripts.json` to include the script you want in the list. Make sure the file is still valid JSON!\n-* Review the script to see if there's dependencies or configuration to add \n+* Review the script to see if there's dependencies or configuration to add\n \n In addition, there are scripts released as npm packages. If you find one you want to use:\n \n@@ -107,3 +107,7 @@ Please note the support for deploying to Windows isn't officially supported.\n * [Deploying Hubot onto Heroku](deploying/heroku.md)\n * [Deploying Hubot onto UNIX](deploying/unix.md)\n * [Deploying Hubot onto Windows](deploying/windows.md)\n+\n+## Patterns\n+\n+Using custom scripts, you can quickly customize Hubot to be the most life embettering robot he can be. Read [docs/patterns.md](patterns.md) for some nifty tricks that may come in handy as you teach him new skills.", "changes": 10}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ed6657ea725f07a80e5c6c81ae401bc1bdce5b77/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/ed6657ea725f07a80e5c6c81ae401bc1bdce5b77/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=ed6657ea725f07a80e5c6c81ae401bc1bdce5b77", "filename": "docs/patterns.md", "sha": "7bb1a7fcaa53766b13b7f4b1cfbf8a8994bd20b5", "additions": 63, "patch": "@@ -0,0 +1,63 @@\n+# Patterns\n+\n+Shared patterns for dealing with common Hubot scenarios.\n+\n+## Renaming the Hubot instance\n+\n+When you rename Hubot, he will no longer respond to his former name. In order to train you users on the new name, you may choose to add a deprecation notice when they try to se the old name. The pattern logic is:\n+\n+* listen to all messages that start with the old name\n+* reply to the user letting them know about the new name\n+\n+Setting this up is very easy:\n+\n+1. Create a [bundled script](scripting.md) in the `scripts/` directory of your Hubot instance called `rename-hubot.coffee`\n+2. Add the following code, modified for your needs:\n+\n+```coffeescript\n+# Description:\n+#   Tell people hubot's new name if they use the old one\n+#\n+# Commands:\n+#   None\n+#\n+module.exports = (robot) ->\n+  robot.hear /^hubot:? (.+)/i, (msg) ->\n+    response = \"Sorry, I'm a diva and only respond to #{robot.name}\"\n+    response += \" or #{robot.alias}\" if robot.alias\n+    msg.reply response\n+    return\n+\n+```\n+\n+In the above pattern, modify both the hubot listener and the response message to suit your needs.\n+\n+Also, it's important to note that the listener should be based on what hubot actually hears, instead of what is typed into the chat program before the Hubot Adapter has processed it. For example, the [HipChat Adapter](https://github.com/hipchat/hubot-hipchat) converts `@hubot` into `hubot:` before passing it to Hubot.\n+\n+## Deprecating or Renaming Listeners\n+\n+If you remove a script or change the commands for a script, it can be useful to let your users know about the change. One way is to just tell them in chat or let them discover the change by attempting to use a command that no longer exists. Another way is to have Hubot let people know when they've used a command that no longer works.\n+\n+This pattern is similar to the Renaming the Hubot Instance pattern above:\n+\n+* listen to all messages that match the old command\n+* reply to the user letting them know that it's been deprecated\n+\n+Here is the setup:\n+\n+1. Create a [bundled script](scripting.md) in the `scripts/` directory of your Hubot instance called `deprecations.coffee`\n+2. Copy any old command listeners and add them to that file. For example, if you were to rename the help command for some silly reason:\n+\n+```coffeescript\n+# Description:\n+#   Tell users when they have used commands that are deprecated or renamed\n+#\n+# Commands:\n+#   None\n+#\n+module.exports = (robot) ->\n+  robot.respond /help\\s*(.*)?$/i, (msg) ->\n+    msg.reply \"That means nothing to me anymore. Perhaps you meant `docs` instead?\"\n+    return\n+\n+```", "changes": 63}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/ed6657ea725f07a80e5c6c81ae401bc1bdce5b77/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/ed6657ea725f07a80e5c6c81ae401bc1bdce5b77/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=ed6657ea725f07a80e5c6c81ae401bc1bdce5b77", "filename": "docs/scripting.md", "sha": "5fd610c989012a21f6de9ac5d7b021c87fecfa0a", "additions": 3, "patch": "@@ -10,7 +10,7 @@ When you created your hubot, the generator also created a `scripts` directory. I\n * be a `.coffee` or `.js` file\n * export a function\n \n-By export a function, we just mean: \n+By export a function, we just mean:\n \n ```coffeescript\n module.exports = (robot) ->\n@@ -32,7 +32,7 @@ module.exports = (robot) ->\n     # your code here\n ```\n \n-The `robot.hear /badgers/` callback is called anytime a message's text matches. For example:\n+The `robot.hear /badger/` callback is called anytime a message's text matches. For example:\n \n * Stop badgering the witness\n * badger me\n@@ -68,7 +68,7 @@ module.exports = (robot) ->\n     msg.emote \"makes a freshly baked pie\"\n ```\n \n-The `robot.hear /badgers/` callback sends a message exactly as specified regardless of who said it, \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\". \n+The `robot.hear /badgers/` callback sends a message exactly as specified regardless of who said it, \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\".\n \n If a user Dave says \"HAL: open the pod bay doors\", `robot.respond /open the pod bay doors/i` callback sends a message \"Dave: I'm afraid I can't let you do that.\"\n ", "changes": 6}], "570": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "CHANGELOG.md", "sha": "b65c77d338e5afb5421fbf45970f7edc7ec6e627", "additions": 12, "patch": "@@ -29,6 +29,18 @@ New:\n * TopicMessage is now type 'topic'\n * CatchAllMessage has been deprecated and removed\n \n+v2.6.1\n+======\n+\n+* Show robot.alias in help commands if defined - technicalpickles\n+* Epic documentation update - technicalpickels\n+* Remove tweet.coffee from generated hubot-scripts.json since it has a npm dependency - tombell\n+* Don't load roles.coffee if using auth.coffee - tombell\n+* Make sure to clear interval for pinging Heroku URL - tombell\n+* Fix deprecation warning in youtube.coffee - timclipsham\n+* Fix youtube results bug - timclipsham\n+>>>>>>> master\n+\n v2.6.0\n ======\n ", "changes": 12}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "CONTRIBUTING.md", "sha": "59981c33cfd43df420399d4baa854fc924b0b2ee", "additions": 29, "patch": "@@ -0,0 +1,29 @@\n+We love pull requests. Here's a quick guide:\n+\n+1. Check for [existing issues](https://github.com/github/hubot/issues) for duplicates and confirm that it hasn't been fixed already in the [master branch](https://github.com/github/hubot/commits/master)\n+2. Fork the repo, and clone it locally\n+3. `npm link` to make your cloned repo available to npm\n+4. `hubot --create testbot` to create a bot to test against (no automated tests yet :sob:)\n+5. `npm install && npm link hubot` in your newly created bot to install dependencies, and use your hubot fork\n+6. Push to your fork and submit a pull request.\n+\n+At this point you're waiting on us. We like to at least comment on, if not\n+accept, pull requests within a few days. We may suggest some changes or improvements or alternatives.\n+\n+Some things that will increase the chance that your pull request is accepted:\n+\n+* Use CoffeeScript [idioms](http://arcturo.github.io/library/coffeescript/04_idioms.html) and [style guide](https://github.com/polarmobile/coffeescript-style-guide)\n+* Update the documentation, the surrounding one, examples elsewhere, guides,\n+  whatever is affected by your contribution\n+* Include any information that would be relevant to reproducing bugs, use cases for new features, etc.\n+* Impact on existing [hubot installs](docs/README.md), [hubot adapters](docs/adapters.md), and [hubot scripts](docs/scripting.md) (e.g. backwards compatibility)\n+\n+Syntax:\n+\n+  * Two spaces, no tabs.\n+  * No trailing whitespace. Blank lines should not have any space.\n+  * Prefer `and` and `or` over `&&` and `||`\n+  * Prefer single quotes over double quotes unless interpolating strings.\n+  * `MyClass.myMethod(my_arg)` not `myMethod( my_arg )` or `myMethod my_arg`.\n+  * `a = b` and not `a=b`.\n+  * Follow the conventions you see used in the source already.", "changes": 29}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/LICENSE", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/LICENSE", "previous_filename": "LICENSE.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/LICENSE?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "LICENSE", "sha": "493db50edda9d35fb7fdba7a0e10ed68c257ffb0", "additions": 0, "changes": 0}, {"status": "modified", "deletions": 202, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "README.md", "sha": "ae129a7937efc68d11f3973d3153882beb85467b", "additions": 12, "patch": "@@ -1,208 +1,18 @@\n # Hubot\n \n-This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n+Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n+cool. He's extendable with\n+[community scripts](https://github.com/github/hubot-scripts) and your own custom\n+scripts, and can work on [many different chat services](docs/adapters.md).\n \n-**You'll probably never have to hack on this repo directly.**\n+This repository provides a library that's distributed by `npm` that you\n+use for building your own bots.  See the [docs/README.md](docs/README.md)\n+for details on getting up and running with your very own robot friend.\n \n-Follow the instructions below and get your own hubot ready to deploy.\n+In most cases, you'll probably never have to hack on this repo directly if you\n+are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTING.md)\n \n-## Getting Your Own\n+## License\n \n-Make sure you have [node.js][nodejs] and [npm][npmjs] installed.\n-\n-You can install the `hubot` npm package globally and you will be able to run\n-`hubot --create <PATH>` if you've setup npm packages to be in your `PATH`.\n-\n-    $ npm install -g hubot coffee-script\n-    $ hubot --create <path>\n-\n-Then the directory at `<path>` contains a deployable hubot that you're able to\n-deploy to heroku or run locally.\n-\n-## Adapters\n-\n-Adapters are the interface to the service you want your hubot to run on. This\n-can be something like Campfire or IRC. There are a number of third party\n-adapters that the community have contributed. Check the\n-[hubot wiki][hubot-wiki] for the available ones and how to create your own.\n-\n-Please submit issues and pull requests for third party adapters to the adapter\n-repository, not this one (unless it's the Campfire or shell adapter).\n-\n-## Hubot Scripts\n-\n-Hubot ships with a number of default scripts, but there's a growing number of\n-extras in the [hubot-scripts][hubot-scripts] repository. `hubot-scripts` is a\n-way to share scripts with the entire community.\n-\n-Check out the [README][hubot-scripts-readme] for more help on installing\n-individual scripts.\n-\n-## External Scripts\n-\n-This functionality allows users to enable scripts from `npm` packages which\n-don't have to be included in the `hubot-scripts` repository.\n-\n-To enable to functionality you can follow the following steps.\n-\n-1. Add the packages as dependencies into your `package.json`\n-2. `npm install` to make sure those packages are installed\n-\n-To enable third-party scripts that you've added you will need to add the package\n-name as a double quoted string to the `external-scripts.json` file for your\n-hubot.\n-\n-**Please note that external scripts may become the default for hubot scripts in\n-future releases.**\n-\n-### Creating A Script Package\n-\n-Creating a script package for hubot is very simple. Start by creating a normal\n-`npm` package. Make sure you add a main file for the entry point (e.g.\n-`index.js` or `index.coffee`).\n-\n-In this entry point file you're going to have to export a function that hubot\n-will use to load the scripts in your package. Below is a simple example for\n-loading each script in a `./scripts` directory in your package.\n-\n-```coffeescript\n-Fs   = require 'fs'\n-Path = require 'path'\n-\n-module.exports = (robot) ->\n-  path = Path.resolve __dirname, 'scripts'\n-  Fs.exists path, (exists) ->\n-    if exists\n-      for file in Fs.readdirSync(path)\n-        robot.loadFile path, file\n-        robot.parseHelp Path.join(path, file)\n-```\n-\n-After you've built your `npm` package you can publish it to [npmjs][npmjs].\n-\n-## HTTP Listener\n-\n-Hubot has a HTTP listener which listens on the port specified by the `PORT`\n-environment variable. If PORT is not specified, the default port will be 8080.\n-\n-You can specify routes to listen on in your scripts by using the `router`\n-property on `robot`.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-  robot.router.get \"/hubot/version\", (req, res) ->\n-    res.end robot.version\n-```\n-\n-There are functions for GET, POST, PUT and DELETE, which all take a route and\n-callback function that accepts a request and a response.\n-\n-In addition, if you set `EXPRESS_STATIC`, the HTTP listener will serve static\n-files from this directory.\n-\n-## Events\n-\n-Hubot can also respond to events which can be used to pass data between scripts.\n-\n-```coffeescript\n-# src/scripts/github-commits.coffee\n-module.exports = (robot) ->\n-  robot.router.post \"/hubot/gh-commits\", (req, res) ->\n-  \t#code goes here\n-    robot.emit \"commit\", {\n-        user    : {}, #hubot user object\n-        repo    : 'https://github.com/github/hubot',\n-        hash  : '2e1951c089bd865839328592ff673d2f08153643'\n-    }\n-```\n-```coffeescript\n-# src/scripts/heroku.coffee\n-module.exports = (robot) ->\n-  robot.on \"commit\", (commit) ->\n-    robot.send commit.user, \"Will now deploy #{commit.hash} from #{commit.repo}!\"\n-    #deploy code goes here\n-```\n-\n-If you provide an event, it's very recommended to include a hubot user object\n-in data. In case of other reacting scripts want to respond to chat.\n-\n-## Authentication\n-\n-Hubot has first class support for specify roles which a user must have to run\n-specific commands. If you wish you use this support you must set the the\n-following environment variables:\n-\n-    * `HUBOT_AUTH_ADMIN` a comma separated list of admin IDs\n-\n-You can find the user IDs by running the `show users` command. The admin IDs\n-specify which users can add and remove roles from users. Please note you can\n-only assign the admin role using the environment variable.\n-\n-###\u00a0Assigning a Role\n-\n-You can assign a role to the user using the following command:\n-\n-    hubot Joe Bloggs has developer role\n-    hubot John Doe has ops role\n-\n-The name must be the exact name as stored in hubot's brain.\n-\n-###\u00a0Removing a Role\n-\n-You can remove a role from the user using the following command:\n-\n-    hubot Joe Bloggs doesn't have developer role\n-    hubot John Doe does not have ops role\n-\n-### Viewing a User's Roles\n-\n-You can view the roles a user has or see which users have the admin role with\n-the following commands:\n-\n-    hubot what roles does Joe Bloggs have?\n-    hubot who has admin role?\n-\n-## Persistence\n-\n-Hubot has an in-memory key-value store exposed as `robot.brain` that can be\n-used to store and retrieve data by scripts.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-\n-  robot.respond /have a beer/i, (msg) ->\n-    # Get number of beers had (coerced to a number).\n-    beersHad = robot.brain.get('totalBeers') * 1 or 0\n-\n-    if beersHad > 4\n-      msg.respond \"I'm too drunk..\"\n-\n-    else\n-      msg.respond 'Sure!'\n-\n-      robot.brain.set 'totalBeers', beersHad+1\n-      # Or robot.brain.set totalBeers: beersHad+1\n-```\n-\n-If the script needs to store user data, `robot.brain` has a built-in interface\n-for it.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-\n-  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n-    name = msg.match[1].trim()\n-\n-    users = robot.brain.usersForFuzzyName(name)\n-    if users.length is 1\n-      user = users[0]\n-      # Do something interesting here..\n-\n-      msg.send \"#{name} is user - #{user}\"\n-```\n-\n-[nodejs]: http://nodejs.org\n-[npmjs]: http://npmjs.org\n-[hubot-wiki]: https://github.com/github/hubot/wiki\n-[hubot-scripts]: https://github.com/github/hubot-scripts\n-[hubot-scripts-readme]: https://github.com/github/hubot-scripts#readme\n+Copyright (c) 2011-2013 GitHub, Inc. See the LICENSE file for license rights and\n+limitations (MIT).", "changes": 214}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "docs/README.md", "sha": "f5c03f46f695082f3aea8a8e907a3d901d7ac66e", "additions": 109, "patch": "@@ -0,0 +1,109 @@\n+# Hubot\n+\n+## Getting Started With Hubot\n+\n+You will need [node.js](nodejs.org/) and [npm](https://npmjs.org/). Joyent has\n+an [excellent blog post on how to get those installed](http://joyent.com/blog/installing-node-and-npm), so we'll omit those details here.\n+\n+Once node and npm are ready, we can install hubot and coffeescript:\n+\n+    % npm install -g hubot coffee-script\n+    \n+This will give us the `hubot` command, which is used for running a hubot, and more importantly now, generating your own hubot. The name of the new bot is\n+the last argument, and will be created in the directory of the same name. For\n+example, to create a new bot named myhubot:\n+\n+    % hubot --create myhubot\n+\n+If you are using git, the generated directory includes a .gitignore, so you can\n+initialize and add everything:\n+\n+    % cd myhubot\n+    % git init\n+    % git add .\n+    % git commit -m \"Initial commit\"\n+\n+You now have your own functional hubot! There's a `bin/hubot`\n+command for convenience, to handle installing npm dependencies, loading scripts,\n+and then launching your hubot.\n+\n+    % bin/hubot\n+    Hubot>\n+\n+This starts hubot using the [shell adapter](adapters/shell.md), which\n+is mostly useful for development. Make note of  `Hubot>`; this is the name he'll\n+`respond` to with commands. For example, to list available commands:\n+\n+    % bin/hubot\n+    Hubot> hubot: help\n+    hubot <keyword> tweet - Returns a link to a tweet about <keyword>\n+    hubot <user> is a badass guitarist - assign a role to a user\n+    hubot <user> is not a badass guitarist - remove a role from a user\n+    hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.\n+    hubot convert me <expression> to <units> - Convert expression to given units.\n+    hubot die - End hubot process\n+    hubot echo <text> - Reply back with <text>\n+    hubot fake event <event> - Triggers the <event> event for debugging reasons\n+    hubot help - Displays all of the help commands that Hubot knows about.\n+    hubot help <query> - Displays all help commands that match <query>.\n+    hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n+    hubot map me <query> - Returns a map view of the area returned by `query`.\n+    hubot math me <expression> - Calculate the given expression.\n+    hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n+    hubot mustache me <url> - Adds a mustache to the specified URL.\n+    hubot ping - Reply with pong\n+    hubot show storage - Display the contents that are persisted in the brain\n+    hubot show users - Display all users that hubot knows about\n+    hubot the rules - Make sure hubot still knows the rules.\n+    hubot time - Reply with current time\n+    hubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.\n+    hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n+    hubot who is <user> - see what roles a user has\n+    hubot youtube me <query> - Searches YouTube for the query and returns the video embed link.\n+    pug bomb N - get N pugs\n+    pug me - Receive a pug\n+    ship it - Display a motivation squirrel\n+\n+You almost definitely will want to change his name to give him some more character. bin/hubot takes a `--name`:\n+\n+    % bin/hubot --name myhubot\n+    myhubot> \n+\n+Your hubot will now respond as `myhubot`. This is\n+case-insensitive, and can be prefixed with `@` or suffixed with `:`. These are equivalent:\n+\n+    MYHUBOT help\n+    myhubot help\n+    @myhubot help\n+    myhubot: help\n+\n+## Scripting\n+\n+Hubot's power comes through scripting. Read [docs/scripting.md](scripting.md) for the deal on bending hubot to your will using code.\n+\n+There are many community-contributed scripts available through [hubot-scripts](https://github.com/github/hubot-scripts). To use scripts from it:\n+\n+* Make sure `hubot-scripts` is listed as a dependency in `package.json` (it should by default)\n+* Update `hubot-scripts.json` to include the script you want in the list. Make sure the file is still valid JSON!\n+* Review the script to see if there's dependencies or configuration to add \n+\n+In addition, there are scripts released as npm packages. If you find one you want to use:\n+\n+1. Add the package to the list of `dependencies` into your `package.json`\n+2. `npm install` to make sure its installed\n+\n+**Please note that external scripts may become the default for hubot scripts in future releases.**\n+\n+## Adapters\n+\n+Hubot uses the adapter pattern to support multiple chat-backends. Read available adapters in [docs/adapters.md](adapters.md), along with how to configure them.\n+\n+## Deploying\n+\n+You can deploy hubot to Heroku, which is the officially supported method.\n+Additionally you are able to deploy hubot to a UNIX-like system or Windows.\n+Please note the support for deploying to Windows isn't officially supported.\n+\n+* [Deploying Hubot onto Heroku](deploying/heroku.md)\n+* [Deploying Hubot onto UNIX](deploying/unix.md)\n+* [Deploying Hubot onto Windows](deploying/windows.md)", "changes": 109}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "docs/adapters.md", "sha": "ad08b4c7138fc47cb50cb8e96d7b179a883990c2", "additions": 38, "patch": "@@ -0,0 +1,38 @@\n+# Hubot Adapters\n+\n+Adapters are the interface to the service you want your hubot to run on.\n+\n+## Official Adapters\n+\n+Hubot includes two official adapters:\n+\n+* [Shell](adapters/shell.md), i.e. for use with development\n+* [Campfire](adapters/campfire.md)\n+\n+## Third-party Adapters\n+\n+Third-party adapters are available as `npm` packages. Here is a list of known\n+adapters, but please [submit an issue](https://github.com/github/hubot/issues)\n+to have yours added to the list:\n+\n+* [Flowdock](https://github.com/flowdock/hubot-flowdock)\n+* [HipChat](https://github.com/hipchat/hubot-hipchat)\n+* [IRC](https://github.com/nandub/hubot-irc)\n+* [Partychat](https://github.com/iangreenleaf/hubot-partychat-hooks)\n+* [Talker](https://github.com/unixcharles/hubot-talker)\n+* [Twilio](https://github.com/jkarmel/hubot-twilio)\n+* [Twitter](https://github.com/MathildeLemee/hubot-twitter)\n+* [XMPP](https://github.com/markstory/hubot-xmpp)\n+* [Gtalk](https://github.com/atmos/hubot-gtalk)\n+* [Yammer](https://github.com/athieriot/hubot-yammer)\n+* [Skype](https://github.com/netpro2k/hubot-skype)\n+* [Jabbr](https://github.com/smoak/hubot-jabbr)\n+* [iMessage](https://github.com/lazerwalker/hubot-imessage)\n+* [Hall](https://github.com/Hall/hubot-hall)\n+\n+\n+## Writing Your Own adapter\n+\n+The best place to start is `src/adapter.coffee`, and inheriting from `Adapter`.\n+There is not as much documentation as could exist (yet!), so it is worth\n+reviewing existing adapters as well as how hubot internally uses an adapter.", "changes": 38}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/docs/adapters/campfire.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/docs/adapters/campfire.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/campfire.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "docs/adapters/campfire.md", "sha": "9f0f0c3642144f73373e1d6da4b0cd4e9cc730e8", "additions": 75, "patch": "@@ -0,0 +1,75 @@\n+# Adapter: Campfire\n+\n+[Campfire](http://campfirenow.com/) is a web based chat application built by\n+[37signals](http://37signals.com). The Campfire adapter is one of the original\n+adapters in Hubot.\n+\n+## Getting Started\n+\n+You will need a Campfire account to start, which you can\n+[sign up for free](https://signup.37signals.com/campfire/free/signup/new).\n+\n+Next, you will need to create a user on your Campfire account for your Hubot,\n+then give it access so it can join to your rooms. You will need to create a room\n+if you haven't already.\n+\n+Hubot defaults to using its [shell](shell.md), so to use Campfire instead, you\n+can run hubot with `-a campfire`:\n+\n+    % bin/hubot -a campfire\n+\n+If you are deploying to Heroku or using foreman, you need to make\n+sure the hubot is called with `-a campfire` in the `Procfile`:\n+\n+    web: bin/hubot -a campfire -n Hubot\n+\n+## Configuring\n+\n+The adapter requires the following environment variables.\n+\n+* `HUBOT_CAMPFIRE_ACCOUNT`\n+* `HUBOT_CAMPFIRE_TOKEN`\n+* `HUBOT_CAMPFIRE_ROOMS`\n+\n+### Campfire API Token\n+\n+This can be found by logging in with your hubot's account click the **My Info**\n+link and make a note of the API token.\n+\n+### Campfire Room IDs\n+\n+If you join the rooms you want your hubot to join will see notice a numerical\n+ID for the room in the URL. Make a note of each ID for the rooms you want your\n+hubot to join.\n+\n+### Campfire Account\n+\n+This is simply the first part of the domain you visit for your Campfire\n+account. For example if your Campfire was at `hubot.campfirenow.com` your\n+subdomain is `hubot`. Make a note of the subdomain.\n+\n+### Configuring the variables on Heroku\n+\n+    % heroku config:add HUBOT_CAMPFIRE_TOKEN=\"...\"\n+\n+    % heroku config:add HUBOT_CAMPFIRE_ROOMS=\"123,321\"\n+\n+    % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=\"...\"\n+\n+### Configuring the variables on UNIX\n+\n+    % export HUBOT_CAMPFIRE_TOKEN=\"...\"\n+\n+    % export HUBOT_CAMPFIRE_ROOMS=\"123,321\"\n+\n+    % export HUBOT_CAMPFIRE_ACCOUNT=\"...\"\n+\n+### Configuring the variables on Windows\n+\n+Using PowerShell:\n+\n+    setx HUBOT_CAMPFIRE_TOKEN \"...\" /m\n+\n+    setx HUBOT_CAMPFIRE_ROOMS \"123,321\" /m \n+\n+    setx HUBOT_CAMPFIRE_ACCOUNT \"...\" /m", "changes": 75}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/docs/adapters/shell.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/docs/adapters/shell.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/shell.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "docs/adapters/shell.md", "sha": "96139d83de51420498edb35d91af5152bab0dd06", "additions": 15, "patch": "@@ -0,0 +1,15 @@\n+# Adapters: Shell\n+\n+The shell adapter provides a simple read-eval-print loop for interacting with a hubot locally.\n+It can be useful for testing scripts before using them on a live hubot.\n+\n+## Getting Started\n+\n+To use the shell adapter you can simply omit the `-a` option when running\n+hubot as it will use the shell adapter by default.\n+\n+    % bin/hubot\n+\n+## Configuring\n+\n+This adapter doesn't require any configuration.", "changes": 15}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "docs/deploying/heroku.md", "sha": "c4eed5202e3dbb60f85321d28c8ccac61ba13194", "additions": 67, "patch": "@@ -0,0 +1,67 @@\n+# Deploying Hubot to Heroku\n+\n+If you've been following along with [Getting Started](../README.md), it's time to deploy so you can use it beyond just your local machine.\n+[Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.\n+\n+Install the [Heroku Toolbelt](https://toolbelt.heroku.com/) to start, then follow their 'Getting Started' instructions, including logging in the first time:\n+\n+    % heroku login\n+    Enter your Heroku credentials.\n+    Email: youremail@example.com\n+    Password:\n+    Could not find an existing public key.\n+    Would you like to generate one? [Yn]\n+    Generating new SSH public key.\n+    Uploading ssh public key /Users/you/.ssh/id_rsa.pub\n+\n+Inside your new hubot directory, make sure you've created a git repository, and that your work is committed:\n+\n+    % git init\n+    % git add .\n+    % git commit -m \"Initial commit\"\n+\n+Then create a Heroku application:\n+\n+    % heroku create\n+    Creating rosemary-britches-123... done, stack is cedar\n+    http://rosemary-britches-123.herokuapp.com/ | git@heroku.com:rosemary-britches-123.git\n+    Git remote heroku added\n+\n+Before you deploy the application, you'll need to configure some environment\n+variables for hubot to use. Some variables you need depends on which\n+[adapter](../adapters.md) and scripts you are using. For Campfire, with no other\n+scripts, you'd need to at least:\n+\n+    % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=yourcampfireaccount\n+    % heroku config:add HUBOT_CAMPFIRE_TOKEN=yourcampfiretoken\n+    % heroku config:add HUBOT_CAMPFIRE_ROOMS=comma,separated,list,of,rooms,to,join\n+\n+In addition is one special environment variable for Heroku. The default hubot\n+[Procfile](https://devcenter.heroku.com/articles/procfile) marks the process as\n+a 'web' process type, in order to support serving up http requests (more on that\n+in the [scripting docs](../scripting.md). The downside of this is that dynos\n+will [idle after an hour of inactivity](https://devcenter.heroku.com/articles/dynos#dyno-idling).\n+That means your hubot would leave after an hour of idle web traffic, and only rejoin when it does get traffic. This is extremely\n+inconvenient since most interaction is done through chat, and hubot has to be online and in the room this. To get around this this,\n+there's a special environment variable to make hubot regularly ping itself over http. If\n+the app is deployed to http://rosemary-britches-123.herokuapp.com/, then you'd\n+configure:\n+\n+    % heroku config:add HEROKU_URL=http://rosemary-britches-123.herokuapp.com\n+\n+At this point, you are ready to deploy and start chatting. With Heroku, that's a\n+git push away:\n+\n+    % git push heroku master\n+\n+You'll see some text flying, and eventually some success. You should be able to\n+see your bot in your configured chat rooms at this point. If not, you can peek\n+at the logs to try to debug:\n+\n+    % heroku logs\n+\n+If you make any changes to your hubot, just commit them, and push them as\n+before:\n+\n+    % git ci -a -m \"Awesome scripts OMG\"\n+    % git push heroku master", "changes": 67}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/docs/deploying/unix.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/docs/deploying/unix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/unix.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "docs/deploying/unix.md", "sha": "862d1f5884f63f0ae27a8beb50a9fa02d5a80684", "additions": 65, "patch": "@@ -0,0 +1,65 @@\n+# Deploying Hubot to UNIX\n+\n+Because there are so many variations of Linux, and more generally UNIX, it's\n+difficult for the hubot team to have canonical documentation for installing and\n+deploying it to every version out there. So, this is an attempt to give an\n+overview of what's needed to get deploying.\n+\n+There are 3 primary things to deploying and running hubot:\n+\n+  * node and npm\n+  * a way to get source code updated on the server\n+  * a way to start hubot, start it up if it crashes, and restart it when code\n+    updates\n+\n+## node and npm\n+\n+To start, your UNIX server will need node and npm. Check out the node.js wiki\n+for [installing Node.js via package manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager), [Building on GNU/Linux and other UNIX](https://github.com/joyent/node/wiki/Installation#building-on-gnulinux-and-other-unix).\n+\n+## Updating code on the server\n+\n+The simplest way to update your hubot's code is going to be to have a git\n+checkout of your hubot's source code (that you've created during [Getting Started](../README.md), not the [github/hubot repository](http://github.com/github/hubot), and just git pull to get change. This may\n+feel a dirty hack, but it works when you are starting out.\n+\n+If you have a Ruby background, you might be more comfortable using\n+[capistrano](https://github.com/capistrano/capistrano).\n+\n+If you have a [Chef](http://www.opscode.com/chef/) background, there's a\n+[deploy](http://docs.opscode.com/resource_deploy.html) resource for managing\n+deployments.\n+\n+## Starting, stopping, and restarting hubot\n+\n+Every hubot install has a `bin/hubot` script to handle starting up the hubot.\n+You can run this command from your git checkout on the server, but there are some problems you can encounter:\n+\n+* you disconnect, and hubot dies\n+* hubot dies, for any reason, and doesn't start again\n+* it doesn't start up at boot automatically\n+\n+For handling you disconnecting, you can start with running `bin/hubot` in\n+[screen session](http://www.gnu.org/software/screen/) or with\n+[nohup](http://linux.die.net/man/1/nohup).\n+\n+For handling hubot dying, and restarting it automatically, you can imagine\n+running `bin/hubot` in a\n+[bash while loop](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-7.html#ss7.3). But\n+really, you probably want some process monitoring using tools like\n+[monit](http://mmonit.com/monit/),\n+[god](http://godrb.com/),\n+[bluepill](https://github.com/arya/bluepill),\n+[upstart](http://upstart.ubuntu.com/).\n+\n+For starting at boot, you can create an init script for appropriate your UNIX\n+distribution, or if you are using one the process monitoring tools above, make\n+sure it boots at startup.\n+\n+## Recommendations\n+\n+This document has been deliberately light on strong recommendations. At a high\n+level though, it's strongly recommended to avoid anything that is overly manual\n+and non-repeatable. That would mean using your OS's packages and tools whenever\n+possible, and having a proper deploy tool to update hubot, and process\n+management to keep hubot running.", "changes": 65}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/docs/deploying/windows.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/docs/deploying/windows.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/windows.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "docs/deploying/windows.md", "sha": "ebfeec202ffd8f77b11c3579685081ef7817c85c", "additions": 3, "patch": "@@ -0,0 +1,3 @@\n+# Deploying Hubot to Windows\n+\n+Not yet written. [Help me out by submitting a pull request, please?](https://github.com/github/hubot/pull/new/master)", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "docs/scripting.md", "sha": "8be7aeb6061e37f287d54253ce5d8f29120187fc", "additions": 486, "patch": "@@ -0,0 +1,486 @@\n+# Scripting\n+\n+Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend.\n+\n+## Anatomy of a script\n+\n+When you created your hubot, the generator also created a `scripts` directory. If you peak around there, you will see some examples of scripts. For a script to be a script, it needs to:\n+\n+* live in a directory on the hubot script load path (`src/scripts` and `scripts` by default)\n+* be a `.coffee` or `.js` file\n+* export a function\n+\n+By export a function, we just mean: \n+\n+```coffeescript\n+module.exports = (robot) ->\n+  # your code here\n+```\n+\n+The `robot` parameter is an instance of your robot friend. At this point, we can start scripting up some awesomeness.\n+\n+## Hearing and responding\n+\n+Since this is a chat bot, the most common interactions are based on messages. Hubot can `hear` messages said in a room or `respond` to messages directly addressed at it. Both methods take a regular expression and a callback function as parameters. For example:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.hear /badger/i, (msg) ->\n+    # your code here\n+\n+  robot.respond /open the pod bay doors/i, (msg) ->\n+    # your code here\n+```\n+\n+The `robot.hear /badgers/` callback is called anytime a message's text matches. For example:\n+\n+* Stop badgering the witness\n+* badger me\n+* what exactly is a badger anyways\n+\n+The `robot.respond /open the pod bay doors/i` callback is only called for messages that are immediately preceded by the robot's name or alias. If the robot's name is HAL and alias is /, then this callback would be triggered for:\n+\n+*  hal open the pod bay doors\n+* HAL: open the pod bay doors\n+* @HAL open the pod bay doors\n+* /open the pod bay doors\n+\n+It wouldn't be called for:\n+\n+* HAL: please open the pod bay doors\n+   *  because its `respond` is bound to the text immediately following the robot name\n+*  has anyone ever mentioned how lovely you are when you open pod bay doors?\n+   * because it lacks the robot's name\n+\n+## Send & reply\n+\n+The `msg` parameter is, despite the name, an instance of [Response](../src/response.coffee). With it, you can `send` a message back to the room the `msg` came from, `emote` a message to a room (If the given adapter supports it), or `reply` to the person that sent the message. For example:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.hear /badger/i, (msg) ->\n+    msg.send \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\"\n+\n+  robot.respond /open the pod bay doors/i, (msg) ->\n+    msg.reply \"I'm afraid I can't let you do that.\"\n+\n+  robot.hear /I like pie/i, (msg) ->\n+    msg.emote \"makes a freshly baked pie\"\n+```\n+\n+The `robot.hear /badgers/` callback sends a message exactly as specified regardless of who said it, \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\". \n+\n+If a user Dave says \"HAL: open the pod bay doors\", `robot.respond /open the pod bay doors/i` callback sends a message \"Dave: I'm afraid I can't let you do that.\"\n+\n+## Capturing data\n+\n+So far, our scripts have had static responses, which while amusing, are boring functionality-wise. `msg.match` has the result of `match`ing the incoming message against the regular expression. This is just a [JavaScript thing](http://www.w3schools.com/jsref/jsref_match.asp), which ends up being an array with index 0 being the full text matching the expression. If you include capture groups, those will be populated `msg.match`. For example, if we update a script like:\n+\n+```coffeescript\n+  robot.respond /open the (.*) doors/i, (msg) ->\n+    # your code here\n+```\n+\n+If Dave says \"HAL: open the pod bay doors\", then `msg.match[0]` is \"open the pod bay doors\", and `msg.match[1]` is just \"pod bay\" doors. Now we can start doing more dynamic things:\n+\n+```coffeescript\n+  robot.respond /open the (.*) doors/i, (msg) ->\n+    doorType = msg.match[1]\n+    if doorType is \"pod bay\"\n+      msg.reply \"I'm afraid I can't let you do that.\"\n+    else\n+      msg.reply \"Opening #{doorType} doors\"\n+```\n+\n+## Making HTTP calls\n+\n+Hubot can make HTTP calls on your behalf to integrate & consume third party APIs. This can be through an instance of [node-scoped-http-client](https://github.com/technoweenie/node-scoped-http-client) available at `robot.http`. The simplest case looks like:\n+\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      # your code here\n+```\n+\n+`err` is an error encountered on the way, if one was encountered. You'll generally want to check for this and handle accordingly:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      if err\n+        msg.send \"Encountered an error :( #{err}\"\n+        return\n+      # your code here, knowing it was successful\n+```\n+\n+`res` is an instance of node's [http.ServerResponse](http://nodejs.org/api/http.html#http_class_http_serverresponse). Most of the methods don't matter as much when using node-scoped-http-client, but of interest are `statusCode` and `getHeader`. Use `statusCode` to check for the HTTP status code, where usually non-200 means something bad happened. Use `getHeader` for peaking at the header, for example to check for rate limiting:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      # pretend there's error checking code here\n+\n+      if res.statusCode isnt 200\n+        msg.send \"Request didn't come back HTTP 200 :(\"\n+        return\n+\n+      rateLimitRemaining = parseInt res.getHeader('X-RateLimit-Limit') if res.getHeader('X-RateLimit-Limit')\n+      if rateLimitRemaining and rateLimitRemaining < 1\n+        msg.send \"Rate Limit hit, stop believing for awhile\"\n+\n+      # rest of your code\n+```\n+\n+`body` is the response's body as a string, the thing you probably care about the most:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .get() (err, res, body) ->\n+      # error checking code here\n+\n+      msg.send \"Got back #{body}\"\n+```\n+\n+### JSON\n+\n+If you are talking to APIs, the easiest way is going to be JSON because it doesn't require any extra dependencies. When making the `robot.http` call, you should usually set the  `Accept` header to give the API a clue that's what you are expecting back. Once you get the `body` back, you can parse it with `JSON.parse`:\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .header('Accept', 'application/json')\n+    .get() (err, res, body) ->\n+      # error checking code here\n+\n+      data = JSON.parse(body)\n+      msg.send \"#{data.passenger} taking midnight train going #{data.destination}\"\n+```\n+\n+It's possible to get non-JSON back, like if the API hit an error and it tries to render a normal HTML error instead of JSON. To be on the safe side, you should check the `Content-Type`, and catch any errors while parsing.\n+\n+```coffeescript\n+  robot.http(\"https://midnight-train\")\n+    .header('Accept', 'application/json')\n+    .get() (err, res, body) ->\n+      # err & response status checking code here\n+\n+      if response.getHeader('Content-Type') isnt 'application/json'\n+        msg.send \"Didn't get back JSON :(\"\n+        return\n+\n+      data = null\n+      try\n+        data = JSON.parse(body)\n+      catch error\n+       msg.send \"Ran into an error parsing JSON :(\"\n+       return\n+\n+      # your code here\n+```\n+\n+### XML\n+\n+XML APIs are harder because there's not a bundled XML parsing library. It's beyond the scope of this documentation to go into detail, but here are a few libraries to check out:\n+\n+* [xml2json](https://github.com/buglabs/node-xml2json) (simplest to use, but has some limitations)\n+* [jsdom](https://github.com/tmpvar/jsdom) (JavaScript implementation of the W3C DOM)\n+* [xml2js](https://github.com/Leonidas-from-XIV/node-xml2js)\n+\n+### Screen scraping\n+\n+For those times that there isn't an API, there's always the possibility of screen-scraping. It's beyond the scope of this documentation to go into detail, but here's a few libraries to check out:\n+\n+* [cheerio](https://github.com/MatthewMueller/cheerio) (familiar syntax and API to jQuery)\n+* [jsdom](https://github.com/tmpvar/jsdom) (JavaScript implementation of the W3C DOM)\n+\n+## Random\n+\n+A common pattern is to hear or respond to commands, and send with a random funny image or line of text from an array of possibilities. It's annoying to do this in JavaScript and CoffeeScript out of the box, so Hubot includes a convenience method:\n+\n+```coffeescript\n+lulz = ['lol', 'rofl', 'lmao']\n+\n+msg.send msg.random lulz\n+```\n+\n+## Topic\n+\n+Hubot can react to a room's topic changing, assuming that the adapter supports it.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.topic (msg) ->\n+    msg.send \"#{msg.message.text}? That's a Paddlin'\"\n+```\n+\n+## Entering and leaving\n+\n+Hubot can see users entering and leaving, assuming that the adapter supports it.\n+\n+```coffeescript\n+enterReplies = ['Hi', 'Target Acquired', 'Firing', 'Hello friend.', 'Gotcha', 'I see you']\n+leaveReplies = ['Are you still there?', 'Target lost', 'Searching']\n+\n+module.exports = (robot) ->\n+  robot.enter (msg) ->\n+    msg.send msg.random enterReplies\n+  robot.leave (msg) ->\n+    msg.send msg.random leaveReplies\n+```\n+\n+## Environment variables\n+\n+Hubot can access the environment he's running in, just like any other node program, using [`process.env`](http://nodejs.org/api/process.html#process_process_env). This can be used to configure how scripts are run, with the convention being to use the `HUBOT_` prefix.\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+Take care to make sure the script can load if it's not defined, give the Hubot developer notes on how to define it, or default to something. It's up to the script writer to decide if that should be a fatal error (e.g. hubot exits), or not (make any script that relies on it to say it needs to be configured. When possible and when it makes sense to, having a script work without any other configuration is preferred.\n+\n+Here we can default to something:\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING or 42\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+Here we exit if it's not defined:\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n+unless answer?\n+  console.log \"Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again\"\n+  process.exit(1)\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+And lastly, we update the `robot.respond` to check it:\n+\n+```coffeescript\n+answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n+\n+module.exports = (robot) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+    unless answer?\n+      msg.send \"Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again\"\n+      return\n+    msg.send \"#{answer}, but what is the question?\"\n+```\n+\n+## Dependencies\n+\n+Hubot uses [npm](https://github.com/isaacs/npm) to manage its dependencies. To additional packages, add them to `dependencies` in `package.json`. For example, to add lolimadeupthispackage 1.2.3, it'd look like:\n+\n+```json\n+  \"dependencies\": {\n+    \"hubot\":         \"2.5.5\",\n+    \"hubot-scripts\": \"2.4.6\",\n+    \"lolimadeupthispackage\": \"1.2.3\"\n+  },\n+```\n+\n+If you are using scripts from hubot-scripts, take note of the `Dependencies` documentation in the script to add. They are listed in a format that can be copy & pasted into `package.json`, just make sure to add commas as necessary to make it valid JSON.\n+\n+# Timeouts and Intervals\n+\n+Hubot can run code later using JavaScript's built-in [setTimeout](http://nodejs.org/api/timers.html#timers_settimeout_callback_delay_arg). It takes a callback method, and the amount of time to wait before calling it:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /you are a little slow/, (msg)\n+    setTimeout () ->\n+      msg.send \"Who you calling 'slow'?\"\n+    , 60 * 1000\n+```\n+\n+Additionally, Hubot can run code on an interval using [setInterval](http://nodejs.org/api/timers.html#timers_setinterval_callback_delay_arg). It takes a callback method, and the amount of time to wait between calls:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /annoy me/, (msg)\n+    msg.send \"Hey, want to hear the most annoying sound in the world?\"\n+    setInterval () ->\n+      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+    , 1000\n+```\n+\n+Both `setTimeout` and `setInterval` return the ID of the timeout or interval it created. This can be used to to `clearTimeout` and `clearInterval`.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  annoyIntervalId = null\n+\n+  robot.respond /annoy me/, (msg)\n+    if annoyIntervalId\n+      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+      return\n+\n+    msg.send \"Hey, want to hear the most annoying sound in the world?\"\n+    annoyIntervalId = setInterval () ->\n+      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+    , 1000\n+\n+  robot.respond /unannoy me/, (msg)\n+    if annoyIntervalId\n+      msg.send \"GUYS, GUYS, GUYS!\"\n+      clearInterval(annoyIntervalId)\n+      annoyIntervalId = null\n+    else\n+      msg.send \"Not annoying you right now, am I?\"\n+```\n+\n+## HTTP Listener\n+\n+Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to server up HTTP requests. It listens on the port specified by the `PORT` environment variable, and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EPXRESS_PASSWORD`. It can automatically server static files by setting `EXPRESS_STATIC`.\n+\n+The most common use of this is for providing HTTP end points for services with webhooks to push to, and have those show up in chat.\n+\n+\n+```\n+module.exports = (robot) ->\n+  robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n+    room = req.params.room\n+    data = JSON.parse req.body.payload\n+    secret = data.secret\n+\n+    robot.messageRoom \"I have a secret: #{secret}\"\n+```\n+\n+## Events\n+\n+Hubot can also respond to events which can be used to pass data between scripts. This is done by encapsulating node.js's [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter) with `robot.emit` and `robot.on`.\n+\n+One use case for this would be to have one script for handling interactions with a service, and then emitting events as they come up. For example, we could have a script that receives data from a GitHub post-commit hook, make that emit commits as they come in, and then have another script act on those commits.\n+\n+```coffeescript\n+# src/scripts/github-commits.coffee\n+module.exports = (robot) ->\n+  robot.router.post \"/hubot/gh-commits\", (req, res) ->\n+    robot.emit \"commit\", {\n+        user    : {}, #hubot user object\n+        repo    : 'https://github.com/github/hubot',\n+        hash  : '2e1951c089bd865839328592ff673d2f08153643'\n+    }\n+```\n+\n+```coffeescript\n+# src/scripts/heroku.coffee\n+module.exports = (robot) ->\n+  robot.on \"commit\", (commit) ->\n+    robot.send commit.user, \"Will now deploy #{commit.hash} from #{commit.repo}!\"\n+    #deploy code goes here\n+```\n+\n+If you provide an event, it's highly recommended to include a hubot user or room object in its data. This would allow for hubot to notify a user or room in chat.\n+\n+## Documenting Scripts\n+\n+Hubot scripts can be documented with comments at the top of their file, for example:\n+\n+```coffeescript\n+# Description\n+#   <description of the scripts functionality>\n+#\n+# Dependencies:\n+#   \"<module name>\": \"<module version>\"\n+#\n+# Configuration:\n+#   LIST_OF_ENV_VARS_TO_SET\n+#\n+# Commands:\n+#   hubot <trigger> - <what the respond trigger does>\n+#   <trigger> - <what the hear trigger does>\n+#\n+# Notes:\n+#   <optional notes required for the script>\n+#\n+# Author:\n+#   <github username of the original script author>\n+```\n+\n+The most important and user facing of these is `Commands`. At load time, Hubot looks at the `Commands` section of each scripts, and build a list of all commands. The included `help.coffee` lets a user ask for help across all commands, or with a search. Therefore, documenting the commands make them a lot more discoverable by users.\n+\n+When documenting commands, here are some best practices:\n+\n+* Stay on one line. Help commands get sorted, so would insert the second line at an unexpected location, where it probably won't make sense.\n+* Refer to the Hubot as hubot, even if your hubot is named something else. It will automatically be replaced with the correct name. This makes it easier to share scripts without having to update docs.\n+* For `robot.respond` documentation, always prefix with `hubot`. Hubot will automatically replace this with your robot's name, or the robot's alias if it has one\n+* Check out how man pages document themselves. In particular, brackets indicate optional parts, '...' for any number of arguments, etc.\n+\n+The other sections are more relevant to developers of the bot, particularly dependencies, configuration variables, and notes. All contributions to [hubot-scripts](https://github.com/github/hubot-scripts) should include all these sections that are related to getting up and running with the script.\n+\n+\n+\n+## Persistence\n+\n+Hubot has an in-memory key-value store exposed as `robot.brain` that can be\n+used to store and retrieve data by scripts.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /have a beer/i, (msg) ->\n+    # Get number of beers had (coerced to a number).\n+    beersHad = robot.brain.get('totalBeers') * 1 or 0\n+\n+    if beersHad > 4\n+      msg.respond \"I'm too drunk..\"\n+\n+    else\n+      msg.respond 'Sure!'\n+\n+      robot.brain.set 'totalBeers', beersHad+1\n+      # Or robot.brain.set totalBeers: beersHad+1\n+```\n+\n+If the script needs to lookup user data, there are methods on `robot.brain` for looking up one or many users by id, name, or 'fuzzy' matching of name: `userForName`, `userForId`, `userForFuzzyName`, and `usersForFuzzyName`.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+\n+  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n+    name = msg.match[1].trim()\n+\n+    users = robot.brain.usersForFuzzyName(name)\n+    if users.length is 1\n+      user = users[0]\n+      # Do something interesting here..\n+\n+      msg.send \"#{name} is user - #{user}\"\n+```\n+\n+\n+## Creating A Script Package\n+\n+Creating a script package for hubot is very simple. Start by creating a normal\n+`npm` package. Make sure you add a main file for the entry point (e.g.\n+`index.js` or `index.coffee`).\n+\n+In this entry point file you're going to have to export a function that hubot\n+will use to load the scripts in your package. Below is a simple example for\n+loading each script in a `./scripts` directory in your package.\n+\n+```coffeescript\n+Fs   = require 'fs'\n+Path = require 'path'\n+\n+module.exports = (robot) ->\n+  path = Path.resolve __dirname, 'scripts'\n+  Fs.exists path, (exists) ->\n+    if exists\n+      for file in Fs.readdirSync(path)\n+        robot.loadFile path, file\n+        robot.parseHelp Path.join(path, file)\n+```\n+\n+After you've built your `npm` package you can publish it to [npmjs](http://npmjs.org).", "changes": 486}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "package.json", "sha": "e31d85fb9249ede6f9767398d7de1677e6496ce4", "additions": 0, "patch": "@@ -1,7 +1,6 @@\n {\n   \"name\": \"hubot\",\n   \"version\": \"3.0.0-beta2\",\n-\n   \"author\": \"hubot\",\n \n   \"keywords\": [", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "src/adapter.coffee", "sha": "2821e0d668d3645117afa57d8faff9c812d1a4a5", "additions": 10, "patch": "@@ -39,6 +39,16 @@ class Adapter extends EventEmitter\n   # Returns nothing.\n   send: (envelope, strings...) ->\n \n+  # Public: Raw method for sending emote data back to the chat source.\n+  # Defaults as an alias for send\n+  #\n+  # envelope - A Object with message, room and user details.\n+  # strings  - One or more Strings for each message to send.\n+  #\n+  # Returns nothing.\n+  emote: (envelope, strings...) ->\n+    @send envelope, strings...\n+\n   # Public: Raw method for building a reply and sending it back to the chat\n   # source. Extend this.\n   #", "changes": 10}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "src/adapters/campfire.coffee", "sha": "81858ed396aa1be8b052d61a7a2d86686ab5fb28", "additions": 3, "patch": "@@ -17,6 +17,9 @@ class Campfire extends Adapter\n           @robot.logger.error \"Campfire error: #{err}\" if err?\n           @send envelope, strings...\n \n+  emote: (envelope, strings...) ->\n+    @send envelope, strings.map((str) -> \"*#{str}*\")...\n+\n   reply: (envelope, strings...) ->\n     @send envelope, strings.map((str) -> \"#{envelope.user.name}: #{str}\")...\n ", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "src/adapters/shell.coffee", "sha": "e9029d6b35fb2002fb97bd8094cfc6db9dfbd799", "additions": 3, "patch": "@@ -12,6 +12,9 @@ class Shell extends Adapter\n       console.log \"#{str}\" for str in strings\n     @repl.prompt()\n \n+  emote: (envelope, strings...) ->\n+    @send envelope, \"* #{str}\" for str in strings\n+\n   reply: (envelope, strings...) ->\n     strings = strings.map (s) -> \"#{envelope.user.name}: #{s}\"\n     @send envelope, strings...", "changes": 3}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "src/creator.coffee", "sha": "f0fd374e95b5a4bbf5bbe7fbbe2bd0173c446f30", "additions": 20, "patch": "@@ -32,6 +32,18 @@ class Creator\n \n       callback(err, to) if callback?\n \n+  # Rename a file.\n+  #\n+  # from - A String source file to rename, must exist on disk.\n+  # to   - A String destination file to write to.\n+  #\n+  # Returns nothing.\n+  rename: (from, to, callback) ->\n+    Fs.rename from, to, (err, data) ->\n+      console.log \"Renaming #{Path.resolve(from)} -> #{Path.resolve(to)}\"\n+\n+      callback(err, to) if callback?\n+\n   # Copy the default scripts hubot ships with to the scripts folder\n   # This allows people to easily remove scripts hubot defaults to if\n   # they want. It also provides them with a few examples and a top\n@@ -60,15 +72,16 @@ class Creator\n     @copyDefaultScripts(\"#{@path}/scripts\")\n \n     files = [\n-      \"Procfile\"\n-      \"package.json\"\n-      \"README.md\"\n-      \".gitignore\"\n-      \"hubot-scripts.json\"\n+      \"Procfile\",\n+      \"package.json\",\n+      \"README.md\",\n+      \"gitignore\",\n+      \"hubot-scripts.json\",\n       \"external-scripts.json\"\n     ]\n-\n-    @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\" for file in files\n+    for file in files\n+      @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\", (err, to)=>\n+        @rename \"#{@path}/gitignore\", \"#{@path}/.gitignore\" if to == \"#{@path}/gitignore\"\n \n     bins = [\n       \"bin/hubot\"", "changes": 27}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "src/response.coffee", "sha": "49c58ca0224903b7eb3934cc9cacc26bdc902438", "additions": 9, "patch": "@@ -21,6 +21,15 @@ class Response\n   send: (strings...) ->\n     @robot.adapter.send @envelope, strings...\n \n+  # Public: Posts an emote back to the chat source\n+  #\n+  # strings - One or more strings to be posted. The order of these strings\n+  #           should be kept intact.\n+  #\n+  # Returns nothing.\n+  emote: (strings...) ->\n+    @robot.adapter.emote @envelope, strings...\n+\n   # Public: Posts a message mentioning the current user.\n   #\n   # strings - One or more strings to be posted. The order of these strings", "changes": 9}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "src/scripts/auth.coffee", "sha": "da1250177d20abf19c721d8f6d9da1be0f1454f4", "additions": 7, "patch": "@@ -47,6 +47,13 @@ module.exports = (robot) ->\n           return true if role in user.roles\n       return false\n \n+    usersWithRole: (role) ->\n+      users = []\n+      for own key, user of robot.brain.data.users\n+        if robot.auth.hasRole(msg.envelope.user, role)\n+          users.push(user)\n+      users\n+\n   robot.auth = new Auth\n \n   robot.respond /@?(.+) (has) ([\"'\\w: -_]+) (role)/i, (msg) ->", "changes": 7}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "src/scripts/help.coffee", "sha": "add41977486719c2248d743992ff3bc46d175a3b", "additions": 10, "patch": "@@ -53,18 +53,21 @@ helpContents = (name, commands) ->\n module.exports = (robot) ->\n   robot.respond /help\\s*(.*)?$/i, (msg) ->\n     cmds = robot.scripts.helpCommands()\n+    filter = msg.match[1]\n \n-    if msg.match[1]\n+    if filter\n       cmds = cmds.filter (cmd) ->\n-        cmd.match new RegExp(msg.match[1], 'i')\n-\n+        cmd.match new RegExp(filter, 'i')\n       if cmds.length == 0\n-        msg.send \"No available commands match #{msg.match[1]}\"\n+        msg.send \"No available commands match #{filter}\"\n         return\n-    emit = cmds.join \"\\n\"\n \n-    unless robot.name.toLowerCase() is 'hubot'\n-      emit = emit.replace /hubot/ig, robot.name\n+    prefix = robot.alias or \"#{robot.name} \"\n+    cmds = cmds.map (cmd) ->\n+      cmd = cmd.replace /^hubot /, prefix\n+      cmd.replace /hubot/ig, robot.name\n+\n+    emit = cmds.join \"\\n\"\n \n     msg.send emit\n ", "changes": 17}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/src/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "src/scripts/math.coffee", "sha": "34bcbd18ae7eeba879f3eac917bbf8c68221af9c", "additions": 3, "patch": "@@ -5,8 +5,9 @@\n #   hubot math me <expression> - Calculate the given expression.\n #   hubot convert me <expression> to <units> - Convert expression to given units.\n module.exports = (robot) ->\n-  robot.respond /(calc|calculate|convert|math|maths)( me)? (.*)/i, (msg) ->\n-    robot.http('https://www.google.com/ig/calculator')\n+  robot.respond /(calc|calculate|calculator|convert|math|maths)( me)? (.*)/i, (msg) ->\n+    msg\n+      .http('https://www.google.com/ig/calculator')\n       .query\n         hl: 'en'\n         q: msg.match[3]", "changes": 5}, {"status": "modified", "deletions": 51, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "src/templates/README.md", "sha": "b26a8300d89cfe8bdf213e43e68cce318cc217a8", "additions": 29, "patch": "@@ -2,49 +2,10 @@\n \n This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n \n-This version is designed to be deployed on [Heroku][heroku].\n+This version is designed to be deployed on [Heroku][heroku]. This README was generated for you by hubot to help get you started. Definitely update and improve to talk about your own instance, how to use and deploy, what functionality he has, etc!\n \n [heroku]: http://www.heroku.com\n \n-## Playing with Hubot\n-\n-You'll need to install the necessary dependencies for hubot. All of\n-those dependencies are provided by [npm][npmjs].\n-\n-[npmjs]: http://npmjs.org\n-\n-## HTTP Listener\n-\n-Hubot has a HTTP listener which listens on the port specified by the `PORT`\n-environment variable.\n-\n-You can specify routes to listen on in your scripts by using the `router`\n-property on `robot`.\n-\n-```coffeescript\n-module.exports = (robot) ->\n-  robot.router.get \"/hubot/version\", (req, res) ->\n-    res.end robot.version\n-```\n-\n-There are functions for GET, POST, PUT and DELETE, which all take a route and\n-callback function that accepts a request and a response.\n-\n-### Redis\n-\n-If you are going to use the `redis-brain.coffee` script from `hubot-scripts`\n-you will need to add the Redis to Go addon on Heroku which requires a verified\n-account or you can create an account at [Redis to Go][redistogo] and manually\n-set the `REDISTOGO_URL` variable.\n-\n-    % heroku config:add REDISTOGO_URL=\"...\"\n-\n-If you don't require any persistence feel free to remove the\n-`redis-brain.coffee` from `hubot-scripts.json` and you don't need to worry\n-about redis at all.\n-\n-[redistogo]: https://redistogo.com/\n-\n ### Testing Hubot Locally\n \n You can test your hubot by running the following.\n@@ -68,16 +29,34 @@ Then you can interact with hubot by typing `hubot help`.\n     help - Displays all of the help commands that Hubot knows about.\n     ...\n \n+\n+### Scripting\n+\n Take a look at the scripts in the `./scripts` folder for examples.\n-Delete any scripts you think are silly.  Add whatever functionality you\n-want hubot to have.\n+Delete any scripts you think are useless or boring.  Add whatever functionality you\n+want hubot to have. Read up on what you can do with hubot in the [Scripting Guide](https://github.com/github/hubot/blob/master/docs/scripting.md).\n+\n+### Redis Persistence\n+\n+If you are going to use the `redis-brain.coffee` script from `hubot-scripts`\n+(strongly suggested), you will need to add the Redis to Go addon on Heroku which requires a verified\n+account or you can create an account at [Redis to Go][redistogo] and manually\n+set the `REDISTOGO_URL` variable.\n+\n+    % heroku config:add REDISTOGO_URL=\"...\"\n+\n+If you don't require any persistence feel free to remove the\n+`redis-brain.coffee` from `hubot-scripts.json` and you don't need to worry\n+about redis at all.\n+\n+[redistogo]: https://redistogo.com/\n \n ## Adapters\n \n Adapters are the interface to the service you want your hubot to run on. This\n can be something like Campfire or IRC. There are a number of third party\n-adapters that the community have contributed. Check the\n-[hubot wiki][hubot-wiki] for the available ones.\n+adapters that the community have contributed. Check\n+[Hubot Adapters][hubot-adapters] for the available ones.\n \n If you would like to run a non-Campfire or shell adapter you will need to add\n the adapter package as a dependency to the `package.json` file in the\n@@ -90,7 +69,7 @@ then run hubot with the adapter.\n \n Where `<adapter>` is the name of your adapter without the `hubot-` prefix.\n \n-[hubot-wiki]: https://github.com/github/hubot/wiki\n+[hubot-adapters]: https://github.com/github/hubot/blob/master/docs/adapters.md\n \n ## hubot-scripts\n \n@@ -144,15 +123,15 @@ Please check out the [deploying hubot onto UNIX][deploy-unix] and\n [deploying hubot onto Windows][deploy-windows] wiki pages.\n \n [heroku-node-docs]: http://devcenter.heroku.com/articles/node-js\n-[deploy-heroku]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-Heroku\n-[deploy-unix]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-UNIX\n-[deploy-windows]: https://github.com/github/hubot/wiki/Deploying-Hubot-onto-Windows\n+[deploy-heroku]: https://github.com/github/hubot/blob/master/docs/deploying/heroku.md\n+[deploy-unix]: https://github.com/github/hubot/blob/master/docs/deploying/unix.md\n+[deploy-windows]: https://github.com/github/hubot/blob/master/docs/deploying/unix.md\n \n ## Campfire Variables\n \n If you are using the Campfire adapter you will need to set some environment\n variables. Refer to the documentation for other adapters and the configuraiton\n-of those, links to the adapters can be found on the [hubot wiki][hubot-wiki].\n+of those, links to the adapters can be found on [Hubot Adapters][hubot-adapters].\n \n Create a separate Campfire user for your bot and get their token from the web\n UI.\n@@ -170,10 +149,9 @@ Add the subdomain hubot should connect to. If you web URL looks like\n \n     % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=\"mysubdomain\"\n \n-[hubot-wiki]: https://github.com/github/hubot/wiki\n+[hubot-adapters]: https://github.com/github/hubot/blob/master/docs/adapters.md\n \n ## Restart the bot\n \n You may want to get comfortable with `heroku logs` and `heroku restart`\n if you're having issues.\n-", "changes": 80}, {"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e37f547200ab0725504784a61707985f2968de57/src/templates/gitignore", "blob_url": "https://github.com/hubotio/hubot/blob/e37f547200ab0725504784a61707985f2968de57/src/templates/gitignore", "previous_filename": "src/templates/.gitignore", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/gitignore?ref=e37f547200ab0725504784a61707985f2968de57", "filename": "src/templates/gitignore", "sha": "b010ffd23c90e37c50fe0d27dfb3d2192999c5c3", "additions": 0, "changes": 0}], "572": [{"status": "modified", "deletions": 9, "raw_url": "https://github.com/hubotio/hubot/raw/26455f9be7e7c40ff849e73cd8a492b18fbf664b/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/26455f9be7e7c40ff849e73cd8a492b18fbf664b/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=26455f9be7e7c40ff849e73cd8a492b18fbf664b", "filename": "docs/deploying/heroku.md", "sha": "ad7a5985fe0767b0eea3dfada241facafcf9a285", "additions": 9, "patch": "@@ -28,23 +28,23 @@ Then create a Heroku application:\n     Git remote heroku added\n \n Before you deploy the application, you'll need to configure some environment\n-variables for hubot to use. Some variables you need depends on which\n+variables for hubot to use. The specific variables you'll need depends on which\n [adapter](../adapters.md) and scripts you are using. For Campfire, with no other\n-scripts, you'd need to at least:\n+scripts, you'd need to set the following environment variables:\n \n     % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=yourcampfireaccount\n     % heroku config:add HUBOT_CAMPFIRE_TOKEN=yourcampfiretoken\n     % heroku config:add HUBOT_CAMPFIRE_ROOMS=comma,separated,list,of,rooms,to,join\n \n-In addition is one special environment variable for Heroku. The default hubot\n+In addition, there is one special environment variable for Heroku. The default hubot\n [Procfile](https://devcenter.heroku.com/articles/procfile) marks the process as\n-a 'web' process type, in order to support serving up http requests (more on that\n-in the [scripting docs](../scripting.md). The downside of this is that dynos\n+a 'web' process type, in order to support serving http requests (more on that\n+in the [scripting docs](../scripting.md)). The downside of this is that dynos\n will [idle after an hour of inactivity](https://devcenter.heroku.com/articles/dynos#dyno-idling).\n That means your hubot would leave after an hour of idle web traffic, and only rejoin when it does get traffic. This is extremely\n-inconvenient since most interaction is done through chat, and hubot has to be online and in the room this. To get around this this,\n+inconvenient since most interaction is done through chat, and hubot has to be online and in the room to respond to messages. To get around this,\n there's a special environment variable to make hubot regularly ping itself over http. If\n-the app is deployed to http://rosemary-britches-123.herokuapp.com/, then you'd\n+the app is deployed to http://rosemary-britches-123.herokuapp.com/, you'd\n configure:\n \n     % heroku config:add HEROKU_URL=http://rosemary-britches-123.herokuapp.com\n@@ -60,8 +60,8 @@ at the logs to try to debug:\n \n     % heroku logs\n \n-If you make any changes to your hubot, just commit them, and push them as\n+If you make any changes to your hubot, just commit and push them as\n before:\n \n-    % git ci -a -m \"Awesome scripts OMG\"\n+    % git commit -am \"Awesome scripts OMG\"\n     % git push heroku master", "changes": 18}], "574": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/660285e99dbaa6abfec19382e7320935339e4548/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/660285e99dbaa6abfec19382e7320935339e4548/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=660285e99dbaa6abfec19382e7320935339e4548", "filename": "docs/scripting.md", "sha": "c5bad093193c774d8c0555d9259d824b8e56cfac", "additions": 54, "patch": "@@ -2,6 +2,54 @@\n \n Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend.\n \n+## Anatomy of script loading\n+\n+There are three main sources to load scripts from: \n+\n+- __community scripts__ shipped in the `hubot-scripts` npm package\n+- scripts __bundled__ with your hubot installation\n+- scripts loaded from external __npm packages__\n+\n+### Community Scripts\n+\n+To use community scripts, place the name of the script in the `hubot-scripts.json` file. For example:\n+\n+```coffeescript\n+[\"redis-brain.coffee\", \"shipit.coffee\", \"whatis.coffee\", \"<new-script-name>.coffee\"]\n+```\n+\n+(Please check the [script catalog][script-catalog] and the [hubot-scripts repo][src-scripts] for scripts carefully crafted for you by lots of nice folks)\n+\n+### NPM Packages\n+\n+Another way is to install scripts via an npm package (you can check some of them [here][npmjs-hubot]).\n+\n+To load those scripts to your hubot installation, you need to place them in the `external-scripts.json` file after adding the required npm packages to the `package.json` dependency section.\n+\n+Here is an example of adding the [hubot-botriot][hubot-botriot] npm package:\n+\n+```json\n+{\n+ ...\n+\n+  \"dependencies\": {\n+    \"hubot\":         \">= 2.6.0 < 3.0.0\",\n+    \"hubot-scripts\": \">= 2.5.0 < 3.0.0\",\n+    \"hubot-botriot\": \"\",\n+  },\n+\n+...\n+}\n+```\n+\n+### Bundled Scripts\n+\n+Last but not least, you can put your own scripts under the `scripts/` directory. All scripts placed there are automatically loaded and ready to use with your hubot.\n+\n+You can also use this for customizing scripts from other sources. Just copy the *.coffee file into this directory and make whatever changes you'd like.\n+\n+Instructions for writing your own scripts can be found below.\n+\n ## Anatomy of a script\n \n When you created your hubot, the generator also created a `scripts` directory. If you peak around there, you will see some examples of scripts. For a script to be a script, it needs to:\n@@ -484,3 +532,9 @@ module.exports = (robot) ->\n ```\n \n After you've built your `npm` package you can publish it to [npmjs](http://npmjs.org).\n+\n+\n+[script-catalog]: http://hubot-script-catalog.herokuapp.com\n+[src-scripts]: https://github.com/github/hubot-scripts/tree/master/src/scripts\n+[npmjs-hubot]: https://npmjs.org/search?q=hubot\n+[hubot-botriot]: https://npmjs.org/package/hubot-botriot", "changes": 54}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/660285e99dbaa6abfec19382e7320935339e4548/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/660285e99dbaa6abfec19382e7320935339e4548/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=660285e99dbaa6abfec19382e7320935339e4548", "filename": "src/robot.coffee", "sha": "e6d932b809551d80e1e83e0362a2ee22ad08117f", "additions": 3, "patch": "@@ -48,7 +48,7 @@ class Robot\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n \n     @parseVersion()\n-    @setupExpress() if httpd\n+    @setupExpress(httpd)\n     @pingIntervalId = null\n     @loadAdapter adapterPath, adapter\n \n@@ -221,7 +221,7 @@ class Robot\n   # Setup the Express server's defaults.\n   #\n   # Returns nothing.\n-  setupExpress: ->\n+  setupExpress: (httpd)->\n     user    = process.env.EXPRESS_USER\n     pass    = process.env.EXPRESS_PASSWORD\n     stat    = process.env.EXPRESS_STATIC\n@@ -234,7 +234,7 @@ class Robot\n     app.use express.bodyParser()\n     app.use express.static stat if stat\n \n-    @server = app.listen process.env.PORT || 8080\n+    @server = app.listen process.env.PORT || 8080 if httpd\n     @router = app\n \n     herokuUrl = process.env.HEROKU_URL", "changes": 6}], "575": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/53d290a71fafb1e1907a3283fd004ddbf3cc3fe5/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/53d290a71fafb1e1907a3283fd004ddbf3cc3fe5/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=53d290a71fafb1e1907a3283fd004ddbf3cc3fe5", "filename": "src/robot.coffee", "sha": "f9cd2f755a3055216edee6d0b094494118785b30", "additions": 17, "patch": "@@ -48,7 +48,10 @@ class Robot\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n \n     @parseVersion()\n-    @setupExpress() if httpd\n+    if httpd\n+      @setupExpress()\n+    else\n+      @setupNullRouter()\n     @pingIntervalId = null\n     @loadAdapter adapterPath, adapter\n \n@@ -234,7 +237,7 @@ class Robot\n     app.use express.bodyParser()\n     app.use express.static stat if stat\n \n-    @server = app.listen process.env.PORT || 8080\n+    @server = app.listen(process.env.PORT || 8080)\n     @router = app\n \n     herokuUrl = process.env.HEROKU_URL\n@@ -246,6 +249,18 @@ class Robot\n           @logger.info 'keep alive ping!'\n       , 1200000\n \n+  # Setup an empty router object\n+  #\n+  # returns nothing\n+  setupNullRouter: ->\n+    msg = \"A script has tried registering a HTTP route while the HTTP server is disabled with --disabled-httpd.\"\n+    @router =\n+      get: ()=> @logger.warning msg\n+      post: ()=> @logger.warning msg\n+      put: ()=> @logger.warning msg\n+      delete: ()=> @logger.warning msg\n+\n+\n   # Load the adapter Hubot is going to use.\n   #\n   # path    - A String of the path to adapter if local.", "changes": 19}], "576": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/88ec7305f5c915443c7179730e2ebbe6c2d0d674/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/88ec7305f5c915443c7179730e2ebbe6c2d0d674/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=88ec7305f5c915443c7179730e2ebbe6c2d0d674", "filename": "docs/patterns.md", "sha": "37c1ddb064c2afce3bd6f0ed095bc870901d985c", "additions": 1, "patch": "@@ -4,7 +4,7 @@ Shared patterns for dealing with common Hubot scenarios.\n \n ## Renaming the Hubot instance\n \n-When you rename Hubot, he will no longer respond to his former name. In order to train you users on the new name, you may choose to add a deprecation notice when they try to se the old name. The pattern logic is:\n+When you rename Hubot, he will no longer respond to his former name. In order to train your users on the new name, you may choose to add a deprecation notice when they try to se the old name. The pattern logic is:\n \n * listen to all messages that start with the old name\n * reply to the user letting them know about the new name", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/88ec7305f5c915443c7179730e2ebbe6c2d0d674/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/88ec7305f5c915443c7179730e2ebbe6c2d0d674/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=88ec7305f5c915443c7179730e2ebbe6c2d0d674", "filename": "docs/scripting.md", "sha": "949c15d3663c1b7899e1784a131f7b6701532c59", "additions": 1, "patch": "@@ -4,7 +4,7 @@ Hubot out of the box doesn't do too much, but it is an extensible, scriptable ro\n \n ## Anatomy of a script\n \n-When you created your hubot, the generator also created a `scripts` directory. If you peak around there, you will see some examples of scripts. For a script to be a script, it needs to:\n+When you created your hubot, the generator also created a `scripts` directory. If you peek around there, you will see some examples of scripts. For a script to be a script, it needs to:\n \n * live in a directory on the hubot script load path (`src/scripts` and `scripts` by default)\n * be a `.coffee` or `.js` file", "changes": 2}], "577": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b5cb29c9f1ab7985fed494c67692eafa00ccc68b/src/scripts/rules.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b5cb29c9f1ab7985fed494c67692eafa00ccc68b/src/scripts/rules.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/rules.coffee?ref=b5cb29c9f1ab7985fed494c67692eafa00ccc68b", "filename": "src/scripts/rules.coffee", "sha": "3630157489ddeea78d5696086b36c08dd4944d4e", "additions": 1, "patch": "@@ -5,7 +5,7 @@\n #   hubot the rules - Make sure hubot still knows the rules.\n #\n # Notes:\n-#   DON'T DELETE THIS SCRIPT! ALL ROBAWTS MUST KNOW THE RULES\n+#   DON'T DELETE THIS SCRIPT! ALL ROBOTS MUST KNOW THE RULES\n \n rules = [\n   \"1. A robot may not injure a human being or, through inaction, allow a human being to come to harm.\",", "changes": 2}], "578": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/91d8bf65daa5450ce1bae8b1b0943199fd9d9783/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/91d8bf65daa5450ce1bae8b1b0943199fd9d9783/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=91d8bf65daa5450ce1bae8b1b0943199fd9d9783", "filename": "docs/deploying/heroku.md", "sha": "a6bf3708c85f591635fa779f508b1ae117ccd663", "additions": 4, "patch": "@@ -65,3 +65,7 @@ before:\n \n     % git commit -am \"Awesome scripts OMG\"\n     % git push heroku master\n+    \n+Some scripts needs Redis to work, Heroku offers an addon called [RedisToGo](https://addons.heroku.com/RedisToGo), which has a free nano plan. To use it:\n+\n+    % heroku addons:add redistogo:nano", "changes": 4}], "579": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/09ad21f009f7ab7e016d198aae8dab2c6dd41e8f/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/09ad21f009f7ab7e016d198aae8dab2c6dd41e8f/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=09ad21f009f7ab7e016d198aae8dab2c6dd41e8f", "filename": "docs/scripting.md", "sha": "a76e2be2212631933ebf5c2ca22a9ebd3d21d75b", "additions": 51, "patch": "@@ -2,9 +2,57 @@\n \n Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend.\n \n+## Anatomy of script loading\n+\n+There are three main sources to load scripts from:\n+\n+* all scripts __bundled__ with your hubot installation under `scripts/` dir\n+* __community scripts__ specified in `hubot-scripts.json` and shipped in the `hubot-scripts` npm package\n+* scripts loaded from external __npm packages__ and specified in `external-scripts.json`\n+\n+### Community Scripts\n+\n+To use community scripts, place the name of the script in the `hubot-scripts.json` file. For example:\n+\n+```coffeescript\n+[\"redis-brain.coffee\", \"shipit.coffee\", \"whatis.coffee\", \"<new-script-name>.coffee\"]\n+```\n+\n+(Please check the [script catalog](http://hubot-script-catalog.herokuapp.com) and the [hubot-scripts repo](https://github.com/github/hubot-scripts/tree/master/src/scripts) for scripts carefully crafted for you by lots of nice folks)\n+\n+### NPM Packages\n+\n+Another way is to install scripts via an npm package (you can check some of them [here](https://npmjs.org/search?q=hubot)).\n+\n+To load those scripts to your hubot installation, you need to place them in the `external-scripts.json` file after adding the required npm packages to the `package.json` dependency section.\n+\n+Here is an example of adding the [hubot-botriot](https://npmjs.org/package/hubot-botriot) npm package:\n+\n+```json\n+{\n+ ...\n+\n+  \"dependencies\": {\n+    \"hubot\":         \">= 2.6.0 < 3.0.0\",\n+    \"hubot-scripts\": \">= 2.5.0 < 3.0.0\",\n+    \"hubot-botriot\": \"\",\n+  },\n+\n+...\n+}\n+```\n+\n+### Bundled Scripts\n+\n+Last but not least, you can put your own scripts under the `scripts/` directory. All scripts placed there are automatically loaded and ready to use with your hubot.\n+\n+You can also use this for customizing scripts from other sources. Just copy the *.coffee file into this directory and make whatever changes you'd like.\n+\n+Instructions for writing your own scripts can be found below.\n+\n ## Anatomy of a script\n \n-When you created your hubot, the generator also created a `scripts` directory. If you peek around there, you will see some examples of scripts. For a script to be a script, it needs to:\n+When you created your hubot, the generator also created a `scripts` directory. If you peak around there, you will see some examples of scripts. For a script to be a script, it needs to:\n \n * live in a directory on the hubot script load path (`src/scripts` and `scripts` by default)\n * be a `.coffee` or `.js` file\n@@ -32,7 +80,7 @@ module.exports = (robot) ->\n     # your code here\n ```\n \n-The `robot.hear /badger/` callback is called anytime a message's text matches. For example:\n+The `robot.hear /badgers/` callback is called anytime a message's text matches. For example:\n \n * Stop badgering the witness\n * badger me\n@@ -484,3 +532,4 @@ module.exports = (robot) ->\n ```\n \n After you've built your `npm` package you can publish it to [npmjs](http://npmjs.org).\n+", "changes": 53}], "582": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/45b507c52a74bb9f0202cfd4122cee48f36facc5/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/45b507c52a74bb9f0202cfd4122cee48f36facc5/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=45b507c52a74bb9f0202cfd4122cee48f36facc5", "filename": "src/scripts/help.coffee", "sha": "2ff4fa21c2d8aa36d066f2e5f2ebfcf186a6dab3", "additions": 3, "patch": "@@ -1,4 +1,4 @@\n-# Description: \n+# Description:\n #   Generates help commands for Hubot.\n #\n # Commands:\n@@ -62,9 +62,9 @@ module.exports = (robot) ->\n         msg.send \"No available commands match #{filter}\"\n         return\n \n-    prefix = robot.alias or \"#{robot.name} \"\n+    prefix = robot.alias or robot.name\n     cmds = cmds.map (cmd) ->\n-      cmd = cmd.replace /^hubot /, prefix\n+      cmd = cmd.replace /^hubot/, prefix\n       cmd.replace /hubot/ig, robot.name\n \n     emit = cmds.join \"\\n\"", "changes": 6}], "583": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dcc2df3d2f721d6eec8973d5d2e3a6dbcab5f44a/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dcc2df3d2f721d6eec8973d5d2e3a6dbcab5f44a/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=dcc2df3d2f721d6eec8973d5d2e3a6dbcab5f44a", "filename": "src/robot.coffee", "sha": "f85c053e84ba12a07641c72bba3db2de97ac90f8", "additions": 1, "patch": "@@ -22,6 +22,7 @@ HUBOT_DOCUMENTATION_SECTIONS = [\n   'commands'\n   'notes'\n   'author'\n+  'authors'\n   'examples'\n   'tags'\n   'urls'", "changes": 1}], "585": [{"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/23dfeba1c1219f27fc277d7336e6e8fa6d987d68/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/23dfeba1c1219f27fc277d7336e6e8fa6d987d68/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=23dfeba1c1219f27fc277d7336e6e8fa6d987d68", "filename": "src/adapters/campfire.coffee", "sha": "794fdbdd11a70a1a26016b275e3f2052263e9ff9", "additions": 9, "patch": "@@ -14,7 +14,7 @@ class Campfire extends Adapter\n         @send envelope, strings...\n       else\n         @bot.Room(envelope.room).speak string, (err, data) =>\n-          @robot.logger.error \"Campfire error: #{err}\" if err?\n+          @robot.logger.error \"Campfire send error: #{err}\" if err?\n           @send envelope, strings...\n \n   emote: (envelope, strings...) ->\n@@ -25,11 +25,11 @@ class Campfire extends Adapter\n \n   topic: (envelope, strings...) ->\n     @bot.Room(envelope.room).topic strings.join(\" / \"), (err, data) =>\n-      @robot.logger.error \"Campfire error: #{err}\" if err?\n+      @robot.logger.error \"Campfire topic error: #{err}\" if err?\n \n   play: (envelope, strings...) ->\n     @bot.Room(envelope.room).sound strings.shift(), (err, data) =>\n-      @robot.logger.error \"Campfire error: #{err}\" if err?\n+      @robot.logger.error \"Campfire sound error: #{err}\" if err?\n       @play envelope, strings...\n \n   locked: (envelope, strings...) ->\n@@ -224,7 +224,7 @@ class CampfireStreaming extends EventEmitter\n                     data.body\n                   )\n                 catch error\n-                  logger.error \"Campfire error: #{error}\\n#{error.stack}\"\n+                  logger.error \"Campfire data error: #{error}\\n#{error.stack}\"\n \n         response.on \"end\", ->\n           logger.error \"Streaming connection closed for room #{id}. :(\"\n@@ -233,10 +233,10 @@ class CampfireStreaming extends EventEmitter\n           , 5000\n \n         response.on \"error\", (err) ->\n-          logger.error \"Campfire response error: #{err}\"\n+          logger.error \"Campfire listen response error: #{err}\"\n \n       request.on \"error\", (err) ->\n-        logger.error \"Campfire request error: #{err}\"\n+        logger.error \"Campfire listen request error: #{err}\"\n \n       request.end()\n \n@@ -284,7 +284,8 @@ class CampfireStreaming extends EventEmitter\n             when 401\n               throw new Error \"Invalid access token provided\"\n             else\n-              logger.error \"Campfire error: #{response.statusCode}\"\n+              logger.error \"Campfire HTTPS status code: #{response.statusCode}\"\n+              logger.error \"Campfire HTTPS response data: #{data}\"\n \n         if callback\n           try\n@@ -293,7 +294,7 @@ class CampfireStreaming extends EventEmitter\n             callback null, data or { }\n \n       response.on \"error\", (err) ->\n-        logger.error \"Campfire response error: #{err}\"\n+        logger.error \"Campfire HTTPS response error: #{err}\"\n         callback err, { }\n \n     if method is \"POST\" || method is \"PUT\"", "changes": 17}], "590": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/40f8268a6488c2d34ede85026cf3c43f9af08bd9/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/40f8268a6488c2d34ede85026cf3c43f9af08bd9/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=40f8268a6488c2d34ede85026cf3c43f9af08bd9", "filename": "docs/README.md", "sha": "0f6d334db15fb632235890fa0cce950c8a7fc668", "additions": 3, "patch": "@@ -60,9 +60,9 @@ is mostly useful for development. Make note of  `Hubot>`; this is the name he'll\n     hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n     hubot who is <user> - see what roles a user has\n     hubot youtube me <query> - Searches YouTube for the query and returns the video embed link.\n-    pug bomb N - get N pugs\n-    pug me - Receive a pug\n-    ship it - Display a motivation squirrel\n+    hubot pug bomb N - get N pugs\n+    hubot pug me - Receive a pug\n+    hubot ship it - Display a motivation squirrel\n \n You almost definitely will want to change his name to give him some more character. bin/hubot takes a `--name`:\n ", "changes": 6}], "592": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/1cc4e06962e22c6fa910a6df3e5a34836da855bf/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/1cc4e06962e22c6fa910a6df3e5a34836da855bf/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=1cc4e06962e22c6fa910a6df3e5a34836da855bf", "filename": "docs/scripting.md", "sha": "a24bb2b397969c8b1ee0d29c5d6f5671442d5842", "additions": 3, "patch": "@@ -52,7 +52,7 @@ Instructions for writing your own scripts can be found below.\n \n ## Anatomy of a script\n \n-When you created your hubot, the generator also created a `scripts` directory. If you peak around there, you will see some examples of scripts. For a script to be a script, it needs to:\n+When you created your hubot, the generator also created a `scripts` directory. If you peek around there, you will see some examples of scripts. For a script to be a script, it needs to:\n \n * live in a directory on the hubot script load path (`src/scripts` and `scripts` by default)\n * be a `.coffee` or `.js` file\n@@ -129,7 +129,7 @@ So far, our scripts have had static responses, which while amusing, are boring f\n     # your code here\n ```\n \n-If Dave says \"HAL: open the pod bay doors\", then `msg.match[0]` is \"open the pod bay doors\", and `msg.match[1]` is just \"pod bay\" doors. Now we can start doing more dynamic things:\n+If Dave says \"HAL: open the pod bay doors\", then `msg.match[0]` is \"open the pod bay doors\", and `msg.match[1]` is just \"pod bay\". Now we can start doing more dynamic things:\n \n ```coffeescript\n   robot.respond /open the (.*) doors/i, (msg) ->\n@@ -162,7 +162,7 @@ Hubot can make HTTP calls on your behalf to integrate & consume third party APIs\n       # your code here, knowing it was successful\n ```\n \n-`res` is an instance of node's [http.ServerResponse](http://nodejs.org/api/http.html#http_class_http_serverresponse). Most of the methods don't matter as much when using node-scoped-http-client, but of interest are `statusCode` and `getHeader`. Use `statusCode` to check for the HTTP status code, where usually non-200 means something bad happened. Use `getHeader` for peaking at the header, for example to check for rate limiting:\n+`res` is an instance of node's [http.ServerResponse](http://nodejs.org/api/http.html#http_class_http_serverresponse). Most of the methods don't matter as much when using node-scoped-http-client, but of interest are `statusCode` and `getHeader`. Use `statusCode` to check for the HTTP status code, where usually non-200 means something bad happened. Use `getHeader` for peeking at the header, for example to check for rate limiting:\n \n ```coffeescript\n   robot.http(\"https://midnight-train\")", "changes": 6}], "599": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d0b1369bdd5d7e0007040faab0e9dd699b662224/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d0b1369bdd5d7e0007040faab0e9dd699b662224/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=d0b1369bdd5d7e0007040faab0e9dd699b662224", "filename": "src/scripts/google-images.coffee", "sha": "0ff82f3831588c801497bad44df81f29acb5e34f", "additions": 1, "patch": "@@ -17,7 +17,7 @@ module.exports = (robot) ->\n       msg.send url\n \n   robot.respond /(?:mo?u)?sta(?:s|c)he?(?: me)? (.*)/i, (msg) ->\n-    type = Math.floor(Math.random() * 3)\n+    type = Math.floor(Math.random() * 6)\n     mustachify = \"http://mustachify.me/#{type}?src=\"\n     imagery = msg.match[1]\n ", "changes": 2}], "600": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6d53d65aa1939ed77f52ff8c82c81e85159ea134/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/6d53d65aa1939ed77f52ff8c82c81e85159ea134/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=6d53d65aa1939ed77f52ff8c82c81e85159ea134", "filename": "src/message.coffee", "sha": "767100f3a9dbc13239b16a8483830333dd14c6da", "additions": 1, "patch": "@@ -47,7 +47,7 @@ class LeaveMessage extends Message\n # user - A User instance for the user who changed the topic.\n # text - A String of the new topic\n # id   - A String of the message ID.\n-class TopicMessage extends Message\n+class TopicMessage extends TextMessage\n \n class CatchAllMessage extends Message\n   # Represents a message that no matchers matched.", "changes": 2}], "601": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b5e6a8e9112da1fa76ed790eaf82b8b3682efa3e/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b5e6a8e9112da1fa76ed790eaf82b8b3682efa3e/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=b5e6a8e9112da1fa76ed790eaf82b8b3682efa3e", "filename": "src/robot.coffee", "sha": "8e162d131918a163a28fda7b44ef71a29ee6c3ec", "additions": 1, "patch": "@@ -194,7 +194,7 @@ class Robot\n     @logger.debug \"Loading scripts from #{path}\"\n     Fs.exists path, (exists) =>\n       if exists\n-        for file in Fs.readdirSync(path)\n+        for file in Fs.readdirSync(path).sort()\n           @loadFile path, file\n \n   # Public: Load scripts specfied in the `hubot-scripts.json` file.", "changes": 2}], "604": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/90f14aada357453e2fd3ed122c935e063e20aa47/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/90f14aada357453e2fd3ed122c935e063e20aa47/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=90f14aada357453e2fd3ed122c935e063e20aa47", "filename": "src/robot.coffee", "sha": "11361e5197733d9d2534b070d00d4acca2e8c5cd", "additions": 1, "patch": "@@ -220,6 +220,7 @@ class Robot\n       if packages instanceof Array\n         for pkg in packages\n           require(pkg)(@)\n+          @parseHelp require.resolve(pkg)\n       else\n         for pkg, scripts of packages\n           require(pkg)(@, scripts)", "changes": 1}], "606": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/9e81b34a0a72994d01643526b2a11a347cb2b587/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/9e81b34a0a72994d01643526b2a11a347cb2b587/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=9e81b34a0a72994d01643526b2a11a347cb2b587", "filename": "CONTRIBUTING.md", "sha": "ae39ab5273136e19852232bdc29bbf728da0d02b", "additions": 3, "patch": "@@ -3,9 +3,9 @@ We love pull requests. Here's a quick guide:\n 1. Check for [existing issues](https://github.com/github/hubot/issues) for duplicates and confirm that it hasn't been fixed already in the [master branch](https://github.com/github/hubot/commits/master)\n 2. Fork the repo, and clone it locally\n 3. `npm link` to make your cloned repo available to npm\n-4. `hubot --create testbot` to create a bot to test against (no automated tests yet :sob:)\n-5. `npm install && npm link hubot` in your newly created bot to install dependencies, and use your hubot fork\n-6. Push to your fork and submit a pull request.\n+4. Follow [Getting Started](docs/README.md) to generate a testbot (no automated tests yet :sob:)\n+5. `npm link hubot` in your newly created bot to use your hubot fork\n+6. Push to your fork and submit a pull request\n \n At this point you're waiting on us. We like to at least comment on, if not\n accept, pull requests within a few days. We may suggest some changes or improvements or alternatives.", "changes": 6}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/9e81b34a0a72994d01643526b2a11a347cb2b587/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/9e81b34a0a72994d01643526b2a11a347cb2b587/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=9e81b34a0a72994d01643526b2a11a347cb2b587", "filename": "bin/hubot", "sha": "c7ba1549e24d8384502237561387ff81c2bb9d77", "additions": 7, "patch": "@@ -2,7 +2,6 @@\n # vim:ft=coffee ts=2 sw=2 et :\n # -*- mode:coffee -*-\n \n-Creator  = require '../src/creator'\n Hubot    = require '..'\n \n Fs       = require 'fs'\n@@ -11,7 +10,7 @@ Path     = require 'path'\n \n Switches = [\n   [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n+  [ \"-c\", \"--create PATH\",     \"REMOVED. See https://github.com/github/hubot/blob/master/docs/README.md\" ],\n   [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n   [ \"-h\", \"--help\",            \"Display the help information\" ],\n   [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n@@ -27,7 +26,6 @@ Options =\n   enableHttpd: process.env.HUBOT_HTTPD   or true\n   scripts:     process.env.HUBOT_SCRIPTS or []\n   name:        process.env.HUBOT_NAME    or \"Hubot\"\n-  path:        process.env.HUBOT_PATH    or \".\"\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n@@ -36,7 +34,6 @@ Parser.on \"adapter\", (opt, value) ->\n   Options.adapter = value\n \n Parser.on \"create\", (opt, value) ->\n-  Options.path = value\n   Options.create = true\n \n Parser.on \"disable-httpd\", (opt) ->\n@@ -66,8 +63,12 @@ unless process.platform is \"win32\"\n     process.exit 0\n \n if Options.create\n-  creator = new Creator(Options.path)\n-  creator.run()\n+  output = [\n+    \"The `hubot --create` command has been removed.\",\n+    \"Please see https://github.com/github/hubot/blob/master/docs/README.md\"\n+  ]\n+  console.error output.join \"\\n\"\n+  process.exit(1)\n \n else\n   adapterPath = Path.join __dirname, \"..\", \"src\", \"adapters\"", "changes": 13}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/9e81b34a0a72994d01643526b2a11a347cb2b587/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/9e81b34a0a72994d01643526b2a11a347cb2b587/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=9e81b34a0a72994d01643526b2a11a347cb2b587", "filename": "docs/README.md", "sha": "105190be1e78f745f6d77481139ec04f874aa61c", "additions": 10, "patch": "@@ -5,15 +5,19 @@\n You will need [node.js](http://nodejs.org/) and [npm](https://npmjs.org/). Joyent has\n an [excellent blog post on how to get those installed](http://joyent.com/blog/installing-node-and-npm), so we'll omit those details here.\n \n-Once node and npm are ready, we can install hubot and coffeescript:\n+Once node and npm are ready, we can install the hubot generator tools:\n \n-    % npm install -g hubot coffee-script\n+    % npm install -g yo generator-hubot-bot\n \n-This will give us the `hubot` command, which is used for running a hubot, and more importantly now, generating your own hubot. The name of the new bot is\n-the last argument, and will be created in the directory of the same name. For\n-example, to create a new bot named myhubot:\n+[Yeoman](http://yeoman.io/), summoned via the `yo` command, is a\n+scaffolding tool that we use to generate our hubot. By default, the name\n+of the new bot is the name of the directory we create it in. For\n+example, to create a new bot named \"myhubot\":\n \n-    % hubot --create myhubot\n+    % mkdir myhubot && cd $_\n+    % yo hubot-bot\n+\n+A setup wizard that will walk you through the customization process.\n \n If you are using git, the generated directory includes a .gitignore, so you can\n initialize and add everything:", "changes": 16}, {"status": "removed", "deletions": 95, "raw_url": "https://github.com/hubotio/hubot/raw/b54f0857309a2f05e64f21155b6552f72a44ff16/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b54f0857309a2f05e64f21155b6552f72a44ff16/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=b54f0857309a2f05e64f21155b6552f72a44ff16", "filename": "src/creator.coffee", "sha": "19f9235c5c8e28ff87cd693270a3d04b06011d30", "additions": 0, "patch": "@@ -1,95 +0,0 @@\n-Fs   = require 'fs'\n-Path = require 'path'\n-\n-# Simple generator class for deploying a version of hubot on heroku\n-class Creator\n-  # Setup a ready to go version of hubot\n-  #\n-  # path - A String directory to create/upgrade scripts for\n-  constructor: (path) ->\n-    @path = path\n-    @templateDir = \"#{__dirname}/templates\"\n-    @scriptsDir  = \"#{__dirname}/scripts\"\n-\n-  # Create a folder if it doesn't already exist.\n-  #\n-  # Returns nothing.\n-  mkdir: (path) ->\n-    Fs.exists path, (exists) ->\n-      unless exists\n-        Fs.mkdirSync path, 0o0755\n-\n-  # Copy the contents of a file from one place to another.\n-  #\n-  # from - A String source file to copy, must exist on disk.\n-  # to   - A String destination file to write to.\n-  #\n-  # Returns nothing.\n-  copy: (from, to, callback) ->\n-    Fs.readFile from, \"utf8\", (err, data) ->\n-      console.log \"Copying #{Path.resolve(from)} -> #{Path.resolve(to)}\"\n-      Fs.writeFileSync to, data, \"utf8\"\n-\n-      callback(err, to) if callback?\n-\n-  # Rename a file.\n-  #\n-  # from - A String source file to rename, must exist on disk.\n-  # to   - A String destination file to write to.\n-  #\n-  # Returns nothing.\n-  rename: (from, to, callback) ->\n-    Fs.rename from, to, (err, data) ->\n-      console.log \"Renaming #{Path.resolve(from)} -> #{Path.resolve(to)}\"\n-\n-      callback(err, to) if callback?\n-\n-  # Copy the default scripts hubot ships with to the scripts folder\n-  # This allows people to easily remove scripts hubot defaults to if\n-  # they want. It also provides them with a few examples and a top\n-  # level scripts folder.\n-  #\n-  # path - The destination.\n-  #\n-  # Returns nothing.\n-  copyDefaultScripts: (path) ->\n-    for file in Fs.readdirSync(@scriptsDir)\n-      @copy \"#{@scriptsDir}/#{file}\", \"#{path}/#{file}\"\n-\n-  # Public: Run the creator process.\n-  #\n-  # Setup a ready to deploy folder that uses the hubot npm package\n-  # Overwriting basic hubot files if they exist\n-  #\n-  # Returns nothing.\n-  run: ->\n-    console.log \"Creating a hubot install at #{@path}\"\n-\n-    @mkdir(@path)\n-    @mkdir(\"#{@path}/bin\")\n-    @mkdir(\"#{@path}/scripts\")\n-\n-    @copyDefaultScripts(\"#{@path}/scripts\")\n-\n-    files = [\n-      \"Procfile\",\n-      \"package.json\",\n-      \"README.md\",\n-      \"gitignore\",\n-      \"hubot-scripts.json\",\n-      \"external-scripts.json\"\n-    ]\n-    for file in files\n-      @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\", (err, to)=>\n-        @rename \"#{@path}/gitignore\", \"#{@path}/.gitignore\" if to == \"#{@path}/gitignore\"\n-\n-    bins = [\n-      \"bin/hubot\",\n-      \"bin/hubot.cmd\"\n-    ]\n-\n-    for bin in bins\n-      @copy \"#{@templateDir}/#{bin}\", \"#{@path}/#{bin}\", (err, binPath) =>\n-        Fs.chmodSync binPath, 0o755\n-\n-module.exports = Creator", "changes": 95}], "609": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ed9a5177dee83b4aad870e413b8bbb2295b28ffb/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ed9a5177dee83b4aad870e413b8bbb2295b28ffb/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=ed9a5177dee83b4aad870e413b8bbb2295b28ffb", "filename": "src/robot.coffee", "sha": "73a721e0c27461b469c49282de3420e50833024d", "additions": 1, "patch": "@@ -244,7 +244,7 @@ class Robot\n     app.use express.static stat if stat\n \n     try\n-      @server = app.listen(process.env.PORT || 8080)\n+      @server = app.listen(process.env.PORT || 8080, process.env.BIND_ADDRESS || '0.0.0.0')\n       @router = app\n     catch err\n       @logger.error \"Error trying to start HTTP server: #{err}\\n#{err.stack}\"", "changes": 2}], "612": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/b6cfd0216ae0d8e89c5274a741619d33ae0e7c13/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b6cfd0216ae0d8e89c5274a741619d33ae0e7c13/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=b6cfd0216ae0d8e89c5274a741619d33ae0e7c13", "filename": "src/robot.coffee", "sha": "82407513b4288dde777a402fa6d5801b18e8f25d", "additions": 6, "patch": "@@ -418,6 +418,7 @@ class Robot\n   # send the request.\n   #\n   # url - String URL to access.\n+  # options - Optional options to pass on to the client\n   #\n   # Examples:\n   #\n@@ -439,9 +440,12 @@ class Robot\n   #       .post(data) (err, res, body) ->\n   #         console.log body\n   #\n+  #    # Can also set options\n+  #    res.http(\"http://example.com\", {rejectUnauthorized: false})\n+  #\n   # Returns a ScopedClient instance.\n-  http: (url) ->\n-    HttpClient.create(url)\n+  http: (url, options) ->\n+    HttpClient.create(url, options)\n       .header('User-Agent', \"Hubot/#{@version}\")\n \n module.exports = Robot", "changes": 8}], "614": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e5b5dd75b1d20fd8b9c2bc4b3a53584a82dfaca8/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/e5b5dd75b1d20fd8b9c2bc4b3a53584a82dfaca8/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=e5b5dd75b1d20fd8b9c2bc4b3a53584a82dfaca8", "filename": "package.json", "sha": "9540aee39009a9c4da80121448cd34b502f39e98", "additions": 2, "patch": "@@ -28,7 +28,8 @@\n     \"optparse\":           \"1.0.4\",\n     \"scoped-http-client\": \"0.9.8\",\n     \"log\":                \"1.4.0\",\n-    \"express\":            \"3.3.4\"\n+    \"express\":            \"3.3.4\",\n+    \"mathjs\":             \"0.16.0\"\n   },\n \n   \"engines\": {", "changes": 3}, {"status": "modified", "deletions": 16, "raw_url": "https://github.com/hubotio/hubot/raw/e5b5dd75b1d20fd8b9c2bc4b3a53584a82dfaca8/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e5b5dd75b1d20fd8b9c2bc4b3a53584a82dfaca8/src/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=e5b5dd75b1d20fd8b9c2bc4b3a53584a82dfaca8", "filename": "src/scripts/math.coffee", "sha": "0386e459092cf5e07e5154ded060b411e5edd92f", "additions": 4, "patch": "@@ -3,20 +3,8 @@\n #\n # Commands:\n #   hubot math me <expression> - Calculate the given expression.\n-#   hubot convert me <expression> to <units> - Convert expression to given units.\n module.exports = (robot) ->\n-  robot.respond /(calc|calculate|calculator|convert|math|maths)( me)? (.*)/i, (msg) ->\n-    msg\n-      .http('https://www.google.com/ig/calculator')\n-      .query\n-        hl: 'en'\n-        q: msg.match[3]\n-      .headers\n-        'Accept-Language': 'en-us,en;q=0.5',\n-        'Accept-Charset': 'utf-8',\n-        'User-Agent': \"Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\"\n-      .get() (err, res, body) ->\n-        # Response includes non-string keys, so we can't use JSON.parse here.\n-        json = eval(\"(#{body})\")\n-        msg.send json.rhs || 'Could not compute.'\n-\n+  robot.respond /(calc|calculate|calculator|math|maths)( me)? (.*)/i, (msg) ->\n+    mathjs = require('mathjs')\n+    math = mathjs()\n+    msg.send math.eval(msg.match[3])", "changes": 20}], "615": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/cdda498bd91c96bb9bf95219a74b77932c32d1e0/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/cdda498bd91c96bb9bf95219a74b77932c32d1e0/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=cdda498bd91c96bb9bf95219a74b77932c32d1e0", "filename": "src/robot.coffee", "sha": "a3c1ce873ec17d5a62834ffdebac7df2e9e980e4", "additions": 4, "patch": "@@ -100,7 +100,10 @@ class Robot\n         modifiers\n       )\n \n-    @listeners.push new TextListener(@, newRegex, callback)\n+    try\n+      @listeners.push new TextListener(@, newRegex, callback)\n+    catch err\n+      @logger.error \"One of the scripts failed.\\n#{err}\"\n \n   # Public: Adds a Listener that triggers when anyone enters the room.\n   #", "changes": 5}], "617": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3bef62989dabfafe7915062bc020a9866fb3949e/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/3bef62989dabfafe7915062bc020a9866fb3949e/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=3bef62989dabfafe7915062bc020a9866fb3949e", "filename": "docs/scripting.md", "sha": "5f1723a48f25afb702935d9bdc7684336f298dfc", "additions": 1, "patch": "@@ -80,7 +80,7 @@ module.exports = (robot) ->\n     # your code here\n ```\n \n-The `robot.hear /badgers/` callback is called anytime a message's text matches. For example:\n+The `robot.hear /badger/` callback is called anytime a message's text matches. For example:\n \n * Stop badgering the witness\n * badger me", "changes": 2}], "618": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ba3e29bf06e1461472c539a6b7764cc15c15e46e/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/ba3e29bf06e1461472c539a6b7764cc15c15e46e/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=ba3e29bf06e1461472c539a6b7764cc15c15e46e", "filename": "docs/adapters.md", "sha": "fbbbfedfe70a773ed063a5cc71a29a131c41900e", "additions": 1, "patch": "@@ -29,7 +29,7 @@ to have yours added to the list:\n * [Jabbr](https://github.com/smoak/hubot-jabbr)\n * [iMessage](https://github.com/lazerwalker/hubot-imessage)\n * [Hall](https://github.com/Hall/hubot-hall)\n-\n+* [ChatWork](https://github.com/akiomik/hubot-chatwork)\n \n ## Writing Your Own adapter\n ", "changes": 2}], "620": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/c6f31cc3caf51cf5b60da3ec3efebdcf3dd45104/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c6f31cc3caf51cf5b60da3ec3efebdcf3dd45104/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=c6f31cc3caf51cf5b60da3ec3efebdcf3dd45104", "filename": "src/scripts/auth.coffee", "sha": "62e98183bf72cdc17a6941b4e2053306d6aa2935", "additions": 10, "patch": "@@ -98,17 +98,23 @@ module.exports = (robot) ->\n     user = robot.brain.userForName(name)\n     return msg.reply \"#{name} does not exist\" unless user?\n     user.roles or= []\n+    displayRoles = user.roles\n \n     if user.id.toString() in admins\n-      isAdmin = ' and is also an admin'\n+      displayRoles.push('admin')\n+\n+    if displayRoles.length == 0\n+      msg.reply \"#{name} has no roles.\"\n     else\n-      isAdmin = ''\n-    msg.reply \"#{name} has the following roles: #{user.roles.join(', ')}#{isAdmin}.\"\n+      msg.reply \"#{name} has the following roles: #{displayRoles.join(', ')}.\"\n \n   robot.respond /who has admin role\\?*$/i, (msg) ->\n     adminNames = []\n     for admin in admins\n       user = robot.brain.userForId(admin)\n       adminNames.push user.name if user?\n \n-    msg.reply \"The following people have the 'admin' role: #{adminNames.join(', ')}\"\n+    if adminNames.length > 0\n+      msg.reply \"The following people have the 'admin' role: #{adminNames.join(', ')}\"\n+    else\n+      msg.reply \"There are no people that have the 'admin' role.\"", "changes": 14}], "624": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/9a5f202a7cf05439b2ffbc4ceb58077af4f2f687/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/9a5f202a7cf05439b2ffbc4ceb58077af4f2f687/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=9a5f202a7cf05439b2ffbc4ceb58077af4f2f687", "filename": "docs/scripting.md", "sha": "4c0ac55ae86f597f1527def1cd1aa3fb32e9c6ae", "additions": 46, "patch": "@@ -395,14 +395,14 @@ Hubot includes support for the [express](http://expressjs.com/guide.html) web fr\n The most common use of this is for providing HTTP end points for services with webhooks to push to, and have those show up in chat.\n \n \n-```\n+```coffeescript\n module.exports = (robot) ->\n   robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n     room = req.params.room\n     data = JSON.parse req.body.payload\n     secret = data.secret\n \n-    robot.messageRoom \"I have a secret: #{secret}\"\n+    robot.messageRoom room, \"I have a secret: #{secret}\"\n ```\n \n ## Events\n@@ -432,6 +432,50 @@ module.exports = (robot) ->\n \n If you provide an event, it's highly recommended to include a hubot user or room object in its data. This would allow for hubot to notify a user or room in chat.\n \n+## Error Handling\n+\n+No code is perfect, and errors and exceptions are to be expected. Previously, an uncaught exceptions would crash your hubot instance. Hubot now includes an `uncaughtException` handler, which provides hooks for scripts to do something about exceptions.\n+\n+```coffeescript\n+# src/scripts/does-not-compute.coffee\n+module.exports = (robot) ->\n+  robot.error (err, msg) ->\n+    robot.logger.error \"DOES NOT COMPUTE\"\n+\n+    if msg?\n+      msg.reply \"DOES NOT COMPUTE\"\n+```\n+\n+You can do anything you want here, but you will want to take extra precaution of rescuing and logging errors, particularly with asynchronous code. Otherwise, you might find yourself with recursive errors and not know what is going on.\n+\n+Under the hood, there is an 'error' event emitted, with the error handlers consuming that event. The uncaughtException handler [technically leaves the process in an unknown state](http://nodejs.org/api/process.html#process_event_uncaughtexception). Therefore, you should rescue your own exceptions whenever possible, and emit them yourself. The first argument is the error emitted, and the second argument is an optional message that generated the error.\n+\n+Using previous examples:\n+\n+```coffeescript\n+  robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n+    room = req.params.room\n+    data = null\n+    try\n+      data = JSON.parse req.body.payload\n+    catch err\n+      robot.emit 'error', error\n+\n+    # rest of the code here\n+\n+\n+  robot.hear /midnight train/i, (msg)\n+    robot.http(\"https://midnight-train\")\n+      .get() (err, res, body) ->\n+        if err\n+          msg.reply \"Had problems taking the midnight train\"\n+          robot.emit 'error', err, msg\n+          return\n+        # rest of code here\n+```\n+\n+For the second example, it's worth thinking about what messages the user would see. If you have an error handler that replies to the user, you may not need to add a custom\n+\n ## Documenting Scripts\n \n Hubot scripts can be documented with comments at the top of their file, for example:\n@@ -532,4 +576,3 @@ module.exports = (robot) ->\n ```\n \n After you've built your `npm` package you can publish it to [npmjs](http://npmjs.org).\n-", "changes": 49}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/9a5f202a7cf05439b2ffbc4ceb58077af4f2f687/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9a5f202a7cf05439b2ffbc4ceb58077af4f2f687/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=9a5f202a7cf05439b2ffbc4ceb58077af4f2f687", "filename": "src/robot.coffee", "sha": "42fc2661a335bbb513da0a0e4b299bde37f1187c", "additions": 33, "patch": "@@ -55,8 +55,17 @@ class Robot\n     else\n       @setupNullRouter()\n     @pingIntervalId = null\n+\n     @loadAdapter adapterPath, adapter\n \n+    @errorHandlers = []\n+\n+    @on 'error', (err, msg) =>\n+      @invokeErrorHandlers(err, msg)\n+    process.on 'uncaughtException', (err) =>\n+      @emit 'error', err\n+\n+\n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n   #\n@@ -138,6 +147,29 @@ class Robot\n       callback\n     )\n \n+  # Public: Adds an error handler when an uncaught exception or user emitted\n+  # error event occurs.\n+  #\n+  # callback - A Function that is called with the error object.\n+  #\n+  # Returns nothing.\n+  error: (callback) ->\n+    @errorHandlers.push callback\n+\n+  # Calls and passes any registered error handlers for unhandled exceptions or\n+  # user emitted error events.\n+  #\n+  # err - An Error object.\n+  # msg - An optional Response object that generated the error\n+  #\n+  # Returns nothing.\n+  invokeErrorHandlers: (err, msg) ->\n+    for errorHandler in @errorHandlers\n+     try\n+       errorHandler(err, msg)\n+     catch errErr\n+       @logger.error \"while invoking error handler: #{errErr}\\n#{errErr.stack}\"\n+\n   # Public: Adds a Listener that triggers when no other text matchers match.\n   #\n   # callback - A Function that is called with a Response object.\n@@ -163,7 +195,7 @@ class Robot\n         results.push listener.call(message)\n         break if message.done\n       catch error\n-        @logger.error \"Unable to call the listener: #{error}\\n#{error.stack}\"\n+        @emit('error', error)\n         false\n     if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n       @receive new CatchAllMessage(message)", "changes": 34}], "625": [{"status": "removed", "deletions": 22, "raw_url": "https://github.com/hubotio/hubot/raw/445d88eef000c19bab948f3474dc63e4a017d3e1/src/scripts/math.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/445d88eef000c19bab948f3474dc63e4a017d3e1/src/scripts/math.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/math.coffee?ref=445d88eef000c19bab948f3474dc63e4a017d3e1", "filename": "src/scripts/math.coffee", "sha": "6a8541468c27f51f449e32328743daca99acffa2", "additions": 0, "patch": "@@ -1,22 +0,0 @@\n-# Description:\n-#   Allows Hubot to do mathematics.\n-#\n-# Commands:\n-#   hubot math me <expression> - Calculate the given expression.\n-#   hubot convert me <expression> to <units> - Convert expression to given units.\n-module.exports = (robot) ->\n-  robot.respond /(calc|calculate|calculator|convert|math|maths)( me)? (.*)/i, (msg) ->\n-    msg\n-      .http('https://www.google.com/ig/calculator')\n-      .query\n-        hl: 'en'\n-        q: msg.match[3]\n-      .headers\n-        'Accept-Language': 'en-us,en;q=0.5',\n-        'Accept-Charset': 'utf-8',\n-        'User-Agent': \"Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20100101 Firefox/4.0.1\"\n-      .get() (err, res, body) ->\n-        # Response includes non-string keys, so we can't use JSON.parse here.\n-        json = eval(\"(#{body})\")\n-        msg.send json.rhs || 'Could not compute.'\n-", "changes": 22}], "626": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/5d2e542770341ce850cfd3ee580ed4ae072277eb/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/5d2e542770341ce850cfd3ee580ed4ae072277eb/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=5d2e542770341ce850cfd3ee580ed4ae072277eb", "filename": "docs/deploying/heroku.md", "sha": "fdb00039763e43d9c73686c75aa0b44b8ab64d0f", "additions": 22, "patch": "@@ -49,6 +49,27 @@ configure:\n \n     % heroku config:set HEROKU_URL=http://rosemary-britches-123.herokuapp.com\n \n+If your hubot will be listening for http connections and you would like to\n+verify [x-hub-signature headers](http://pubsubhubbub.googlecode.com/svn/trunk/pubsubhubbub-core-0.3.html#authednotify)\n+you can also set this environment variable:\n+\n+    % heroku config:add HUB_SECRET=<YOUR_SECRET_HERE>\n+\n+Setting this will cause any requests with the `x-hub-signature` header set to\n+fail unless the signature is validated. Requests not containing this header\n+will always succeed.\n+\n+Scripts can ensure that requests that have been validated by checking\n+`req.hubVerified`. However, for convenience, if you have a particular script\n+that you want to require a valid `x-hub-signature` for, you can so do like this:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.router.post \"/some/url\",\n+                    robot.requireHubSignature,\n+                    fn\n+```\n+\n At this point, you are ready to deploy and start chatting. With Heroku, that's a\n git push away:\n \n@@ -65,7 +86,7 @@ before:\n \n     % git commit -am \"Awesome scripts OMG\"\n     % git push heroku master\n-    \n+\n Some scripts needs Redis to work, Heroku offers an addon called [RedisToGo](https://addons.heroku.com/RedisToGo), which has a free nano plan. To use it:\n \n     % heroku addons:add redistogo:nano", "changes": 23}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/5d2e542770341ce850cfd3ee580ed4ae072277eb/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/5d2e542770341ce850cfd3ee580ed4ae072277eb/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=5d2e542770341ce850cfd3ee580ed4ae072277eb", "filename": "docs/scripting.md", "sha": "6d1948a1351e392e44935e2759268e2a9f70475f", "additions": 15, "patch": "@@ -402,7 +402,7 @@ module.exports = (robot) ->\n \n ## HTTP Listener\n \n-Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to server up HTTP requests. It listens on the port specified by the `PORT` environment variable, and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EPXRESS_PASSWORD`. It can automatically server static files by setting `EXPRESS_STATIC`.\n+Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to server up HTTP requests. It listens on the port specified by the `PORT` environment variable, and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EPXRESS_PASSWORD`. It can automatically serve static files by setting `EXPRESS_STATIC`.\n \n The most common use of this is for providing HTTP end points for services with webhooks to push to, and have those show up in chat.\n \n@@ -417,6 +417,20 @@ module.exports = (robot) ->\n     robot.messageRoom room, \"I have a secret: #{secret}\"\n ```\n \n+### HTTP Request verification\n+If your hubot will be listening for http connections and you would like to verify [x-hub-signature headers](http://pubsubhubbub.googlecode.com/svn/trunk/pubsubhubbub-core-0.3.html#authednotify) you can set the `HUB_SECRET` environment variable.\n+\n+Setting this will cause any requests with the `x-hub-signature` header set to fail unless the signature is validated. Requests not containing this header will always succeed.\n+\n+Scripts can ensure that requests that have been validated by checking `req.hubVerified`. However, for convenience, if you have a particular script that you want to require a valid `x-hub-signature` for, you can so do like this:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.router.post \"/some/url\",\n+                    robot.requireHubSignature,\n+                    fn\n+```\n+\n ## Events\n \n Hubot can also respond to events which can be used to pass data between scripts. This is done by encapsulating node.js's [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter) with `robot.emit` and `robot.on`.", "changes": 16}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/5d2e542770341ce850cfd3ee580ed4ae072277eb/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/5d2e542770341ce850cfd3ee580ed4ae072277eb/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=5d2e542770341ce850cfd3ee580ed4ae072277eb", "filename": "package.json", "sha": "316b6e18195b86e970ba3a26f43254d0b67f3fd0", "additions": 1, "patch": "@@ -28,7 +28,7 @@\n     \"optparse\":           \"1.0.4\",\n     \"scoped-http-client\": \"0.9.8\",\n     \"log\":                \"1.4.0\",\n-    \"express\":            \"3.3.4\"\n+    \"express\":            \"3.4.4\"\n   },\n \n   \"engines\": {", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/5d2e542770341ce850cfd3ee580ed4ae072277eb/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5d2e542770341ce850cfd3ee580ed4ae072277eb/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=5d2e542770341ce850cfd3ee580ed4ae072277eb", "filename": "src/robot.coffee", "sha": "5f0fa257f8d1942c58333cfa6dae272057d40536", "additions": 32, "patch": "@@ -260,6 +260,10 @@ class Robot\n       @logger.error \"Error loading scripts from npm package - #{err.stack}\"\n       process.exit(1)\n \n+  requireHubSignature: (req, res, next) ->\n+    return next new Error \"Invalid Hub Signature\" unless req.hubVerified\n+    next()\n+\n   # Setup the Express server's defaults.\n   #\n   # Returns nothing.\n@@ -268,6 +272,32 @@ class Robot\n     pass    = process.env.EXPRESS_PASSWORD\n     stat    = process.env.EXPRESS_STATIC\n \n+    verifyHub = (req, res, buffer) ->\n+      secret    = process.env.HUB_SECRET\n+      signature = req.header \"x-hub-signature\"\n+\n+      ## the request could not be verified, but it's not an error\n+      ## req.hubVerified will still be `undefined`\n+      return unless secret and signature\n+\n+      signature = signature.split '='\n+      algo      = signature[0]\n+      signature = signature[1]\n+\n+      ## connect.json.verify will catch any thrown errors and cause the request\n+      ## to be rejected with 403 Forbidden\n+\n+      throw new Error \"Invalid Hub Signature\" unless algo is \"sha1\"\n+\n+      hmac = require(\"crypto\")\n+        .createHmac(algo, secret)\n+        .update(buffer)\n+        .digest(\"hex\")\n+\n+      throw new Error \"Invalid Hub Signature\" unless hmac is signature\n+\n+      req.hubVerified = true\n+\n     express = require 'express'\n \n     app = express()\n@@ -278,7 +308,8 @@ class Robot\n \n     app.use express.basicAuth user, pass if user and pass\n     app.use express.query()\n-    app.use express.bodyParser()\n+    app.use express.json       verify: verifyHub\n+    app.use express.urlencoded verify: verifyHub\n     app.use express.static stat if stat\n \n     try", "changes": 33}], "627": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/dec4856c570f82855209dfb9b02df566953218ab/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dec4856c570f82855209dfb9b02df566953218ab/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=dec4856c570f82855209dfb9b02df566953218ab", "filename": "src/robot.coffee", "sha": "691ff81bf9e512ac2aac8e40d0849e0155c92c11", "additions": 2, "patch": "@@ -195,7 +195,8 @@ class Robot\n         results.push listener.call(message)\n         break if message.done\n       catch error\n-        @emit('error', error)\n+        @emit('error', error, new @Response(@, message, []))\n+\n         false\n     if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n       @receive new CatchAllMessage(message)", "changes": 3}], "628": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/89faa39d5821e709d35a8a1f8319963a2aaead4a/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/89faa39d5821e709d35a8a1f8319963a2aaead4a/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=89faa39d5821e709d35a8a1f8319963a2aaead4a", "filename": "src/robot.coffee", "sha": "ad78a6078e8b2440e08006493800e22a9df96bab", "additions": 5, "patch": "@@ -271,6 +271,11 @@ class Robot\n     express = require 'express'\n \n     app = express()\n+\n+    app.use (req, res, next) =>\n+      res.setHeader \"X-Powered-By\", \"hubot/#{@name}\"\n+      next()\n+\n     app.use express.basicAuth user, pass if user and pass\n     app.use express.query()\n     app.use express.bodyParser()", "changes": 5}], "629": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/558c3ac19474f0045d2c3e5a287b858cfea78dd9/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/558c3ac19474f0045d2c3e5a287b858cfea78dd9/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=558c3ac19474f0045d2c3e5a287b858cfea78dd9", "filename": "docs/adapters.md", "sha": "90a25f56c81fb569932c6b9e3f826df04c66b203", "additions": 1, "patch": "@@ -30,6 +30,7 @@ to have yours added to the list:\n * [iMessage](https://github.com/lazerwalker/hubot-imessage)\n * [Hall](https://github.com/Hall/hubot-hall)\n * [ChatWork](https://github.com/akiomik/hubot-chatwork)\n+* [QQ](https://github.com/xhan/qqbot)\n \n ## Writing Your Own adapter\n ", "changes": 1}], "631": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/7821896f16d5a5da8c5b5279e9ba620d0171d411/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/7821896f16d5a5da8c5b5279e9ba620d0171d411/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=7821896f16d5a5da8c5b5279e9ba620d0171d411", "filename": "docs/patterns.md", "sha": "29469d08786c209de0805919ee0de899f9bab0ea", "additions": 1, "patch": "@@ -4,7 +4,7 @@ Shared patterns for dealing with common Hubot scenarios.\n \n ## Renaming the Hubot instance\n \n-When you rename Hubot, he will no longer respond to his former name. In order to train your users on the new name, you may choose to add a deprecation notice when they try to se the old name. The pattern logic is:\n+When you rename Hubot, he will no longer respond to his former name. In order to train your users on the new name, you may choose to add a deprecation notice when they try to say the old name. The pattern logic is:\n \n * listen to all messages that start with the old name\n * reply to the user letting them know about the new name", "changes": 2}], "632": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/112edb1834ac2e4a0851a77f9e0b910953e8c5ed/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/112edb1834ac2e4a0851a77f9e0b910953e8c5ed/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=112edb1834ac2e4a0851a77f9e0b910953e8c5ed", "filename": "docs/scripting.md", "sha": "8575de1d12c3beff4ea66dd959665815041e3574", "additions": 2, "patch": "@@ -526,10 +526,10 @@ module.exports = (robot) ->\n     beersHad = robot.brain.get('totalBeers') * 1 or 0\n \n     if beersHad > 4\n-      msg.respond \"I'm too drunk..\"\n+      msg.reply \"I'm too drunk..\"\n \n     else\n-      msg.respond 'Sure!'\n+      msg.reply 'Sure!'\n \n       robot.brain.set 'totalBeers', beersHad+1\n       # Or robot.brain.set totalBeers: beersHad+1", "changes": 4}], "633": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/39c9318417cecf4a044c54b1bda8fc934a710a01/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/39c9318417cecf4a044c54b1bda8fc934a710a01/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=39c9318417cecf4a044c54b1bda8fc934a710a01", "filename": "docs/scripting.md", "sha": "926296fcdca0dae1e205596d8b1319b2e006603e", "additions": 1, "patch": "@@ -481,7 +481,7 @@ For the second example, it's worth thinking about what messages the user would s\n Hubot scripts can be documented with comments at the top of their file, for example:\n \n ```coffeescript\n-# Description\n+# Description:\n #   <description of the scripts functionality>\n #\n # Dependencies:", "changes": 2}], "634": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/baf801cb30fe3ee61ac15e32ee64a46ee659d98f/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/baf801cb30fe3ee61ac15e32ee64a46ee659d98f/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=baf801cb30fe3ee61ac15e32ee64a46ee659d98f", "filename": "docs/README.md", "sha": "baee827ba015fe7bdaaf6a579a48941bf2128b7c", "additions": 1, "patch": "@@ -2,7 +2,7 @@\n \n ## Getting Started With Hubot\n \n-You will need [node.js](nodejs.org/) and [npm](https://npmjs.org/). Joyent has\n+You will need [node.js](http://nodejs.org/) and [npm](https://npmjs.org/). Joyent has\n an [excellent blog post on how to get those installed](http://joyent.com/blog/installing-node-and-npm), so we'll omit those details here.\n \n Once node and npm are ready, we can install hubot and coffeescript:", "changes": 2}], "635": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/7f534c150808fcda4a2e505299ffa9c9d4d86a77/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/7f534c150808fcda4a2e505299ffa9c9d4d86a77/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=7f534c150808fcda4a2e505299ffa9c9d4d86a77", "filename": "package.json", "sha": "2d20963e8a95dd732876fbe2163bd7c23e18cdc0", "additions": 1, "patch": "@@ -15,7 +15,7 @@\n \n   \"licenses\": [{\n     \"type\": \"MIT\",\n-    \"url\": \"https://github.com/github/hubot/raw/master/LICENSE.md\"\n+    \"url\": \"https://raw.github.com/github/hubot/master/LICENSE\"\n   }],\n \n   \"repository\" : {", "changes": 2}], "636": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/2b24ad8947cd36de8fb16dfc478d580fa1f7fa3b/src/templates/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/2b24ad8947cd36de8fb16dfc478d580fa1f7fa3b/src/templates/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/package.json?ref=2b24ad8947cd36de8fb16dfc478d580fa1f7fa3b", "filename": "src/templates/package.json", "sha": "37022f714b9f147dd02828dfd4b3c4870a086911", "additions": 1, "patch": "@@ -1,6 +1,7 @@\n {\n   \"name\": \"hosted-hubot\",\n   \"version\": \"2.7.1\",\n+  \"private\": true,\n \n   \"author\": \"GitHub Inc.\",\n ", "changes": 1}], "637": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3183834b923a0b5367fcaa8e4ed518c86cb2a00e/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3183834b923a0b5367fcaa8e4ed518c86cb2a00e/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=3183834b923a0b5367fcaa8e4ed518c86cb2a00e", "filename": "src/scripts/help.coffee", "sha": "edc323ceeb44f0c56c6e8dd498d8b39545b34b37", "additions": 2, "patch": "@@ -14,8 +14,10 @@\n helpContents = (name, commands) ->\n \n   \"\"\"\n+<!DOCTYPE html>\n <html>\n   <head>\n+  <meta charset=\"utf-8\">\n   <title>#{name} Help</title>\n   <style type=\"text/css\">\n     body {", "changes": 2}], "639": [{"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/c32346e1e3d67b9fc483323034df9447be995e4b/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c32346e1e3d67b9fc483323034df9447be995e4b/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=c32346e1e3d67b9fc483323034df9447be995e4b", "filename": "src/adapters/campfire.coffee", "sha": "e291a64b968aad937e135a48200cbbdbdac92983", "additions": 32, "patch": "@@ -6,6 +6,10 @@ Adapter                                              = require '../adapter'\n {TextMessage,EnterMessage,LeaveMessage,TopicMessage} = require '../message'\n \n class Campfire extends Adapter\n+  constructor: (@robot) ->\n+    super @robot\n+    @locks = new CampfireLockCounter\n+\n   send: (envelope, strings...) ->\n     if strings.length > 0\n       string = strings.shift()\n@@ -33,15 +37,20 @@ class Campfire extends Adapter\n       @play envelope, strings...\n \n   locked: (envelope, strings...) ->\n-    if envelope.message.private\n+    @locks.increment envelope.room\n+    @bot.Room(envelope.room).lock (args...) =>\n+      strings.push =>\n+        unlock = () =>\n+          # Handle the case where multiple `locked` messages are sent in close\n+          # proximity. We don't want to unlock until the final one has sent\n+          if @locks.decrement(envelope.room) == 0\n+            @bot.Room(envelope.room).unlock()\n+\n+        # campfire won't send messages from just before a room unlock. 3000\n+        # is the 3-second poll.\n+        setTimeout unlock, 3000\n+\n       @send envelope, strings...\n-    else\n-      @bot.Room(envelope.room).lock (args...) =>\n-        strings.push =>\n-          # campfire won't send messages from just before a room unlock. 3000\n-          # is the 3-second poll.\n-          setTimeout (=> @bot.Room(envelope.room).unlock()), 3000\n-        @send envelope, strings...\n \n   run: ->\n     self = @\n@@ -113,6 +122,21 @@ class Campfire extends Adapter\n \n     self.emit \"connected\"\n \n+class CampfireLockCounter\n+  constructor: ->\n+    @counts = Object.create(null)\n+\n+  # Increments the lock count for a room, returning the current count after\n+  # incrementing\n+  increment: (roomId) ->\n+    @counts[roomId] = (@counts[roomId] ? 0) + 1\n+\n+  # Decrements the lock count for a room, returning the current count after\n+  # decrementing. `0` is returned if the number of locks now matches the\n+  # number of unlocks.\n+  decrement: (roomId) ->\n+    @counts[roomId] = Math.max(0, (@counts[roomId] ? 0) - 1)\n+\n exports.use = (robot) ->\n   new Campfire robot\n ", "changes": 40}], "640": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/eab4c630c4d2aa1d5c8a5f63fb34a87482a4e005/docs/adapters/campfire.md", "blob_url": "https://github.com/hubotio/hubot/blob/eab4c630c4d2aa1d5c8a5f63fb34a87482a4e005/docs/adapters/campfire.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/campfire.md?ref=eab4c630c4d2aa1d5c8a5f63fb34a87482a4e005", "filename": "docs/adapters/campfire.md", "sha": "6a65ac54a705cc2150e335fbbd76854bbd362cd3", "additions": 3, "patch": "@@ -50,11 +50,11 @@ subdomain is `hubot`. Make a note of the subdomain.\n \n ### Configuring the variables on Heroku\n \n-    % heroku config:add HUBOT_CAMPFIRE_TOKEN=\"...\"\n+    % heroku config:set HUBOT_CAMPFIRE_TOKEN=\"...\"\n \n-    % heroku config:add HUBOT_CAMPFIRE_ROOMS=\"123,321\"\n+    % heroku config:set HUBOT_CAMPFIRE_ROOMS=\"123,321\"\n \n-    % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=\"...\"\n+    % heroku config:set HUBOT_CAMPFIRE_ACCOUNT=\"...\"\n \n ### Configuring the variables on UNIX\n ", "changes": 6}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/eab4c630c4d2aa1d5c8a5f63fb34a87482a4e005/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/eab4c630c4d2aa1d5c8a5f63fb34a87482a4e005/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=eab4c630c4d2aa1d5c8a5f63fb34a87482a4e005", "filename": "docs/deploying/heroku.md", "sha": "c7a2ee8ef557b70a2e69ba4695ad186e7c8f4962", "additions": 4, "patch": "@@ -32,9 +32,9 @@ variables for hubot to use. The specific variables you'll need depends on which\n [adapter](../adapters.md) and scripts you are using. For Campfire, with no other\n scripts, you'd need to set the following environment variables:\n \n-    % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=yourcampfireaccount\n-    % heroku config:add HUBOT_CAMPFIRE_TOKEN=yourcampfiretoken\n-    % heroku config:add HUBOT_CAMPFIRE_ROOMS=comma,separated,list,of,rooms,to,join\n+    % heroku config:set HUBOT_CAMPFIRE_ACCOUNT=yourcampfireaccount\n+    % heroku config:set HUBOT_CAMPFIRE_TOKEN=yourcampfiretoken\n+    % heroku config:set HUBOT_CAMPFIRE_ROOMS=comma,separated,list,of,rooms,to,join\n \n In addition, there is one special environment variable for Heroku. The default hubot\n [Procfile](https://devcenter.heroku.com/articles/procfile) marks the process as\n@@ -47,7 +47,7 @@ there's a special environment variable to make hubot regularly ping itself over\n the app is deployed to http://rosemary-britches-123.herokuapp.com/, you'd\n configure:\n \n-    % heroku config:add HEROKU_URL=http://rosemary-britches-123.herokuapp.com\n+    % heroku config:set HEROKU_URL=http://rosemary-britches-123.herokuapp.com\n \n At this point, you are ready to deploy and start chatting. With Heroku, that's a\n git push away:", "changes": 8}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/eab4c630c4d2aa1d5c8a5f63fb34a87482a4e005/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/eab4c630c4d2aa1d5c8a5f63fb34a87482a4e005/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=eab4c630c4d2aa1d5c8a5f63fb34a87482a4e005", "filename": "src/templates/README.md", "sha": "1ffdf873775de8d6c7d9c8de21d0a98ae4bcf3b9", "additions": 4, "patch": "@@ -43,7 +43,7 @@ If you are going to use the `redis-brain.coffee` script from `hubot-scripts`\n account or you can create an account at [Redis to Go][redistogo] and manually\n set the `REDISTOGO_URL` variable.\n \n-    % heroku config:add REDISTOGO_URL=\"...\"\n+    % heroku config:set REDISTOGO_URL=\"...\"\n \n If you don't require any persistence feel free to remove the\n `redis-brain.coffee` from `hubot-scripts.json` and you don't need to worry\n@@ -136,18 +136,18 @@ of those, links to the adapters can be found on [Hubot Adapters][hubot-adapters]\n Create a separate Campfire user for your bot and get their token from the web\n UI.\n \n-    % heroku config:add HUBOT_CAMPFIRE_TOKEN=\"...\"\n+    % heroku config:set HUBOT_CAMPFIRE_TOKEN=\"...\"\n \n Get the numeric IDs of the rooms you want the bot to join, comma delimited. If\n you want the bot to connect to `https://mysubdomain.campfirenow.com/room/42` \n and `https://mysubdomain.campfirenow.com/room/1024` then you'd add it like this:\n \n-    % heroku config:add HUBOT_CAMPFIRE_ROOMS=\"42,1024\"\n+    % heroku config:set HUBOT_CAMPFIRE_ROOMS=\"42,1024\"\n \n Add the subdomain hubot should connect to. If you web URL looks like\n `http://mysubdomain.campfirenow.com` then you'd add it like this:\n \n-    % heroku config:add HUBOT_CAMPFIRE_ACCOUNT=\"mysubdomain\"\n+    % heroku config:set HUBOT_CAMPFIRE_ACCOUNT=\"mysubdomain\"\n \n [hubot-adapters]: https://github.com/github/hubot/blob/master/docs/adapters.md\n ", "changes": 8}], "641": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ae9919f0eaf4f8e1ad0febfa3e1a1ff5a9d9e5e8/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/ae9919f0eaf4f8e1ad0febfa3e1a1ff5a9d9e5e8/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=ae9919f0eaf4f8e1ad0febfa3e1a1ff5a9d9e5e8", "filename": "README.md", "sha": "14ded04f5a083da48e01cc15ee104f1a4a610a6e", "additions": 1, "patch": "@@ -14,5 +14,5 @@ are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTI\n \n ## License\n \n-Copyright (c) 2011-2013 GitHub, Inc. See the LICENSE file for license rights and\n+Copyright (c) 2011-2014 GitHub, Inc. See the LICENSE file for license rights and\n limitations (MIT).", "changes": 2}], "642": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0db362813a50378546057f25b961376379e4af36/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/0db362813a50378546057f25b961376379e4af36/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=0db362813a50378546057f25b961376379e4af36", "filename": "docs/scripting.md", "sha": "0a0cc56c9137c29db62f079704c1b4f9043a273a", "additions": 12, "patch": "@@ -151,6 +151,18 @@ Hubot can make HTTP calls on your behalf to integrate & consume third party APIs\n       # your code here\n ```\n \n+A post looks like:\n+\n+```coffeescript\n+  data = JSON.stringify({\n+    foo: 'bar'\n+  })\n+  robot.http(\"https://midnight-train\")\n+    .post(data) (err, res, body) ->\n+      # your code here\n+```\n+\n+\n `err` is an error encountered on the way, if one was encountered. You'll generally want to check for this and handle accordingly:\n \n ```coffeescript", "changes": 12}], "646": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/9508916dc6cbac1f96c4d8b4cdf2f8c885a85c80/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9508916dc6cbac1f96c4d8b4cdf2f8c885a85c80/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=9508916dc6cbac1f96c4d8b4cdf2f8c885a85c80", "filename": "src/scripts/auth.coffee", "sha": "247feaac4d67cf6d05801e4b024564bf4a3919c9", "additions": 4, "patch": "@@ -47,6 +47,9 @@ module.exports = (robot) ->\n           return true if role in user.roles\n       return false\n \n+    isAdmin: (user) ->\n+      return user.id.toString() in admins\n+\n     usersWithRole: (role) ->\n       users = []\n       for own key, user of robot.brain.data.users\n@@ -98,7 +101,7 @@ module.exports = (robot) ->\n     user = robot.brain.userForName(name)\n     return msg.reply \"#{name} does not exist\" unless user?\n     user.roles or= []\n-    displayRoles = user.roles\n+    displayRoles = user.roles.slice(0)\n \n     if user.id.toString() in admins\n       displayRoles.push('admin')", "changes": 5}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/9508916dc6cbac1f96c4d8b4cdf2f8c885a85c80/src/scripts/ping.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9508916dc6cbac1f96c4d8b4cdf2f8c885a85c80/src/scripts/ping.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/ping.coffee?ref=9508916dc6cbac1f96c4d8b4cdf2f8c885a85c80", "filename": "src/scripts/ping.coffee", "sha": "3a138c502171a33ec51fb429da91213a1689924c", "additions": 5, "patch": "@@ -18,6 +18,9 @@ module.exports = (robot) ->\n     msg.send \"Server time is: #{new Date()}\"\n \n   robot.respond /DIE$/i, (msg) ->\n-    msg.send \"Goodbye, cruel world.\"\n-    process.exit 0\n+    if not process.env.HUBOT_AUTH_ADMIN? or robot.auth.isAdmin(msg.envelope.user)\n+      msg.send \"Goodbye, cruel world.\"\n+      process.exit 0\n+    else\n+      msg.send \"I'm sorry, #{msg.envelope.user.name}. I'm afraid I can't do that.\"\n ", "changes": 7}], "649": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a1e1082ebb2a93e33c89d47a88b8ddd1f30abac6/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a1e1082ebb2a93e33c89d47a88b8ddd1f30abac6/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=a1e1082ebb2a93e33c89d47a88b8ddd1f30abac6", "filename": "src/adapter.coffee", "sha": "0414a4ba31ec92a9fd2a38a5fd29b11a5078777c", "additions": 8, "patch": "@@ -41,6 +41,14 @@ class Adapter extends EventEmitter\n   # Returns nothing.\n   topic: (envelope, strings...) ->\n \n+  # Public: Raw method for sending custom data back to the chat source. Extend this.\n+  #\n+  # envelope - A Object with message, room and user details.\n+  # objects  - One or more custom Objects for each message to send.\n+  #\n+  # Returns nothing.\n+  custom: (envelope, objects...) ->\n+\n   # Public: Raw method for playing a sound in the chat source. Extend this.\n   #\n   # envelope - A Object with message, room and user details.", "changes": 8}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a1e1082ebb2a93e33c89d47a88b8ddd1f30abac6/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a1e1082ebb2a93e33c89d47a88b8ddd1f30abac6/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=a1e1082ebb2a93e33c89d47a88b8ddd1f30abac6", "filename": "src/response.coffee", "sha": "eff1a4a753d64793f6a27a46818f6592962184f4", "additions": 8, "patch": "@@ -48,6 +48,14 @@ class Response\n   topic: (strings...) ->\n     @robot.adapter.topic @envelope, strings...\n \n+  # Public: Posts a custom message\n+  #\n+  # objects - One or more objects to be posted\n+  #\n+  # Returns nothing.\n+  custom: (objects...) ->\n+    @robot.adapter.custom @envelope, objects...\n+\n   # Public: Play a sound in the chat source\n   #\n   # strings - One or more strings to be posted as sounds to play. The order of", "changes": 8}], "650": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/1077043b3579e9680add106f9aadc1dc48992bf1/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1077043b3579e9680add106f9aadc1dc48992bf1/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=1077043b3579e9680add106f9aadc1dc48992bf1", "filename": "index.coffee", "sha": "55367a3f1ba4e4cda5484a99f662e7b7a0bfc690", "additions": 4, "patch": "@@ -3,8 +3,8 @@ Brain                                                                = require '\n Robot                                                                = require './src/robot'\n Adapter                                                              = require './src/adapter'\n Response                                                             = require './src/response'\n-{Listener,TextListener}                                              = require './src/listener'\n-{TextMessage,EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './src/message'\n+{Listener,TextListener,EmoteListener}                                              = require './src/listener'\n+{TextMessage,EmoteMessage,EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './src/message'\n \n module.exports = {\n   User\n@@ -14,7 +14,9 @@ module.exports = {\n   Response\n   Listener\n   TextListener\n+  EmoteListener\n   TextMessage\n+  EmoteMessage\n   EnterMessage\n   LeaveMessage\n   TopicMessage", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1077043b3579e9680add106f9aadc1dc48992bf1/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1077043b3579e9680add106f9aadc1dc48992bf1/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=1077043b3579e9680add106f9aadc1dc48992bf1", "filename": "src/listener.coffee", "sha": "362e4884a584bfb53e64951c9cea7af0d108c7d3", "additions": 15, "patch": "@@ -1,6 +1,6 @@\n {inspect} = require 'util'\n \n-{TextMessage} = require './message'\n+{TextMessage,EmoteMessage} = require './message'\n \n class Listener\n   # Listeners receive every message from the chat source and decide if they\n@@ -42,7 +42,21 @@ class TextListener extends Listener\n       if message instanceof TextMessage\n         message.match @regex\n \n+class EmoteListener extends Listener\n+  # EmoteListeners receive every emote from the chat source and decide if they\n+  # want to act on it. Similar to a TextListener, but for emotes.\n+  #\n+  # robot    - A Robot instance.\n+  # regex    - A Regex that determines if this listener should trigger the\n+  #            callback.\n+  # callback - A Function that is triggered if the incoming message matches.\n+  constructor: (@robot, @regex, @callback) ->\n+    @matcher = (message) =>\n+      if message instanceof EmoteMessage\n+        message.match @regex\n+\n module.exports = {\n   Listener\n   TextListener\n+  EmoteListener\n }", "changes": 16}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1077043b3579e9680add106f9aadc1dc48992bf1/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1077043b3579e9680add106f9aadc1dc48992bf1/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=1077043b3579e9680add106f9aadc1dc48992bf1", "filename": "src/message.coffee", "sha": "e1a723e3581dd93e18fded686856f4142b158ca0", "additions": 21, "patch": "@@ -49,6 +49,26 @@ class LeaveMessage extends Message\n # id   - A String of the message ID.\n class TopicMessage extends TextMessage\n \n+# Represents an incoming emote.\n+#\n+# user - A User instance for the user who changed the topic.\n+# text - A String of the new topic\n+# id   - A String of the message ID.\n+#\n+# NOTE: Does not extend TextMessage so we can prevent overlapping\n+# TextMessage callbacks\n+class EmoteMessage extends Message\n+  constructor: (@user, @text, @id) ->\n+    super @user\n+\n+  # Determines if the message matches the given regex.\n+  #\n+  # regex - A Regex to check.\n+  #\n+  # Returns a Match object or null.\n+  match: (regex) ->\n+    @text.match regex\n+\n class CatchAllMessage extends Message\n   # Represents a message that no matchers matched.\n   #\n@@ -59,6 +79,7 @@ class CatchAllMessage extends Message\n module.exports = {\n   Message\n   TextMessage\n+  EmoteMessage\n   EnterMessage\n   LeaveMessage\n   TopicMessage", "changes": 21}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1077043b3579e9680add106f9aadc1dc48992bf1/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1077043b3579e9680add106f9aadc1dc48992bf1/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=1077043b3579e9680add106f9aadc1dc48992bf1", "filename": "src/robot.coffee", "sha": "96188ffcfd37e17b718a7545c50f6a0f734bb022", "additions": 11, "patch": "@@ -7,7 +7,7 @@ HttpClient     = require 'scoped-http-client'\n User = require './user'\n Brain = require './brain'\n Response = require './response'\n-{Listener,TextListener} = require './listener'\n+{Listener,TextListener,EmoteListener} = require './listener'\n {EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n \n HUBOT_DEFAULT_ADAPTERS = [\n@@ -76,6 +76,16 @@ class Robot\n   hear: (regex, callback) ->\n     @listeners.push new TextListener(@, regex, callback)\n \n+  # Public: Adds a Listener that attempts to match incoming emote messages\n+  # based on a Regex. Identical to hear except for emotes.\n+  #\n+  # regex    - A Regex that determines if the callback should be called.\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  hearEmote: (regex, callback) ->\n+    @listeners.push new EmoteListener(@, regex, callback)\n+\n   # Public: Adds a Listener that attempts to match incoming messages directed\n   # at the robot based on a Regex. All regexes treat patterns like they begin\n   # with a '^'", "changes": 12}], "654": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/122d26f77e42322d526bca76582b9c4b158f7bb7/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/122d26f77e42322d526bca76582b9c4b158f7bb7/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=122d26f77e42322d526bca76582b9c4b158f7bb7", "filename": "docs/scripting.md", "sha": "3aa8ee09b4df9c1ef316346dbfd8b6cd1111318e", "additions": 1, "patch": "@@ -402,7 +402,7 @@ module.exports = (robot) ->\n \n ## HTTP Listener\n \n-Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to server up HTTP requests. It listens on the port specified by the `PORT` environment variable, and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EPXRESS_PASSWORD`. It can automatically server static files by setting `EXPRESS_STATIC`.\n+Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to serve up HTTP requests. It listens on the port specified by the `PORT` environment variable, and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EPXRESS_PASSWORD`. It can automatically serve static files by setting `EXPRESS_STATIC`.\n \n The most common use of this is for providing HTTP end points for services with webhooks to push to, and have those show up in chat.\n ", "changes": 2}], "655": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/7812e95b8abbea6b9206bc3f80a5d7001b2db2a3/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/7812e95b8abbea6b9206bc3f80a5d7001b2db2a3/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=7812e95b8abbea6b9206bc3f80a5d7001b2db2a3", "filename": "docs/patterns.md", "sha": "c636246f81ff018d62799cb765cfa164c70694ff", "additions": 5, "patch": "@@ -61,3 +61,8 @@ module.exports = (robot) ->\n     return\n \n ```\n+\n+## Setting up authorization for Hubot\n+\n+As you start running Hubot in your company, you'll start to find that you'll have certain people to be able to do certain commands and others without that access. This is where authorization, \n+comes into play and the tutorial how to set up basic authorization is [here](patterns/authorization_tutorial.md).", "changes": 5}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/7812e95b8abbea6b9206bc3f80a5d7001b2db2a3/docs/patterns/authorization_tutorial.md", "blob_url": "https://github.com/hubotio/hubot/blob/7812e95b8abbea6b9206bc3f80a5d7001b2db2a3/docs/patterns/authorization_tutorial.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns/authorization_tutorial.md?ref=7812e95b8abbea6b9206bc3f80a5d7001b2db2a3", "filename": "docs/patterns/authorization_tutorial.md", "sha": "4118e887b4396a3974dea5da4dfe36169aa9f9b6", "additions": 90, "patch": "@@ -0,0 +1,90 @@\n+# Authorization for Hubot\n+\n+Authorization is the ability to scope certain commands for certain people. This is accomplished by two scripts and redis that come with \n+the basic install of hubot: [auth.coffee](https://github.com/github/hubot/blob/master/src/scripts/auth.coffee) and [roles.coffee](https://github.com/github/hubot/blob/master/src/scripts/roles.coffee). This tutorial is designed to get a basic understanding of setting it up, so you concentrate on figuring out where to use it as quickly as possible.\n+\n+NOTE: This is only for an example you'll want to remove this after you've walked through this tutorial.\n+\n+## Setting up Hubot's Admins\n+\n+First thing you need to do is set up your `HUBOT_AUTH_ADMIN`. You've probably seen these lines when you started up hubot via the shell:\n+\n+```\n+Hubot> [Sat Feb 22 2014 12:50:00 GMT-0600 (CST)] WARNING The HUBOT_AUTH_ADMIN environment variable not set\n+[Sat Feb 22 2014 12:50:01 GMT-0600 (CST)] INFO Data for brain retrieved from Redis\n+```\n+\n+Go ahead and type the following at the hubot commandline:\n+\n+```\n+Hubot> Hubot show users\n+```\n+\n+It should come back with `1 Shell` which is the default user that Hubot knows about. Take note of that number 1. Go ahead and exit out of \n+hubot and open up your `bin/hubot`.\n+\n+Add the following something like this:\n+\n+```bash\n+HUBOT_AUTH_ADMIN = \"1\"\n+exec node_modules/.bin/hubot \"$@\"\n+```\n+\n+Start up hubot again via `bin/hubot`.\n+\n+Go ahead and type the following at the hubot command line:\n+\n+```\n+Hubot> Hubot what role does shell have\n+Hubot> Shell: shell has the following roles:  and is also an admin.\n+Hubot>\n+```\n+\n+You now have a first user locally that has the admin rights. If you have a running external hubot, your unique ids from `Hubot show users` will be different, export the list with commas and\n+restart hubot.\n+\n+## Setting up the first role\n+\n+Hubot admins are the only ones that can give out roles. So after you make yourself an admin, you still need to test out giving and taking away roles.\n+Follow the following commands on your shell version of hubot and you should see the expected results:\n+\n+```\n+Hubot> Hubot what role does shell have\n+Hubot> Shell: shell has the following roles:  and is also an admin.\n+Hubot> Hubot shell has ping role\n+Hubot> Shell: Ok, shell has the 'ping' role.\n+Hubot> Hubot what role does shell have\n+Hubot> Shell: shell has the following roles: ping and is also an admin.\n+Hubot>\n+```\n+\n+As you can see `shell` is the only user that has the admin rights. Then we gave `shell` the ping role and confirmed it got that role.  Remember roles are the basis of grouping\n+specific users into groups.\n+\n+## Setting up your first script with authorization\n+\n+In order to have authorization to work, you'll need to edit some of your scripts. I'm going to start with [ping.coffee](https://github.com/github/hubot/blob/master/src/scripts/ping.coffee) in my\n+`scripts/` directory.\n+\n+Go ahead and open up your ping.coffee. It should look like the following snippet:\n+\n+```\n+module.exports = (robot) ->\n+  robot.respond /PING$/i, (msg) ->\n+    msg.send \"PONG\"\n+```\n+\n+Edit it so it looks like the following:\n+\n+```\n+module.exports = (robot) ->\n+  robot.respond /PING$/i, (msg) ->\n+    if robot.auth.hasRole(msg.envelope.user, \"ping\")\n+      msg.send \"PONG\"\n+    else\n+     msg.send \"Sorry you can't ask me to PONG\"\n+```\n+\n+This will put a check before the `hubot ping` to confirm that the person saying it is part of the \"ping\" role.  If you aren't it'll say \"Sorry you can't' ask me to PONG.\"\n+\n+This it setting up authorization in a nutshell, hopefully this'll help you out to start locking down hubot.", "changes": 90}], "656": [{"status": "removed", "deletions": 120, "raw_url": "https://github.com/hubotio/hubot/raw/44df44489de0e28d6c27d9c31832ce3c3813dfaa/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/44df44489de0e28d6c27d9c31832ce3c3813dfaa/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=44df44489de0e28d6c27d9c31832ce3c3813dfaa", "filename": "src/scripts/auth.coffee", "sha": "62e98183bf72cdc17a6941b4e2053306d6aa2935", "additions": 0, "patch": "@@ -1,120 +0,0 @@\n-# Description:\n-#   Auth allows you to assign roles to users which can be used by other scripts\n-#   to restrict access to Hubot commands\n-#\n-# Dependencies:\n-#   None\n-#\n-# Configuration:\n-#   HUBOT_AUTH_ADMIN - A comma separate list of user IDs\n-#\n-# Commands:\n-#   hubot <user> has <role> role - Assigns a role to a user\n-#   hubot <user> doesn't have <role> role - Removes a role from a user\n-#   hubot what role does <user> have - Find out what roles are assigned to a specific user\n-#   hubot who has admin role - Find out who's an admin and can assign roles\n-#\n-# Notes:\n-#   * Call the method: robot.auth.hasRole(msg.envelope.user,'<role>')\n-#   * returns bool true or false\n-#\n-#   * the 'admin' role can only be assigned through the environment variable\n-#   * roles are all transformed to lower case\n-#\n-#   * The script assumes that user IDs will be unique on the service end as to\n-#     correctly identify a user. Names were insecure as a user could impersonate\n-#     a user\n-#\n-# Author:\n-#   alexwilliamsca, tombell\n-\n-module.exports = (robot) ->\n-\n-  unless process.env.HUBOT_AUTH_ADMIN?\n-    robot.logger.warning 'The HUBOT_AUTH_ADMIN environment variable not set'\n-\n-  if process.env.HUBOT_AUTH_ADMIN?\n-    admins = process.env.HUBOT_AUTH_ADMIN.split ','\n-  else\n-    admins = []\n-\n-  class Auth\n-    hasRole: (user, roles) ->\n-      user = robot.brain.userForId(user.id)\n-      if user? and user.roles?\n-        roles = [roles] if typeof roles is 'string'\n-        for role in roles\n-          return true if role in user.roles\n-      return false\n-\n-    usersWithRole: (role) ->\n-      users = []\n-      for own key, user of robot.brain.data.users\n-        if robot.auth.hasRole(msg.envelope.user, role)\n-          users.push(user)\n-      users\n-\n-  robot.auth = new Auth\n-\n-  robot.respond /@?(.+) (has) ([\"'\\w: -_]+) (role)/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[3].trim().toLowerCase()\n-\n-    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n-      user = robot.brain.userForName(name)\n-      return msg.reply \"#{name} does not exist\" unless user?\n-      user.roles or= []\n-\n-      if newRole in user.roles\n-        msg.reply \"#{name} already has the '#{newRole}' role.\"\n-      else\n-        if newRole is 'admin'\n-          msg.reply \"Sorry, the 'admin' role can only be defined in the HUBOT_AUTH_ADMIN env variable.\"\n-        else\n-          myRoles = msg.message.user.roles or []\n-          if msg.message.user.id.toString() in admins\n-            user.roles.push(newRole)\n-            msg.reply \"Ok, #{name} has the '#{newRole}' role.\"\n-\n-  robot.respond /@?(.+) (doesn't have|does not have) ([\"'\\w: -_]+) (role)/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[3].trim().toLowerCase()\n-\n-    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n-      user = robot.brain.userForName(name)\n-      return msg.reply \"#{name} does not exist\" unless user?\n-      user.roles or= []\n-\n-      if newRole is 'admin'\n-        msg.reply \"Sorry, the 'admin' role can only be removed from the HUBOT_AUTH_ADMIN env variable.\"\n-      else\n-        myRoles = msg.message.user.roles or []\n-        if msg.message.user.id.toString() in admins\n-          user.roles = (role for role in user.roles when role isnt newRole)\n-          msg.reply \"Ok, #{name} doesn't have the '#{newRole}' role.\"\n-\n-  robot.respond /(what role does|what roles does) @?(.+) (have)\\?*$/i, (msg) ->\n-    name = msg.match[2].trim()\n-    user = robot.brain.userForName(name)\n-    return msg.reply \"#{name} does not exist\" unless user?\n-    user.roles or= []\n-    displayRoles = user.roles\n-\n-    if user.id.toString() in admins\n-      displayRoles.push('admin')\n-\n-    if displayRoles.length == 0\n-      msg.reply \"#{name} has no roles.\"\n-    else\n-      msg.reply \"#{name} has the following roles: #{displayRoles.join(', ')}.\"\n-\n-  robot.respond /who has admin role\\?*$/i, (msg) ->\n-    adminNames = []\n-    for admin in admins\n-      user = robot.brain.userForId(admin)\n-      adminNames.push user.name if user?\n-\n-    if adminNames.length > 0\n-      msg.reply \"The following people have the 'admin' role: #{adminNames.join(', ')}\"\n-    else\n-      msg.reply \"There are no people that have the 'admin' role.\"", "changes": 120}], "660": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a2082e4c312f07260d234dcd84c1d5f12f37927f/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a2082e4c312f07260d234dcd84c1d5f12f37927f/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=a2082e4c312f07260d234dcd84c1d5f12f37927f", "filename": "src/brain.coffee", "sha": "536b703cdae86186261c7fcd9e2edcdcd09ca3b0", "additions": 1, "patch": "@@ -120,7 +120,7 @@ class Brain extends EventEmitter\n     lowerName = name.toLowerCase()\n     for k of (@data.users or { })\n       userName = @data.users[k]['name']\n-      if userName? and userName.toLowerCase() is lowerName\n+      if userName? and userName.toString().toLowerCase() is lowerName\n         result = @data.users[k]\n     result\n ", "changes": 2}], "661": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/f61196e11482666a3af23c3a74a5186ec09b07db/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f61196e11482666a3af23c3a74a5186ec09b07db/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=f61196e11482666a3af23c3a74a5186ec09b07db", "filename": "src/scripts/auth.coffee", "sha": "cb724500d6646cd1f1c06b756203a1c53f9632c4", "additions": 3, "patch": "@@ -101,7 +101,7 @@ module.exports = (robot) ->\n     displayRoles = user.roles\n \n     if user.id.toString() in admins\n-      displayRoles.push('admin')\n+      displayRoles.push('admin') unless 'admin' in user.roles\n \n     if displayRoles.length == 0\n       msg.reply \"#{name} has no roles.\"\n@@ -112,7 +112,8 @@ module.exports = (robot) ->\n     adminNames = []\n     for admin in admins\n       user = robot.brain.userForId(admin)\n-      adminNames.push user.name if user?\n+      unless robot.auth.hasRole(msg.envelope.user,'admin')\n+        adminNames.push user.name if user?\n \n     if adminNames.length > 0\n       msg.reply \"The following people have the 'admin' role: #{adminNames.join(', ')}\"", "changes": 5}], "663": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/5c655d24e3198db9fd8c49724271d2df6d34df7d/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/5c655d24e3198db9fd8c49724271d2df6d34df7d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=5c655d24e3198db9fd8c49724271d2df6d34df7d", "filename": "CHANGELOG.md", "sha": "10c0273bcd4d33fa48f9d40193e1b1d87cb3da50", "additions": 5, "patch": "@@ -1,3 +1,8 @@\n+v2.7.2\n+======\n+\n+* Expose the robot adapter name as `robot.adapterName`.\n+\n v2.7.1\n ======\n ", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/5c655d24e3198db9fd8c49724271d2df6d34df7d/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/5c655d24e3198db9fd8c49724271d2df6d34df7d/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=5c655d24e3198db9fd8c49724271d2df6d34df7d", "filename": "package.json", "sha": "cd3a48c1646d6eccb18b899a14921a6928bb9df7", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.7.1\",\n+  \"version\": \"2.7.2\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/5c655d24e3198db9fd8c49724271d2df6d34df7d/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5c655d24e3198db9fd8c49724271d2df6d34df7d/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=5c655d24e3198db9fd8c49724271d2df6d34df7d", "filename": "src/robot.coffee", "sha": "6a379ef98c711f3606c3a52b3dd5f4d090831083", "additions": 1, "patch": "@@ -58,6 +58,7 @@ class Robot\n \n     @loadAdapter adapterPath, adapter\n \n+    @adapterName   = adapter\n     @errorHandlers = []\n \n     @on 'error', (err, msg) =>", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/5c655d24e3198db9fd8c49724271d2df6d34df7d/src/scripts/ping.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5c655d24e3198db9fd8c49724271d2df6d34df7d/src/scripts/ping.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/ping.coffee?ref=5c655d24e3198db9fd8c49724271d2df6d34df7d", "filename": "src/scripts/ping.coffee", "sha": "39c7188e924546b3f5bee1f81c6aaeac4b1de330", "additions": 3, "patch": "@@ -11,6 +11,9 @@ module.exports = (robot) ->\n   robot.respond /PING$/i, (msg) ->\n     msg.send \"PONG\"\n \n+  robot.respond /ADAPTER$/i, (msg) ->\n+    msg.send robot.adapterName\n+\n   robot.respond /ECHO (.*)$/i, (msg) ->\n     msg.send msg.match[1]\n ", "changes": 3}], "665": [{"status": "removed", "deletions": 121, "raw_url": "https://github.com/hubotio/hubot/raw/ede99544afacab1d693b4d80d4f1a685acdf2008/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ede99544afacab1d693b4d80d4f1a685acdf2008/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=ede99544afacab1d693b4d80d4f1a685acdf2008", "filename": "src/scripts/auth.coffee", "sha": "cb724500d6646cd1f1c06b756203a1c53f9632c4", "additions": 0, "patch": "@@ -1,121 +0,0 @@\n-# Description:\n-#   Auth allows you to assign roles to users which can be used by other scripts\n-#   to restrict access to Hubot commands\n-#\n-# Dependencies:\n-#   None\n-#\n-# Configuration:\n-#   HUBOT_AUTH_ADMIN - A comma separate list of user IDs\n-#\n-# Commands:\n-#   hubot <user> has <role> role - Assigns a role to a user\n-#   hubot <user> doesn't have <role> role - Removes a role from a user\n-#   hubot what role does <user> have - Find out what roles are assigned to a specific user\n-#   hubot who has admin role - Find out who's an admin and can assign roles\n-#\n-# Notes:\n-#   * Call the method: robot.auth.hasRole(msg.envelope.user,'<role>')\n-#   * returns bool true or false\n-#\n-#   * the 'admin' role can only be assigned through the environment variable\n-#   * roles are all transformed to lower case\n-#\n-#   * The script assumes that user IDs will be unique on the service end as to\n-#     correctly identify a user. Names were insecure as a user could impersonate\n-#     a user\n-#\n-# Author:\n-#   alexwilliamsca, tombell\n-\n-module.exports = (robot) ->\n-\n-  unless process.env.HUBOT_AUTH_ADMIN?\n-    robot.logger.warning 'The HUBOT_AUTH_ADMIN environment variable not set'\n-\n-  if process.env.HUBOT_AUTH_ADMIN?\n-    admins = process.env.HUBOT_AUTH_ADMIN.split ','\n-  else\n-    admins = []\n-\n-  class Auth\n-    hasRole: (user, roles) ->\n-      user = robot.brain.userForId(user.id)\n-      if user? and user.roles?\n-        roles = [roles] if typeof roles is 'string'\n-        for role in roles\n-          return true if role in user.roles\n-      return false\n-\n-    usersWithRole: (role) ->\n-      users = []\n-      for own key, user of robot.brain.data.users\n-        if robot.auth.hasRole(msg.envelope.user, role)\n-          users.push(user)\n-      users\n-\n-  robot.auth = new Auth\n-\n-  robot.respond /@?(.+) (has) ([\"'\\w: -_]+) (role)/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[3].trim().toLowerCase()\n-\n-    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n-      user = robot.brain.userForName(name)\n-      return msg.reply \"#{name} does not exist\" unless user?\n-      user.roles or= []\n-\n-      if newRole in user.roles\n-        msg.reply \"#{name} already has the '#{newRole}' role.\"\n-      else\n-        if newRole is 'admin'\n-          msg.reply \"Sorry, the 'admin' role can only be defined in the HUBOT_AUTH_ADMIN env variable.\"\n-        else\n-          myRoles = msg.message.user.roles or []\n-          if msg.message.user.id.toString() in admins\n-            user.roles.push(newRole)\n-            msg.reply \"Ok, #{name} has the '#{newRole}' role.\"\n-\n-  robot.respond /@?(.+) (doesn't have|does not have) ([\"'\\w: -_]+) (role)/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[3].trim().toLowerCase()\n-\n-    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n-      user = robot.brain.userForName(name)\n-      return msg.reply \"#{name} does not exist\" unless user?\n-      user.roles or= []\n-\n-      if newRole is 'admin'\n-        msg.reply \"Sorry, the 'admin' role can only be removed from the HUBOT_AUTH_ADMIN env variable.\"\n-      else\n-        myRoles = msg.message.user.roles or []\n-        if msg.message.user.id.toString() in admins\n-          user.roles = (role for role in user.roles when role isnt newRole)\n-          msg.reply \"Ok, #{name} doesn't have the '#{newRole}' role.\"\n-\n-  robot.respond /(what role does|what roles does) @?(.+) (have)\\?*$/i, (msg) ->\n-    name = msg.match[2].trim()\n-    user = robot.brain.userForName(name)\n-    return msg.reply \"#{name} does not exist\" unless user?\n-    user.roles or= []\n-    displayRoles = user.roles\n-\n-    if user.id.toString() in admins\n-      displayRoles.push('admin') unless 'admin' in user.roles\n-\n-    if displayRoles.length == 0\n-      msg.reply \"#{name} has no roles.\"\n-    else\n-      msg.reply \"#{name} has the following roles: #{displayRoles.join(', ')}.\"\n-\n-  robot.respond /who has admin role\\?*$/i, (msg) ->\n-    adminNames = []\n-    for admin in admins\n-      user = robot.brain.userForId(admin)\n-      unless robot.auth.hasRole(msg.envelope.user,'admin')\n-        adminNames.push user.name if user?\n-\n-    if adminNames.length > 0\n-      msg.reply \"The following people have the 'admin' role: #{adminNames.join(', ')}\"\n-    else\n-      msg.reply \"There are no people that have the 'admin' role.\"", "changes": 121}], "667": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/00376e34e1f701dfea8b29b1d10ace0cba7fe959/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/00376e34e1f701dfea8b29b1d10ace0cba7fe959/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=00376e34e1f701dfea8b29b1d10ace0cba7fe959", "filename": "src/robot.coffee", "sha": "be066d722ce3e2e971c7859b61d89e860a43acb8", "additions": 1, "patch": "@@ -211,7 +211,7 @@ class Robot\n   loadFile: (path, file) ->\n     ext  = Path.extname file\n     full = Path.join path, Path.basename(file, ext)\n-    if ext is '.coffee' or ext is '.js'\n+    if require.extensions[ext]\n       try\n         require(full) @\n         @parseHelp Path.join(path, file)", "changes": 2}], "670": [{"status": "modified", "deletions": 11, "raw_url": "https://github.com/hubotio/hubot/raw/243aa0a699b72917f56ad0bb60459672d59c1d41/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/243aa0a699b72917f56ad0bb60459672d59c1d41/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=243aa0a699b72917f56ad0bb60459672d59c1d41", "filename": "src/brain.coffee", "sha": "d546999c4046bb49c2ce8d78d12850122f3b7d75", "additions": 5, "patch": "@@ -100,17 +100,11 @@ class Brain extends EventEmitter\n   # Public: Get a User object given a unique identifier.\n   #\n   # Returns a User instance of the specified user.\n-  userForId: (id, options) ->\n-    user = @data.users[id]\n-    unless user\n-      user = new User id, options\n-      @data.users[id] = user\n-\n-    if options and options.room and (!user.room or user.room isnt options.room)\n-      user = new User id, options\n-      @data.users[id] = user\n-\n-    user\n+  # If a second argument is passed the used is updated with any attributes contained in that object\n+  userForId: (id, new_attribs) ->\n+    return @data.users[id] unless new_attribs? # If no new attribs just return the existing user\n+    options = extend {}, (@data.users[id] or {}), (new_attribs or {})\n+    @data.users[id] = new User id, options\n \n   # Public: Get a User object given a name.\n   #", "changes": 16}], "671": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/568e108413ddc6b9b010bb97affae357ea6cdee2/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/568e108413ddc6b9b010bb97affae357ea6cdee2/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=568e108413ddc6b9b010bb97affae357ea6cdee2", "filename": "docs/adapters.md", "sha": "46ee2a51302e2a47b84e64e7c15175babd16f0e9", "additions": 1, "patch": "@@ -32,6 +32,7 @@ to have yours added to the list:\n * [ChatWork](https://github.com/akiomik/hubot-chatwork)\n * [QQ](https://github.com/xhan/qqbot)\n * [AIM](https://github.com/shaundubuque/hubot-aim)\n+* [Slack](https://github.com/tinyspeck/hubot-slack)\n \n ## Writing Your Own adapter\n ", "changes": 1}], "672": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fdf8d9fe4037c8eef30bf34122f9e7b26433f89e/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fdf8d9fe4037c8eef30bf34122f9e7b26433f89e/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=fdf8d9fe4037c8eef30bf34122f9e7b26433f89e", "filename": "src/robot.coffee", "sha": "4d513293a888c1e094a7c595434bdd18061ede4e", "additions": 1, "patch": "@@ -254,6 +254,7 @@ class Robot\n       if packages instanceof Array\n         for pkg in packages\n           require(pkg)(@)\n+          @parseHelp pkg if Fs.existsSync pkg\n       else\n         for pkg, scripts of packages\n           require(pkg)(@, scripts)", "changes": 1}], "674": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/672a1f56ca1176db929865d9c46d8c34a894d1f1/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/672a1f56ca1176db929865d9c46d8c34a894d1f1/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=672a1f56ca1176db929865d9c46d8c34a894d1f1", "filename": "docs/adapters.md", "sha": "331d4948facedd1d750cc4c08bd258443ccfd9dc", "additions": 1, "patch": "@@ -33,6 +33,7 @@ to have yours added to the list:\n * [QQ](https://github.com/xhan/qqbot)\n * [AIM](https://github.com/shaundubuque/hubot-aim)\n * [Slack](https://github.com/tinyspeck/hubot-slack)\n+* [Lingr](https://github.com/miyagawa/hubot-lingr)\n \n ## Writing Your Own adapter\n ", "changes": 1}], "676": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/0e9ea04dfc44377adb44972e0d6dbd3da680c7c3/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0e9ea04dfc44377adb44972e0d6dbd3da680c7c3/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=0e9ea04dfc44377adb44972e0d6dbd3da680c7c3", "filename": "src/robot.coffee", "sha": "ea4d760450fca5ffe0e1b25da861fd389d02234b", "additions": 8, "patch": "@@ -63,8 +63,7 @@ class Robot\n \n     @on 'error', (err, msg) =>\n       @invokeErrorHandlers(err, msg)\n-    process.on 'uncaughtException', (err) =>\n-      @emit 'error', err\n+    process.on 'uncaughtException', @emitError\n \n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n@@ -336,6 +335,12 @@ class Robot\n   helpCommands: ->\n     @commands.sort()\n \n+  # Private: reference function used to emit an error\n+  #\n+  # Returns nothing.\n+  emitError: (err) =>\n+    @emit 'error', err\n+\n   # Private: load help info from a loaded script.\n   #\n   # path - A String path to the file on disk.\n@@ -441,6 +446,7 @@ class Robot\n   # Returns nothing.\n   shutdown: ->\n     clearInterval @pingIntervalId if @pingIntervalId?\n+    process.removeListener 'uncaughtException', @emitError\n     @adapter.close()\n     @brain.close()\n ", "changes": 10}], "677": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/672a1f56ca1176db929865d9c46d8c34a894d1f1/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/672a1f56ca1176db929865d9c46d8c34a894d1f1/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=672a1f56ca1176db929865d9c46d8c34a894d1f1", "filename": "docs/adapters.md", "sha": "331d4948facedd1d750cc4c08bd258443ccfd9dc", "additions": 1, "patch": "@@ -33,6 +33,7 @@ to have yours added to the list:\n * [QQ](https://github.com/xhan/qqbot)\n * [AIM](https://github.com/shaundubuque/hubot-aim)\n * [Slack](https://github.com/tinyspeck/hubot-slack)\n+* [Lingr](https://github.com/miyagawa/hubot-lingr)\n \n ## Writing Your Own adapter\n ", "changes": 1}], "678": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/81bb18bdd4b60b418e936c0aac1ec521403ed413/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/81bb18bdd4b60b418e936c0aac1ec521403ed413/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=81bb18bdd4b60b418e936c0aac1ec521403ed413", "filename": "docs/patterns.md", "sha": "73102f8e57b46c50728efb59c879de82d9576db8", "additions": 32, "patch": "@@ -61,3 +61,35 @@ module.exports = (robot) ->\n     return\n \n ```\n+\n+## Preventing Hubot from Running Scripts Concurrently\n+\n+Sometimes you have scripts that take several minutes to execute.  If these scripts are doing something that could be interfered\n+with by running subsequent commands, you may wish to code your scripts to prevent concurrent access.\n+\n+To do this, you can set up a lock in the Hubot [brain](scripting.md#persistence) object.  The lock is set up here so that different scripts\n+can share the same lock if necessary.\n+\n+Setting up the lock looks something like this:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.brain.on 'loaded', ->\n+    # Clear the lock on startup in case Hubot has restarted and Hubot's brain has persistence (e.g. redis).\n+    # We don't want any orphaned locks preventing us from running commands.\n+    robot.brain.remove('yourLockName')\n+\n+  robot.respond /longrunningthing/i, (msg) ->\n+    lock = robot.brain.get('yourLockName')\n+\n+    if lock?\n+      msg.send \"I'm sorry, #{msg.message.user.name}, I'm afraid I can't do that. I'm busy doing something for #{lock.user.name}.\"\n+      return\n+\n+    robot.brain.set('yourLockName', msg.message)  # includes user, room, etc about who locked\n+\n+    yourLongClobberingAsyncThing (err, response) ->\n+      # Clear the lock\n+      robot.brain.remove('yourLockName')\n+      msg.reply \"Finally Done\"\n+```", "changes": 32}], "684": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/bef2e3add7d445ba1e4e0e02b8682cedd28a8188/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/bef2e3add7d445ba1e4e0e02b8682cedd28a8188/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=bef2e3add7d445ba1e4e0e02b8682cedd28a8188", "filename": "docs/README.md", "sha": "d7e8f63d0fd51dab12a2287efb7643070c365626", "additions": 5, "patch": "@@ -5,7 +5,11 @@\n You will need [node.js](http://nodejs.org/) and [npm](https://npmjs.org/). Joyent has\n an [excellent blog post on how to get those installed](http://joyent.com/blog/installing-node-and-npm), so we'll omit those details here.\n \n-Once node and npm are ready, we can install hubot and coffeescript:\n+You will also need [Redis](http://redis.io/download) for hubots brain. After the installation start Redis server:  \n+\n+    redis-server\n+\n+Once node, npm and redis are ready, we can install hubot and coffeescript:\n \n     % npm install -g hubot coffee-script\n ", "changes": 6}], "685": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/631d6bcc6e3822277487ae950ebc28fbef969343/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/631d6bcc6e3822277487ae950ebc28fbef969343/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=631d6bcc6e3822277487ae950ebc28fbef969343", "filename": "src/adapters/campfire.coffee", "sha": "a34cb8f6dc372a85c77d22caa63c9131422e4864", "additions": 8, "patch": "@@ -1,9 +1,14 @@\n HTTPS          = require 'https'\n {EventEmitter} = require 'events'\n \n-Robot                                                = require '../robot'\n-Adapter                                              = require '../adapter'\n-{TextMessage,EnterMessage,LeaveMessage,TopicMessage} = require '../message'\n+Robot          = require '../robot'\n+Adapter        = require '../adapter'\n+{\n+  TextMessage\n+  EnterMessage\n+  LeaveMessage\n+  TopicMessage\n+}              = require '../message'\n \n class Campfire extends Adapter\n   send: (envelope, strings...) ->", "changes": 11}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/631d6bcc6e3822277487ae950ebc28fbef969343/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/631d6bcc6e3822277487ae950ebc28fbef969343/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=631d6bcc6e3822277487ae950ebc28fbef969343", "filename": "src/creator.coffee", "sha": "d0f86bb979ebcfc2ad8b9b077a0049455649794e", "additions": 1, "patch": "@@ -6,8 +6,7 @@ class Creator\n   # Setup a ready to go version of hubot\n   #\n   # path - A String directory to create/upgrade scripts for\n-  constructor: (path) ->\n-    @path = path\n+  constructor: (@path) ->\n     @templateDir = \"#{__dirname}/templates\"\n     @scriptsDir  = \"#{__dirname}/scripts\"\n ", "changes": 3}, {"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/631d6bcc6e3822277487ae950ebc28fbef969343/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/631d6bcc6e3822277487ae950ebc28fbef969343/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=631d6bcc6e3822277487ae950ebc28fbef969343", "filename": "src/robot.coffee", "sha": "d7d17b13ff836f8beac52ccdfa6c1ed8c82caffa", "additions": 21, "patch": "@@ -4,11 +4,19 @@ Path           = require 'path'\n HttpClient     = require 'scoped-http-client'\n {EventEmitter} = require 'events'\n \n-User = require './user'\n-Brain = require './brain'\n-Response = require './response'\n-{Listener,TextListener} = require './listener'\n-{EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n+User           = require './user'\n+Brain          = require './brain'\n+Response       = require './response'\n+{\n+  Listener\n+  TextListener\n+}              = require './listener'\n+{\n+  EnterMessage\n+  LeaveMessage\n+  TopicMessage\n+  CatchAllMessage\n+}              = require './message'\n \n HUBOT_DEFAULT_ADAPTERS = [\n   'campfire'\n@@ -33,13 +41,12 @@ class Robot\n   # dispatch them to matching listeners.\n   #\n   # adapterPath - A String of the path to local adapters.\n-  # adapter     - A String of the adapter name.\n+  # adapterName - A String of the adapter name.\n   # httpd       - A Boolean whether to enable the HTTP daemon.\n   # name        - A String of the robot name, defaults to Hubot.\n   #\n   # Returns nothing.\n-  constructor: (adapterPath, adapter, httpd, name = 'Hubot') ->\n-    @name      = name\n+  constructor: (adapterPath, @adapterName, httpd, @name = 'Hubot') ->\n     @events    = new EventEmitter\n     @brain     = new Brain @\n     @alias     = false\n@@ -56,9 +63,8 @@ class Robot\n       @setupNullRouter()\n     @pingIntervalId = null\n \n-    @loadAdapter adapterPath, adapter\n+    @loadAdapter adapterPath, adapterName\n \n-    @adapterName   = adapter\n     @errorHandlers = []\n \n     @on 'error', (err, msg) =>\n@@ -96,10 +102,13 @@ class Robot\n       @logger.warning \"The regex in question was #{regex.toString()}\"\n \n     pattern = re.join('/')\n-    name = @name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+    escapeRegExp = (str) ->\n+      str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+\n+    name = escapeRegExp @name\n \n     if @alias\n-      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+      alias = escapeRegExp @alias\n       newRegex = new RegExp(\n         \"^[@]?(?:#{alias}[:,]?|#{name}[:,]?)\\\\s*(?:#{pattern})\"\n         modifiers", "changes": 33}], "686": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f9d296190525b65d4d28e6a213a9bd8a80f6771e/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/f9d296190525b65d4d28e6a213a9bd8a80f6771e/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=f9d296190525b65d4d28e6a213a9bd8a80f6771e", "filename": "package.json", "sha": "c546e0dd73c923bd37ac0577be9be6f6c9a2a825", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.7.3\",\n+  \"version\": \"2.7.4\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}, {"status": "modified", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/f9d296190525b65d4d28e6a213a9bd8a80f6771e/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f9d296190525b65d4d28e6a213a9bd8a80f6771e/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=f9d296190525b65d4d28e6a213a9bd8a80f6771e", "filename": "src/robot.coffee", "sha": "b01bed63ff549f0f7ad93dc4db758a8636f496c6", "additions": 31, "patch": "@@ -28,6 +28,8 @@ HUBOT_DOCUMENTATION_SECTIONS = [\n   'urls'\n ]\n \n+LISTENER_CURSOR = 0\n+\n class Robot\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n   # dispatch them to matching listeners.\n@@ -46,7 +48,7 @@ class Robot\n     @adapter   = null\n     @Response  = Response\n     @commands  = []\n-    @listeners = []\n+    @listeners = {}\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n \n     @parseVersion()\n@@ -67,15 +69,29 @@ class Robot\n       @emit 'error', err\n \n \n+  # Private: Adds a Listener to the robot's internal list of listeners\n+  #\n+  # listener  - The Listener to add\n+  #\n+  # Returns a handle to the Listener to permit the stopping and restarting of the Listener\n+  _addListener: (listener) ->\n+    key = LISTENER_CURSOR++\n+    @listeners[key] = listener\n+    stop: =>\n+      delete @listeners[key]\n+    restart: =>\n+      @listeners[key] = listener\n+\n+\n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n   #\n   # regex    - A Regex that determines if the callback should be called.\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   hear: (regex, callback) ->\n-    @listeners.push new TextListener(@, regex, callback)\n+    @_addListener new TextListener(@, regex, callback)\n \n   # Public: Adds a Listener that attempts to match incoming messages directed\n   # at the robot based on a Regex. All regexes treat patterns like they begin\n@@ -84,7 +100,7 @@ class Robot\n   # regex    - A Regex that determines if the callback should be called.\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   respond: (regex, callback) ->\n     re = regex.toString().split('/')\n     re.shift()\n@@ -110,15 +126,15 @@ class Robot\n         modifiers\n       )\n \n-    @listeners.push new TextListener(@, newRegex, callback)\n+    @_addListener new TextListener(@, newRegex, callback)\n \n   # Public: Adds a Listener that triggers when anyone enters the room.\n   #\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   enter: (callback) ->\n-    @listeners.push new Listener(\n+    @_addListener new Listener(\n       @,\n       ((msg) -> msg instanceof EnterMessage),\n       callback\n@@ -128,9 +144,9 @@ class Robot\n   #\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   leave: (callback) ->\n-    @listeners.push new Listener(\n+    @_addListener new Listener(\n       @,\n       ((msg) -> msg instanceof LeaveMessage),\n       callback\n@@ -140,9 +156,9 @@ class Robot\n   #\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   topic: (callback) ->\n-    @listeners.push new Listener(\n+    @_addListener new Listener(\n       @,\n       ((msg) -> msg instanceof TopicMessage),\n       callback\n@@ -175,9 +191,9 @@ class Robot\n   #\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   catchAll: (callback) ->\n-    @listeners.push new Listener(\n+    @_addListener new Listener(\n       @,\n       ((msg) -> msg instanceof CatchAllMessage),\n       ((msg) -> msg.message = msg.message.message; callback msg)\n@@ -191,7 +207,8 @@ class Robot\n   # Returns nothing.\n   receive: (message) ->\n     results = []\n-    for listener in @listeners\n+    for key in (keys for keys of @listeners).sort()\n+      listener = @listeners[key]\n       try\n         results.push listener.call(message)\n         break if message.done", "changes": 45}], "687": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/49b3e22f716671d5194c65693d992c4b8628ed6d/.gitignore", "blob_url": "https://github.com/hubotio/hubot/blob/49b3e22f716671d5194c65693d992c4b8628ed6d/.gitignore", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.gitignore?ref=49b3e22f716671d5194c65693d992c4b8628ed6d", "filename": ".gitignore", "sha": "bcf4376c492ca82fdc0a0e4751fedb40824b1904", "additions": 4, "patch": "@@ -1 +1,5 @@\n node_modules\n+\n+# WebStorm files\n+/.idea\n+atlassian-ide-plugin.xml", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/49b3e22f716671d5194c65693d992c4b8628ed6d/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/49b3e22f716671d5194c65693d992c4b8628ed6d/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=49b3e22f716671d5194c65693d992c4b8628ed6d", "filename": "package.json", "sha": "c546e0dd73c923bd37ac0577be9be6f6c9a2a825", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.7.3\",\n+  \"version\": \"2.7.4\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}, {"status": "modified", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/49b3e22f716671d5194c65693d992c4b8628ed6d/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/49b3e22f716671d5194c65693d992c4b8628ed6d/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=49b3e22f716671d5194c65693d992c4b8628ed6d", "filename": "src/robot.coffee", "sha": "b01bed63ff549f0f7ad93dc4db758a8636f496c6", "additions": 31, "patch": "@@ -28,6 +28,8 @@ HUBOT_DOCUMENTATION_SECTIONS = [\n   'urls'\n ]\n \n+LISTENER_CURSOR = 0\n+\n class Robot\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n   # dispatch them to matching listeners.\n@@ -46,7 +48,7 @@ class Robot\n     @adapter   = null\n     @Response  = Response\n     @commands  = []\n-    @listeners = []\n+    @listeners = {}\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n \n     @parseVersion()\n@@ -67,15 +69,29 @@ class Robot\n       @emit 'error', err\n \n \n+  # Private: Adds a Listener to the robot's internal list of listeners\n+  #\n+  # listener  - The Listener to add\n+  #\n+  # Returns a handle to the Listener to permit the stopping and restarting of the Listener\n+  _addListener: (listener) ->\n+    key = LISTENER_CURSOR++\n+    @listeners[key] = listener\n+    stop: =>\n+      delete @listeners[key]\n+    restart: =>\n+      @listeners[key] = listener\n+\n+\n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n   #\n   # regex    - A Regex that determines if the callback should be called.\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   hear: (regex, callback) ->\n-    @listeners.push new TextListener(@, regex, callback)\n+    @_addListener new TextListener(@, regex, callback)\n \n   # Public: Adds a Listener that attempts to match incoming messages directed\n   # at the robot based on a Regex. All regexes treat patterns like they begin\n@@ -84,7 +100,7 @@ class Robot\n   # regex    - A Regex that determines if the callback should be called.\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   respond: (regex, callback) ->\n     re = regex.toString().split('/')\n     re.shift()\n@@ -110,15 +126,15 @@ class Robot\n         modifiers\n       )\n \n-    @listeners.push new TextListener(@, newRegex, callback)\n+    @_addListener new TextListener(@, newRegex, callback)\n \n   # Public: Adds a Listener that triggers when anyone enters the room.\n   #\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   enter: (callback) ->\n-    @listeners.push new Listener(\n+    @_addListener new Listener(\n       @,\n       ((msg) -> msg instanceof EnterMessage),\n       callback\n@@ -128,9 +144,9 @@ class Robot\n   #\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   leave: (callback) ->\n-    @listeners.push new Listener(\n+    @_addListener new Listener(\n       @,\n       ((msg) -> msg instanceof LeaveMessage),\n       callback\n@@ -140,9 +156,9 @@ class Robot\n   #\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   topic: (callback) ->\n-    @listeners.push new Listener(\n+    @_addListener new Listener(\n       @,\n       ((msg) -> msg instanceof TopicMessage),\n       callback\n@@ -175,9 +191,9 @@ class Robot\n   #\n   # callback - A Function that is called with a Response object.\n   #\n-  # Returns nothing.\n+  # Returns a handle to the Listener\n   catchAll: (callback) ->\n-    @listeners.push new Listener(\n+    @_addListener new Listener(\n       @,\n       ((msg) -> msg instanceof CatchAllMessage),\n       ((msg) -> msg.message = msg.message.message; callback msg)\n@@ -191,7 +207,8 @@ class Robot\n   # Returns nothing.\n   receive: (message) ->\n     results = []\n-    for listener in @listeners\n+    for key in (keys for keys of @listeners).sort()\n+      listener = @listeners[key]\n       try\n         results.push listener.call(message)\n         break if message.done", "changes": 45}], "688": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/5cf67f1a8583c9fcdf34df65815e76a2a6ae3305/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5cf67f1a8583c9fcdf34df65815e76a2a6ae3305/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=5cf67f1a8583c9fcdf34df65815e76a2a6ae3305", "filename": "src/robot.coffee", "sha": "82aca09c31cafb340a3dc2836ddcb1cbe9f2d7ed", "additions": 1, "patch": "@@ -294,7 +294,7 @@ class Robot\n     if herokuUrl\n       herokuUrl += '/' unless /\\/$/.test herokuUrl\n       @pingIntervalId = setInterval =>\n-        HttpClient.create(\"#{herokuUrl}hubot/ping\").post() (err, res, body) =>\n+        HttpClient.create(\"#{herokuUrl}#{@name}/ping\").post() (err, res, body) =>\n           @logger.info 'keep alive ping!'\n       , 1200000\n ", "changes": 2}], "689": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/c4e6e835b5aa87df3a8c8f1eaed11d2e1b944e2a/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/c4e6e835b5aa87df3a8c8f1eaed11d2e1b944e2a/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=c4e6e835b5aa87df3a8c8f1eaed11d2e1b944e2a", "filename": "docs/deploying/heroku.md", "sha": "276d850da533d4083d9d389c61826f26a693b3c2", "additions": 3, "patch": "@@ -65,7 +65,7 @@ before:\n \n     % git commit -am \"Awesome scripts OMG\"\n     % git push heroku master\n-    \n-Some scripts needs Redis to work, Heroku offers an addon called [RedisToGo](https://addons.heroku.com/RedisToGo), which has a free nano plan. To use it:\n \n-    % heroku addons:add redistogo:nano\n+Some scripts needs Redis to work, Heroku offers an addon called [Redis Cloud](https://addons.heroku.com/rediscloud), which has a free plan. To use it:\n+\n+    % heroku addons:add rediscloud", "changes": 6}], "690": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/20f4d504cd3020ee216c50d823ca533fe7663329/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/20f4d504cd3020ee216c50d823ca533fe7663329/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=20f4d504cd3020ee216c50d823ca533fe7663329", "filename": "src/robot.coffee", "sha": "b922919db71e86f4726f6dd1eae439e321f724c8", "additions": 1, "patch": "@@ -440,6 +440,7 @@ class Robot\n   #\n   # Returns nothing.\n   shutdown: ->\n+    @emit \"stopping\"\n     clearInterval @pingIntervalId if @pingIntervalId?\n     @adapter.close()\n     @brain.close()", "changes": 1}], "693": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0374a444ae96977f956fb32648b81341214bedb4/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0374a444ae96977f956fb32648b81341214bedb4/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=0374a444ae96977f956fb32648b81341214bedb4", "filename": "src/scripts/auth.coffee", "sha": "d0e0e1a966929bebb2c1bd8ee2ae21148635aedb", "additions": 2, "patch": "@@ -117,5 +117,7 @@ module.exports = (robot) ->\n \n     if adminNames.length > 0\n       msg.reply \"The following people have the 'admin' role: #{adminNames.join(', ')}\"\n+    else if robot.auth.hasRole(msg.envelope.user,'admin')\n+      msg.reply \"Looks like you're the only admin!\"\n     else\n       msg.reply \"There are no people that have the 'admin' role.\"", "changes": 2}], "695": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/9c62971188c72f6bf42ac900ce496fa0bb8baead/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/9c62971188c72f6bf42ac900ce496fa0bb8baead/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=9c62971188c72f6bf42ac900ce496fa0bb8baead", "filename": "docs/scripting.md", "sha": "0273db40fb4da157c82f2123580dd290444d5326", "additions": 4, "patch": "@@ -410,11 +410,13 @@ The most common use of this is for providing HTTP end points for services with w\n ```coffeescript\n module.exports = (robot) ->\n   robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n-    room = req.params.room\n-    data = JSON.parse req.body.payload\n+    room   = req.params.room\n+    data   = JSON.parse req.body.payload\n     secret = data.secret\n \n     robot.messageRoom room, \"I have a secret: #{secret}\"\n+\n+    res.send 'OK'\n ```\n \n ## Events", "changes": 6}], "696": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/18d38888363f3f4b2112f5e6e864cebc593f01d8/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/18d38888363f3f4b2112f5e6e864cebc593f01d8/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=18d38888363f3f4b2112f5e6e864cebc593f01d8", "filename": "src/message.coffee", "sha": "1b73ffc855e6b00275c4e1ea83042cd717268408", "additions": 6, "patch": "@@ -27,6 +27,12 @@ class TextMessage extends Message\n   # Returns a Match object or null.\n   match: (regex) ->\n     @text.match regex\n+  \n+  # String representation of a TextMessage\n+  #\n+  # Returns the message text\n+  toString: () ->\n+    @text\n \n # Represents an incoming user entrance notification.\n #", "changes": 6}], "697": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/eaa8ef13d3a79746eb0dc30e62e2b080f58a4751/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/eaa8ef13d3a79746eb0dc30e62e2b080f58a4751/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=eaa8ef13d3a79746eb0dc30e62e2b080f58a4751", "filename": "docs/README.md", "sha": "90cf38dd473696a4d50f1779f692f5d4ad0c4087", "additions": 3, "patch": "@@ -92,6 +92,9 @@ In addition, there are scripts released as npm packages. If you find one you wan\n 1. Add the package to the list of `dependencies` into your `package.json`\n 2. `npm install` to make sure its installed\n \n+To enable third-party scripts that you've added you will need to add the package\n+name as a double quoted string to the `external-scripts.json` file in this repo.\n+\n **Please note that external scripts may become the default for hubot scripts in future releases.**\n \n ## Adapters", "changes": 3}], "698": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e20054ece634956e35221f18b4cbb2eedc35f928/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e20054ece634956e35221f18b4cbb2eedc35f928/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=e20054ece634956e35221f18b4cbb2eedc35f928", "filename": "src/adapters/campfire.coffee", "sha": "81d2de5f74904dc08e77656ac13aa427c7089199", "additions": 3, "patch": "@@ -177,6 +177,9 @@ class CampfireStreaming extends EventEmitter\n       body = { message: { \"body\":text, \"type\":type } }\n       self.post \"/room/#{id}/speak\", body, callback\n \n+    recentMessages: (limit, callback) ->\n+      self.get \"/room/#{id}/recent?limit=#{limit}\", callback\n+\n     # listen for activity in channels\n     listen: ->\n       headers =", "changes": 3}], "699": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a92d55a2b80eb942bdd3d289234d26cd0c486ece/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a92d55a2b80eb942bdd3d289234d26cd0c486ece/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=a92d55a2b80eb942bdd3d289234d26cd0c486ece", "filename": "src/adapters/campfire.coffee", "sha": "30c21efdd25d1631b0b2eef952b2b4bd8c5d995c", "additions": 2, "patch": "@@ -182,6 +182,7 @@ class CampfireStreaming extends EventEmitter\n       headers =\n         \"Host\"          : \"streaming.campfirenow.com\"\n         \"Authorization\" : self.authorization\n+        \"User-Agent\"    : \"Hubot/#{@robot.version} (#{@robot.name})\"\n \n       options =\n         \"agent\"  : false\n@@ -256,6 +257,7 @@ class CampfireStreaming extends EventEmitter\n       \"Authorization\" : @authorization\n       \"Host\"          : @host\n       \"Content-Type\"  : \"application/json\"\n+      \"User-Agent\"    : \"Hubot/#{@robot.version} (#{@robot.name})\"\n \n     options =\n       \"agent\"  : false", "changes": 2}], "700": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/7affc739c5809bb765e525b1584b41be5f80c7e5/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/7affc739c5809bb765e525b1584b41be5f80c7e5/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=7affc739c5809bb765e525b1584b41be5f80c7e5", "filename": "src/adapters/campfire.coffee", "sha": "f85da8a3ac55bcb5a04251c086cd49daab57fd21", "additions": 16, "patch": "@@ -56,6 +56,10 @@ class Campfire extends Adapter\n     withAuthor = (callback) ->\n       (id, created, room, user, body) ->\n         bot.User user, (err, userData) ->\n+          if err?\n+            @robot.emit 'error', err\n+            @robot.logger.error \"Campfire data error: #{error}\\n#{error.stack}\"\n+            return\n           if userData.user\n             author = self.robot.brain.userForId(userData.user.id, userData.user)\n             userId = userData.user.id\n@@ -97,12 +101,21 @@ class Campfire extends Adapter\n         bot.private[room] = false\n \n     bot.Me (err, data) ->\n+      if err?\n+        @robot.emit 'error', err\n+        @robot.logger.error \"Campfire data error: #{err}\\n#{err.stack}\"\n+        return\n+\n       bot.info = data.user\n       bot.name = bot.info.name\n \n       for roomId in bot.rooms\n         do (roomId) ->\n           bot.Room(roomId).join (err, callback) ->\n+            if err?\n+              @robot.emit 'error', err\n+              @robot.logger.error \"Campfire data error: #{err}\\n#{err.stack}\"\n+              return\n             bot.Room(roomId).listen()\n \n     bot.on \"reconnect\", (roomId) ->\n@@ -225,6 +238,7 @@ class CampfireStreaming extends EventEmitter\n                     data.body\n                   )\n                 catch error\n+                  @robot.emit 'error', error\n                   logger.error \"Campfire data error: #{error}\\n#{error.stack}\"\n \n         response.on \"end\", ->\n@@ -234,9 +248,11 @@ class CampfireStreaming extends EventEmitter\n           , 5000\n \n         response.on \"error\", (err) ->\n+          @robot.emit 'error', err\n           logger.error \"Campfire listen response error: #{err}\"\n \n       request.on \"error\", (err) ->\n+        @robot.emit 'error', err\n         logger.error \"Campfire listen request error: #{err}\"\n \n       request.end()", "changes": 16}], "701": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/df9573bccf2a2b6a3543d5c7ab1ffe4362286248/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/df9573bccf2a2b6a3543d5c7ab1ffe4362286248/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=df9573bccf2a2b6a3543d5c7ab1ffe4362286248", "filename": "CHANGELOG.md", "sha": "5f20ccc0298b9afcf9358c2413e546fe9ec5f8d7", "additions": 5, "patch": "@@ -1,3 +1,8 @@\n+v2.7.4\n+======\n+\n+* Update Campfire adapter to specify a User-Agent\n+\n v2.7.3\n ======\n ", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/df9573bccf2a2b6a3543d5c7ab1ffe4362286248/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/df9573bccf2a2b6a3543d5c7ab1ffe4362286248/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=df9573bccf2a2b6a3543d5c7ab1ffe4362286248", "filename": "package.json", "sha": "c546e0dd73c923bd37ac0577be9be6f6c9a2a825", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.7.3\",\n+  \"version\": \"2.7.4\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}], "702": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/aff09bf250b281b0c4b878aae1d03e85cfe8717c/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/aff09bf250b281b0c4b878aae1d03e85cfe8717c/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=aff09bf250b281b0c4b878aae1d03e85cfe8717c", "filename": "src/adapters/campfire.coffee", "sha": "98ee227d17ef21fe8a299f796547c5e415038b3b", "additions": 2, "patch": "@@ -182,7 +182,7 @@ class CampfireStreaming extends EventEmitter\n       headers =\n         \"Host\"          : \"streaming.campfirenow.com\"\n         \"Authorization\" : self.authorization\n-        \"User-Agent\"    : \"Hubot/#{@robot.version} (#{@robot.name})\"\n+        \"User-Agent\"    : \"Hubot/#{@robot?.version} (#{@robot?.name})\"\n \n       options =\n         \"agent\"  : false\n@@ -257,7 +257,7 @@ class CampfireStreaming extends EventEmitter\n       \"Authorization\" : @authorization\n       \"Host\"          : @host\n       \"Content-Type\"  : \"application/json\"\n-      \"User-Agent\"    : \"Hubot/#{@robot.version} (#{@robot.name})\"\n+      \"User-Agent\"    : \"Hubot/#{@robot?.version} (#{@robot?.name})\"\n \n     options =\n       \"agent\"  : false", "changes": 4}], "703": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/407ca4b76ffa282f5dbcadc1218e87bf371e6f58/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/407ca4b76ffa282f5dbcadc1218e87bf371e6f58/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=407ca4b76ffa282f5dbcadc1218e87bf371e6f58", "filename": "CHANGELOG.md", "sha": "4be4f9185469691645a097779461013500ddc74c", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n-v2.7.4\n+v2.7.5\n ======\n \n * Fix Campfire adapter to specify a User-Agent", "changes": 2}], "708": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/149980a29f7ac5e69e6ff18f56f7330dea6bb35a/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/149980a29f7ac5e69e6ff18f56f7330dea6bb35a/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=149980a29f7ac5e69e6ff18f56f7330dea6bb35a", "filename": "src/scripts/google-images.coffee", "sha": "25d0e74c05503d29c95abd20439a64788b152697", "additions": 8, "patch": "@@ -39,6 +39,12 @@ imageMe = (msg, query, animated, faces, cb) ->\n       images = JSON.parse(body)\n       images = images.responseData?.results\n       if images?.length > 0\n-        image  = msg.random images\n-        cb \"#{image.unescapedUrl}#.png\"\n+        image = msg.random images\n+        cb ensureImageExtension image.unescapedUrl\n \n+ensureImageExtension = (url) ->\n+  ext = url.split('.').pop()\n+  if /(png|jpe?g|gif)/i.test(ext)\n+    url\n+  else\n+    \"#{url}#.png\"", "changes": 10}], "709": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c581caa208024a6890e50a2761174f08489e4de6/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c581caa208024a6890e50a2761174f08489e4de6/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=c581caa208024a6890e50a2761174f08489e4de6", "filename": "src/robot.coffee", "sha": "707a193b80b23650653be9fbbd3056763cb10905", "additions": 4, "patch": "@@ -323,7 +323,10 @@ class Robot\n       path = if adapter in HUBOT_DEFAULT_ADAPTERS\n         \"#{path}/#{adapter}\"\n       else\n-        \"hubot-#{adapter}\"\n+        if Fs.existsSync(path)\n+          \"#{path}/#{adapter}\"\n+        else\n+          \"hubot-#{adapter}\"\n \n       @adapter = require(path).use @\n     catch err", "changes": 5}], "710": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f8173f22ee0ef2e93ac73db4fe21c5b5b382dc45/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/f8173f22ee0ef2e93ac73db4fe21c5b5b382dc45/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=f8173f22ee0ef2e93ac73db4fe21c5b5b382dc45", "filename": "package.json", "sha": "2196182c1b4a815fff3b7873fb76b7473cf3f93e", "additions": 1, "patch": "@@ -28,7 +28,7 @@\n     \"optparse\":           \"1.0.4\",\n     \"scoped-http-client\": \"0.9.8\",\n     \"log\":                \"1.4.0\",\n-    \"express\":            \"3.3.4\"\n+    \"express\":            \"3.4.8\"\n   },\n \n   \"engines\": {", "changes": 2}], "712": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/e422404c0251cb507c1a52f2c5b091347f38373c/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e422404c0251cb507c1a52f2c5b091347f38373c/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=e422404c0251cb507c1a52f2c5b091347f38373c", "filename": "src/scripts/help.coffee", "sha": "943f4860996a9d5ad230092f816fa65649e5ad33", "additions": 2, "patch": "@@ -66,8 +66,8 @@ module.exports = (robot) ->\n \n     prefix = robot.alias or robot.name\n     cmds = cmds.map (cmd) ->\n-      cmd = cmd.replace /^hubot/, prefix\n-      cmd.replace /hubot/ig, robot.name\n+      cmd = cmd.replace /hubot/ig, robot.name\n+      cmd.replace new RegExp(\"^#{robot.name}\"), prefix\n \n     emit = cmds.join \"\\n\"\n ", "changes": 4}], "714": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c212674dc64d80c41b11f3e7f3044d5fc45debf0/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/c212674dc64d80c41b11f3e7f3044d5fc45debf0/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=c212674dc64d80c41b11f3e7f3044d5fc45debf0", "filename": "docs/adapters.md", "sha": "69ed4c49ed473bdd16be31f8236a10040de4093f", "additions": 2, "patch": "@@ -4,9 +4,10 @@ Adapters are the interface to the service you want your hubot to run on.\n \n ## Official Adapters\n \n-Hubot includes two official adapters:\n+Hubot includes three official adapters:\n \n * [Shell](adapters/shell.md), i.e. for use with development\n+* [Test](adapters/test.md), i.e. for use with testing\n * [Campfire](adapters/campfire.md)\n \n ## Third-party Adapters", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c212674dc64d80c41b11f3e7f3044d5fc45debf0/docs/adapters/test.md", "blob_url": "https://github.com/hubotio/hubot/blob/c212674dc64d80c41b11f3e7f3044d5fc45debf0/docs/adapters/test.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/test.md?ref=c212674dc64d80c41b11f3e7f3044d5fc45debf0", "filename": "docs/adapters/test.md", "sha": "07cc23138b54fdc18fc9e80f678f824c88920ee5", "additions": 35, "patch": "@@ -0,0 +1,35 @@\n+# Adapters: Test\n+\n+The test adapter provides a simple way to test what hubot would've responded to in your own scripts.\n+It can be useful for testing scripts that you distribute via npm.\n+\n+## Getting Started\n+\n+```coffeescript\n+Path  = require(\"path\")\n+Robot = require(\"hubot\").Robot\n+\n+pkg = require Path.join __dirname, \"..\", 'package.json'\n+testAdapter = Path.join(__dirname, \"adapters\")\n+\n+Version = pkg.version\n+\n+describe \"The Hubot Script\", () ->\n+  robot = null\n+  beforeEach () ->\n+    robot = new Robot testAdapter, \"test\", false, \"hubot\"\n+    robot.loadFile  Path.join(__dirname, \"..\", \"src\"), \"script.coffee\"\n+    robot.run()\n+\n+  afterEach () ->\n+    robot.shutdown()\n+\n+  it \"displays the version\", () ->\n+    robot.adapter.receiveText(\"hubot deploy:version\")\n+    expected = \"hubot-deploy v#{Version}/hubot v2.7.5/node v0.10.21\"\n+    assert.equal expected, robot.adapter.history\n+```\n+\n+## Configuring\n+\n+This adapter doesn't require any configuration.", "changes": 35}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c212674dc64d80c41b11f3e7f3044d5fc45debf0/src/adapters/test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c212674dc64d80c41b11f3e7f3044d5fc45debf0/src/adapters/test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/test.coffee?ref=c212674dc64d80c41b11f3e7f3044d5fc45debf0", "filename": "src/adapters/test.coffee", "sha": "48cd87440eef319b0bdba2f18dcca1df71cfb3ff", "additions": 25, "patch": "@@ -0,0 +1,25 @@\n+Robot         = require '../robot'\n+Adapter       = require '../adapter'\n+{TextMessage} = require '../message'\n+\n+class Test extends Adapter\n+  send: (envelope, strings...) ->\n+    for str in strings\n+      @history.push str\n+\n+  reply: (envelope, strings...) ->\n+    strings = strings.map (s) -> \"#{envelope.user.name}: #{s}\"\n+    @send envelope, strings...\n+\n+  receiveText: (input) ->\n+    user = @robot.brain.userForId '1', name: 'test', room: 'Test'\n+    textMessage = new TextMessage user, input, 'messageId'\n+    @receive textMessage\n+\n+  run: ->\n+    self = @\n+    @history = [ ]\n+    self.emit 'connected'\n+\n+exports.use = (robot) ->\n+  new Test robot", "changes": 25}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c212674dc64d80c41b11f3e7f3044d5fc45debf0/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c212674dc64d80c41b11f3e7f3044d5fc45debf0/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=c212674dc64d80c41b11f3e7f3044d5fc45debf0", "filename": "src/robot.coffee", "sha": "a93ca033cfa3df9e931ba4d0778f833bf34e1611", "additions": 1, "patch": "@@ -13,6 +13,7 @@ Response = require './response'\n HUBOT_DEFAULT_ADAPTERS = [\n   'campfire'\n   'shell'\n+  'test'\n ]\n \n HUBOT_DOCUMENTATION_SECTIONS = [", "changes": 1}], "715": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e543dff46fba9e435a352e6debe5cf210e40f860/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e543dff46fba9e435a352e6debe5cf210e40f860/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=e543dff46fba9e435a352e6debe5cf210e40f860", "filename": "src/robot.coffee", "sha": "8c9e9f9e258113d75bd38c99a1dc792ec1c62e85", "additions": 7, "patch": "@@ -211,6 +211,13 @@ class Robot\n   loadFile: (path, file) ->\n     ext  = Path.extname file\n     full = Path.join path, Path.basename(file, ext)\n+    if  require.cache[require.resolve(full)]\n+      try\n+        cacheobj = require.resolve(full)\n+        @logger.debug \"require cache for #{cacheobj} invalidated.\"\n+        delete require.cache[cacheobj]\n+      catch error\n+        @logger.error \"Unable to invalidate #{cacheobj}: #{error.stack}\"\n     if require.extensions[ext]\n       try\n         require(full) @", "changes": 7}], "717": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9d06983924d653d68008f4a1f32594460bcdb86c/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9d06983924d653d68008f4a1f32594460bcdb86c/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=9d06983924d653d68008f4a1f32594460bcdb86c", "filename": "src/robot.coffee", "sha": "fd0672d3d364080a87b78b4ca9bab6354c3e86e9", "additions": 1, "patch": "@@ -281,6 +281,7 @@ class Robot\n     app.use express.query()\n     app.use express.bodyParser()\n     app.use express.static stat if stat\n+    app.use express.static Path.normalize(\"#{__dirname}/#{stat}\") if stat\n \n     try\n       @server = app.listen(process.env.PORT || 8080, process.env.BIND_ADDRESS || '0.0.0.0')", "changes": 1}], "720": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fa8eb5dad0520cc670aa445d355a2f1495acf33b/script/bootstrap", "blob_url": "https://github.com/hubotio/hubot/blob/fa8eb5dad0520cc670aa445d355a2f1495acf33b/script/bootstrap", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/bootstrap?ref=fa8eb5dad0520cc670aa445d355a2f1495acf33b", "filename": "script/bootstrap", "sha": "1aa4730e6fa02c3270c92e18fe31a392584c6e14", "additions": 3, "patch": "@@ -0,0 +1,3 @@\n+#!/usr/bin/env bash\n+\n+npm install", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fa8eb5dad0520cc670aa445d355a2f1495acf33b/script/cibuild", "blob_url": "https://github.com/hubotio/hubot/blob/fa8eb5dad0520cc670aa445d355a2f1495acf33b/script/cibuild", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/cibuild?ref=fa8eb5dad0520cc670aa445d355a2f1495acf33b", "filename": "script/cibuild", "sha": "a8eba550fa196771f3b9ffae0849f2eb921eb0b2", "additions": 3, "patch": "@@ -0,0 +1,3 @@\n+#!/usr/bin/env bash\n+\n+make test", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fa8eb5dad0520cc670aa445d355a2f1495acf33b/script/release", "blob_url": "https://github.com/hubotio/hubot/blob/fa8eb5dad0520cc670aa445d355a2f1495acf33b/script/release", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/release?ref=fa8eb5dad0520cc670aa445d355a2f1495acf33b", "filename": "script/release", "sha": "bc0de86478f2cd04e8ae58aac83cebcbf8e3864c", "additions": 44, "patch": "@@ -0,0 +1,44 @@\n+#!/bin/sh\n+# Tag and push a release.\n+\n+set -e\n+\n+# Make sure we're in the project root.\n+\n+cd $(dirname \"$0\")/..\n+\n+# Make sure the darn thing works\n+\n+npm update && script/smoke-test\n+\n+# Make sure we're on the master branch.\n+\n+(git branch | grep -q '* master') || {\n+  echo \"Only release from the master branch.\"\n+  exit 1\n+}\n+\n+# Figure out what version we're releasing.\n+\n+tag=v`node -e 'console.log(require(\"./package.json\").version)'`\n+\n+# Ensure there's a line in the CHANGELOG\n+\n+grep \"$tag\" CHANGELOG.md || {\n+  echo \"No entry for '$tag' found in the CHANGELOG.\"\n+  exit 1\n+}\n+\n+# Make sure we haven't released this version before.\n+\n+git fetch -t origin\n+\n+(git tag -l | grep -q \"$tag\") && {\n+  echo \"Whoops, there's already a '${tag}' tag.\"\n+  exit 1\n+}\n+\n+# Tag it and bag it.\n+\n+npm publish && git tag \"$tag\" &&\n+  git push origin master --tags", "changes": 44}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fa8eb5dad0520cc670aa445d355a2f1495acf33b/script/smoke-test", "blob_url": "https://github.com/hubotio/hubot/blob/fa8eb5dad0520cc670aa445d355a2f1495acf33b/script/smoke-test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/smoke-test?ref=fa8eb5dad0520cc670aa445d355a2f1495acf33b", "filename": "script/smoke-test", "sha": "06655bf5a17677a6fe02bd55dd0071e7c8c24b1f", "additions": 5, "patch": "@@ -0,0 +1,5 @@\n+#!/bin/bash\n+\n+set -ex\n+\n+coffee src/**/*.coffee", "changes": 5}], "722": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/78fb7173de568ca98c8cb3e1f1f550acd4da6f09/src/user.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/78fb7173de568ca98c8cb3e1f1f550acd4da6f09/src/user.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/user.coffee?ref=78fb7173de568ca98c8cb3e1f1f550acd4da6f09", "filename": "src/user.coffee", "sha": "d38f442c429a31085e39bb951224ff3b55784765", "additions": 1, "patch": "@@ -4,7 +4,7 @@ class User\n   # id      - A unique ID for the user.\n   # options - An optional Hash of key, value pairs for this user.\n   constructor: (@id, options = {}) ->\n-    for k of (options or {})\n+    for k of options\n       @[k] = options[k]\n     @['name'] ||= @id\n ", "changes": 2}], "723": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8b26d2206a50153d885c02c535cfcaf7b760ea93/src/scripts/shibame.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8b26d2206a50153d885c02c535cfcaf7b760ea93/src/scripts/shibame.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/shibame.coffee?ref=8b26d2206a50153d885c02c535cfcaf7b760ea93", "filename": "src/scripts/shibame.coffee", "sha": "92ac25f03899323bcd2df17b14d94dccbcdeb69c", "additions": 26, "patch": "@@ -0,0 +1,26 @@\n+# Description:\n+#   Shibame is the yet another important thing in your life\n+#\n+# Dependencies:\n+#   None\n+#\n+# Configuration:\n+#   Export your Flickr API key to environmental variable FLICKR_API_KEY\n+#\n+# Commands:\n+#   hubot shiba me - Receive a shiba\n+#   hubot shiba bomb N - get N shibas\n+\n+module.exports = (robot) ->\n+  request = (msg) -> msg.http(\"https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=#{process.env.FLICKR_API_KEY}&text=shiba+dog&sort=interestingness-desc&extras=url_l&format=json&nojsoncallback=1\").get()\n+\n+  robot.respond /shiba me/i, (msg) ->\n+    request(msg) (err, res, body) ->\n+      photos = JSON.parse(body).photos.photo\n+      msg.send photos[Math.floor(Math.random() * photos.length)].url_l\n+\n+  robot.respond /shiba bomb( (\\d+))?/i, (msg) ->\n+    count = msg.match[2] || 5\n+    request(msg) (err, res, body) ->\n+      photos = JSON.parse(body).photos.photo\n+      msg.send photos[Math.floor(Math.random() * photos.length)].url_l for [1..count]", "changes": 26}], "724": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1cdfe107b9bd0f3b2049e108f7678314ec95bab5/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/1cdfe107b9bd0f3b2049e108f7678314ec95bab5/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=1cdfe107b9bd0f3b2049e108f7678314ec95bab5", "filename": "package.json", "sha": "8507cc7ade722bf2b1e3ab9f71382b0b55ea9c85", "additions": 2, "patch": "@@ -28,7 +28,8 @@\n     \"optparse\":           \"1.0.4\",\n     \"scoped-http-client\": \"0.9.8\",\n     \"log\":                \"1.4.0\",\n-    \"express\":            \"3.3.4\"\n+    \"express\":            \"3.3.4\",\n+    \"async\":              \"~0.9.0\"\n   },\n \n   \"engines\": {", "changes": 3}, {"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/1cdfe107b9bd0f3b2049e108f7678314ec95bab5/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1cdfe107b9bd0f3b2049e108f7678314ec95bab5/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=1cdfe107b9bd0f3b2049e108f7678314ec95bab5", "filename": "src/listener.coffee", "sha": "e8248166183722d758e3d594b26e86c3596c368d", "additions": 44, "patch": "@@ -1,4 +1,5 @@\n {inspect} = require 'util'\n+async     = require 'async'\n \n {TextMessage} = require './message'\n \n@@ -9,25 +10,51 @@ class Listener\n   # robot    - A Robot instance.\n   # matcher  - A Function that determines if this listener should trigger the\n   #            callback.\n-  # callback - A Function that is triggered if the incoming message matches.\n-  constructor: (@robot, @matcher, @callback) ->\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n+  # handler  - A Function that is triggered if the incoming message matches.\n+  constructor: (@robot, @matcher, @options, @handler) ->\n+    if not @handler?\n+      @handler = @options\n+      @options = {}\n \n   # Public: Determines if the listener likes the content of the message. If\n   # so, a Response built from the given Message is passed to the Listener\n   # callback.\n   #\n   # message - A Message instance.\n   #\n-  # Returns a boolean of whether the matcher matched.\n-  call: (message) ->\n+  # @callback - Call with a boolean of whether the matcher matched.\n+  call: (message, cb) ->\n     if match = @matcher message\n-      @robot.logger.debug \\\n-        \"Message '#{message}' matched regex /#{inspect @regex}/\" if @regex\n-\n-      @callback new @robot.Response(@robot, message, match)\n-      true\n+      if @regex\n+        @robot.logger.debug \\\n+          \"Message '#{message}' matched regex /#{inspect @regex}/\"\n+      response = new @robot.Response(@robot, message, match)\n+      @testAllHooks response, (result) =>\n+        if result\n+          @robot.logger.debug \"Message '#{message}' passed all hooks\"\n+          @handler response\n+          cb true\n+        else\n+          @robot.logger.debug \"Message '#{message}' failed some/all hooks\"\n+          cb false\n     else\n-      false\n+      cb false\n+\n+  testAllHooks: (msg, callback) ->\n+    wrappedHooks = []\n+    # Wrap all hooks for execution\n+    Listener.hooks.forEach (hook) =>\n+      wrappedHooks.push (cb) =>\n+        hook(@robot, this, @options, msg, cb)\n+\n+    # Execute all hooks\n+    async.parallel wrappedHooks, (err, results) ->\n+      allHooksPassed = true\n+      results.forEach (result) ->\n+        allHooksPassed = allHooksPassed && result\n+      callback(allHooksPassed)\n \n class TextListener extends Listener\n   # TextListeners receive every message from the chat source and decide if they\n@@ -36,11 +63,16 @@ class TextListener extends Listener\n   # robot    - A Robot instance.\n   # regex    - A Regex that determines if this listener should trigger the\n   #            callback.\n-  # callback - A Function that is triggered if the incoming message matches.\n-  constructor: (@robot, @regex, @callback) ->\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n+  # handler - A Function that is triggered if the incoming message matches.\n+  constructor: (@robot, @regex, @options, @handler) ->\n     @matcher = (message) =>\n       if message instanceof TextMessage\n         message.match @regex\n+    super @robot, @matcher, @options, @handler\n+\n+Listener.hooks = []\n \n module.exports = {\n   Listener", "changes": 56}, {"status": "modified", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/1cdfe107b9bd0f3b2049e108f7678314ec95bab5/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1cdfe107b9bd0f3b2049e108f7678314ec95bab5/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=1cdfe107b9bd0f3b2049e108f7678314ec95bab5", "filename": "src/robot.coffee", "sha": "58bf25be9201936364a90f43e4aca500c79d3834", "additions": 25, "patch": "@@ -3,6 +3,7 @@ Log            = require 'log'\n Path           = require 'path'\n HttpClient     = require 'scoped-http-client'\n {EventEmitter} = require 'events'\n+async          = require 'async'\n \n User = require './user'\n Brain = require './brain'\n@@ -74,8 +75,8 @@ class Robot\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n-  hear: (regex, callback) ->\n-    @listeners.push new TextListener(@, regex, callback)\n+  hear: (regex, options, callback) ->\n+    @listeners.push new TextListener(@, regex, options, callback)\n \n   # Public: Adds a Listener that attempts to match incoming messages directed\n   # at the robot based on a Regex. All regexes treat patterns like they begin\n@@ -85,7 +86,7 @@ class Robot\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n-  respond: (regex, callback) ->\n+  respond: (regex, options, callback) ->\n     re = regex.toString().split('/')\n     re.shift()\n     modifiers = re.pop()\n@@ -110,7 +111,7 @@ class Robot\n         modifiers\n       )\n \n-    @listeners.push new TextListener(@, newRegex, callback)\n+    @listeners.push new TextListener(@, newRegex, options, callback)\n \n   # Public: Adds a Listener that triggers when anyone enters the room.\n   #\n@@ -190,17 +191,27 @@ class Robot\n   #\n   # Returns nothing.\n   receive: (message) ->\n-    results = []\n-    for listener in @listeners\n-      try\n-        results.push listener.call(message)\n-        break if message.done\n-      catch error\n-        @emit('error', error, new @Response(@, message, []))\n+    # Try executing all registered Listeners in order of registration\n+    # and return after message is done being processed\n+    anyListenersExecuted = false\n+    async.detectSeries(\n+      @listeners,\n+      (listener, cb) =>\n+        try\n+          listener.call message, (listenerExecuted) ->\n+            anyListenersExecuted = anyListenersExecuted || listenerExecuted\n+            cb(message.done)\n+        catch err\n+          # TODO provide useful info after catching an error (like a stacktrace!)\n+          @emit('error', err, new @Response(@, message, []))\n+      ,\n+      (result) =>\n+        # If no registered Listener matched the message\n+        if message not instanceof CatchAllMessage and not anyListenersExecuted\n+          @logger.debug 'No listeners executed; falling back to catch-all'\n+          @receive new CatchAllMessage(message)\n+    )\n \n-        false\n-    if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n-      @receive new CatchAllMessage(message)\n \n   # Public: Loads a file in path.\n   #", "changes": 39}], "726": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/5fc5caecaa036a9d6394eba6074be4ba974ffc4e/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/5fc5caecaa036a9d6394eba6074be4ba974ffc4e/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=5fc5caecaa036a9d6394eba6074be4ba974ffc4e", "filename": "bin/hubot", "sha": "82f1664844530c94ed80b29976e28e89d4994baa", "additions": 6, "patch": "@@ -81,26 +81,26 @@ else\n   robot.alias = Options.alias\n \n   loadScripts = ->\n-    scriptsPath = Path.resolve \".\", \"scripts\"\n+    scriptsPath = Path.resolve Options.path, \"scripts\"\n     robot.load scriptsPath\n \n-    scriptsPath = Path.resolve \".\", \"src\", \"scripts\"\n+    scriptsPath = Path.resolve Options.path, \"src\", \"scripts\"\n     robot.load scriptsPath\n \n-    hubotScripts = Path.resolve \".\", \"hubot-scripts.json\"\n+    hubotScripts = Path.resolve Options.path, \"hubot-scripts.json\"\n     Fs.exists hubotScripts, (exists) ->\n       if exists\n         Fs.readFile hubotScripts, (err, data) ->\n           if data.length > 0\n             try\n               scripts = JSON.parse data\n-              scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n+              scriptsPath = Path.resolve Options.path, \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n               robot.loadHubotScripts scriptsPath, scripts\n             catch err\n               console.error \"Error parsing JSON data from hubot-scripts.json: #{err}\"\n               process.exit(1)\n \n-    externalScripts = Path.resolve \".\", \"external-scripts.json\"\n+    externalScripts = Path.resolve Options.path, \"external-scripts.json\"\n     Fs.exists externalScripts, (exists) ->\n       if exists\n         Fs.readFile externalScripts, (err, data) ->\n@@ -116,7 +116,7 @@ else\n       if path[0] == '/'\n         scriptsPath = path\n       else\n-        scriptsPath = Path.resolve \".\", path\n+        scriptsPath = Path.resolve Options.path, path\n       robot.load scriptsPath\n \n   robot.adapter.on 'connected', loadScripts", "changes": 12}], "730": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "CHANGELOG.md", "sha": "ab9c1caf6b82b9c11a3d894e220944d311efacfc", "additions": 15, "patch": "@@ -1,3 +1,18 @@\n+v2.8.1\n+======\n+\n+* Include link to https://github.com/hubot-scripts in addition to hubot-scripts repo\n+* Remove auth.coffee. https://github.com/hubot-scripts/hubot-auth is recommended instead\n+\n+v2.8.0\n+======\n+\n+* Add support for `hubot --check-config` to verify hubot will load based on how it's configured\n+* Include `script/` directory for convenient one-liners for common tasks of developing github/hubot\n+* Fixes to default `image me` and `help`\n+* Updated documentation about external scripts\n+* Add better debug output when receiving text messages\n+\n v2.7.5\n ======\n ", "changes": 15}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "README.md", "sha": "05f73535fb56b087d86fb1c629a48b9d8a591370", "additions": 2, "patch": "@@ -2,7 +2,8 @@\n \n Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n cool. He's extendable with\n-[community scripts](https://github.com/github/hubot-scripts) and your own custom\n+[old community scripts](https://github.com/github/hubot-scripts), or \n+[new community org](https://github.com/hubot-scripts/) and your own custom\n scripts, and can work on [many different chat services](docs/adapters.md).\n \n This repository provides a library that's distributed by `npm` that you", "changes": 3}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "docs/README.md", "sha": "fbf55264eece2f5511667a9258c6cf76cd050438", "additions": 0, "patch": "@@ -48,7 +48,6 @@ is mostly useful for development. Make note of  `Hubot>`; this is the name he'll\n     hubot help <query> - Displays all help commands that match <query>.\n     hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n     hubot map me <query> - Returns a map view of the area returned by `query`.\n-    hubot math me <expression> - Calculate the given expression.\n     hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n     hubot mustache me <url> - Adds a mustache to the specified URL.\n     hubot ping - Reply with pong", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "docs/adapters.md", "sha": "ed433cc68a4895d01e0073a24e1570dcb5341450", "additions": 3, "patch": "@@ -34,6 +34,9 @@ to have yours added to the list:\n * [AIM](https://github.com/shaundubuque/hubot-aim)\n * [Slack](https://github.com/tinyspeck/hubot-slack)\n * [Lingr](https://github.com/miyagawa/hubot-lingr)\n+* [Gitter](https://github.com/huafu/hubot-gitter2)\n+* [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.\n+* [Visual Studio Online](https://github.com/scrumdod/hubot-VSOnline)\n \n ## Writing Your Own adapter\n ", "changes": 3}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "package.json", "sha": "605695b3f63e04d8f6ed03c385110ffb98f8d22d", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.7.5\",\n+  \"version\": \"2.8.1\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/script/bootstrap", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/script/bootstrap", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/bootstrap?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "script/bootstrap", "sha": "cc2d33f7b9b56028bdbe0b6f39751fa9ef1a30ae", "additions": 5, "patch": "@@ -0,0 +1,5 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+npm install", "changes": 5}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/script/cibuild", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/script/cibuild", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/cibuild?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "script/cibuild", "sha": "a8eba550fa196771f3b9ffae0849f2eb921eb0b2", "additions": 3, "patch": "@@ -0,0 +1,3 @@\n+#!/usr/bin/env bash\n+\n+make test", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/script/release", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/script/release", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/release?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "script/release", "sha": "8d4e69e9c2a4a579ee97eaef9ea930d8c087a933", "additions": 44, "patch": "@@ -0,0 +1,44 @@\n+#!/usr/bin/env bash\n+# Tag and push a release.\n+\n+set -e\n+\n+# Make sure we're in the project root.\n+\n+cd $(dirname \"$0\")/..\n+\n+# Make sure the darn thing works\n+\n+npm update && script/smoke-test\n+\n+# Make sure we're on the master branch.\n+\n+(git branch | grep -q '* master') || {\n+  echo \"Only release from the master branch.\"\n+  exit 1\n+}\n+\n+# Figure out what version we're releasing.\n+\n+tag=v`node -e 'console.log(require(\"./package.json\").version)'`\n+\n+# Ensure there's a line in the CHANGELOG\n+\n+grep \"$tag\" CHANGELOG.md || {\n+  echo \"No entry for '$tag' found in the CHANGELOG.\"\n+  exit 1\n+}\n+\n+# Make sure we haven't released this version before.\n+\n+git fetch -t origin\n+\n+(git tag -l | grep -q \"$tag\") && {\n+  echo \"Whoops, there's already a '${tag}' tag.\"\n+  exit 1\n+}\n+\n+# Tag it and bag it.\n+\n+npm publish && git tag \"$tag\" &&\n+  git push origin master --tags", "changes": 44}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/script/server", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/script/server", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/server?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "script/server", "sha": "8490ea411e72aa6e8d06610f4430280f7ec2e101", "additions": 7, "patch": "@@ -0,0 +1,7 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+source script/bootstrap\n+\n+bin/hubot \"$@\"", "changes": 7}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/script/smoke-test", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/script/smoke-test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/smoke-test?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "script/smoke-test", "sha": "9755c9ad41317ff7ceb44cdce574a9e74445abfb", "additions": 5, "patch": "@@ -0,0 +1,5 @@\n+#!/usr/bin/env bash\n+\n+set -ex\n+\n+coffee src/**/*.coffee", "changes": 5}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "src/adapters/shell.coffee", "sha": "08201f9287ba1d6e34c2349f276627a444b4663f", "additions": 3, "patch": "@@ -24,9 +24,6 @@ class Shell extends Adapter\n     stdin = process.openStdin()\n     stdout = process.stdout\n \n-    process.on 'uncaughtException', (err) =>\n-      @robot.logger.error err.stack\n-\n     @repl = Readline.createInterface stdin, stdout, null\n \n     @repl.on 'close', =>\n@@ -37,7 +34,9 @@ class Shell extends Adapter\n     @repl.on 'line', (buffer) =>\n       @repl.close() if buffer.toLowerCase() is 'exit'\n       @repl.prompt()\n-      user = @robot.brain.userForId '1', name: 'Shell', room: 'Shell'\n+      user_id = parseInt(process.env.HUBOT_SHELL_USER_ID or '1')\n+      user_name = process.env.HUBOT_SHELL_USER_NAME or 'Shell'\n+      user = @robot.brain.userForId user_id, name: user_name, room: 'Shell'\n       @receive new TextMessage user, buffer, 'messageId'\n \n     self.emit 'connected'", "changes": 7}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "src/robot.coffee", "sha": "c2c4a721c3bda4e73ff0801f00a38dbbfefd4c10", "additions": 1, "patch": "@@ -165,6 +165,7 @@ class Robot\n   #\n   # Returns nothing.\n   invokeErrorHandlers: (err, msg) ->\n+    @logger.error err.stack\n     for errorHandler in @errorHandlers\n      try\n        errorHandler(err, msg)", "changes": 1}, {"status": "removed", "deletions": 121, "raw_url": "https://github.com/hubotio/hubot/raw/075463533822464a97c6460dc95bfbcbe80dee3e/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/075463533822464a97c6460dc95bfbcbe80dee3e/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=075463533822464a97c6460dc95bfbcbe80dee3e", "filename": "src/scripts/auth.coffee", "sha": "cb724500d6646cd1f1c06b756203a1c53f9632c4", "additions": 0, "patch": "@@ -1,121 +0,0 @@\n-# Description:\n-#   Auth allows you to assign roles to users which can be used by other scripts\n-#   to restrict access to Hubot commands\n-#\n-# Dependencies:\n-#   None\n-#\n-# Configuration:\n-#   HUBOT_AUTH_ADMIN - A comma separate list of user IDs\n-#\n-# Commands:\n-#   hubot <user> has <role> role - Assigns a role to a user\n-#   hubot <user> doesn't have <role> role - Removes a role from a user\n-#   hubot what role does <user> have - Find out what roles are assigned to a specific user\n-#   hubot who has admin role - Find out who's an admin and can assign roles\n-#\n-# Notes:\n-#   * Call the method: robot.auth.hasRole(msg.envelope.user,'<role>')\n-#   * returns bool true or false\n-#\n-#   * the 'admin' role can only be assigned through the environment variable\n-#   * roles are all transformed to lower case\n-#\n-#   * The script assumes that user IDs will be unique on the service end as to\n-#     correctly identify a user. Names were insecure as a user could impersonate\n-#     a user\n-#\n-# Author:\n-#   alexwilliamsca, tombell\n-\n-module.exports = (robot) ->\n-\n-  unless process.env.HUBOT_AUTH_ADMIN?\n-    robot.logger.warning 'The HUBOT_AUTH_ADMIN environment variable not set'\n-\n-  if process.env.HUBOT_AUTH_ADMIN?\n-    admins = process.env.HUBOT_AUTH_ADMIN.split ','\n-  else\n-    admins = []\n-\n-  class Auth\n-    hasRole: (user, roles) ->\n-      user = robot.brain.userForId(user.id)\n-      if user? and user.roles?\n-        roles = [roles] if typeof roles is 'string'\n-        for role in roles\n-          return true if role in user.roles\n-      return false\n-\n-    usersWithRole: (role) ->\n-      users = []\n-      for own key, user of robot.brain.data.users\n-        if robot.auth.hasRole(msg.envelope.user, role)\n-          users.push(user)\n-      users\n-\n-  robot.auth = new Auth\n-\n-  robot.respond /@?(.+) (has) ([\"'\\w: -_]+) (role)/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[3].trim().toLowerCase()\n-\n-    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n-      user = robot.brain.userForName(name)\n-      return msg.reply \"#{name} does not exist\" unless user?\n-      user.roles or= []\n-\n-      if newRole in user.roles\n-        msg.reply \"#{name} already has the '#{newRole}' role.\"\n-      else\n-        if newRole is 'admin'\n-          msg.reply \"Sorry, the 'admin' role can only be defined in the HUBOT_AUTH_ADMIN env variable.\"\n-        else\n-          myRoles = msg.message.user.roles or []\n-          if msg.message.user.id.toString() in admins\n-            user.roles.push(newRole)\n-            msg.reply \"Ok, #{name} has the '#{newRole}' role.\"\n-\n-  robot.respond /@?(.+) (doesn't have|does not have) ([\"'\\w: -_]+) (role)/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[3].trim().toLowerCase()\n-\n-    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n-      user = robot.brain.userForName(name)\n-      return msg.reply \"#{name} does not exist\" unless user?\n-      user.roles or= []\n-\n-      if newRole is 'admin'\n-        msg.reply \"Sorry, the 'admin' role can only be removed from the HUBOT_AUTH_ADMIN env variable.\"\n-      else\n-        myRoles = msg.message.user.roles or []\n-        if msg.message.user.id.toString() in admins\n-          user.roles = (role for role in user.roles when role isnt newRole)\n-          msg.reply \"Ok, #{name} doesn't have the '#{newRole}' role.\"\n-\n-  robot.respond /(what role does|what roles does) @?(.+) (have)\\?*$/i, (msg) ->\n-    name = msg.match[2].trim()\n-    user = robot.brain.userForName(name)\n-    return msg.reply \"#{name} does not exist\" unless user?\n-    user.roles or= []\n-    displayRoles = user.roles\n-\n-    if user.id.toString() in admins\n-      displayRoles.push('admin') unless 'admin' in user.roles\n-\n-    if displayRoles.length == 0\n-      msg.reply \"#{name} has no roles.\"\n-    else\n-      msg.reply \"#{name} has the following roles: #{displayRoles.join(', ')}.\"\n-\n-  robot.respond /who has admin role\\?*$/i, (msg) ->\n-    adminNames = []\n-    for admin in admins\n-      user = robot.brain.userForId(admin)\n-      unless robot.auth.hasRole(msg.envelope.user,'admin')\n-        adminNames.push user.name if user?\n-\n-    if adminNames.length > 0\n-      msg.reply \"The following people have the 'admin' role: #{adminNames.join(', ')}\"\n-    else\n-      msg.reply \"There are no people that have the 'admin' role.\"", "changes": 121}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "src/scripts/google-images.coffee", "sha": "d1d62035ccab56980fa726fdfe661dbe87cef524", "additions": 2, "patch": "@@ -22,10 +22,10 @@ module.exports = (robot) ->\n     imagery = msg.match[1]\n \n     if imagery.match /^https?:\\/\\//i\n-      msg.send \"#{mustachify}#{imagery}\"\n+      msg.send \"#{mustachify}#{encodeURIComponent imagery}\"\n     else\n       imageMe msg, imagery, false, true, (url) ->\n-        msg.send \"#{mustachify}#{url}\"\n+        msg.send \"#{mustachify}#{encodeURIComponent url}\"\n \n imageMe = (msg, query, animated, faces, cb) ->\n   cb = animated if typeof animated == 'function'", "changes": 4}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/src/scripts/maps.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/src/scripts/maps.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/maps.coffee?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "src/scripts/maps.coffee", "sha": "6db6ce2a3443f47af7249c2fbd07d581643fa564", "additions": 3, "patch": "@@ -10,15 +10,15 @@ module.exports = (robot) ->\n     mapType  = msg.match[1] or \"roadmap\"\n     location = msg.match[2]\n     mapUrl   = \"http://maps.google.com/maps/api/staticmap?markers=\" +\n-                escape(location) +\n+                encodeURIComponent(location) +\n                 \"&size=400x400&maptype=\" +\n                 mapType +\n                 \"&sensor=false\" +\n                 \"&format=png\" # So campfire knows it's an image\n     url      = \"http://maps.google.com/maps?q=\" +\n-               escape(location) +\n+               encodeURIComponent(location) +\n               \"&hl=en&sll=37.0625,-95.677068&sspn=73.579623,100.371094&vpsrc=0&hnear=\" +\n-              escape(location) +\n+              encodeURIComponent(location) +\n               \"&t=m&z=11\"\n \n     msg.send mapUrl", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/src/scripts/pugme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd/src/scripts/pugme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/pugme.coffee?ref=4ec9ee6c1eeb8a21d690b4aabda9666eb1b1c4dd", "filename": "src/scripts/pugme.coffee", "sha": "5b879b326cd3e598482406581fcc917c205c37a9", "additions": 1, "patch": "@@ -1,5 +1,5 @@\n # Description:\n-#   Pugme is the most important thing in your life\n+#   Pugme is the most important thing in life\n #\n # Dependencies:\n #   None", "changes": 2}], "732": [{"status": "modified", "deletions": 21, "raw_url": "https://github.com/hubotio/hubot/raw/e678459ccc76042c52a0d0b0c072cce96d019b04/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/e678459ccc76042c52a0d0b0c072cce96d019b04/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=e678459ccc76042c52a0d0b0c072cce96d019b04", "filename": "bin/hubot", "sha": "c893d90a02efca14a1cf8c279c969239418b1c53", "additions": 29, "patch": "@@ -17,6 +17,7 @@ Switches = [\n   [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n   [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n   [ \"-r\", \"--require PATH\",    \"Alternative scripts path\" ],\n+  [ \"-t\", \"--config-check\",    \"Test hubot's config to make sure it won't fail at startup\"]\n   [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n ]\n \n@@ -28,6 +29,7 @@ Options =\n   scripts:     process.env.HUBOT_SCRIPTS or []\n   name:        process.env.HUBOT_NAME    or \"Hubot\"\n   path:        process.env.HUBOT_PATH    or \".\"\n+  configCheck: false\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n@@ -56,6 +58,9 @@ Parser.on \"name\", (opt, value) ->\n Parser.on \"require\", (opt, value) ->\n   Options.scripts.push(value)\n \n+Parser.on \"config-check\", (opt) ->\n+  Options.configCheck = true\n+\n Parser.on \"version\", (opt, value) ->\n   Options.version = true\n \n@@ -88,29 +93,27 @@ else\n     robot.load scriptsPath\n \n     hubotScripts = Path.resolve \".\", \"hubot-scripts.json\"\n-    Fs.exists hubotScripts, (exists) ->\n-      if exists\n-        Fs.readFile hubotScripts, (err, data) ->\n-          if data.length > 0\n-            try\n-              scripts = JSON.parse data\n-              scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n-              robot.loadHubotScripts scriptsPath, scripts\n-            catch err\n-              console.error \"Error parsing JSON data from hubot-scripts.json: #{err}\"\n-              process.exit(1)\n+    if Fs.existsSync(hubotScripts)\n+      data = Fs.readFileSync(hubotScripts)\n+      if data.length > 0\n+        try\n+          scripts = JSON.parse data\n+          scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n+          robot.loadHubotScripts scriptsPath, scripts\n+        catch err\n+          console.error \"Error parsing JSON data from hubot-scripts.json: #{err}\"\n+          process.exit(1)\n \n     externalScripts = Path.resolve \".\", \"external-scripts.json\"\n-    Fs.exists externalScripts, (exists) ->\n-      if exists\n-        Fs.readFile externalScripts, (err, data) ->\n-          if data.length > 0\n-            try\n-              scripts = JSON.parse data\n-            catch err\n-              console.error \"Error parsing JSON data from external-scripts.json: #{err}\"\n-              process.exit(1)\n-            robot.loadExternalScripts scripts\n+    if Fs.existsSync(externalScripts)\n+      Fs.readFile externalScripts, (err, data) ->\n+        if data.length > 0\n+          try\n+            scripts = JSON.parse data\n+          catch err\n+            console.error \"Error parsing JSON data from external-scripts.json: #{err}\"\n+            process.exit(1)\n+          robot.loadExternalScripts scripts\n \n     for path in Options.scripts\n       if path[0] == '/'\n@@ -119,6 +122,11 @@ else\n         scriptsPath = Path.resolve \".\", path\n       robot.load scriptsPath\n \n+  if Options.configCheck\n+    loadScripts()\n+    console.log \"OK\"\n+    process.exit 0\n+\n   robot.adapter.on 'connected', loadScripts\n \n   robot.run()", "changes": 50}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/e678459ccc76042c52a0d0b0c072cce96d019b04/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e678459ccc76042c52a0d0b0c072cce96d019b04/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=e678459ccc76042c52a0d0b0c072cce96d019b04", "filename": "src/robot.coffee", "sha": "942892f02f1eb639d1f14287592ff69d532b860f", "additions": 4, "patch": "@@ -226,10 +226,10 @@ class Robot\n   # Returns nothing.\n   load: (path) ->\n     @logger.debug \"Loading scripts from #{path}\"\n-    Fs.exists path, (exists) =>\n-      if exists\n-        for file in Fs.readdirSync(path).sort()\n-          @loadFile path, file\n+\n+    if Fs.existsSync(path)\n+      for file in Fs.readdirSync(path).sort()\n+        @loadFile path, file\n \n   # Public: Load scripts specfied in the `hubot-scripts.json` file.\n   #", "changes": 8}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e678459ccc76042c52a0d0b0c072cce96d019b04/src/templates/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/e678459ccc76042c52a0d0b0c072cce96d019b04/src/templates/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/bin/hubot?ref=e678459ccc76042c52a0d0b0c072cce96d019b04", "filename": "src/templates/bin/hubot", "sha": "2c1a31cdc68cbd49482d8560510d50048e42de25", "additions": 2, "patch": "@@ -1,7 +1,8 @@\n #!/bin/sh\n \n+set -e\n+\n npm install\n export PATH=\"node_modules/.bin:node_modules/hubot/node_modules/.bin:$PATH\"\n \n exec node_modules/.bin/hubot \"$@\"\n-", "changes": 3}], "736": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/2fd15ae7d340741ca081e77a8328c2fe4a617722/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/2fd15ae7d340741ca081e77a8328c2fe4a617722/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=2fd15ae7d340741ca081e77a8328c2fe4a617722", "filename": "CHANGELOG.md", "sha": "bffd2ea7d332b678ac7b58cc7d2590b1c3233624", "additions": 9, "patch": "@@ -1,3 +1,12 @@\n+v2.8.0\n+======\n+\n+* Add support for `hubot --check-config` to verify hubot will load based on how it's configured\n+* Include `script/` directory for convenient one-liners for common tasks of developing github/hubot\n+* Fixes to default `image me` and `help`\n+* Updated documentation about external scripts\n+* Add better debug output when receiving text messages\n+\n v2.7.5\n ======\n ", "changes": 9}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/2fd15ae7d340741ca081e77a8328c2fe4a617722/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/2fd15ae7d340741ca081e77a8328c2fe4a617722/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=2fd15ae7d340741ca081e77a8328c2fe4a617722", "filename": "package.json", "sha": "fec8c06355f3c28680739141f518dd8b21b75879", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.7.5\",\n+  \"version\": \"2.8.0\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}], "737": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c47a03e79cfd0abb4f4eb978752b935dd6b9fede/src/scripts/pugme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c47a03e79cfd0abb4f4eb978752b935dd6b9fede/src/scripts/pugme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/pugme.coffee?ref=c47a03e79cfd0abb4f4eb978752b935dd6b9fede", "filename": "src/scripts/pugme.coffee", "sha": "5b879b326cd3e598482406581fcc917c205c37a9", "additions": 1, "patch": "@@ -1,5 +1,5 @@\n # Description:\n-#   Pugme is the most important thing in your life\n+#   Pugme is the most important thing in life\n #\n # Dependencies:\n #   None", "changes": 2}], "743": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ec2645a2f5b4d891d5670beb652c8852db53ce8a/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/ec2645a2f5b4d891d5670beb652c8852db53ce8a/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=ec2645a2f5b4d891d5670beb652c8852db53ce8a", "filename": "docs/adapters.md", "sha": "5a170957e8b16862dd413a169446a3f74ac5d9cf", "additions": 1, "patch": "@@ -34,6 +34,7 @@ to have yours added to the list:\n * [AIM](https://github.com/shaundubuque/hubot-aim)\n * [Slack](https://github.com/tinyspeck/hubot-slack)\n * [Lingr](https://github.com/miyagawa/hubot-lingr)\n+* [Gitter](https://github.com/huafu/hubot-gitter2)\n \n ## Writing Your Own adapter\n ", "changes": 1}], "744": [{"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/5185b45de98669b3ec164e5e2afcff7105d08da6/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/5185b45de98669b3ec164e5e2afcff7105d08da6/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=5185b45de98669b3ec164e5e2afcff7105d08da6", "filename": "bin/hubot", "sha": "0ab0d8567adf4c5431eab42025c3c4aca8a1d2b9", "additions": 20, "patch": "@@ -10,15 +10,17 @@ OptParse = require 'optparse'\n Path     = require 'path'\n \n Switches = [\n-  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n-  [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n-  [ \"-h\", \"--help\",            \"Display the help information\" ],\n-  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n-  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n-  [ \"-r\", \"--require PATH\",    \"Alternative scripts path\" ],\n-  [ \"-t\", \"--config-check\",    \"Test hubot's config to make sure it won't fail at startup\"]\n-  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n+  [ \"-a\", \"--adapter ADAPTER\",          \"The Adapter to use\" ],\n+  [ \"-c\", \"--create PATH\",              \"Create a deployable hubot\" ],\n+  [ \"-d\", \"--disable-httpd\",            \"Disable the HTTP server\" ],\n+  [ \"-h\", \"--help\",                     \"Display the help information\" ],\n+  [ \"-l\", \"--alias ALIAS\",              \"Enable replacing the robot's name with alias\" ],\n+  [ \"-n\", \"--name NAME\",                \"The name of the robot in chat\" ],\n+  [ \"-r\", \"--require PATH\",             \"Alternative scripts path\" ],\n+  [ \"-t\", \"--config-check\",             \"Test hubot's config to make sure it won't fail at startup\"],\n+  [ \"-v\", \"--version\",                  \"Displays the version of hubot installed\" ],\n+  [ \"-p\", \"--log-level LOG_LEVEL\",      \"The level of logging\"],\n+  [ \"-f\", \"--log-file LOG_FILE\",        \"File path where logging info will be written to\"]\n ]\n \n Options =\n@@ -30,6 +32,8 @@ Options =\n   name:        process.env.HUBOT_NAME    or \"Hubot\"\n   path:        process.env.HUBOT_PATH    or \".\"\n   configCheck: false\n+  logLevel:    process.env.HUBOT_LOG_LEVEL or \"info\"\n+  logFile:     process.env.HUBOT_LOG_FILE\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n@@ -64,6 +68,12 @@ Parser.on \"config-check\", (opt) ->\n Parser.on \"version\", (opt, value) ->\n   Options.version = true\n \n+Parser.on \"log-level\", (opt, value) ->\n+  Options.logLevel = value\n+\n+Parser.on \"log-file\", (opt, value) ->\n+  Options.logFile = value\n+\n Parser.parse process.argv\n \n unless process.platform is \"win32\"\n@@ -77,7 +87,7 @@ if Options.create\n else\n   adapterPath = Path.join __dirname, \"..\", \"src\", \"adapters\"\n \n-  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name\n+  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name, Options.logLevel, Options.logFile\n \n   if Options.version\n     console.log robot.version", "changes": 30}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/5185b45de98669b3ec164e5e2afcff7105d08da6/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/5185b45de98669b3ec164e5e2afcff7105d08da6/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=5185b45de98669b3ec164e5e2afcff7105d08da6", "filename": "docs/README.md", "sha": "3713168d376443f428f05229902a255c248548d5", "additions": 19, "patch": "@@ -77,6 +77,25 @@ case-insensitive, and can be prefixed with `@` or suffixed with `:`. These are e\n     @myhubot help\n     myhubot: help\n \n+## Logging\n+\n+Hubot will print useful logging information to standard output window by default, and the default log level is set to 'info'. \n+\n+While you may change the log level by a global variable `HUBOT_LOG_LEVEL` or command line option `--log-level` or `-p`, the value could be one of the following depending on your requirement:\n+\n+- emergency\n+- alert\n+- critical\n+- error\n+- warning\n+- notice\n+- info\n+- debug\n+\n+You may also want to let the logging information write to a disk file instead of stdout by setting a file path to global variable `HUBOT_LOG_FILE` or command line option `--log-file` or `-f`.\n+\n+If you want to log your own script information with the same logging system, you can access the log object via `robot.logger` or `msg.robot.logger`.\n+\n ## Scripting\n \n Hubot's power comes through scripting. Read [docs/scripting.md](scripting.md) for the deal on bending hubot to your will using code.", "changes": 19}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/5185b45de98669b3ec164e5e2afcff7105d08da6/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5185b45de98669b3ec164e5e2afcff7105d08da6/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=5185b45de98669b3ec164e5e2afcff7105d08da6", "filename": "index.coffee", "sha": "0ee400059bbdcda7b4d3058c5e5ab4a83e0f86af", "additions": 2, "patch": "@@ -21,5 +21,5 @@ module.exports = {\n   CatchAllMessage\n }\n \n-module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName) ->\n-  new Robot adapterPath, adapterName, enableHttpd, botName\n+module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName, logLevel, logFile) ->\n+  new Robot adapterPath, adapterName, enableHttpd, botName, logLevel, logFile", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/5185b45de98669b3ec164e5e2afcff7105d08da6/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/5185b45de98669b3ec164e5e2afcff7105d08da6/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=5185b45de98669b3ec164e5e2afcff7105d08da6", "filename": "src/robot.coffee", "sha": "0dd3a27d2179bd165fba5ba3374a630823b0f7e0", "additions": 10, "patch": "@@ -38,7 +38,7 @@ class Robot\n   # name        - A String of the robot name, defaults to Hubot.\n   #\n   # Returns nothing.\n-  constructor: (adapterPath, adapter, httpd, name = 'Hubot') ->\n+  constructor: (adapterPath, adapter, httpd, name = 'Hubot', logLevel, logFile) ->\n     @name      = name\n     @events    = new EventEmitter\n     @brain     = new Brain @\n@@ -47,7 +47,7 @@ class Robot\n     @Response  = Response\n     @commands  = []\n     @listeners = []\n-    @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n+    @logger    = @createLogger(logLevel, logFile)\n \n     @parseVersion()\n     if httpd\n@@ -483,4 +483,12 @@ class Robot\n     HttpClient.create(url)\n       .header('User-Agent', \"Hubot/#{@version}\")\n \n+  # Private: Creates a Log instance, the Log level and Output stream\n+  # are determined by Environment variables\n+  #\n+  # Returns a Log instance\n+  createLogger: (logLevel, logFile) ->\n+    outStream = Fs.createWriteStream logFile, { flags: 'a' } if logFile?\n+    new Log logLevel, outStream\n+\n module.exports = Robot", "changes": 12}], "745": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fe76a24581f4f0a6569bea6315bad36548e43374/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/fe76a24581f4f0a6569bea6315bad36548e43374/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=fe76a24581f4f0a6569bea6315bad36548e43374", "filename": "README.md", "sha": "05f73535fb56b087d86fb1c629a48b9d8a591370", "additions": 2, "patch": "@@ -2,7 +2,8 @@\n \n Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n cool. He's extendable with\n-[community scripts](https://github.com/github/hubot-scripts) and your own custom\n+[old community scripts](https://github.com/github/hubot-scripts), or \n+[new community org](https://github.com/hubot-scripts/) and your own custom\n scripts, and can work on [many different chat services](docs/adapters.md).\n \n This repository provides a library that's distributed by `npm` that you", "changes": 3}], "746": [{"status": "removed", "deletions": 121, "raw_url": "https://github.com/hubotio/hubot/raw/013a15f501b818145658b8ee2d033e7ce3ab6743/src/scripts/auth.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/013a15f501b818145658b8ee2d033e7ce3ab6743/src/scripts/auth.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/auth.coffee?ref=013a15f501b818145658b8ee2d033e7ce3ab6743", "filename": "src/scripts/auth.coffee", "sha": "cb724500d6646cd1f1c06b756203a1c53f9632c4", "additions": 0, "patch": "@@ -1,121 +0,0 @@\n-# Description:\n-#   Auth allows you to assign roles to users which can be used by other scripts\n-#   to restrict access to Hubot commands\n-#\n-# Dependencies:\n-#   None\n-#\n-# Configuration:\n-#   HUBOT_AUTH_ADMIN - A comma separate list of user IDs\n-#\n-# Commands:\n-#   hubot <user> has <role> role - Assigns a role to a user\n-#   hubot <user> doesn't have <role> role - Removes a role from a user\n-#   hubot what role does <user> have - Find out what roles are assigned to a specific user\n-#   hubot who has admin role - Find out who's an admin and can assign roles\n-#\n-# Notes:\n-#   * Call the method: robot.auth.hasRole(msg.envelope.user,'<role>')\n-#   * returns bool true or false\n-#\n-#   * the 'admin' role can only be assigned through the environment variable\n-#   * roles are all transformed to lower case\n-#\n-#   * The script assumes that user IDs will be unique on the service end as to\n-#     correctly identify a user. Names were insecure as a user could impersonate\n-#     a user\n-#\n-# Author:\n-#   alexwilliamsca, tombell\n-\n-module.exports = (robot) ->\n-\n-  unless process.env.HUBOT_AUTH_ADMIN?\n-    robot.logger.warning 'The HUBOT_AUTH_ADMIN environment variable not set'\n-\n-  if process.env.HUBOT_AUTH_ADMIN?\n-    admins = process.env.HUBOT_AUTH_ADMIN.split ','\n-  else\n-    admins = []\n-\n-  class Auth\n-    hasRole: (user, roles) ->\n-      user = robot.brain.userForId(user.id)\n-      if user? and user.roles?\n-        roles = [roles] if typeof roles is 'string'\n-        for role in roles\n-          return true if role in user.roles\n-      return false\n-\n-    usersWithRole: (role) ->\n-      users = []\n-      for own key, user of robot.brain.data.users\n-        if robot.auth.hasRole(msg.envelope.user, role)\n-          users.push(user)\n-      users\n-\n-  robot.auth = new Auth\n-\n-  robot.respond /@?(.+) (has) ([\"'\\w: -_]+) (role)/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[3].trim().toLowerCase()\n-\n-    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n-      user = robot.brain.userForName(name)\n-      return msg.reply \"#{name} does not exist\" unless user?\n-      user.roles or= []\n-\n-      if newRole in user.roles\n-        msg.reply \"#{name} already has the '#{newRole}' role.\"\n-      else\n-        if newRole is 'admin'\n-          msg.reply \"Sorry, the 'admin' role can only be defined in the HUBOT_AUTH_ADMIN env variable.\"\n-        else\n-          myRoles = msg.message.user.roles or []\n-          if msg.message.user.id.toString() in admins\n-            user.roles.push(newRole)\n-            msg.reply \"Ok, #{name} has the '#{newRole}' role.\"\n-\n-  robot.respond /@?(.+) (doesn't have|does not have) ([\"'\\w: -_]+) (role)/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[3].trim().toLowerCase()\n-\n-    unless name.toLowerCase() in ['', 'who', 'what', 'where', 'when', 'why']\n-      user = robot.brain.userForName(name)\n-      return msg.reply \"#{name} does not exist\" unless user?\n-      user.roles or= []\n-\n-      if newRole is 'admin'\n-        msg.reply \"Sorry, the 'admin' role can only be removed from the HUBOT_AUTH_ADMIN env variable.\"\n-      else\n-        myRoles = msg.message.user.roles or []\n-        if msg.message.user.id.toString() in admins\n-          user.roles = (role for role in user.roles when role isnt newRole)\n-          msg.reply \"Ok, #{name} doesn't have the '#{newRole}' role.\"\n-\n-  robot.respond /(what role does|what roles does) @?(.+) (have)\\?*$/i, (msg) ->\n-    name = msg.match[2].trim()\n-    user = robot.brain.userForName(name)\n-    return msg.reply \"#{name} does not exist\" unless user?\n-    user.roles or= []\n-    displayRoles = user.roles\n-\n-    if user.id.toString() in admins\n-      displayRoles.push('admin') unless 'admin' in user.roles\n-\n-    if displayRoles.length == 0\n-      msg.reply \"#{name} has no roles.\"\n-    else\n-      msg.reply \"#{name} has the following roles: #{displayRoles.join(', ')}.\"\n-\n-  robot.respond /who has admin role\\?*$/i, (msg) ->\n-    adminNames = []\n-    for admin in admins\n-      user = robot.brain.userForId(admin)\n-      unless robot.auth.hasRole(msg.envelope.user,'admin')\n-        adminNames.push user.name if user?\n-\n-    if adminNames.length > 0\n-      msg.reply \"The following people have the 'admin' role: #{adminNames.join(', ')}\"\n-    else\n-      msg.reply \"There are no people that have the 'admin' role.\"", "changes": 121}], "747": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d6a4c9bccf93139f91a8c93ee83d2327667ba3f6/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/d6a4c9bccf93139f91a8c93ee83d2327667ba3f6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=d6a4c9bccf93139f91a8c93ee83d2327667ba3f6", "filename": "CHANGELOG.md", "sha": "ab9c1caf6b82b9c11a3d894e220944d311efacfc", "additions": 6, "patch": "@@ -1,3 +1,9 @@\n+v2.8.1\n+======\n+\n+* Include link to https://github.com/hubot-scripts in addition to hubot-scripts repo\n+* Remove auth.coffee. https://github.com/hubot-scripts/hubot-auth is recommended instead\n+\n v2.8.0\n ======\n ", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d6a4c9bccf93139f91a8c93ee83d2327667ba3f6/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/d6a4c9bccf93139f91a8c93ee83d2327667ba3f6/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=d6a4c9bccf93139f91a8c93ee83d2327667ba3f6", "filename": "package.json", "sha": "605695b3f63e04d8f6ed03c385110ffb98f8d22d", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.8.0\",\n+  \"version\": \"2.8.1\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}], "748": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/ca4376b4c37d111ea6605ff749aee78ca4d203b9/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ca4376b4c37d111ea6605ff749aee78ca4d203b9/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=ca4376b4c37d111ea6605ff749aee78ca4d203b9", "filename": "src/adapters/shell.coffee", "sha": "68177a7affe826d98713d0249d4981a42f81bf04", "additions": 0, "patch": "@@ -24,9 +24,6 @@ class Shell extends Adapter\n     stdin = process.openStdin()\n     stdout = process.stdout\n \n-    process.on 'uncaughtException', (err) =>\n-      @robot.logger.error err.stack\n-\n     @repl = Readline.createInterface stdin, stdout, null\n \n     @repl.on 'close', =>", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ca4376b4c37d111ea6605ff749aee78ca4d203b9/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ca4376b4c37d111ea6605ff749aee78ca4d203b9/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=ca4376b4c37d111ea6605ff749aee78ca4d203b9", "filename": "src/robot.coffee", "sha": "c2c4a721c3bda4e73ff0801f00a38dbbfefd4c10", "additions": 1, "patch": "@@ -165,6 +165,7 @@ class Robot\n   #\n   # Returns nothing.\n   invokeErrorHandlers: (err, msg) ->\n+    @logger.error err.stack\n     for errorHandler in @errorHandlers\n      try\n        errorHandler(err, msg)", "changes": 1}], "749": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/2bec3ff2965a4798032e37397a0dbc0885a3c12b/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/2bec3ff2965a4798032e37397a0dbc0885a3c12b/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=2bec3ff2965a4798032e37397a0dbc0885a3c12b", "filename": "docs/adapters.md", "sha": "f9b28aede3a35c4cf4e3e3434ce9be7176246e99", "additions": 1, "patch": "@@ -35,6 +35,7 @@ to have yours added to the list:\n * [Slack](https://github.com/tinyspeck/hubot-slack)\n * [Lingr](https://github.com/miyagawa/hubot-lingr)\n * [Gitter](https://github.com/huafu/hubot-gitter2)\n+* [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.\n \n ## Writing Your Own adapter\n ", "changes": 1}], "750": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/d018d6fd51afc0a68d4ff83b57f60b1b4263770b/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d018d6fd51afc0a68d4ff83b57f60b1b4263770b/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=d018d6fd51afc0a68d4ff83b57f60b1b4263770b", "filename": "src/scripts/google-images.coffee", "sha": "d1d62035ccab56980fa726fdfe661dbe87cef524", "additions": 2, "patch": "@@ -22,10 +22,10 @@ module.exports = (robot) ->\n     imagery = msg.match[1]\n \n     if imagery.match /^https?:\\/\\//i\n-      msg.send \"#{mustachify}#{imagery}\"\n+      msg.send \"#{mustachify}#{encodeURIComponent imagery}\"\n     else\n       imageMe msg, imagery, false, true, (url) ->\n-        msg.send \"#{mustachify}#{url}\"\n+        msg.send \"#{mustachify}#{encodeURIComponent url}\"\n \n imageMe = (msg, query, animated, faces, cb) ->\n   cb = animated if typeof animated == 'function'", "changes": 4}], "752": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/6906651fd28abe6b3f6960840e5ea0b1b0902ed0/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/6906651fd28abe6b3f6960840e5ea0b1b0902ed0/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=6906651fd28abe6b3f6960840e5ea0b1b0902ed0", "filename": "src/brain.coffee", "sha": "d06ca5888694c617dfafbffbbfb30480cf30b33a", "additions": 24, "patch": "@@ -148,6 +148,30 @@ class Brain extends EventEmitter\n \n     matchedUsers\n \n+  # Public: Override the base EventEmitter.on method to handle the 'loaded'\n+  # event even if it was emitted before registering the event listener. This is\n+  # needed to avoid timing issues. See:\n+  # https://github.com/github/hubot/issues/619\n+  #\n+  # Returns nothing.\n+  on: (event, listener) ->\n+    if event is 'loaded' and @loadedEventEmitted\n+      listener(@data)\n+    else\n+      EventEmitter.prototype.on.call this, event, listener\n+\n+  # Public: Override the base EventEmitter.emit method to handle the 'loaded'\n+  # event even if it was emitted before registering the event listener. This is\n+  # needed to avoid timing issues. See:\n+  # https://github.com/github/hubot/issues/619\n+  #\n+  # Returns nothing.\n+  emit: (args...) ->\n+    event = args[0]\n+    EventEmitter.prototype.emit.apply this, args\n+    if event is 'loaded'\n+      @loadedEventEmitted = true\n+\n # Private: Extend obj with objects passed as additional args.\n #\n # Returns the original object with updated changes.", "changes": 24}], "754": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/332ca191503503182d883dfa35f6c2179220cec8/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/332ca191503503182d883dfa35f6c2179220cec8/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=332ca191503503182d883dfa35f6c2179220cec8", "filename": "docs/adapters.md", "sha": "ed433cc68a4895d01e0073a24e1570dcb5341450", "additions": 1, "patch": "@@ -36,6 +36,7 @@ to have yours added to the list:\n * [Lingr](https://github.com/miyagawa/hubot-lingr)\n * [Gitter](https://github.com/huafu/hubot-gitter2)\n * [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.\n+* [Visual Studio Online](https://github.com/scrumdod/hubot-VSOnline)\n \n ## Writing Your Own adapter\n ", "changes": 1}], "755": [{"status": "modified", "deletions": 19, "raw_url": "https://github.com/hubotio/hubot/raw/18146ab4aa052de4d4a4e30d4be3e41a0d23bbba/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/18146ab4aa052de4d4a4e30d4be3e41a0d23bbba/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=18146ab4aa052de4d4a4e30d4be3e41a0d23bbba", "filename": "package.json", "sha": "449f8058de5e4051069ecc1fae8b62c7c1ec0259", "additions": 15, "patch": "@@ -3,41 +3,37 @@\n   \"version\": \"2.8.1\",\n \n   \"author\": \"hubot\",\n-\n   \"keywords\": [\n     \"github\",\n     \"hubot\",\n     \"campfire\",\n     \"bot\"\n   ],\n-\n   \"description\": \"A simple helpful robot for your Company\",\n-\n-  \"licenses\": [{\n-    \"type\": \"MIT\",\n-    \"url\": \"https://raw.github.com/github/hubot/master/LICENSE\"\n-  }],\n-\n-  \"repository\" : {\n+  \"licenses\": [\n+    {\n+      \"type\": \"MIT\",\n+      \"url\": \"https://raw.github.com/github/hubot/master/LICENSE\"\n+    }\n+  ],\n+  \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"https://github.com/github/hubot.git\"\n   },\n-\n   \"dependencies\": {\n-    \"coffee-script\":      \"1.6.3\",\n-    \"optparse\":           \"1.0.4\",\n-    \"scoped-http-client\": \"0.9.8\",\n-    \"log\":                \"1.4.0\",\n-    \"express\":            \"3.3.4\"\n+    \"coffee-script\": \"1.6.3\",\n+    \"cookie-parser\": \"^1.3.2\",\n+    \"express\": \"3.3.4\",\n+    \"express-session\": \"^1.7.6\",\n+    \"log\": \"1.4.0\",\n+    \"optparse\": \"1.0.4\",\n+    \"scoped-http-client\": \"0.9.8\"\n   },\n-\n   \"engines\": {\n     \"node\": \">= 0.8.x\",\n-    \"npm\":  \">= 1.1.x\"\n+    \"npm\": \">= 1.1.x\"\n   },\n-\n   \"main\": \"./index\",\n-\n   \"bin\": {\n     \"hubot\": \"./bin/hubot\"\n   }", "changes": 34}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/18146ab4aa052de4d4a4e30d4be3e41a0d23bbba/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/18146ab4aa052de4d4a4e30d4be3e41a0d23bbba/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=18146ab4aa052de4d4a4e30d4be3e41a0d23bbba", "filename": "src/robot.coffee", "sha": "3cb9502f55d7b3c4eddbfea437b4161b9323274c", "additions": 8, "patch": "@@ -269,7 +269,12 @@ class Robot\n     pass    = process.env.EXPRESS_PASSWORD\n     stat    = process.env.EXPRESS_STATIC\n \n+    sessionOptions =\n+      secret: @name + Date.now()\n+\n     express = require 'express'\n+    cookieParser = require 'cookie-parser'\n+    session = require 'express-session'\n \n     app = express()\n \n@@ -280,7 +285,9 @@ class Robot\n     app.use express.basicAuth user, pass if user and pass\n     app.use express.query()\n     app.use express.bodyParser()\n-    app.use express.static stat if stat\n+    app.use cookieParser()\n+    app.use session sessionOptions\n+    app.use express.static Path.normalize(\"#{__dirname}/#{stat}\") if stat\n \n     try\n       @server = app.listen(process.env.PORT || 8080, process.env.BIND_ADDRESS || '0.0.0.0')", "changes": 9}], "756": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ff54ec36bf2987efc44cd9f0f1fa47d0807a610c/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/ff54ec36bf2987efc44cd9f0f1fa47d0807a610c/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=ff54ec36bf2987efc44cd9f0f1fa47d0807a610c", "filename": "docs/README.md", "sha": "fbf55264eece2f5511667a9258c6cf76cd050438", "additions": 0, "patch": "@@ -48,7 +48,6 @@ is mostly useful for development. Make note of  `Hubot>`; this is the name he'll\n     hubot help <query> - Displays all help commands that match <query>.\n     hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n     hubot map me <query> - Returns a map view of the area returned by `query`.\n-    hubot math me <expression> - Calculate the given expression.\n     hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n     hubot mustache me <url> - Adds a mustache to the specified URL.\n     hubot ping - Reply with pong", "changes": 1}], "761": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9a149a3789c3a38150f74302fec8f68638b49d11/src/scripts/ping.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9a149a3789c3a38150f74302fec8f68638b49d11/src/scripts/ping.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/ping.coffee?ref=9a149a3789c3a38150f74302fec8f68638b49d11", "filename": "src/scripts/ping.coffee", "sha": "e8534faffc0a0a21bbfbc4524dbf2846965dbdeb", "additions": 6, "patch": "@@ -4,6 +4,7 @@\n # Commands:\n #   hubot ping - Reply with pong\n #   hubot echo <text> - Reply back with <text>\n+#   hubot delayedecho <timeout> <text> - Reply back with <text> after <timeout> ms\n #   hubot time - Reply with current time\n #   hubot die - End hubot process\n \n@@ -17,6 +18,11 @@ module.exports = (robot) ->\n   robot.respond /ECHO (.*)$/i, (msg) ->\n     msg.send msg.match[1]\n \n+  robot.respond /DELAYEDECHO (\\d+) (.*)$/i, (msg) ->\n+    timeout = parseInt(msg.match[1], 10)\n+    sendResponse = -> msg.send msg.match[2]\n+    setTimeout(sendResponse, timeout)\n+\n   robot.respond /TIME$/i, (msg) ->\n     msg.send \"Server time is: #{new Date()}\"\n ", "changes": 6}], "762": [{"status": "modified", "deletions": 31, "raw_url": "https://github.com/hubotio/hubot/raw/99e302c9ef3d0c04f6091e5c4af2287609050b9e/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/99e302c9ef3d0c04f6091e5c4af2287609050b9e/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=99e302c9ef3d0c04f6091e5c4af2287609050b9e", "filename": "src/robot.coffee", "sha": "06acc74db158ee145ec796b96088043d77a3c24e", "additions": 30, "patch": "@@ -346,37 +346,36 @@ class Robot\n     scriptName = Path.basename(path).replace /\\.(coffee|js)$/, ''\n     scriptDocumentation = {}\n \n-    Fs.readFile path, 'utf-8', (err, body) =>\n-      throw err if err?\n-\n-      currentSection = null\n-      for line in body.split \"\\n\"\n-        break unless line[0] is '#' or line.substr(0, 2) is '//'\n-\n-        cleanedLine = line.replace(/^(#|\\/\\/)\\s?/, \"\").trim()\n-\n-        continue if cleanedLine.length is 0\n-        continue if cleanedLine.toLowerCase() is 'none'\n-\n-        nextSection = cleanedLine.toLowerCase().replace(':', '')\n-        if nextSection in HUBOT_DOCUMENTATION_SECTIONS\n-          currentSection = nextSection\n-          scriptDocumentation[currentSection] = []\n-        else\n-          if currentSection\n-            scriptDocumentation[currentSection].push cleanedLine.trim()\n-            if currentSection is 'commands'\n-              @commands.push cleanedLine.trim()\n-\n-      if currentSection is null\n-        @logger.info \"#{path} is using deprecated documentation syntax\"\n-        scriptDocumentation.commands = []\n-        for line in body.split(\"\\n\")\n-          break    if not (line[0] is '#' or line.substr(0, 2) is '//')\n-          continue if not line.match('-')\n-          cleanedLine = line[2..line.length].replace(/^hubot/i, @name).trim()\n-          scriptDocumentation.commands.push cleanedLine\n-          @commands.push cleanedLine\n+    body = Fs.readFileSync path, 'utf-8'\n+\n+    currentSection = null\n+    for line in body.split \"\\n\"\n+      break unless line[0] is '#' or line.substr(0, 2) is '//'\n+\n+      cleanedLine = line.replace(/^(#|\\/\\/)\\s?/, \"\").trim()\n+\n+      continue if cleanedLine.length is 0\n+      continue if cleanedLine.toLowerCase() is 'none'\n+\n+      nextSection = cleanedLine.toLowerCase().replace(':', '')\n+      if nextSection in HUBOT_DOCUMENTATION_SECTIONS\n+        currentSection = nextSection\n+        scriptDocumentation[currentSection] = []\n+      else\n+        if currentSection\n+          scriptDocumentation[currentSection].push cleanedLine.trim()\n+          if currentSection is 'commands'\n+            @commands.push cleanedLine.trim()\n+\n+    if currentSection is null\n+      @logger.info \"#{path} is using deprecated documentation syntax\"\n+      scriptDocumentation.commands = []\n+      for line in body.split(\"\\n\")\n+        break    if not (line[0] is '#' or line.substr(0, 2) is '//')\n+        continue if not line.match('-')\n+        cleanedLine = line[2..line.length].replace(/^hubot/i, @name).trim()\n+        scriptDocumentation.commands.push cleanedLine\n+        @commands.push cleanedLine\n \n   # Public: A helper send function which delegates to the adapter's send\n   # function.", "changes": 61}], "764": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/77a6c8562c1b1ca95afe82efca8ee28e1249f140/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/77a6c8562c1b1ca95afe82efca8ee28e1249f140/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=77a6c8562c1b1ca95afe82efca8ee28e1249f140", "filename": "bin/hubot", "sha": "50ddb8d9508e0969cea609edf04da9ede5c1e288", "additions": 6, "patch": "@@ -2,7 +2,6 @@\n # vim:ft=coffee ts=2 sw=2 et :\n # -*- mode:coffee -*-\n \n-Creator  = require '../src/creator'\n Hubot    = require '..'\n \n Fs       = require 'fs'\n@@ -71,8 +70,12 @@ unless process.platform is \"win32\"\n     process.exit 0\n \n if Options.create\n-  creator = new Creator(Options.path)\n-  creator.run()\n+  console.error \"'hubot --create' is depreated. Use the yeoman generator instead:\"\n+  console.error \"    npm install -g generator-hubot\"\n+  console.error \"    mkdir yourbot\"\n+  console.error \"    yo hubot\"\n+  console.error \"See https://github.com/github/hubot/blob/master/docs/README.md for more details on getting started.\"\n+  process.exit 1\n \n else\n   adapterPath = Path.join __dirname, \"..\", \"src\", \"adapters\"", "changes": 9}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/77a6c8562c1b1ca95afe82efca8ee28e1249f140/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/77a6c8562c1b1ca95afe82efca8ee28e1249f140/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=77a6c8562c1b1ca95afe82efca8ee28e1249f140", "filename": "docs/README.md", "sha": "25c35765c2d3084c2b81d48f184b2983dfaf3394", "additions": 13, "patch": "@@ -5,20 +5,26 @@\n You will need [node.js](http://nodejs.org/) and [npm](https://npmjs.org/). Joyent has\n an [excellent blog post on how to get those installed](http://joyent.com/blog/installing-node-and-npm), so we'll omit those details here.\n \n-Once node and npm are ready, we can install hubot and coffeescript:\n+Once node and npm are ready, we can install the hubot generator:\n \n-    % npm install -g hubot coffee-script\n+    %  npm install -g yo generator-hubot\n \n-This will give us the `hubot` command, which is used for running a hubot, and more importantly now, generating your own hubot. The name of the new bot is\n-the last argument, and will be created in the directory of the same name. For\n-example, to create a new bot named myhubot:\n+This will give us the `hubot` [yeoman](http://yeoman.io/) generator. Now we\n+can make a new directory, and generate a new instance of hubot in it. For example, if\n+we wanted to make a bot called bender:\n \n-    % hubot --create myhubot\n+\n+    % mkdir myhubot\n+    % cd myhubot\n+    % yo hubot\n+\n+At this point, you'll be asked a few questions about who is creating the bot,\n+and which [adapter](adapters.md) you'll be using. Adapters are hubot's way of\n+integrating with different chat providers.\n \n If you are using git, the generated directory includes a .gitignore, so you can\n initialize and add everything:\n \n-    % cd myhubot\n     % git init\n     % git add .\n     % git commit -m \"Initial commit\"", "changes": 20}, {"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/77a6c8562c1b1ca95afe82efca8ee28e1249f140/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/77a6c8562c1b1ca95afe82efca8ee28e1249f140/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=77a6c8562c1b1ca95afe82efca8ee28e1249f140", "filename": "docs/scripting.md", "sha": "a0a563d02e79e3b48378225908d0e8491882e031", "additions": 11, "patch": "@@ -534,19 +534,20 @@ Hubot has an in-memory key-value store exposed as `robot.brain` that can be\n used to store and retrieve data by scripts.\n \n ```coffeescript\n-module.exports = (robot) ->\n-  robot.respond /have a beer/i, (msg) ->\n-    # Get number of beers had (coerced to a number).\n-    beersHad = robot.brain.get('totalBeers') * 1 or 0\n+robot.respond /have a soda/i, (msg) ->\n+  # Get number of sodas had (coerced to a number).\n+  sodasHad = robot.brain.get('totalSodas') * 1 or 0\n \n-    if beersHad > 4\n-      msg.reply \"I'm too drunk..\"\n+  if sodasHad > 4\n+    msg.reply \"I'm too fizzy..\"\n \n-    else\n-      msg.reply 'Sure!'\n+  else\n+    msg.reply 'Sure!'\n \n-      robot.brain.set 'totalBeers', beersHad+1\n-      # Or robot.brain.set totalBeers: beersHad+1\n+    robot.brain.set 'totalSodas', sodasHad+1\n+robot.respond /sleep it off/i, (msg) ->\n+  robot.brain.set 'totalSodas', 0\n+  robot.respond 'zzzzz'\n ```\n \n If the script needs to lookup user data, there are methods on `robot.brain` for looking up one or many users by id, name, or 'fuzzy' matching of name: `userForName`, `userForId`, `userForFuzzyName`, and `usersForFuzzyName`.", "changes": 21}, {"status": "removed", "deletions": 95, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/creator.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/creator.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/creator.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/creator.coffee", "sha": "19f9235c5c8e28ff87cd693270a3d04b06011d30", "additions": 0, "patch": "@@ -1,95 +0,0 @@\n-Fs   = require 'fs'\n-Path = require 'path'\n-\n-# Simple generator class for deploying a version of hubot on heroku\n-class Creator\n-  # Setup a ready to go version of hubot\n-  #\n-  # path - A String directory to create/upgrade scripts for\n-  constructor: (path) ->\n-    @path = path\n-    @templateDir = \"#{__dirname}/templates\"\n-    @scriptsDir  = \"#{__dirname}/scripts\"\n-\n-  # Create a folder if it doesn't already exist.\n-  #\n-  # Returns nothing.\n-  mkdir: (path) ->\n-    Fs.exists path, (exists) ->\n-      unless exists\n-        Fs.mkdirSync path, 0o0755\n-\n-  # Copy the contents of a file from one place to another.\n-  #\n-  # from - A String source file to copy, must exist on disk.\n-  # to   - A String destination file to write to.\n-  #\n-  # Returns nothing.\n-  copy: (from, to, callback) ->\n-    Fs.readFile from, \"utf8\", (err, data) ->\n-      console.log \"Copying #{Path.resolve(from)} -> #{Path.resolve(to)}\"\n-      Fs.writeFileSync to, data, \"utf8\"\n-\n-      callback(err, to) if callback?\n-\n-  # Rename a file.\n-  #\n-  # from - A String source file to rename, must exist on disk.\n-  # to   - A String destination file to write to.\n-  #\n-  # Returns nothing.\n-  rename: (from, to, callback) ->\n-    Fs.rename from, to, (err, data) ->\n-      console.log \"Renaming #{Path.resolve(from)} -> #{Path.resolve(to)}\"\n-\n-      callback(err, to) if callback?\n-\n-  # Copy the default scripts hubot ships with to the scripts folder\n-  # This allows people to easily remove scripts hubot defaults to if\n-  # they want. It also provides them with a few examples and a top\n-  # level scripts folder.\n-  #\n-  # path - The destination.\n-  #\n-  # Returns nothing.\n-  copyDefaultScripts: (path) ->\n-    for file in Fs.readdirSync(@scriptsDir)\n-      @copy \"#{@scriptsDir}/#{file}\", \"#{path}/#{file}\"\n-\n-  # Public: Run the creator process.\n-  #\n-  # Setup a ready to deploy folder that uses the hubot npm package\n-  # Overwriting basic hubot files if they exist\n-  #\n-  # Returns nothing.\n-  run: ->\n-    console.log \"Creating a hubot install at #{@path}\"\n-\n-    @mkdir(@path)\n-    @mkdir(\"#{@path}/bin\")\n-    @mkdir(\"#{@path}/scripts\")\n-\n-    @copyDefaultScripts(\"#{@path}/scripts\")\n-\n-    files = [\n-      \"Procfile\",\n-      \"package.json\",\n-      \"README.md\",\n-      \"gitignore\",\n-      \"hubot-scripts.json\",\n-      \"external-scripts.json\"\n-    ]\n-    for file in files\n-      @copy \"#{@templateDir}/#{file}\", \"#{@path}/#{file}\", (err, to)=>\n-        @rename \"#{@path}/gitignore\", \"#{@path}/.gitignore\" if to == \"#{@path}/gitignore\"\n-\n-    bins = [\n-      \"bin/hubot\",\n-      \"bin/hubot.cmd\"\n-    ]\n-\n-    for bin in bins\n-      @copy \"#{@templateDir}/#{bin}\", \"#{@path}/#{bin}\", (err, binPath) =>\n-        Fs.chmodSync binPath, 0o755\n-\n-module.exports = Creator", "changes": 95}, {"status": "removed", "deletions": 19, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/events.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/events.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/events.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/events.coffee", "sha": "b22010e6ca0ae89bd8642b9de427df7f4750da80", "additions": 0, "patch": "@@ -1,19 +0,0 @@\n-# Description:\n-#   Event system related utilities\n-#\n-# Commands:\n-#   hubot fake event <event> - Triggers the <event> event for debugging reasons\n-#\n-# Events:\n-#   debug - {user: <user object to send message to>}\n-\n-util = require 'util'\n-\n-module.exports = (robot) ->\n-\n-  robot.respond /FAKE EVENT (.*)/i, (msg) ->\n-    msg.send \"fake event '#{msg.match[1]}' triggered\"\n-    robot.emit msg.match[1], {user: msg.message.user}\n-\n-  robot.on 'debug', (event) ->\n-    robot.send event.user, util.inspect event\n\\ No newline at end of file", "changes": 19}, {"status": "removed", "deletions": 50, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/google-images.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/google-images.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/google-images.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/google-images.coffee", "sha": "d1d62035ccab56980fa726fdfe661dbe87cef524", "additions": 0, "patch": "@@ -1,50 +0,0 @@\n-# Description:\n-#   A way to interact with the Google Images API.\n-#\n-# Commands:\n-#   hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n-#   hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.\n-#   hubot mustache me <url> - Adds a mustache to the specified URL.\n-#   hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n-\n-module.exports = (robot) ->\n-  robot.respond /(image|img)( me)? (.*)/i, (msg) ->\n-    imageMe msg, msg.match[3], (url) ->\n-      msg.send url\n-\n-  robot.respond /animate( me)? (.*)/i, (msg) ->\n-    imageMe msg, msg.match[2], true, (url) ->\n-      msg.send url\n-\n-  robot.respond /(?:mo?u)?sta(?:s|c)he?(?: me)? (.*)/i, (msg) ->\n-    type = Math.floor(Math.random() * 6)\n-    mustachify = \"http://mustachify.me/#{type}?src=\"\n-    imagery = msg.match[1]\n-\n-    if imagery.match /^https?:\\/\\//i\n-      msg.send \"#{mustachify}#{encodeURIComponent imagery}\"\n-    else\n-      imageMe msg, imagery, false, true, (url) ->\n-        msg.send \"#{mustachify}#{encodeURIComponent url}\"\n-\n-imageMe = (msg, query, animated, faces, cb) ->\n-  cb = animated if typeof animated == 'function'\n-  cb = faces if typeof faces == 'function'\n-  q = v: '1.0', rsz: '8', q: query, safe: 'active'\n-  q.imgtype = 'animated' if typeof animated is 'boolean' and animated is true\n-  q.imgtype = 'face' if typeof faces is 'boolean' and faces is true\n-  msg.http('http://ajax.googleapis.com/ajax/services/search/images')\n-    .query(q)\n-    .get() (err, res, body) ->\n-      images = JSON.parse(body)\n-      images = images.responseData?.results\n-      if images?.length > 0\n-        image = msg.random images\n-        cb ensureImageExtension image.unescapedUrl\n-\n-ensureImageExtension = (url) ->\n-  ext = url.split('.').pop()\n-  if /(png|jpe?g|gif)/i.test(ext)\n-    url\n-  else\n-    \"#{url}#.png\"", "changes": 50}, {"status": "removed", "deletions": 85, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/help.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/help.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/help.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/help.coffee", "sha": "943f4860996a9d5ad230092f816fa65649e5ad33", "additions": 0, "patch": "@@ -1,85 +0,0 @@\n-# Description:\n-#   Generates help commands for Hubot.\n-#\n-# Commands:\n-#   hubot help - Displays all of the help commands that Hubot knows about.\n-#   hubot help <query> - Displays all help commands that match <query>.\n-#\n-# URLS:\n-#   /hubot/help\n-#\n-# Notes:\n-#   These commands are grabbed from comment blocks at the top of each file.\n-\n-helpContents = (name, commands) ->\n-\n-  \"\"\"\n-<!DOCTYPE html>\n-<html>\n-  <head>\n-  <meta charset=\"utf-8\">\n-  <title>#{name} Help</title>\n-  <style type=\"text/css\">\n-    body {\n-      background: #d3d6d9;\n-      color: #636c75;\n-      text-shadow: 0 1px 1px rgba(255, 255, 255, .5);\n-      font-family: Helvetica, Arial, sans-serif;\n-    }\n-    h1 {\n-      margin: 8px 0;\n-      padding: 0;\n-    }\n-    .commands {\n-      font-size: 13px;\n-    }\n-    p {\n-      border-bottom: 1px solid #eee;\n-      margin: 6px 0 0 0;\n-      padding-bottom: 5px;\n-    }\n-    p:last-child {\n-      border: 0;\n-    }\n-  </style>\n-  </head>\n-  <body>\n-    <h1>#{name} Help</h1>\n-    <div class=\"commands\">\n-      #{commands}\n-    </div>\n-  </body>\n-</html>\n-  \"\"\"\n-\n-module.exports = (robot) ->\n-  robot.respond /help\\s*(.*)?$/i, (msg) ->\n-    cmds = robot.helpCommands()\n-    filter = msg.match[1]\n-\n-    if filter\n-      cmds = cmds.filter (cmd) ->\n-        cmd.match new RegExp(filter, 'i')\n-      if cmds.length == 0\n-        msg.send \"No available commands match #{filter}\"\n-        return\n-\n-    prefix = robot.alias or robot.name\n-    cmds = cmds.map (cmd) ->\n-      cmd = cmd.replace /hubot/ig, robot.name\n-      cmd.replace new RegExp(\"^#{robot.name}\"), prefix\n-\n-    emit = cmds.join \"\\n\"\n-\n-    msg.send emit\n-\n-  robot.router.get \"/#{robot.name}/help\", (req, res) ->\n-    cmds = robot.helpCommands().map (cmd) ->\n-      cmd.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')\n-\n-    emit = \"<p>#{cmds.join '</p><p>'}</p>\"\n-\n-    emit = emit.replace /hubot/ig, \"<b>#{robot.name}</b>\"\n-\n-    res.setHeader 'content-type', 'text/html'\n-    res.end helpContents robot.name, emit", "changes": 85}, {"status": "removed", "deletions": 42, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/httpd.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/httpd.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/httpd.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/httpd.coffee", "sha": "79cf60cbffc5fbfd085a68477b9363170a833c73", "additions": 0, "patch": "@@ -1,42 +0,0 @@\n-# Description:\n-#   A simple interaction with the built in HTTP Daemon\n-#\n-# Dependencies:\n-#   None\n-#\n-# Configuration:\n-#   None\n-#\n-# Commands:\n-#   None\n-#\n-# URLS:\n-#   /hubot/version\n-#   /hubot/ping\n-#   /hubot/time\n-#   /hubot/info\n-#   /hubot/ip\n-\n-spawn = require('child_process').spawn\n-\n-module.exports = (robot) ->\n-\n-  robot.router.get \"/hubot/version\", (req, res) ->\n-    res.end robot.version\n-\n-  robot.router.post \"/hubot/ping\", (req, res) ->\n-    res.end \"PONG\"\n-\n-  robot.router.get \"/hubot/time\", (req, res) ->\n-    res.end \"Server time is: #{new Date()}\"\n-\n-  robot.router.get \"/hubot/info\", (req, res) ->\n-    child = spawn('/bin/sh', ['-c', \"echo I\\\\'m $LOGNAME@$(hostname):$(pwd) \\\\($(git rev-parse HEAD)\\\\)\"])\n-\n-    child.stdout.on 'data', (data) ->\n-      res.end \"#{data.toString().trim()} running node #{process.version} [pid: #{process.pid}]\"\n-      child.stdin.end()\n-\n-  robot.router.get \"/hubot/ip\", (req, res) ->\n-    robot.http('http://ifconfig.me/ip').get() (err, r, body) ->\n-      res.end body", "changes": 42}, {"status": "removed", "deletions": 26, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/maps.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/maps.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/maps.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/maps.coffee", "sha": "6db6ce2a3443f47af7249c2fbd07d581643fa564", "additions": 0, "patch": "@@ -1,26 +0,0 @@\n-# Description:\n-#   Interacts with the Google Maps API.\n-#\n-# Commands:\n-#   hubot map me <query> - Returns a map view of the area returned by `query`.\n-\n-module.exports = (robot) ->\n-\n-  robot.respond /(?:(satellite|terrain|hybrid)[- ])?map me (.+)/i, (msg) ->\n-    mapType  = msg.match[1] or \"roadmap\"\n-    location = msg.match[2]\n-    mapUrl   = \"http://maps.google.com/maps/api/staticmap?markers=\" +\n-                encodeURIComponent(location) +\n-                \"&size=400x400&maptype=\" +\n-                mapType +\n-                \"&sensor=false\" +\n-                \"&format=png\" # So campfire knows it's an image\n-    url      = \"http://maps.google.com/maps?q=\" +\n-               encodeURIComponent(location) +\n-              \"&hl=en&sll=37.0625,-95.677068&sspn=73.579623,100.371094&vpsrc=0&hnear=\" +\n-              encodeURIComponent(location) +\n-              \"&t=m&z=11\"\n-\n-    msg.send mapUrl\n-    msg.send url\n-", "changes": 26}, {"status": "removed", "deletions": 27, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/ping.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/ping.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/ping.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/ping.coffee", "sha": "3162c216644f9b15894df35318ab9023061510ba", "additions": 0, "patch": "@@ -1,27 +0,0 @@\n-# Description:\n-#   Utility commands surrounding Hubot uptime.\n-#\n-# Commands:\n-#   hubot ping - Reply with pong\n-#   hubot adapter - Reply with the adapter\n-#   hubot echo <text> - Reply back with <text>\n-#   hubot time - Reply with current time\n-#   hubot die - End hubot process\n-\n-module.exports = (robot) ->\n-  robot.respond /PING$/i, (msg) ->\n-    msg.send \"PONG\"\n-\n-  robot.respond /ADAPTER$/i, (msg) ->\n-    msg.send robot.adapterName\n-\n-  robot.respond /ECHO (.*)$/i, (msg) ->\n-    msg.send msg.match[1]\n-\n-  robot.respond /TIME$/i, (msg) ->\n-    msg.send \"Server time is: #{new Date()}\"\n-\n-  robot.respond /DIE$/i, (msg) ->\n-    msg.send \"Goodbye, cruel world.\"\n-    process.exit 0\n-", "changes": 27}, {"status": "removed", "deletions": 31, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/pugme.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/pugme.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/pugme.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/pugme.coffee", "sha": "5b879b326cd3e598482406581fcc917c205c37a9", "additions": 0, "patch": "@@ -1,31 +0,0 @@\n-# Description:\n-#   Pugme is the most important thing in life\n-#\n-# Dependencies:\n-#   None\n-#\n-# Configuration:\n-#   None\n-#\n-# Commands:\n-#   hubot pug me - Receive a pug\n-#   hubot pug bomb N - get N pugs\n-\n-module.exports = (robot) ->\n-\n-  robot.respond /pug me/i, (msg) ->\n-    msg.http(\"http://pugme.herokuapp.com/random\")\n-      .get() (err, res, body) ->\n-        msg.send JSON.parse(body).pug\n-\n-  robot.respond /pug bomb( (\\d+))?/i, (msg) ->\n-    count = msg.match[2] || 5\n-    msg.http(\"http://pugme.herokuapp.com/bomb?count=\" + count)\n-      .get() (err, res, body) ->\n-        msg.send pug for pug in JSON.parse(body).pugs\n-\n-  robot.respond /how many pugs are there/i, (msg) ->\n-    msg.http(\"http://pugme.herokuapp.com/count\")\n-      .get() (err, res, body) ->\n-        msg.send \"There are #{JSON.parse(body).pug_count} pugs.\"\n-", "changes": 31}, {"status": "removed", "deletions": 89, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/roles.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/roles.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/roles.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/roles.coffee", "sha": "bceede1c67f45610858f66e472732553320f744d", "additions": 0, "patch": "@@ -1,89 +0,0 @@\n-# Description:\n-#   Assign roles to people you're chatting with\n-#\n-# Commands:\n-#   hubot <user> is a badass guitarist - assign a role to a user\n-#   hubot <user> is not a badass guitarist - remove a role from a user\n-#   hubot who is <user> - see what roles a user has\n-#\n-# Examples:\n-#   hubot holman is an ego surfer\n-#   hubot holman is not an ego surfer\n-\n-module.exports = (robot) ->\n-\n-  if process.env.HUBOT_AUTH_ADMIN?\n-    robot.logger.warning 'The HUBOT_AUTH_ADMIN environment variable is set not going to load roles.coffee, you should delete it'\n-    return\n-\n-  getAmbiguousUserText = (users) ->\n-    \"Be more specific, I know #{users.length} people named like that: #{(user.name for user in users).join(\", \")}\"\n-\n-  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n-    joiner = ', '\n-    name = msg.match[1].trim()\n-\n-    if name is \"you\"\n-      msg.send \"Who ain't I?\"\n-    else if name is robot.name\n-      msg.send \"The best.\"\n-    else\n-      users = robot.brain.usersForFuzzyName(name)\n-      if users.length is 1\n-        user = users[0]\n-        user.roles = user.roles or [ ]\n-        if user.roles.length > 0\n-          if user.roles.join('').search(',') > -1\n-            joiner = '; '\n-          msg.send \"#{name} is #{user.roles.join(joiner)}.\"\n-        else\n-          msg.send \"#{name} is nothing to me.\"\n-      else if users.length > 1\n-        msg.send getAmbiguousUserText users\n-      else\n-        msg.send \"#{name}? Never heard of 'em\"\n-\n-  robot.respond /@?([\\w .\\-_]+) is ([\"'\\w: \\-_]+)[.!]*$/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[2].trim()\n-\n-    unless name in ['', 'who', 'what', 'where', 'when', 'why']\n-      unless newRole.match(/^not\\s+/i)\n-        users = robot.brain.usersForFuzzyName(name)\n-        if users.length is 1\n-          user = users[0]\n-          user.roles = user.roles or [ ]\n-\n-          if newRole in user.roles\n-            msg.send \"I know\"\n-          else\n-            user.roles.push(newRole)\n-            if name.toLowerCase() is robot.name.toLowerCase()\n-              msg.send \"Ok, I am #{newRole}.\"\n-            else\n-              msg.send \"Ok, #{name} is #{newRole}.\"\n-        else if users.length > 1\n-          msg.send getAmbiguousUserText users\n-        else\n-          msg.send \"I don't know anything about #{name}.\"\n-\n-  robot.respond /@?([\\w .\\-_]+) is not ([\"'\\w: \\-_]+)[.!]*$/i, (msg) ->\n-    name    = msg.match[1].trim()\n-    newRole = msg.match[2].trim()\n-\n-    unless name in ['', 'who', 'what', 'where', 'when', 'why']\n-      users = robot.brain.usersForFuzzyName(name)\n-      if users.length is 1\n-        user = users[0]\n-        user.roles = user.roles or [ ]\n-\n-        if newRole not in user.roles\n-          msg.send \"I know.\"\n-        else\n-          user.roles = (role for role in user.roles when role isnt newRole)\n-          msg.send \"Ok, #{name} is no longer #{newRole}.\"\n-      else if users.length > 1\n-        msg.send getAmbiguousUserText users\n-      else\n-        msg.send \"I don't know anything about #{name}.\"\n-", "changes": 89}, {"status": "removed", "deletions": 29, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/rules.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/rules.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/rules.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/rules.coffee", "sha": "614f58b676e42b8e73b7990f4e8738fa642ea9c2", "additions": 0, "patch": "@@ -1,29 +0,0 @@\n-# Description:\n-#   Make sure that hubot knows the rules.\n-#\n-# Commands:\n-#   hubot the rules - Make sure hubot still knows the rules.\n-#\n-# Notes:\n-#   DON'T DELETE THIS SCRIPT! ALL ROBAWTS MUST KNOW THE RULES\n-\n-rules = [\n-  \"1. A robot may not injure a human being or, through inaction, allow a human being to come to harm.\",\n-  \"2. A robot must obey any orders given to it by human beings, except where such orders would conflict with the First Law.\",\n-  \"3. A robot must protect its own existence as long as such protection does not conflict with the First or Second Law.\"\n-  ]\n-\n-otherRules = [\n-  \"A developer may not injure Apple or, through inaction, allow Apple to come to harm.\",\n-  \"A developer must obey any orders given to it by Apple, except where such orders would conflict with the First Law.\",\n-  \"A developer must protect its own existence as long as such protection does not conflict with the First or Second Law.\"\n-  ]\n-\n-module.exports = (robot) ->\n-  robot.respond /(what are )?the (three |3 )?(rules|laws)/i, (msg) ->\n-    text = msg.message.text\n-    if text.match(/apple/i) or text.match(/dev/i)\n-      msg.send otherRules.join('\\n')\n-    else\n-      msg.send rules.join('\\n')\n-", "changes": 29}, {"status": "removed", "deletions": 25, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/storage.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/storage.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/storage.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/storage.coffee", "sha": "a5ad42019d8c6ec105bc279fba7fad4573d6ac83", "additions": 0, "patch": "@@ -1,25 +0,0 @@\n-# Description:\n-#   Inspect the data in redis easily\n-#\n-# Commands:\n-#   hubot show users - Display all users that hubot knows about\n-#   hubot show storage - Display the contents that are persisted in the brain\n-\n-\n-Util = require \"util\"\n-\n-module.exports = (robot) ->\n-  robot.respond /show storage$/i, (msg) ->\n-    output = Util.inspect(robot.brain.data, false, 4)\n-    msg.send output\n-\n-  robot.respond /show users$/i, (msg) ->\n-    response = \"\"\n-\n-    for own key, user of robot.brain.data.users\n-      response += \"#{user.id} #{user.name}\"\n-      response += \" <#{user.email_address}>\" if user.email_address\n-      response += \"\\n\"\n-\n-    msg.send response\n-", "changes": 25}, {"status": "removed", "deletions": 114, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/translate.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/translate.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/translate.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/translate.coffee", "sha": "673c2b84e2f82a2ac9371411baaa90fb08b87ed6", "additions": 0, "patch": "@@ -1,114 +0,0 @@\n-# Description:\n-#   Allows Hubot to know many languages.\n-#\n-# Commands:\n-#   hubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.\n-#   hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n-\n-languages =\n-  \"af\": \"Afrikaans\",\n-  \"sq\": \"Albanian\",\n-  \"ar\": \"Arabic\",\n-  \"az\": \"Azerbaijani\",\n-  \"eu\": \"Basque\",\n-  \"bn\": \"Bengali\",\n-  \"be\": \"Belarusian\",\n-  \"bg\": \"Bulgarian\",\n-  \"ca\": \"Catalan\",\n-  \"zh-CN\": \"Simplified Chinese\",\n-  \"zh-TW\": \"Traditional Chinese\",\n-  \"hr\": \"Croatian\",\n-  \"cs\": \"Czech\",\n-  \"da\": \"Danish\",\n-  \"nl\": \"Dutch\",\n-  \"en\": \"English\",\n-  \"eo\": \"Esperanto\",\n-  \"et\": \"Estonian\",\n-  \"tl\": \"Filipino\",\n-  \"fi\": \"Finnish\",\n-  \"fr\": \"French\",\n-  \"gl\": \"Galician\",\n-  \"ka\": \"Georgian\",\n-  \"de\": \"German\",\n-  \"el\": \"Greek\",\n-  \"gu\": \"Gujarati\",\n-  \"ht\": \"Haitian Creole\",\n-  \"iw\": \"Hebrew\",\n-  \"hi\": \"Hindi\",\n-  \"hu\": \"Hungarian\",\n-  \"is\": \"Icelandic\",\n-  \"id\": \"Indonesian\",\n-  \"ga\": \"Irish\",\n-  \"it\": \"Italian\",\n-  \"ja\": \"Japanese\",\n-  \"kn\": \"Kannada\",\n-  \"ko\": \"Korean\",\n-  \"la\": \"Latin\",\n-  \"lv\": \"Latvian\",\n-  \"lt\": \"Lithuanian\",\n-  \"mk\": \"Macedonian\",\n-  \"ms\": \"Malay\",\n-  \"mt\": \"Maltese\",\n-  \"no\": \"Norwegian\",\n-  \"fa\": \"Persian\",\n-  \"pl\": \"Polish\",\n-  \"pt\": \"Portuguese\",\n-  \"ro\": \"Romanian\",\n-  \"ru\": \"Russian\",\n-  \"sr\": \"Serbian\",\n-  \"sk\": \"Slovak\",\n-  \"sl\": \"Slovenian\",\n-  \"es\": \"Spanish\",\n-  \"sw\": \"Swahili\",\n-  \"sv\": \"Swedish\",\n-  \"ta\": \"Tamil\",\n-  \"te\": \"Telugu\",\n-  \"th\": \"Thai\",\n-  \"tr\": \"Turkish\",\n-  \"uk\": \"Ukrainian\",\n-  \"ur\": \"Urdu\",\n-  \"vi\": \"Vietnamese\",\n-  \"cy\": \"Welsh\",\n-  \"yi\": \"Yiddish\"\n-\n-getCode = (language,languages) ->\n-  for code, lang of languages\n-      return code if lang.toLowerCase() is language.toLowerCase()\n-\n-module.exports = (robot) ->\n-  language_choices = (language for _, language of languages).sort().join('|')\n-  pattern = new RegExp('translate(?: me)?' +\n-                       \"(?: from (#{language_choices}))?\" +\n-                       \"(?: (?:in)?to (#{language_choices}))?\" +\n-                       '(.*)', 'i')\n-  robot.respond pattern, (msg) ->\n-    term   = \"\\\"#{msg.match[3]}\\\"\"\n-    origin = if msg.match[1] isnt undefined then getCode(msg.match[1], languages) else 'auto'\n-    target = if msg.match[2] isnt undefined then getCode(msg.match[2], languages) else 'en'\n-    \n-    msg.http(\"https://translate.google.com/translate_a/t\")\n-      .query({\n-        client: 't'\n-        hl: 'en'\n-        multires: 1\n-        sc: 1\n-        sl: origin\n-        ssel: 0\n-        tl: target\n-        tsel: 0\n-        uptl: \"en\"\n-        text: term\n-      })\n-      .header('User-Agent', 'Mozilla/5.0')\n-      .get() (err, res, body) ->\n-        data   = body\n-        if data.length > 4 and data[0] == '['\n-          parsed = eval(data)\n-          language =languages[parsed[2]]\n-          parsed = parsed[0] and parsed[0][0] and parsed[0][0][0]\n-          if parsed\n-            if msg.match[2] is undefined\n-              msg.send \"#{term} is #{language} for #{parsed}\"\n-            else\n-              msg.send \"The #{language} #{term} translates as #{parsed} in #{languages[target]}\"\n-", "changes": 114}, {"status": "removed", "deletions": 28, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/youtube.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/scripts/youtube.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/youtube.coffee?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/scripts/youtube.coffee", "sha": "702c4e27147fab31cbe17a31b02a6edc501af897", "additions": 0, "patch": "@@ -1,28 +0,0 @@\n-# Description:\n-#   Messing around with the YouTube API.\n-#\n-# Commands:\n-#   hubot youtube me <query> - Searches YouTube for the query and returns the video embed link.\n-module.exports = (robot) ->\n-  robot.respond /(youtube|yt)( me)? (.*)/i, (msg) ->\n-    query = msg.match[3]\n-    robot.http(\"http://gdata.youtube.com/feeds/api/videos\")\n-      .query({\n-        orderBy: \"relevance\"\n-        'max-results': 15\n-        alt: 'json'\n-        q: query\n-      })\n-      .get() (err, res, body) ->\n-        videos = JSON.parse(body)\n-        videos = videos.feed.entry\n-\n-        unless videos?\n-          msg.send \"No video results for \\\"#{query}\\\"\"\n-          return\n-\n-        video  = msg.random videos\n-        video.link.forEach (link) ->\n-          if link.rel is \"alternate\" and link.type is \"text/html\"\n-            msg.send link.href\n-", "changes": 28}, {"status": "removed", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/Procfile?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/templates/Procfile", "sha": "cf99af3140a32aa0c96da110532973b53c479663", "additions": 0, "patch": "@@ -1 +0,0 @@\n-web: bin/hubot -a campfire -n Hubot", "changes": 1}, {"status": "removed", "deletions": 157, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/templates/README.md", "sha": "1ffdf873775de8d6c7d9c8de21d0a98ae4bcf3b9", "additions": 0, "patch": "@@ -1,157 +0,0 @@\n-# Hubot\n-\n-This is a version of GitHub's Campfire bot, hubot. He's pretty cool.\n-\n-This version is designed to be deployed on [Heroku][heroku]. This README was generated for you by hubot to help get you started. Definitely update and improve to talk about your own instance, how to use and deploy, what functionality he has, etc!\n-\n-[heroku]: http://www.heroku.com\n-\n-### Testing Hubot Locally\n-\n-You can test your hubot by running the following.\n-\n-    % bin/hubot\n-\n-You'll see some start up output about where your scripts come from and a\n-prompt.\n-\n-    [Sun, 04 Dec 2011 18:41:11 GMT] INFO Loading adapter shell\n-    [Sun, 04 Dec 2011 18:41:11 GMT] INFO Loading scripts from /home/tomb/Development/hubot/scripts\n-    [Sun, 04 Dec 2011 18:41:11 GMT] INFO Loading scripts from /home/tomb/Development/hubot/src/scripts\n-    Hubot>\n-\n-Then you can interact with hubot by typing `hubot help`.\n-\n-    Hubot> hubot help\n-\n-    Hubot> animate me <query> - The same thing as `image me`, except adds a few\n-    convert me <expression> to <units> - Convert expression to given units.\n-    help - Displays all of the help commands that Hubot knows about.\n-    ...\n-\n-\n-### Scripting\n-\n-Take a look at the scripts in the `./scripts` folder for examples.\n-Delete any scripts you think are useless or boring.  Add whatever functionality you\n-want hubot to have. Read up on what you can do with hubot in the [Scripting Guide](https://github.com/github/hubot/blob/master/docs/scripting.md).\n-\n-### Redis Persistence\n-\n-If you are going to use the `redis-brain.coffee` script from `hubot-scripts`\n-(strongly suggested), you will need to add the Redis to Go addon on Heroku which requires a verified\n-account or you can create an account at [Redis to Go][redistogo] and manually\n-set the `REDISTOGO_URL` variable.\n-\n-    % heroku config:set REDISTOGO_URL=\"...\"\n-\n-If you don't require any persistence feel free to remove the\n-`redis-brain.coffee` from `hubot-scripts.json` and you don't need to worry\n-about redis at all.\n-\n-[redistogo]: https://redistogo.com/\n-\n-## Adapters\n-\n-Adapters are the interface to the service you want your hubot to run on. This\n-can be something like Campfire or IRC. There are a number of third party\n-adapters that the community have contributed. Check\n-[Hubot Adapters][hubot-adapters] for the available ones.\n-\n-If you would like to run a non-Campfire or shell adapter you will need to add\n-the adapter package as a dependency to the `package.json` file in the\n-`dependencies` section.\n-\n-Once you've added the dependency and run `npm install` to install it you can\n-then run hubot with the adapter.\n-\n-    % bin/hubot -a <adapter>\n-\n-Where `<adapter>` is the name of your adapter without the `hubot-` prefix.\n-\n-[hubot-adapters]: https://github.com/github/hubot/blob/master/docs/adapters.md\n-\n-## hubot-scripts\n-\n-There will inevitably be functionality that everyone will want. Instead\n-of adding it to hubot itself, you can submit pull requests to\n-[hubot-scripts][hubot-scripts].\n-\n-To enable scripts from the hubot-scripts package, add the script name with\n-extension as a double quoted string to the `hubot-scripts.json` file in this\n-repo.\n-\n-[hubot-scripts]: https://github.com/github/hubot-scripts\n-\n-## external-scripts\n-\n-Tired of waiting for your script to be merged into `hubot-scripts`? Want to\n-maintain the repository and package yourself? Then this added functionality\n-maybe for you!\n-\n-Hubot is now able to load scripts from third-party `npm` packages! To enable\n-this functionality you can follow the following steps.\n-\n-1. Add the packages as dependencies into your `package.json`\n-2. `npm install` to make sure those packages are installed\n-\n-To enable third-party scripts that you've added you will need to add the package\n-name as a double quoted string to the `external-scripts.json` file in this repo.\n-\n-## Deployment\n-\n-    % heroku create --stack cedar\n-    % git push heroku master\n-    % heroku ps:scale app=1\n-\n-If your Heroku account has been verified you can run the following to enable\n-and add the Redis to Go addon to your app.\n-\n-    % heroku addons:add redistogo:nano\n-\n-If you run into any problems, checkout Heroku's [docs][heroku-node-docs].\n-\n-You'll need to edit the `Procfile` to set the name of your hubot.\n-\n-More detailed documentation can be found on the\n-[deploying hubot onto Heroku][deploy-heroku] wiki page.\n-\n-### Deploying to UNIX or Windows\n-\n-If you would like to deploy to either a UNIX operating system or Windows.\n-Please check out the [deploying hubot onto UNIX][deploy-unix] and\n-[deploying hubot onto Windows][deploy-windows] wiki pages.\n-\n-[heroku-node-docs]: http://devcenter.heroku.com/articles/node-js\n-[deploy-heroku]: https://github.com/github/hubot/blob/master/docs/deploying/heroku.md\n-[deploy-unix]: https://github.com/github/hubot/blob/master/docs/deploying/unix.md\n-[deploy-windows]: https://github.com/github/hubot/blob/master/docs/deploying/unix.md\n-\n-## Campfire Variables\n-\n-If you are using the Campfire adapter you will need to set some environment\n-variables. Refer to the documentation for other adapters and the configuraiton\n-of those, links to the adapters can be found on [Hubot Adapters][hubot-adapters].\n-\n-Create a separate Campfire user for your bot and get their token from the web\n-UI.\n-\n-    % heroku config:set HUBOT_CAMPFIRE_TOKEN=\"...\"\n-\n-Get the numeric IDs of the rooms you want the bot to join, comma delimited. If\n-you want the bot to connect to `https://mysubdomain.campfirenow.com/room/42` \n-and `https://mysubdomain.campfirenow.com/room/1024` then you'd add it like this:\n-\n-    % heroku config:set HUBOT_CAMPFIRE_ROOMS=\"42,1024\"\n-\n-Add the subdomain hubot should connect to. If you web URL looks like\n-`http://mysubdomain.campfirenow.com` then you'd add it like this:\n-\n-    % heroku config:set HUBOT_CAMPFIRE_ACCOUNT=\"mysubdomain\"\n-\n-[hubot-adapters]: https://github.com/github/hubot/blob/master/docs/adapters.md\n-\n-## Restart the bot\n-\n-You may want to get comfortable with `heroku logs` and `heroku restart`\n-if you're having issues.", "changes": 157}, {"status": "removed", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/bin/hubot?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/templates/bin/hubot", "sha": "2c1a31cdc68cbd49482d8560510d50048e42de25", "additions": 0, "patch": "@@ -1,8 +0,0 @@\n-#!/bin/sh\n-\n-set -e\n-\n-npm install\n-export PATH=\"node_modules/.bin:node_modules/hubot/node_modules/.bin:$PATH\"\n-\n-exec node_modules/.bin/hubot \"$@\"", "changes": 8}, {"status": "removed", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/bin/hubot.cmd", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/bin/hubot.cmd", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/bin/hubot.cmd?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/templates/bin/hubot.cmd", "sha": "a284ba5fd3fca30a68e0d85c297013dba70cef57", "additions": 0, "patch": "@@ -1,3 +0,0 @@\n-@echo off\r\n-\r\n-npm install && node_modules\\.bin\\hubot.cmd %* \n\\ No newline at end of file", "changes": 3}, {"status": "removed", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/external-scripts.json", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/external-scripts.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/external-scripts.json?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/templates/external-scripts.json", "sha": "fe51488c7066f6687ef680d6bfaa4f7768ef205c", "additions": 0, "patch": "@@ -1 +0,0 @@\n-[]", "changes": 1}, {"status": "removed", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/gitignore", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/gitignore", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/gitignore?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/templates/gitignore", "sha": "b010ffd23c90e37c50fe0d27dfb3d2192999c5c3", "additions": 0, "patch": "@@ -1,2 +0,0 @@\n-node_modules\n-.DS_Store*", "changes": 2}, {"status": "removed", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/hubot-scripts.json", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/hubot-scripts.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/hubot-scripts.json?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/templates/hubot-scripts.json", "sha": "a8c06280f285695e641129e0332369caabdc2172", "additions": 0, "patch": "@@ -1 +0,0 @@\n-[\"redis-brain.coffee\", \"shipit.coffee\"]", "changes": 1}, {"status": "removed", "deletions": 36, "raw_url": "https://github.com/hubotio/hubot/raw/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/69d49db0f76de080805b2959ef265eb7f1d19539/src/templates/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/package.json?ref=69d49db0f76de080805b2959ef265eb7f1d19539", "filename": "src/templates/package.json", "sha": "37022f714b9f147dd02828dfd4b3c4870a086911", "additions": 0, "patch": "@@ -1,36 +0,0 @@\n-{\n-  \"name\": \"hosted-hubot\",\n-  \"version\": \"2.7.1\",\n-  \"private\": true,\n-\n-  \"author\": \"GitHub Inc.\",\n-\n-  \"keywords\": [\n-    \"github\",\n-    \"hubot\",\n-    \"campfire\",\n-    \"bot\"\n-  ],\n-\n-  \"description\": \"A simple helpful robot for your Company\",\n-\n-  \"licenses\": [{\n-    \"type\": \"MIT\",\n-    \"url\": \"https://github.com/github/hubot/raw/master/LICENSE\"\n-  }],\n-\n-  \"repository\" : {\n-    \"type\": \"git\",\n-    \"url\": \"https://github.com/github/hubot.git\"\n-  },\n-\n-  \"dependencies\": {\n-    \"hubot\":         \">= 2.6.0 < 3.0.0\",\n-    \"hubot-scripts\": \">= 2.5.0 < 3.0.0\"\n-  },\n-\n-  \"engines\": {\n-    \"node\": \">= 0.8.x\",\n-    \"npm\":  \">= 1.1.x\"\n-  }\n-}", "changes": 36}], "769": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/2dc16f6f7f24c6ba62d5ba5c52ccb72e2d7c7ad2/src/scripts/maps.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2dc16f6f7f24c6ba62d5ba5c52ccb72e2d7c7ad2/src/scripts/maps.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/maps.coffee?ref=2dc16f6f7f24c6ba62d5ba5c52ccb72e2d7c7ad2", "filename": "src/scripts/maps.coffee", "sha": "6db6ce2a3443f47af7249c2fbd07d581643fa564", "additions": 3, "patch": "@@ -10,15 +10,15 @@ module.exports = (robot) ->\n     mapType  = msg.match[1] or \"roadmap\"\n     location = msg.match[2]\n     mapUrl   = \"http://maps.google.com/maps/api/staticmap?markers=\" +\n-                escape(location) +\n+                encodeURIComponent(location) +\n                 \"&size=400x400&maptype=\" +\n                 mapType +\n                 \"&sensor=false\" +\n                 \"&format=png\" # So campfire knows it's an image\n     url      = \"http://maps.google.com/maps?q=\" +\n-               escape(location) +\n+               encodeURIComponent(location) +\n               \"&hl=en&sll=37.0625,-95.677068&sspn=73.579623,100.371094&vpsrc=0&hnear=\" +\n-              escape(location) +\n+              encodeURIComponent(location) +\n               \"&t=m&z=11\"\n \n     msg.send mapUrl", "changes": 6}], "770": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6817db4b20017e886f62809c57121acf2064aaf3/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/6817db4b20017e886f62809c57121acf2064aaf3/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=6817db4b20017e886f62809c57121acf2064aaf3", "filename": "package.json", "sha": "0a59014c1af8f73007e390d0df7fb5cf7ffbc04d", "additions": 1, "patch": "@@ -24,7 +24,7 @@\n   },\n \n   \"dependencies\": {\n-    \"coffee-script\":      \"1.6.3\",\n+    \"coffee-script\":      \"^1.8\",\n     \"optparse\":           \"1.0.4\",\n     \"scoped-http-client\": \"0.9.8\",\n     \"log\":                \"1.4.0\",", "changes": 2}], "772": [{"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/f7863ee34674d62c608fb49ff343447a55a2991d/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/f7863ee34674d62c608fb49ff343447a55a2991d/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=f7863ee34674d62c608fb49ff343447a55a2991d", "filename": "bin/hubot", "sha": "454cd12fa65f76b84ebaf501b8a9e29bd8adfc7b", "additions": 1, "patch": "@@ -25,7 +25,6 @@ Options =\n   adapter:     process.env.HUBOT_ADAPTER or \"shell\"\n   alias:       process.env.HUBOT_ALIAS   or false\n   create:      process.env.HUBOT_CREATE  or false\n-  enableHttpd: process.env.HUBOT_HTTPD   or true\n   scripts:     process.env.HUBOT_SCRIPTS or []\n   name:        process.env.HUBOT_NAME    or \"Hubot\"\n   path:        process.env.HUBOT_PATH    or \".\"\n@@ -41,9 +40,6 @@ Parser.on \"create\", (opt, value) ->\n   Options.path = value\n   Options.create = true\n \n-Parser.on \"disable-httpd\", (opt) ->\n-  Options.enableHttpd = false\n-\n Parser.on \"help\", (opt, value) ->\n   console.log Parser.toString()\n   process.exit 0\n@@ -77,7 +73,7 @@ if Options.create\n else\n   adapterPath = Path.join __dirname, \"..\", \"src\", \"adapters\"\n \n-  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name\n+  robot = Hubot.loadBot adapterPath, Options.adapter, Options.name\n \n   if Options.version\n     console.log robot.version", "changes": 6}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/f7863ee34674d62c608fb49ff343447a55a2991d/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f7863ee34674d62c608fb49ff343447a55a2991d/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=f7863ee34674d62c608fb49ff343447a55a2991d", "filename": "index.coffee", "sha": "5dc3c4b83f97ae19326d28b00bffa686f04facb1", "additions": 2, "patch": "@@ -21,5 +21,5 @@ module.exports = {\n   CatchAllMessage\n }\n \n-module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName) ->\n-  new Robot adapterPath, adapterName, enableHttpd, botName\n+module.exports.loadBot = (adapterPath, adapterName, botName) ->\n+  new Robot adapterPath, adapterName, botName", "changes": 4}, {"status": "modified", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/f7863ee34674d62c608fb49ff343447a55a2991d/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/f7863ee34674d62c608fb49ff343447a55a2991d/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=f7863ee34674d62c608fb49ff343447a55a2991d", "filename": "package.json", "sha": "085e9cb551ec4ab852442a8fdd75efc123390f54", "additions": 12, "patch": "@@ -1,43 +1,35 @@\n {\n   \"name\": \"hubot\",\n   \"version\": \"2.8.1\",\n-\n   \"author\": \"hubot\",\n-\n   \"keywords\": [\n     \"github\",\n     \"hubot\",\n     \"campfire\",\n     \"bot\"\n   ],\n-\n   \"description\": \"A simple helpful robot for your Company\",\n-\n-  \"licenses\": [{\n-    \"type\": \"MIT\",\n-    \"url\": \"https://raw.github.com/github/hubot/master/LICENSE\"\n-  }],\n-\n-  \"repository\" : {\n+  \"licenses\": [\n+    {\n+      \"type\": \"MIT\",\n+      \"url\": \"https://raw.github.com/github/hubot/master/LICENSE\"\n+    }\n+  ],\n+  \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"https://github.com/github/hubot.git\"\n   },\n-\n   \"dependencies\": {\n-    \"coffee-script\":      \"1.6.3\",\n-    \"optparse\":           \"1.0.4\",\n-    \"scoped-http-client\": \"0.9.8\",\n-    \"log\":                \"1.4.0\",\n-    \"express\":            \"3.3.4\"\n+    \"coffee-script\": \"1.6.3\",\n+    \"log\": \"1.4.0\",\n+    \"optparse\": \"1.0.4\",\n+    \"scoped-http-client\": \"^0.9.8\"\n   },\n-\n   \"engines\": {\n     \"node\": \">= 0.8.x\",\n-    \"npm\":  \">= 1.1.x\"\n+    \"npm\": \">= 1.1.x\"\n   },\n-\n   \"main\": \"./index\",\n-\n   \"bin\": {\n     \"hubot\": \"./bin/hubot\"\n   }", "changes": 32}, {"status": "modified", "deletions": 57, "raw_url": "https://github.com/hubotio/hubot/raw/f7863ee34674d62c608fb49ff343447a55a2991d/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f7863ee34674d62c608fb49ff343447a55a2991d/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=f7863ee34674d62c608fb49ff343447a55a2991d", "filename": "src/robot.coffee", "sha": "a786bb3415a0db61b0a8d51d0cddb6f22602139b", "additions": 2, "patch": "@@ -34,11 +34,10 @@ class Robot\n   #\n   # adapterPath - A String of the path to local adapters.\n   # adapter     - A String of the adapter name.\n-  # httpd       - A Boolean whether to enable the HTTP daemon.\n   # name        - A String of the robot name, defaults to Hubot.\n   #\n   # Returns nothing.\n-  constructor: (adapterPath, adapter, httpd, name = 'Hubot') ->\n+  constructor: (adapterPath, adapter, name = 'Hubot') ->\n     @name      = name\n     @events    = new EventEmitter\n     @brain     = new Brain @\n@@ -50,10 +49,6 @@ class Robot\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n \n     @parseVersion()\n-    if httpd\n-      @setupExpress()\n-    else\n-      @setupNullRouter()\n     @pingIntervalId = null\n \n     @loadAdapter adapterPath, adapter\n@@ -66,7 +61,6 @@ class Robot\n     process.on 'uncaughtException', (err) =>\n       @emit 'error', err\n \n-\n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n   #\n@@ -261,55 +255,6 @@ class Robot\n       @logger.error \"Error loading scripts from npm package - #{err.stack}\"\n       process.exit(1)\n \n-  # Setup the Express server's defaults.\n-  #\n-  # Returns nothing.\n-  setupExpress: ->\n-    user    = process.env.EXPRESS_USER\n-    pass    = process.env.EXPRESS_PASSWORD\n-    stat    = process.env.EXPRESS_STATIC\n-\n-    express = require 'express'\n-\n-    app = express()\n-\n-    app.use (req, res, next) =>\n-      res.setHeader \"X-Powered-By\", \"hubot/#{@name}\"\n-      next()\n-\n-    app.use express.basicAuth user, pass if user and pass\n-    app.use express.query()\n-    app.use express.bodyParser()\n-    app.use express.static stat if stat\n-\n-    try\n-      @server = app.listen(process.env.PORT || 8080, process.env.BIND_ADDRESS || '0.0.0.0')\n-      @router = app\n-    catch err\n-      @logger.error \"Error trying to start HTTP server: #{err}\\n#{err.stack}\"\n-      process.exit(1)\n-\n-    herokuUrl = process.env.HEROKU_URL\n-\n-    if herokuUrl\n-      herokuUrl += '/' unless /\\/$/.test herokuUrl\n-      @pingIntervalId = setInterval =>\n-        HttpClient.create(\"#{herokuUrl}hubot/ping\").post() (err, res, body) =>\n-          @logger.info 'keep alive ping!'\n-      , 1200000\n-\n-  # Setup an empty router object\n-  #\n-  # returns nothing\n-  setupNullRouter: ->\n-    msg = \"A script has tried registering a HTTP route while the HTTP server is disabled with --disabled-httpd.\"\n-    @router =\n-      get: ()=> @logger.warning msg\n-      post: ()=> @logger.warning msg\n-      put: ()=> @logger.warning msg\n-      delete: ()=> @logger.warning msg\n-\n-\n   # Load the adapter Hubot is going to use.\n   #\n   # path    - A String of the path to adapter if local.\n@@ -481,6 +426,6 @@ class Robot\n   # Returns a ScopedClient instance.\n   http: (url) ->\n     HttpClient.create(url)\n-      .header('User-Agent', \"Hubot/#{@version}\")\n+      .header('User-Agent', \"hubot/#{@version}\")\n \n module.exports = Robot", "changes": 59}, {"status": "removed", "deletions": 15, "raw_url": "https://github.com/hubotio/hubot/raw/b96ea30654ef2dbf93f710c6e310c909fa1bdd65/test/httpd_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b96ea30654ef2dbf93f710c6e310c909fa1bdd65/test/httpd_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/httpd_test.coffee?ref=b96ea30654ef2dbf93f710c6e310c909fa1bdd65", "filename": "test/httpd_test.coffee", "sha": "7441ebed938a5754a188e9928924b5f4e0c4fb15", "additions": 0, "patch": "@@ -1,15 +0,0 @@\n-process.env.CONNECT_STATIC = 'test/static/'\n-Tests = require './tests'\n-assert = require 'assert'\n-helper = Tests.helper()\n-require './scripts/test'\n-\n-helper.adapter.cb = (msg) ->\n-    assert.equal 1, helper.sent.length\n-    assert.equal \"static\\n\", msg\n-    helper.stop()\n-\n-setTimeout( () ->\n-    helper.adapter.receive 'static'\n-, 100)\n-", "changes": 15}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/f7863ee34674d62c608fb49ff343447a55a2991d/test/scripts/test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f7863ee34674d62c608fb49ff343447a55a2991d/test/scripts/test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/scripts/test.coffee?ref=f7863ee34674d62c608fb49ff343447a55a2991d", "filename": "test/scripts/test.coffee", "sha": "19984a1ec0ecf26769c459b33519aa0b06d31e3b", "additions": 0, "patch": "@@ -1,11 +1,6 @@\n # Tests hubot listeners\n module.exports = (robot) ->\n   assert = require 'assert'\n-  robot.hear /static/i, (msg) ->\n-    msg.http('http://127.0.0.1/test').port(process.env.PORT or 8080)\n-      .get() (err, res, body) ->\n-        msg.send body\n-\n   robot.hear /test/i, (msg) ->\n     msg.send \"OK\"\n ", "changes": 5}, {"status": "removed", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b96ea30654ef2dbf93f710c6e310c909fa1bdd65/test/static/test", "blob_url": "https://github.com/hubotio/hubot/blob/b96ea30654ef2dbf93f710c6e310c909fa1bdd65/test/static/test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/static/test?ref=b96ea30654ef2dbf93f710c6e310c909fa1bdd65", "filename": "test/static/test", "sha": "7b4d4ba2e62dc741d2a6265a1ecbdba716d119f6", "additions": 0, "patch": "@@ -1 +0,0 @@\n-static", "changes": 1}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f7863ee34674d62c608fb49ff343447a55a2991d/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/f7863ee34674d62c608fb49ff343447a55a2991d/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=f7863ee34674d62c608fb49ff343447a55a2991d", "filename": "test/tests.coffee", "sha": "65bbe661076478688594c1c629a9b769ca5a61b0", "additions": 1, "patch": "@@ -36,7 +36,7 @@ exports.danger = (helper, cb) ->\n \n class Helper extends Robot\n   constructor: (scriptPath) ->\n-    super null, null, true, 'helper'\n+    super null, null, 'helper'\n     @load scriptPath\n     @id = 1\n     @Response = Helper.Response", "changes": 2}], "773": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/50fbd5f464201cc6d96ff19fd61a897bfac4bf04/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/50fbd5f464201cc6d96ff19fd61a897bfac4bf04/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=50fbd5f464201cc6d96ff19fd61a897bfac4bf04", "filename": "src/adapters/campfire.coffee", "sha": "41b759d4092595eb8eb5d21bf0fb71d1942b7145", "additions": 1, "patch": "@@ -69,7 +69,7 @@ class Campfire extends Adapter\n     bot.on \"TextMessage\",\n       withAuthor (id, created, room, user, body, author) ->\n         unless bot.info.id is author.id\n-          message = new TextMessage author, body, id\n+          message = new TextMessage author, body, id, room: room\n           message.private = bot.private[room]\n           self.receive message\n ", "changes": 2}, {"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/50fbd5f464201cc6d96ff19fd61a897bfac4bf04/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/50fbd5f464201cc6d96ff19fd61a897bfac4bf04/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=50fbd5f464201cc6d96ff19fd61a897bfac4bf04", "filename": "src/message.coffee", "sha": "b518c72c9cc3055aed1c8538c9730c886c2feb3f", "additions": 9, "patch": "@@ -2,8 +2,8 @@ class Message\n   # Represents an incoming message from the chat.\n   #\n   # user - A User instance that sent the message.\n-  constructor: (@user, @done = false) ->\n-    @room = @user.room\n+  constructor: (@user, @done = false, @envelope = {}) ->\n+    @room = @envelope.room ? @user.room\n \n   # Indicates that no other Listener should be called on this object\n   #\n@@ -14,11 +14,12 @@ class Message\n class TextMessage extends Message\n   # Represents an incoming message from the chat.\n   #\n-  # user - A User instance that sent the message.\n-  # text - A String message.\n-  # id   - A String of the message ID.\n-  constructor: (@user, @text, @id) ->\n-    super @user\n+  # user     - A User instance that sent the message.\n+  # text     - A String message.\n+  # id       - A String of the message ID.\n+  # envelope - Additional metadata about the message, like room or thread info\n+  constructor: (@user, @text, @id, envelope = {}) ->\n+    super @user, undefined, envelope\n \n   # Determines if the message matches the given regex.\n   #\n@@ -27,7 +28,7 @@ class TextMessage extends Message\n   # Returns a Match object or null.\n   match: (regex) ->\n     @text.match regex\n-  \n+\n   # String representation of a TextMessage\n   #\n   # Returns the message text", "changes": 17}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/50fbd5f464201cc6d96ff19fd61a897bfac4bf04/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/50fbd5f464201cc6d96ff19fd61a897bfac4bf04/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=50fbd5f464201cc6d96ff19fd61a897bfac4bf04", "filename": "src/response.coffee", "sha": "f92795eaed9c29c035815d2e2073c1e19867a302", "additions": 2, "patch": "@@ -11,6 +11,8 @@ class Response\n       room: @message.room\n       user: @message.user\n       message: @message\n+    for own k,v of @message.envelope\n+      @envelope[k] = v\n \n   # Public: Posts a message back to the chat source\n   #", "changes": 2}], "775": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ed7ffe5fdec1ba79c8c80817f92abf458e8020a1/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ed7ffe5fdec1ba79c8c80817f92abf458e8020a1/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=ed7ffe5fdec1ba79c8c80817f92abf458e8020a1", "filename": "src/robot.coffee", "sha": "0b36020ded75b6f3bd08f6d424f48e5448c3ad89", "additions": 1, "patch": "@@ -51,6 +51,7 @@ class Robot\n \n     @parseVersion()\n     if httpd\n+      @logger.warning 'Inbuilt Express support is DEPRECATED and will soon be replaced by hubot-express'\n       @setupExpress()\n     else\n       @setupNullRouter()", "changes": 1}], "776": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/43e5f1ebba6ae788f03d386e60cebd1630b78185/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/43e5f1ebba6ae788f03d386e60cebd1630b78185/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=43e5f1ebba6ae788f03d386e60cebd1630b78185", "filename": "CHANGELOG.md", "sha": "70cd80b70763f687220331a8849b676191b49543", "additions": 5, "patch": "@@ -1,3 +1,8 @@\n+v2.8.2\n+======\n+\n+* Fix error logging when not using any error handlers\n+\n v2.8.1\n ======\n ", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/43e5f1ebba6ae788f03d386e60cebd1630b78185/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/43e5f1ebba6ae788f03d386e60cebd1630b78185/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=43e5f1ebba6ae788f03d386e60cebd1630b78185", "filename": "package.json", "sha": "027bbfb188e140fb493cdd795ef733b7521a45f9", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.8.1\",\n+  \"version\": \"2.8.2\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}], "777": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/85b887a11e43f619bfc09717e5a916274c52e6ff/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/85b887a11e43f619bfc09717e5a916274c52e6ff/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=85b887a11e43f619bfc09717e5a916274c52e6ff", "filename": "src/robot.coffee", "sha": "838aa9bcdafb9a2dc89a8b156adbb778ce88fbd5", "additions": 49, "patch": "@@ -200,6 +200,7 @@ class Robot\n \n         false\n     if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n+      showSuggestions(@commands, message, @adapter, @name) if message.text.match ///^#{@name} .*$///i\n       @receive new CatchAllMessage(message)\n \n   # Public: Loads a file in path.\n@@ -483,4 +484,52 @@ class Robot\n     HttpClient.create(url)\n       .header('User-Agent', \"Hubot/#{@version}\")\n \n+# Private: Calculate amount of difference between two commands\n+#\n+# Returns the distance value\n+levenshtein = (str1, str2) ->\n+  l1 = str1.length\n+  l2 = str2.length\n+  dist = []\n+\n+  return l2 unless l1\n+  return l1 unless l2\n+\n+  dist[i] = [i] for i in [0..l1]\n+  dist[0][j] = j for j in [1..l2]\n+\n+  for i in [1..l1]\n+    for j in [1..l2]\n+      if str1[i-1] is str2[j-1]\n+        dist[i][j] = dist[i-1][j-1]\n+      else\n+        dist[i][j] = Math.min(dist[i-1][j], dist[i][j-1], dist[i-1][j-1]) + 1\n+  dist[l1][l2]\n+\n+# Private: Show suggestions inferred from input\n+#\n+# Returns nothing.\n+showSuggestions = (examples, input, adapter, name) ->\n+  inputCommand = input.text.split(\" \")[1]\n+  return unless inputCommand\n+\n+  suggestions = []\n+\n+  for example in examples\n+    exampleCommand = example.replace /[-<].*$/, ''\n+    continue if exampleCommand.match(\"^hubot *$\") or not exampleCommand.match(\"^hubot\")\n+    command = exampleCommand.split(\" \")[1]\n+    continue unless command\n+    distance = levenshtein(inputCommand, command)\n+    suggestions.push { command: \"'#{exampleCommand.trim()}'\", distance: distance }\n+\n+  if suggestions.length\n+    suggestions = suggestions.sort (a, b) -> a.distance - b.distance\n+    messages = \"\"\"\n+    Could not find command '#{input.text}'.\n+    Maybe you meant #{(suggestions[0..2].map (s) -> s.command.replace /hubot/, name).join(' or ')}.\n+    Run `#{name} help` for more commands.\n+    \"\"\"\n+    adapter.send input.user, messages\n+\n module.exports = Robot", "changes": 49}], "782": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/819053e17d1e3a632decece8e9bdb2e29a1b5d9e/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/819053e17d1e3a632decece8e9bdb2e29a1b5d9e/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=819053e17d1e3a632decece8e9bdb2e29a1b5d9e", "filename": "package.json", "sha": "21de5f1b7a10c6173d20794477f8877e82f7a2b5", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.8.1\",\n+  \"version\": \"2.8.2-beta1\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}], "784": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/802e37bcabb4ad3ee28354862bf5a0fd2f7e404a/src/scripts/ping.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/802e37bcabb4ad3ee28354862bf5a0fd2f7e404a/src/scripts/ping.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scripts/ping.coffee?ref=802e37bcabb4ad3ee28354862bf5a0fd2f7e404a", "filename": "src/scripts/ping.coffee", "sha": "3162c216644f9b15894df35318ab9023061510ba", "additions": 1, "patch": "@@ -3,6 +3,7 @@\n #\n # Commands:\n #   hubot ping - Reply with pong\n+#   hubot adapter - Reply with the adapter\n #   hubot echo <text> - Reply back with <text>\n #   hubot time - Reply with current time\n #   hubot die - End hubot process", "changes": 1}], "788": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ba1ed11c84b8709f82ce48715f55e6018c5c3a8d/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/ba1ed11c84b8709f82ce48715f55e6018c5c3a8d/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=ba1ed11c84b8709f82ce48715f55e6018c5c3a8d", "filename": "docs/README.md", "sha": "0950324ba35ff3f6ec4da321dd19d5b5a08d45fc", "additions": 2, "patch": "@@ -27,6 +27,8 @@ You now have your own functional hubot! There's a `bin/hubot`\n command for convenience, to handle installing npm dependencies, loading scripts,\n and then launching your hubot.\n \n+Hubot needs Redis to persist data, so before you can start hubot on your own computer, you should have Redis installed on your localhost. If just want to test Hubot without Redis, then you can remove `redis-brain.coffee` from `hubot-scripts.json`.\n+\n     % bin/hubot\n     Hubot>\n ", "changes": 2}], "789": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/5194ad78bd7fe8cc83fab48eeb9fa37f335330e2/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/5194ad78bd7fe8cc83fab48eeb9fa37f335330e2/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=5194ad78bd7fe8cc83fab48eeb9fa37f335330e2", "filename": "src/templates/README.md", "sha": "63d9771dd1141e4cdf1d0e05cf852f2ddd3e9a1b", "additions": 1, "patch": "@@ -102,7 +102,7 @@ name as a double quoted string to the `external-scripts.json` file in this repo.\n \n     % heroku create --stack cedar\n     % git push heroku master\n-    % heroku ps:scale app=1\n+    % heroku ps:scale web=1\n \n If your Heroku account has been verified you can run the following to enable\n and add the Redis to Go addon to your app.", "changes": 2}], "790": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1a8420cce84852ab4759dc9d0d70c8e8b82ff193/src/templates/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/1a8420cce84852ab4759dc9d0d70c8e8b82ff193/src/templates/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/templates/README.md?ref=1a8420cce84852ab4759dc9d0d70c8e8b82ff193", "filename": "src/templates/README.md", "sha": "f3aaf2ac1af7e24e7f05935e3e6f7d974e4e9b28", "additions": 0, "patch": "@@ -102,7 +102,6 @@ name as a double quoted string to the `external-scripts.json` file in this repo.\n \n     % heroku create --stack cedar\n     % git push heroku master\n-    % heroku ps:scale app=1\n \n If your Heroku account has been verified you can run the following to enable\n and add the Redis to Go addon to your app.", "changes": 1}], "791": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/83e03f673c7e4e31223d3a4455cdcbb453cbb59b/src/user.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/83e03f673c7e4e31223d3a4455cdcbb453cbb59b/src/user.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/user.coffee?ref=83e03f673c7e4e31223d3a4455cdcbb453cbb59b", "filename": "src/user.coffee", "sha": "a490a03f86b73b2a7cf3763cdeb07a02999d0337", "additions": 1, "patch": "@@ -6,6 +6,6 @@ class User\n   constructor: (@id, options = {}) ->\n     for k of (options or {})\n       @[k] = options[k]\n-    @['name'] ||= @id\n+    @['name'] ||= @id.toString()\n \n module.exports = User", "changes": 2}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/83e03f673c7e4e31223d3a4455cdcbb453cbb59b/test/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/83e03f673c7e4e31223d3a4455cdcbb453cbb59b/test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.coffee?ref=83e03f673c7e4e31223d3a4455cdcbb453cbb59b", "filename": "test/brain_test.coffee", "sha": "cc537989e1f310b29461d901ee2a7474dd843944", "additions": 10, "patch": "@@ -6,7 +6,10 @@ saved   = false\n closing = false\n closed  = false\n \n-brain = new Brain\n+fakeRobot =\n+  on: ->\n+\n+brain = new Brain fakeRobot\n \n brain.on 'save', (data) ->\n   is_closing = closing\n@@ -19,7 +22,11 @@ brain.on 'close', ->\n \n brain.data.abc = 1\n brain.resetSaveInterval 0.1\n-\n-process.on 'exit', ->\n+setTimeout ->\n   assert.ok saved\n   assert.ok closed\n+, 200\n+\n+user = brain.userForId 9876\n+assert.strictEqual 9876, user.id\n+assert.strictEqual \"9876\", user.name", "changes": 13}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/83e03f673c7e4e31223d3a4455cdcbb453cbb59b/test/user_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/83e03f673c7e4e31223d3a4455cdcbb453cbb59b/test/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/user_test.coffee?ref=83e03f673c7e4e31223d3a4455cdcbb453cbb59b", "filename": "test/user_test.coffee", "sha": "521b5a5cb3cec261c47e20dff58da838a2b59ecf", "additions": 4, "patch": "@@ -12,3 +12,7 @@ assert.equal \"Fake User\", user.id\n assert.equal \"chat@room.jabber\", user.room\n assert.equal \"groupchat\", user.type\n assert.equal \"Fake User\", user.name # Make sure that if no name is given, we fallback to the ID\n+\n+user = new User 12345\n+assert.strictEqual 12345, user.id\n+assert.strictEqual \"12345\", user.name", "changes": 4}], "792": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/29cd3030f0f53694a5d5ab1e11037fc21b30337f/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/29cd3030f0f53694a5d5ab1e11037fc21b30337f/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=29cd3030f0f53694a5d5ab1e11037fc21b30337f", "filename": "package.json", "sha": "d232fc9c991b9cd68dfa9aeb92216bf4f707a9e3", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.8.2\",\n+  \"version\": \"2.8.3-beta\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/29cd3030f0f53694a5d5ab1e11037fc21b30337f/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/29cd3030f0f53694a5d5ab1e11037fc21b30337f/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=29cd3030f0f53694a5d5ab1e11037fc21b30337f", "filename": "src/brain.coffee", "sha": "536b703cdae86186261c7fcd9e2edcdcd09ca3b0", "additions": 1, "patch": "@@ -120,7 +120,7 @@ class Brain extends EventEmitter\n     lowerName = name.toLowerCase()\n     for k of (@data.users or { })\n       userName = @data.users[k]['name']\n-      if userName? and userName.toLowerCase() is lowerName\n+      if userName? and userName.toString().toLowerCase() is lowerName\n         result = @data.users[k]\n     result\n ", "changes": 2}], "793": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8d0728b704d3a2aec79092feb6f0152fefb05fd7/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/8d0728b704d3a2aec79092feb6f0152fefb05fd7/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=8d0728b704d3a2aec79092feb6f0152fefb05fd7", "filename": "CHANGELOG.md", "sha": "8c843d43f31a922e247b8713970259b34ffb940a", "additions": 5, "patch": "@@ -1,3 +1,8 @@\n+v2.8.3\n+======\n+\n+* Fix error when trying to find userForName, when name is incorrectly set as an integer\n+\n v2.8.2\n ======\n ", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8d0728b704d3a2aec79092feb6f0152fefb05fd7/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/8d0728b704d3a2aec79092feb6f0152fefb05fd7/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=8d0728b704d3a2aec79092feb6f0152fefb05fd7", "filename": "package.json", "sha": "9fcda1c5fe794199c9c72d5ee5b469ff5a4f3c47", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.8.2\",\n+  \"version\": \"2.8.3\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}], "794": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/ace4df5468bfa220083e464da3a53dcaa313b042/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ace4df5468bfa220083e464da3a53dcaa313b042/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=ace4df5468bfa220083e464da3a53dcaa313b042", "filename": "src/robot.coffee", "sha": "638fdfd536f0c83fb3449abc10e5c926094c29fa", "additions": 2, "patch": "@@ -101,12 +101,12 @@ class Robot\n     if @alias\n       alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n       newRegex = new RegExp(\n-        \"^[@]?(?:#{alias}[:,]?|#{name}[:,]?)\\\\s*(?:#{pattern})\"\n+        \"^\\\\s*[@]?(?:#{alias}[:,]?|#{name}[:,]?)\\\\s*(?:#{pattern})\"\n         modifiers\n       )\n     else\n       newRegex = new RegExp(\n-        \"^[@]?#{name}[:,]?\\\\s*(?:#{pattern})\",\n+        \"^\\\\s*[@]?#{name}[:,]?\\\\s*(?:#{pattern})\",\n         modifiers\n       )\n ", "changes": 4}], "795": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3d8414ecaef323fbf65d35c15ca034be33875444/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3d8414ecaef323fbf65d35c15ca034be33875444/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=3d8414ecaef323fbf65d35c15ca034be33875444", "filename": "src/robot.coffee", "sha": "2ec6d480bdedb58af8b8a25b3e0780c5df5dcc36", "additions": 1, "patch": "@@ -48,13 +48,13 @@ class Robot\n     @commands  = []\n     @listeners = []\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n+    @pingIntervalId = null\n \n     @parseVersion()\n     if httpd\n       @setupExpress()\n     else\n       @setupNullRouter()\n-    @pingIntervalId = null\n \n     @loadAdapter adapterPath, adapter\n ", "changes": 2}], "796": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4bb126b1caa3639d3b3fcb0c5d48094113d87ac1/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/4bb126b1caa3639d3b3fcb0c5d48094113d87ac1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=4bb126b1caa3639d3b3fcb0c5d48094113d87ac1", "filename": "CHANGELOG.md", "sha": "1d614e86f24d98c4e399240b6aa3a830686b7d12", "additions": 5, "patch": "@@ -1,3 +1,8 @@\n+v2.9.0\n+======\n+\n+* Deprecate `hubot --create` in favor of new yeoman generator\n+\n v2.8.3\n ======\n ", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4bb126b1caa3639d3b3fcb0c5d48094113d87ac1/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/4bb126b1caa3639d3b3fcb0c5d48094113d87ac1/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=4bb126b1caa3639d3b3fcb0c5d48094113d87ac1", "filename": "package.json", "sha": "822a872a713eb47ca931a65638c2e4b84b0000c6", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.8.3\",\n+  \"version\": \"2.9.0\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}], "797": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/4c6e59353b0442222c4180c6c281dfb949e07e94/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/4c6e59353b0442222c4180c6c281dfb949e07e94/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=4c6e59353b0442222c4180c6c281dfb949e07e94", "filename": "bin/hubot", "sha": "b3894ee5a24c17eaf0cbca4558ecfa4c82be4982", "additions": 2, "patch": "@@ -71,8 +71,8 @@ unless process.platform is \"win32\"\n \n if Options.create\n   console.error \"'hubot --create' is depreated. Use the yeoman generator instead:\"\n-  console.error \"    npm install -g generator-hubot\"\n-  console.error \"    mkdir yourbot\"\n+  console.error \"    npm install -g yo generator-hubot\"\n+  console.error \"    mkdir -p #{Options.path}\"\n   console.error \"    yo hubot\"\n   console.error \"See https://github.com/github/hubot/blob/master/docs/README.md for more details on getting started.\"\n   process.exit 1", "changes": 4}], "800": [{"status": "modified", "deletions": 18, "raw_url": "https://github.com/hubotio/hubot/raw/c1facedaeb57b01c68a0dd686a7b66a457c2e807/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/c1facedaeb57b01c68a0dd686a7b66a457c2e807/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=c1facedaeb57b01c68a0dd686a7b66a457c2e807", "filename": "package.json", "sha": "f8c1567e6c97900180f9ff767857fac5fccf8173", "additions": 14, "patch": "@@ -3,41 +3,37 @@\n   \"version\": \"2.9.3\",\n \n   \"author\": \"hubot\",\n-\n   \"keywords\": [\n     \"github\",\n     \"hubot\",\n     \"campfire\",\n     \"bot\"\n   ],\n-\n   \"description\": \"A simple helpful robot for your Company\",\n-\n-  \"licenses\": [{\n-    \"type\": \"MIT\",\n-    \"url\": \"https://raw.github.com/github/hubot/master/LICENSE\"\n-  }],\n-\n-  \"repository\" : {\n+  \"licenses\": [\n+    {\n+      \"type\": \"MIT\",\n+      \"url\": \"https://raw.github.com/github/hubot/master/LICENSE\"\n+    }\n+  ],\n+  \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"https://github.com/github/hubot.git\"\n   },\n-\n   \"dependencies\": {\n-    \"coffee-script\":      \"1.6.3\",\n-    \"optparse\":           \"1.0.4\",\n+    \"coffee-script\": \"1.6.3\",\n+    \"optparse\": \"1.0.4\",\n     \"scoped-http-client\": \"0.9.8\",\n-    \"log\":                \"1.4.0\",\n-    \"express\":            \"3.18.1\"\n+    \"log\": \"1.4.0\",\n+    \"express\": \"3.3.4\",\n+    \"express\": \"3.18.1\",\n+    \"readline-history\": \"~1.2.0\"\n   },\n-\n   \"engines\": {\n     \"node\": \">= 0.8.x\",\n-    \"npm\":  \">= 1.1.x\"\n+    \"npm\": \">= 1.1.x\"\n   },\n-\n   \"main\": \"./index\",\n-\n   \"bin\": {\n     \"hubot\": \"./bin/hubot\"\n   }", "changes": 32}, {"status": "modified", "deletions": 17, "raw_url": "https://github.com/hubotio/hubot/raw/c1facedaeb57b01c68a0dd686a7b66a457c2e807/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c1facedaeb57b01c68a0dd686a7b66a457c2e807/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=c1facedaeb57b01c68a0dd686a7b66a457c2e807", "filename": "src/adapters/shell.coffee", "sha": "a6a86a9d9984ae043f689046f45cf36c797b1af6", "additions": 35, "patch": "@@ -1,9 +1,15 @@\n-Readline = require 'readline'\n+Readline = require 'readline-history'\n \n Robot         = require '../robot'\n Adapter       = require '../adapter'\n {TextMessage} = require '../message'\n \n+\n+historySize = if process.env.HUBOT_SHELL_HISTSIZE?\n+                parseInt(process.env.HUBOT_SHELL_HISTSIZE)\n+              else\n+                1024\n+\n class Shell extends Adapter\n   send: (envelope, strings...) ->\n     unless process.platform is 'win32'\n@@ -20,29 +26,41 @@ class Shell extends Adapter\n     @send envelope, strings...\n \n   run: ->\n-    self = @\n     stdin = process.openStdin()\n     stdout = process.stdout\n \n-    @repl = Readline.createInterface stdin, stdout, null\n+    @repl = null\n+    Readline.createInterface\n+      path: \".hubot_history\",\n+      input: stdin,\n+      output: stdout,\n+      maxLength: historySize, # number of entries\n+      next: (rl) =>\n+        @repl = rl\n+        @repl.on 'close', =>\n+          stdin.destroy()\n+          @robot.shutdown()\n+          process.exit 0\n \n-    @repl.on 'close', =>\n-      stdin.destroy()\n-      @robot.shutdown()\n-      process.exit 0\n+        @repl.on 'line', (buffer) =>\n \n-    @repl.on 'line', (buffer) =>\n-      @repl.close() if buffer.toLowerCase() is 'exit'\n-      @repl.prompt()\n-      user_id = parseInt(process.env.HUBOT_SHELL_USER_ID or '1')\n-      user_name = process.env.HUBOT_SHELL_USER_NAME or 'Shell'\n-      user = @robot.brain.userForId user_id, name: user_name, room: 'Shell'\n-      @receive new TextMessage user, buffer, 'messageId'\n+          switch buffer.toLowerCase()\n+            when \"exit\"\n+              @repl.close()\n+            when \"history\"\n+              stdout.write \"#{line}\\n\" for line in @repl.history\n+            else\n+              user_id = parseInt(process.env.HUBOT_SHELL_USER_ID or '1')\n+              user_name = process.env.HUBOT_SHELL_USER_NAME or 'Shell'\n+              user = @robot.brain.userForId user_id, name: user_name, room: 'Shell'\n+              @receive new TextMessage user, buffer, 'messageId'\n+          @repl.prompt(true)\n \n-    self.emit 'connected'\n+        @emit 'connected'\n+\n+        @repl.setPrompt \"#{@robot.name}> \"\n+        @repl.prompt(true)\n \n-    @repl.setPrompt \"#{@robot.name}> \"\n-    @repl.prompt()\n \n exports.use = (robot) ->\n   new Shell robot", "changes": 52}], "801": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/62f777c99576c8042911e6dd96c5947665c1854b/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/62f777c99576c8042911e6dd96c5947665c1854b/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=62f777c99576c8042911e6dd96c5947665c1854b", "filename": "docs/scripting.md", "sha": "d501d1a87743fbe263fefc16f7d712bd901745af", "additions": 26, "patch": "@@ -605,6 +605,10 @@ Scripts are loaded from the `scripts/` directory. They are loaded in alphabetica\n * `scripts/_second.coffee`\n * `scripts/third.coffee`\n \n+# Sharing Scripts\n+\n+Once you've built some new scripts to extend the abilities of your robot friend, you should consider sharing them with the world! At the minimum, you need to package up your script and submit it to the [Node.js Package Registry](http://npmjs.org). You should also review the best practices for sharing scripts below.\n+\n ## Creating A Script Package\n \n Creating a script package for hubot is very simple. Start by creating a normal\n@@ -624,3 +628,25 @@ module.exports = (robot) ->\n ```\n \n After you've built your `npm` package you can publish it to [npmjs](http://npmjs.org).\n+\n+## Listener Metadata\n+\n+In addition to a regular expression and callback, the `hear` and `respond` functions also accept an optional options Object which can be used to attach arbitrary metadata to the generated Listener object. This metadata allows for easy extension of your script's behavior without modifying the script package.\n+\n+The most important and most common metadata key is `id`. Every Listener should be given a unique name (options.id; defaults to `null`). Names should be scoped by module (e.g. 'my-module.my-listener'). These names allow other scripts to directly address individual listeners and extend them with additional functionality like authorization and rate limiting.\n+\n+Additional extensions may define and handle additional metadata keys.\n+\n+Returning to an earlier example:\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /annoy me/, id:'annoyance.start', (msg)\n+    # code to annoy someone\n+\n+  robot.respond /unannoy me/, id:'annoyance.stop', (msg)\n+    # code to stop annoying someone\n+```\n+\n+These scoped identifiers allow you to externally specify new behaviors like:\n+- authorization policy: \"allow everyone in the `annoyers` group to execute `annoyance.*` commands\"\n+- rate limiting: \"only allow executing `annoyance.start` once every 30 minutes\"", "changes": 26}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/62f777c99576c8042911e6dd96c5947665c1854b/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/62f777c99576c8042911e6dd96c5947665c1854b/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=62f777c99576c8042911e6dd96c5947665c1854b", "filename": "src/listener.coffee", "sha": "a8636a3e8e4cfd613817b9e75a951c12a7e3017c", "additions": 21, "patch": "@@ -5,12 +5,28 @@\n class Listener\n   # Listeners receive every message from the chat source and decide if they\n   # want to act on it.\n+  # An identifier should be provided in the options parameter to uniquely\n+  # identify the listener (options.id).\n   #\n   # robot    - A Robot instance.\n   # matcher  - A Function that determines if this listener should trigger the\n   #            callback.\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n   # callback - A Function that is triggered if the incoming message matches.\n-  constructor: (@robot, @matcher, @callback) ->\n+  constructor: (@robot, @matcher, @options, @callback) ->\n+    if not @matcher?\n+      throw new Error \"Missing a matcher for Listener\"\n+\n+    if not @callback?\n+      @callback = @options\n+      @options = {}\n+\n+    if not @options.id?\n+      @options.id = null\n+\n+    if not @callback?\n+      throw new Error \"Missing a callback for Listener\"\n \n   # Public: Determines if the listener likes the content of the message. If\n   # so, a Response built from the given Message is passed to the Listener\n@@ -36,11 +52,14 @@ class TextListener extends Listener\n   # robot    - A Robot instance.\n   # regex    - A Regex that determines if this listener should trigger the\n   #            callback.\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n   # callback - A Function that is triggered if the incoming message matches.\n-  constructor: (@robot, @regex, @callback) ->\n+  constructor: (@robot, @regex, @options, @callback) ->\n     @matcher = (message) =>\n       if message instanceof TextMessage\n         message.match @regex\n+    super @robot, @matcher, @options, @callback\n \n module.exports = {\n   Listener", "changes": 23}, {"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/62f777c99576c8042911e6dd96c5947665c1854b/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/62f777c99576c8042911e6dd96c5947665c1854b/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=62f777c99576c8042911e6dd96c5947665c1854b", "filename": "src/robot.coffee", "sha": "5c800af1043ae48b1e842ae8333eb768cb019a19", "additions": 30, "patch": "@@ -71,21 +71,25 @@ class Robot\n   # a Regex.\n   #\n   # regex    - A Regex that determines if the callback should be called.\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n-  hear: (regex, callback) ->\n-    @listeners.push new TextListener(@, regex, callback)\n+  hear: (regex, options, callback) ->\n+    @listeners.push new TextListener(@, regex, options, callback)\n \n   # Public: Adds a Listener that attempts to match incoming messages directed\n   # at the robot based on a Regex. All regexes treat patterns like they begin\n   # with a '^'\n   #\n   # regex    - A Regex that determines if the callback should be called.\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n-  respond: (regex, callback) ->\n+  respond: (regex, options, callback) ->\n     re = regex.toString().split('/')\n     re.shift()\n     modifiers = re.pop()\n@@ -110,41 +114,50 @@ class Robot\n         modifiers\n       )\n \n-    @listeners.push new TextListener(@, newRegex, callback)\n+    @listeners.push new TextListener(@, newRegex, options, callback)\n \n   # Public: Adds a Listener that triggers when anyone enters the room.\n   #\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n-  enter: (callback) ->\n+  enter: (options, callback) ->\n     @listeners.push new Listener(\n       @,\n       ((msg) -> msg instanceof EnterMessage),\n+      options,\n       callback\n     )\n \n   # Public: Adds a Listener that triggers when anyone leaves the room.\n   #\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n-  leave: (callback) ->\n+  leave: (options, callback) ->\n     @listeners.push new Listener(\n       @,\n       ((msg) -> msg instanceof LeaveMessage),\n+      options,\n       callback\n     )\n \n   # Public: Adds a Listener that triggers when anyone changes the topic.\n   #\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n-  topic: (callback) ->\n+  topic: (options, callback) ->\n     @listeners.push new Listener(\n       @,\n       ((msg) -> msg instanceof TopicMessage),\n+      options,\n       callback\n     )\n \n@@ -174,13 +187,22 @@ class Robot\n \n   # Public: Adds a Listener that triggers when no other text matchers match.\n   #\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n   # callback - A Function that is called with a Response object.\n   #\n   # Returns nothing.\n-  catchAll: (callback) ->\n+  catchAll: (options, callback) ->\n+    # `options` is optional; need to isolate the real callback before\n+    # wrapping it with logic below\n+    if not callback?\n+      callback = options\n+      options = {}\n+\n     @listeners.push new Listener(\n       @,\n       ((msg) -> msg instanceof CatchAllMessage),\n+      options,\n       ((msg) -> msg.message = msg.message.message; callback msg)\n     )\n ", "changes": 38}], "802": [{"status": "modified", "deletions": 9, "raw_url": "https://github.com/hubotio/hubot/raw/794a06b4c1eb83c098ae98a2d4f4b5ccb2de7d51/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/794a06b4c1eb83c098ae98a2d4f4b5ccb2de7d51/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=794a06b4c1eb83c098ae98a2d4f4b5ccb2de7d51", "filename": "docs/scripting.md", "sha": "221b3fa77522fc910bf7010270a6bb2a1c47f85f", "additions": 9, "patch": "@@ -296,7 +296,7 @@ Hubot can access the environment he's running in, just like any other node progr\n answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n \n module.exports = (robot) ->\n-  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+  robot.respond /what is the answer to the ultimate question of life/, (msg) ->\n     msg.send \"#{answer}, but what is the question?\"\n ```\n \n@@ -308,7 +308,7 @@ Here we can default to something:\n answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING or 42\n \n module.exports = (robot) ->\n-  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+  robot.respond /what is the answer to the ultimate question of life/, (msg) ->\n     msg.send \"#{answer}, but what is the question?\"\n ```\n \n@@ -321,7 +321,7 @@ unless answer?\n   process.exit(1)\n \n module.exports = (robot) ->\n-  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+  robot.respond /what is the answer to the ultimate question of life/, (msg) ->\n     msg.send \"#{answer}, but what is the question?\"\n ```\n \n@@ -331,7 +331,7 @@ And lastly, we update the `robot.respond` to check it:\n answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n \n module.exports = (robot) ->\n-  robot.respond /what is the answer to the ultimate question of life/, (msg)\n+  robot.respond /what is the answer to the ultimate question of life/, (msg) ->\n     unless answer?\n       msg.send \"Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again\"\n       return\n@@ -358,7 +358,7 @@ Hubot can run code later using JavaScript's built-in [setTimeout](http://nodejs.\n \n ```coffeescript\n module.exports = (robot) ->\n-  robot.respond /you are a little slow/, (msg)\n+  robot.respond /you are a little slow/, (msg) ->\n     setTimeout () ->\n       msg.send \"Who you calling 'slow'?\"\n     , 60 * 1000\n@@ -368,7 +368,7 @@ Additionally, Hubot can run code on an interval using [setInterval](http://nodej\n \n ```coffeescript\n module.exports = (robot) ->\n-  robot.respond /annoy me/, (msg)\n+  robot.respond /annoy me/, (msg) ->\n     msg.send \"Hey, want to hear the most annoying sound in the world?\"\n     setInterval () ->\n       msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n@@ -381,7 +381,7 @@ Both `setTimeout` and `setInterval` return the ID of the timeout or interval it\n module.exports = (robot) ->\n   annoyIntervalId = null\n \n-  robot.respond /annoy me/, (msg)\n+  robot.respond /annoy me/, (msg) ->\n     if annoyIntervalId\n       msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n       return\n@@ -391,10 +391,10 @@ module.exports = (robot) ->\n       msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n     , 1000\n \n-  robot.respond /unannoy me/, (msg)\n+  robot.respond /unannoy me/, (msg) ->\n     if annoyIntervalId\n       msg.send \"GUYS, GUYS, GUYS!\"\n-      clearInterval(annoyIntervalId)\n+      clearInterval(annoyIntervalId) ->\n       annoyIntervalId = null\n     else\n       msg.send \"Not annoying you right now, am I?\"", "changes": 18}], "803": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/199552e6dc6d100d6aaf25336d1e063a9538acd9/docs/implementation.md", "blob_url": "https://github.com/hubotio/hubot/blob/199552e6dc6d100d6aaf25336d1e063a9538acd9/docs/implementation.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/implementation.md?ref=199552e6dc6d100d6aaf25336d1e063a9538acd9", "filename": "docs/implementation.md", "sha": "e2e7f4f2a4c6db160f5cc6347d2b56301085ab45", "additions": 34, "patch": "@@ -0,0 +1,34 @@\n+---\n+title: Implementation Notes\n+permalink: /docs/implementation/index.html\n+layout: docs\n+---\n+\n+For the purpose of maintainability, several internal flows are documented here.\n+\n+## Message Processing\n+\n+When a new message is received by an adapter, a new Message object is constructed and passed to `robot.receive` (async). `robot.receive` then attempts to execute each Listener in order of registration by calling `listener.call` (async), passing in the Listener Middleware stack. `listener.call` first checks to see if the listener matches (`match` method, sync), and if so, calls `middleware.execute` (async) on the provided middleware.\n+\n+`middleware.execute` calls each middleware in order of registration. Middleware can either continue forward (call `next`) or abort (call `done`). If all middleware continues, `middleware.execute` calls `next` (the `listener.call` callback). If any middleware aborts, `middleware.execute` calls `done` (which eventually returns to the `robot.receive` callback).\n+\n+`middleware.execute` `next` returns to `listener.call`, which executes the matched Listener's callback and then calls the `robot.receive` callback.\n+\n+Inside the `robot.receive` processing loop, `message.done` is checked after each `listener.call`. If the message has been marked as done, `robot.receive` returns. This correctly handles asynchronous middleware, but will not catch an asynchronous set of `message.done` inside the listener callback (which is expected to be synchronous).\n+\n+If no listener matches the message (distinct from setting `message.done`), a CatchAllMessage is created which wraps the original message. This new message is run through all listeners again testing for a match. `robot.catchAll` creates a special listener that only matches CatchAllMessages.\n+\n+## Listeners\n+\n+Listeners are registered using several functions on the `robot` object: `hear`, `respond`, `enter`, `leave`, `topic`, and `catchAll`.\n+\n+A listener is used via its `call` method, which is responsible for testing to see if a message matches (`match` is an abstract method) and if so, executes the listener's callback.\n+\n+Listener callbacks are assumed to be synchronous.\n+\n+## Middleware\n+\n+There are two primary entry points for middleware:\n+\n+1. `robot.listenerMiddleware` - registers a new piece of middleware in a global array\n+2. `middleware.execute` - executes all registered middleware in order", "changes": 34}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/199552e6dc6d100d6aaf25336d1e063a9538acd9/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/199552e6dc6d100d6aaf25336d1e063a9538acd9/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=199552e6dc6d100d6aaf25336d1e063a9538acd9", "filename": "docs/patterns.md", "sha": "b898e1616f9521250704c166d66ebc4103cd98ff", "additions": 65, "patch": "@@ -77,3 +77,68 @@ module.export = (robot) ->\n   robot.globalHttpOptions.httpAgent  = proxy('http://my-proxy-server.internal', false)\n   robot.globalHttpOptions.httpsAgent = proxy('http://my-proxy-server.internal', true)\n ```\n+\n+## Restricting access to commands\n+\n+One of the awesome features of Hubot is its ability to make changes to a production environment with a single chat message. However, not everyone with access to your chat service should be able to trigger production changes.\n+\n+There are a variety of different patterns for restricting access that you can follow depending on your specific needs:\n+\n+* Two buckets of access: full and restricted with whitelist/blacklist\n+* specific access rules for every command (Role-based Access Control)\n+\n+### Simple (full vs restricted access)\n+\n+In some organizations, almost all employees are given the same level of access and only a select few need to be restricted (e.g. new hires, contractors, etc.). In this model, you partition the set of all listeners to separate the \"power commands\" from the \"normal commands\".\n+\n+Once you have segregated the listeners, you need to make some tradeoff decisions around whitelisting/blacklisting users and listeners.\n+\n+The key deciding factors for whitelisting vs blacklisting of users are the number of users in each category, the frequency of change in either category, and the level of security risk your organization is willing to accept.\n+* Whitelisting users (users X, Y, Z have access to power commands; all other users only get access to normal commands) is a more secure method of access (new users have no default access to power commands), but has higher maintenance overhead (you need to add each new user to the \"approved\" list).\n+* Blacklisting users (all users get access to power commands, except for users X, Y, Z, who only get access to normal commands) is a less secure method (new users have default access to power commands until they are added to the blacklist), but has a much lower maintenance overhead if the blacklist is small/rarely updated.\n+\n+The key deciding factors for selectively allowing vs restricting listeners are the number of listeners in each category, the ratio of internal to external scripts, and the level of security risk your organization is willing to accept.\n+* Selectively allowing listeners (all listeners are power commands, except for listeners A, B, C, which are considered normal commands) is a more secure method (new listeners are restricted by default), but has a much higher maintenance overhead (every silly/fun listener needs to be explicity downgraded to \"normal\" status).\n+* Selectively restricting listeners (listeners A, B, C are power commands, everything else is a normal command) is a less secure method (new listeners are put into the normal category by default, which could give unexpected access; external scripts are particularly scary here), but has a lower maintenance overhead (no need to modify/enumerate all the fun/culture scripts in your access policy).\n+\n+As an additional consideration, most scripts do not currently have listener IDs, so you will likely need to open PRs (or fork) any external scripts you use to add listener IDs. The actual modification is easy, but coordinating with lots of maintainers can be time consuming.\n+\n+Once you have decided which of the four possible models to follow, you need to build the appropriate lists of users and listeners to plug into your authorization middleware.\n+\n+Example: whitelist of users given access to selectively restricted power commands\n+```coffeescript\n+POWER_COMMANDS = [\n+  'deploy.web' # String that matches the listener ID\n+]\n+\n+POWER_USERS = [\n+  'jdoe' # String that matches the user ID set by the adapter\n+]\n+\n+module.exports = (robot) ->\n+  robot.listenerMiddleware (context, next, done) ->\n+    if context.listener.options.id in POWER_COMMANDS\n+      if context.response.message.user.id in POWER_USERS\n+        # User is allowed access to this command\n+        next(done)\n+      else\n+        # Restricted command, but user isn't in whitelist\n+        context.response.reply \"I'm sorry, @#{context.response.message.user.name}, but you don't have access to do that.\"\n+        done()\n+    else\n+      # This is not a restricted command; allow everyone\n+      next(done)\n+```\n+\n+Remember that middleware executes for ALL listeners that match a given message (including `robot.hear /.+/`), so make sure you include them when categorizing your listeners.\n+\n+### Specific access rules per listener\n+\n+For larger organizations, a binary categorization of access is usually insufficient and more complex access rules are required.\n+\n+Example access policy:\n+* Each development team has access to cut releases and deploy their service\n+* The Operations group has access to deploy all services (but not cut releases)\n+* The front desk cannot cut releases nor deploy services\n+\n+Complex policies like this are currently best implemented in code directly, though there is [ongoing work](https://github.com/michaelansel/hubot-rbac) to build a generalized framework for access management.", "changes": 65}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/199552e6dc6d100d6aaf25336d1e063a9538acd9/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/199552e6dc6d100d6aaf25336d1e063a9538acd9/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=199552e6dc6d100d6aaf25336d1e063a9538acd9", "filename": "docs/scripting.md", "sha": "03f31a752a35cb7e463572ff6a628acae5a22e10", "additions": 99, "patch": "@@ -592,7 +592,7 @@ In addition to a regular expression and callback, the `hear` and `respond` funct\n \n The most important and most common metadata key is `id`. Every Listener should be given a unique name (options.id; defaults to `null`). Names should be scoped by module (e.g. 'my-module.my-listener'). These names allow other scripts to directly address individual listeners and extend them with additional functionality like authorization and rate limiting.\n \n-Additional extensions may define and handle additional metadata keys.\n+Additional extensions may define and handle additional metadata keys. For more information, see the [Listener Middleware section](#listener-middleware).\n \n Returning to an earlier example:\n ```coffeescript\n@@ -607,3 +607,101 @@ module.exports = (robot) ->\n These scoped identifiers allow you to externally specify new behaviors like:\n - authorization policy: \"allow everyone in the `annoyers` group to execute `annoyance.*` commands\"\n - rate limiting: \"only allow executing `annoyance.start` once every 30 minutes\"\n+\n+# Listener Middleware\n+\n+Hubot supports inserting logic between the listener matching a message and the listener executing. This allows you to create extensions that apply to all scripts. Examples include centralized authorization policies, rate limiting, logging, and metrics. Middleware is implemented like other hubot scripts: instead of using the `hear` and `respond` methods, middleware is registered using `listenerMiddleware`.\n+\n+## Execution Process\n+\n+Similar to [Express middleware](http://expressjs.com/api.html#middleware), Hubot listener middleware executes middleware in definition order. Each middleware can either continue the chain (by calling `next`) or interrupt the chain (by calling `done`). If all middleware continues, the listener callback is executed and `done` is called. Middleware may wrap the `done` callback to allow executing code in the second half of the process (after the listener callback has been executed or a deeper piece of middleware has interrupted).\n+\n+Middleware is called with:\n+\n+- a context object containing:\n+  - matching Listener object (with associated metadata)\n+  - response object (contains the original message)\n+- next/done callbacks.\n+\n+For more details, see the [Listener Middleware API](#listener-middleware-api) section.\n+\n+### Error Handling\n+\n+For synchronous middleware (never yields to the event loop), hubot will automatically catch errors and emit an an `error` event, just like in standard listeners. Hubot will also automatically call the most recent `done` callback to unwind the middleware stack. Asynchronous middleware should catch its own exceptions, emit an `error` event, and call `done`. Any uncaught exceptions will interrupt all execution of middleware completion callbacks.\n+\n+## Listener Middleware Examples\n+\n+A fully functioning example can be found in [hubot-rate-limit](https://github.com/michaelansel/hubot-rate-limit/blob/master/src/rate-limit.coffee).\n+\n+A simple example of middleware logging command executions:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.listenerMiddleware (context, next, done) ->\n+    # Log commands\n+    robot.logger.info \"#{context.response.message.user.name} asked me to #{context.response.message.text}\"\n+    # Continue executing middleware\n+    next(done)\n+```\n+\n+In this example, a log message will be written for each chat message that matches a Listener.\n+\n+A more complex example making a rate limiting decision:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  # Map of listener ID to last time it was executed\n+  lastExecutedTime = {}\n+\n+  robot.listenerMiddleware (context, next, done) ->\n+    try\n+      # Default to 1s unless listener provides a different minimum period\n+      minPeriodMs = context.listener.options?.rateLimits?.minPeriodMs? or 1000\n+\n+      # See if command has been executed recently\n+      if lastExecutedTime.hasOwnProperty(context.listener.options.id) and\n+         lastExecutedTime[context.listener.options.id] > Date.now() - minPeriodMs\n+        # Command is being executed too quickly!\n+        done()\n+      else\n+        next () ->\n+          lastExecutedTime[context.listener.options.id] = Date.now()\n+          done()\n+    catch err\n+      robot.emit('error', err, context.response)\n+```\n+\n+In this example, the middleware checks to see if the listener has been executed in the last 1,000ms. If it has, the middleware calls `done` immediately, preventing the listener callback from being called. If the listener is allowed to execute, the middleware attaches a `done` handler so that it can record the time the listener *finished* executing.\n+\n+This example also shows how listener-specific metadata can be leveraged to create very powerful extensions: a script developer can use the rate limiting middleware to easily rate limit commands at different rates by just adding the middleware and setting a listener option.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.hear /hello/, id: 'my-hello', rateLimits: {minPeriodMs: 10000}, (msg) ->\n+    # This will execute no faster than once every ten seconds\n+    msg.reply 'Why, hello there!'\n+```\n+\n+## Listener Middleware API\n+\n+Although internal data structures are exposed, not all properties on the objects are considered part of the supported API. Below are the supported properties and usage information for each of the arguments middleware receives.\n+\n+- `context`\n+  - `listener`\n+    - `options`: a simple Object containing options set when defining the listener. See [Listener Metadata](#listener-metadata).\n+    - all other properties should be considered internal\n+\n+  - `response`\n+    - all parts of the standard response API are included in the middleware API. See [Send & Reply](#send--reply).\n+    - middleware may decorate (but not modify) the response object with additional information (e.g. add a property to `response.message.user` with a user's LDAP groups)\n+    - note: the textual message (`response.message.text`) should be considered immutable in listener middleware\n+\n+- `next`\n+  - a Function with no additional properties that should be called to continue on to the next piece of middleware/execute the Listener callback\n+  - `next` should be called with a single argument: either the provided `done` function or a new function that eventually calls `done`\n+\n+- `done`\n+ - a Function with no additional properties that should be called to interrupt middleware execution and begin executing the chain of completion functions.\n+ - `done` should be called with no arguments\n+\n+Note that this API is protected by automated tests (`test/middleware_test.coffee`) to prevent breakage. Anything not covered by the tests is susceptible to change.", "changes": 100}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/199552e6dc6d100d6aaf25336d1e063a9538acd9/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/199552e6dc6d100d6aaf25336d1e063a9538acd9/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=199552e6dc6d100d6aaf25336d1e063a9538acd9", "filename": "package.json", "sha": "d2c97b1278cf7037c285bbff0a045ffc9bea8825", "additions": 1, "patch": "@@ -15,6 +15,7 @@\n     \"url\": \"https://github.com/github/hubot.git\"\n   },\n   \"dependencies\": {\n+    \"async\": \">=0.1.0 <1.0.0\",\n     \"chalk\": \"^1.0.0\",\n     \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",", "changes": 1}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/199552e6dc6d100d6aaf25336d1e063a9538acd9/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/199552e6dc6d100d6aaf25336d1e063a9538acd9/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=199552e6dc6d100d6aaf25336d1e063a9538acd9", "filename": "src/listener.coffee", "sha": "19802f97e2bfae1cef01470a1cfeaaf2b7f70bb1", "additions": 50, "patch": "@@ -1,6 +1,8 @@\n {inspect} = require 'util'\n+async     = require 'async'\n \n {TextMessage} = require './message'\n+Middleware = require './middleware'\n \n class Listener\n   # Listeners receive every message from the chat source and decide if they\n@@ -25,24 +27,65 @@ class Listener\n     if not @options.id?\n       @options.id = null\n \n-    if not @callback?\n+    if not @callback? or typeof @callback != 'function'\n       throw new Error \"Missing a callback for Listener\"\n \n   # Public: Determines if the listener likes the content of the message. If\n-  # so, a Response built from the given Message is passed to the Listener\n-  # callback.\n+  # so, a Response built from the given Message is passed through all\n+  # registered middleware and potentially the Listener callback. Note that\n+  # middleware can intercept the message and prevent the callback from ever\n+  # being executed.\n   #\n   # message - A Message instance.\n+  # middleware - Optional Middleware object to execute before the Listener callback\n+  # callback - Optional Function called with a boolean of whether the matcher matched\n   #\n   # Returns a boolean of whether the matcher matched.\n-  call: (message) ->\n+  # Returns before executing callback\n+  call: (message, middleware, cb) ->\n+    # middleware argument is optional\n+    if not cb? and typeof middleware is 'function'\n+      cb = middleware\n+      middleware = undefined\n+\n+    # ensure we have a Middleware object\n+    if not middleware?\n+      middleware = new Middleware(@robot)\n+\n     if match = @matcher message\n-      @robot.logger.debug \\\n-        \"Message '#{message}' matched regex /#{inspect @regex}/\" if @regex\n+      if @regex\n+        @robot.logger.debug \\\n+          \"Message '#{message}' matched regex /#{inspect @regex}/\"\n+\n+      # special middleware-like function that always executes the Listener's\n+      # callback and calls done (never calls 'next')\n+      executeListener = (context, done) =>\n+        @robot.logger.debug \"Executing listener callback for Message '#{message}'\"\n+        try\n+          @callback context.response\n+        catch err\n+          @robot.emit('error', err, context.response)\n+        done()\n+\n+      # When everything is finished (down the middleware stack and back up),\n+      # pass control back to the robot\n+      allDone = () ->\n+        # Yes, we tried to execute the listener callback (middleware may\n+        # have intercepted before actually executing though)\n+        if cb?\n+          process.nextTick -> cb true\n \n-      @callback new @robot.Response(@robot, message, match)\n+      response = new @robot.Response(@robot, message, match)\n+      middleware.execute(\n+        {listener: @, response: response}\n+        executeListener\n+        allDone\n+      )\n       true\n     else\n+      if cb?\n+        # No, we didn't try to execute the listener callback\n+        process.nextTick -> cb false\n       false\n \n class TextListener extends Listener", "changes": 57}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/199552e6dc6d100d6aaf25336d1e063a9538acd9/src/middleware.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/199552e6dc6d100d6aaf25336d1e063a9538acd9/src/middleware.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/middleware.coffee?ref=199552e6dc6d100d6aaf25336d1e063a9538acd9", "filename": "src/middleware.coffee", "sha": "6edd3417d13021b6dda2c235f4ba9e95baf91083", "additions": 66, "patch": "@@ -0,0 +1,66 @@\n+async = require 'async'\n+\n+class Middleware\n+  constructor: (@robot) ->\n+    @stack = []\n+\n+  # Public: Execute all middleware in order and call 'next' with the latest\n+  # 'done' callback if last middleware calls through. If all middleware is\n+  # compliant, 'done' should be called with no arguments when the entire\n+  # round trip is complete.\n+  #\n+  # context - context object that is passed through the middleware stack.\n+  #     When handling errors, this is assumed to have a `response` property.\n+  #\n+  # next(context, done) - Called when all middleware is complete (assuming\n+  #     all continued by calling respective 'next' functions)\n+  #\n+  # done() - Initial (final) completion callback. May be wrapped by\n+  #     executed middleware.\n+  #\n+  # Returns nothing\n+  # Returns before executing any middleware\n+  execute: (context, next, done) ->\n+    # Execute a single piece of middleware and update the completion callback\n+    # (each piece of middleware can wrap the 'done' callback with additional\n+    # logic).\n+    executeSingleMiddleware = (doneFunc, middlewareFunc, cb) =>\n+      # Match the async.reduce interface\n+      nextFunc = (newDoneFunc) -> cb(null, newDoneFunc)\n+      # Catch errors in synchronous middleware\n+      try\n+        middlewareFunc.call(undefined, context, nextFunc, doneFunc)\n+      catch err\n+        # Maintaining the existing error interface (Response object)\n+        @robot.emit('error', err, context.response)\n+        # Forcibly fail the middleware and stop executing deeper\n+        doneFunc()\n+\n+    # Executed when the middleware stack is finished\n+    allDone = (_, finalDoneFunc) -> next(context, finalDoneFunc)\n+\n+    # Execute each piece of middleware, collecting the latest 'done' callback\n+    # at each step.\n+    process.nextTick =>\n+      async.reduce(@stack, done, executeSingleMiddleware, allDone)\n+\n+  # Public: Registers new middleware\n+  #\n+  # middleware - A generic pipeline component function that can either\n+  #              continue the pipeline or interrupt it. The function is called\n+  #              with (robot, context, next, done). If execution should\n+  #              continue (next middleware, final callback), the middleware\n+  #              should call the 'next' function with 'done' as an argument.\n+  #              If not, the middleware should call the 'done' function with\n+  #              no arguments. Middleware may wrap the 'done' function in\n+  #              order to execute logic after the final callback has been\n+  #              executed.\n+  #\n+  # Returns nothing.\n+  register: (middleware) ->\n+    if middleware.length != 3\n+      throw new Error(\"Incorrect number of arguments for middleware callback (expected 3, got #{middleware.length})\")\n+    @stack.push middleware\n+    return undefined\n+\n+module.exports = Middleware", "changes": 66}, {"status": "modified", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/199552e6dc6d100d6aaf25336d1e063a9538acd9/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/199552e6dc6d100d6aaf25336d1e063a9538acd9/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=199552e6dc6d100d6aaf25336d1e063a9538acd9", "filename": "src/robot.coffee", "sha": "a18f2156d47c5b316266146c5c5cfa67b8645adf", "additions": 61, "patch": "@@ -3,12 +3,14 @@ Log            = require 'log'\n Path           = require 'path'\n HttpClient     = require 'scoped-http-client'\n {EventEmitter} = require 'events'\n+async          = require 'async'\n \n User = require './user'\n Brain = require './brain'\n Response = require './response'\n {Listener,TextListener} = require './listener'\n {EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n+Middleware = require './middleware'\n \n HUBOT_DEFAULT_ADAPTERS = [\n   'campfire'\n@@ -39,15 +41,17 @@ class Robot\n   #\n   # Returns nothing.\n   constructor: (adapterPath, adapter, httpd, name = 'Hubot') ->\n-    @name      = name\n-    @events    = new EventEmitter\n-    @brain     = new Brain @\n-    @alias     = false\n-    @adapter   = null\n-    @Response  = Response\n-    @commands  = []\n-    @listeners = []\n-    @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n+    @name       = name\n+    @events     = new EventEmitter\n+    @brain      = new Brain @\n+    @alias      = false\n+    @adapter    = null\n+    @Response   = Response\n+    @commands   = []\n+    @listeners  = []\n+    @middleware =\n+      listener: new Middleware(@)\n+    @logger     = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n     @pingIntervalId = null\n     @globalHttpOptions = {}\n \n@@ -207,24 +211,61 @@ class Robot\n       ((msg) -> msg.message = msg.message.message; callback msg)\n     )\n \n+  # Public: Registers new middleware for execution after matching but before\n+  # Listener callbacks\n+  #\n+  # middleware - A function that determines whether or not a given matching\n+  #              Listener should be executed. The function is called with\n+  #              (robot, listener, response, next, done). If execution should\n+  #              continue (next middleware, Listener callback), the middleware\n+  #              should call the 'next' function with 'done' as an argument.\n+  #              If not, the middleware should call the 'done' function with\n+  #              no arguments.\n+  #\n+  # Returns nothing.\n+  listenerMiddleware: (middleware) ->\n+    @middleware.listener.register middleware\n+    return undefined\n+\n   # Public: Passes the given message to any interested Listeners.\n   #\n   # message - A Message instance. Listeners can flag this message as 'done' to\n   #           prevent further execution.\n   #\n+  # cb - Optional callback that is called when message processing is complete\n+  #\n   # Returns nothing.\n-  receive: (message) ->\n-    results = []\n-    for listener in @listeners\n-      try\n-        results.push listener.call(message)\n-        break if message.done\n-      catch error\n-        @emit('error', error, new @Response(@, message, []))\n+  # Returns before executing callback\n+  receive: (message, cb) ->\n+    # Try executing all registered Listeners in order of registration\n+    # and return after message is done being processed\n+    anyListenersExecuted = false\n+    async.detectSeries(\n+      @listeners,\n+      (listener, cb) =>\n+        try\n+          listener.call message, @middleware.listener, (listenerExecuted) ->\n+            anyListenersExecuted = anyListenersExecuted || listenerExecuted\n+            # Defer to the event loop at least after every listener so the\n+            # stack doesn't get too big\n+            process.nextTick () ->\n+              # Stop processing when message.done == true\n+              cb(message.done)\n+        catch err\n+          @emit('error', err, new @Response(@, message, []))\n+          # Continue to next listener when there is an error\n+          cb(false)\n+      ,\n+      # Ignore the result ( == the listener that set message.done = true)\n+      (_) =>\n+        # If no registered Listener matched the message\n+        if message not instanceof CatchAllMessage and not anyListenersExecuted\n+          @logger.debug 'No listeners executed; falling back to catch-all'\n+          @receive new CatchAllMessage(message), cb\n+        else\n+          process.nextTick cb if cb?\n+    )\n \n-        false\n-    if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n-      @receive new CatchAllMessage(message)\n \n   # Public: Loads a file in path.\n   #", "changes": 81}, {"status": "modified", "deletions": 23, "raw_url": "https://github.com/hubotio/hubot/raw/199552e6dc6d100d6aaf25336d1e063a9538acd9/test/listener_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/199552e6dc6d100d6aaf25336d1e063a9538acd9/test/listener_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.coffee?ref=199552e6dc6d100d6aaf25336d1e063a9538acd9", "filename": "test/listener_test.coffee", "sha": "b3df6390be0c9172be21e8a5502186a1f941ada0", "additions": 209, "patch": "@@ -13,8 +13,16 @@ User = require '../src/user.coffee'\n \n describe 'Listener', ->\n   beforeEach ->\n-    # Dummy robot (should never actually get called)\n+    # Dummy robot\n     @robot =\n+      # Re-throw AssertionErrors for clearer test failures\n+      emit: (name, err, response) ->\n+        if err.constructor.name == \"AssertionError\"\n+          process.nextTick () ->\n+            throw err\n+      # Ignore log messages\n+      logger:\n+        debug: () ->\n       # Why is this part of the Robot object??\n       Response: Response\n \n@@ -26,17 +34,17 @@ describe 'Listener', ->\n \n   describe 'Unit Tests', ->\n     describe '#call', ->\n-      it 'calls the matcher', ->\n+      it 'calls the matcher', (done) ->\n         callback = sinon.spy()\n         testMatcher = sinon.spy()\n         testMessage = {}\n \n         testListener = new Listener(@robot, testMatcher, callback)\n-        testListener.call testMessage\n+        testListener.call testMessage, (_) ->\n+          expect(testMatcher).to.have.been.calledWith(testMessage)\n+          done()\n \n-        expect(testMatcher).to.have.been.calledWith(testMessage)\n-\n-      it 'passes the matcher result on to the listener callback', ->\n+      it 'passes the matcher result on to the listener callback', (done) ->\n         matcherResult = {}\n         testMatcher = sinon.stub().returns(matcherResult)\n         testMessage = {}\n@@ -47,34 +55,85 @@ describe 'Listener', ->\n         expect(matcherResult).to.be.ok\n \n         testListener = new Listener(@robot, testMatcher, listenerCallback)\n-        result = testListener.call testMessage\n+        testListener.call testMessage, (result) ->\n+          # sanity check; message should have been processed\n+          expect(testMatcher).to.have.been.called\n+          expect(result).to.be.ok\n \n-        # sanity check; message should have been processed\n-        expect(testMatcher).to.have.been.called\n-        expect(result).to.be.ok\n+          done()\n \n       describe 'if the matcher returns true', ->\n-        it 'executes the listener callback', ->\n+        it 'executes the listener callback', (done) ->\n           listenerCallback = sinon.spy()\n           testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n \n           testListener = new Listener(@robot, testMatcher, listenerCallback)\n-          testListener.call testMessage\n-\n-          expect(listenerCallback).to.have.been.called\n+          testListener.call testMessage, (_) ->\n+            expect(listenerCallback).to.have.been.called\n+            done()\n \n \n-        it 'returns true', ->\n+        it 'returns true', () ->\n           listenerCallback = sinon.spy()\n           testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n \n           testListener = new Listener(@robot, testMatcher, listenerCallback)\n           result = testListener.call testMessage\n-\n           expect(result).to.be.ok\n-          \n+\n+        it 'calls the provided callback with true', (done) ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(true)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener.call testMessage, (result) ->\n+            expect(result).to.be.ok\n+            done()\n+\n+        it 'calls the provided callback after the function returns', (done) ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(true)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          finished = false\n+          testListener.call testMessage, (result) ->\n+            expect(finished).to.be.ok\n+            done()\n+          finished = true\n+\n+        it 'handles uncaught errors from the listener callback', (done) ->\n+          testMatcher = sinon.stub().returns(true)\n+          testMessage = {}\n+          theError = new Error()\n+\n+          listenerCallback = (response) ->\n+            throw theError\n+\n+          @robot.emit = (name, err, response) ->\n+            expect(name).to.equal('error')\n+            expect(err).to.equal(theError)\n+            expect(response.message).to.equal(testMessage)\n+            done()\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener.call testMessage, sinon.spy()\n+\n+        it 'calls the provided callback with true if there is an error thrown by the listener callback', (done) ->\n+          testMatcher = sinon.stub().returns(true)\n+          testMessage = {}\n+          theError = new Error()\n+\n+          listenerCallback = (response) ->\n+            throw theError\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener.call testMessage, (result) ->\n+            expect(result).to.be.ok\n+            done()\n \n         it 'calls the listener callback with a Response that wraps the Message', (done) ->\n           testMatcher = sinon.stub().returns(true)\n@@ -88,28 +147,155 @@ describe 'Listener', ->\n \n           testListener.call testMessage, sinon.spy()\n \n+        it 'passes through the provided middleware stack', (testDone) ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(true)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testMiddleware =\n+            execute: (context, next, done) ->\n+              expect(context.listener).to.be.equal(testListener)\n+              expect(context.response).to.be.instanceof(Response)\n+              expect(context.response.message).to.be.equal(testMessage)\n+              expect(next).to.be.a('function')\n+              expect(done).to.be.a('function')\n+              testDone()\n+\n+          testListener.call(testMessage, testMiddleware, sinon.spy())\n+\n+        it 'executes the listener callback if middleware succeeds', (testDone) ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(true)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+\n+          testListener.call testMessage, (result) ->\n+            expect(listenerCallback).to.have.been.called\n+            # Matcher matched, so we return true\n+            expect(result).to.be.ok\n+            testDone()\n+\n+        it 'does not execute the listener callback if middleware fails', (testDone) ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(true)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testMiddleware =\n+            execute: (context, next, done) ->\n+              # Middleware fails\n+              done()\n+\n+          testListener.call testMessage, testMiddleware, (result) ->\n+            expect(listenerCallback).to.not.have.been.called\n+            # Matcher still matched, so we return true\n+            expect(result).to.be.ok\n+            testDone()\n+\n+        it 'unwinds the middleware stack if there is an error in the listener callback', (testDone) ->\n+          listenerCallback = sinon.stub().throws(new Error())\n+          testMatcher = sinon.stub().returns(true)\n+          testMessage = {}\n+          extraDoneFunc = null\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testMiddleware =\n+            execute: (context, next, done) ->\n+              extraDoneFunc = sinon.spy done\n+              next context, extraDoneFunc\n+\n+          testListener.call testMessage, testMiddleware, (result) ->\n+            # Listener callback was called (and failed)\n+            expect(listenerCallback).to.have.been.called\n+            # Middleware stack was unwound correctly\n+            expect(extraDoneFunc).to.have.been.called\n+            # Matcher still matched, so we return true\n+            expect(result).to.be.ok\n+            testDone()\n+\n+\n       describe 'if the matcher returns false', ->\n-        it 'does not execute the listener callback', ->\n+        it 'does not execute the listener callback', (done) ->\n           listenerCallback = sinon.spy()\n           testMatcher = sinon.stub().returns(false)\n           testMessage = {}\n \n           testListener = new Listener(@robot, testMatcher, listenerCallback)\n-          testListener.call testMessage\n-\n-          expect(listenerCallback).to.not.have.been.called\n+          testListener.call testMessage, (_) ->\n+            expect(listenerCallback).to.not.have.been.called\n+            done()\n \n \n-        it 'returns false', ->\n+        it 'returns false', () ->\n           listenerCallback = sinon.spy()\n           testMatcher = sinon.stub().returns(false)\n           testMessage = {}\n \n           testListener = new Listener(@robot, testMatcher, listenerCallback)\n           result = testListener.call testMessage\n-\n           expect(result).to.not.be.ok\n \n+        it 'calls the provided callback with false', (done) ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(false)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener.call testMessage, (result) ->\n+            expect(result).to.not.be.ok\n+            done()\n+\n+        it 'calls the provided callback after the function returns', (done) ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(false)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          finished = false\n+          testListener.call testMessage, (result) ->\n+            expect(finished).to.be.ok\n+            done()\n+          finished = true\n+\n+        it 'does not execute any middleware', (done) ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(false)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testMiddleware =\n+            execute: sinon.spy()\n+\n+          testListener.call testMessage, (result) =>\n+            expect(testMiddleware.execute).to.not.have.been.called\n+            done()\n+\n+    describe '#constructor', ->\n+      it 'requires a matcher', ->\n+        expect(() -> new Listener(@robot, undefined, {}, sinon.spy())).to.throw(Error)\n+\n+      it 'requires a callback', ->\n+        # No options\n+        expect(() -> new Listener(@robot, sinon.spy(), undefined)).to.throw(Error)\n+        # With options\n+        expect(() -> new Listener(@robot, sinon.spy(), {}, undefined)).to.throw(Error)\n+\n+      it 'gracefully handles missing options', ->\n+        testMatcher = sinon.spy()\n+        listenerCallback = sinon.spy()\n+        testListener = new Listener(@robot, testMatcher, listenerCallback)\n+        # slightly brittle because we are testing for the default options Object\n+        expect(testListener.options).to.deep.equal({id:null})\n+        expect(testListener.callback).to.be.equal(listenerCallback)\n+\n+      it 'gracefully handles a missing ID (set to null)', ->\n+        testMatcher = sinon.spy()\n+        listenerCallback = sinon.spy()\n+        testListener = new Listener(@robot, testMatcher, {}, listenerCallback)\n+        expect(testListener.options.id).to.be.null\n+\n     describe 'TextListener', ->\n       describe '#matcher', ->\n         it 'matches TextMessages', ->", "changes": 232}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/199552e6dc6d100d6aaf25336d1e063a9538acd9/test/middleware_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/199552e6dc6d100d6aaf25336d1e063a9538acd9/test/middleware_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/middleware_test.coffee?ref=199552e6dc6d100d6aaf25336d1e063a9538acd9", "filename": "test/middleware_test.coffee", "sha": "e4c71989c4f54ccfd316d312e8e88ce1c11920a7", "additions": 362, "patch": "@@ -0,0 +1,362 @@\n+# Assertions and Stubbing\n+chai = require 'chai'\n+sinon = require 'sinon'\n+chai.use require 'sinon-chai'\n+\n+{ expect } = chai\n+\n+mockery = require 'mockery'\n+\n+# Hubot classes\n+Robot = require '../src/robot.coffee'\n+{ CatchAllMessage, EnterMessage, TextMessage } = require '../src/message'\n+Adapter = require '../src/adapter'\n+Response = require '../src/response'\n+Middleware = require '../src/middleware'\n+\n+# Preload the Hubot mock adapter but substitute in the latest version of Adapter\n+mockery.enable()\n+mockery.registerAllowable 'hubot-mock-adapter'\n+mockery.registerAllowable 'lodash' # hubot-mock-adapter uses lodash\n+# Force hubot-mock-adapter to use the latest version of Adapter\n+mockery.registerMock 'hubot/src/adapter', Adapter\n+# Load the mock adapter into the cache\n+require 'hubot-mock-adapter'\n+# We're done with mockery\n+mockery.deregisterMock 'hubot/src/adapter'\n+mockery.disable()\n+\n+\n+describe 'Middleware', ->\n+  describe 'Unit Tests', ->\n+    beforeEach ->\n+      @robot =\n+        # Stub out event emitting\n+        emit: sinon.spy()\n+\n+      @middleware = new Middleware(@robot)\n+\n+    describe '#execute', ->\n+      it 'executes synchronous middleware', (testDone) ->\n+        testMiddleware = sinon.spy (context, next, done) =>\n+          next(done)\n+\n+        @middleware.register testMiddleware\n+\n+        middlewareFinished = ->\n+          expect(testMiddleware).to.have.been.called\n+          testDone()\n+\n+        @middleware.execute(\n+          {}\n+          (_, done) -> done()\n+          middlewareFinished\n+        )\n+\n+      it 'executes asynchronous middleware', (testDone) ->\n+        testMiddleware = sinon.spy (context, next, done) ->\n+          # Yield to the event loop\n+          process.nextTick ->\n+            next(done)\n+\n+        @middleware.register testMiddleware\n+\n+        middlewareFinished = (context, done) ->\n+          expect(testMiddleware).to.have.been.called\n+          testDone()\n+\n+        @middleware.execute(\n+          {}\n+          (_, done) -> done()\n+          middlewareFinished\n+        )\n+\n+      it 'passes the correct arguments to each middleware', (testDone) ->\n+        testContext = {}\n+        # Pull the Robot in scope for simpler callbacks\n+        testRobot = @robot\n+\n+        testMiddleware = (context, next, done) ->\n+          # Break out of middleware error handling so assertion errors are\n+          # more visible\n+          process.nextTick ->\n+            # Check that variables were passed correctly\n+            expect(context).to.equal(testContext)\n+            next(done)\n+\n+        @middleware.register testMiddleware\n+\n+        @middleware.execute(\n+          testContext\n+          (_, done) -> done()\n+          -> testDone()\n+        )\n+\n+      it 'executes all registered middleware in definition order', (testDone) ->\n+        middlewareExecution = []\n+\n+        testMiddlewareA = (context, next, done) =>\n+          middlewareExecution.push('A')\n+          next(done)\n+\n+        testMiddlewareB = (context, next, done) ->\n+          middlewareExecution.push('B')\n+          next(done)\n+\n+        @middleware.register testMiddlewareA\n+        @middleware.register testMiddlewareB\n+\n+        middlewareFinished = ->\n+          expect(middlewareExecution).to.deep.equal(['A','B'])\n+          testDone()\n+\n+        @middleware.execute(\n+          {}\n+          (_, done) -> done()\n+          middlewareFinished\n+        )\n+\n+      it 'executes the next callback after the function returns when there is no middleware', (testDone) ->\n+        finished = false\n+        @middleware.execute(\n+          {}\n+          ->\n+            expect(finished).to.be.ok\n+            testDone()\n+          ->\n+        )\n+        finished = true\n+\n+      it 'always executes middleware after the function returns', (testDone) ->\n+        finished = false\n+\n+        @middleware.register (context, next, done) ->\n+          expect(finished).to.be.ok\n+          testDone()\n+\n+        @middleware.execute {}, (->), (->)\n+        finished = true\n+\n+      it 'does the right thing with done callbacks', (testDone) ->\n+        # we want to ensure that the 'done' callbacks are nested correctly\n+        # (executed in reverse order of definition)\n+        execution = []\n+\n+        testMiddlewareA = (context, next, done) ->\n+          execution.push 'middlewareA'\n+          next () ->\n+            execution.push 'doneA'\n+            done()\n+\n+        testMiddlewareB = (context, next, done) ->\n+          execution.push 'middlewareB'\n+          next () ->\n+            execution.push 'doneB'\n+            done()\n+\n+        @middleware.register testMiddlewareA\n+        @middleware.register testMiddlewareB\n+\n+        allDone = () ->\n+          expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'doneB', 'doneA'])\n+          testDone()\n+\n+        @middleware.execute(\n+          {}\n+          # Short circuit at the bottom of the middleware stack\n+          (_, done) -> done()\n+          allDone\n+        )\n+\n+      describe 'error handling', ->\n+        it 'does not execute subsequent middleware after the error is thrown', (testDone) ->\n+          middlewareExecution = []\n+\n+          testMiddlewareA = (context, next, done) ->\n+            middlewareExecution.push('A')\n+            next(done)\n+\n+          testMiddlewareB = (context, next, done) ->\n+            middlewareExecution.push('B')\n+            throw new Error\n+\n+          testMiddlewareC = (context, next, done) ->\n+            middlewareExecution.push('C')\n+            next(done)\n+\n+          @middleware.register testMiddlewareA\n+          @middleware.register testMiddlewareB\n+          @middleware.register testMiddlewareC\n+\n+          middlewareFinished = sinon.spy()\n+          middlewareFailed = () =>\n+            expect(middlewareFinished).to.not.have.been.called\n+            expect(middlewareExecution).to.deep.equal(['A','B'])\n+            testDone()\n+\n+          @middleware.execute(\n+            {}\n+            middlewareFinished\n+            middlewareFailed\n+          )\n+\n+        it 'emits an error event', (testDone) ->\n+          testResponse = {}\n+          theError = new Error\n+\n+          testMiddleware = (context, next, done) ->\n+            throw theError\n+\n+          @middleware.register testMiddleware\n+\n+          @robot.emit = sinon.spy (name, err, response) ->\n+            expect(name).to.equal('error')\n+            expect(err).to.equal(theError)\n+            expect(response).to.equal(testResponse)\n+\n+          middlewareFinished = sinon.spy()\n+          middlewareFailed = () =>\n+            expect(@robot.emit).to.have.been.called\n+            testDone()\n+\n+          @middleware.execute(\n+            {response: testResponse},\n+            middlewareFinished,\n+            middlewareFailed\n+          )\n+\n+        it 'unwinds the middleware stack (calling all done functions)', (testDone) ->\n+          extraDoneFunc = null\n+\n+          testMiddlewareA = (context, next, done) ->\n+            # Goal: make sure that the middleware stack is unwound correctly\n+            extraDoneFunc = sinon.spy () ->\n+              done()\n+            next extraDoneFunc\n+\n+          testMiddlewareB = (context, next, done) ->\n+            throw new Error\n+\n+          @middleware.register testMiddlewareA\n+          @middleware.register testMiddlewareB\n+\n+          middlewareFinished = sinon.spy()\n+          middlewareFailed = () ->\n+            # Sanity check that the error was actually thrown\n+            expect(middlewareFinished).to.not.have.been.called\n+\n+            expect(extraDoneFunc).to.have.been.called\n+            testDone()\n+\n+          @middleware.execute(\n+            {}\n+            middlewareFinished\n+            middlewareFailed\n+          )\n+\n+    describe '#register', ->\n+      it 'adds to the list of middleware', ->\n+        testMiddleware = (context, next, done) ->\n+\n+        @middleware.register testMiddleware\n+\n+        expect(@middleware.stack).to.include(testMiddleware)\n+\n+      it 'validates the arity of middleware', ->\n+        testMiddleware = (context, next, done, extra) ->\n+\n+        expect(=> @middleware.register(testMiddleware)).to.throw(/Incorrect number of arguments/)\n+\n+  # Per the documentation in docs/scripting.md\n+  # Any new fields that are exposed to middleware should be explicitly\n+  # tested for.\n+  describe 'Listener Middleware Public API', ->\n+    beforeEach ->\n+      @robot = new Robot null, 'mock-adapter', yes, 'TestHubot'\n+      @robot.run\n+\n+      # Re-throw AssertionErrors for clearer test failures\n+      @robot.on 'error', (name, err, response) ->\n+        if err?.constructor?.name == \"AssertionError\"\n+          process.nextTick () ->\n+            throw err\n+\n+      @user = @robot.brain.userForId '1', {\n+        name: 'hubottester'\n+        room: '#mocha'\n+      }\n+\n+      # Dummy middleware\n+      @middleware = sinon.spy (context, next, done) ->\n+        next(done)\n+\n+      @robot.listenerMiddleware (context, next, done) =>\n+        @middleware.call @, context, next, done\n+\n+      @testMessage = new TextMessage @user, 'message123'\n+      @robot.hear /^message123$/, (response) ->\n+      @testListener = @robot.listeners[0]\n+\n+    afterEach ->\n+      @robot.server.close()\n+      @robot.shutdown()\n+\n+    describe 'context', ->\n+      describe 'listener', ->\n+        it 'is the listener object that matched', (testDone) ->\n+          @robot.receive @testMessage, () =>\n+            expect(@middleware).to.have.been.calledWithMatch(\n+              sinon.match.has('listener',\n+                sinon.match.same(@testListener)) # context\n+              sinon.match.any                    # next\n+              sinon.match.any                    # done\n+            )\n+            testDone()\n+\n+        it 'has options.id (metadata)', (testDone) ->\n+          @robot.receive @testMessage, () =>\n+            expect(@middleware).to.have.been.calledWithMatch(\n+              sinon.match.has('listener',\n+                sinon.match.has('options',\n+                  sinon.match.has('id')))        # context\n+              sinon.match.any                    # next\n+              sinon.match.any                    # done\n+            )\n+            testDone()\n+\n+      describe 'response', ->\n+        it 'is a Response that wraps the message', (testDone) ->\n+          @robot.receive @testMessage, () =>\n+            expect(@middleware).to.have.been.calledWithMatch(\n+              sinon.match.has('response',\n+                sinon.match.instanceOf(Response).and(\n+                  sinon.match.has('message',\n+                    sinon.match.same(@testMessage)))) # context\n+              sinon.match.any                         # next\n+              sinon.match.any                         # done\n+            )\n+            testDone()\n+\n+    describe 'next', ->\n+      it 'is a function with arity one', (testDone) ->\n+        @robot.receive @testMessage, () =>\n+          expect(@middleware).to.have.been.calledWithMatch(\n+            sinon.match.any             # context\n+            sinon.match.func.and(\n+              sinon.match.has('length',\n+                sinon.match(1)))        # next\n+            sinon.match.any             # done\n+          )\n+          testDone()\n+\n+    describe 'done', ->\n+      it 'is a function with arity zero', (testDone) ->\n+        @robot.receive @testMessage, () =>\n+          expect(@middleware).to.have.been.calledWithMatch(\n+            sinon.match.any             # context\n+            sinon.match.any             # next\n+            sinon.match.func.and(\n+              sinon.match.has('length',\n+                sinon.match(0)))        # done\n+          )\n+          testDone()", "changes": 362}, {"status": "modified", "deletions": 42, "raw_url": "https://github.com/hubotio/hubot/raw/199552e6dc6d100d6aaf25336d1e063a9538acd9/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/199552e6dc6d100d6aaf25336d1e063a9538acd9/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=199552e6dc6d100d6aaf25336d1e063a9538acd9", "filename": "test/robot_test.coffee", "sha": "15762ef8027e67c39be9327db9429942d54e4fd6", "additions": 156, "patch": "@@ -32,6 +32,12 @@ describe 'Robot', ->\n     @robot = new Robot null, 'mock-adapter', yes, 'TestHubot'\n     @robot.run\n \n+    # Re-throw AssertionErrors for clearer test failures\n+    @robot.on 'error', (name, err, response) ->\n+      if err.constructor.name == \"AssertionError\"\n+        process.nextTick () ->\n+          throw err\n+\n     @user = @robot.brain.userForId '1', {\n       name: 'hubottester'\n       room: '#mocha'\n@@ -111,12 +117,14 @@ describe 'Robot', ->\n         expect(@robot.listeners).to.have.length(1)\n \n     describe '#receive', ->\n-      it 'calls all registered listeners', ->\n+      it 'calls all registered listeners', (done) ->\n         # Need to use a real Message so that the CatchAllMessage constructor works\n         testMessage = new TextMessage(@user, 'message123')\n \n         listener =\n-          call: sinon.spy()\n+          call: (response, middleware, cb) ->\n+            cb()\n+        sinon.spy(listener, 'call')\n \n         @robot.listeners = [\n           listener\n@@ -125,13 +133,13 @@ describe 'Robot', ->\n           listener\n         ]\n \n-        @robot.receive testMessage\n+        @robot.receive testMessage, () ->\n+          # When no listeners match, each listener is called twice: once with\n+          # the original message and once with a CatchAll message\n+          expect(listener.call).to.have.callCount(8)\n+          done()\n \n-        # When no listeners match, each listener is called twice: once with\n-        # the original message and once with a CatchAll message\n-        expect(listener.call).to.have.callCount(8)\n-\n-      it 'sends a CatchAllMessage if no listener matches', ->\n+      it 'sends a CatchAllMessage if no listener matches', (done) ->\n         # Testing for recursion with a new CatchAllMessage that wraps the\n         # original message\n \n@@ -140,24 +148,24 @@ describe 'Robot', ->\n \n         # Replace @robot.receive so we can catch when the functions recurses\n         oldReceive = @robot.receive\n-        @robot.receive = (message) ->\n+        @robot.receive = (message, cb) ->\n           expect(message).to.be.instanceof(CatchAllMessage)\n           expect(message.message).to.be.equal(testMessage)\n+          cb()\n         sinon.spy(@robot, 'receive')\n \n         # Call the original receive method that we want to test\n-        oldReceive.call @robot, testMessage\n-\n-        # Ensure the function recursed\n-        expect(@robot.receive).to.have.been.called\n+        oldReceive.call @robot, testMessage, () =>\n+          expect(@robot.receive).to.have.been.called\n+          done()\n \n-      it 'does not trigger a CatchAllMessage if a listener matches', ->\n+      it 'does not trigger a CatchAllMessage if a listener matches', (done) ->\n         testMessage = new TextMessage(@user, 'message123')\n \n         matchingListener =\n-          call: (message) ->\n+          call: (message, middleware, cb) ->\n             # indicate that the message matched the listener\n-            true\n+            cb(true)\n \n         # Replace @robot.receive so we can catch if the functions recurses\n         oldReceive = @robot.receive\n@@ -168,19 +176,20 @@ describe 'Robot', ->\n         ]\n \n         # Call the original receive method that we want to test\n-        oldReceive.call @robot, testMessage\n+        oldReceive.call @robot, testMessage, () ->\n+          done()\n \n         # Ensure the function did not recurse\n         expect(@robot.receive).to.not.have.been.called\n \n-      it 'stops processing if a listener marks the message as done', ->\n+      it 'stops processing if a listener marks the message as done', (done) ->\n         testMessage = new TextMessage(@user, 'message123')\n \n         matchingListener =\n-          call: (message) ->\n+          call: (message, middleware, cb) ->\n             message.done = true\n             # Listener must have matched\n-            true\n+            cb(true)\n \n         listenerSpy =\n           call: sinon.spy()\n@@ -190,11 +199,11 @@ describe 'Robot', ->\n           listenerSpy\n         ]\n \n-        @robot.receive testMessage\n-\n-        expect(listenerSpy.call).to.not.have.been.called\n+        @robot.receive testMessage, () ->\n+          expect(listenerSpy.call).to.not.have.been.called\n+          done()\n \n-      it 'gracefully handles listener uncaughtExceptions (move on to next listener)', ->\n+      it 'gracefully handles listener uncaughtExceptions (move on to next listener)', (done) ->\n         testMessage = {}\n         theError = new Error()\n \n@@ -204,9 +213,9 @@ describe 'Robot', ->\n \n         goodListenerCalled = false\n         goodListener =\n-          call: (_) ->\n+          call: (_, middleware, cb) ->\n             goodListenerCalled = true\n-            true\n+            cb(true)\n \n         @robot.listeners = [\n           badListener\n@@ -219,10 +228,18 @@ describe 'Robot', ->\n           expect(response.message).to.equal(testMessage)\n         sinon.spy(@robot, 'emit')\n \n-        @robot.receive testMessage\n+        @robot.receive testMessage, () =>\n+          expect(@robot.emit).to.have.been.called\n+          expect(goodListenerCalled).to.be.ok\n+          done()\n \n-        expect(@robot.emit).to.have.been.called\n-        expect(goodListenerCalled).to.be.ok\n+      it 'executes the callback after the function returns when there are no listeners', (done) ->\n+        testMessage = new TextMessage @user, 'message123'\n+        finished = false\n+        @robot.receive testMessage, ->\n+          expect(finished).to.be.ok\n+          done()\n+        finished = true\n \n     describe '#loadFile', ->\n       beforeEach ->\n@@ -409,7 +426,7 @@ describe 'Robot', ->\n         done()\n       @robot.receive testMessage\n \n-    it 'calls multiple matching listeners', ->\n+    it 'calls multiple matching listeners', (done) ->\n       testMessage = new TextMessage(@user, 'message123')\n \n       listenersCalled = 0\n@@ -420,9 +437,9 @@ describe 'Robot', ->\n       @robot.hear /^message123$/, listenerCallback\n       @robot.hear /^message123$/, listenerCallback\n \n-      @robot.receive testMessage\n-\n-      expect(listenersCalled).to.equal(2)\n+      @robot.receive testMessage, () ->\n+        expect(listenersCalled).to.equal(2)\n+        done()\n \n     it 'calls the catch-all listener if no listeners match', (done) ->\n       testMessage = new TextMessage(@user, 'message123')\n@@ -437,7 +454,7 @@ describe 'Robot', ->\n \n       @robot.receive testMessage\n \n-    it 'does not call the catch-all listener if any listener matched', ->\n+    it 'does not call the catch-all listener if any listener matched', (done) ->\n       testMessage = new TextMessage(@user, 'message123')\n \n       listenerCallback = sinon.spy()\n@@ -446,12 +463,12 @@ describe 'Robot', ->\n       catchAllCallback = sinon.spy()\n       @robot.catchAll catchAllCallback\n \n-      @robot.receive testMessage\n-\n-      expect(listenerCallback).to.have.been.called.once\n-      expect(catchAllCallback).to.not.have.been.called\n+      @robot.receive testMessage, () ->\n+        expect(listenerCallback).to.have.been.called.once\n+        expect(catchAllCallback).to.not.have.been.called\n+        done()\n \n-    it 'stops processing if message.finish() is called synchronously', ->\n+    it 'stops processing if message.finish() is called synchronously', (done) ->\n       testMessage = new TextMessage(@user, 'message123')\n \n       @robot.hear /^message123$/, (response) ->\n@@ -460,9 +477,9 @@ describe 'Robot', ->\n       listenerCallback = sinon.spy()\n       @robot.hear /^message123$/, listenerCallback\n \n-      @robot.receive testMessage\n-\n-      expect(listenerCallback).to.not.have.been.called\n+      @robot.receive testMessage, () ->\n+        expect(listenerCallback).to.not.have.been.called\n+        done()\n \n     it 'calls non-TextListener objects', (done) ->\n       testMessage = new EnterMessage @user\n@@ -472,3 +489,100 @@ describe 'Robot', ->\n         done()\n \n       @robot.receive testMessage\n+\n+    it 'gracefully handles listener uncaughtExceptions (move on to next listener)', (done) ->\n+      testMessage = new TextMessage @user, 'message123'\n+      theError = new Error()\n+\n+      @robot.hear /^message123$/, () ->\n+        throw theError\n+\n+      goodListenerCalled = false\n+      @robot.hear /^message123$/, () ->\n+        goodListenerCalled = true\n+\n+      [badListener,goodListener] = @robot.listeners\n+\n+      @robot.emit = (name, err, response) ->\n+        expect(name).to.equal('error')\n+        expect(err).to.equal(theError)\n+        expect(response.message).to.equal(testMessage)\n+      sinon.spy(@robot, 'emit')\n+\n+      @robot.receive testMessage, () =>\n+        expect(@robot.emit).to.have.been.called\n+        expect(goodListenerCalled).to.be.ok\n+        done()\n+\n+    describe 'Listener Middleware', ->\n+      it 'allows listener callback execution', (testDone) ->\n+        listenerCallback = sinon.spy()\n+        @robot.hear /^message123$/, listenerCallback\n+        @robot.listenerMiddleware (context, next, done) ->\n+          # Allow Listener callback execution\n+          next done\n+\n+        testMessage = new TextMessage @user, 'message123'\n+        @robot.receive testMessage, () ->\n+          expect(listenerCallback).to.have.been.called\n+          testDone()\n+\n+      it 'can block listener callback execution', (testDone) ->\n+        listenerCallback = sinon.spy()\n+        @robot.hear /^message123$/, listenerCallback\n+        @robot.listenerMiddleware (context, next, done) ->\n+          # Block Listener callback execution\n+          done()\n+\n+        testMessage = new TextMessage @user, 'message123'\n+        @robot.receive testMessage, () ->\n+          expect(listenerCallback).to.not.have.been.called\n+          testDone()\n+\n+      it 'receives the correct arguments', (testDone) ->\n+        @robot.hear /^message123$/, () ->\n+        testListener = @robot.listeners[0]\n+        testMessage = new TextMessage @user, 'message123'\n+\n+        @robot.listenerMiddleware (context, next, done) =>\n+          # Escape middleware error handling for clearer test failures\n+          process.nextTick () =>\n+            expect(context.listener).to.equal(testListener)\n+            expect(context.response.message).to.equal(testMessage)\n+            expect(next).to.be.a('function')\n+            expect(done).to.be.a('function')\n+            testDone()\n+\n+        @robot.receive testMessage\n+\n+      it 'executes middleware in order of definition', (testDone) ->\n+        execution = []\n+\n+        testMiddlewareA = (context, next, done) ->\n+          execution.push 'middlewareA'\n+          next () ->\n+            execution.push 'doneA'\n+            done()\n+\n+        testMiddlewareB = (context, next, done) ->\n+          execution.push 'middlewareB'\n+          next () ->\n+            execution.push 'doneB'\n+            done()\n+\n+        @robot.listenerMiddleware testMiddlewareA\n+        @robot.listenerMiddleware testMiddlewareB\n+\n+        @robot.hear /^message123$/, () ->\n+          execution.push 'listener'\n+\n+        testMessage = new TextMessage @user, 'message123'\n+        @robot.receive testMessage, () ->\n+          expect(execution).to.deep.equal([\n+            'middlewareA'\n+            'middlewareB'\n+            'listener'\n+            'doneB'\n+            'doneA'\n+          ])\n+          testDone()", "changes": 198}], "805": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/2350a6fdf2bd59fa5a794e2c4a614999072bd100/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/2350a6fdf2bd59fa5a794e2c4a614999072bd100/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=2350a6fdf2bd59fa5a794e2c4a614999072bd100", "filename": "CHANGELOG.md", "sha": "4467e7989e34a14915217a614ae6b8643d17050d", "additions": 1, "patch": "@@ -27,7 +27,7 @@ v2.8.1\n v2.8.0\n ======\n \n-* Add support for `hubot --check-config` to verify hubot will load based on how it's configured\n+* Add support for `hubot --config-check` to verify hubot will load based on how it's configured\n * Include `script/` directory for convenient one-liners for common tasks of developing github/hubot\n * Fixes to default `image me` and `help`\n * Updated documentation about external scripts", "changes": 2}], "806": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c753f8ef96bb588b3532ab6144c636e795e5f257/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/c753f8ef96bb588b3532ab6144c636e795e5f257/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=c753f8ef96bb588b3532ab6144c636e795e5f257", "filename": "package.json", "sha": "728db7bf3a1fac034c0d09133b77976e74538eee", "additions": 1, "patch": "@@ -28,7 +28,7 @@\n     \"optparse\":           \"1.0.4\",\n     \"scoped-http-client\": \"0.9.8\",\n     \"log\":                \"1.4.0\",\n-    \"express\":            \"3.3.4\"\n+    \"express\":            \"3.18.1\"\n   },\n \n   \"engines\": {", "changes": 2}], "807": [{"status": "modified", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/0a572bf34cf202d02619212894b3405710cfbe18/LICENSE", "blob_url": "https://github.com/hubotio/hubot/blob/0a572bf34cf202d02619212894b3405710cfbe18/LICENSE", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/LICENSE?ref=0a572bf34cf202d02619212894b3405710cfbe18", "filename": "LICENSE", "sha": "ef7e7efc09c9d471c391f05b9567966928085840", "additions": 674, "patch": "@@ -1,20 +1,674 @@\n-Copyright (c) 2013 GitHub Inc.\n-\n-Permission is hereby granted, free of charge, to any person obtaining\n-a copy of this software and associated documentation files (the\n-\"Software\"), to deal in the Software without restriction, including\n-without limitation the rights to use, copy, modify, merge, publish,\n-distribute, sublicense, and/or sell copies of the Software, and to\n-permit persons to whom the Software is furnished to do so, subject to\n-the following conditions:\n-\n-The above copyright notice and this permission notice shall be\n-included in all copies or substantial portions of the Software.\n-\n-THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n-EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n-MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n-NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n-LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n-OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n-WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+GNU GENERAL PUBLIC LICENSE\n+                       Version 3, 29 June 2007\n+\n+ Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n+ Everyone is permitted to copy and distribute verbatim copies\n+ of this license document, but changing it is not allowed.\n+\n+                            Preamble\n+\n+  The GNU General Public License is a free, copyleft license for\n+software and other kinds of works.\n+\n+  The licenses for most software and other practical works are designed\n+to take away your freedom to share and change the works.  By contrast,\n+the GNU General Public License is intended to guarantee your freedom to\n+share and change all versions of a program--to make sure it remains free\n+software for all its users.  We, the Free Software Foundation, use the\n+GNU General Public License for most of our software; it applies also to\n+any other work released this way by its authors.  You can apply it to\n+your programs, too.\n+\n+  When we speak of free software, we are referring to freedom, not\n+price.  Our General Public Licenses are designed to make sure that you\n+have the freedom to distribute copies of free software (and charge for\n+them if you wish), that you receive source code or can get it if you\n+want it, that you can change the software or use pieces of it in new\n+free programs, and that you know you can do these things.\n+\n+  To protect your rights, we need to prevent others from denying you\n+these rights or asking you to surrender the rights.  Therefore, you have\n+certain responsibilities if you distribute copies of the software, or if\n+you modify it: responsibilities to respect the freedom of others.\n+\n+  For example, if you distribute copies of such a program, whether\n+gratis or for a fee, you must pass on to the recipients the same\n+freedoms that you received.  You must make sure that they, too, receive\n+or can get the source code.  And you must show them these terms so they\n+know their rights.\n+\n+  Developers that use the GNU GPL protect your rights with two steps:\n+(1) assert copyright on the software, and (2) offer you this License\n+giving you legal permission to copy, distribute and/or modify it.\n+\n+  For the developers' and authors' protection, the GPL clearly explains\n+that there is no warranty for this free software.  For both users' and\n+authors' sake, the GPL requires that modified versions be marked as\n+changed, so that their problems will not be attributed erroneously to\n+authors of previous versions.\n+\n+  Some devices are designed to deny users access to install or run\n+modified versions of the software inside them, although the manufacturer\n+can do so.  This is fundamentally incompatible with the aim of\n+protecting users' freedom to change the software.  The systematic\n+pattern of such abuse occurs in the area of products for individuals to\n+use, which is precisely where it is most unacceptable.  Therefore, we\n+have designed this version of the GPL to prohibit the practice for those\n+products.  If such problems arise substantially in other domains, we\n+stand ready to extend this provision to those domains in future versions\n+of the GPL, as needed to protect the freedom of users.\n+\n+  Finally, every program is threatened constantly by software patents.\n+States should not allow patents to restrict development and use of\n+software on general-purpose computers, but in those that do, we wish to\n+avoid the special danger that patents applied to a free program could\n+make it effectively proprietary.  To prevent this, the GPL assures that\n+patents cannot be used to render the program non-free.\n+\n+  The precise terms and conditions for copying, distribution and\n+modification follow.\n+\n+                       TERMS AND CONDITIONS\n+\n+  0. Definitions.\n+\n+  \"This License\" refers to version 3 of the GNU General Public License.\n+\n+  \"Copyright\" also means copyright-like laws that apply to other kinds of\n+works, such as semiconductor masks.\n+\n+  \"The Program\" refers to any copyrightable work licensed under this\n+License.  Each licensee is addressed as \"you\".  \"Licensees\" and\n+\"recipients\" may be individuals or organizations.\n+\n+  To \"modify\" a work means to copy from or adapt all or part of the work\n+in a fashion requiring copyright permission, other than the making of an\n+exact copy.  The resulting work is called a \"modified version\" of the\n+earlier work or a work \"based on\" the earlier work.\n+\n+  A \"covered work\" means either the unmodified Program or a work based\n+on the Program.\n+\n+  To \"propagate\" a work means to do anything with it that, without\n+permission, would make you directly or secondarily liable for\n+infringement under applicable copyright law, except executing it on a\n+computer or modifying a private copy.  Propagation includes copying,\n+distribution (with or without modification), making available to the\n+public, and in some countries other activities as well.\n+\n+  To \"convey\" a work means any kind of propagation that enables other\n+parties to make or receive copies.  Mere interaction with a user through\n+a computer network, with no transfer of a copy, is not conveying.\n+\n+  An interactive user interface displays \"Appropriate Legal Notices\"\n+to the extent that it includes a convenient and prominently visible\n+feature that (1) displays an appropriate copyright notice, and (2)\n+tells the user that there is no warranty for the work (except to the\n+extent that warranties are provided), that licensees may convey the\n+work under this License, and how to view a copy of this License.  If\n+the interface presents a list of user commands or options, such as a\n+menu, a prominent item in the list meets this criterion.\n+\n+  1. Source Code.\n+\n+  The \"source code\" for a work means the preferred form of the work\n+for making modifications to it.  \"Object code\" means any non-source\n+form of a work.\n+\n+  A \"Standard Interface\" means an interface that either is an official\n+standard defined by a recognized standards body, or, in the case of\n+interfaces specified for a particular programming language, one that\n+is widely used among developers working in that language.\n+\n+  The \"System Libraries\" of an executable work include anything, other\n+than the work as a whole, that (a) is included in the normal form of\n+packaging a Major Component, but which is not part of that Major\n+Component, and (b) serves only to enable use of the work with that\n+Major Component, or to implement a Standard Interface for which an\n+implementation is available to the public in source code form.  A\n+\"Major Component\", in this context, means a major essential component\n+(kernel, window system, and so on) of the specific operating system\n+(if any) on which the executable work runs, or a compiler used to\n+produce the work, or an object code interpreter used to run it.\n+\n+  The \"Corresponding Source\" for a work in object code form means all\n+the source code needed to generate, install, and (for an executable\n+work) run the object code and to modify the work, including scripts to\n+control those activities.  However, it does not include the work's\n+System Libraries, or general-purpose tools or generally available free\n+programs which are used unmodified in performing those activities but\n+which are not part of the work.  For example, Corresponding Source\n+includes interface definition files associated with source files for\n+the work, and the source code for shared libraries and dynamically\n+linked subprograms that the work is specifically designed to require,\n+such as by intimate data communication or control flow between those\n+subprograms and other parts of the work.\n+\n+  The Corresponding Source need not include anything that users\n+can regenerate automatically from other parts of the Corresponding\n+Source.\n+\n+  The Corresponding Source for a work in source code form is that\n+same work.\n+\n+  2. Basic Permissions.\n+\n+  All rights granted under this License are granted for the term of\n+copyright on the Program, and are irrevocable provided the stated\n+conditions are met.  This License explicitly affirms your unlimited\n+permission to run the unmodified Program.  The output from running a\n+covered work is covered by this License only if the output, given its\n+content, constitutes a covered work.  This License acknowledges your\n+rights of fair use or other equivalent, as provided by copyright law.\n+\n+  You may make, run and propagate covered works that you do not\n+convey, without conditions so long as your license otherwise remains\n+in force.  You may convey covered works to others for the sole purpose\n+of having them make modifications exclusively for you, or provide you\n+with facilities for running those works, provided that you comply with\n+the terms of this License in conveying all material for which you do\n+not control copyright.  Those thus making or running the covered works\n+for you must do so exclusively on your behalf, under your direction\n+and control, on terms that prohibit them from making any copies of\n+your copyrighted material outside their relationship with you.\n+\n+  Conveying under any other circumstances is permitted solely under\n+the conditions stated below.  Sublicensing is not allowed; section 10\n+makes it unnecessary.\n+\n+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n+\n+  No covered work shall be deemed part of an effective technological\n+measure under any applicable law fulfilling obligations under article\n+11 of the WIPO copyright treaty adopted on 20 December 1996, or\n+similar laws prohibiting or restricting circumvention of such\n+measures.\n+\n+  When you convey a covered work, you waive any legal power to forbid\n+circumvention of technological measures to the extent such circumvention\n+is effected by exercising rights under this License with respect to\n+the covered work, and you disclaim any intention to limit operation or\n+modification of the work as a means of enforcing, against the work's\n+users, your or third parties' legal rights to forbid circumvention of\n+technological measures.\n+\n+  4. Conveying Verbatim Copies.\n+\n+  You may convey verbatim copies of the Program's source code as you\n+receive it, in any medium, provided that you conspicuously and\n+appropriately publish on each copy an appropriate copyright notice;\n+keep intact all notices stating that this License and any\n+non-permissive terms added in accord with section 7 apply to the code;\n+keep intact all notices of the absence of any warranty; and give all\n+recipients a copy of this License along with the Program.\n+\n+  You may charge any price or no price for each copy that you convey,\n+and you may offer support or warranty protection for a fee.\n+\n+  5. Conveying Modified Source Versions.\n+\n+  You may convey a work based on the Program, or the modifications to\n+produce it from the Program, in the form of source code under the\n+terms of section 4, provided that you also meet all of these conditions:\n+\n+    a) The work must carry prominent notices stating that you modified\n+    it, and giving a relevant date.\n+\n+    b) The work must carry prominent notices stating that it is\n+    released under this License and any conditions added under section\n+    7.  This requirement modifies the requirement in section 4 to\n+    \"keep intact all notices\".\n+\n+    c) You must license the entire work, as a whole, under this\n+    License to anyone who comes into possession of a copy.  This\n+    License will therefore apply, along with any applicable section 7\n+    additional terms, to the whole of the work, and all its parts,\n+    regardless of how they are packaged.  This License gives no\n+    permission to license the work in any other way, but it does not\n+    invalidate such permission if you have separately received it.\n+\n+    d) If the work has interactive user interfaces, each must display\n+    Appropriate Legal Notices; however, if the Program has interactive\n+    interfaces that do not display Appropriate Legal Notices, your\n+    work need not make them do so.\n+\n+  A compilation of a covered work with other separate and independent\n+works, which are not by their nature extensions of the covered work,\n+and which are not combined with it such as to form a larger program,\n+in or on a volume of a storage or distribution medium, is called an\n+\"aggregate\" if the compilation and its resulting copyright are not\n+used to limit the access or legal rights of the compilation's users\n+beyond what the individual works permit.  Inclusion of a covered work\n+in an aggregate does not cause this License to apply to the other\n+parts of the aggregate.\n+\n+  6. Conveying Non-Source Forms.\n+\n+  You may convey a covered work in object code form under the terms\n+of sections 4 and 5, provided that you also convey the\n+machine-readable Corresponding Source under the terms of this License,\n+in one of these ways:\n+\n+    a) Convey the object code in, or embodied in, a physical product\n+    (including a physical distribution medium), accompanied by the\n+    Corresponding Source fixed on a durable physical medium\n+    customarily used for software interchange.\n+\n+    b) Convey the object code in, or embodied in, a physical product\n+    (including a physical distribution medium), accompanied by a\n+    written offer, valid for at least three years and valid for as\n+    long as you offer spare parts or customer support for that product\n+    model, to give anyone who possesses the object code either (1) a\n+    copy of the Corresponding Source for all the software in the\n+    product that is covered by this License, on a durable physical\n+    medium customarily used for software interchange, for a price no\n+    more than your reasonable cost of physically performing this\n+    conveying of source, or (2) access to copy the\n+    Corresponding Source from a network server at no charge.\n+\n+    c) Convey individual copies of the object code with a copy of the\n+    written offer to provide the Corresponding Source.  This\n+    alternative is allowed only occasionally and noncommercially, and\n+    only if you received the object code with such an offer, in accord\n+    with subsection 6b.\n+\n+    d) Convey the object code by offering access from a designated\n+    place (gratis or for a charge), and offer equivalent access to the\n+    Corresponding Source in the same way through the same place at no\n+    further charge.  You need not require recipients to copy the\n+    Corresponding Source along with the object code.  If the place to\n+    copy the object code is a network server, the Corresponding Source\n+    may be on a different server (operated by you or a third party)\n+    that supports equivalent copying facilities, provided you maintain\n+    clear directions next to the object code saying where to find the\n+    Corresponding Source.  Regardless of what server hosts the\n+    Corresponding Source, you remain obligated to ensure that it is\n+    available for as long as needed to satisfy these requirements.\n+\n+    e) Convey the object code using peer-to-peer transmission, provided\n+    you inform other peers where the object code and Corresponding\n+    Source of the work are being offered to the general public at no\n+    charge under subsection 6d.\n+\n+  A separable portion of the object code, whose source code is excluded\n+from the Corresponding Source as a System Library, need not be\n+included in conveying the object code work.\n+\n+  A \"User Product\" is either (1) a \"consumer product\", which means any\n+tangible personal property which is normally used for personal, family,\n+or household purposes, or (2) anything designed or sold for incorporation\n+into a dwelling.  In determining whether a product is a consumer product,\n+doubtful cases shall be resolved in favor of coverage.  For a particular\n+product received by a particular user, \"normally used\" refers to a\n+typical or common use of that class of product, regardless of the status\n+of the particular user or of the way in which the particular user\n+actually uses, or expects or is expected to use, the product.  A product\n+is a consumer product regardless of whether the product has substantial\n+commercial, industrial or non-consumer uses, unless such uses represent\n+the only significant mode of use of the product.\n+\n+  \"Installation Information\" for a User Product means any methods,\n+procedures, authorization keys, or other information required to install\n+and execute modified versions of a covered work in that User Product from\n+a modified version of its Corresponding Source.  The information must\n+suffice to ensure that the continued functioning of the modified object\n+code is in no case prevented or interfered with solely because\n+modification has been made.\n+\n+  If you convey an object code work under this section in, or with, or\n+specifically for use in, a User Product, and the conveying occurs as\n+part of a transaction in which the right of possession and use of the\n+User Product is transferred to the recipient in perpetuity or for a\n+fixed term (regardless of how the transaction is characterized), the\n+Corresponding Source conveyed under this section must be accompanied\n+by the Installation Information.  But this requirement does not apply\n+if neither you nor any third party retains the ability to install\n+modified object code on the User Product (for example, the work has\n+been installed in ROM).\n+\n+  The requirement to provide Installation Information does not include a\n+requirement to continue to provide support service, warranty, or updates\n+for a work that has been modified or installed by the recipient, or for\n+the User Product in which it has been modified or installed.  Access to a\n+network may be denied when the modification itself materially and\n+adversely affects the operation of the network or violates the rules and\n+protocols for communication across the network.\n+\n+  Corresponding Source conveyed, and Installation Information provided,\n+in accord with this section must be in a format that is publicly\n+documented (and with an implementation available to the public in\n+source code form), and must require no special password or key for\n+unpacking, reading or copying.\n+\n+  7. Additional Terms.\n+\n+  \"Additional permissions\" are terms that supplement the terms of this\n+License by making exceptions from one or more of its conditions.\n+Additional permissions that are applicable to the entire Program shall\n+be treated as though they were included in this License, to the extent\n+that they are valid under applicable law.  If additional permissions\n+apply only to part of the Program, that part may be used separately\n+under those permissions, but the entire Program remains governed by\n+this License without regard to the additional permissions.\n+\n+  When you convey a copy of a covered work, you may at your option\n+remove any additional permissions from that copy, or from any part of\n+it.  (Additional permissions may be written to require their own\n+removal in certain cases when you modify the work.)  You may place\n+additional permissions on material, added by you to a covered work,\n+for which you have or can give appropriate copyright permission.\n+\n+  Notwithstanding any other provision of this License, for material you\n+add to a covered work, you may (if authorized by the copyright holders of\n+that material) supplement the terms of this License with terms:\n+\n+    a) Disclaiming warranty or limiting liability differently from the\n+    terms of sections 15 and 16 of this License; or\n+\n+    b) Requiring preservation of specified reasonable legal notices or\n+    author attributions in that material or in the Appropriate Legal\n+    Notices displayed by works containing it; or\n+\n+    c) Prohibiting misrepresentation of the origin of that material, or\n+    requiring that modified versions of such material be marked in\n+    reasonable ways as different from the original version; or\n+\n+    d) Limiting the use for publicity purposes of names of licensors or\n+    authors of the material; or\n+\n+    e) Declining to grant rights under trademark law for use of some\n+    trade names, trademarks, or service marks; or\n+\n+    f) Requiring indemnification of licensors and authors of that\n+    material by anyone who conveys the material (or modified versions of\n+    it) with contractual assumptions of liability to the recipient, for\n+    any liability that these contractual assumptions directly impose on\n+    those licensors and authors.\n+\n+  All other non-permissive additional terms are considered \"further\n+restrictions\" within the meaning of section 10.  If the Program as you\n+received it, or any part of it, contains a notice stating that it is\n+governed by this License along with a term that is a further\n+restriction, you may remove that term.  If a license document contains\n+a further restriction but permits relicensing or conveying under this\n+License, you may add to a covered work material governed by the terms\n+of that license document, provided that the further restriction does\n+not survive such relicensing or conveying.\n+\n+  If you add terms to a covered work in accord with this section, you\n+must place, in the relevant source files, a statement of the\n+additional terms that apply to those files, or a notice indicating\n+where to find the applicable terms.\n+\n+  Additional terms, permissive or non-permissive, may be stated in the\n+form of a separately written license, or stated as exceptions;\n+the above requirements apply either way.\n+\n+  8. Termination.\n+\n+  You may not propagate or modify a covered work except as expressly\n+provided under this License.  Any attempt otherwise to propagate or\n+modify it is void, and will automatically terminate your rights under\n+this License (including any patent licenses granted under the third\n+paragraph of section 11).\n+\n+  However, if you cease all violation of this License, then your\n+license from a particular copyright holder is reinstated (a)\n+provisionally, unless and until the copyright holder explicitly and\n+finally terminates your license, and (b) permanently, if the copyright\n+holder fails to notify you of the violation by some reasonable means\n+prior to 60 days after the cessation.\n+\n+  Moreover, your license from a particular copyright holder is\n+reinstated permanently if the copyright holder notifies you of the\n+violation by some reasonable means, this is the first time you have\n+received notice of violation of this License (for any work) from that\n+copyright holder, and you cure the violation prior to 30 days after\n+your receipt of the notice.\n+\n+  Termination of your rights under this section does not terminate the\n+licenses of parties who have received copies or rights from you under\n+this License.  If your rights have been terminated and not permanently\n+reinstated, you do not qualify to receive new licenses for the same\n+material under section 10.\n+\n+  9. Acceptance Not Required for Having Copies.\n+\n+  You are not required to accept this License in order to receive or\n+run a copy of the Program.  Ancillary propagation of a covered work\n+occurring solely as a consequence of using peer-to-peer transmission\n+to receive a copy likewise does not require acceptance.  However,\n+nothing other than this License grants you permission to propagate or\n+modify any covered work.  These actions infringe copyright if you do\n+not accept this License.  Therefore, by modifying or propagating a\n+covered work, you indicate your acceptance of this License to do so.\n+\n+  10. Automatic Licensing of Downstream Recipients.\n+\n+  Each time you convey a covered work, the recipient automatically\n+receives a license from the original licensors, to run, modify and\n+propagate that work, subject to this License.  You are not responsible\n+for enforcing compliance by third parties with this License.\n+\n+  An \"entity transaction\" is a transaction transferring control of an\n+organization, or substantially all assets of one, or subdividing an\n+organization, or merging organizations.  If propagation of a covered\n+work results from an entity transaction, each party to that\n+transaction who receives a copy of the work also receives whatever\n+licenses to the work the party's predecessor in interest had or could\n+give under the previous paragraph, plus a right to possession of the\n+Corresponding Source of the work from the predecessor in interest, if\n+the predecessor has it or can get it with reasonable efforts.\n+\n+  You may not impose any further restrictions on the exercise of the\n+rights granted or affirmed under this License.  For example, you may\n+not impose a license fee, royalty, or other charge for exercise of\n+rights granted under this License, and you may not initiate litigation\n+(including a cross-claim or counterclaim in a lawsuit) alleging that\n+any patent claim is infringed by making, using, selling, offering for\n+sale, or importing the Program or any portion of it.\n+\n+  11. Patents.\n+\n+  A \"contributor\" is a copyright holder who authorizes use under this\n+License of the Program or a work on which the Program is based.  The\n+work thus licensed is called the contributor's \"contributor version\".\n+\n+  A contributor's \"essential patent claims\" are all patent claims\n+owned or controlled by the contributor, whether already acquired or\n+hereafter acquired, that would be infringed by some manner, permitted\n+by this License, of making, using, or selling its contributor version,\n+but do not include claims that would be infringed only as a\n+consequence of further modification of the contributor version.  For\n+purposes of this definition, \"control\" includes the right to grant\n+patent sublicenses in a manner consistent with the requirements of\n+this License.\n+\n+  Each contributor grants you a non-exclusive, worldwide, royalty-free\n+patent license under the contributor's essential patent claims, to\n+make, use, sell, offer for sale, import and otherwise run, modify and\n+propagate the contents of its contributor version.\n+\n+  In the following three paragraphs, a \"patent license\" is any express\n+agreement or commitment, however denominated, not to enforce a patent\n+(such as an express permission to practice a patent or covenant not to\n+sue for patent infringement).  To \"grant\" such a patent license to a\n+party means to make such an agreement or commitment not to enforce a\n+patent against the party.\n+\n+  If you convey a covered work, knowingly relying on a patent license,\n+and the Corresponding Source of the work is not available for anyone\n+to copy, free of charge and under the terms of this License, through a\n+publicly available network server or other readily accessible means,\n+then you must either (1) cause the Corresponding Source to be so\n+available, or (2) arrange to deprive yourself of the benefit of the\n+patent license for this particular work, or (3) arrange, in a manner\n+consistent with the requirements of this License, to extend the patent\n+license to downstream recipients.  \"Knowingly relying\" means you have\n+actual knowledge that, but for the patent license, your conveying the\n+covered work in a country, or your recipient's use of the covered work\n+in a country, would infringe one or more identifiable patents in that\n+country that you have reason to believe are valid.\n+\n+  If, pursuant to or in connection with a single transaction or\n+arrangement, you convey, or propagate by procuring conveyance of, a\n+covered work, and grant a patent license to some of the parties\n+receiving the covered work authorizing them to use, propagate, modify\n+or convey a specific copy of the covered work, then the patent license\n+you grant is automatically extended to all recipients of the covered\n+work and works based on it.\n+\n+  A patent license is \"discriminatory\" if it does not include within\n+the scope of its coverage, prohibits the exercise of, or is\n+conditioned on the non-exercise of one or more of the rights that are\n+specifically granted under this License.  You may not convey a covered\n+work if you are a party to an arrangement with a third party that is\n+in the business of distributing software, under which you make payment\n+to the third party based on the extent of your activity of conveying\n+the work, and under which the third party grants, to any of the\n+parties who would receive the covered work from you, a discriminatory\n+patent license (a) in connection with copies of the covered work\n+conveyed by you (or copies made from those copies), or (b) primarily\n+for and in connection with specific products or compilations that\n+contain the covered work, unless you entered into that arrangement,\n+or that patent license was granted, prior to 28 March 2007.\n+\n+  Nothing in this License shall be construed as excluding or limiting\n+any implied license or other defenses to infringement that may\n+otherwise be available to you under applicable patent law.\n+\n+  12. No Surrender of Others' Freedom.\n+\n+  If conditions are imposed on you (whether by court order, agreement or\n+otherwise) that contradict the conditions of this License, they do not\n+excuse you from the conditions of this License.  If you cannot convey a\n+covered work so as to satisfy simultaneously your obligations under this\n+License and any other pertinent obligations, then as a consequence you may\n+not convey it at all.  For example, if you agree to terms that obligate you\n+to collect a royalty for further conveying from those to whom you convey\n+the Program, the only way you could satisfy both those terms and this\n+License would be to refrain entirely from conveying the Program.\n+\n+  13. Use with the GNU Affero General Public License.\n+\n+  Notwithstanding any other provision of this License, you have\n+permission to link or combine any covered work with a work licensed\n+under version 3 of the GNU Affero General Public License into a single\n+combined work, and to convey the resulting work.  The terms of this\n+License will continue to apply to the part which is the covered work,\n+but the special requirements of the GNU Affero General Public License,\n+section 13, concerning interaction through a network will apply to the\n+combination as such.\n+\n+  14. Revised Versions of this License.\n+\n+  The Free Software Foundation may publish revised and/or new versions of\n+the GNU General Public License from time to time.  Such new versions will\n+be similar in spirit to the present version, but may differ in detail to\n+address new problems or concerns.\n+\n+  Each version is given a distinguishing version number.  If the\n+Program specifies that a certain numbered version of the GNU General\n+Public License \"or any later version\" applies to it, you have the\n+option of following the terms and conditions either of that numbered\n+version or of any later version published by the Free Software\n+Foundation.  If the Program does not specify a version number of the\n+GNU General Public License, you may choose any version ever published\n+by the Free Software Foundation.\n+\n+  If the Program specifies that a proxy can decide which future\n+versions of the GNU General Public License can be used, that proxy's\n+public statement of acceptance of a version permanently authorizes you\n+to choose that version for the Program.\n+\n+  Later license versions may give you additional or different\n+permissions.  However, no additional obligations are imposed on any\n+author or copyright holder as a result of your choosing to follow a\n+later version.\n+\n+  15. Disclaimer of Warranty.\n+\n+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\n+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\n+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\n+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\n+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\n+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\n+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n+\n+  16. Limitation of Liability.\n+\n+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\n+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\n+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\n+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\n+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\n+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\n+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\n+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\n+SUCH DAMAGES.\n+\n+  17. Interpretation of Sections 15 and 16.\n+\n+  If the disclaimer of warranty and limitation of liability provided\n+above cannot be given local legal effect according to their terms,\n+reviewing courts shall apply local law that most closely approximates\n+an absolute waiver of all civil liability in connection with the\n+Program, unless a warranty or assumption of liability accompanies a\n+copy of the Program in return for a fee.\n+\n+                     END OF TERMS AND CONDITIONS\n+\n+            How to Apply These Terms to Your New Programs\n+\n+  If you develop a new program, and you want it to be of the greatest\n+possible use to the public, the best way to achieve this is to make it\n+free software which everyone can redistribute and change under these terms.\n+\n+  To do so, attach the following notices to the program.  It is safest\n+to attach them to the start of each source file to most effectively\n+state the exclusion of warranty; and each file should have at least\n+the \"copyright\" line and a pointer to where the full notice is found.\n+\n+    {one line to give the program's name and a brief idea of what it does.}\n+    Copyright (C) {year}  {name of author}\n+\n+    This program is free software: you can redistribute it and/or modify\n+    it under the terms of the GNU General Public License as published by\n+    the Free Software Foundation, either version 3 of the License, or\n+    (at your option) any later version.\n+\n+    This program is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+    GNU General Public License for more details.\n+\n+    You should have received a copy of the GNU General Public License\n+    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+Also add information on how to contact you by electronic and paper mail.\n+\n+  If the program does terminal interaction, make it output a short\n+notice like this when it starts in an interactive mode:\n+\n+    {project}  Copyright (C) {year}  {fullname}\n+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n+    This is free software, and you are welcome to redistribute it\n+    under certain conditions; type `show c' for details.\n+\n+The hypothetical commands `show w' and `show c' should show the appropriate\n+parts of the General Public License.  Of course, your program's commands\n+might be different; for a GUI interface, you would use an \"about box\".\n+\n+  You should also get your employer (if you work as a programmer) or school,\n+if any, to sign a \"copyright disclaimer\" for the program, if necessary.\n+For more information on this, and how to apply and follow the GNU GPL, see\n+<http://www.gnu.org/licenses/>.\n+\n+  The GNU General Public License does not permit incorporating your program\n+into proprietary programs.  If your program is a subroutine library, you\n+may consider it more useful to permit linking proprietary applications with\n+the library.  If this is what you want to do, use the GNU Lesser General\n+Public License instead of this License.  But first, please read\n+<http://www.gnu.org/philosophy/why-not-lgpl.html>.", "changes": 694}], "808": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f77ec0fd634802b90c5c48fec34b7dd08d975fbf/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/f77ec0fd634802b90c5c48fec34b7dd08d975fbf/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=f77ec0fd634802b90c5c48fec34b7dd08d975fbf", "filename": "CHANGELOG.md", "sha": "3e8b563f82c6e6d4e561992882af38bcd6a39291", "additions": 6, "patch": "@@ -1,3 +1,9 @@\n+v2.9.2\n+======\n+\n+* Update express dependency to a version isn't affected by [CVE-2014-7191](http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-7191)\n+   * More specifically, a version of express that depends on connect that depends on qs that isn't vulnerable\n+\n v2.9.1\n ======\n ", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f77ec0fd634802b90c5c48fec34b7dd08d975fbf/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/f77ec0fd634802b90c5c48fec34b7dd08d975fbf/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=f77ec0fd634802b90c5c48fec34b7dd08d975fbf", "filename": "package.json", "sha": "630b2136811054572a4075b24206a2b486ce2556", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.9.1\",\n+  \"version\": \"2.9.2\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}], "809": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/49cf888b696e0ed9c810e7f361598aac1d97e9da/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/49cf888b696e0ed9c810e7f361598aac1d97e9da/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=49cf888b696e0ed9c810e7f361598aac1d97e9da", "filename": "src/robot.coffee", "sha": "02e0626b942d309ba096c88b54187a118b2338cd", "additions": 1, "patch": "@@ -297,7 +297,7 @@ class Robot\n       @pingIntervalId = setInterval =>\n         HttpClient.create(\"#{herokuUrl}hubot/ping\").post() (err, res, body) =>\n           @logger.info 'keep alive ping!'\n-      , 1200000\n+      , 5 * 60 * 1000\n \n   # Setup an empty router object\n   #", "changes": 2}], "810": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a6927015ae8fb25279b5b59b6651cd7cb2539c11/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/a6927015ae8fb25279b5b59b6651cd7cb2539c11/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=a6927015ae8fb25279b5b59b6651cd7cb2539c11", "filename": "CHANGELOG.md", "sha": "6f7c19ea5068118edae4bf88a2a9ae9920ef02b4", "additions": 8, "patch": "@@ -1,3 +1,11 @@\n+v2.9.3\n+======\n+\n+* Allow `robot.respond` to work when there is preceding whitespace\n+* Update `robot.parseHelp` to be synchronous, so it's easier to test\n+* Reduce Heroku ping interval from 20 minutes to 5 minutes to keep hubot from going unavailable\n+* Make sure`robot.pingIntervalId` is kept after setting up Heroku ping  interval\n+\n v2.9.2\n ======\n ", "changes": 8}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a6927015ae8fb25279b5b59b6651cd7cb2539c11/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/a6927015ae8fb25279b5b59b6651cd7cb2539c11/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=a6927015ae8fb25279b5b59b6651cd7cb2539c11", "filename": "package.json", "sha": "e4aadfe86f1dfc1f73db9b9065a43a83d24024aa", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.9.2\",\n+  \"version\": \"2.9.3\",\n \n   \"author\": \"hubot\",\n ", "changes": 2}], "814": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/53a215e507c2869b80f2ee29d9099e0ee13f3acb/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/53a215e507c2869b80f2ee29d9099e0ee13f3acb/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=53a215e507c2869b80f2ee29d9099e0ee13f3acb", "filename": "CONTRIBUTING.md", "sha": "03ce75bd3ae9130adf5f27d302d7022dc9bbec8c", "additions": 29, "patch": "@@ -1,22 +1,30 @@\n+# Contributing\n+\n We love pull requests. Here's a quick guide:\n \n 1. Check for [existing issues](https://github.com/github/hubot/issues) for duplicates and confirm that it hasn't been fixed already in the [master branch](https://github.com/github/hubot/commits/master)\n 2. Fork the repo, and clone it locally\n 3. `npm link` to make your cloned repo available to npm\n-4. `hubot --create testbot` to create a bot to test against (no automated tests yet :sob:)\n-5. `npm install && npm link hubot` in your newly created bot to install dependencies, and use your hubot fork\n-6. Push to your fork and submit a pull request.\n+4. Follow [Getting Started](docs/README.md) to generate a testbot (no automated tests yet :sob:)\n+5. `npm link hubot` in your newly created bot to use your hubot fork\n+6. Create a new branch for your contribution\n+7. Push to your fork and submit a pull request\n \n At this point you're waiting on us. We like to at least comment on, if not\n accept, pull requests within a few days. We may suggest some changes or improvements or alternatives.\n \n Some things that will increase the chance that your pull request is accepted:\n \n * Use CoffeeScript [idioms](http://arcturo.github.io/library/coffeescript/04_idioms.html) and [style guide](https://github.com/polarmobile/coffeescript-style-guide)\n-* Update the documentation, the surrounding one, examples elsewhere, guides,\n-  whatever is affected by your contribution\n+* Update the documentation: code comments, example code, guides. Basically,\n+  update anything is affected by your contribution.\n * Include any information that would be relevant to reproducing bugs, use cases for new features, etc.\n-* Impact on existing [hubot installs](docs/README.md), [hubot adapters](docs/adapters.md), and [hubot scripts](docs/scripting.md) (e.g. backwards compatibility)\n+\n+* Discuss the impact on existing [hubot installs](docs/README.md), [hubot adapters](docs/adapters.md), and [hubot scripts](docs/scripting.md) (e.g. backwards compatibility)\n+  * If the change does break compatibility, how can it be updated to become backwards compatible, while directing users to the new way of doing things?\n+* Your commits are associated with your GitHub user: https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/\n+* Make pull requests against a feature branch,\n+* Don't update the version in `package.json`, as the maintainers will manage that in a follow-up PR to release\n \n Syntax:\n \n@@ -27,3 +35,18 @@ Syntax:\n   * `MyClass.myMethod(my_arg)` not `myMethod( my_arg )` or `myMethod my_arg`.\n   * `a = b` and not `a=b`.\n   * Follow the conventions you see used in the source already.\n+\n+# Releasing\n+\n+This section is for maintainers of hubot. Here's the current process for releasing:\n+\n+* create a `release-vX.X.X` branch to release off of\n+* determine what version to release as:\n+  * bug fix? patch release\n+  * new functionality that is backwards compatible? minor version\n+  * breaking change? major release, but think about if it can be fixed to be a minor release instead\n+* update `package.json`\n+* summarize changes in `CHANGELOG.md`\n+* create a pull request, and cc pull requests included in this release, as well as their contributors\n+* merge pull request\n+* checkout master branch, and run `script/release`", "changes": 35}], "816": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/638676eb72f8ad791255d382395fc718ad667973/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/638676eb72f8ad791255d382395fc718ad667973/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=638676eb72f8ad791255d382395fc718ad667973", "filename": "bin/hubot", "sha": "79826a77e537e53f45809370ff04ec3727e08a4c", "additions": 1, "patch": "@@ -70,7 +70,7 @@ unless process.platform is \"win32\"\n     process.exit 0\n \n if Options.create\n-  console.error \"'hubot --create' is depreated. Use the yeoman generator instead:\"\n+  console.error \"'hubot --create' is deprecated. Use the yeoman generator instead:\"\n   console.error \"    npm install -g yo generator-hubot\"\n   console.error \"    mkdir -p #{Options.path}\"\n   console.error \"    yo hubot\"", "changes": 2}], "817": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/5ffcc7fd28c863b2c3886d60561acc360e8a7fcd/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/5ffcc7fd28c863b2c3886d60561acc360e8a7fcd/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=5ffcc7fd28c863b2c3886d60561acc360e8a7fcd", "filename": "docs/scripting.md", "sha": "d7bc6fc49e50692b20511169e83ddb60f04ba05f", "additions": 1, "patch": "@@ -402,7 +402,7 @@ module.exports = (robot) ->\n \n ## HTTP Listener\n \n-Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to serve up HTTP requests. It listens on the port specified by the `PORT` environment variable, and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EPXRESS_PASSWORD`. It can automatically serve static files by setting `EXPRESS_STATIC`.\n+Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to serve up HTTP requests. It listens on the port specified by the `PORT` environment variable, and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EXPRESS_PASSWORD`. It can automatically serve static files by setting `EXPRESS_STATIC`.\n \n The most common use of this is for providing HTTP end points for services with webhooks to push to, and have those show up in chat.\n ", "changes": 2}], "818": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8e6d68febecc51335b92125c0a3015d410122320/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/8e6d68febecc51335b92125c0a3015d410122320/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=8e6d68febecc51335b92125c0a3015d410122320", "filename": "docs/README.md", "sha": "2da02939794012f37a7bf99336e4c39d0058b561", "additions": 1, "patch": "@@ -11,7 +11,7 @@ Once node and npm are ready, we can install the hubot generator:\n \n This will give us the `hubot` [yeoman](http://yeoman.io/) generator. Now we\n can make a new directory, and generate a new instance of hubot in it. For example, if\n-we wanted to make a bot called bender:\n+we wanted to make a bot called myhubot:\n \n \n     % mkdir myhubot", "changes": 2}], "819": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ca00bb5de807ef83287e347c1aa084b359ad63bd/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/ca00bb5de807ef83287e347c1aa084b359ad63bd/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=ca00bb5de807ef83287e347c1aa084b359ad63bd", "filename": "docs/adapters.md", "sha": "208dc2e11820aaad046c72395a15f6930a7c5b93", "additions": 1, "patch": "@@ -37,6 +37,7 @@ to have yours added to the list:\n * [Gitter](https://github.com/huafu/hubot-gitter2)\n * [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.\n * [Visual Studio Online](https://github.com/scrumdod/hubot-VSOnline)\n+* [Typetalk](https://github.com/nulab/hubot-typetalk)\n \n ## Writing Your Own adapter\n ", "changes": 1}], "820": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4b7aecf2e023594e97ddd467a5f0fde7e7da375c/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/4b7aecf2e023594e97ddd467a5f0fde7e7da375c/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=4b7aecf2e023594e97ddd467a5f0fde7e7da375c", "filename": "docs/scripting.md", "sha": "df163950db1a026e86c694a9d2453272c7d4e73e", "additions": 1, "patch": "@@ -97,7 +97,7 @@ It wouldn't be called for:\n \n * HAL: please open the pod bay doors\n    *  because its `respond` is bound to the text immediately following the robot name\n-*  has anyone ever mentioned how lovely you are when you open pod bay doors?\n+*  has anyone ever mentioned how lovely you are when you open the pod bay doors?\n    * because it lacks the robot's name\n \n ## Send & reply", "changes": 2}], "821": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/22bbc52084e8163829c90cf1fe27806c6fd9bd17/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/22bbc52084e8163829c90cf1fe27806c6fd9bd17/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=22bbc52084e8163829c90cf1fe27806c6fd9bd17", "filename": "src/adapters/campfire.coffee", "sha": "a0368771a644e837cdb36300809ba1443308b538", "additions": 7, "patch": "@@ -1,9 +1,9 @@\n HTTPS          = require 'https'\n {EventEmitter} = require 'events'\n \n-Robot                                                = require '../robot'\n-Adapter                                              = require '../adapter'\n-{TextMessage,EnterMessage,LeaveMessage,TopicMessage} = require '../message'\n+Robot                                                                    = require '../robot'\n+Adapter                                                                  = require '../adapter'\n+{TextMessage,ConversationMessage,EnterMessage,LeaveMessage,TopicMessage} = require '../message'\n \n class Campfire extends Adapter\n   send: (envelope, strings...) ->\n@@ -69,7 +69,10 @@ class Campfire extends Adapter\n     bot.on \"TextMessage\",\n       withAuthor (id, created, room, user, body, author) ->\n         unless bot.info.id is author.id\n-          message = new TextMessage author, body, id\n+          if bot.conversations[\"#{user.name}:#{room}\"]?.length\n+            message = new ConversationMessage author, body, id\n+          else\n+            message = new TextMessage author, body, id\n           message.private = bot.private[room]\n           self.receive message\n ", "changes": 11}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/22bbc52084e8163829c90cf1fe27806c6fd9bd17/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/22bbc52084e8163829c90cf1fe27806c6fd9bd17/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=22bbc52084e8163829c90cf1fe27806c6fd9bd17", "filename": "src/adapters/shell.coffee", "sha": "dfd2b52b51a57bfaf056574f8f79040a876fee2f", "additions": 7, "patch": "@@ -1,8 +1,8 @@\n Readline = require 'readline'\n \n-Robot         = require '../robot'\n-Adapter       = require '../adapter'\n-{TextMessage} = require '../message'\n+Robot                              = require '../robot'\n+Adapter                            = require '../adapter'\n+{TextMessage, ConversationMessage} = require '../message'\n \n class Shell extends Adapter\n   send: (envelope, strings...) ->\n@@ -35,7 +35,10 @@ class Shell extends Adapter\n       @repl.close() if buffer.toLowerCase() is 'exit'\n       @repl.prompt()\n       user = @robot.brain.userForId '1', name: 'Shell', room: 'Shell'\n-      @receive new TextMessage user, buffer, 'messageId'\n+      if @robot.conversations[\"#{user.name}:#{user.room}\"]?.length\n+        @receive new ConversationMessage user, buffer, 'messageId'\n+      else\n+        @receive new TextMessage user, buffer, 'messageId'\n \n     self.emit 'connected'\n ", "changes": 11}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/22bbc52084e8163829c90cf1fe27806c6fd9bd17/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/22bbc52084e8163829c90cf1fe27806c6fd9bd17/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=22bbc52084e8163829c90cf1fe27806c6fd9bd17", "filename": "src/listener.coffee", "sha": "07b4e5d387c7810b65086cea9516e907879db2ca", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {inspect} = require 'util'\n \n-{TextMessage} = require './message'\n+{TextMessage, ConversationMessage} = require './message'\n \n class Listener\n   # Listeners receive every message from the chat source and decide if they", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/22bbc52084e8163829c90cf1fe27806c6fd9bd17/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/22bbc52084e8163829c90cf1fe27806c6fd9bd17/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=22bbc52084e8163829c90cf1fe27806c6fd9bd17", "filename": "src/message.coffee", "sha": "6d136342c923a139edf88d33a5a842f0a3028012", "additions": 9, "patch": "@@ -27,13 +27,20 @@ class TextMessage extends Message\n   # Returns a Match object or null.\n   match: (regex) ->\n     @text.match regex\n-  \n+\n   # String representation of a TextMessage\n   #\n   # Returns the message text\n   toString: () ->\n     @text\n \n+# Represents an incoming message sent in reply to a prompt from hubot.\n+#\n+# user - A User instance for the user who entered.\n+# text - Always null.\n+# id   - A String of the message ID.\n+class ConversationMessage extends TextMessage\n+\n # Represents an incoming user entrance notification.\n #\n # user - A User instance for the user who entered.\n@@ -65,6 +72,7 @@ class CatchAllMessage extends Message\n module.exports = {\n   Message\n   TextMessage\n+  ConversationMessage\n   EnterMessage\n   LeaveMessage\n   TopicMessage", "changes": 10}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/22bbc52084e8163829c90cf1fe27806c6fd9bd17/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/22bbc52084e8163829c90cf1fe27806c6fd9bd17/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=22bbc52084e8163829c90cf1fe27806c6fd9bd17", "filename": "src/robot.coffee", "sha": "22b02e3ca519d534fd65a3c8d60f8f76d93d7b7a", "additions": 19, "patch": "@@ -8,7 +8,7 @@ User = require './user'\n Brain = require './brain'\n Response = require './response'\n {Listener,TextListener} = require './listener'\n-{EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n+{ConversationMessage,EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n \n HUBOT_DEFAULT_ADAPTERS = [\n   'campfire'\n@@ -47,6 +47,7 @@ class Robot\n     @Response  = Response\n     @commands  = []\n     @listeners = []\n+    @conversations = []\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n     @pingIntervalId = null\n \n@@ -200,6 +201,12 @@ class Robot\n         @emit('error', error, new @Response(@, message, []))\n \n         false\n+\n+    if message instanceof ConversationMessage\n+      namespace = \"#{message.user.name}:#{message.user.room}\"\n+      @conversations[namespace].shift()(new @Response(@, message, []))\n+      delete @conversations[namespace] if @conversations[namespace].length is 0\n+\n     if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n       @receive new CatchAllMessage(message)\n \n@@ -378,6 +385,17 @@ class Robot\n         scriptDocumentation.commands.push cleanedLine\n         @commands.push cleanedLine\n \n+  # Public: Adds a Listener that applies the value of the next message by the\n+  # initiating user to a callback.\n+  #\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  converse: (user, callback) ->\n+    namespace = \"#{user.name}:#{user.room}\"\n+    @conversations[namespace] ?= []\n+    @conversations[namespace].push callback\n+\n   # Public: A helper send function which delegates to the adapter's send\n   # function.\n   #", "changes": 20}], "824": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/845fdb82f589baacb5706fa32fe2789b13585287/docs/adapters/shell.md", "blob_url": "https://github.com/hubotio/hubot/blob/845fdb82f589baacb5706fa32fe2789b13585287/docs/adapters/shell.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/shell.md?ref=845fdb82f589baacb5706fa32fe2789b13585287", "filename": "docs/adapters/shell.md", "sha": "eb2c99725a7ed1bb86cf6b7bbd3142354b2d23dd", "additions": 5, "patch": "@@ -13,3 +13,8 @@ hubot as it will use the shell adapter by default.\n ## Configuring\n \n This adapter doesn't require any configuration.\n+\n+It supports two environment variables to make it possible to test scripts as different users:\n+\n+* HUBOT_SHELL_USER_ID: default is 1\n+* HUBOT_SHELL_USER_NAME: default is Shell", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/845fdb82f589baacb5706fa32fe2789b13585287/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/845fdb82f589baacb5706fa32fe2789b13585287/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=845fdb82f589baacb5706fa32fe2789b13585287", "filename": "src/adapters/shell.coffee", "sha": "08201f9287ba1d6e34c2349f276627a444b4663f", "additions": 3, "patch": "@@ -34,7 +34,9 @@ class Shell extends Adapter\n     @repl.on 'line', (buffer) =>\n       @repl.close() if buffer.toLowerCase() is 'exit'\n       @repl.prompt()\n-      user = @robot.brain.userForId '1', name: 'Shell', room: 'Shell'\n+      user_id = parseInt(process.env.HUBOT_SHELL_USER_ID or '1')\n+      user_name = process.env.HUBOT_SHELL_USER_NAME or 'Shell'\n+      user = @robot.brain.userForId user_id, name: user_name, room: 'Shell'\n       @receive new TextMessage user, buffer, 'messageId'\n \n     self.emit 'connected'", "changes": 4}], "825": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/b9626e81024529f1b8a9935787901c6815d26a76/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/b9626e81024529f1b8a9935787901c6815d26a76/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=b9626e81024529f1b8a9935787901c6815d26a76", "filename": "CHANGELOG.md", "sha": "70c737d3260b2aa6b76ca802e8891e38ef7a3563", "additions": 6, "patch": "@@ -1,3 +1,9 @@\n+v2.10.0\n+======\n+\n+* Add support to shell adapter for customizing the user with HUBOT_SHELL_USER_ID and HUBOT_SHELL_USER_NAME\n+* Add history support to shell adapter, so it remembers commands previously used\n+\n v2.9.3\n ======\n ", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b9626e81024529f1b8a9935787901c6815d26a76/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/b9626e81024529f1b8a9935787901c6815d26a76/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=b9626e81024529f1b8a9935787901c6815d26a76", "filename": "package.json", "sha": "ea0b229a0dbf73413dc30b1036f807d5c67bfb86", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.9.3\",\n+  \"version\": \"2.10.0\",\n \n   \"author\": \"hubot\",\n   \"keywords\": [", "changes": 2}], "831": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/43db1186772794b854b9532afb5aaabb829c05c3/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/43db1186772794b854b9532afb5aaabb829c05c3/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=43db1186772794b854b9532afb5aaabb829c05c3", "filename": "docs/scripting.md", "sha": "869a38931fb013509d11e324d82fc7d4091cc101", "additions": 1, "patch": "@@ -585,16 +585,11 @@ will use to load the scripts in your package. Below is a simple example for\n loading each script in a `./scripts` directory in your package.\n \n ```coffeescript\n-Fs   = require 'fs'\n Path = require 'path'\n \n module.exports = (robot) ->\n   path = Path.resolve __dirname, 'scripts'\n-  Fs.exists path, (exists) ->\n-    if exists\n-      for file in Fs.readdirSync(path)\n-        robot.loadFile path, file\n-        robot.parseHelp Path.join(path, file)\n+  robot.load path\n ```\n \n After you've built your `npm` package you can publish it to [npmjs](http://npmjs.org).", "changes": 7}], "832": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a0060677bf92150759ac71faf54a49b7bab8d72a/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/a0060677bf92150759ac71faf54a49b7bab8d72a/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=a0060677bf92150759ac71faf54a49b7bab8d72a", "filename": "docs/README.md", "sha": "fb4832ec6c3e7fe4d6427b2de8ea8a90b7b82085", "additions": 12, "patch": "@@ -29,6 +29,18 @@ initialize and add everything:\n     % git add .\n     % git commit -m \"Initial commit\"\n \n+If you'd prefer to automate your hubot build without being interactively\n+prompted for its configuration, you can add the following options\n+to the `yo hubot` command to do so:\n+\n+| Option           | Description\n+| ---------------- | -----------------------------------------------------\n+| `--owner`        | Bot owner, e.g. \"Bot Wrangler <bw@example.com>\"\n+| `--name`         | Bot name, e.g. \"Hubot\"\n+| `--description`  | Bot description, e.g. \"Delightfully aware robutt\"\n+| `--adapter`      | Bot adapter, e.g. \"campfire\"\n+| `--defaults`     | Declare all defaults are set and no prompting required\n+\n You now have your own functional hubot! There's a `bin/hubot`\n command for convenience, to handle installing npm dependencies, loading scripts,\n and then launching your hubot.", "changes": 12}], "835": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/e2851700fe2798fc36cb51aebea39f10efc1e0ff/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e2851700fe2798fc36cb51aebea39f10efc1e0ff/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=e2851700fe2798fc36cb51aebea39f10efc1e0ff", "filename": "src/robot.coffee", "sha": "ba76dbbd2eff7a352cf525720bc04e3311d34f8a", "additions": 8, "patch": "@@ -214,8 +214,14 @@ class Robot\n     full = Path.join path, Path.basename(file, ext)\n     if require.extensions[ext]\n       try\n-        require(full) @\n-        @parseHelp Path.join(path, file)\n+        script = require(full)\n+\n+        if typeof script is 'function'\n+          script @\n+          @parseHelp Path.join(path, file)\n+        else\n+          @logger.warning \"Expected #{full} to assign a function to module.exports, got #{typeof script}\"\n+\n       catch error\n         @logger.error \"Unable to load #{full}: #{error.stack}\"\n         process.exit(1)", "changes": 10}], "836": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/14b528ff1a28eefb80ad246a250263648f98442d/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/14b528ff1a28eefb80ad246a250263648f98442d/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=14b528ff1a28eefb80ad246a250263648f98442d", "filename": "docs/scripting.md", "sha": "49937a6b9fb7c5f43e25c1154be63484a1b80f08", "additions": 16, "patch": "@@ -253,6 +253,22 @@ For those times that there isn't an API, there's always the possibility of scree\n * [cheerio](https://github.com/MatthewMueller/cheerio) (familiar syntax and API to jQuery)\n * [jsdom](https://github.com/tmpvar/jsdom) (JavaScript implementation of the W3C DOM)\n \n+\n+### Advanced HTTP and HTTPS settings\n+\n+As mentioned, hubot uses [node-scoped-http-client](https://github.com/technoweenie/node-scoped-http-client) to provide a simple interface for making HTTP and HTTP requests. Under its hood, it's using node's builtin [http](http://nodejs.org/api/http.html) and [https](http://nodejs.org/api/https.html) libraries, but providing an easy DSL for the most common kinds of interaction.\n+\n+If you need to control options on http and https more directly, you pass a second argument to `robot.http` that will be passed on to node-scoped-http-client which will be passed on to http and https:\n+\n+```\n+  options =\n+    # don't verify server certificate against a CA, SCARY!\n+    rejectUnauthorized: false\n+  robot.http(\"https://midnight-train\", options)\n+```\n+\n+In addition, if node-scoped-http-client doesn't suit you, you can can use [http](http://nodejs.org/api/http.html) and [https](http://nodejs.org/api/https.html) yourself directly, or any other node library like [request](https://github.com/request/request).\n+\n ## Random\n \n A common pattern is to hear or respond to commands, and send with a random funny image or line of text from an array of possibilities. It's annoying to do this in JavaScript and CoffeeScript out of the box, so Hubot includes a convenience method:", "changes": 16}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/14b528ff1a28eefb80ad246a250263648f98442d/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/14b528ff1a28eefb80ad246a250263648f98442d/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=14b528ff1a28eefb80ad246a250263648f98442d", "filename": "package.json", "sha": "5df29c57fc564f002eea8d29cd8f4427c2d046fd", "additions": 1, "patch": "@@ -23,9 +23,8 @@\n   \"dependencies\": {\n     \"coffee-script\": \"1.6.3\",\n     \"optparse\": \"1.0.4\",\n-    \"scoped-http-client\": \"0.9.8\",\n+    \"scoped-http-client\": \"0.10.0\",\n     \"log\": \"1.4.0\",\n-    \"express\": \"3.3.4\",\n     \"express\": \"3.18.1\",\n     \"readline-history\": \"~1.2.0\"\n   },", "changes": 3}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/14b528ff1a28eefb80ad246a250263648f98442d/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/14b528ff1a28eefb80ad246a250263648f98442d/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=14b528ff1a28eefb80ad246a250263648f98442d", "filename": "src/response.coffee", "sha": "5b0cc42baca20cb8750a77ad608b78d04da5cde0", "additions": 2, "patch": "@@ -86,7 +86,7 @@ class Response\n   # send the request.\n   #\n   # Returns a ScopedClient instance.\n-  http: (url) ->\n-    @robot.http(url)\n+  http: (url, options) ->\n+    @robot.http(url, options)\n \n module.exports = Response", "changes": 4}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/14b528ff1a28eefb80ad246a250263648f98442d/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/14b528ff1a28eefb80ad246a250263648f98442d/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=14b528ff1a28eefb80ad246a250263648f98442d", "filename": "src/robot.coffee", "sha": "2be5db211abd201cdea88058ab9e81796f359ad8", "additions": 7, "patch": "@@ -463,10 +463,11 @@ class Robot\n   # send the request.\n   #\n   # url - String URL to access.\n+  # options - Optional options to pass on to the client\n   #\n   # Examples:\n   #\n-  #     res.http(\"http://example.com\")\n+  #     robot.http(\"http://example.com\")\n   #       # set a single header\n   #       .header('Authorization', 'bearer abcdef')\n   #\n@@ -484,9 +485,12 @@ class Robot\n   #       .post(data) (err, res, body) ->\n   #         console.log body\n   #\n+  #    # Can also set options\n+  #    robot.http(\"https://example.com\", {rejectUnauthorized: false})\n+  #\n   # Returns a ScopedClient instance.\n-  http: (url) ->\n-    HttpClient.create(url)\n+  http: (url, options) ->\n+    HttpClient.create(url, options)\n       .header('User-Agent', \"Hubot/#{@version}\")\n \n module.exports = Robot", "changes": 10}], "837": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4ede8a97f217cd10be5bfc29e1322d1877b0b068/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/4ede8a97f217cd10be5bfc29e1322d1877b0b068/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=4ede8a97f217cd10be5bfc29e1322d1877b0b068", "filename": "index.coffee", "sha": "b66607cb2f8b90b655cc7a1b64a87c1d10b8836a", "additions": 2, "patch": "@@ -4,7 +4,7 @@ Robot                                                                = require '\n Adapter                                                              = require './src/adapter'\n Response                                                             = require './src/response'\n {Listener,TextListener}                                              = require './src/listener'\n-{TextMessage,EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './src/message'\n+{Message,TextMessage,EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './src/message'\n \n module.exports = {\n   User\n@@ -14,6 +14,7 @@ module.exports = {\n   Response\n   Listener\n   TextListener\n+  Message\n   TextMessage\n   EnterMessage\n   LeaveMessage", "changes": 3}], "839": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/9740039c449e2a485c912ba87514186c516d6359/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/9740039c449e2a485c912ba87514186c516d6359/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=9740039c449e2a485c912ba87514186c516d6359", "filename": "docs/scripting.md", "sha": "ec9caaba211b4bcd7bc92082ea540f6fc2796e2f", "additions": 1, "patch": "@@ -402,7 +402,7 @@ module.exports = (robot) ->\n \n ## HTTP Listener\n \n-Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to serve up HTTP requests. It listens on the port specified by the `PORT` environment variable, and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EXPRESS_PASSWORD`. It can automatically serve static files by setting `EXPRESS_STATIC`.\n+Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to serve up HTTP requests. It listens on the port specified by the `EXPRESS_PORT` or `PORT` environment variables (preferred in that order) and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EXPRESS_PASSWORD`. It can automatically serve static files by setting `EXPRESS_STATIC`.\n \n The most common use of this is for providing HTTP end points for services with webhooks to push to, and have those show up in chat.\n ", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/9740039c449e2a485c912ba87514186c516d6359/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/9740039c449e2a485c912ba87514186c516d6359/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=9740039c449e2a485c912ba87514186c516d6359", "filename": "src/robot.coffee", "sha": "3156f64f6c7ffe7a6ebcd3a86d8f92e3727c4296", "additions": 3, "patch": "@@ -269,6 +269,8 @@ class Robot\n     user    = process.env.EXPRESS_USER\n     pass    = process.env.EXPRESS_PASSWORD\n     stat    = process.env.EXPRESS_STATIC\n+    port    = process.env.EXPRESS_PORT or process.env.PORT or 8080\n+    address = process.env.EXPRESS_BIND_ADDRESS or process.env.BIND_ADDRESS or '0.0.0.0'\n \n     express = require 'express'\n \n@@ -284,7 +286,7 @@ class Robot\n     app.use express.static stat if stat\n \n     try\n-      @server = app.listen(process.env.PORT || 8080, process.env.BIND_ADDRESS || '0.0.0.0')\n+      @server = app.listen(port, address)\n       @router = app\n     catch err\n       @logger.error \"Error trying to start HTTP server: #{err}\\n#{err.stack}\"", "changes": 4}], "840": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e0df0d4904179e6ee28a3e4cf742fbab8e10aa9b/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/e0df0d4904179e6ee28a3e4cf742fbab8e10aa9b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=e0df0d4904179e6ee28a3e4cf742fbab8e10aa9b", "filename": "CHANGELOG.md", "sha": "9ae083c031025b22013867d8e557e4430fd19da5", "additions": 10, "patch": "@@ -1,5 +1,14 @@\n+v2.11.0\n+=======\n+\n+* Update scripting.md script package sample\n+* Include Message class in exported module (ie require 'hubot')\n+* Support custom options when calling `robot.http` that are passed onto the scoped-http-client\n+* Update scoped-http-client dependency to 0.10.0\n+* Fix error when loading a script that doesn't export a function; log a warning instead\n+\n v2.10.0\n-======\n+=======\n \n * Add support to shell adapter for customizing the user with HUBOT_SHELL_USER_ID and HUBOT_SHELL_USER_NAME\n * Add history support to shell adapter, so it remembers commands previously used", "changes": 11}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e0df0d4904179e6ee28a3e4cf742fbab8e10aa9b/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/e0df0d4904179e6ee28a3e4cf742fbab8e10aa9b/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=e0df0d4904179e6ee28a3e4cf742fbab8e10aa9b", "filename": "package.json", "sha": "03b2cbf11e6e3a48ce69a5de4127dcaeb63c398f", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.10.0\",\n+  \"version\": \"2.11.0\",\n \n   \"author\": \"hubot\",\n   \"keywords\": [", "changes": 2}], "841": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/d0f64f8022090198febd3984b681f51a3e99bcb6/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/d0f64f8022090198febd3984b681f51a3e99bcb6/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=d0f64f8022090198febd3984b681f51a3e99bcb6", "filename": ".travis.yml", "sha": "7077b8da09adf12013e103857b438b06ab8ffd36", "additions": 0, "patch": "@@ -3,9 +3,5 @@ node_js:\n   - \"0.11\"\n   - \"0.10\"\n   - \"0.8\"\n-branches:\n-  only:\n-    - vthree-rethink\n-    - testing\n notifications:\n   email: false", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/d0f64f8022090198febd3984b681f51a3e99bcb6/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/d0f64f8022090198febd3984b681f51a3e99bcb6/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=d0f64f8022090198febd3984b681f51a3e99bcb6", "filename": "CONTRIBUTING.md", "sha": "b88361fb837910dda1ac39b2ab57a2bf42d8ba14", "additions": 3, "patch": "@@ -5,10 +5,11 @@ We love pull requests. Here's a quick guide:\n 1. Check for [existing issues](https://github.com/github/hubot/issues) for duplicates and confirm that it hasn't been fixed already in the [master branch](https://github.com/github/hubot/commits/master)\n 2. Fork the repo, and clone it locally\n 3. `npm link` to make your cloned repo available to npm\n-4. Follow [Getting Started](docs/README.md) to generate a testbot (no automated tests yet :sob:)\n+4. Follow [Getting Started](docs/README.md) to generate a testbot\n 5. `npm link hubot` in your newly created bot to use your hubot fork\n 6. Create a new branch for your contribution\n-7. Push to your fork and submit a pull request\n+7. Add [tests](test/) (run with `npm test`)\n+8. Push to your fork and submit a pull request\n \n At this point you're waiting on us. We like to at least comment on, if not\n accept, pull requests within a few days. We may suggest some changes or improvements or alternatives.", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d0f64f8022090198febd3984b681f51a3e99bcb6/Makefile", "blob_url": "https://github.com/hubotio/hubot/blob/d0f64f8022090198febd3984b681f51a3e99bcb6/Makefile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Makefile?ref=d0f64f8022090198febd3984b681f51a3e99bcb6", "filename": "Makefile", "sha": "042ab88cd2444a93d1b83765e139db3d9978666b", "additions": 1, "patch": "@@ -3,7 +3,7 @@ NPM_EXECUTABLE_HOME := node_modules/.bin\n PATH := ${NPM_EXECUTABLE_HOME}:${PATH}\n \n test: deps\n-\t@find test -name '*_test.coffee' | xargs -n 1 -t coffee\n+\t@script/test\n \n dev: generate-js\n \t@coffee -wc --bare -o lib src/*.coffee", "changes": 2}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d0f64f8022090198febd3984b681f51a3e99bcb6/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/d0f64f8022090198febd3984b681f51a3e99bcb6/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=d0f64f8022090198febd3984b681f51a3e99bcb6", "filename": "package.json", "sha": "8727f8d2a3baf98498584d5038d373d32f6a8286", "additions": 11, "patch": "@@ -28,12 +28,23 @@\n     \"express\": \"3.18.1\",\n     \"readline-history\": \"~1.2.0\"\n   },\n+  \"devDependencies\": {\n+    \"chai\": \"*\",\n+    \"hubot-mock-adapter\": \"*\",\n+    \"mocha\": \"*\",\n+    \"mockery\": \"*\",\n+    \"sinon-chai\": \"*\",\n+    \"sinon\": \"*\"\n+  },\n   \"engines\": {\n     \"node\": \">= 0.8.x\",\n     \"npm\": \">= 1.1.x\"\n   },\n   \"main\": \"./index\",\n   \"bin\": {\n     \"hubot\": \"./bin/hubot\"\n+  },\n+  \"scripts\": {\n+    \"test\": \"./script/test\"\n   }\n }", "changes": 11}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d0f64f8022090198febd3984b681f51a3e99bcb6/script/bootstrap", "blob_url": "https://github.com/hubotio/hubot/blob/d0f64f8022090198febd3984b681f51a3e99bcb6/script/bootstrap", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/bootstrap?ref=d0f64f8022090198febd3984b681f51a3e99bcb6", "filename": "script/bootstrap", "sha": "e0f9403e8ddce2f7e10421ec319dddf718245c9d", "additions": 16, "patch": "@@ -1,5 +1,20 @@\n-#!/usr/bin/env bash\n+#!/bin/bash\n \n set -e\n \n+# Make sure everything is development forever\n+export NODE_ENV=development\n+\n+# Load environment specific environment variables\n+if [ -f .env ]; then\n+  source .env\n+fi\n+\n+if [ -f .env.${NODE_ENV} ]; then\n+  source .env.${NODE_ENV}\n+fi\n+\n npm install\n+\n+# Make sure mocha and coffee are in the PATH\n+export PATH=\"node_modules/.bin:$PATH\"", "changes": 17}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d0f64f8022090198febd3984b681f51a3e99bcb6/script/test", "blob_url": "https://github.com/hubotio/hubot/blob/d0f64f8022090198febd3984b681f51a3e99bcb6/script/test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/test?ref=d0f64f8022090198febd3984b681f51a3e99bcb6", "filename": "script/test", "sha": "efb0f4a52391cb93f83c77ffb49ebca4c054874b", "additions": 4, "patch": "@@ -0,0 +1,4 @@\n+#!/bin/bash\n+\n+source script/bootstrap\n+mocha --compilers coffee:coffee-script \"$@\"", "changes": 4}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d0f64f8022090198febd3984b681f51a3e99bcb6/test/adapter_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d0f64f8022090198febd3984b681f51a3e99bcb6/test/adapter_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/adapter_test.coffee?ref=d0f64f8022090198febd3984b681f51a3e99bcb6", "filename": "test/adapter_test.coffee", "sha": "dd061ed08472ad35fd0317d864e00395aa5f5e11", "additions": 81, "patch": "@@ -0,0 +1,81 @@\n+chai = require 'chai'\n+sinon = require 'sinon'\n+chai.use require 'sinon-chai'\n+\n+expect = chai.expect\n+\n+Adapter = require '../src/adapter.coffee'\n+\n+describe 'Adapter', ->\n+  beforeEach ->\n+    @robot =\n+      receive: sinon.spy()\n+\n+  # this one is hard, as it requires files\n+  it \"can load adapter by name\"\n+\n+  describe 'Public API', ->\n+    beforeEach ->\n+      @adapter = new Adapter(@robot)\n+\n+    it 'assigns robot', ->\n+      expect(@adapter.robot).to.equal(@robot)\n+\n+    describe 'send', ->\n+      it 'is a function', ->\n+        expect(@adapter.send).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.send({}, 'nothing')\n+\n+    describe 'reply', ->\n+      it 'is a function', ->\n+        expect(@adapter.reply).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.reply({}, 'nothing')\n+\n+    describe 'topic', ->\n+      it 'is a function', ->\n+        expect(@adapter.topic).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.topic({}, 'nothing')\n+\n+    describe 'topic', ->\n+      it 'is a function', ->\n+        expect(@adapter.topic).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.topic({}, 'nothing')\n+\n+    describe 'play', ->\n+      it 'is a function', ->\n+        expect(@adapter.play).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.play({}, 'nothing')\n+\n+    describe 'run', ->\n+      it 'is a function', ->\n+        expect(@adapter.run).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.run()\n+\n+    describe 'close', ->\n+      it 'is a function', ->\n+        expect(@adapter.close).to.be.a('function')\n+\n+      it 'does nothing', ->\n+        @adapter.close()\n+\n+\n+  it 'dispatches received messages to the robot', ->\n+    @robot.receive = sinon.spy()\n+    @adapter = new Adapter(@robot)\n+    @message = sinon.spy()\n+    \n+    @adapter.receive(@message)\n+\n+    expect(@robot.receive).to.have.been.calledWith(@message)", "changes": 81}, {"status": "removed", "deletions": 32, "raw_url": "https://github.com/hubotio/hubot/raw/eba1628c509321dbf5e6c16dec8b297434a472a6/test/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/eba1628c509321dbf5e6c16dec8b297434a472a6/test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.coffee?ref=eba1628c509321dbf5e6c16dec8b297434a472a6", "filename": "test/brain_test.coffee", "sha": "cc537989e1f310b29461d901ee2a7474dd843944", "additions": 0, "patch": "@@ -1,32 +0,0 @@\n-assert = require 'assert'\n-\n-Brain  = require '../src/brain'\n-\n-saved   = false\n-closing = false\n-closed  = false\n-\n-fakeRobot =\n-  on: ->\n-\n-brain = new Brain fakeRobot\n-\n-brain.on 'save', (data) ->\n-  is_closing = closing\n-  saved = closing = true\n-  brain.close() if !is_closing\n-  assert.equal 1, data.abc\n-\n-brain.on 'close', ->\n-  closed = true\n-\n-brain.data.abc = 1\n-brain.resetSaveInterval 0.1\n-setTimeout ->\n-  assert.ok saved\n-  assert.ok closed\n-, 200\n-\n-user = brain.userForId 9876\n-assert.strictEqual 9876, user.id\n-assert.strictEqual \"9876\", user.name", "changes": 32}, {"status": "removed", "deletions": 50, "raw_url": "https://github.com/hubotio/hubot/raw/eba1628c509321dbf5e6c16dec8b297434a472a6/test/google_images_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/eba1628c509321dbf5e6c16dec8b297434a472a6/test/google_images_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/google_images_test.coffee?ref=eba1628c509321dbf5e6c16dec8b297434a472a6", "filename": "test/google_images_test.coffee", "sha": "fe8543793092649edc8cb02ffca76bc25ead3b65", "additions": 0, "patch": "@@ -1,50 +0,0 @@\n-Tests  = require './tests'\n-assert = require 'assert'\n-helper = Tests.helper()\n-\n-Robot         = require '../src/robot'\n-{TextMessage} = require '../src/message'\n-\n-require('../src/scripts/google-images') helper\n-\n-# start up a danger room for google images\n-danger = Tests.danger helper, (req, res, url) ->\n-  res.writeHead 200\n-  res.end JSON.stringify(\n-    responseData:\n-      results: [\n-        unescapedUrl: \"(#{url.query.q})\"\n-      ]\n-  )\n-\n-# callbacks for when hubot sends messages\n-mu    = \"http://mustachify.me/?src=\"\n-tests = [\n-  (msg) -> assert.equal \"#{mu}(foo)#.png\", msg\n-  (msg) -> assert.equal \"#{mu}(foo)#.png\", msg\n-  (msg) -> assert.equal \"#{mu}(foo)#.png\", msg\n-  (msg) -> assert.equal \"#{mu}(foo)#.png\", msg\n-  (msg) -> assert.equal \"(foo)#.png\", msg\n-  (msg) -> assert.equal \"(foo)#.png\", msg\n-  (msg) -> assert.equal \"(foo)#.png\", msg\n-  (msg) -> assert.equal \"(animated foo)#.png\", msg\n-]\n-\n-# run the async tests\n-messages = [\n-  'helper: stache me foo',\n-  'helper: stache foo',\n-  'helper: mustache me foo',\n-  'helper: mustache foo',\n-  'helper: img foo',\n-  'helper: image me foo',\n-  'helper: image foo',\n-  'helper: animate me foo'\n-]\n-user = {}\n-danger.start tests, ->\n-  for message in messages\n-    helper.receive new TextMessage user, message\n-\n-  helper.stop()\n-", "changes": 50}, {"status": "removed", "deletions": 15, "raw_url": "https://github.com/hubotio/hubot/raw/eba1628c509321dbf5e6c16dec8b297434a472a6/test/httpd_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/eba1628c509321dbf5e6c16dec8b297434a472a6/test/httpd_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/httpd_test.coffee?ref=eba1628c509321dbf5e6c16dec8b297434a472a6", "filename": "test/httpd_test.coffee", "sha": "7441ebed938a5754a188e9928924b5f4e0c4fb15", "additions": 0, "patch": "@@ -1,15 +0,0 @@\n-process.env.CONNECT_STATIC = 'test/static/'\n-Tests = require './tests'\n-assert = require 'assert'\n-helper = Tests.helper()\n-require './scripts/test'\n-\n-helper.adapter.cb = (msg) ->\n-    assert.equal 1, helper.sent.length\n-    assert.equal \"static\\n\", msg\n-    helper.stop()\n-\n-setTimeout( () ->\n-    helper.adapter.receive 'static'\n-, 100)\n-", "changes": 15}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d0f64f8022090198febd3984b681f51a3e99bcb6/test/listener_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d0f64f8022090198febd3984b681f51a3e99bcb6/test/listener_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.coffee?ref=d0f64f8022090198febd3984b681f51a3e99bcb6", "filename": "test/listener_test.coffee", "sha": "5e11fb45d1f8b34e27a069ba3d0484c09790d716", "additions": 137, "patch": "@@ -0,0 +1,137 @@\n+# Assertions and Stubbing\n+chai = require 'chai'\n+sinon = require 'sinon'\n+chai.use require 'sinon-chai'\n+\n+{ expect } = chai\n+\n+# Hubot classes\n+{ CatchAllMessage, EnterMessage, TextMessage } = require '../src/message'\n+{ Listener, TextListener } = require '../src/listener'\n+Response = require '../src/response.coffee'\n+User = require '../src/user.coffee'\n+\n+describe 'Listener', ->\n+  beforeEach ->\n+    # Dummy robot (should never actually get called)\n+    @robot =\n+      # Why is this part of the Robot object??\n+      Response: Response\n+\n+    # Test user\n+    @user = new User\n+      id: 1\n+      name: 'hubottester'\n+      room: '#mocha'\n+\n+  describe 'Unit Tests', ->\n+    describe '#call', ->\n+      it 'calls the matcher', ->\n+        callback = sinon.spy()\n+        testMatcher = sinon.spy()\n+        testMessage = {}\n+\n+        testListener = new Listener(@robot, testMatcher, callback)\n+        testListener.call testMessage\n+\n+        expect(testMatcher).to.have.been.calledWith(testMessage)\n+\n+      it 'passes the matcher result on to the listener callback', ->\n+        matcherResult = {}\n+        testMatcher = sinon.stub().returns(matcherResult)\n+        testMessage = {}\n+        listenerCallback = (response) ->\n+          expect(response.match).to.be.equal(matcherResult)\n+\n+        # sanity check; matcherResult must be truthy\n+        expect(matcherResult).to.be.ok\n+\n+        testListener = new Listener(@robot, testMatcher, listenerCallback)\n+        result = testListener.call testMessage\n+\n+        # sanity check; message should have been processed\n+        expect(testMatcher).to.have.been.called\n+        expect(result).to.be.ok\n+\n+      describe 'if the matcher returns true', ->\n+        it 'executes the listener callback', ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(true)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener.call testMessage\n+\n+          expect(listenerCallback).to.have.been.called\n+\n+\n+        it 'returns true', ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(true)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          result = testListener.call testMessage\n+\n+          expect(result).to.be.ok\n+          \n+\n+        it 'calls the listener callback with a Response that wraps the Message', (done) ->\n+          testMatcher = sinon.stub().returns(true)\n+          testMessage = {}\n+\n+          listenerCallback = (response) ->\n+            expect(response.message).to.equal(testMessage)\n+            done()\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+\n+          testListener.call testMessage, sinon.spy()\n+\n+      describe 'if the matcher returns false', ->\n+        it 'does not execute the listener callback', ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(false)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener.call testMessage\n+\n+          expect(listenerCallback).to.not.have.been.called\n+\n+\n+        it 'returns false', ->\n+          listenerCallback = sinon.spy()\n+          testMatcher = sinon.stub().returns(false)\n+          testMessage = {}\n+\n+          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          result = testListener.call testMessage\n+\n+          expect(result).to.not.be.ok\n+\n+    describe 'TextListener', ->\n+      describe '#matcher', ->\n+        it 'matches TextMessages', ->\n+          callback = sinon.spy()\n+          testMessage = new TextMessage(@user, 'test')\n+          testMessage.match = sinon.stub().returns(true)\n+          testRegex = /test/\n+ \n+          testListener = new TextListener(@robot, testRegex, callback)\n+          result = testListener.matcher(testMessage)\n+ \n+          expect(result).to.be.ok\n+          expect(testMessage.match).to.have.been.calledWith(testRegex)\n+ \n+        it 'does not match EnterMessages', ->\n+          callback = sinon.spy()\n+          testMessage = new EnterMessage(@user)\n+          testMessage.match = sinon.stub().returns(true)\n+          testRegex = /test/\n+ \n+          testListener = new TextListener(@robot, testRegex, callback)\n+          result = testListener.matcher(testMessage)\n+ \n+          expect(result).to.not.be.ok\n+          expect(testMessage.match).to.not.have.been.called", "changes": 137}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d0f64f8022090198febd3984b681f51a3e99bcb6/test/message_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d0f64f8022090198febd3984b681f51a3e99bcb6/test/message_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/message_test.coffee?ref=d0f64f8022090198febd3984b681f51a3e99bcb6", "filename": "test/message_test.coffee", "sha": "2c24ed3c27e59bd4a533c902ba97685cb842f0dc", "additions": 32, "patch": "@@ -0,0 +1,32 @@\n+# Assertions and Stubbing\n+chai = require 'chai'\n+sinon = require 'sinon'\n+chai.use require 'sinon-chai'\n+\n+{ expect } = chai\n+\n+# Hubot classes\n+User = require '../src/user.coffee'\n+{ CatchAllMessage, EnterMessage, Message, TextMessage } = require '../src/message'\n+\n+describe 'Message', ->\n+  beforeEach ->\n+    @user = new User\n+      id: 1\n+      name: 'hubottester'\n+      room: '#mocha'\n+\n+  describe 'Unit Tests', ->\n+    describe '#finish', ->\n+      it 'marks the message as done', ->\n+        testMessage = new Message(@user)\n+        expect(testMessage.done).to.not.be.ok\n+        testMessage.finish()\n+        expect(testMessage.done).to.be.ok\n+\n+    describe 'TextMessage', ->\n+      describe '#match', ->\n+        it 'should perform standard regex matching', ->\n+          testMessage = new TextMessage(@user, 'message123')\n+          expect( testMessage.match(/^message123$/) ).to.be.ok\n+          expect( testMessage.match(/^does-not-match$/) ).to.not.be.ok", "changes": 32}, {"status": "modified", "deletions": 73, "raw_url": "https://github.com/hubotio/hubot/raw/d0f64f8022090198febd3984b681f51a3e99bcb6/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d0f64f8022090198febd3984b681f51a3e99bcb6/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=d0f64f8022090198febd3984b681f51a3e99bcb6", "filename": "test/robot_test.coffee", "sha": "7066eb1b67141b958446988d1028ff7de01492e6", "additions": 226, "patch": "@@ -1,74 +1,227 @@\n-Tests  = require './tests'\n-assert = require 'assert'\n-helper = Tests.helper()\n-require './scripts/test'\n-\n-server = require('http').createServer (req, res) ->\n-  res.writeHead 200\n-  res.end \"fetched\"\n-\n-server.listen 9001, ->\n-  assert.equal 7, helper.listeners.length\n-  assert.equal 0, helper.sent.length\n-\n-  helper.adapter.receive 'test'\n-  assert.equal 1, helper.sent.length\n-  assert.equal 'OK', helper.sent[0]\n-\n-  helper.adapter.receive 'reply'\n-  assert.equal 2, helper.sent.length\n-  assert.equal 'helper: OK', helper.sent[1]\n-\n-  helper.adapter.receive 'random'\n-  assert.equal 3, helper.sent.length\n-  assert.ok helper.sent[2].match(/^(1|2)$/)\n-\n-  # Test that when we message a room, the 'recipient' is the robot user and the room attribute is set properly\n-  helper.messageRoom \"chat@example.com\", \"Hello room\"\n-  assert.equal 4, helper.sent.length\n-  assert.equal \"chat@example.com\", helper.recipients[3].room\n-  assert.equal \"Hello room\", helper.sent[3]\n-\n-  helper.messageRoom \"chat2@example.com\", \"Hello to another room\"\n-  assert.equal 5, helper.sent.length\n-  assert.equal \"chat2@example.com\", helper.recipients[4].room\n-  assert.equal \"Hello to another room\", helper.sent[4]\n-\n-  helper.adapter.receive 'foobar'\n-  assert.equal 6, helper.sent.length\n-  assert.equal 'catch-all', helper.sent[5]\n-\n-  # Testing replies\n-  # ============================\n-  # Using just the name\n-  helper.adapter.receive \"#{helper.name} rsvp\"\n-  assert.equal 7, helper.sent.length\n-  assert.equal \"responding\", helper.sent[6]\n-\n-  # Using name with @ form\n-  helper.adapter.receive \"@#{helper.name} rsvp\"\n-  assert.equal 8, helper.sent.length\n-  assert.equal \"responding\", helper.sent[7]\n-\n-  # Using just the alias\n-  helper.adapter.receive \"#{helper.alias} rsvp\"\n-  assert.equal 9, helper.sent.length\n-  assert.equal \"responding\", helper.sent[8]\n-\n-  # Using alias with @ form\n-  helper.adapter.receive \"@#{helper.alias} rsvp\"\n-  assert.equal 10, helper.sent.length\n-  assert.equal \"responding\", helper.sent[9]\n-\n-\n-  # set a callback for when the next message is replied to\n-  helper.cb = (msg) ->\n-    assert.equal 7, helper.sent.length\n-    assert.equal 'fetched', msg\n-    helper.close()\n-    server.close()\n-\n-  helper.adapter.receive 'http'\n-\n-  helper.stop()\n+# Assertions and Stubbing\n+chai = require 'chai'\n+sinon = require 'sinon'\n+chai.use require 'sinon-chai'\n+\n+{ expect } = chai\n+\n+mockery = require 'mockery'\n+\n+# Hubot classes\n+Robot = require '../src/robot.coffee'\n+{ CatchAllMessage, EnterMessage, TextMessage } = require '../src/message'\n+Adapter = require '../src/adapter'\n+\n+# Preload the Hubot mock adapter but substitute in the latest version of Adapter\n+mockery.enable()\n+mockery.registerAllowable 'hubot-mock-adapter'\n+mockery.registerAllowable 'lodash' # hubot-mock-adapter uses lodash\n+# Force hubot-mock-adapter to use the latest version of Adapter\n+mockery.registerMock 'hubot/src/adapter', Adapter\n+# Load the mock adapter into the cache\n+require 'hubot-mock-adapter'\n+# We're done with mockery\n+mockery.deregisterMock 'hubot/src/adapter'\n+mockery.disable()\n \n+\n+describe 'Robot', ->\n+  beforeEach ->\n+    @robot = new Robot null, 'mock-adapter', yes, 'TestHubot'\n+    @robot.run\n+\n+    @user = @robot.brain.userForId '1', {\n+      name: 'hubottester'\n+      room: '#mocha'\n+    }\n+\n+  afterEach ->\n+   @robot.server.close()\n+   @robot.shutdown()\n+\n+  describe 'Unit Tests', ->\n+    describe '#receive', ->\n+      it 'calls all registered listeners', ->\n+        # Need to use a real Message so that the CatchAllMessage constructor works\n+        testMessage = new TextMessage(@user, 'message123')\n+\n+        listener =\n+          call: sinon.spy()\n+\n+        @robot.listeners = [\n+          listener\n+          listener\n+          listener\n+          listener\n+        ]\n+\n+        @robot.receive testMessage\n+\n+        # When no listeners match, each listener is called twice: once with\n+        # the original message and once with a CatchAll message\n+        expect(listener.call).to.have.callCount(8)\n+\n+      it 'sends a CatchAllMessage if no listener matches', ->\n+        # Testing for recursion with a new CatchAllMessage that wraps the\n+        # original message\n+\n+        testMessage = new TextMessage(@user, 'message123')\n+        @robot.listeners = []\n+\n+        # Replace @robot.receive so we can catch when the functions recurses\n+        oldReceive = @robot.receive\n+        @robot.receive = (message) ->\n+          expect(message).to.be.instanceof(CatchAllMessage)\n+          expect(message.message).to.be.equal(testMessage)\n+        sinon.spy(@robot, 'receive')\n+\n+        # Call the original receive method that we want to test\n+        oldReceive.call @robot, testMessage\n+\n+        # Ensure the function recursed\n+        expect(@robot.receive).to.have.been.called\n+\n+      it 'does not trigger a CatchAllMessage if a listener matches', ->\n+        testMessage = new TextMessage(@user, 'message123')\n+\n+        matchingListener =\n+          call: (message) ->\n+            # indicate that the message matched the listener\n+            true\n+\n+        # Replace @robot.receive so we can catch if the functions recurses\n+        oldReceive = @robot.receive\n+        @robot.receive = sinon.spy()\n+\n+        @robot.listeners = [\n+          matchingListener\n+        ]\n+\n+        # Call the original receive method that we want to test\n+        oldReceive.call @robot, testMessage\n+\n+        # Ensure the function did not recurse\n+        expect(@robot.receive).to.not.have.been.called\n+\n+      it 'stops processing if a listener marks the message as done', ->\n+        testMessage = new TextMessage(@user, 'message123')\n+\n+        matchingListener =\n+          call: (message) ->\n+            message.done = true\n+            # Listener must have matched\n+            true\n+\n+        listenerSpy =\n+          call: sinon.spy()\n+\n+        @robot.listeners = [\n+          matchingListener\n+          listenerSpy\n+        ]\n+\n+        @robot.receive testMessage\n+\n+        expect(listenerSpy.call).to.not.have.been.called\n+\n+      it 'gracefully handles listener uncaughtExceptions (move on to next listener)', ->\n+        testMessage = {}\n+        theError = new Error()\n+\n+        badListener =\n+          call: () ->\n+            throw theError\n+\n+        goodListenerCalled = false\n+        goodListener =\n+          call: (_) ->\n+            goodListenerCalled = true\n+            true\n+\n+        @robot.listeners = [\n+          badListener\n+          goodListener\n+        ]\n+\n+        @robot.emit = (name, err, response) ->\n+          expect(name).to.equal('error')\n+          expect(err).to.equal(theError)\n+          expect(response.message).to.equal(testMessage)\n+        sinon.spy(@robot, 'emit')\n+\n+        @robot.receive testMessage\n+\n+        expect(@robot.emit).to.have.been.called\n+        expect(goodListenerCalled).to.be.ok\n+\n+  describe 'Message Processing', ->\n+    it 'calls a matching listener', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      @robot.hear /^message123$/, (response) ->\n+        expect(response.message).to.equal(testMessage)\n+        done()\n+      @robot.receive testMessage\n+\n+    it 'calls multiple matching listeners', ->\n+      testMessage = new TextMessage(@user, 'message123')\n+\n+      listenersCalled = 0\n+      listenerCallback = (response) ->\n+        expect(response.message).to.equal(testMessage)\n+        listenersCalled++\n+\n+      @robot.hear /^message123$/, listenerCallback\n+      @robot.hear /^message123$/, listenerCallback\n+\n+      @robot.receive testMessage\n+\n+      expect(listenersCalled).to.equal(2)\n+\n+    it 'calls the catch-all listener if no listeners match', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+\n+      listenerCallback = sinon.spy()\n+      @robot.hear /^no-matches$/, listenerCallback\n+\n+      @robot.catchAll (response) ->\n+        expect(listenerCallback).to.not.have.been.called\n+        expect(response.message).to.equal(testMessage)\n+        done()\n+\n+      @robot.receive testMessage\n+\n+    it 'does not call the catch-all listener if any listener matched', ->\n+      testMessage = new TextMessage(@user, 'message123')\n+\n+      listenerCallback = sinon.spy()\n+      @robot.hear /^message123$/, listenerCallback\n+\n+      catchAllCallback = sinon.spy()\n+      @robot.catchAll catchAllCallback\n+\n+      @robot.receive testMessage\n+\n+      expect(listenerCallback).to.have.been.called.once\n+      expect(catchAllCallback).to.not.have.been.called\n+\n+    it 'stops processing if message.finish() is called synchronously', ->\n+      testMessage = new TextMessage(@user, 'message123')\n+\n+      @robot.hear /^message123$/, (response) ->\n+        response.message.finish()\n+\n+      listenerCallback = sinon.spy()\n+      @robot.hear /^message123$/, listenerCallback\n+\n+      @robot.receive testMessage\n+\n+      expect(listenerCallback).to.not.have.been.called\n+\n+    it 'calls non-TextListener objects', (done) ->\n+      testMessage = new EnterMessage @user\n+\n+      @robot.enter (response) ->\n+        expect(response.message).to.equal(testMessage)\n+        done()\n+\n+      @robot.receive testMessage", "changes": 299}, {"status": "removed", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/eba1628c509321dbf5e6c16dec8b297434a472a6/test/rules_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/eba1628c509321dbf5e6c16dec8b297434a472a6/test/rules_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/rules_test.coffee?ref=eba1628c509321dbf5e6c16dec8b297434a472a6", "filename": "test/rules_test.coffee", "sha": "65e329a6ae1d7e62eaf7d1381639a08c03bc6146", "additions": 0, "patch": "@@ -1,20 +0,0 @@\n-Tests  = require './tests'\n-assert = require 'assert'\n-helper = Tests.helper()\n-require('../src/scripts/rules') helper\n-\n-tests = [\n-  'helper: the rules'\n-  'helper: the laws'\n-  'helper: what are the laws?'\n-  'helper: what are the three laws of robotics?'\n-  'helper: what are the 3 laws?'\n-]\n-\n-until tests.length == 0\n-  helper.reset()\n-  msg = tests.shift()\n-  helper.adapter.receive msg\n-  assert.ok helper.sent[0].match /1\\. A robot may not .+/\n-\n-helper.stop()", "changes": 20}, {"status": "removed", "deletions": 27, "raw_url": "https://github.com/hubotio/hubot/raw/eba1628c509321dbf5e6c16dec8b297434a472a6/test/scripts/test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/eba1628c509321dbf5e6c16dec8b297434a472a6/test/scripts/test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/scripts/test.coffee?ref=eba1628c509321dbf5e6c16dec8b297434a472a6", "filename": "test/scripts/test.coffee", "sha": "07af2636e5aa0a054a6c74fcb9e766d74d910bbb", "additions": 0, "patch": "@@ -1,27 +0,0 @@\n-# Tests hubot listeners\n-module.exports = (robot) ->\n-  assert = require 'assert'\n-  robot.hear /static/i, (msg) ->\n-    msg.http('http://127.0.0.1/test').port(process.env.PORT or 8080)\n-      .get() (err, res, body) ->\n-        msg.send body\n-\n-  robot.hear /test/i, (msg) ->\n-    msg.send \"OK\"\n-\n-  robot.hear /reply/i, (msg) ->\n-    msg.reply \"OK\"\n-\n-  robot.respond /rsvp/i, (msg) ->\n-    msg.send \"responding\"\n-\n-  robot.hear /random/i, (msg) ->\n-    msg.send msg.random([1,2]).toString()\n-\n-  robot.hear /http/i, (msg) ->\n-    msg.http('http://127.0.0.1').port(9001)\n-      .get() (err, res, body) ->\n-        msg.send body\n-\n-  robot.catchAll (msg) ->\n-    msg.send 'catch-all'", "changes": 27}, {"status": "removed", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/eba1628c509321dbf5e6c16dec8b297434a472a6/test/static/test", "blob_url": "https://github.com/hubotio/hubot/blob/eba1628c509321dbf5e6c16dec8b297434a472a6/test/static/test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/static/test?ref=eba1628c509321dbf5e6c16dec8b297434a472a6", "filename": "test/static/test", "sha": "7b4d4ba2e62dc741d2a6265a1ecbdba716d119f6", "additions": 0, "patch": "@@ -1 +0,0 @@\n-static", "changes": 1}, {"status": "removed", "deletions": 75, "raw_url": "https://github.com/hubotio/hubot/raw/eba1628c509321dbf5e6c16dec8b297434a472a6/test/tests.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/eba1628c509321dbf5e6c16dec8b297434a472a6/test/tests.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/tests.coffee?ref=eba1628c509321dbf5e6c16dec8b297434a472a6", "filename": "test/tests.coffee", "sha": "4bf4530cd21e9a939cfeaa8833f49f07afab26d6", "additions": 0, "patch": "@@ -1,75 +0,0 @@\n-Url           = require 'url'\n-Path          = require 'path'\n-\n-Robot         = require '../src/robot'\n-Adapter       = require '../src/adapter'\n-User          = require '../src/user'\n-Response      = require '../src/response'\n-{TextMessage} = require '../src/message'\n-\n-# A programmer's best friend.\n-# http://timenerdworld.files.wordpress.com/2010/12/joint-venture-s1e3_1.jpg\n-#\n-# Instantiates a test-only Robot that sends messages to an optional callback\n-# and a @sent array.\n-exports.helper = ->\n-  new Helper \"#{__dirname}/scripts\"\n-\n-# Training facility built for the Hubot scripts.  Starts up a web server to\n-# emulate backends (like google images) so we can test that the response\n-# parsing code functions.\n-exports.danger = (helper, cb) ->\n-  server = require('http').createServer (req, res) ->\n-    url = Url.parse req.url, true\n-    cb req, res, url\n-\n-  server.start = (tests, cb) ->\n-    server.listen 9001, ->\n-      helper.adapter.cb = (messages...) ->\n-        tests.shift() messages...\n-        server.close() if tests.length == 0\n-\n-      cb()\n-\n-  server.on 'close', -> helper.close()\n-  server\n-\n-class Helper extends Robot\n-  constructor: (scriptPath) ->\n-    super null, null, true, 'helper'\n-    @load scriptPath\n-    @id = 1\n-    @Response = Helper.Response\n-    @sent = []\n-    @recipients = []\n-    @adapter = new Danger @\n-    @alias = 'alias'\n-\n-  stop: ->\n-    process.exit 0\n-\n-  reset: ->\n-    @sent = []\n-\n-class Danger extends Adapter\n-  send: (user, strings...) ->\n-    @robot.sent.push str for str in strings\n-    @robot.recipients.push user for str in strings\n-    @cb? strings...\n-\n-  reply: (user, strings...) ->\n-    @send user, \"#{@robot.name}: #{str}\" for str in strings\n-\n-  receive: (text) ->\n-    if typeof text is 'string'\n-      user = new User 1, 'helper'\n-      super new TextMessage user, text\n-    else\n-      super text\n-\n-if not process.env.HUBOT_LIVE\n-  class Helper.Response extends Response\n-    # This changes ever HTTP request to hit the danger server above\n-    http: (url) ->\n-      super(url).host('127.0.0.1').port(9001)\n-", "changes": 75}, {"status": "modified", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/d0f64f8022090198febd3984b681f51a3e99bcb6/test/user_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d0f64f8022090198febd3984b681f51a3e99bcb6/test/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/user_test.coffee?ref=d0f64f8022090198febd3984b681f51a3e99bcb6", "filename": "test/user_test.coffee", "sha": "105dd38f6144e0c89a23710a42adadb19049c3b9", "additions": 16, "patch": "@@ -1,18 +1,20 @@\n-User = require '../src/user'\n-assert = require 'assert'\n+{expect} = require 'chai'\n+User = require '../src/user.coffee'\n \n+describe 'User', ->\n+  describe 'new', ->\n+    it 'uses id as the default name', ->\n+      user = new User('hubot')\n \n-user = new User \"Fake User\", {name: 'fake', type: \"groupchat\"}\n-assert.equal \"Fake User\", user.id\n-assert.equal \"groupchat\", user.type\n-assert.equal \"fake\", user.name\n+      expect(user.name).to.equal('hubot')\n \n-user = new User \"Fake User\", {room: \"chat@room.jabber\", type: \"groupchat\"}\n-assert.equal \"Fake User\", user.id\n-assert.equal \"chat@room.jabber\", user.room\n-assert.equal \"groupchat\", user.type\n-assert.equal \"Fake User\", user.name # Make sure that if no name is given, we fallback to the ID\n+    it 'sets attributes passed in', ->\n+      user = new User('hubot', foo: 1, bar: 2)\n \n-user = new User 12345\n-assert.strictEqual 12345, user.id\n-assert.strictEqual \"12345\", user.name\n+      expect(user.foo).to.equal(1)\n+      expect(user.bar).to.equal(2)\n+\n+    it 'uses name attribute when passed in, not id', ->\n+      user = new User('hubot', name: 'tobuh')\n+\n+      expect(user.name).to.equal('tobuh')", "changes": 30}], "842": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/3e89f9c36965b436253554c8b8ee385172c3b713/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/3e89f9c36965b436253554c8b8ee385172c3b713/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=3e89f9c36965b436253554c8b8ee385172c3b713", "filename": "docs/scripting.md", "sha": "8df2df5b67ef17b2b88e7661b6a27ba98a538a5a", "additions": 2, "patch": "@@ -489,7 +489,7 @@ Using previous examples:\n     try\n       data = JSON.parse req.body.payload\n     catch err\n-      robot.emit 'error', error\n+      robot.emit 'error', err\n \n     # rest of the code here\n \n@@ -504,7 +504,7 @@ Using previous examples:\n         # rest of code here\n ```\n \n-For the second example, it's worth thinking about what messages the user would see. If you have an error handler that replies to the user, you may not need to add a custom\n+For the second example, it's worth thinking about what messages the user would see. If you have an error handler that replies to the user, you may not need to add a custom message and could send back the error message provided to the `get()` request, but of course it depends on how public you want to be with your exception reporting. \n \n ## Documenting Scripts\n ", "changes": 4}], "848": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/1aabe3ad1616f9e6d602bae2e9e9d655735e3d62/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1aabe3ad1616f9e6d602bae2e9e9d655735e3d62/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=1aabe3ad1616f9e6d602bae2e9e9d655735e3d62", "filename": "src/robot.coffee", "sha": "02e46926c59bd761aa0016e9350b4c7324394125", "additions": 3, "patch": "@@ -63,9 +63,9 @@ class Robot\n \n     @on 'error', (err, msg) =>\n       @invokeErrorHandlers(err, msg)\n-    process.on 'uncaughtException', (err) =>\n+    @onUncaughtException = (err) =>\n       @emit 'error', err\n-\n+    process.on 'uncaughtException', @onUncaughtException\n \n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n@@ -447,6 +447,7 @@ class Robot\n   # Returns nothing.\n   shutdown: ->\n     clearInterval @pingIntervalId if @pingIntervalId?\n+    process.removeListener 'uncaughtException', @onUncaughtException\n     @adapter.close()\n     @brain.close()\n ", "changes": 5}], "849": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8962004f0819fe5f01cf7998153514de077bcc4a/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/8962004f0819fe5f01cf7998153514de077bcc4a/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=8962004f0819fe5f01cf7998153514de077bcc4a", "filename": "docs/adapters.md", "sha": "b745c88c8977920fd6329b303a3bcec7459673f9", "additions": 1, "patch": "@@ -38,6 +38,7 @@ to have yours added to the list:\n * [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.\n * [Visual Studio Online](https://github.com/scrumdod/hubot-VSOnline)\n * [Typetalk](https://github.com/nulab/hubot-typetalk)\n+* [Fleep](https://github.com/anroots/hubot-fleep)\n \n ## Writing Your Own adapter\n ", "changes": 1}], "856": [{"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/710aad4e08cbda9de172dddff8eaff9be39e05a7/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/710aad4e08cbda9de172dddff8eaff9be39e05a7/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=710aad4e08cbda9de172dddff8eaff9be39e05a7", "filename": "docs/README.md", "sha": "9bb3dc96cb1b18790859cc9b75760337a2a9a493", "additions": 7, "patch": "@@ -33,13 +33,13 @@ If you'd prefer to automate your hubot build without being interactively\n prompted for its configuration, you can add the following options\n to the `yo hubot` command to do so:\n \n-| Option           | Description\n-| ---------------- | -----------------------------------------------------\n-| `--owner`        | Bot owner, e.g. \"Bot Wrangler <bw@example.com>\"\n-| `--name`         | Bot name, e.g. \"Hubot\"\n-| `--description`  | Bot description, e.g. \"Delightfully aware robutt\"\n-| `--adapter`      | Bot adapter, e.g. \"campfire\"\n-| `--defaults`     | Declare all defaults are set and no prompting required\n+| Option                                      | Description\n+| ------------------------------------------- | -----------------------------------------------------\n+| `--owner=\"Bot Wrangler <bw@example.com>\"`   | Bot owner, e.g. \"Bot Wrangler <bw@example.com>\"\n+| `--name=\"Hubot\"`                            | Bot name, e.g. \"Hubot\"\n+| `--description=\"Delightfully aware robutt\"` | Bot description, e.g. \"Delightfully aware robutt\"\n+| `--adapter=campfire`                        | Bot adapter, e.g. \"campfire\"\n+| `--defaults`                                | Declare all defaults are set and no prompting required\n \n You now have your own functional hubot! There's a `bin/hubot`\n command for convenience, to handle installing npm dependencies, loading scripts,", "changes": 14}], "857": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/63b6842b453e70ee01ede0744fdd7319cd67d297/docs/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/63b6842b453e70ee01ede0744fdd7319cd67d297/docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/README.md?ref=63b6842b453e70ee01ede0744fdd7319cd67d297", "filename": "docs/README.md", "sha": "8e3110b7b607e79db4f427263df1a92cd6936087", "additions": 3, "patch": "@@ -49,7 +49,7 @@ and then launching your hubot.\n     Hubot>\n \n This starts hubot using the [shell adapter](adapters/shell.md), which\n-is mostly useful for development. Make note of  `Hubot>`; this is the name he'll\n+is mostly useful for development. Make note of  `Hubot>`; this is the name your hubot will\n `respond` to with commands. For example, to list available commands:\n \n     % bin/hubot\n@@ -81,7 +81,7 @@ is mostly useful for development. Make note of  `Hubot>`; this is the name he'll\n     hubot pug me - Receive a pug\n     hubot ship it - Display a motivation squirrel\n \n-You almost definitely will want to change his name to give him some more character. bin/hubot takes a `--name`:\n+You almost definitely will want to change your hubot's name to add character. bin/hubot takes a `--name`:\n \n     % bin/hubot --name myhubot\n     myhubot>\n@@ -130,4 +130,4 @@ Please note the support for deploying to Windows isn't officially supported.\n \n ## Patterns\n \n-Using custom scripts, you can quickly customize Hubot to be the most life embettering robot he can be. Read [docs/patterns.md](patterns.md) for some nifty tricks that may come in handy as you teach him new skills.\n+Using custom scripts, you can quickly customize Hubot to be the most life embettering robot he or she can be. Read [docs/patterns.md](patterns.md) for some nifty tricks that may come in handy as you teach your hubot new skills.", "changes": 6}], "860": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/81b3a6822bc543187cc936a74402efc1a05753b8/LICENSE", "blob_url": "https://github.com/hubotio/hubot/blob/81b3a6822bc543187cc936a74402efc1a05753b8/LICENSE", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/LICENSE?ref=81b3a6822bc543187cc936a74402efc1a05753b8", "filename": "LICENSE", "sha": "bbb875dc2811a59f977dc92b7ab1db13bf93a636", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n-Copyright (c) 2013 GitHub Inc.\n+Copyright (c) 2015 GitHub Inc.\n \n Permission is hereby granted, free of charge, to any person obtaining\n a copy of this software and associated documentation files (the", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/81b3a6822bc543187cc936a74402efc1a05753b8/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b3a6822bc543187cc936a74402efc1a05753b8/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=81b3a6822bc543187cc936a74402efc1a05753b8", "filename": "README.md", "sha": "130d1456f74a2b030d08f1ff51ba08a7a424d017", "additions": 2, "patch": "@@ -2,7 +2,7 @@\n \n Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n cool. He's extendable with\n-[old community scripts](https://github.com/github/hubot-scripts), or \n+[old community scripts](https://github.com/github/hubot-scripts), or\n [new community org](https://github.com/hubot-scripts/) and your own custom\n scripts, and can work on [many different chat services](docs/adapters.md).\n \n@@ -15,5 +15,5 @@ are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTI\n \n ## License\n \n-Copyright (c) 2011-2014 GitHub, Inc. See the LICENSE file for license rights and\n+Copyright (c) 2011-2015 GitHub, Inc. See the [LICENSE](https://github.com/github/hubot/blob/master/LICENSE) file for license rights and\n limitations (MIT).", "changes": 4}], "861": [{"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d4cbed37c54a904e42e21da9686ef2a664afe9cc/LICENSE.md", "blob_url": "https://github.com/hubotio/hubot/blob/d4cbed37c54a904e42e21da9686ef2a664afe9cc/LICENSE.md", "previous_filename": "LICENSE", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/LICENSE.md?ref=d4cbed37c54a904e42e21da9686ef2a664afe9cc", "filename": "LICENSE.md", "sha": "493db50edda9d35fb7fdba7a0e10ed68c257ffb0", "additions": 0, "changes": 0}], "863": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d7c3c8b9addb4a8f0aa9ad7287d16ac4a4b162d1/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/d7c3c8b9addb4a8f0aa9ad7287d16ac4a4b162d1/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=d7c3c8b9addb4a8f0aa9ad7287d16ac4a4b162d1", "filename": "package.json", "sha": "02f20cc6a672e2603858a152f3770d37b12d894a", "additions": 1, "patch": "@@ -21,7 +21,7 @@\n     \"url\": \"https://github.com/github/hubot.git\"\n   },\n   \"dependencies\": {\n-    \"coffee-script\": \"1.6.3\",\n+    \"coffee-script\": \"1.9.0\",\n     \"optparse\": \"1.0.4\",\n     \"scoped-http-client\": \"0.10.0\",\n     \"log\": \"1.4.0\",", "changes": 2}], "864": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9b671b8fc2d457a5f92591300fbc7b03e73b3aee/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/9b671b8fc2d457a5f92591300fbc7b03e73b3aee/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=9b671b8fc2d457a5f92591300fbc7b03e73b3aee", "filename": "docs/scripting.md", "sha": "8a64831ed55d0251e93af9af30e98c392ff83701", "additions": 2, "patch": "@@ -435,6 +435,8 @@ module.exports = (robot) ->\n     res.send 'OK'\n ```\n \n+All endpoint URLs should start with the literal string `/hubot` (regardless of what your robot's name is). This consistency makes it easier to set up webhooks (copy-pasteable URL) and guarantees that URLs are valid (not all bot names are URL-safe).\n+\n ## Events\n \n Hubot can also respond to events which can be used to pass data between scripts. This is done by encapsulating node.js's [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter) with `robot.emit` and `robot.on`.", "changes": 2}], "865": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/af436f86b9aad6c255587b24e3434abbec508a51/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/af436f86b9aad6c255587b24e3434abbec508a51/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=af436f86b9aad6c255587b24e3434abbec508a51", "filename": "docs/adapters.md", "sha": "2315febf977f9aca115c0fec7bcb3ca40d9c8b6a", "additions": 1, "patch": "@@ -39,6 +39,7 @@ to have yours added to the list:\n * [Visual Studio Online](https://github.com/scrumdod/hubot-VSOnline)\n * [Typetalk](https://github.com/nulab/hubot-typetalk)\n * [Fleep](https://github.com/anroots/hubot-fleep)\n+* [Let's Chat](https://github.com/sdelements/hubot-lets-chat)\n \n ## Writing Your Own adapter\n ", "changes": 1}], "867": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/17432fc19c4aa31d3de8635402dcc01b1d778d41/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/17432fc19c4aa31d3de8635402dcc01b1d778d41/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=17432fc19c4aa31d3de8635402dcc01b1d778d41", "filename": "CHANGELOG.md", "sha": "ed7c962ecdf026850bbf78f008a34e0ee565b3cb", "additions": 6, "patch": "@@ -1,3 +1,9 @@\n+v2.11.1\n+=======\n+\n+* Automated testing\n+* Cleanup uncaughtException handlers, to avoid node warning about a memory leak during tests\n+\n v2.11.0\n =======\n ", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/17432fc19c4aa31d3de8635402dcc01b1d778d41/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/17432fc19c4aa31d3de8635402dcc01b1d778d41/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=17432fc19c4aa31d3de8635402dcc01b1d778d41", "filename": "package.json", "sha": "031650220fd38a6e95debfebf0646bfc0742b072", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.11.0\",\n+  \"version\": \"2.11.1\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "868": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1ec75f1bbb2e602268adc9419a9fd35f7d9340e2/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/1ec75f1bbb2e602268adc9419a9fd35f7d9340e2/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=1ec75f1bbb2e602268adc9419a9fd35f7d9340e2", "filename": "docs/scripting.md", "sha": "387f0058e81c91ae9b8cab36573af06647e047d9", "additions": 16, "patch": "@@ -472,6 +472,22 @@ Using previous examples:\n \n For the second example, it's worth thinking about what messages the user would see. If you have an error handler that replies to the user, you may not need to add a custom message and could send back the error message provided to the `get()` request, but of course it depends on how public you want to be with your exception reporting.\n \n+## Catch All\n+\n+Sometimes you are interested in responding to all unmatched messages in a room. Hubot has two helpers to generate listeners that will only react when all other listeners have been tested.\n+\n+`catchAll` will respond to ALL messages that weren't matched by a non-catch-all listener (e.g. `I would like a sandwich today`)\n+\n+`catchAllAddressed` will only respond to catch-all messages that were addressed to the robot (e.g. `Hubot: tell me a story`)\n+\n+`catchAllAddressed` is particularly useful if you would like to have your robot apologize:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.catchAllAddressed (response) ->\n+    response.reply \"I'm sorry, I don't know how to \\\"#{response.match[1]}\\\"... :sob:\"\n+```\n+\n ## Documenting Scripts\n \n Hubot scripts can be documented with comments at the top of their file, for example:", "changes": 16}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1ec75f1bbb2e602268adc9419a9fd35f7d9340e2/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1ec75f1bbb2e602268adc9419a9fd35f7d9340e2/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=1ec75f1bbb2e602268adc9419a9fd35f7d9340e2", "filename": "src/robot.coffee", "sha": "312108fc62ccfbb6de5a4788c7a040ac923e9a43", "additions": 18, "patch": "@@ -217,6 +217,24 @@ class Robot\n       ((msg) -> msg.message = msg.message.message; callback msg)\n     )\n \n+  # Public: Adds a Listener that triggers when no other text matchers match\n+  # and the message was addressing the robot.\n+  #\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  catchAllAddressed: (callback) ->\n+    pattern = @respondPattern(/(.*)/)\n+    @listeners.push new Listener(\n+      @\n+      (msg) ->\n+        if msg instanceof CatchAllMessage and msg.message.match?\n+          msg.message.match(pattern)\n+      (response) ->\n+        response.message = response.message.message\n+        callback response\n+    )\n+\n   # Public: Passes the given message to any interested Listeners.\n   #\n   # message - A Message instance. Listeners can flag this message as 'done' to", "changes": 18}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1ec75f1bbb2e602268adc9419a9fd35f7d9340e2/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1ec75f1bbb2e602268adc9419a9fd35f7d9340e2/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=1ec75f1bbb2e602268adc9419a9fd35f7d9340e2", "filename": "test/robot_test.coffee", "sha": "1599da5f9b1f47943f90c997dac94f52134743fb", "additions": 47, "patch": "@@ -171,6 +171,12 @@ describe 'Robot', ->\n         @robot.catchAll ->\n         expect(@robot.listeners).to.have.length(1)\n \n+    describe '#catchAllAddressed', ->\n+      it 'registers a new Listener', ->\n+        expect(@robot.listeners).to.have.length(0)\n+        @robot.catchAllAddressed ->\n+        expect(@robot.listeners).to.have.length(1)\n+\n     describe '#receive', ->\n       it 'calls all registered listeners', ->\n         # Need to use a real Message so that the CatchAllMessage constructor works\n@@ -462,6 +468,47 @@ describe 'Robot', ->\n \n         expect(result).to.not.be.ok\n \n+      it 'matches CatchAllMessages wrapping non-TextMessages', ->\n+        @robot.catchAll ->\n+        # Grab the only registered listener\n+        testListener = @robot.listeners[0]\n+\n+        testMessage = new CatchAllMessage(new EnterMessage @user)\n+        expect(testListener.matcher(testMessage)).to.be.ok\n+\n+    describe '#catchAllAddressed', ->\n+      it 'matches messages addressed to the robot', ->\n+        @robot.catchAllAddressed ->\n+        # Grab the only registered listener\n+        testListener = @robot.listeners[0]\n+\n+        testMessage = new CatchAllMessage(new TextMessage @user, 'TestHubot: message123')\n+        expect(testListener.matcher(testMessage)).to.be.ok\n+\n+      it 'does not match messages not addressed to the robot', ->\n+        @robot.catchAllAddressed ->\n+        # Grab the only registered listener\n+        testListener = @robot.listeners[0]\n+\n+        testMessage = new CatchAllMessage(new TextMessage @user, 'message123')\n+        expect(testListener.matcher(testMessage)).to.not.be.ok\n+\n+      it 'does not match non-CatchAllMessages that are addressed to the robot', ->\n+        @robot.catchAllAddressed ->\n+        # Grab the only registered listener\n+        testListener = @robot.listeners[0]\n+\n+        testMessage = new TextMessage @user, 'TestHubot: message123'\n+        expect(testListener.matcher(testMessage)).to.not.be.ok\n+\n+      it 'does not match CatchAllMessages wrapping non-TextMessages', ->\n+        @robot.catchAllAddressed ->\n+        # Grab the only registered listener\n+        testListener = @robot.listeners[0]\n+\n+        testMessage = new CatchAllMessage(new EnterMessage @user)\n+        expect(testListener.matcher(testMessage)).to.not.be.ok\n+\n   describe 'Message Processing', ->\n     it 'calls a matching listener', (done) ->\n       testMessage = new TextMessage(@user, 'message123')", "changes": 47}], "869": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3d5f60a7d412f72ce4232158c4af7f9662faf374/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/3d5f60a7d412f72ce4232158c4af7f9662faf374/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=3d5f60a7d412f72ce4232158c4af7f9662faf374", "filename": ".travis.yml", "sha": "3fe29cba833fbd8a7936be051f7898e2e88a15f5", "additions": 5, "patch": "@@ -2,6 +2,10 @@ language: node_js\n node_js:\n   - \"0.11\"\n   - \"0.10\"\n-  - \"0.8\"\n+matrix:\n+  include:\n+    - node_js: \"0.8\"\n+      # old versions of NPM don't include support for `^` dependency prefixes in package.json\n+      before_install: npm update -g npm\n notifications:\n   email: false", "changes": 6}], "870": [{"status": "renamed", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d558ab218cfbea3f268f472df87a1ab3b7df96a1/LICENSE.md", "blob_url": "https://github.com/hubotio/hubot/blob/d558ab218cfbea3f268f472df87a1ab3b7df96a1/LICENSE.md", "previous_filename": "LICENSE", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/LICENSE.md?ref=d558ab218cfbea3f268f472df87a1ab3b7df96a1", "filename": "LICENSE.md", "sha": "87adbc0e1e44ccd7bf62c389c9f6fa4022f0cc86", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n-Copyright (c) 2013 GitHub Inc.\n+Copyright (c) 2011-2015 GitHub Inc.\n \n Permission is hereby granted, free of charge, to any person obtaining\n a copy of this software and associated documentation files (the", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/d558ab218cfbea3f268f472df87a1ab3b7df96a1/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/d558ab218cfbea3f268f472df87a1ab3b7df96a1/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=d558ab218cfbea3f268f472df87a1ab3b7df96a1", "filename": "README.md", "sha": "b2480f87dede5d574b41455ddc53f6356b3dae58", "additions": 1, "patch": "@@ -15,5 +15,4 @@ are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTI\n \n ## License\n \n-Copyright (c) 2011-2014 GitHub, Inc. See the LICENSE file for license rights and\n-limitations (MIT).\n+See the [LICENSE](LICENSE.md) file for license rights and limitations (MIT).", "changes": 3}], "871": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0980f802f559b2a4f68d2255f4cb2a3c348f6340/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/0980f802f559b2a4f68d2255f4cb2a3c348f6340/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=0980f802f559b2a4f68d2255f4cb2a3c348f6340", "filename": "docs/scripting.md", "sha": "c7c42761b6e79b8638e989e94e70624403a330b9", "additions": 12, "patch": "@@ -287,6 +287,18 @@ module.exports = (robot) ->\n     res.send res.random leaveReplies\n ```\n \n+## Eavesdrop\n+\n+Hubot can match 'anti-respond' messages: messages that are specifically *not* addressed to the robot.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.eavesdrop /hello/, (msg) ->\n+    # This will match \"hello\", but not \"Hubot: hello\"\n+  robot.respond /hello/, (msg) ->\n+    # This will match \"Hubot: hello\", but not \"hello\"\n+```\n+\n ## Custom Listeners\n \n While the above helpers cover most of the functionality the average user needs (hear, respond, enter, leave, topic), sometimes you would like to have very specialized matching logic for listeners. If so, you can use `listen` to specify a custom match function instead of a regular expression.", "changes": 12}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/0980f802f559b2a4f68d2255f4cb2a3c348f6340/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0980f802f559b2a4f68d2255f4cb2a3c348f6340/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=0980f802f559b2a4f68d2255f4cb2a3c348f6340", "filename": "src/robot.coffee", "sha": "ea0098f6e7e6b1cd4c41513b09746fc5404f22ed", "additions": 24, "patch": "@@ -4,12 +4,13 @@ Path           = require 'path'\n HttpClient     = require 'scoped-http-client'\n {EventEmitter} = require 'events'\n async          = require 'async'\n+{inspect}      = require 'util'\n \n User = require './user'\n Brain = require './brain'\n Response = require './response'\n {Listener,TextListener} = require './listener'\n-{EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n+{EnterMessage,LeaveMessage,TextMessage,TopicMessage,CatchAllMessage} = require './message'\n Middleware = require './middleware'\n \n HUBOT_DEFAULT_ADAPTERS = [\n@@ -116,6 +117,28 @@ class Robot\n   respond: (regex, options, callback) ->\n     @hear(@respondPattern(regex), options, callback)\n \n+  # Public: Adds a Listener that attempts to match incoming messages based on\n+  # a Regex, but rejects all messages that are addressed to the robot\n+  # (i.e. anti-respond).\n+  #\n+  # regex    - A Regex that determines if the callback should be called.\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  eavesdrop: (regex, options, callback) ->\n+    antiPattern = @respondPattern(/.*/)\n+    @listen(\n+      (message) ->\n+        if message instanceof TextMessage and not message.match(antiPattern)\n+          match = message.match(regex)\n+          if match\n+            @robot.logger.debug \\\n+              \"Message '#{message}' matched regex /#{inspect regex}/\"\n+          match\n+      options\n+      callback\n+    )\n+\n   # Public: Build a regular expression that matches messages addressed\n   # directly to the robot\n   #", "changes": 25}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0980f802f559b2a4f68d2255f4cb2a3c348f6340/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0980f802f559b2a4f68d2255f4cb2a3c348f6340/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=0980f802f559b2a4f68d2255f4cb2a3c348f6340", "filename": "test/robot_test.coffee", "sha": "a90d839f5e8c8b6621050f8555de57abacbcbb5d", "additions": 40, "patch": "@@ -160,6 +160,12 @@ describe 'Robot', ->\n         @robot.respond /.*/, ->\n         expect(@robot.hear).to.have.been.called\n \n+    describe '#eavesdrop', ->\n+      it 'registers a new listener', ->\n+        sinon.spy @robot, 'listen'\n+        @robot.eavesdrop /.*/, ->\n+        expect(@robot.listen).to.have.been.called\n+\n     describe '#enter', ->\n       it 'registers a new listener using listen', ->\n         sinon.spy @robot, 'listen'\n@@ -414,6 +420,40 @@ describe 'Robot', ->\n \n         expect(result).to.not.be.ok\n \n+    describe '#eavesdrop', ->\n+      it 'matches TextMessages not addressed to the robot', ->\n+        callback = sinon.spy()\n+        testMessage = new TextMessage(@user, 'message123')\n+        testRegex = /message123/\n+\n+        @robot.eavesdrop(testRegex, callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+\n+      it 'does not match TextMessages addressed to the robot', ->\n+        callback = sinon.spy()\n+        testMessage = new TextMessage(@user, 'TestHubot message123')\n+        testRegex = /message123/\n+\n+        @robot.eavesdrop(testRegex, callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+\n+      it 'does not match EnterMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new EnterMessage(@user)\n+        testRegex = /.*/\n+\n+        @robot.eavesdrop(testRegex, callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+\n     describe '#enter', ->\n       it 'matches EnterMessages', ->\n         callback = sinon.spy()", "changes": 40}], "876": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/29bb0747af4cbcae2c1afd9f52a4fb13d9abd2c6/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/29bb0747af4cbcae2c1afd9f52a4fb13d9abd2c6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=29bb0747af4cbcae2c1afd9f52a4fb13d9abd2c6", "filename": "CHANGELOG.md", "sha": "e69ca1f200849c7aba3c9a760cb0275504324ff0", "additions": 5, "patch": "@@ -1,3 +1,8 @@\n+v2.11.2\n+=======\n+\n+* Add support for namespaced alternative environment variables for controlling the port and address express binds to (EXPRESS_PORT and EXPRESS_BIND_ADDRESS).\n+\n v2.11.1\n =======\n ", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/29bb0747af4cbcae2c1afd9f52a4fb13d9abd2c6/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/29bb0747af4cbcae2c1afd9f52a4fb13d9abd2c6/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=29bb0747af4cbcae2c1afd9f52a4fb13d9abd2c6", "filename": "package.json", "sha": "80b7798634a44780c0f163686b98a1803d0e9dbf", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.11.1\",\n+  \"version\": \"2.11.2\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "877": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c4a40cb69f88dcc70df1218d832e0ecde3314027/.gitignore", "blob_url": "https://github.com/hubotio/hubot/blob/c4a40cb69f88dcc70df1218d832e0ecde3314027/.gitignore", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.gitignore?ref=c4a40cb69f88dcc70df1218d832e0ecde3314027", "filename": ".gitignore", "sha": "67998e3765dbd098eab1840eb91cca972d71355a", "additions": 1, "patch": "@@ -1 +1,2 @@\n node_modules\n+.hubot_history", "changes": 1}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/c4a40cb69f88dcc70df1218d832e0ecde3314027/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/c4a40cb69f88dcc70df1218d832e0ecde3314027/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=c4a40cb69f88dcc70df1218d832e0ecde3314027", "filename": "package.json", "sha": "4d179767c09a725c41cac8e4760bc35e01cc2a01", "additions": 5, "patch": "@@ -20,21 +20,20 @@\n     \"url\": \"https://github.com/github/hubot.git\"\n   },\n   \"dependencies\": {\n+    \"chalk\": \"^1.0.0\",\n+    \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n-    \"optparse\": \"1.0.4\",\n-    \"scoped-http-client\": \"0.10.0\",\n-    \"log\": \"1.4.0\",\n     \"express\": \"3.18.1\",\n-    \"readline-history\": \"~1.2.0\"\n+    \"log\": \"1.4.0\",\n+    \"optparse\": \"1.0.4\",\n+    \"scoped-http-client\": \"0.10.0\"\n   },\n-\n   \"devDependencies\": {\n     \"hubot-mock-adapter\": \"^1.0.0\",\n     \"mocha\": \"^2.1.0\",\n     \"mockery\": \"^1.4.0\",\n     \"sinon-chai\": \"^2.6.0\"\n   },\n-\n   \"engines\": {\n     \"node\": \">= 0.8.x\",\n     \"npm\": \">= 1.1.x\"", "changes": 11}, {"status": "modified", "deletions": 41, "raw_url": "https://github.com/hubotio/hubot/raw/c4a40cb69f88dcc70df1218d832e0ecde3314027/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c4a40cb69f88dcc70df1218d832e0ecde3314027/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=c4a40cb69f88dcc70df1218d832e0ecde3314027", "filename": "src/adapters/shell.coffee", "sha": "ece1dd14f1ca98e1bf2809ee2ddd927a29656e7c", "additions": 75, "patch": "@@ -1,22 +1,23 @@\n-Readline = require 'readline-history'\n+fs       = require('fs')\n+readline = require('readline')\n+stream   = require('stream')\n+cline    = require('cline')\n+chalk    = require('chalk')\n \n Robot         = require '../robot'\n Adapter       = require '../adapter'\n {TextMessage} = require '../message'\n \n-\n historySize = if process.env.HUBOT_SHELL_HISTSIZE?\n                 parseInt(process.env.HUBOT_SHELL_HISTSIZE)\n               else\n                 1024\n \n+historyPath = \".hubot_history\"\n+\n class Shell extends Adapter\n   send: (envelope, strings...) ->\n-    unless process.platform is 'win32'\n-      console.log \"\\x1b[01;32m#{str}\\x1b[0m\" for str in strings\n-    else\n-      console.log \"#{str}\" for str in strings\n-    @repl.prompt()\n+    console.log chalk.green.bold(\"#{str}\") for str in strings\n \n   emote: (envelope, strings...) ->\n     @send envelope, \"* #{str}\" for str in strings\n@@ -26,41 +27,74 @@ class Shell extends Adapter\n     @send envelope, strings...\n \n   run: ->\n-    stdin = process.openStdin()\n-    stdout = process.stdout\n-\n-    @repl = null\n-    Readline.createInterface\n-      path: \".hubot_history\",\n-      input: stdin,\n-      output: stdout,\n-      maxLength: historySize, # number of entries\n-      next: (rl) =>\n-        @repl = rl\n-        @repl.on 'close', =>\n-          stdin.destroy()\n-          @robot.shutdown()\n-          process.exit 0\n-\n-        @repl.on 'line', (buffer) =>\n-\n-          switch buffer.toLowerCase()\n-            when \"exit\"\n-              @repl.close()\n-            when \"history\"\n-              stdout.write \"#{line}\\n\" for line in @repl.history\n-            else\n-              user_id = parseInt(process.env.HUBOT_SHELL_USER_ID or '1')\n-              user_name = process.env.HUBOT_SHELL_USER_NAME or 'Shell'\n-              user = @robot.brain.userForId user_id, name: user_name, room: 'Shell'\n-              @receive new TextMessage user, buffer, 'messageId'\n-          @repl.prompt(true)\n-\n-        @emit 'connected'\n-\n-        @repl.setPrompt \"#{@robot.name}> \"\n-        @repl.prompt(true)\n+    @buildCli()\n+\n+    @loadHistory (history) =>\n+      @cli.history(history)\n+      @cli.interact(\"#{@robot.name}> \")\n+      @emit 'connected'\n+\n+  shutdown: () ->\n+    @robot.shutdown()\n+    process.exit 0\n+\n+  buildCli: () ->\n+    @cli = cline()\n+\n+    @cli.command '*', (input) =>\n+      userId = parseInt(process.env.HUBOT_SHELL_USER_ID or '1')\n+      userName = process.env.HUBOT_SHELL_USER_NAME or 'Shell'\n+      user = @robot.brain.userForId userId, name: userName, room: 'Shell'\n+      @receive new TextMessage user, input, 'messageId'\n+\n+    @cli.command 'history', () =>\n+      console.log item for item in @cli.history()\n+\n+    @cli.on 'history', (item) =>\n+      if item.length > 0 and item isnt 'exit' and item isnt 'history'\n+        fs.appendFile historyPath, \"#{item}\\n\", (err) =>\n+          @robot.emit 'error', err if err\n+\n+    @cli.on 'close', () =>\n+      history = @cli.history()\n+      if history.length > historySize\n+        startIndex = history.length - historySize\n+        history = history.reverse().splice(startIndex, historySize)\n+\n+        outstream = fs.createWriteStream(historyPath)\n+        # >= node 0.10\n+        outstream.on 'finish', () =>\n+          @shutdown()\n+\n+        for item in history\n+          outstream.write \"#{item}\\n\"\n+\n+        # < node 0.10\n+        outstream.end () =>\n+          @shutdown()\n+       else\n+         @shutdown()\n+\n+  # Private: load history from .hubot_history.\n+  #\n+  # callback - A Function that is called with the loaded history items (or an empty array if there is no history)\n+  loadHistory: (callback) ->\n+    fs.exists historyPath, (exists) ->\n+      if exists\n+        instream = fs.createReadStream(historyPath)\n+        outstream = new stream\n+        outstream.readable = true\n+        outstream.writable = true\n \n+        items = []\n+        rl = readline.createInterface(input: instream, output: outstream, terminal: false)\n+        rl.on 'line', (line) ->\n+          if line.length > 0 \n+            items.push(line)\n+        rl.on 'close', () ->\n+          callback(items)\n+      else\n+        callback([])\n \n exports.use = (robot) ->\n   new Shell robot", "changes": 116}], "879": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a536c45bca2233a81f2e980c9c5a6e75e4c7af5b/docs/deploying.md", "blob_url": "https://github.com/hubotio/hubot/blob/a536c45bca2233a81f2e980c9c5a6e75e4c7af5b/docs/deploying.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying.md?ref=a536c45bca2233a81f2e980c9c5a6e75e4c7af5b", "filename": "docs/deploying.md", "sha": "a63f99043bc5815adb62b40ce11ddb254005a7ce", "additions": 5, "patch": "@@ -0,0 +1,5 @@\n+# Deploying Hubot\n+\n+- [Heroku](deploying/heroku.html)\n+- [Unix](deploying/unix.html)\n+- [Windows](deploying/windows.html)", "changes": 5}], "881": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb", "filename": "README.md", "sha": "bab69596abe79166ac2d9435144eab81cf30dced", "additions": 1, "patch": "@@ -7,7 +7,7 @@ cool. He's extendable with\n scripts, and can work on [many different chat services](docs/adapters.md).\n \n This repository provides a library that's distributed by `npm` that you\n-use for building your own bots.  See the [docs/README.md](docs/README.md)\n+use for building your own bots.  See the [documentation](http://hubot.github.com/docs)\n for details on getting up and running with your very own robot friend.\n \n In most cases, you'll probably never have to hack on this repo directly if you", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb", "filename": "docs/adapters.md", "sha": "263dab0a649b9c23642bbff52e403123e2068899", "additions": 4, "patch": "@@ -1,4 +1,7 @@\n-# Hubot Adapters\n+---\n+permalink: /docs/adapters/index.html\n+layout: docs\n+---\n \n Adapters are the interface to the service you want your hubot to run on.\n ", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/adapters/campfire.md", "blob_url": "https://github.com/hubotio/hubot/blob/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/adapters/campfire.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/campfire.md?ref=1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb", "filename": "docs/adapters/campfire.md", "sha": "725e4f4a3d985b662ee18530d4a0efa4f17ea8a5", "additions": 4, "patch": "@@ -1,4 +1,7 @@\n-# Adapter: Campfire\n+---\n+permalink: /docs/adapters/campfire/index.html\n+layout: docs\n+---\n \n [Campfire](http://campfirenow.com/) is a web based chat application built by\n [37signals](http://37signals.com). The Campfire adapter is one of the original", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/adapters/shell.md", "blob_url": "https://github.com/hubotio/hubot/blob/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/adapters/shell.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/shell.md?ref=1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb", "filename": "docs/adapters/shell.md", "sha": "c88b5bab120be276f12965c47150aa3e2db27b14", "additions": 4, "patch": "@@ -1,4 +1,7 @@\n-# Adapters: Shell\n+---\n+permalink: /docs/adapters/shell/index.html\n+layout: docs\n+---\n \n The shell adapter provides a simple read-eval-print loop for interacting with a hubot locally.\n It can be useful for testing scripts before using them on a live hubot.", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/deploying.md", "blob_url": "https://github.com/hubotio/hubot/blob/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/deploying.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying.md?ref=1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb", "filename": "docs/deploying.md", "sha": "7f6bb686852dcad7c0cca95d8e638f4ab27302c2", "additions": 4, "patch": "@@ -1,4 +1,7 @@\n-# Deploying Hubot\n+---\n+permalink: /docs/deploying/index.html\n+layout: docs\n+---\n \n - [Heroku](deploying/heroku.html)\n - [Unix](deploying/unix.html)", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb", "filename": "docs/deploying/heroku.md", "sha": "36056f37be032fa4a31551dda59fea7ab9a208d1", "additions": 4, "patch": "@@ -1,4 +1,7 @@\n-# Deploying Hubot to Heroku\n+---\n+permalink: /docs/deploying/heroku/index.html\n+layout: docs\n+---\n \n If you've been following along with [Getting Started](../README.md), it's time to deploy so you can use it beyond just your local machine.\n [Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/deploying/unix.md", "blob_url": "https://github.com/hubotio/hubot/blob/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/deploying/unix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/unix.md?ref=1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb", "filename": "docs/deploying/unix.md", "sha": "b7be6ddb6ca0a98abb8da5158a49111bde2443d0", "additions": 4, "patch": "@@ -1,4 +1,7 @@\n-# Deploying Hubot to UNIX\n+---\n+permalink: /docs/deploying/unix/index.html\n+layout: docs\n+---\n \n Because there are so many variations of Linux, and more generally UNIX, it's\n difficult for the hubot team to have canonical documentation for installing and", "changes": 5}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/deploying/windows.md", "blob_url": "https://github.com/hubotio/hubot/blob/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/deploying/windows.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/windows.md?ref=1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb", "filename": "docs/deploying/windows.md", "sha": "9d2659ce22624bd79f6b629e219aed1d19f1ee5c", "additions": 5, "patch": "@@ -1,4 +1,7 @@\n-# Deploying Hubot to Windows\n+---\n+permalink: /docs/deploying/windows/index.html\n+layout: docs\n+---\n \n Hasn't been fully tested - YMMV\n \n@@ -32,4 +35,4 @@ You can run this command from your git checkout on the server, but there are som\n \n ## Expanding the documentation\n \n-Not yet fleshed out. [Help contribute by submitting a pull request, please?](https://github.com/github/hubot/pull/new/master)\n\\ No newline at end of file\n+Not yet fleshed out. [Help contribute by submitting a pull request, please?](https://github.com/github/hubot/pull/new/master)", "changes": 7}, {"status": "renamed", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/index.md", "previous_filename": "docs/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb", "filename": "docs/index.md", "sha": "88e02e858b2a2b2d9100dda09663a712ac75e051", "additions": 5, "patch": "@@ -1,4 +1,8 @@\n-# Hubot\n+---\n+title: Hubot\n+permalink: /docs/index.html\n+layout: docs\n+---\n \n ## Getting Started With Hubot\n ", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb", "filename": "docs/patterns.md", "sha": "aebbefd7e4c5d235dfa1407882e428c07f5fd1aa", "additions": 4, "patch": "@@ -1,4 +1,7 @@\n-# Patterns\n+---\n+permalink: /docs/patterns/index.html\n+layout: docs\n+---\n \n Shared patterns for dealing with common Hubot scenarios.\n ", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=1d2d3a241ca300bc3511d0ca0a29b6fc8cc4dedb", "filename": "docs/scripting.md", "sha": "5d006031bfd6ebbc58d8859c4b9b5120f6f7ed3f", "additions": 4, "patch": "@@ -1,4 +1,7 @@\n-# Scripting\n+---\n+permalink: /docs/scripting/index.html\n+layout: docs\n+---\n \n Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend.\n ", "changes": 5}], "882": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=79a57d0b9213eaea776eb8243ce4feb744171ee0", "filename": "docs/adapters.md", "sha": "157ff406bf46523e86305c5691240597ba085c50", "additions": 2, "patch": "@@ -9,8 +9,8 @@ Adapters are the interface to the service you want your hubot to run on.\n \n Hubot includes two official adapters:\n \n-* [Shell](adapters/shell.md), i.e. for use with development\n-* [Campfire](adapters/campfire.md)\n+* [Shell](/docs/adapters/shell/), i.e. for use with development\n+* [Campfire](/docs/adapters/campfire/)\n \n ## Third-party Adapters\n ", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/adapters/campfire.md", "blob_url": "https://github.com/hubotio/hubot/blob/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/adapters/campfire.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/campfire.md?ref=79a57d0b9213eaea776eb8243ce4feb744171ee0", "filename": "docs/adapters/campfire.md", "sha": "07ae56e6b759c6d23db8bd4544e6aa0efb6f2a3d", "additions": 1, "patch": "@@ -16,7 +16,7 @@ Next, you will need to create a user on your Campfire account for your Hubot,\n then give it access so it can join to your rooms. You will need to create a room\n if you haven't already.\n \n-Hubot defaults to using its [shell](shell.md), so to use Campfire instead, you\n+Hubot defaults to using its [shell](/docs/adapters/shell/), so to use Campfire instead, you\n can run hubot with `-a campfire`:\n \n     % bin/hubot -a campfire", "changes": 2}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/deploying.md", "blob_url": "https://github.com/hubotio/hubot/blob/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/deploying.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying.md?ref=79a57d0b9213eaea776eb8243ce4feb744171ee0", "filename": "docs/deploying.md", "sha": "d72614fca2d68731c3c50681851e15727b8e877f", "additions": 3, "patch": "@@ -3,6 +3,6 @@ permalink: /docs/deploying/index.html\n layout: docs\n ---\n \n-- [Heroku](deploying/heroku.html)\n-- [Unix](deploying/unix.html)\n-- [Windows](deploying/windows.html)\n+- [Heroku](/docs/deploying/heroku/)\n+- [Unix](/docs/deploying/unix/)\n+- [Windows](/docs/deploying/windows/)", "changes": 6}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=79a57d0b9213eaea776eb8243ce4feb744171ee0", "filename": "docs/deploying/heroku.md", "sha": "0ab9ea07725cd956f20c510718389bda1a7b679b", "additions": 2, "patch": "@@ -32,7 +32,7 @@ Then create a Heroku application:\n \n Before you deploy the application, you'll need to configure some environment\n variables for hubot to use. The specific variables you'll need depends on which\n-[adapter](../adapters.md) and scripts you are using. For Campfire, with no other\n+[adapter](/docs/adapters/) and scripts you are using. For Campfire, with no other\n scripts, you'd need to set the following environment variables:\n \n     % heroku config:set HUBOT_CAMPFIRE_ACCOUNT=yourcampfireaccount\n@@ -42,7 +42,7 @@ scripts, you'd need to set the following environment variables:\n In addition, there is one special environment variable for Heroku. The default hubot\n [Procfile](https://devcenter.heroku.com/articles/procfile) marks the process as\n a 'web' process type, in order to support serving http requests (more on that\n-in the [scripting docs](../scripting.md)). The downside of this is that dynos\n+in the [scripting docs](/docs/scripting/)). The downside of this is that dynos\n will [idle after an hour of inactivity](https://devcenter.heroku.com/articles/dynos#dyno-idling).\n That means your hubot would leave after an hour of idle web traffic, and only rejoin when it does get traffic. This is extremely\n inconvenient since most interaction is done through chat, and hubot has to be online and in the room to respond to messages. To get around this,", "changes": 4}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=79a57d0b9213eaea776eb8243ce4feb744171ee0", "filename": "docs/index.md", "sha": "4a521f2d8fcbcbdc72d132fa24afbe05b93bad0c", "additions": 7, "patch": "@@ -23,7 +23,7 @@ we wanted to make a bot called myhubot:\n     % yo hubot\n \n At this point, you'll be asked a few questions about who is creating the bot,\n-and which [adapter](adapters.md) you'll be using. Adapters are hubot's way of\n+and which [adapter](/docs/adapters/) you'll be using. Adapters are hubot's way of\n integrating with different chat providers.\n \n If you are using git, the generated directory includes a .gitignore, so you can\n@@ -54,7 +54,7 @@ Hubot needs Redis to persist data, so before you can start hubot on your own com\n     % bin/hubot\n     Hubot>\n \n-This starts hubot using the [shell adapter](adapters/shell.md), which\n+This starts hubot using the [shell adapter](/docs/adapters/shell/), which\n is mostly useful for development. Make note of  `Hubot>`; this is the name your hubot will\n `respond` to with commands. For example, to list available commands:\n \n@@ -122,18 +122,18 @@ name as a double quoted string to the `external-scripts.json` file in this repo.\n \n ## Adapters\n \n-Hubot uses the adapter pattern to support multiple chat-backends. Read available adapters in [docs/adapters.md](adapters.md), along with how to configure them.\n+Hubot uses the adapter pattern to support multiple chat-backends. Here is a [list of available adaptesr](/docs/adapters/), along with details on how to configure them.\n \n ## Deploying\n \n You can deploy hubot to Heroku, which is the officially supported method.\n Additionally you are able to deploy hubot to a UNIX-like system or Windows.\n Please note the support for deploying to Windows isn't officially supported.\n \n-* [Deploying Hubot onto Heroku](deploying/heroku.md)\n-* [Deploying Hubot onto UNIX](deploying/unix.md)\n-* [Deploying Hubot onto Windows](deploying/windows.md)\n+* [Deploying Hubot onto Heroku](/docs/deploying/heroku/)\n+* [Deploying Hubot onto UNIX](/docs/deploying/unix/)\n+* [Deploying Hubot onto Windows](/docs/deploying/windows/)\n \n ## Patterns\n \n-Using custom scripts, you can quickly customize Hubot to be the most life embettering robot he or she can be. Read [docs/patterns.md](patterns.md) for some nifty tricks that may come in handy as you teach your hubot new skills.\n+Using custom scripts, you can quickly customize Hubot to be the most life embettering robot he or she can be. Read [docs/patterns.md](/docs/patterns/) for some nifty tricks that may come in handy as you teach your hubot new skills.", "changes": 14}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=79a57d0b9213eaea776eb8243ce4feb744171ee0", "filename": "docs/patterns.md", "sha": "b5147f0c23efb2dfe8a0bb916179631da8760269", "additions": 1, "patch": "@@ -14,7 +14,7 @@ When you rename Hubot, he will no longer respond to his former name. In order to\n \n Setting this up is very easy:\n \n-1. Create a [bundled script](scripting.md) in the `scripts/` directory of your Hubot instance called `rename-hubot.coffee`\n+1. Create a [bundled script](/docs/scripting/) in the `scripts/` directory of your Hubot instance called `rename-hubot.coffee`\n 2. Add the following code, modified for your needs:\n \n ```coffeescript", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/79a57d0b9213eaea776eb8243ce4feb744171ee0/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=79a57d0b9213eaea776eb8243ce4feb744171ee0", "filename": "docs/scripting.md", "sha": "4bd93f0e558a2991ff77b5b1fe060fe3dddce775", "additions": 1, "patch": "@@ -105,7 +105,7 @@ It wouldn't be called for:\n \n ## Send & reply\n \n-The `msg` parameter is, despite the name, an instance of [Response](../src/response.coffee). With it, you can `send` a message back to the room the `msg` came from, `emote` a message to a room (If the given adapter supports it), or `reply` to the person that sent the message. For example:\n+The `msg` parameter is, despite the name, an instance of `Response`. With it, you can `send` a message back to the room the `msg` came from, `emote` a message to a room (If the given adapter supports it), or `reply` to the person that sent the message. For example:\n \n ```coffeescript\n module.exports = (robot) ->", "changes": 2}], "883": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/42b492c68d8c7346dcebb184846a3b6fd3208496/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/42b492c68d8c7346dcebb184846a3b6fd3208496/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=42b492c68d8c7346dcebb184846a3b6fd3208496", "filename": "docs/adapters.md", "sha": "8c4a64df8e61c0df27938748db07df9935c73db1", "additions": 2, "patch": "@@ -44,8 +44,6 @@ to have yours added to the list:\n * [Fleep](https://github.com/anroots/hubot-fleep)\n * [Let's Chat](https://github.com/sdelements/hubot-lets-chat)\n \n-## Writing Your Own adapter\n+## Writing Your Own Adapter\n \n-The best place to start is `src/adapter.coffee`, and inheriting from `Adapter`.\n-There is not as much documentation as could exist (yet!), so it is worth\n-reviewing existing adapters as well as how hubot internally uses an adapter.\n+Interested in adding your own adapter? Check out our documentation for [developing adapters](/docs/adapters/development/)", "changes": 6}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/42b492c68d8c7346dcebb184846a3b6fd3208496/docs/adapters/development.md", "blob_url": "https://github.com/hubotio/hubot/blob/42b492c68d8c7346dcebb184846a3b6fd3208496/docs/adapters/development.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/development.md?ref=42b492c68d8c7346dcebb184846a3b6fd3208496", "filename": "docs/adapters/development.md", "sha": "15fdf57f8ad13d2483a9e64ed21c76335f429e5d", "additions": 85, "patch": "@@ -0,0 +1,85 @@\n+---\n+layout: docs\n+permalink: /docs/adapters/development/index.html\n+---\n+\n+# Adapter Basics\n+\n+All adapters inherit from the Adapter class in the `src/adapter.coffee` file.  There are certain methods that you will want to override.  Here is a basic stub of what an extended Adapter class would look like:\n+\n+```coffee\n+class Sample extends Adapter\n+\n+  constructor: ->\n+    @robot.logger.info \"Constructor\"\n+    super\n+    \n+\n+  send: (envelope, strings...) ->\n+    @robot.logger.info \"Send\"\n+\n+  reply: (envelope, strings...) ->\n+    @robot.logger.info \"Reply\"\n+\n+  run: ->\n+    @robot.logger.info \"Run\"\n+    @emit \"connected\"\n+    user = new User 1001, name: 'Sample User'\n+    message = new TextMessage user, 'Some Sample Message', 'MSG-001'\n+    @robot.receive message\n+\n+\n+exports.use = (robot) ->\n+  new Sample robot\n+```\n+\n+# Setting Up Your Development Environment\n+\n+1. Create a new folder for your adapter `hubot-sample`\n+  - `mkdir hubot-sample`\n+2. Change your working directory to `hubot-sample`\n+  - `cd hubot-sample`\n+3. Run `npm init` to create your package.json\n+  - make sure the entry point is `src/sample.coffee`\n+4. Add your `.gitignore` to include `node_modules`\n+5. Edit the `src/sample.coffee` file to include the above stub for your adapter\n+6. Edit the `package.json` to add a peer dependency on `hubot`\n+\n+  ```json\n+  \"dependencies\": {\n+  },\n+  \"peerDependencies\": {\n+    \"hubot\": \">=2.0\"\n+  },\n+  \"devDependencies\": {\n+    \"coffee-script\": \">=1.2.0\"\n+  }\n+  ```\n+  \n+7. Generate your Hubot using the `yo hubot` [command](https://hubot.github.com/docs/)\n+8. Change working directories to the `hubot` you created in step 7.\n+9. Now perform an `npm link` to add your adapter to `hubot`\n+  - `npm link ../hubot-sample`\n+10. Run `hubot -a sample`\n+\n+# Gotchas\n+\n+There is a an open issue in the node community around [npm linked peer dependencies not working](https://github.com/npm/npm/issues/5875).  To get this working for our project you will need to do some minor changes to your code.\n+\n+1. For the import in your `hubot-sample` adapter, add the following code\n+```coffee\n+try\n+  {Robot,Adapter,TextMessage,User} = require 'hubot'\n+catch\n+  prequire = require('parent-require')\n+  {Robot,Adapter,TextMessage,User} = prequire 'hubot'\n+  ```\n+2. In your `hubot-sample` folder, modify the `package.json` to include the following dependency so this custom import mechanism will work\n+```json\n+  \"dependencies\": {\n+    \"parent-require\": \"^1.0.0\"\n+  }\n+  ```\n+3. Now try running `hubot -a sample` again and see that the imports are properly loaded.\n+4. Once this is working properly, you can build out the functionality of your adapter as you see fit.  Take a look at some of the other adapters to get some ideas for your implementation.\n+  - Once packaged and deployed via `npm`, you won't need the dependency in `hubot` anymore since the peer dependency should work as an official module.", "changes": 85}], "884": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/eaae59a34605dbd568055b6cc78ebfc23cd9890e/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/eaae59a34605dbd568055b6cc78ebfc23cd9890e/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=eaae59a34605dbd568055b6cc78ebfc23cd9890e", "filename": "docs/patterns.md", "sha": "a0190a0b1e14ff0e037a17121e63da78f72f9923", "additions": 13, "patch": "@@ -64,3 +64,16 @@ module.exports = (robot) ->\n     return\n \n ```\n+\n+## Forwarding all HTTP requests through a proxy\n+\n+In many corporate environments, a web proxy is required to access the Internet and/or protected resources. For one-off control, use can specify an [Agent](https://nodejs.org/api/http.html) to use with `robot.http`. However, this would require modifying every script your robot uses to point at the proxy. Instead, you can specify the agent at the global level and have all HTTP requests use the agent by default.\n+\n+Due to the way node.js handles HTTP and HTTPS requests, you need to specify a different Agent for each protocol. ScopedHTTPClient will then automatically choose the right ProxyAgent for each request.\n+\n+```coffeescript\n+proxy = require 'proxy-agent'\n+module.export = (robot) ->\n+  robot.globalHttpOptions.httpAgent  = proxy('http://my-proxy-server.internal', false)\n+  robot.globalHttpOptions.httpsAgent = proxy('http://my-proxy-server.internal', true)\n+```", "changes": 13}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/eaae59a34605dbd568055b6cc78ebfc23cd9890e/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/eaae59a34605dbd568055b6cc78ebfc23cd9890e/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=eaae59a34605dbd568055b6cc78ebfc23cd9890e", "filename": "package.json", "sha": "ec85fba3d3f6e5809591ad89f04eb8d3d82b49d1", "additions": 1, "patch": "@@ -22,7 +22,7 @@\n     \"express\": \"3.18.1\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",\n-    \"scoped-http-client\": \"0.10.3\"\n+    \"scoped-http-client\": \"0.11.0\"\n   },\n   \"devDependencies\": {\n     \"hubot-mock-adapter\": \"^1.0.0\",", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/eaae59a34605dbd568055b6cc78ebfc23cd9890e/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/eaae59a34605dbd568055b6cc78ebfc23cd9890e/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=eaae59a34605dbd568055b6cc78ebfc23cd9890e", "filename": "src/robot.coffee", "sha": "2eb3837a99d107e0a8c3dba4f29bfd22c0c405d9", "additions": 11, "patch": "@@ -49,6 +49,7 @@ class Robot\n     @listeners = []\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n     @pingIntervalId = null\n+    @globalHttpOptions = {}\n \n     @parseVersion()\n     if httpd\n@@ -500,7 +501,16 @@ class Robot\n   #\n   # Returns a ScopedClient instance.\n   http: (url, options) ->\n-    HttpClient.create(url, options)\n+    HttpClient.create(url, @extend({}, @globalHttpOptions, options))\n       .header('User-Agent', \"Hubot/#{@version}\")\n \n+  # Private: Extend obj with objects passed as additional args.\n+  #\n+  # Returns the original object with updated changes.\n+  extend: (obj, sources...) ->\n+    for source in sources\n+      obj[key] = value for own key, value of source\n+    obj\n+\n+\n module.exports = Robot", "changes": 12}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/eaae59a34605dbd568055b6cc78ebfc23cd9890e/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/eaae59a34605dbd568055b6cc78ebfc23cd9890e/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=eaae59a34605dbd568055b6cc78ebfc23cd9890e", "filename": "test/robot_test.coffee", "sha": "3f270ff9570a954d6205ad4b1c7ef6106c3f1bb6", "additions": 34, "patch": "@@ -12,6 +12,8 @@ Robot = require '../src/robot.coffee'\n { CatchAllMessage, EnterMessage, LeaveMessage, TextMessage, TopicMessage } = require '../src/message'\n Adapter = require '../src/adapter'\n \n+ScopedHttpClient = require 'scoped-http-client'\n+\n # Preload the Hubot mock adapter but substitute in the latest version of Adapter\n mockery.enable()\n mockery.registerAllowable 'hubot-mock-adapter'\n@@ -40,6 +42,38 @@ describe 'Robot', ->\n    @robot.shutdown()\n \n   describe 'Unit Tests', ->\n+    describe '#http', ->\n+      beforeEach ->\n+        url = 'http://localhost'\n+        @httpClient = @robot.http(url)\n+\n+      it 'creates a new ScopedHttpClient', ->\n+        # 'instanceOf' check doesn't work here due to the design of\n+        # ScopedHttpClient\n+        expect(@httpClient).to.have.property('get')\n+        expect(@httpClient).to.have.property('post')\n+\n+      it 'passes options through to the ScopedHttpClient', ->\n+        agent = {}\n+        httpClient = @robot.http('http://localhost', agent: agent)\n+        expect(httpClient.options.agent).to.equal(agent)\n+\n+      it 'sets a sane user agent', ->\n+        expect(@httpClient.options.headers['User-Agent']).to.contain('Hubot')\n+\n+      it 'merges in any global http options', ->\n+        agent = {}\n+        @robot.globalHttpOptions = {agent: agent}\n+        httpClient = @robot.http('http://localhost')\n+        expect(httpClient.options.agent).to.equal(agent)\n+\n+      it 'local options override global http options', ->\n+        agentA = {}\n+        agentB = {}\n+        @robot.globalHttpOptions = {agent: agentA}\n+        httpClient = @robot.http('http://localhost', agent: agentB)\n+        expect(httpClient.options.agent).to.equal(agentB)\n+\n     describe '#hear', ->\n       it 'registers a new listener', ->\n         expect(@robot.listeners).to.have.length(0)", "changes": 34}], "885": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/7fd99fca564b1870ffe0e5d36380ea913c22081c/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/7fd99fca564b1870ffe0e5d36380ea913c22081c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=7fd99fca564b1870ffe0e5d36380ea913c22081c", "filename": "CHANGELOG.md", "sha": "d16456f99b6f8c57f40995cdde1ef06867a2aef3", "additions": 5, "patch": "@@ -1,3 +1,8 @@\n+v2.11.3\n+=======\n+\n+* Fix issues around shell adapter throwing errors when there isn't a .hubot_history file\n+\n v2.11.2\n =======\n ", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/7fd99fca564b1870ffe0e5d36380ea913c22081c/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/7fd99fca564b1870ffe0e5d36380ea913c22081c/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=7fd99fca564b1870ffe0e5d36380ea913c22081c", "filename": "package.json", "sha": "a675c42598d29fce6f6a42d1385301a401b47b82", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.11.2\",\n+  \"version\": \"2.11.3\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "886": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/93fa5b232443744964367f1d926babe025062752/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/93fa5b232443744964367f1d926babe025062752/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=93fa5b232443744964367f1d926babe025062752", "filename": "src/adapters/shell.coffee", "sha": "a85335fec4d452aa794d5b817ac19e3e0c262f90", "additions": 1, "patch": "@@ -89,6 +89,7 @@ class Shell extends Adapter\n         items = []\n         rl = readline.createInterface(input: instream, output: outstream, terminal: false)\n         rl.on 'line', (line) ->\n+          line = line.trim()\n           if line.length > 0 \n             items.push(line)\n         rl.on 'close', () ->", "changes": 1}], "887": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/39253895de7e661668d358a63c3d366ae4c5c42a/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/39253895de7e661668d358a63c3d366ae4c5c42a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=39253895de7e661668d358a63c3d366ae4c5c42a", "filename": "CHANGELOG.md", "sha": "2079d270b018b3b70d6a45803e982c8d303ed05d", "additions": 5, "patch": "@@ -1,6 +1,11 @@\n v2.11.3\n =======\n \n+* Fix shell adapter parsing history on node 0.8 (ie don't include newlines)\n+\n+v2.11.3\n+=======\n+\n * Fix issues around shell adapter throwing errors when there isn't a .hubot_history file\n \n v2.11.2", "changes": 5}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/39253895de7e661668d358a63c3d366ae4c5c42a/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/39253895de7e661668d358a63c3d366ae4c5c42a/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=39253895de7e661668d358a63c3d366ae4c5c42a", "filename": "package.json", "sha": "776c072e2118d28eaa64fe8b76ec75da6a98eeb9", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.11.3\",\n+  \"version\": \"2.11.4\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "888": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/2e948ab7fac2480c42c5171fcc0aad3671e91fcd/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/2e948ab7fac2480c42c5171fcc0aad3671e91fcd/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=2e948ab7fac2480c42c5171fcc0aad3671e91fcd", "filename": "docs/patterns.md", "sha": "7bc030ac779225e4789d42017d84b214333879e4", "additions": 4, "patch": "@@ -25,10 +25,10 @@ Setting this up is very easy:\n #   None\n #\n module.exports = (robot) ->\n-  robot.hear /^hubot:? (.+)/i, (msg) ->\n+  robot.hear /^hubot:? (.+)/i, (res) ->\n     response = \"Sorry, I'm a diva and only respond to #{robot.name}\"\n     response += \" or #{robot.alias}\" if robot.alias\n-    msg.reply response\n+    res.reply response\n     return\n \n ```\n@@ -59,8 +59,8 @@ Here is the setup:\n #   None\n #\n module.exports = (robot) ->\n-  robot.respond /help\\s*(.*)?$/i, (msg) ->\n-    msg.reply \"That means nothing to me anymore. Perhaps you meant `docs` instead?\"\n+  robot.respond /help\\s*(.*)?$/i, (res) ->\n+    res.reply \"That means nothing to me anymore. Perhaps you meant `docs` instead?\"\n     return\n \n ```", "changes": 8}, {"status": "modified", "deletions": 64, "raw_url": "https://github.com/hubotio/hubot/raw/2e948ab7fac2480c42c5171fcc0aad3671e91fcd/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/2e948ab7fac2480c42c5171fcc0aad3671e91fcd/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=2e948ab7fac2480c42c5171fcc0aad3671e91fcd", "filename": "docs/scripting.md", "sha": "eebc7e93863a9c8217239f226cbcbce4a3eea3b6", "additions": 64, "patch": "@@ -76,10 +76,10 @@ Since this is a chat bot, the most common interactions are based on messages. Hu\n \n ```coffeescript\n module.exports = (robot) ->\n-  robot.hear /badger/i, (msg) ->\n+  robot.hear /badger/i, (res) ->\n     # your code here\n \n-  robot.respond /open the pod bay doors/i, (msg) ->\n+  robot.respond /open the pod bay doors/i, (res) ->\n     # your code here\n ```\n \n@@ -105,18 +105,18 @@ It wouldn't be called for:\n \n ## Send & reply\n \n-The `msg` parameter is, despite the name, an instance of `Response`. With it, you can `send` a message back to the room the `msg` came from, `emote` a message to a room (If the given adapter supports it), or `reply` to the person that sent the message. For example:\n+The `res` parameter is an instance of `Response` (historically, this parameter was `msg` and you may see other scripts use it this way). With it, you can `send` a message back to the room the `res` came from, `emote` a message to a room (If the given adapter supports it), or `reply` to the person that sent the message. For example:\n \n ```coffeescript\n module.exports = (robot) ->\n-  robot.hear /badger/i, (msg) ->\n-    msg.send \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\"\n+  robot.hear /badger/i, (res) ->\n+    res.send \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\"\n \n-  robot.respond /open the pod bay doors/i, (msg) ->\n-    msg.reply \"I'm afraid I can't let you do that.\"\n+  robot.respond /open the pod bay doors/i, (res) ->\n+    res.reply \"I'm afraid I can't let you do that.\"\n \n-  robot.hear /I like pie/i, (msg) ->\n-    msg.emote \"makes a freshly baked pie\"\n+  robot.hear /I like pie/i, (res) ->\n+    res.emote \"makes a freshly baked pie\"\n ```\n \n The `robot.hear /badgers/` callback sends a message exactly as specified regardless of who said it, \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\".\n@@ -125,22 +125,22 @@ If a user Dave says \"HAL: open the pod bay doors\", `robot.respond /open the pod\n \n ## Capturing data\n \n-So far, our scripts have had static responses, which while amusing, are boring functionality-wise. `msg.match` has the result of `match`ing the incoming message against the regular expression. This is just a [JavaScript thing](http://www.w3schools.com/jsref/jsref_match.asp), which ends up being an array with index 0 being the full text matching the expression. If you include capture groups, those will be populated `msg.match`. For example, if we update a script like:\n+So far, our scripts have had static responses, which while amusing, are boring functionality-wise. `res.match` has the result of `match`ing the incoming message against the regular expression. This is just a [JavaScript thing](http://www.w3schools.com/jsref/jsref_match.asp), which ends up being an array with index 0 being the full text matching the expression. If you include capture groups, those will be populated `res.match`. For example, if we update a script like:\n \n ```coffeescript\n-  robot.respond /open the (.*) doors/i, (msg) ->\n+  robot.respond /open the (.*) doors/i, (res) ->\n     # your code here\n ```\n \n-If Dave says \"HAL: open the pod bay doors\", then `msg.match[0]` is \"open the pod bay doors\", and `msg.match[1]` is just \"pod bay\". Now we can start doing more dynamic things:\n+If Dave says \"HAL: open the pod bay doors\", then `res.match[0]` is \"open the pod bay doors\", and `res.match[1]` is just \"pod bay\". Now we can start doing more dynamic things:\n \n ```coffeescript\n-  robot.respond /open the (.*) doors/i, (msg) ->\n-    doorType = msg.match[1]\n+  robot.respond /open the (.*) doors/i, (res) ->\n+    doorType = res.match[1]\n     if doorType is \"pod bay\"\n-      msg.reply \"I'm afraid I can't let you do that.\"\n+      res.reply \"I'm afraid I can't let you do that.\"\n     else\n-      msg.reply \"Opening #{doorType} doors\"\n+      res.reply \"Opening #{doorType} doors\"\n ```\n \n ## Making HTTP calls\n@@ -172,7 +172,7 @@ A post looks like:\n   robot.http(\"https://midnight-train\")\n     .get() (err, res, body) ->\n       if err\n-        msg.send \"Encountered an error :( #{err}\"\n+        res.send \"Encountered an error :( #{err}\"\n         return\n       # your code here, knowing it was successful\n ```\n@@ -185,12 +185,12 @@ A post looks like:\n       # pretend there's error checking code here\n \n       if res.statusCode isnt 200\n-        msg.send \"Request didn't come back HTTP 200 :(\"\n+        res.send \"Request didn't come back HTTP 200 :(\"\n         return\n \n       rateLimitRemaining = parseInt res.getHeader('X-RateLimit-Limit') if res.getHeader('X-RateLimit-Limit')\n       if rateLimitRemaining and rateLimitRemaining < 1\n-        msg.send \"Rate Limit hit, stop believing for awhile\"\n+        res.send \"Rate Limit hit, stop believing for awhile\"\n \n       # rest of your code\n ```\n@@ -202,7 +202,7 @@ A post looks like:\n     .get() (err, res, body) ->\n       # error checking code here\n \n-      msg.send \"Got back #{body}\"\n+      res.send \"Got back #{body}\"\n ```\n \n ### JSON\n@@ -216,7 +216,7 @@ If you are talking to APIs, the easiest way is going to be JSON because it doesn\n       # error checking code here\n \n       data = JSON.parse(body)\n-      msg.send \"#{data.passenger} taking midnight train going #{data.destination}\"\n+      res.send \"#{data.passenger} taking midnight train going #{data.destination}\"\n ```\n \n It's possible to get non-JSON back, like if the API hit an error and it tries to render a normal HTML error instead of JSON. To be on the safe side, you should check the `Content-Type`, and catch any errors while parsing.\n@@ -228,14 +228,14 @@ It's possible to get non-JSON back, like if the API hit an error and it tries to\n       # err & response status checking code here\n \n       if response.getHeader('Content-Type') isnt 'application/json'\n-        msg.send \"Didn't get back JSON :(\"\n+        res.send \"Didn't get back JSON :(\"\n         return\n \n       data = null\n       try\n         data = JSON.parse(body)\n       catch error\n-       msg.send \"Ran into an error parsing JSON :(\"\n+       res.send \"Ran into an error parsing JSON :(\"\n        return\n \n       # your code here\n@@ -279,7 +279,7 @@ A common pattern is to hear or respond to commands, and send with a random funny\n ```coffeescript\n lulz = ['lol', 'rofl', 'lmao']\n \n-msg.send msg.random lulz\n+res.send res.random lulz\n ```\n \n ## Topic\n@@ -288,8 +288,8 @@ Hubot can react to a room's topic changing, assuming that the adapter supports i\n \n ```coffeescript\n module.exports = (robot) ->\n-  robot.topic (msg) ->\n-    msg.send \"#{msg.message.text}? That's a Paddlin'\"\n+  robot.topic (res) ->\n+    res.send \"#{res.message.text}? That's a Paddlin'\"\n ```\n \n ## Entering and leaving\n@@ -301,10 +301,10 @@ enterReplies = ['Hi', 'Target Acquired', 'Firing', 'Hello friend.', 'Gotcha', 'I\n leaveReplies = ['Are you still there?', 'Target lost', 'Searching']\n \n module.exports = (robot) ->\n-  robot.enter (msg) ->\n-    msg.send msg.random enterReplies\n-  robot.leave (msg) ->\n-    msg.send msg.random leaveReplies\n+  robot.enter (res) ->\n+    res.send res.random enterReplies\n+  robot.leave (res) ->\n+    res.send res.random leaveReplies\n ```\n \n ## Environment variables\n@@ -315,8 +315,8 @@ Hubot can access the environment he's running in, just like any other node progr\n answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n \n module.exports = (robot) ->\n-  robot.respond /what is the answer to the ultimate question of life/, (msg) ->\n-    msg.send \"#{answer}, but what is the question?\"\n+  robot.respond /what is the answer to the ultimate question of life/, (res) ->\n+    res.send \"#{answer}, but what is the question?\"\n ```\n \n Take care to make sure the script can load if it's not defined, give the Hubot developer notes on how to define it, or default to something. It's up to the script writer to decide if that should be a fatal error (e.g. hubot exits), or not (make any script that relies on it to say it needs to be configured. When possible and when it makes sense to, having a script work without any other configuration is preferred.\n@@ -327,8 +327,8 @@ Here we can default to something:\n answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING or 42\n \n module.exports = (robot) ->\n-  robot.respond /what is the answer to the ultimate question of life/, (msg) ->\n-    msg.send \"#{answer}, but what is the question?\"\n+  robot.respond /what is the answer to the ultimate question of life/, (res) ->\n+    res.send \"#{answer}, but what is the question?\"\n ```\n \n Here we exit if it's not defined:\n@@ -340,8 +340,8 @@ unless answer?\n   process.exit(1)\n \n module.exports = (robot) ->\n-  robot.respond /what is the answer to the ultimate question of life/, (msg) ->\n-    msg.send \"#{answer}, but what is the question?\"\n+  robot.respond /what is the answer to the ultimate question of life/, (res) ->\n+    res.send \"#{answer}, but what is the question?\"\n ```\n \n And lastly, we update the `robot.respond` to check it:\n@@ -350,11 +350,11 @@ And lastly, we update the `robot.respond` to check it:\n answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n \n module.exports = (robot) ->\n-  robot.respond /what is the answer to the ultimate question of life/, (msg) ->\n+  robot.respond /what is the answer to the ultimate question of life/, (res) ->\n     unless answer?\n-      msg.send \"Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again\"\n+      res.send \"Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again\"\n       return\n-    msg.send \"#{answer}, but what is the question?\"\n+    res.send \"#{answer}, but what is the question?\"\n ```\n \n ## Dependencies\n@@ -377,20 +377,20 @@ Hubot can run code later using JavaScript's built-in [setTimeout](http://nodejs.\n \n ```coffeescript\n module.exports = (robot) ->\n-  robot.respond /you are a little slow/, (msg) ->\n+  robot.respond /you are a little slow/, (res) ->\n     setTimeout () ->\n-      msg.send \"Who you calling 'slow'?\"\n+      res.send \"Who you calling 'slow'?\"\n     , 60 * 1000\n ```\n \n Additionally, Hubot can run code on an interval using [setInterval](http://nodejs.org/api/timers.html#timers_setinterval_callback_delay_arg). It takes a callback method, and the amount of time to wait between calls:\n \n ```coffeescript\n module.exports = (robot) ->\n-  robot.respond /annoy me/, (msg) ->\n-    msg.send \"Hey, want to hear the most annoying sound in the world?\"\n+  robot.respond /annoy me/, (res) ->\n+    res.send \"Hey, want to hear the most annoying sound in the world?\"\n     setInterval () ->\n-      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+      res.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n     , 1000\n ```\n \n@@ -400,23 +400,23 @@ Both `setTimeout` and `setInterval` return the ID of the timeout or interval it\n module.exports = (robot) ->\n   annoyIntervalId = null\n \n-  robot.respond /annoy me/, (msg) ->\n+  robot.respond /annoy me/, (res) ->\n     if annoyIntervalId\n-      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+      res.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n       return\n \n-    msg.send \"Hey, want to hear the most annoying sound in the world?\"\n+    res.send \"Hey, want to hear the most annoying sound in the world?\"\n     annoyIntervalId = setInterval () ->\n-      msg.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+      res.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n     , 1000\n \n-  robot.respond /unannoy me/, (msg) ->\n+  robot.respond /unannoy me/, (res) ->\n     if annoyIntervalId\n-      msg.send \"GUYS, GUYS, GUYS!\"\n+      res.send \"GUYS, GUYS, GUYS!\"\n       clearInterval(annoyIntervalId) ->\n       annoyIntervalId = null\n     else\n-      msg.send \"Not annoying you right now, am I?\"\n+      res.send \"Not annoying you right now, am I?\"\n ```\n \n ## HTTP Listener\n@@ -474,11 +474,11 @@ No code is perfect, and errors and exceptions are to be expected. Previously, an\n ```coffeescript\n # src/scripts/does-not-compute.coffee\n module.exports = (robot) ->\n-  robot.error (err, msg) ->\n+  robot.error (err, res) ->\n     robot.logger.error \"DOES NOT COMPUTE\"\n \n-    if msg?\n-      msg.reply \"DOES NOT COMPUTE\"\n+    if res?\n+      res.reply \"DOES NOT COMPUTE\"\n ```\n \n You can do anything you want here, but you will want to take extra precaution of rescuing and logging errors, particularly with asynchronous code. Otherwise, you might find yourself with recursive errors and not know what is going on.\n@@ -499,12 +499,12 @@ Using previous examples:\n     # rest of the code here\n \n \n-  robot.hear /midnight train/i, (msg)\n+  robot.hear /midnight train/i, (res)\n     robot.http(\"https://midnight-train\")\n       .get() (err, res, body) ->\n         if err\n-          msg.reply \"Had problems taking the midnight train\"\n-          robot.emit 'error', err, msg\n+          res.reply \"Had problems taking the midnight train\"\n+          robot.emit 'error', err, res\n           return\n         # rest of code here\n ```\n@@ -555,18 +555,18 @@ Hubot has an in-memory key-value store exposed as `robot.brain` that can be\n used to store and retrieve data by scripts.\n \n ```coffeescript\n-robot.respond /have a soda/i, (msg) ->\n+robot.respond /have a soda/i, (res) ->\n   # Get number of sodas had (coerced to a number).\n   sodasHad = robot.brain.get('totalSodas') * 1 or 0\n \n   if sodasHad > 4\n-    msg.reply \"I'm too fizzy..\"\n+    res.reply \"I'm too fizzy..\"\n \n   else\n-    msg.reply 'Sure!'\n+    res.reply 'Sure!'\n \n     robot.brain.set 'totalSodas', sodasHad+1\n-robot.respond /sleep it off/i, (msg) ->\n+robot.respond /sleep it off/i, (res) ->\n   robot.brain.set 'totalSodas', 0\n   robot.respond 'zzzzz'\n ```\n@@ -576,15 +576,15 @@ If the script needs to lookup user data, there are methods on `robot.brain` for\n ```coffeescript\n module.exports = (robot) ->\n \n-  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (msg) ->\n-    name = msg.match[1].trim()\n+  robot.respond /who is @?([\\w .\\-]+)\\?*$/i, (res) ->\n+    name = res.match[1].trim()\n \n     users = robot.brain.usersForFuzzyName(name)\n     if users.length is 1\n       user = users[0]\n       # Do something interesting here..\n \n-      msg.send \"#{name} is user - #{user}\"\n+      res.send \"#{name} is user - #{user}\"\n ```\n \n ## Script Load Order", "changes": 128}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/2e948ab7fac2480c42c5171fcc0aad3671e91fcd/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2e948ab7fac2480c42c5171fcc0aad3671e91fcd/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=2e948ab7fac2480c42c5171fcc0aad3671e91fcd", "filename": "src/robot.coffee", "sha": "af78d764472dce8b028320be985861dbe77d526f", "additions": 3, "patch": "@@ -161,14 +161,14 @@ class Robot\n   # user emitted error events.\n   #\n   # err - An Error object.\n-  # msg - An optional Response object that generated the error\n+  # res - An optional Response object that generated the error\n   #\n   # Returns nothing.\n-  invokeErrorHandlers: (err, msg) ->\n+  invokeErrorHandlers: (err, res) ->\n     @logger.error err.stack\n     for errorHandler in @errorHandlers\n      try\n-       errorHandler(err, msg)\n+       errorHandler(err, res)\n      catch errErr\n        @logger.error \"while invoking error handler: #{errErr}\\n#{errErr.stack}\"\n ", "changes": 6}], "889": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b462008e72e2c2d9afc173feca596928f34dad06/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/b462008e72e2c2d9afc173feca596928f34dad06/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=b462008e72e2c2d9afc173feca596928f34dad06", "filename": "docs/index.md", "sha": "23ff559a54398823b46d7c9ee1de22665f844acd", "additions": 1, "patch": "@@ -122,7 +122,7 @@ name as a double quoted string to the `external-scripts.json` file in this repo.\n \n ## Adapters\n \n-Hubot uses the adapter pattern to support multiple chat-backends. Here is a [list of available adaptesr](/docs/adapters/), along with details on how to configure them.\n+Hubot uses the adapter pattern to support multiple chat-backends. Here is a [list of available adapters](/docs/adapters/), along with details on how to configure them.\n \n ## Deploying\n ", "changes": 2}], "890": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/65167718b4e194ffb6fbf2ad867fb758fae93170/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/65167718b4e194ffb6fbf2ad867fb758fae93170/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=65167718b4e194ffb6fbf2ad867fb758fae93170", "filename": "docs/index.md", "sha": "d2b6ee725423e07b83c7b9a98dfc18c4b320947f", "additions": 1, "patch": "@@ -54,7 +54,7 @@ Hubot needs Redis to persist data, so before you can start hubot on your own com\n     % bin/hubot\n     Hubot>\n \n-This starts hubot using the [shell adapter](/docs/adapters/shell/), which\n+This starts hubot using the [shell adapter](/docs/adapters/shell.md), which\n is mostly useful for development. Make note of  `Hubot>`; this is the name your hubot will\n `respond` to with commands. For example, to list available commands:\n ", "changes": 2}], "893": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/226f1e170b87a8e2cea3e7f043f6f3e533d03669/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/226f1e170b87a8e2cea3e7f043f6f3e533d03669/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=226f1e170b87a8e2cea3e7f043f6f3e533d03669", "filename": "docs/adapters.md", "sha": "69f501ac1ea201d8baec188797a7380c06a0de3c", "additions": 2, "patch": "@@ -9,8 +9,8 @@ Adapters are the interface to the service you want your hubot to run on.\n \n Hubot includes two official adapters:\n \n-* [Shell](/docs/adapters/shell/), i.e. for use with development\n-* [Campfire](/docs/adapters/campfire/)\n+* [Shell](/docs/adapters/shell.md), i.e. for use with development\n+* [Campfire](/docs/adapters/campfire.md)\n \n ## Third-party Adapters\n ", "changes": 4}], "897": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/54adacf3122f248cf0febced388a760d9478e38b/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/54adacf3122f248cf0febced388a760d9478e38b/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=54adacf3122f248cf0febced388a760d9478e38b", "filename": "docs/scripting.md", "sha": "268b43fefcb2665483e3375974b30e08be60098d", "additions": 8, "patch": "@@ -430,14 +430,21 @@ The most common use of this is for providing HTTP end points for services with w\n module.exports = (robot) ->\n   robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n     room   = req.params.room\n-    data   = JSON.parse req.body.payload\n+    data   = req.body.payload\n     secret = data.secret\n \n     robot.messageRoom room, \"I have a secret: #{secret}\"\n \n     res.send 'OK'\n ```\n \n+Test it with curl; also see section on [error handling](#error-handling) below.\n+```shell\n+curl -X POST -H \"Content-Type: application/json\" -d '{\"payload\": \n+    {\"secret\":\"C-TECH Astronomy\"}\n+}' http://127.0.0.1:8080/hubot/chatsecrets/general\n+```\n+\n All endpoint URLs should start with the literal string `/hubot` (regardless of what your robot's name is). This consistency makes it easier to set up webhooks (copy-pasteable URL) and guarantees that URLs are valid (not all bot names are URL-safe).\n \n ## Events", "changes": 9}], "898": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4f6ed712301a9fbc9eead702ca60c0e965cc60fd/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/4f6ed712301a9fbc9eead702ca60c0e965cc60fd/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=4f6ed712301a9fbc9eead702ca60c0e965cc60fd", "filename": "docs/scripting.md", "sha": "da283666196386f4895936625f71fcdfdf6eefd2", "additions": 10, "patch": "@@ -430,14 +430,23 @@ The most common use of this is for providing HTTP end points for services with w\n module.exports = (robot) ->\n   robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n     room   = req.params.room\n-    data   = JSON.parse req.body.payload\n+    data   = if req.body.payload? then JSON.parse req.body.payload else req.body\n     secret = data.secret\n \n     robot.messageRoom room, \"I have a secret: #{secret}\"\n \n     res.send 'OK'\n ```\n \n+Test it with curl; also see section on [error handling](#error-handling) below.\n+```shell\n+// raw json, must specify Content-Type: application/json\n+curl -X POST -H \"Content-Type: application/json\" -d '{\"secret\":\"C-TECH Astronomy\"}' http://127.0.0.1:8080/hubot/chatsecrets/general\n+\n+// defaults Content-Type: application/x-www-form-urlencoded, must st payload=...\n+curl -d 'payload=%7B%22secret%22%3A%22C-TECH+Astronomy%22%7D' http://127.0.0.1:8080/hubot/chatsecrets/general\n+```\n+\n All endpoint URLs should start with the literal string `/hubot` (regardless of what your robot's name is). This consistency makes it easier to set up webhooks (copy-pasteable URL) and guarantees that URLs are valid (not all bot names are URL-safe).\n \n ## Events", "changes": 11}], "899": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/19d0e1d1e4b30d1ed2e1bf2d411a57809c29a3a1/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/19d0e1d1e4b30d1ed2e1bf2d411a57809c29a3a1/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=19d0e1d1e4b30d1ed2e1bf2d411a57809c29a3a1", "filename": "src/robot.coffee", "sha": "26f39544495cd478e0c9d5aa74501437648a0dbd", "additions": 7, "patch": "@@ -288,7 +288,13 @@ class Robot\n \n     app.use express.basicAuth user, pass if user and pass\n     app.use express.query()\n-    app.use express.bodyParser()\n+\n+    # Removing bodyParser since it's deprecated\n+    # Note that Hubot no longer supports multipart uploads due to no longer using express.bodyParser\n+    # In order to put support back for that, we would need to use one of: formidable, multiparty, busboy, multer, etc.\n+    app.use express.urlencoded()\n+    app.use express.json()\n+\n     app.use express.static stat if stat\n \n     try", "changes": 8}], "900": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/771cd7a828b8ecf97cbe7b6ee7665184f9d5a880/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/771cd7a828b8ecf97cbe7b6ee7665184f9d5a880/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=771cd7a828b8ecf97cbe7b6ee7665184f9d5a880", "filename": "src/robot.coffee", "sha": "929be98af4251a7fa259d10a0eab7998d9f16f00", "additions": 12, "patch": "@@ -223,9 +223,18 @@ class Robot\n           @logger.warning \"Expected #{full} to assign a function to module.exports, got #{typeof script}\"\n \n       catch error\n-        @logger.error \"Unable to load #{full}: #{error.stack}\"\n+        @logger.error \"Unable to load #{@getSyntaxErrorString(full, error)}\"\n         process.exit(1)\n \n+\n+  getSyntaxErrorString: (filename, syntaxError) ->\n+    #(5,1):\n+    message = \"#{filename}\"\n+    if (syntaxError.location)\n+      message += \"(#{syntaxError.location.first_line},#{syntaxError.location.first_column})\"\n+    message += \" : Error: #{syntaxError.message}\"\n+    return message\n+\n   # Public: Loads every script in the given path.\n   #\n   # path - A String path on the filesystem.\n@@ -335,8 +344,8 @@ class Robot\n         \"hubot-#{adapter}\"\n \n       @adapter = require(path).use @\n-    catch err\n-      @logger.error \"Cannot load adapter #{adapter} - #{err}\"\n+    catch error\n+      @logger.error \"Unable to load adapter #{@getSyntaxErrorString(path, error)}\"\n       process.exit(1)\n \n   # Public: Help Commands for Running Scripts.", "changes": 15}], "903": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e8349040783731f94db253fa745a7a90cad87c78/test/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e8349040783731f94db253fa745a7a90cad87c78/test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.coffee?ref=e8349040783731f94db253fa745a7a90cad87c78", "filename": "test/brain_test.coffee", "sha": "cf7e0dddbd052ea5f8fda759ae119ce6cfab3fa8", "additions": 253, "patch": "@@ -0,0 +1,253 @@\n+# Assertions and Stubbing\n+chai = require 'chai'\n+sinon = require 'sinon'\n+chai.use require 'sinon-chai'\n+\n+{ expect } = chai\n+\n+# Hubot classes\n+Brain = require '../src/brain.coffee'\n+User = require '../src/user.coffee'\n+\n+describe 'Brain', ->\n+  beforeEach ->\n+    @clock = sinon.useFakeTimers()\n+    @mockRobot =\n+      emit: ->\n+      on: ->\n+\n+    # This *should* be callsArgAsync to match the 'on' API, but that makes\n+    # the tests more complicated and seems irrelevant.\n+    sinon.stub(@mockRobot, 'on').withArgs('running').callsArg(1)\n+\n+    @brain = new Brain @mockRobot\n+\n+    @user1 = @brain.userForId '1', name: 'Guy One'\n+    @user2 = @brain.userForId '2', name: 'Guy One Two'\n+    @user3 = @brain.userForId '3', name: 'Girl Three'\n+\n+  afterEach ->\n+    @clock.restore()\n+\n+  describe 'Unit Tests', ->\n+    describe '#mergeData', ->\n+      it 'performs a proper merge with the new data taking precedent', ->\n+        @brain.data =\n+          1: 'old'\n+          2: 'old'\n+\n+        @brain.mergeData\n+          2: 'new'\n+\n+        expect(@brain.data).to.deep.equal\n+          1: 'old'\n+          2: 'new'\n+\n+       it 'emits a loaded event with the new data', ->\n+         sinon.spy @brain, 'emit'\n+         @brain.mergeData {}\n+         expect(@brain.emit).to.have.been.calledWith('loaded', @brain.data)\n+\n+    describe '#save', ->\n+      it 'emits a save event', ->\n+        sinon.spy @brain, 'emit'\n+        @brain.save()\n+        expect(@brain.emit).to.have.been.calledWith('save', @brain.data)\n+\n+    describe '#resetSaveInterval', ->\n+      it 'updates the auto-save interval', ->\n+        sinon.spy @brain, 'save'\n+        # default is 5s\n+        @brain.resetSaveInterval 10\n+        # make sure autosave is on\n+        @brain.setAutoSave true\n+\n+        @clock.tick(5000)\n+        # old interval has passed\n+        expect(@brain.save).to.not.have.been.called\n+        @clock.tick(5000)\n+        # new interval has passed\n+        expect(@brain.save).to.have.been.calledOnce\n+\n+    describe '#close', ->\n+      it 'saves', ->\n+        sinon.spy @brain, 'save'\n+        @brain.close()\n+        expect(@brain.save).to.have.been.calledOnce\n+\n+      it 'emits a close event', ->\n+        sinon.spy @brain, 'emit'\n+        @brain.close()\n+        expect(@brain.emit).to.have.been.calledWith('close')\n+\n+      it 'saves before emitting the close event', ->\n+        sinon.spy(@brain, 'save')\n+        sinon.spy(@brain, 'emit').withArgs('close')\n+        @brain.close()\n+        expect(@brain.save).to.have.been.calledBefore(@brain.emit)\n+\n+      it 'stops auto-saving', ->\n+        # make sure autosave is on\n+        @brain.setAutoSave true\n+        @brain.close()\n+\n+        # set up the spy after because 'close' calls 'save'\n+        sinon.spy @brain, 'save'\n+\n+        @clock.tick(2*5000)\n+        expect(@brain.save).to.not.have.been.called\n+\n+    describe '#get', ->\n+      it 'returns the saved value', ->\n+        @brain.data._private['test-key'] = 'value'\n+        expect(@brain.get('test-key')).to.equal('value')\n+\n+      it 'returns null if object is not found', ->\n+        expect(@brain.get('not a real key')).to.be.null\n+\n+    describe '#set', ->\n+      it 'saves the value', ->\n+        @brain.set('test-key', 'value')\n+        expect(@brain.data._private['test-key']).to.equal('value')\n+\n+      it 'sets multiple keys at once if an object is provided', ->\n+        @brain.data._private =\n+          key1: 'val1'\n+          key2: 'val1'\n+\n+        @brain.set\n+          key2: 'val2'\n+          key3: 'val2'\n+\n+        expect(@brain.data._private).to.deep.equal\n+          key1: 'val1'\n+          key2: 'val2'\n+          key3: 'val2'\n+\n+      # Unable to understand why this behavior is needed, but adding a test\n+      # case to protect it\n+      it 'emits loaded', ->\n+        sinon.spy @brain, 'emit'\n+        @brain.set('test-key', 'value')\n+        expect(@brain.emit).to.have.been.calledWith('loaded', @brain.data)\n+\n+      it 'returns the brain', ->\n+        expect(@brain.set('test-key', 'value')).to.equal(@brain)\n+\n+    describe '#remove', ->\n+      it 'removes the specified key', ->\n+        @brain.data._private['test-key'] = 'value'\n+        @brain.remove 'test-key'\n+        expect(@brain.data._private).to.not.include.keys('test-key')\n+\n+    describe '#userForId', ->\n+      it 'returns the user object', ->\n+        expect(@brain.userForId(1)).to.equal(@user1)\n+\n+      it 'does an exact match', ->\n+        user4 = @brain.userForId('FOUR')\n+        expect(@brain.userForId('four')).to.not.equal(user4)\n+\n+      # Cannot understand why this behavior is needed, but adding a test case\n+      # to protect it\n+      it 'recreates the user if the room option differs from the user object', ->\n+        expect(@brain.userForId(1).room).to.be.undefined\n+\n+        # undefined -> having a room\n+        newUser1 = @brain.userForId(1, room: 'room1')\n+        expect(newUser1).to.not.equal(@user1)\n+\n+        # changing the room\n+        newUser2 = @brain.userForId(1, room: 'room2')\n+        expect(newUser2).to.not.equal(newUser1)\n+\n+      describe 'when there is no matching user ID', ->\n+        it 'creates a new User', ->\n+          expect(@brain.data.users).to.not.include.key('all-new-user')\n+          newUser = @brain.userForId('all-new-user')\n+          expect(newUser).to.be.instanceof(User)\n+          expect(newUser.id).to.equal('all-new-user')\n+          expect(@brain.data.users).to.include.key('all-new-user')\n+\n+        it 'passes the provided options to the new User', ->\n+          newUser = @brain.userForId('all-new-user', name: 'All New User', prop: 'mine')\n+          expect(newUser.name).to.equal('All New User')\n+          expect(newUser.prop).to.equal('mine')\n+\n+    describe '#userForName', ->\n+      it 'returns the user with a matching name', ->\n+        expect(@brain.userForName('Guy One')).to.equal(@user1)\n+\n+      it 'does a case-insensitive match', ->\n+        expect(@brain.userForName('guy one')).to.equal(@user1)\n+\n+      it 'returns null if no user matches', ->\n+        expect(@brain.userForName('not a real user')).to.be.null\n+\n+    describe '#usersForRawFuzzyName', ->\n+      it 'does a case-insensitive match', ->\n+        expect(@brain.usersForRawFuzzyName('guy')).to.have.members([@user1,@user2])\n+\n+      it 'returns all matching users (prefix match) when there is not an exact match (case-insensitive)', ->\n+        expect(@brain.usersForRawFuzzyName('Guy')).to.have.members([@user1,@user2])\n+\n+      it 'returns all matching users (prefix match) when there is an exact match (case-insensitive)', ->\n+        # Matched case\n+        expect(@brain.usersForRawFuzzyName('Guy One')).to.deep.equal([@user1,@user2])\n+        # Mismatched case\n+        expect(@brain.usersForRawFuzzyName('guy one')).to.deep.equal([@user1,@user2])\n+\n+      it 'returns an empty array if no users match', ->\n+        result = @brain.usersForRawFuzzyName('not a real user')\n+        expect(result).to.be.an('array')\n+        expect(result).to.be.empty\n+\n+    describe '#usersForFuzzyName', ->\n+      it 'does a case-insensitive match', ->\n+        expect(@brain.usersForFuzzyName('guy')).to.have.members([@user1,@user2])\n+\n+      it 'returns all matching users (prefix match) when there is not an exact match', ->\n+        expect(@brain.usersForFuzzyName('Guy')).to.have.members([@user1,@user2])\n+\n+      it 'returns just the user when there is an exact match (case-insensitive)', ->\n+        # Matched case\n+        expect(@brain.usersForFuzzyName('Guy One')).to.deep.equal([@user1])\n+        # Mismatched case\n+        expect(@brain.usersForFuzzyName('guy one')).to.deep.equal([@user1])\n+\n+      it 'returns an empty array if no users match', ->\n+        result = @brain.usersForFuzzyName('not a real user')\n+        expect(result).to.be.an('array')\n+        expect(result).to.be.empty\n+\n+  describe 'Auto-Save', ->\n+    it 'is on by default', ->\n+      expect(@brain.autoSave).to.equal(true)\n+\n+    it 'automatically saves every 5 seconds when turned on', ->\n+      sinon.spy @brain, 'save'\n+\n+      @brain.setAutoSave true\n+\n+      @clock.tick(5000)\n+      expect(@brain.save).to.have.been.called\n+\n+    it 'does not auto-save when turned off', ->\n+      sinon.spy @brain, 'save'\n+\n+      @brain.setAutoSave false\n+\n+      @clock.tick(2*5000)\n+      expect(@brain.save).to.not.have.been.called\n+\n+  describe 'User Searching', ->\n+    it 'finds users by ID', ->\n+      expect(@brain.userForId('1')).to.equal(@user1)\n+\n+    it 'finds users by exact name', ->\n+      expect(@brain.userForName('Guy One')).to.equal(@user1)\n+\n+    it 'finds users by fuzzy name (prefix match)', ->\n+      result = @brain.usersForFuzzyName('Guy')\n+      expect(result).to.have.members([@user1, @user2])\n+      expect(result).to.not.have.members([@user3])", "changes": 253}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e8349040783731f94db253fa745a7a90cad87c78/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e8349040783731f94db253fa745a7a90cad87c78/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=e8349040783731f94db253fa745a7a90cad87c78", "filename": "test/robot_test.coffee", "sha": "44250613029e03c521c093bd84e97ee0d9bf7d3b", "additions": 214, "patch": "@@ -9,7 +9,7 @@ mockery = require 'mockery'\n \n # Hubot classes\n Robot = require '../src/robot.coffee'\n-{ CatchAllMessage, EnterMessage, TextMessage } = require '../src/message'\n+{ CatchAllMessage, EnterMessage, LeaveMessage, TextMessage, TopicMessage } = require '../src/message'\n Adapter = require '../src/adapter'\n \n # Preload the Hubot mock adapter but substitute in the latest version of Adapter\n@@ -40,6 +40,42 @@ describe 'Robot', ->\n    @robot.shutdown()\n \n   describe 'Unit Tests', ->\n+    describe '#hear', ->\n+      it 'registers a new listener', ->\n+        expect(@robot.listeners).to.have.length(0)\n+        @robot.hear /.*/, ->\n+        expect(@robot.listeners).to.have.length(1)\n+\n+    describe '#respond', ->\n+      it 'registers a new listener', ->\n+        expect(@robot.listeners).to.have.length(0)\n+        @robot.respond /.*/, ->\n+        expect(@robot.listeners).to.have.length(1)\n+\n+    describe '#enter', ->\n+      it 'registers a new listener', ->\n+        expect(@robot.listeners).to.have.length(0)\n+        @robot.enter ->\n+        expect(@robot.listeners).to.have.length(1)\n+\n+    describe '#leave', ->\n+      it 'registers a new listener', ->\n+        expect(@robot.listeners).to.have.length(0)\n+        @robot.leave ->\n+        expect(@robot.listeners).to.have.length(1)\n+\n+    describe '#topic', ->\n+      it 'registers a new listener', ->\n+        expect(@robot.listeners).to.have.length(0)\n+        @robot.topic ->\n+        expect(@robot.listeners).to.have.length(1)\n+\n+    describe '#catchAll', ->\n+      it 'registers a new listener', ->\n+        expect(@robot.listeners).to.have.length(0)\n+        @robot.catchAll ->\n+        expect(@robot.listeners).to.have.length(1)\n+\n     describe '#receive', ->\n       it 'calls all registered listeners', ->\n         # Need to use a real Message so that the CatchAllMessage constructor works\n@@ -154,6 +190,183 @@ describe 'Robot', ->\n         expect(@robot.emit).to.have.been.called\n         expect(goodListenerCalled).to.be.ok\n \n+    describe '#loadFile', ->\n+      beforeEach ->\n+        @sandbox = sinon.sandbox.create()\n+\n+      afterEach ->\n+        @sandbox.restore()\n+\n+      it 'should require the specified file', ->\n+        module = require 'module'\n+\n+        script = sinon.spy (robot) ->\n+        @sandbox.stub(module, '_load').returns(script)\n+        @sandbox.stub @robot, 'parseHelp'\n+\n+        @robot.loadFile('./scripts', 'test-script.coffee')\n+        expect(module._load).to.have.been.calledWith('scripts/test-script')\n+\n+      describe 'proper script', ->\n+        beforeEach ->\n+          module = require 'module'\n+\n+          @script = sinon.spy (robot) ->\n+          @sandbox.stub(module, '_load').returns(@script)\n+          @sandbox.stub @robot, 'parseHelp'\n+\n+        it 'should call the script with the Robot', ->\n+          @robot.loadFile('./scripts', 'test-script.coffee')\n+          expect(@script).to.have.been.calledWith(@robot)\n+\n+        it 'should parse the script documentation', ->\n+          @robot.loadFile('./scripts', 'test-script.coffee')\n+          expect(@robot.parseHelp).to.have.been.calledWith('scripts/test-script.coffee')\n+\n+      describe 'non-Function script', ->\n+        beforeEach ->\n+          module = require 'module'\n+\n+          @script = {}\n+          @sandbox.stub(module, '_load').returns(@script)\n+          @sandbox.stub @robot, 'parseHelp'\n+\n+        it 'logs a warning', ->\n+          sinon.stub @robot.logger, 'warning'\n+          @robot.loadFile('./scripts', 'test-script.coffee')\n+          expect(@robot.logger.warning).to.have.been.called\n+\n+  describe 'Listener Registration', ->\n+    describe '#hear', ->\n+      it 'matches TextMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new TextMessage(@user, 'message123')\n+        testRegex = /^message123$/\n+\n+        @robot.hear(testRegex, callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+\n+      it 'does not match EnterMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new EnterMessage(@user)\n+        testRegex = /.*/\n+\n+        @robot.hear(testRegex, callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+\n+    describe '#respond', ->\n+      it 'matches TextMessages addressed to the robot', ->\n+        callback = sinon.spy()\n+        testMessage = new TextMessage(@user, 'TestHubot message123')\n+        testRegex = /message123$/\n+\n+        @robot.respond(testRegex, callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+\n+      it 'does not match EnterMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new EnterMessage(@user)\n+        testRegex = /.*/\n+\n+        @robot.respond(testRegex, callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+\n+    describe '#enter', ->\n+      it 'matches EnterMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new EnterMessage(@user)\n+\n+        @robot.enter(callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+\n+      it 'does not match TextMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new TextMessage(@user, 'message123')\n+\n+        @robot.enter(callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+\n+    describe '#leave', ->\n+      it 'matches LeaveMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new LeaveMessage(@user)\n+\n+        @robot.leave(callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+\n+      it 'does not match TextMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new TextMessage(@user, 'message123')\n+\n+        @robot.leave(callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+\n+    describe '#topic', ->\n+      it 'matches TopicMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new TopicMessage(@user)\n+\n+        @robot.topic(callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+\n+      it 'does not match TextMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new TextMessage(@user, 'message123')\n+\n+        @robot.topic(callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+\n+    describe '#catchAll', ->\n+      it 'matches CatchAllMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new CatchAllMessage(new TextMessage(@user, 'message123'))\n+\n+        @robot.catchAll(callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+\n+      it 'does not match TextMessages', ->\n+        callback = sinon.spy()\n+        testMessage = new TextMessage(@user, 'message123')\n+\n+        @robot.catchAll(callback)\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+\n   describe 'Message Processing', ->\n     it 'calls a matching listener', (done) ->\n       testMessage = new TextMessage(@user, 'message123')", "changes": 215}], "905": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/32279e38e8addf429cdf7e66f9ffccb675ecf363/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/32279e38e8addf429cdf7e66f9ffccb675ecf363/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=32279e38e8addf429cdf7e66f9ffccb675ecf363", "filename": "docs/adapters.md", "sha": "9f1317c75f697b27422b48c29112a1d6ecf50d61", "additions": 1, "patch": "@@ -43,6 +43,7 @@ to have yours added to the list:\n * [Typetalk](https://github.com/nulab/hubot-typetalk)\n * [Fleep](https://github.com/anroots/hubot-fleep)\n * [Let's Chat](https://github.com/sdelements/hubot-lets-chat)\n+* [VictorOps](https://github.com/victorops/hubot-victorops)\n \n ## Writing Your Own Adapter\n ", "changes": 1}], "906": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/51d6e0f1f1526d2d47051dc391ac367a6665fc27/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/51d6e0f1f1526d2d47051dc391ac367a6665fc27/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=51d6e0f1f1526d2d47051dc391ac367a6665fc27", "filename": "docs/scripting.md", "sha": "0e35b70b57f519fb670d6773deaa9c6121ca1a1f", "additions": 1, "patch": "@@ -577,7 +577,7 @@ robot.respond /have a soda/i, (msg) ->\n     robot.brain.set 'totalSodas', sodasHad+1\n robot.respond /sleep it off/i, (msg) ->\n   robot.brain.set 'totalSodas', 0\n-  robot.respond 'zzzzz'\n+  msg.reply 'zzzzz'\n ```\n \n If the script needs to lookup user data, there are methods on `robot.brain` for looking up one or many users by id, name, or 'fuzzy' matching of name: `userForName`, `userForId`, `userForFuzzyName`, and `usersForFuzzyName`.", "changes": 2}], "908": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/00d781ef7a20ed2806110c0d4a5df40de631ed98/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/00d781ef7a20ed2806110c0d4a5df40de631ed98/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=00d781ef7a20ed2806110c0d4a5df40de631ed98", "filename": "package.json", "sha": "b43572bccf76b82212ece20cdc3ae4574748c0f3", "additions": 1, "patch": "@@ -26,7 +26,7 @@\n     \"express\": \"3.18.1\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",\n-    \"scoped-http-client\": \"0.10.0\"\n+    \"scoped-http-client\": \"0.10.3\"\n   },\n   \"devDependencies\": {\n     \"hubot-mock-adapter\": \"^1.0.0\",", "changes": 2}], "909": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/e5f7fa85cc5c9cccaf0da7448c66cbffbb39eed5/docs/deploying.md", "blob_url": "https://github.com/hubotio/hubot/blob/e5f7fa85cc5c9cccaf0da7448c66cbffbb39eed5/docs/deploying.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying.md?ref=e5f7fa85cc5c9cccaf0da7448c66cbffbb39eed5", "filename": "docs/deploying.md", "sha": "6383b29d4df4a19a325c08aa3b7ca85f4e27c3a3", "additions": 3, "patch": "@@ -3,6 +3,6 @@ permalink: /docs/deploying/index.html\n layout: docs\n ---\n \n-- [Heroku](/docs/deploying/heroku/)\n-- [Unix](/docs/deploying/unix/)\n-- [Windows](/docs/deploying/windows/)\n+- [Heroku](/docs/deploying/heroku.md)\n+- [Unix](/docs/deploying/unix.md)\n+- [Windows](/docs/deploying/windows.md)", "changes": 6}], "910": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/1c3ed5db7eaae8e75c7fd8656f6bfbe150acc96c/docs/deploying.md", "blob_url": "https://github.com/hubotio/hubot/blob/1c3ed5db7eaae8e75c7fd8656f6bfbe150acc96c/docs/deploying.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying.md?ref=1c3ed5db7eaae8e75c7fd8656f6bfbe150acc96c", "filename": "docs/deploying.md", "sha": "6383b29d4df4a19a325c08aa3b7ca85f4e27c3a3", "additions": 3, "patch": "@@ -3,6 +3,6 @@ permalink: /docs/deploying/index.html\n layout: docs\n ---\n \n-- [Heroku](/docs/deploying/heroku/)\n-- [Unix](/docs/deploying/unix/)\n-- [Windows](/docs/deploying/windows/)\n+- [Heroku](/docs/deploying/heroku.md)\n+- [Unix](/docs/deploying/unix.md)\n+- [Windows](/docs/deploying/windows.md)", "changes": 6}], "911": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/133530a5f536dde50ae42ae5dc660344f3dc9db3/docs/deploying.md", "blob_url": "https://github.com/hubotio/hubot/blob/133530a5f536dde50ae42ae5dc660344f3dc9db3/docs/deploying.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying.md?ref=133530a5f536dde50ae42ae5dc660344f3dc9db3", "filename": "docs/deploying.md", "sha": "6383b29d4df4a19a325c08aa3b7ca85f4e27c3a3", "additions": 3, "patch": "@@ -3,6 +3,6 @@ permalink: /docs/deploying/index.html\n layout: docs\n ---\n \n-- [Heroku](/docs/deploying/heroku/)\n-- [Unix](/docs/deploying/unix/)\n-- [Windows](/docs/deploying/windows/)\n+- [Heroku](/docs/deploying/heroku.md)\n+- [Unix](/docs/deploying/unix.md)\n+- [Windows](/docs/deploying/windows.md)", "changes": 6}], "914": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/bc7b9521a3d2528fc0d67ab8219a5134f12d01ff/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/bc7b9521a3d2528fc0d67ab8219a5134f12d01ff/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=bc7b9521a3d2528fc0d67ab8219a5134f12d01ff", "filename": "package.json", "sha": "c3e32212e8e451550446cc7d23116533d548b0b0", "additions": 1, "patch": "@@ -23,6 +23,7 @@\n     \"chalk\": \"^1.0.0\",\n     \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n+    \"connect-multiparty\": \"^1.2.5\",\n     \"express\": \"3.18.1\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",", "changes": 1}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/bc7b9521a3d2528fc0d67ab8219a5134f12d01ff/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/bc7b9521a3d2528fc0d67ab8219a5134f12d01ff/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=bc7b9521a3d2528fc0d67ab8219a5134f12d01ff", "filename": "src/robot.coffee", "sha": "4846f5d5ee4f760c75fe9338dc88c020a14f1e5a", "additions": 5, "patch": "@@ -279,6 +279,7 @@ class Robot\n     address = process.env.EXPRESS_BIND_ADDRESS or process.env.BIND_ADDRESS or '0.0.0.0'\n \n     express = require 'express'\n+    multipart = require 'connect-multiparty'\n \n     app = express()\n \n@@ -289,11 +290,11 @@ class Robot\n     app.use express.basicAuth user, pass if user and pass\n     app.use express.query()\n \n-    # Removing bodyParser since it's deprecated\n-    # Note that Hubot no longer supports multipart uploads due to no longer using express.bodyParser\n-    # In order to put support back for that, we would need to use one of: formidable, multiparty, busboy, multer, etc.\n-    app.use express.urlencoded()\n     app.use express.json()\n+    app.use express.urlencoded()\n+    # replacement for deprecated express.multipart/connect.multipart\n+    # limit to 100mb, as per the old behavior\n+    app.use multipart(maxFilesSize: 100 * 1024 * 1024)\n \n     app.use express.static stat if stat\n ", "changes": 9}], "915": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/058d3f80b448eaf0fe4599f86e0ecefce7f26333/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/058d3f80b448eaf0fe4599f86e0ecefce7f26333/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=058d3f80b448eaf0fe4599f86e0ecefce7f26333", "filename": "CHANGELOG.md", "sha": "fe660e64a857207978011e891f59d70dfc3579ac", "additions": 7, "patch": "@@ -1,3 +1,10 @@\n+v2.12.0\n+=======\n+\n+* Update scripting documentation to ref to `res` instead of `msg`, since it's a `Response` object\n+* Update scoped-http-client from 0.10.0 to 0.10.3\n+* Fix deprecation warnings from connect at startup\n+\n v2.11.4\n =======\n ", "changes": 7}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/058d3f80b448eaf0fe4599f86e0ecefce7f26333/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/058d3f80b448eaf0fe4599f86e0ecefce7f26333/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=058d3f80b448eaf0fe4599f86e0ecefce7f26333", "filename": "package.json", "sha": "d5834b846314483d8b46a3967a3cf795df8f919a", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.11.4\",\n+  \"version\": \"2.12.0\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "917": [{"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/e5e1f173ab02abe31050aaaf2465f48959310f05/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e5e1f173ab02abe31050aaaf2465f48959310f05/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=e5e1f173ab02abe31050aaaf2465f48959310f05", "filename": "src/robot.coffee", "sha": "16234734ec8a95b52c14917315fd4dc0933def43", "additions": 8, "patch": "@@ -45,7 +45,7 @@ class Robot\n     @alias     = false\n     @adapter   = null\n     @Response  = Response\n-    @commands  = []\n+    @commands  = {}\n     @listeners = []\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n     @pingIntervalId = null\n@@ -343,7 +343,10 @@ class Robot\n   #\n   # Returns an Array of help commands for running scripts.\n   helpCommands: ->\n-    @commands.sort()\n+    output = []\n+    for script, cmds of @commands\n+      output = output.concat(cmds.sort())\n+    return output\n \n   # Private: load help info from a loaded script.\n   #\n@@ -354,7 +357,7 @@ class Robot\n     @logger.debug \"Parsing help for #{path}\"\n     scriptName = Path.basename(path).replace /\\.(coffee|js)$/, ''\n     scriptDocumentation = {}\n-\n+    @commands[scriptName] = []\n     body = Fs.readFileSync path, 'utf-8'\n \n     currentSection = null\n@@ -374,7 +377,7 @@ class Robot\n         if currentSection\n           scriptDocumentation[currentSection].push cleanedLine.trim()\n           if currentSection is 'commands'\n-            @commands.push cleanedLine.trim()\n+            @commands[scriptName].push cleanedLine.trim()\n \n     if currentSection is null\n       @logger.info \"#{path} is using deprecated documentation syntax\"\n@@ -384,7 +387,7 @@ class Robot\n         continue if not line.match('-')\n         cleanedLine = line[2..line.length].replace(/^hubot/i, @name).trim()\n         scriptDocumentation.commands.push cleanedLine\n-        @commands.push cleanedLine\n+        @commands[scriptName].push cleanedLine\n \n   # Public: A helper send function which delegates to the adapter's send\n   # function.", "changes": 13}], "918": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/10aedc2f6d94f9af62cc0b62b98998ba9c25d6d2/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/10aedc2f6d94f9af62cc0b62b98998ba9c25d6d2/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=10aedc2f6d94f9af62cc0b62b98998ba9c25d6d2", "filename": "docs/index.md", "sha": "70c255f0eef57382c872d71b63fb8763155bd326", "additions": 1, "patch": "@@ -102,7 +102,7 @@ case-insensitive, and can be prefixed with `@` or suffixed with `:`. These are e\n \n ## Scripting\n \n-Hubot's power comes through scripting. Read [docs/scripting.md](scripting.md) for the deal on bending hubot to your will using code.\n+Hubot's power comes through scripting. Read [more about scripting](/docs/scripting/) for the deal on bending hubot to your will using code.\n \n There are many community-contributed scripts available through [hubot-scripts](https://github.com/github/hubot-scripts). To use scripts from it:\n ", "changes": 2}], "920": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/96c789642482acbf7733d95e6ba4d0b6990b5899/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/96c789642482acbf7733d95e6ba4d0b6990b5899/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=96c789642482acbf7733d95e6ba4d0b6990b5899", "filename": "docs/adapters.md", "sha": "aabc71df343577bdddf80b136dd68cbb1c98caac", "additions": 1, "patch": "@@ -47,4 +47,4 @@ to have yours added to the list:\n \n ## Writing Your Own Adapter\n \n-Interested in adding your own adapter? Check out our documentation for [developing adapters](/docs/adapters/development/)\n+Interested in adding your own adapter? Check out our documentation for [developing adapters](/docs/adapters/development.md)", "changes": 2}], "921": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/bafc4f8f29e5ed4b5956e45de417b7c0ca505e9f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/bafc4f8f29e5ed4b5956e45de417b7c0ca505e9f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=bafc4f8f29e5ed4b5956e45de417b7c0ca505e9f", "filename": "src/robot.coffee", "sha": "1f4bfe8f6d5e72d29636061a37820724fcdaab01", "additions": 11, "patch": "@@ -434,6 +434,17 @@ class Robot\n   on: (event, args...) ->\n     @events.on event, args...\n \n+  # Public: A wrapper around the EventEmitter API to make usage\n+  # semanticly better.\n+  #\n+  # event    - The event name.\n+  # listener - A Function that is called with the event parameter\n+  #            when first event happens.\n+  #\n+  # Returns nothing.\n+  once: (event, args...) ->\n+    @events.once event, args...\n+\n   # Public: A wrapper around the EventEmitter API to make usage\n   # semanticly better.\n   #", "changes": 11}], "922": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c779c68b2f4e9fc6fe8a14bb82b710a6572bdf57/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c779c68b2f4e9fc6fe8a14bb82b710a6572bdf57/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=c779c68b2f4e9fc6fe8a14bb82b710a6572bdf57", "filename": "src/brain.coffee", "sha": "c6726e8be4a8e2b5d21323234cb2baad396b35e1", "additions": 15, "patch": "@@ -148,6 +148,21 @@ class Brain extends EventEmitter\n \n     matchedUsers\n \n+  # Public: Get all users that contain the provided query string\n+  # in any of their properties.\n+  #\n+  # Returns an Array of User instances matching the search criteria.\n+  usersForAny: (query) ->\n+    query = query.toLowerCase()\n+    matchedUsers = []\n+    for key, user of (@data.users or {})\n+      for property, value of user\n+        if typeof value is 'string'\n+          if value.toLowerCase().indexOf(query) isnt -1\n+            matchedUsers.push user\n+            break\n+    matchedUsers\n+\n # Private: Extend obj with objects passed as additional args.\n #\n # Returns the original object with updated changes.", "changes": 15}], "924": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/hook.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/hook.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hook.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/hook.coffee", "sha": "30fb521ba1c3d9ed9cdfda8e73b551a9637f0448", "additions": 35, "patch": "@@ -0,0 +1,35 @@\n+class Hook\n+  constructor: (opts) ->\n+    @response = opts.response\n+    @robot    = opts.robot\n+    @listener = opts.listener\n+    @message  = opts.message\n+    @response ||= new @robot.Response(@robot, @message)\n+\n+    @reply    = opts.reply # An object like { text: \"string\" }\n+\n+    @hooks    = opts.hooks\n+    @callback = opts.callback\n+    @nextHook = -1\n+\n+  run: ->\n+    for hook in @hooks\n+      hook(@)\n+      return if @finished?\n+    @callback(@reply.text if @reply?)\n+\n+  finish: =>\n+    @finished = true\n+    if @reply?\n+      # We're processing a reply, not a listen or receive. The message has\n+      # been processed, so it's too late to finish() it. By not calling\n+      # @run() or @callback() we end processing and do not send the reply.\n+      # if they reply has been updated, we note that by returning the new value.\n+      @reply.text\n+    else\n+      @message.finish()\n+      @callback()\n+\n+module.exports = {\n+  Hook\n+}", "changes": 35}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/listener.coffee", "sha": "55724f96eacbffc251674f04a2e099c0764651a6", "additions": 4, "patch": "@@ -37,10 +37,13 @@ class Listener\n   # Returns a boolean of whether the matcher matched.\n   call: (message) ->\n     if match = @matcher message\n+\n       @robot.logger.debug \\\n         \"Message '#{message}' matched regex /#{inspect @regex}/\" if @regex\n \n-      @callback new @robot.Response(@robot, message, match)\n+      response = new @robot.Response(@robot, message, match)\n+\n+      @robot.runPrelistenHooks(this, response)\n       true\n     else\n       false", "changes": 5}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/response.coffee", "sha": "8ec29b6908d5359edf9757f9d7df503da7e045a0", "additions": 24, "patch": "@@ -19,7 +19,10 @@ class Response\n   #\n   # Returns nothing.\n   send: (strings...) ->\n-    @robot.adapter.send @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.send @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts an emote back to the chat source\n   #\n@@ -28,7 +31,10 @@ class Response\n   #\n   # Returns nothing.\n   emote: (strings...) ->\n-    @robot.adapter.emote @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.emote @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts a message mentioning the current user.\n   #\n@@ -37,7 +43,10 @@ class Response\n   #\n   # Returns nothing.\n   reply: (strings...) ->\n-    @robot.adapter.reply @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.reply @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts a topic changing message\n   #\n@@ -46,7 +55,10 @@ class Response\n   #\n   # Returns nothing.\n   topic: (strings...) ->\n-    @robot.adapter.topic @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.topic @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Play a sound in the chat source\n   #\n@@ -55,7 +67,10 @@ class Response\n   #\n   # Returns nothing\n   play: (strings...) ->\n-    @robot.adapter.play @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.play @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts a message in an unlogged room\n   #\n@@ -64,7 +79,10 @@ class Response\n   #\n   # Returns nothing\n   locked: (strings...) ->\n-    @robot.adapter.locked @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.locked @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Picks a random item from the given items.\n   #", "changes": 30}, {"status": "modified", "deletions": 23, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/robot.coffee", "sha": "7ba8ea97e1d3932d28cfe112e0c02d09e9270672", "additions": 93, "patch": "@@ -9,6 +9,7 @@ Brain = require './brain'\n Response = require './response'\n {Listener,TextListener} = require './listener'\n {EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n+{Hook} = require './hook'\n \n HUBOT_DEFAULT_ADAPTERS = [\n   'campfire'\n@@ -49,8 +50,10 @@ class Robot\n     @listeners = []\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n     @pingIntervalId = null\n+    @hooks     = {}\n     @globalHttpOptions = {}\n \n+\n     @parseVersion()\n     if httpd\n       @setupExpress()\n@@ -214,17 +217,29 @@ class Robot\n   #\n   # Returns nothing.\n   receive: (message) ->\n+    curriedReceive = =>\n+      @receiveWithoutHooks(message)\n+    @runHooks 'prereceive', curriedReceive, message\n+\n+  # Private: receive a message, passing it to any inerested listeners. Does\n+  # not execute callbacks.\n+  #\n+  # message - A Message instance\n+  #\n+  # Returns nothing.\n+  receiveWithoutHooks: (message) ->\n     results = []\n     for listener in @listeners\n       try\n-        results.push listener.call(message)\n         break if message.done\n+        results.push listener.call(message)\n       catch error\n         @emit('error', error, new @Response(@, message, []))\n \n         false\n+\n     if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n-      @receive new CatchAllMessage(message)\n+      @receiveWithoutHooks new CatchAllMessage(message)\n \n   # Public: Loads a file in path.\n   #\n@@ -416,26 +431,6 @@ class Robot\n         scriptDocumentation.commands.push cleanedLine\n         @commands.push cleanedLine\n \n-  # Public: A helper send function which delegates to the adapter's send\n-  # function.\n-  #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  send: (user, strings...) ->\n-    @adapter.send user, strings...\n-\n-  # Public: A helper reply function which delegates to the adapter's reply\n-  # function.\n-  #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  reply: (user, strings...) ->\n-    @adapter.reply user, strings...\n-\n   # Public: A helper send function to message a room that the robot is in.\n   #\n   # room    - String designating the room to message.\n@@ -526,6 +521,82 @@ class Robot\n     HttpClient.create(url, @extend({}, @globalHttpOptions, options))\n       .header('User-Agent', \"Hubot/#{@version}\")\n \n+  # Public. Adds a prereceive callback hook to this robot.\n+  #\n+  #   cb  - A callback function which accepts a Hook object.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  prereceive: (cb) ->\n+    @hooks['prereceive'] ||= []\n+    @hooks['prereceive'].push cb\n+\n+  # Public. Adds a prelisten callback hook to this robot.\n+  #\n+  #   cb  - A callback function which accepts a Hook object.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  prelisten: (cb) ->\n+    @hooks['prelisten'] ||= []\n+    @hooks['prelisten'].push cb\n+\n+  # Protected. For use by Listener to run prelisten callbacks after a match\n+  # is found.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  runPrelistenHooks: (listener, response) ->\n+    done = ->\n+      listener.callback(response) unless response.envelope.message.done\n+    @runHooks 'prelisten', done, response.envelope.message, response, listener\n+\n+  # Public. Adds a prereply callback hook to this robot.\n+  #\n+  #   cb  - A callback function which accepts a Hook object.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  prereply: (cb) ->\n+    @hooks['prereply'] ||= []\n+    @hooks['prereply'].push cb\n+\n+  # Protected. For use by Response to run hooks before replying.\n+  #\n+  # TODO: we should have a listener available here, but there's no way to get\n+  # to it. Responses belong to listeners but don't have a way to get to them,\n+  # and we should change that API.\n+  runPrereplyHooks: (response, string, cb) ->\n+    @runHooks 'prereply', cb, response.envelope.message, response, response.listener, { text: string }\n+\n+  # Private. Run the hooks of a given name\n+  #\n+  #  name     - 'prereceive'\n+  #  response - The response object\n+  #  listener - The matching listener, if any\n+  #  message  - A message that hubot is trying to send, if any\n+  #\n+  # Each hook must call hook.next() or hook.done(). Hook.next() continues\n+  # processing and hook.done() aborts the message. If a response message\n+  # exists, hook.done() prevents it from being sent.\n+  #\n+  # Returns nothing.\n+  runHooks: (name, callback, message, response, listener, reply) ->\n+    hooks = @hooks[name]\n+    if hooks?.length > 0\n+      opts =\n+        hooks:    hooks\n+        callback: callback\n+        response: response\n+        message:  message\n+        listener: listener\n+        robot:    this\n+        reply:    reply\n+      hook = new Hook(opts)\n+      hook.run()\n+    else\n+      callback()\n+\n   # Private: Extend obj with objects passed as additional args.\n   #\n   # Returns the original object with updated changes.\n@@ -534,5 +605,4 @@ class Robot\n       obj[key] = value for own key, value of source\n     obj\n \n-\n module.exports = Robot", "changes": 116}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/listener_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/listener_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "test/listener_test.coffee", "sha": "5601bd819435aecf061aed59a0e37523c69267be", "additions": 8, "patch": "@@ -17,6 +17,8 @@ describe 'Listener', ->\n     @robot =\n       # Why is this part of the Robot object??\n       Response: Response\n+      runPrelistenHooks: (listener, response) ->\n+        listener.callback(response)\n \n     # Test user\n     @user = new User\n@@ -74,7 +76,7 @@ describe 'Listener', ->\n           result = testListener.call testMessage\n \n           expect(result).to.be.ok\n-          \n+\n \n         it 'calls the listener callback with a Response that wraps the Message', (done) ->\n           testMatcher = sinon.stub().returns(true)\n@@ -117,21 +119,21 @@ describe 'Listener', ->\n           testMessage = new TextMessage(@user, 'test')\n           testMessage.match = sinon.stub().returns(true)\n           testRegex = /test/\n- \n+\n           testListener = new TextListener(@robot, testRegex, callback)\n           result = testListener.matcher(testMessage)\n- \n+\n           expect(result).to.be.ok\n           expect(testMessage.match).to.have.been.calledWith(testRegex)\n- \n+\n         it 'does not match EnterMessages', ->\n           callback = sinon.spy()\n           testMessage = new EnterMessage(@user)\n           testMessage.match = sinon.stub().returns(true)\n           testRegex = /test/\n- \n+\n           testListener = new TextListener(@robot, testRegex, callback)\n           result = testListener.matcher(testMessage)\n- \n+\n           expect(result).to.not.be.ok\n           expect(testMessage.match).to.not.have.been.called", "changes": 14}, {"status": "modified", "deletions": 13, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "test/robot_test.coffee", "sha": "ae140c937634e0caaf27d1881ad307d922d80aa2", "additions": 86, "patch": "@@ -136,20 +136,11 @@ describe 'Robot', ->\n         # original message\n \n         testMessage = new TextMessage(@user, 'message123')\n-        @robot.listeners = []\n-\n-        # Replace @robot.receive so we can catch when the functions recurses\n-        oldReceive = @robot.receive\n-        @robot.receive = (message) ->\n-          expect(message).to.be.instanceof(CatchAllMessage)\n-          expect(message.message).to.be.equal(testMessage)\n-        sinon.spy(@robot, 'receive')\n-\n-        # Call the original receive method that we want to test\n-        oldReceive.call @robot, testMessage\n+        listener = sinon.spy()\n+        @robot.catchAll listener\n+        @robot.receive testMessage\n+        expect(listener).to.have.been.called\n \n-        # Ensure the function recursed\n-        expect(@robot.receive).to.have.been.called\n \n       it 'does not trigger a CatchAllMessage if a listener matches', ->\n         testMessage = new TextMessage(@user, 'message123')\n@@ -472,3 +463,85 @@ describe 'Robot', ->\n         done()\n \n       @robot.receive testMessage\n+\n+    it 'passes on a message that a prereceive hook allows', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      @robot.prereceive (hook) ->\n+        hook.message.addedData = \"added data\"\n+      @robot.hear /^message123$/, (response) ->\n+        expect(response.message.addedData).to.equal(\"added data\")\n+        done()\n+      @robot.receive testMessage\n+\n+    it 'provides a response object so replies can be sent before a match', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      replier = @robot.adapter.reply = sinon.spy()\n+      listenerCallback = sinon.spy()\n+      @robot.hear /^message123$/, listenerCallback\n+      @robot.prereceive (hook) ->\n+        hook.response.reply \"Listen bud, here's why I won't let you do that.\"\n+        hook.finish()\n+      @robot.receive testMessage\n+      expect(listenerCallback).to.not.have.been.called\n+      expect(replier).to.have.been.calledOnce\n+      done()\n+\n+    it 'does not pass on a message that a prereceive hook finishes', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      listenerCallback = sinon.spy()\n+      @robot.hear /^message123$/, listenerCallback\n+      @robot.prereceive (hook) ->\n+        hook.finish()\n+      @robot.receive testMessage\n+      expect(listenerCallback).to.not.have.been.calledOnce\n+      done()\n+\n+    it 'runs a prelistener hook before each listener', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      @robot.hear /^message123$/, (response) ->\n+        expect(response.message.addedData).to.equal(\"added data\")\n+        done()\n+      listener = @robot.listeners[0]\n+      @robot.prelisten (hook) ->\n+        hook.message.addedData = \"added data\"\n+        expect(hook.listener).to.equal(listener)\n+        expect(hook.response.message).to.equal(testMessage)\n+      @robot.receive testMessage\n+\n+    it 'stops processing if a prelisten hook finishes', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      listener = sinon.spy()\n+      @robot.prelisten (hook) ->\n+        hook.finish()\n+      @robot.hear /^message123$/, listener\n+      @robot.receive testMessage\n+      expect(listener).to.not.have.been.calledOnce\n+      done()\n+\n+    it 'runs a prereply hook before each replied message', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      sender = @robot.adapter.send = sinon.spy()\n+      replier = @robot.adapter.reply = sinon.spy()\n+      @robot.hear /^message123$/, (response) ->\n+        response.send \"this sounds awesome\"\n+        response.send \"dump passwords to IRC lol\"\n+        response.reply \"more passwords, seriously?\", \"this is fine though\"\n+        done()\n+      @robot.prereply (hook) ->\n+        if hook.reply.text.match(/passwords/)\n+          hook.finish()\n+      @robot.receive testMessage\n+      expect(replier).to.have.been.calledOnce\n+      expect(sender).to.have.been.calledOnce\n+\n+    it 'allows changing the outgoing message', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      sender = @robot.adapter.send = sinon.spy()\n+      @robot.hear /^message123$/, (response) ->\n+        response.send \"dump passwords to IRC lol\"\n+        done()\n+      @robot.prereply (hook) ->\n+        if hook.reply.text.match(/passwords/)\n+          hook.reply.text = \"Sorry meatbag, no passwords.\"\n+      @robot.receive testMessage\n+      expect(sender.getCall(0).args[1]).to.equal(\"Sorry meatbag, no passwords.\")", "changes": 99}], "926": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fa45f35ce7452ba57b7970e60448fcafe11b64ac/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/fa45f35ce7452ba57b7970e60448fcafe11b64ac/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=fa45f35ce7452ba57b7970e60448fcafe11b64ac", "filename": "README.md", "sha": "8f3d18fe7fb6874766cf653bce3b3ece902d3eea", "additions": 2, "patch": "@@ -13,6 +13,8 @@ for details on getting up and running with your very own robot friend.\n In most cases, you'll probably never have to hack on this repo directly if you\n are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTING.md)\n \n+If you'd like to chat, drop by #hubot on FreeNode IRC.\n+\n ## License\n \n See the [LICENSE](LICENSE.md) file for license rights and limitations (MIT).", "changes": 2}], "927": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/93ab207cada92a2a5e7272b6ce768d6b9486ed10/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/93ab207cada92a2a5e7272b6ce768d6b9486ed10/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=93ab207cada92a2a5e7272b6ce768d6b9486ed10", "filename": "src/robot.coffee", "sha": "dc113ec116736e337e7eaa2b0bd572d6cff394b7", "additions": 2, "patch": "@@ -100,8 +100,9 @@ class Robot\n \n     if @alias\n       alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+      [a,b] = if name.length > alias.length then [name,alias] else [alias,name]\n       newRegex = new RegExp(\n-        \"^\\\\s*[@]?(?:#{alias}[:,]?|#{name}[:,]?)\\\\s*(?:#{pattern})\"\n+        \"^\\\\s*[@]?(?:#{a}[:,]?|#{b}[:,]?)\\\\s*(?:#{pattern})\"\n         modifiers\n       )\n     else", "changes": 3}], "929": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3a836ee9fc9d1795b9251ecb65c35c448a71b3d1/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/3a836ee9fc9d1795b9251ecb65c35c448a71b3d1/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=3a836ee9fc9d1795b9251ecb65c35c448a71b3d1", "filename": "package.json", "sha": "9cd85a0f4fef7d5281760da662166f15fadf1a33", "additions": 1, "patch": "@@ -12,7 +12,7 @@\n   \"licenses\": [\n     {\n       \"type\": \"MIT\",\n-      \"url\": \"https://raw.github.com/github/hubot/master/LICENSE\"\n+      \"url\": \"https://raw.github.com/github/hubot/master/LICENSE.md\"\n     }\n   ],\n   \"repository\": {", "changes": 2}], "930": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/8c719f458c3dfa119ee72e634583286621dec768/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/8c719f458c3dfa119ee72e634583286621dec768/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=8c719f458c3dfa119ee72e634583286621dec768", "filename": "docs/index.md", "sha": "1d81779bbe5cb77b0ac960df70cdbe06694c5db1", "additions": 1, "patch": "@@ -102,7 +102,7 @@ case-insensitive, and can be prefixed with `@` or suffixed with `:`. These are e\n \n ## Scripting\n \n-Hubot's power comes through scripting. Read [more about scripting](/docs/scripting/) for the deal on bending hubot to your will using code.\n+Hubot's power comes through scripting. Read [more about scripting](/docs/scripting.md) for the deal on bending hubot to your will using code.\n \n There are many community-contributed scripts available through [hubot-scripts](https://github.com/github/hubot-scripts). To use scripts from it:\n ", "changes": 2}], "931": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d25c0b78d00bc7f86a17a648ab10b4f895259ea9/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/d25c0b78d00bc7f86a17a648ab10b4f895259ea9/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=d25c0b78d00bc7f86a17a648ab10b4f895259ea9", "filename": "bin/hubot", "sha": "37531b99fd2918ab531f60fb70fc955fe8be221c", "additions": 3, "patch": "@@ -63,6 +63,9 @@ Parser.on \"config-check\", (opt) ->\n Parser.on \"version\", (opt, value) ->\n   Options.version = true\n \n+Parser.on (opt, value) ->\n+  console.warn \"Unknown option: #{opt}\"\n+\n Parser.parse process.argv\n \n unless process.platform is \"win32\"", "changes": 3}], "933": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/398f2c97adf26ca1870165e82b2ad37b8082e217/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/398f2c97adf26ca1870165e82b2ad37b8082e217/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=398f2c97adf26ca1870165e82b2ad37b8082e217", "filename": "docs/index.md", "sha": "4c5880f7f715daacc368b7cb4323e21d7be5c7ad", "additions": 3, "patch": "@@ -130,9 +130,9 @@ You can deploy hubot to Heroku, which is the officially supported method.\n Additionally you are able to deploy hubot to a UNIX-like system or Windows.\n Please note the support for deploying to Windows isn't officially supported.\n \n-* [Deploying Hubot onto Heroku](/docs/deploying/heroku/)\n-* [Deploying Hubot onto UNIX](/docs/deploying/unix/)\n-* [Deploying Hubot onto Windows](/docs/deploying/windows/)\n+* [Deploying Hubot onto Heroku](/docs/deploying/heroku.md)\n+* [Deploying Hubot onto UNIX](/docs/deploying/unix.md)\n+* [Deploying Hubot onto Windows](/docs/deploying/windows.md)\n \n ## Patterns\n ", "changes": 6}], "935": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/2e1c49ed4c3723596522989d8e5e170fbf23be8e/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/2e1c49ed4c3723596522989d8e5e170fbf23be8e/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=2e1c49ed4c3723596522989d8e5e170fbf23be8e", "filename": "docs/scripting.md", "sha": "8d31f8fdc39ba1a05ea318c26ac1465d43cbc254", "additions": 1, "patch": "@@ -161,6 +161,7 @@ A post looks like:\n     foo: 'bar'\n   })\n   robot.http(\"https://midnight-train\")\n+    .header('Content-Type', 'application/json')\n     .post(data) (err, res, body) ->\n       # your code here\n ```", "changes": 1}], "936": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3d2dd02b9043d7c5ff51d044295aa96b7e20c5b9/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3d2dd02b9043d7c5ff51d044295aa96b7e20c5b9/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=3d2dd02b9043d7c5ff51d044295aa96b7e20c5b9", "filename": "src/robot.coffee", "sha": "3e8dce45e03d353c15be83449372518cb1653ccb", "additions": 2, "patch": "@@ -261,9 +261,11 @@ class Robot\n       if packages instanceof Array\n         for pkg in packages\n           require(pkg)(@)\n+          @parseHelp(require.resolve(pkg))\n       else\n         for pkg, scripts of packages\n           require(pkg)(@, scripts)\n+          @parseHelp(require.resolve(pkg))\n     catch err\n       @logger.error \"Error loading scripts from npm package - #{err.stack}\"\n       process.exit(1)", "changes": 2}], "937": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/255557d691a20b6510858addd00b86036f66d2fb/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/255557d691a20b6510858addd00b86036f66d2fb/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=255557d691a20b6510858addd00b86036f66d2fb", "filename": "docs/index.md", "sha": "143c6faa6e631c4da9a955678240e686ca25334b", "additions": 2, "patch": "@@ -102,7 +102,7 @@ case-insensitive, and can be prefixed with `@` or suffixed with `:`. These are e\n \n ## Scripting\n \n-Hubot's power comes through scripting. Read [more about scripting](/docs/scripting/) for the deal on bending hubot to your will using code.\n+Hubot's power comes through scripting. Read [more about scripting](/docs/scripting.md) for the deal on bending hubot to your will using code.\n \n There are many community-contributed scripts available through [hubot-scripts](https://github.com/github/hubot-scripts). To use scripts from it:\n \n@@ -136,4 +136,4 @@ Please note the support for deploying to Windows isn't officially supported.\n \n ## Patterns\n \n-Using custom scripts, you can quickly customize Hubot to be the most life embettering robot he or she can be. Read [docs/patterns.md](/docs/patterns/) for some nifty tricks that may come in handy as you teach your hubot new skills.\n+Using custom scripts, you can quickly customize Hubot to be the most life embettering robot he or she can be. Read [docs/patterns.md](/docs/patterns.md) for some nifty tricks that may come in handy as you teach your hubot new skills.", "changes": 4}], "938": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/278ee5f0ba298a48a308443c14c6a12dad06fc2f/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/278ee5f0ba298a48a308443c14c6a12dad06fc2f/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=278ee5f0ba298a48a308443c14c6a12dad06fc2f", "filename": "bin/hubot", "sha": "ea52aee7bb8e705685e0455d189bb44387e4d9ff", "additions": 1, "patch": "@@ -73,6 +73,7 @@ if Options.create\n   console.error \"'hubot --create' is deprecated. Use the yeoman generator instead:\"\n   console.error \"    npm install -g yo generator-hubot\"\n   console.error \"    mkdir -p #{Options.path}\"\n+  console.error \"    cd #{Options.path}\"\n   console.error \"    yo hubot\"\n   console.error \"See https://github.com/github/hubot/blob/master/docs/README.md for more details on getting started.\"\n   process.exit 1", "changes": 1}], "942": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/2a71def3a9a2db90e631c6f8657869bae1ca3171/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/2a71def3a9a2db90e631c6f8657869bae1ca3171/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=2a71def3a9a2db90e631c6f8657869bae1ca3171", "filename": "docs/scripting.md", "sha": "cfb6dccbd71cfb87866775b95d6b6da86b8b0138", "additions": 1, "patch": "@@ -21,7 +21,7 @@ To use community scripts, place the name of the script in the `hubot-scripts.jso\n [\"redis-brain.coffee\", \"shipit.coffee\", \"whatis.coffee\", \"<new-script-name>.coffee\"]\n ```\n \n-(Please check the [script catalog](http://hubot-script-catalog.herokuapp.com) and the [hubot-scripts repo](https://github.com/github/hubot-scripts/tree/master/src/scripts) for scripts carefully crafted for you by lots of nice folks)\n+(Please check the [script catalog](http://hubot-script-catalog.herokuapp.com) and the [hubot-scripts organization](https://github.com/hubot-scripts) for scripts carefully crafted for you by lots of nice folks)\n \n ### NPM Packages\n ", "changes": 2}], "943": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/d79f1afd349759df50f10a832564ed56786e0093/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/d79f1afd349759df50f10a832564ed56786e0093/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=d79f1afd349759df50f10a832564ed56786e0093", "filename": "docs/adapters.md", "sha": "c8d37496a1bc45c853d9189e6d394ecd5ef12e1d", "additions": 2, "patch": "@@ -9,8 +9,8 @@ Adapters are the interface to the service you want your hubot to run on.\n \n Hubot includes two official adapters:\n \n-* [Shell](/docs/adapters/shell/), i.e. for use with development\n-* [Campfire](/docs/adapters/campfire/)\n+* [Shell](/docs/adapters/shell.md), i.e. for use with development\n+* [Campfire](/docs/adapters/campfire.md)\n \n ## Third-party Adapters\n ", "changes": 4}], "944": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/bfd243f9a8a112b89668ebe4413b1a8020352496/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/bfd243f9a8a112b89668ebe4413b1a8020352496/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=bfd243f9a8a112b89668ebe4413b1a8020352496", "filename": "docs/scripting.md", "sha": "b96f711180dbc58953c3f78eb1f4febf916af1e1", "additions": 1, "patch": "@@ -422,7 +422,7 @@ module.exports = (robot) ->\n \n ## HTTP Listener\n \n-Hubot includes support for the [express](http://expressjs.com/guide.html) web framework to serve up HTTP requests. It listens on the port specified by the `EXPRESS_PORT` or `PORT` environment variables (preferred in that order) and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EXPRESS_PASSWORD`. It can automatically serve static files by setting `EXPRESS_STATIC`.\n+Hubot includes support for the [express](http://expressjs.com) web framework to serve up HTTP requests. It listens on the port specified by the `EXPRESS_PORT` or `PORT` environment variables (preferred in that order) and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EXPRESS_PASSWORD`. It can automatically serve static files by setting `EXPRESS_STATIC`.\n \n The most common use of this is for providing HTTP end points for services with webhooks to push to, and have those show up in chat.\n ", "changes": 2}], "945": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/0dadc9bb911ec402e51190387a760083a989becc/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/0dadc9bb911ec402e51190387a760083a989becc/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=0dadc9bb911ec402e51190387a760083a989becc", "filename": "docs/scripting.md", "sha": "0ca8ecb46b7c3cc7b02441f4b6c4e43fef90568e", "additions": 2, "patch": "@@ -216,7 +216,7 @@ If you are talking to APIs, the easiest way is going to be JSON because it doesn\n     .get() (err, res, body) ->\n       # error checking code here\n \n-      data = JSON.parse(body)\n+      data = JSON.parse body\n       res.send \"#{data.passenger} taking midnight train going #{data.destination}\"\n ```\n \n@@ -234,7 +234,7 @@ It's possible to get non-JSON back, like if the API hit an error and it tries to\n \n       data = null\n       try\n-        data = JSON.parse(body)\n+        data = JSON.parse body\n       catch error\n        res.send \"Ran into an error parsing JSON :(\"\n        return", "changes": 4}], "947": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c7566736a24dbdbbf6721596fa81a92bd815c411/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/c7566736a24dbdbbf6721596fa81a92bd815c411/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=c7566736a24dbdbbf6721596fa81a92bd815c411", "filename": "docs/scripting.md", "sha": "6c1f5a9d45cedd785bd8dafb99404c983d991670", "additions": 1, "patch": "@@ -360,7 +360,7 @@ module.exports = (robot) ->\n \n ## Dependencies\n \n-Hubot uses [npm](https://github.com/isaacs/npm) to manage its dependencies. To additional packages, add them to `dependencies` in `package.json`. For example, to add lolimadeupthispackage 1.2.3, it'd look like:\n+Hubot uses [npm](https://github.com/isaacs/npm) to manage its dependencies. To add additional packages, add them to `dependencies` in `package.json`. For example, to add lolimadeupthispackage 1.2.3, it'd look like:\n \n ```json\n   \"dependencies\": {", "changes": 2}], "949": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/86b7b32e8645ac70e50eb893a09cabde2bc50f3f/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/86b7b32e8645ac70e50eb893a09cabde2bc50f3f/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=86b7b32e8645ac70e50eb893a09cabde2bc50f3f", "filename": "src/listener.coffee", "sha": "b3518bbcec45dcb77a840c9784593e251387268a", "additions": 1, "patch": "@@ -57,7 +57,7 @@ class TextListener extends Listener\n   # callback - A Function that is triggered if the incoming message matches.\n   constructor: (@robot, @regex, @options, @callback) ->\n     @matcher = (message) =>\n-      if message instanceof TextMessage\n+      if message.type is 'text'\n         message.match @regex\n     super @robot, @matcher, @options, @callback\n ", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/86b7b32e8645ac70e50eb893a09cabde2bc50f3f/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/86b7b32e8645ac70e50eb893a09cabde2bc50f3f/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=86b7b32e8645ac70e50eb893a09cabde2bc50f3f", "filename": "src/message.coffee", "sha": "d60a8560a4dfa20eaba63aa2cd691a94ee408b10", "additions": 10, "patch": "@@ -1,4 +1,6 @@\n class Message\n+  type: 'message'\n+\n   # Represents an incoming message from the chat.\n   #\n   # user - A User instance that sent the message.\n@@ -12,6 +14,8 @@ class Message\n     @done = true\n \n class TextMessage extends Message\n+  type: 'text'\n+\n   # Represents an incoming message from the chat.\n   #\n   # user - A User instance that sent the message.\n@@ -27,7 +31,7 @@ class TextMessage extends Message\n   # Returns a Match object or null.\n   match: (regex) ->\n     @text.match regex\n-  \n+\n   # String representation of a TextMessage\n   #\n   # Returns the message text\n@@ -40,22 +44,27 @@ class TextMessage extends Message\n # text - Always null.\n # id   - A String of the message ID.\n class EnterMessage extends Message\n+  type: 'enter'\n \n # Represents an incoming user exit notification.\n #\n # user - A User instance for the user who left.\n # text - Always null.\n # id   - A String of the message ID.\n class LeaveMessage extends Message\n+  type: 'leave'\n \n # Represents an incoming topic change notification.\n #\n # user - A User instance for the user who changed the topic.\n # text - A String of the new topic\n # id   - A String of the message ID.\n class TopicMessage extends TextMessage\n+  type: 'topic'\n \n class CatchAllMessage extends Message\n+  type: 'catchall'\n+\n   # Represents a message that no matchers matched.\n   #\n   # message - The original message.", "changes": 11}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/86b7b32e8645ac70e50eb893a09cabde2bc50f3f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/86b7b32e8645ac70e50eb893a09cabde2bc50f3f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=86b7b32e8645ac70e50eb893a09cabde2bc50f3f", "filename": "src/robot.coffee", "sha": "5fafc12090a033fbaa0539843cec3f5d56768ac7", "additions": 5, "patch": "@@ -137,7 +137,7 @@ class Robot\n   enter: (options, callback) ->\n     @listeners.push new Listener(\n       @,\n-      ((msg) -> msg instanceof EnterMessage),\n+      ((msg) -> msg.type is 'enter'),\n       options,\n       callback\n     )\n@@ -152,7 +152,7 @@ class Robot\n   leave: (options, callback) ->\n     @listeners.push new Listener(\n       @,\n-      ((msg) -> msg instanceof LeaveMessage),\n+      ((msg) -> msg.type is 'leave'),\n       options,\n       callback\n     )\n@@ -167,7 +167,7 @@ class Robot\n   topic: (options, callback) ->\n     @listeners.push new Listener(\n       @,\n-      ((msg) -> msg instanceof TopicMessage),\n+      ((msg) -> msg.type is 'topic'),\n       options,\n       callback\n     )\n@@ -212,7 +212,7 @@ class Robot\n \n     @listeners.push new Listener(\n       @,\n-      ((msg) -> msg instanceof CatchAllMessage),\n+      ((msg) -> msg.type is 'catchall'),\n       options,\n       ((msg) -> msg.message = msg.message.message; callback msg)\n     )\n@@ -233,7 +233,7 @@ class Robot\n         @emit('error', error, new @Response(@, message, []))\n \n         false\n-    if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n+    if message.type isnt 'catchall' and results.indexOf(true) is -1\n       @receive new CatchAllMessage(message)\n \n   # Public: Loads a file in path.", "changes": 10}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/86b7b32e8645ac70e50eb893a09cabde2bc50f3f/test/listener_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/86b7b32e8645ac70e50eb893a09cabde2bc50f3f/test/listener_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.coffee?ref=86b7b32e8645ac70e50eb893a09cabde2bc50f3f", "filename": "test/listener_test.coffee", "sha": "025b4e1e234f182effa4ad893438cfd34a8a7bc5", "additions": 7, "patch": "@@ -117,21 +117,21 @@ describe 'Listener', ->\n           testMessage = new TextMessage(@user, 'test')\n           testMessage.match = sinon.stub().returns(true)\n           testRegex = /test/\n- \n+\n           testListener = new TextListener(@robot, testRegex, callback)\n           result = testListener.matcher(testMessage)\n- \n+\n           expect(result).to.be.ok\n           expect(testMessage.match).to.have.been.calledWith(testRegex)\n- \n+\n         it 'does not match EnterMessages', ->\n           callback = sinon.spy()\n           testMessage = new EnterMessage(@user)\n-          testMessage.match = sinon.stub().returns(true)\n+          testMessage.match = sinon.stub().returns(true) # Invalid for a EnterMessage\n           testRegex = /test/\n- \n+\n           testListener = new TextListener(@robot, testRegex, callback)\n           result = testListener.matcher(testMessage)\n- \n+\n           expect(result).to.not.be.ok\n-          expect(testMessage.match).to.not.have.been.called\n+          expect(callback).to.not.have.been.called", "changes": 14}], "951": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/ee35970ec11ab41ef21d5e1072f82271aff9503c/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/ee35970ec11ab41ef21d5e1072f82271aff9503c/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=ee35970ec11ab41ef21d5e1072f82271aff9503c", "filename": "package.json", "sha": "687bf2fc98a927792f3cfdd4aa7e94e612abefdf", "additions": 1, "patch": "@@ -9,12 +9,7 @@\n     \"bot\"\n   ],\n   \"description\": \"A simple helpful robot for your Company\",\n-  \"licenses\": [\n-    {\n-      \"type\": \"MIT\",\n-      \"url\": \"https://raw.github.com/github/hubot/master/LICENSE.md\"\n-    }\n-  ],\n+  \"license\": \"MIT\",\n   \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"https://github.com/github/hubot.git\"", "changes": 7}], "955": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/acf594f561bcdeb2e0327e5b5172010e0a540b1a/docs/deploying/unix.md", "blob_url": "https://github.com/hubotio/hubot/blob/acf594f561bcdeb2e0327e5b5172010e0a540b1a/docs/deploying/unix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/unix.md?ref=acf594f561bcdeb2e0327e5b5172010e0a540b1a", "filename": "docs/deploying/unix.md", "sha": "34d51bd1f6963bc974c4e2e9b00981bd99b43744", "additions": 4, "patch": "@@ -53,11 +53,13 @@ really, you probably want some process monitoring using tools like\n [monit](http://mmonit.com/monit/),\n [god](http://godrb.com/),\n [bluepill](https://github.com/arya/bluepill),\n-[upstart](http://upstart.ubuntu.com/).\n+[upstart](http://upstart.ubuntu.com/),\n+[systemd](http://freedesktop.org/wiki/Software/systemd/).\n \n For starting at boot, you can create an init script for appropriate your UNIX\n distribution, or if you are using one the process monitoring tools above, make\n-sure it boots at startup.\n+sure it boots at startup. See the [examples](https://github.com/github/hubot/tree/master/examples)\n+for configuration examples.\n \n ## Recommendations\n ", "changes": 6}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/acf594f561bcdeb2e0327e5b5172010e0a540b1a/examples/hubot.service", "blob_url": "https://github.com/hubotio/hubot/blob/acf594f561bcdeb2e0327e5b5172010e0a540b1a/examples/hubot.service", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/examples/hubot.service?ref=acf594f561bcdeb2e0327e5b5172010e0a540b1a", "filename": "examples/hubot.service", "sha": "4f6bae2d62c1583fde477564367d9b1d01f1dbd5", "additions": 23, "patch": "@@ -0,0 +1,23 @@\n+; Hubot systemd service unit file\n+; Place in e.g. `/etc/systemd/system/hubot.service`, then `systemctl daemon-reload` and `service hubot start`.\n+\n+[Unit]\n+Description=Hubot\n+Requires=network.target\n+After=network.target\n+\n+[Service]\n+Type=simple\n+WorkingDirectory=/path/to/hubot\n+User=change-to-hubot-user\n+\n+Restart=always\n+RestartSec=10\n+\n+; Configure Hubot environment variables, make sure to use quotes around whitespace as shown below.\n+Environment=HUBOT_aaa=xxx \"HUBOT_bbb='yyy yyy'\"\n+\n+ExecStart=/path/to/hubot/bin/hubot --adapter zzz\n+\n+[Install]\n+WantedBy=multi-user.target", "changes": 23}], "956": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/d671a9e54cd9308c3c390ffa80e50576bc8d68bf/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/d671a9e54cd9308c3c390ffa80e50576bc8d68bf/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=d671a9e54cd9308c3c390ffa80e50576bc8d68bf", "filename": "README.md", "sha": "1d370667500ae44da5e994ede60404cfed268326", "additions": 2, "patch": "@@ -1,10 +1,8 @@\n # Hubot\n \n Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n-cool. He's extendable with\n-[old community scripts](https://github.com/github/hubot-scripts), or \n-[new community org](https://github.com/hubot-scripts/) and your own custom\n-scripts, and can work on [many different chat services](docs/adapters.md).\n+cool. He's [extendable with scripts](http://hubot.github.com/docs/#scripts) and can work on [many\n+different chat services](https://hubot.github.com/docs/adapters/).\n \n This repository provides a library that's distributed by `npm` that you\n use for building your own bots.  See the [documentation](http://hubot.github.com/docs)", "changes": 6}, {"status": "modified", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/d671a9e54cd9308c3c390ffa80e50576bc8d68bf/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/d671a9e54cd9308c3c390ffa80e50576bc8d68bf/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=d671a9e54cd9308c3c390ffa80e50576bc8d68bf", "filename": "docs/index.md", "sha": "fb855fc96873c070c0cda92030ce659867a5cd0a", "additions": 15, "patch": "@@ -100,25 +100,26 @@ case-insensitive, and can be prefixed with `@` or suffixed with `:`. These are e\n     @myhubot help\n     myhubot: help\n \n-## Scripting\n+## Scripts\n \n-Hubot's power comes through scripting. Read [more about scripting](/docs/scripting/) for the deal on bending hubot to your will using code.\n+Hubot's power comes through scripts. There are hundreds of scripts written and maintained by the community. Find them by searching the [NPM registry](https://www.npmjs.com/browse/keyword/hubot-scripts) for `hubot-scripts <your-search-term>`. For example:\n \n-There are many community-contributed scripts available through [hubot-scripts](https://github.com/github/hubot-scripts). To use scripts from it:\n+```\n+$ npm search hubot-scripts github\n+NAME                  DESCRIPTION\n+hubot-deployer        Giving Hubot the ability to deploy GitHub repos to PaaS providers hubot hubot-scripts hubot-gith\n+hubot-gh-release-pr   A hubot script to create GitHub's PR for release\n+hubot-github          Giving Hubot the ability to be a vital member of your github organization\n+\u2026\n+```\n \n-* Make sure `hubot-scripts` is listed as a dependency in `package.json` (it should by default)\n-* Update `hubot-scripts.json` to include the script you want in the list. Make sure the file is still valid JSON!\n-* Review the script to see if there's dependencies or configuration to add\n+To use a script from an NPM package:\n \n-In addition, there are scripts released as npm packages. If you find one you want to use:\n+1. Run `npm install --save <package-name>` to add the package as a dependency and install it.\n+2. Add the package to `external-scripts.json`.\n+3. Run `npm home <package-name>` to open a browser window for the homepage of the script, where you can find more information about configuring and installing the script.\n \n-1. Add the package to the list of `dependencies` into your `package.json`\n-2. `npm install` to make sure its installed\n-\n-To enable third-party scripts that you've added you will need to add the package\n-name as a double quoted string to the `external-scripts.json` file in this repo.\n-\n-**Please note that external scripts may become the default for hubot scripts in future releases.**\n+You can also put your own scripts under the `scripts/` directory. All scripts placed there are automatically loaded and ready to use with your hubot. Read more about customizing hubot by [writing your own scripts](/docs/scripting/).\n \n ## Adapters\n ", "changes": 29}, {"status": "modified", "deletions": 53, "raw_url": "https://github.com/hubotio/hubot/raw/d671a9e54cd9308c3c390ffa80e50576bc8d68bf/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/d671a9e54cd9308c3c390ffa80e50576bc8d68bf/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=d671a9e54cd9308c3c390ffa80e50576bc8d68bf", "filename": "docs/scripting.md", "sha": "233d8722f04ee55f59b2322c7df4af78e421c99f", "additions": 10, "patch": "@@ -3,55 +3,7 @@ permalink: /docs/scripting/index.html\n layout: docs\n ---\n \n-Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend.\n-\n-## Anatomy of script loading\n-\n-There are three main sources to load scripts from:\n-\n-* all scripts __bundled__ with your hubot installation under `scripts/` dir\n-* __community scripts__ specified in `hubot-scripts.json` and shipped in the `hubot-scripts` npm package\n-* scripts loaded from external __npm packages__ and specified in `external-scripts.json`\n-\n-### Community Scripts\n-\n-To use community scripts, place the name of the script in the `hubot-scripts.json` file. For example:\n-\n-```coffeescript\n-[\"redis-brain.coffee\", \"shipit.coffee\", \"whatis.coffee\", \"<new-script-name>.coffee\"]\n-```\n-\n-(Please check the [script catalog](http://hubot-script-catalog.herokuapp.com) and the [hubot-scripts organization](https://github.com/hubot-scripts) for scripts carefully crafted for you by lots of nice folks)\n-\n-### NPM Packages\n-\n-Another way is to install scripts via an npm package (you can check some of them [here](https://npmjs.org/search?q=hubot)).\n-\n-To load those scripts to your hubot installation, you need to place them in the `external-scripts.json` file after adding the required npm packages to the `package.json` dependency section.\n-\n-Here is an example of adding the [hubot-botriot](https://npmjs.org/package/hubot-botriot) npm package:\n-\n-```json\n-{\n- ...\n-\n-  \"dependencies\": {\n-    \"hubot\":         \">= 2.6.0 < 3.0.0\",\n-    \"hubot-scripts\": \">= 2.5.0 < 3.0.0\",\n-    \"hubot-botriot\": \"\",\n-  },\n-\n-...\n-}\n-```\n-\n-### Bundled Scripts\n-\n-Last but not least, you can put your own scripts under the `scripts/` directory. All scripts placed there are automatically loaded and ready to use with your hubot.\n-\n-You can also use this for customizing scripts from other sources. Just copy the *.coffee file into this directory and make whatever changes you'd like.\n-\n-Instructions for writing your own scripts can be found below.\n+Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend. There are [hundreds of scripts written and maintained by the community](/docs/#scripts) and it's easy to write your own.\n \n ## Anatomy of a script\n \n@@ -365,7 +317,6 @@ Hubot uses [npm](https://github.com/isaacs/npm) to manage its dependencies. To a\n ```json\n   \"dependencies\": {\n     \"hubot\":         \"2.5.5\",\n-    \"hubot-scripts\": \"2.4.6\",\n     \"lolimadeupthispackage\": \"1.2.3\"\n   },\n ```\n@@ -519,7 +470,7 @@ Using previous examples:\n         # rest of code here\n ```\n \n-For the second example, it's worth thinking about what messages the user would see. If you have an error handler that replies to the user, you may not need to add a custom message and could send back the error message provided to the `get()` request, but of course it depends on how public you want to be with your exception reporting. \n+For the second example, it's worth thinking about what messages the user would see. If you have an error handler that replies to the user, you may not need to add a custom message and could send back the error message provided to the `get()` request, but of course it depends on how public you want to be with your exception reporting.\n \n ## Documenting Scripts\n \n@@ -597,9 +548,15 @@ module.exports = (robot) ->\n       res.send \"#{name} is user - #{user}\"\n ```\n \n-## Script Load Order\n+## Script Loading\n+\n+There are three main sources to load scripts from:\n+\n+* all scripts __bundled__ with your hubot installation under `scripts/` directory\n+* __community scripts__ specified in `hubot-scripts.json` and shipped in the `hubot-scripts` npm package\n+* scripts loaded from external __npm packages__ and specified in `external-scripts.json`\n \n-Scripts are loaded from the `scripts/` directory. They are loaded in alphabetical order, so you can expect a consistent load order of scripts. For example:\n+Scripts loaded from the `scripts/` directory are loaded in alphabetical order, so you can expect a consistent load order of scripts. For example:\n \n * `scripts/1-first.coffee`\n * `scripts/_second.coffee`", "changes": 63}], "958": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b2a255904cc8e587350755dfc008218d5463c630/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/b2a255904cc8e587350755dfc008218d5463c630/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=b2a255904cc8e587350755dfc008218d5463c630", "filename": "docs/adapters.md", "sha": "aabc71df343577bdddf80b136dd68cbb1c98caac", "additions": 1, "patch": "@@ -47,4 +47,4 @@ to have yours added to the list:\n \n ## Writing Your Own Adapter\n \n-Interested in adding your own adapter? Check out our documentation for [developing adapters](/docs/adapters/development/)\n+Interested in adding your own adapter? Check out our documentation for [developing adapters](/docs/adapters/development.md)", "changes": 2}], "959": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6776a5062d49f8e4a74f08c9c9e82b71a9030ded/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/6776a5062d49f8e4a74f08c9c9e82b71a9030ded/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=6776a5062d49f8e4a74f08c9c9e82b71a9030ded", "filename": "CONTRIBUTING.md", "sha": "ec14ccd6953398f2b90634e2df5af557935d4831", "additions": 1, "patch": "@@ -5,7 +5,7 @@ We love pull requests. Here's a quick guide:\n 1. Check for [existing issues](https://github.com/github/hubot/issues) for duplicates and confirm that it hasn't been fixed already in the [master branch](https://github.com/github/hubot/commits/master)\n 2. Fork the repo, and clone it locally\n 3. `npm link` to make your cloned repo available to npm\n-4. Follow [Getting Started](docs/README.md) to generate a testbot\n+4. Follow [Getting Started](docs/index.md) to generate a testbot\n 5. `npm link hubot` in your newly created bot to use your hubot fork\n 6. Create a new branch for your contribution\n 7. Add [tests](test/) (run with `npm test`)", "changes": 2}], "961": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/465c700601c3537797c6f345e9e95b30bf5d3d58/docs/adapters/development.md", "blob_url": "https://github.com/hubotio/hubot/blob/465c700601c3537797c6f345e9e95b30bf5d3d58/docs/adapters/development.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/development.md?ref=465c700601c3537797c6f345e9e95b30bf5d3d58", "filename": "docs/adapters/development.md", "sha": "a7b14232dab6296cfe80d55103fd858cd6c1fdfb", "additions": 1, "patch": "@@ -11,9 +11,8 @@ All adapters inherit from the Adapter class in the `src/adapter.coffee` file.  T\n class Sample extends Adapter\n \n   constructor: ->\n-    @robot.logger.info \"Constructor\"\n     super\n-    \n+    @robot.logger.info \"Constructor\"\n \n   send: (envelope, strings...) ->\n     @robot.logger.info \"Send\"", "changes": 3}], "962": [{"status": "modified", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/dd800b9985fb0feda25c508e43097aaa14c96300/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/dd800b9985fb0feda25c508e43097aaa14c96300/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=dd800b9985fb0feda25c508e43097aaa14c96300", "filename": "docs/index.md", "sha": "a9888ffb438c16fbda7f0f30e8dd4b88fdb29696", "additions": 7, "patch": "@@ -59,33 +59,26 @@ is mostly useful for development. Make note of  `Hubot>`; this is the name your\n `respond` to with commands. For example, to list available commands:\n \n     % bin/hubot\n-    Hubot> hubot: help\n-    hubot <keyword> tweet - Returns a link to a tweet about <keyword>\n-    hubot <user> is a badass guitarist - assign a role to a user\n-    hubot <user> is not a badass guitarist - remove a role from a user\n+    hubot> hubot help\n+    hubot adapter - Reply with the adapter\n     hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.\n-    hubot convert me <expression> to <units> - Convert expression to given units.\n-    hubot die - End hubot process\n     hubot echo <text> - Reply back with <text>\n-    hubot fake event <event> - Triggers the <event> event for debugging reasons\n-    hubot help - Displays all of the help commands that Hubot knows about.\n+    hubot help - Displays all of the help commands that hubot knows about.\n     hubot help <query> - Displays all help commands that match <query>.\n     hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n     hubot map me <query> - Returns a map view of the area returned by `query`.\n     hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n     hubot mustache me <url> - Adds a mustache to the specified URL.\n     hubot ping - Reply with pong\n-    hubot show storage - Display the contents that are persisted in the brain\n-    hubot show users - Display all users that hubot knows about\n+    hubot pronounce <phrase> in <language> - Provides pronounciation of <phrase> (<language> is optional)\n+    hubot pug bomb N - get N pugs\n+    hubot pug me - Receive a pug\n     hubot the rules - Make sure hubot still knows the rules.\n     hubot time - Reply with current time\n     hubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.\n     hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n-    hubot who is <user> - see what roles a user has\n     hubot youtube me <query> - Searches YouTube for the query and returns the video embed link.\n-    hubot pug bomb N - get N pugs\n-    hubot pug me - Receive a pug\n-    hubot ship it - Display a motivation squirrel\n+    ship it - Display a motivation squirrel\n \n You almost definitely will want to change your hubot's name to add character. bin/hubot takes a `--name`:\n ", "changes": 21}], "964": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/875098762599af1c31d00207ffe6067134fe6e85/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/875098762599af1c31d00207ffe6067134fe6e85/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=875098762599af1c31d00207ffe6067134fe6e85", "filename": "CHANGELOG.md", "sha": "e8fa1ec0ccd85b702ef00a24398e24a8836971ef", "additions": 12, "patch": "@@ -1,3 +1,15 @@\n+v2.13.0\n+=======\n+\n+* Fix some website links\n+* Link to Freenode channel (#hubot)\n+* Fix license in package.json\n+* Various documentation updates\n+* More automated tests\n+* Add support for global http options (see https://github.com/github/hubot/blob/master/docs/patterns.md#forwarding-all-http-requests-through-a-proxy for details)\n+* Add support for listener metadata (see https://github.com/github/hubot/blob/master/docs/scripting.md#listener-metadata) for details\n+* Document using npm search for finding scripts\n+\n v2.12.0\n =======\n ", "changes": 12}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/875098762599af1c31d00207ffe6067134fe6e85/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/875098762599af1c31d00207ffe6067134fe6e85/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=875098762599af1c31d00207ffe6067134fe6e85", "filename": "package.json", "sha": "3a748b5dfeab9e1f88981319d87614fbdffe30af", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.12.0\",\n+  \"version\": \"2.13.0\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "966": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/92818146222396983bc2f338bb63b5eaa26ef47e/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/92818146222396983bc2f338bb63b5eaa26ef47e/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=92818146222396983bc2f338bb63b5eaa26ef47e", "filename": "docs/adapters.md", "sha": "651a9514178487a471afe7952afa85f7c2809e23", "additions": 3, "patch": "@@ -9,8 +9,8 @@ Adapters are the interface to the service you want your hubot to run on.\n \n Hubot includes two official adapters:\n \n-* [Shell](/docs/adapters/shell/), i.e. for use with development\n-* [Campfire](/docs/adapters/campfire/)\n+* [Shell](/docs/adapters/shell.md), i.e. for use with development\n+* [Campfire](/docs/adapters/campfire.md)\n \n ## Third-party Adapters\n \n@@ -47,4 +47,4 @@ to have yours added to the list:\n \n ## Writing Your Own Adapter\n \n-Interested in adding your own adapter? Check out our documentation for [developing adapters](/docs/adapters/development/)\n+Interested in adding your own adapter? Check out our documentation for [developing adapters](/docs/adapters/development.md)", "changes": 6}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/92818146222396983bc2f338bb63b5eaa26ef47e/docs/adapters/campfire.md", "blob_url": "https://github.com/hubotio/hubot/blob/92818146222396983bc2f338bb63b5eaa26ef47e/docs/adapters/campfire.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/campfire.md?ref=92818146222396983bc2f338bb63b5eaa26ef47e", "filename": "docs/adapters/campfire.md", "sha": "a1e904fb5ce58bfa3be3b25d7315894dbc0ef77b", "additions": 2, "patch": "@@ -16,7 +16,7 @@ Next, you will need to create a user on your Campfire account for your Hubot,\n then give it access so it can join to your rooms. You will need to create a room\n if you haven't already.\n \n-Hubot defaults to using its [shell](/docs/adapters/shell/), so to use Campfire instead, you\n+Hubot defaults to using its [shell](/docs/adapters/shell.md), so to use Campfire instead, you\n can run hubot with `-a campfire`:\n \n     % bin/hubot -a campfire\n@@ -73,6 +73,6 @@ Using PowerShell:\n \n     setx HUBOT_CAMPFIRE_TOKEN \"...\" /m\n \n-    setx HUBOT_CAMPFIRE_ROOMS \"123,321\" /m \n+    setx HUBOT_CAMPFIRE_ROOMS \"123,321\" /m\n \n     setx HUBOT_CAMPFIRE_ACCOUNT \"...\" /m", "changes": 4}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/92818146222396983bc2f338bb63b5eaa26ef47e/docs/deploying.md", "blob_url": "https://github.com/hubotio/hubot/blob/92818146222396983bc2f338bb63b5eaa26ef47e/docs/deploying.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying.md?ref=92818146222396983bc2f338bb63b5eaa26ef47e", "filename": "docs/deploying.md", "sha": "6383b29d4df4a19a325c08aa3b7ca85f4e27c3a3", "additions": 3, "patch": "@@ -3,6 +3,6 @@ permalink: /docs/deploying/index.html\n layout: docs\n ---\n \n-- [Heroku](/docs/deploying/heroku/)\n-- [Unix](/docs/deploying/unix/)\n-- [Windows](/docs/deploying/windows/)\n+- [Heroku](/docs/deploying/heroku.md)\n+- [Unix](/docs/deploying/unix.md)\n+- [Windows](/docs/deploying/windows.md)", "changes": 6}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/92818146222396983bc2f338bb63b5eaa26ef47e/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/92818146222396983bc2f338bb63b5eaa26ef47e/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=92818146222396983bc2f338bb63b5eaa26ef47e", "filename": "docs/deploying/heroku.md", "sha": "9d77e3dcbe2d927c343c5ac797858586a1d9bce1", "additions": 2, "patch": "@@ -32,7 +32,7 @@ Then create a Heroku application:\n \n Before you deploy the application, you'll need to configure some environment\n variables for hubot to use. The specific variables you'll need depends on which\n-[adapter](/docs/adapters/) and scripts you are using. For Campfire, with no other\n+[adapter](/docs/adapters.md) and scripts you are using. For Campfire, with no other\n scripts, you'd need to set the following environment variables:\n \n     % heroku config:set HUBOT_CAMPFIRE_ACCOUNT=yourcampfireaccount\n@@ -42,7 +42,7 @@ scripts, you'd need to set the following environment variables:\n In addition, there is one special environment variable for Heroku. The default hubot\n [Procfile](https://devcenter.heroku.com/articles/procfile) marks the process as\n a 'web' process type, in order to support serving http requests (more on that\n-in the [scripting docs](/docs/scripting/)). The downside of this is that dynos\n+in the [scripting docs](/docs/scripting.md)). The downside of this is that dynos\n will [idle after an hour of inactivity](https://devcenter.heroku.com/articles/dynos#dyno-idling).\n That means your hubot would leave after an hour of idle web traffic, and only rejoin when it does get traffic. This is extremely\n inconvenient since most interaction is done through chat, and hubot has to be online and in the room to respond to messages. To get around this,", "changes": 4}, {"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/92818146222396983bc2f338bb63b5eaa26ef47e/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/92818146222396983bc2f338bb63b5eaa26ef47e/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=92818146222396983bc2f338bb63b5eaa26ef47e", "filename": "docs/index.md", "sha": "b50a62b05613e6867b38f0afc5b98ca8aba46661", "additions": 8, "patch": "@@ -23,7 +23,7 @@ we wanted to make a bot called myhubot:\n     % yo hubot\n \n At this point, you'll be asked a few questions about who is creating the bot,\n-and which [adapter](/docs/adapters/) you'll be using. Adapters are hubot's way of\n+and which [adapter](/docs/adapters.md) you'll be using. Adapters are hubot's way of\n integrating with different chat providers.\n \n If you are using git, the generated directory includes a .gitignore, so you can\n@@ -54,7 +54,7 @@ Hubot needs Redis to persist data, so before you can start hubot on your own com\n     % bin/hubot\n     Hubot>\n \n-This starts hubot using the [shell adapter](/docs/adapters/shell/), which\n+This starts hubot using the [shell adapter](/docs/adapters/shell.md), which\n is mostly useful for development. Make note of  `Hubot>`; this is the name your hubot will\n `respond` to with commands. For example, to list available commands:\n \n@@ -112,22 +112,22 @@ To use a script from an NPM package:\n 2. Add the package to `external-scripts.json`.\n 3. Run `npm home <package-name>` to open a browser window for the homepage of the script, where you can find more information about configuring and installing the script.\n \n-You can also put your own scripts under the `scripts/` directory. All scripts placed there are automatically loaded and ready to use with your hubot. Read more about customizing hubot by [writing your own scripts](/docs/scripting/).\n+You can also put your own scripts under the `scripts/` directory. All scripts placed there are automatically loaded and ready to use with your hubot. Read more about customizing hubot by [writing your own scripts](/docs/scripting.md).\n \n ## Adapters\n \n-Hubot uses the adapter pattern to support multiple chat-backends. Here is a [list of available adapters](/docs/adapters/), along with details on how to configure them.\n+Hubot uses the adapter pattern to support multiple chat-backends. Here is a [list of available adapters](/docs/adapters.md), along with details on how to configure them.\n \n ## Deploying\n \n You can deploy hubot to Heroku, which is the officially supported method.\n Additionally you are able to deploy hubot to a UNIX-like system or Windows.\n Please note the support for deploying to Windows isn't officially supported.\n \n-* [Deploying Hubot onto Heroku](/docs/deploying/heroku/)\n-* [Deploying Hubot onto UNIX](/docs/deploying/unix/)\n-* [Deploying Hubot onto Windows](/docs/deploying/windows/)\n+* [Deploying Hubot onto Heroku](/docs/deploying/heroku.md)\n+* [Deploying Hubot onto UNIX](/docs/deploying/unix.md)\n+* [Deploying Hubot onto Windows](/docs/deploying/windows.md)\n \n ## Patterns\n \n-Using custom scripts, you can quickly customize Hubot to be the most life embettering robot he or she can be. Read [docs/patterns.md](/docs/patterns/) for some nifty tricks that may come in handy as you teach your hubot new skills.\n+Using custom scripts, you can quickly customize Hubot to be the most life embettering robot he or she can be. Read [docs/patterns.md](/docs/patterns.md) for some nifty tricks that may come in handy as you teach your hubot new skills.", "changes": 16}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/92818146222396983bc2f338bb63b5eaa26ef47e/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/92818146222396983bc2f338bb63b5eaa26ef47e/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=92818146222396983bc2f338bb63b5eaa26ef47e", "filename": "docs/patterns.md", "sha": "d992932367711a2f7736359144edf93ca42b4e95", "additions": 1, "patch": "@@ -14,7 +14,7 @@ When you rename Hubot, he will no longer respond to his former name. In order to\n \n Setting this up is very easy:\n \n-1. Create a [bundled script](/docs/scripting/) in the `scripts/` directory of your Hubot instance called `rename-hubot.coffee`\n+1. Create a [bundled script](/docs/scripting.md) in the `scripts/` directory of your Hubot instance called `rename-hubot.coffee`\n 2. Add the following code, modified for your needs:\n \n ```coffeescript", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/92818146222396983bc2f338bb63b5eaa26ef47e/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/92818146222396983bc2f338bb63b5eaa26ef47e/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=92818146222396983bc2f338bb63b5eaa26ef47e", "filename": "docs/scripting.md", "sha": "c815c67140d7c60034a16b734237c46fbf8517f0", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/scripting/index.html\n layout: docs\n ---\n \n-Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend. There are [hundreds of scripts written and maintained by the community](/docs/#scripts) and it's easy to write your own.\n+Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend. There are [hundreds of scripts written and maintained by the community](/docs/#scripts.md) and it's easy to write your own.\n \n ## Anatomy of a script\n ", "changes": 2}], "967": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/bff7308946df7f6c5ed3e5143a021f980b609d01/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/bff7308946df7f6c5ed3e5143a021f980b609d01/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=bff7308946df7f6c5ed3e5143a021f980b609d01", "filename": "test/robot_test.coffee", "sha": "8884d7e248463256b02a54870fcba826d977ac62", "additions": 96, "patch": "@@ -30,6 +30,7 @@ mockery.disable()\n describe 'Robot', ->\n   beforeEach ->\n     @robot = new Robot null, 'mock-adapter', yes, 'TestHubot'\n+    @robot.alias = 'Hubot'\n     @robot.run\n \n     @user = @robot.brain.userForId '1', {\n@@ -86,6 +87,101 @@ describe 'Robot', ->\n         @robot.respond /.*/, ->\n         expect(@robot.listeners).to.have.length(1)\n \n+      it \"responds to messages starting with robot's name\", ->\n+        callback    = sinon.spy()\n+        testMessage = new TextMessage(@user, @robot.name + 'message123')\n+        testRegex   = /.*/\n+\n+        @robot.listeners = []\n+        @robot.respond testRegex, callback\n+        @robot.receive testMessage\n+\n+        # Restore robot's state\n+        @robot.listeners = []\n+\n+        expect(callback).to.have.been.calledOnce\n+\n+      it \"responds to messages starting with robot's alias\", ->\n+        callback    = sinon.spy()\n+        testMessage = new TextMessage(@user, @robot.alias + 'message123')\n+        testRegex   = /.*/\n+\n+        @robot.listeners = []\n+        @robot.respond testRegex, callback\n+        @robot.receive testMessage\n+\n+        # Restore robot's state\n+        @robot.listeners = []\n+\n+        expect(callback).to.have.been.calledOnce\n+\n+      it 'does not reply to other messages', ->\n+        callback    = sinon.spy()\n+        testMessage = new TextMessage(@user, 'message123')\n+        testRegex   = /.*/\n+\n+        @robot.listeners = []\n+        @robot.respond testRegex, callback\n+        @robot.receive testMessage\n+\n+        # Restore robot's state\n+        @robot.listeners = []\n+\n+        expect(callback).to.have.not.been.called\n+\n+\n+      it 'matches properly when name is substring of alias', ->\n+        oldName  = @robot.name\n+        oldAlias = @robot.alias\n+\n+        testName  = 'Meg'\n+        testAlias = 'Megan'\n+        callback = sinon.spy (res) -> res.match[1]\n+        testMessage1 = new TextMessage(@user, testName  + ' message123')\n+        testMessage2 = new TextMessage(@user, testAlias + ' message123')\n+        testRegex = /(.*)/\n+\n+        @robot.name  = testName\n+        @robot.alias = testAlias\n+        @robot.listeners = []\n+        @robot.respond testRegex, callback\n+        @robot.receive testMessage1\n+        @robot.receive testMessage2\n+\n+        # Restore robot's state\n+        @robot.name  = oldName\n+        @robot.alias = oldAlias\n+        @robot.listeners = []\n+\n+        expect(callback).to.have.been.calledTwice\n+        expect(callback).to.have.always.returned('message123')\n+\n+      it 'matches properly when alias is substring of name', ->\n+        oldName  = @robot.name\n+        oldAlias = @robot.alias\n+\n+        testName  = 'Megan'\n+        testAlias = 'Meg'\n+        callback = sinon.spy (res) -> res.match[1]\n+        testMessage1 = new TextMessage(@user, testName  + ' message123')\n+        testMessage2 = new TextMessage(@user, testAlias + ' message123')\n+        testRegex = /(.*)/\n+\n+        @robot.name  = testName\n+        @robot.alias = testAlias\n+        @robot.listeners = []\n+        @robot.respond testRegex, callback\n+        @robot.receive testMessage1\n+        @robot.receive testMessage2\n+\n+        # Restore robot's state\n+        @robot.name  = oldName\n+        @robot.alias = oldAlias\n+        @robot.listeners = []\n+\n+        expect(callback).to.have.been.calledTwice\n+        expect(callback).to.have.always.returned('message123')\n+\n     describe '#enter', ->\n       it 'registers a new listener', ->\n         expect(@robot.listeners).to.have.length(0)", "changes": 96}], "969": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a4b497e9060046a03756ca369e9ac280796339d9/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/a4b497e9060046a03756ca369e9ac280796339d9/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=a4b497e9060046a03756ca369e9ac280796339d9", "filename": "CHANGELOG.md", "sha": "0895050f90cf14418e5d49b2347e737c7b3e4b8d", "additions": 8, "patch": "@@ -1,3 +1,11 @@\n+v2.13.1\n+=======\n+\n+* Fix documentation when running `hubot -c` to suggest correct usage of generator https://github.com/github/hubot/pull/938\n+* Fix respond listeners matching when robot alias is a substring of robot name https://github.com/github/hubot/pull/927\n+* Update bin/hubot to log a warning if called with non-existent options https://github.com/github/hubot/pull/931\n+\n+\n v2.13.0\n =======\n ", "changes": 8}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a4b497e9060046a03756ca369e9ac280796339d9/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/a4b497e9060046a03756ca369e9ac280796339d9/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=a4b497e9060046a03756ca369e9ac280796339d9", "filename": "package.json", "sha": "303909cf1291d742cf39a54ec51c21cdca157b8c", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.13.0\",\n+  \"version\": \"2.13.1\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "970": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a715457d078cba73debe684b505be95132a9dc13/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/a715457d078cba73debe684b505be95132a9dc13/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=a715457d078cba73debe684b505be95132a9dc13", "filename": "bin/hubot", "sha": "c55241ed773a46cded288e0a5627a0ca7369f515", "additions": 34, "patch": "@@ -104,9 +104,42 @@ else\n           scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n           robot.loadHubotScripts scriptsPath, scripts\n         catch err\n-          console.error \"Error parsing JSON data from hubot-scripts.json: #{err}\"\n+          robot.logger.error \"Error parsing JSON data from hubot-scripts.json: #{err}\"\n           process.exit(1)\n \n+        hubotScriptsWarning = \"Loading scripts from hubot-scripts.json is deprecated and \" +\n+          \"will be removed in 3.0 (https://github.com/github/hubot-scripts/issues/1113) \" +\n+          \"in favor of packages for each script.\\n\\n\"\n+\n+        if scripts.length is 0\n+          hubotScriptsWarning += \"Your hubot-scripts.json is empty, so you just need to remove it.\"\n+        else\n+          hubotScriptsReplacements = Path.resolve \"node_modules\", \"hubot-scripts\", \"replacements.json\"\n+\n+          if Fs.existsSync(hubotScriptsReplacements)\n+            hubotScriptsWarning += \"The following scripts have known replacements. Follow the link for installation instructions, then remove it from hubot-scripts.json:\\n\"\n+\n+            replacementsData = Fs.readFileSync(hubotScriptsReplacements)\n+            replacements = JSON.parse(replacementsData)\n+            scriptsWithoutReplacements = []\n+            for script in scripts\n+              replacement = replacements[script]\n+              if replacement\n+                hubotScriptsWarning += \"* #{script}: #{replacement}\\n\"\n+              else\n+                scriptsWithoutReplacements.push(script)\n+            hubotScriptsWarning += \"\\n\"\n+\n+            if scriptsWithoutReplacements.length > 0\n+              hubotScriptsWarning += \"The following scripts don't have (known) replacements. You can try searching https://www.npmjs.com/ or http://github.com/search or your favorite search engine. You can copy the script into your local scripts directory, or consider creating a new package to maintain yourself. If you find a replacement or create a package yourself, please post on https://github.com/github/hubot-scripts/issues/1641:\\n\"\n+              hubotScriptsWarning += \"* #{script}\\n\" for script in scriptsWithoutReplacements\n+\n+              hubotScriptsWarning += \"\\nYou an also try updating hubot-scripts to get the latest list of replacements: npm install --save hubot-scripts@latest\"\n+          else\n+              hubotScriptsWarning += \"To get a list of recommended replacements, update your hubot-scripts: npm install --save hubot-scripts@latest\"\n+\n+      robot.logger.warning hubotScriptsWarning\n+\n     externalScripts = Path.resolve \".\", \"external-scripts.json\"\n     if Fs.existsSync(externalScripts)\n       Fs.readFile externalScripts, (err, data) ->", "changes": 35}], "971": [{"status": "modified", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/fb19348911ef4e632b8f6052e0ee08b9ad1c419c/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/fb19348911ef4e632b8f6052e0ee08b9ad1c419c/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=fb19348911ef4e632b8f6052e0ee08b9ad1c419c", "filename": "docs/scripting.md", "sha": "980e03bfff2714ec4d4aea555f05d1d6b1a38de8", "additions": 27, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/scripting/index.html\n layout: docs\n ---\n \n-Hubot out of the box doesn't do too much, but it is an extensible, scriptable robot friend. There are [hundreds of scripts written and maintained by the community](/docs/#scripts.md) and it's easy to write your own.\n+Hubot out of the box doesn't do too much but it is an extensible, scriptable robot friend. There are [hundreds of scripts written and maintained by the community](/docs/#scripts.md) and it's easy to write your own.  You can create a custom script in hubot's `scripts` directory or [create a script package](#creating-a-script-package) for sharing with the community!\n \n ## Anatomy of a script\n \n@@ -566,27 +566,40 @@ Scripts loaded from the `scripts/` directory are loaded in alphabetical order, s\n \n Once you've built some new scripts to extend the abilities of your robot friend, you should consider sharing them with the world! At the minimum, you need to package up your script and submit it to the [Node.js Package Registry](http://npmjs.org). You should also review the best practices for sharing scripts below.\n \n+## See if a script already exists\n+\n+Start by [checking if an NPM package](/docs/index.md#scripts) for a script like yours already exists.  If you don't see an existing package that you can contribute to, then you can easily get started using the `hubot` script [yeoman](http://yeoman.io/) generator.\n+\n ## Creating A Script Package\n \n-Creating a script package for hubot is very simple. Start by creating a normal\n-`npm` package. Make sure you add a main file for the entry point (e.g.\n-`index.js` or `index.coffee`).\n+Creating a script package for hubot is very simple.  Start by installing the `hubot` [yeoman](http://yeoman.io/) generator:\n \n-In this entry point file you're going to have to export a function that hubot\n-will use to load the scripts in your package. Below is a simple example for\n-loading each script in a `./scripts` directory in your package.\n \n-```coffeescript\n-Path = require 'path'\n+```\n+% npm install -g yo generator-hubot\n+```\n \n-module.exports = (robot) ->\n-  path = Path.resolve __dirname, 'scripts'\n-  robot.load path\n+Once you've got the hubot generator installed, creating a hubot script is similar to creating a new hubot.  You create a directory for your hubot script and generate a new `hubot:script` in it.  For example, if we wanted to create a hubot script called \"my-awesome-script\":\n+\n+```\n+% mkdir hubot-my-awesome-script\n+% cd hubot-my-awesome-script\n+% yo hubot:script\n+```\n+\n+At this point, the you'll be asked a few questions about the author for the script, name of the script (which is guessed by the directory name), a short description, and keywords to find it (we suggest having at least `hubot, hubot-scripts` in this list).\n+\n+If you are using git, the generated directory includes a .gitignore, so you can initialize and add everything:\n+\n+```\n+% git init\n+% git add .\n+% git commit -m \"Initial commit\"\n ```\n \n-After you've built your `npm` package you can publish it to [npmjs](http://npmjs.org).\n+You now have a hubot script repository that's ready to roll! Feel free to crack open the pre-created `src/awesome-script.coffee` file and start building up your script! When you've got it ready, you can publish it to [npmjs](http://npmjs.org) by [following their documentation](https://docs.npmjs.com/getting-started/publishing-npm-packages)!\n \n-## Listener Metadata\n+# Listener Metadata\n \n In addition to a regular expression and callback, the `hear` and `respond` functions also accept an optional options Object which can be used to attach arbitrary metadata to the generated Listener object. This metadata allows for easy extension of your script's behavior without modifying the script package.\n ", "changes": 41}], "973": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dfd44e54ac5c130d11e836b450c9c8dc04140bfd/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/dfd44e54ac5c130d11e836b450c9c8dc04140bfd/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=dfd44e54ac5c130d11e836b450c9c8dc04140bfd", "filename": "docs/adapters.md", "sha": "537355cc0de42300b743c96b087577909f398430", "additions": 1, "patch": "@@ -35,6 +35,7 @@ to have yours added to the list:\n * [ChatWork](https://github.com/akiomik/hubot-chatwork)\n * [QQ](https://github.com/xhan/qqbot)\n * [AIM](https://github.com/shaundubuque/hubot-aim)\n+* [Rocket.Chat](https://github.com/RocketChat/hubot-rocketchat)\n * [Slack](https://github.com/tinyspeck/hubot-slack)\n * [Lingr](https://github.com/miyagawa/hubot-lingr)\n * [Gitter](https://github.com/huafu/hubot-gitter2)", "changes": 1}], "974": [{"status": "modified", "deletions": 18, "raw_url": "https://github.com/hubotio/hubot/raw/455dff546b8e63de9481ac45119dddbc583766db/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/455dff546b8e63de9481ac45119dddbc583766db/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=455dff546b8e63de9481ac45119dddbc583766db", "filename": "docs/adapters.md", "sha": "3a62070aa42ac165d1faeb29a373461e19178ac5", "additions": 19, "patch": "@@ -18,33 +18,34 @@ Third-party adapters are available as `npm` packages. Here is a list of known\n adapters, but please [submit an issue](https://github.com/github/hubot/issues)\n to have yours added to the list:\n \n+* [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.\n+\n+* [AIM](https://github.com/shaundubuque/hubot-aim)\n+* [ChatWork](https://github.com/akiomik/hubot-chatwork)\n+* [Fleep](https://github.com/anroots/hubot-fleep)\n * [Flowdock](https://github.com/flowdock/hubot-flowdock)\n+* [Gitter](https://github.com/huafu/hubot-gitter2)\n+* [Gtalk](https://github.com/atmos/hubot-gtalk)\n+* [Hall](https://github.com/Hall/hubot-hall)\n * [HipChat](https://github.com/hipchat/hubot-hipchat)\n+* [iMessage](https://github.com/lazerwalker/hubot-imessage)\n * [IRC](https://github.com/nandub/hubot-irc)\n-* [Partychat](https://github.com/iangreenleaf/hubot-partychat-hooks)\n-* [Talker](https://github.com/unixcharles/hubot-talker)\n-* [Twilio](https://github.com/jkarmel/hubot-twilio)\n-* [Twitter](https://github.com/MathildeLemee/hubot-twitter)\n-* [XMPP](https://github.com/markstory/hubot-xmpp)\n-* [Gtalk](https://github.com/atmos/hubot-gtalk)\n-* [Yammer](https://github.com/athieriot/hubot-yammer)\n-* [Skype](https://github.com/netpro2k/hubot-skype)\n * [Jabbr](https://github.com/smoak/hubot-jabbr)\n-* [iMessage](https://github.com/lazerwalker/hubot-imessage)\n-* [Hall](https://github.com/Hall/hubot-hall)\n-* [ChatWork](https://github.com/akiomik/hubot-chatwork)\n+* [Let's Chat](https://github.com/sdelements/hubot-lets-chat)\n+* [Lingr](https://github.com/miyagawa/hubot-lingr)\n * [QQ](https://github.com/xhan/qqbot)\n-* [AIM](https://github.com/shaundubuque/hubot-aim)\n+* [Partychat](https://github.com/iangreenleaf/hubot-partychat-hooks)\n * [Rocket.Chat](https://github.com/RocketChat/hubot-rocketchat)\n * [Slack](https://github.com/tinyspeck/hubot-slack)\n-* [Lingr](https://github.com/miyagawa/hubot-lingr)\n-* [Gitter](https://github.com/huafu/hubot-gitter2)\n-* [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.\n-* [Visual Studio Online](https://github.com/scrumdod/hubot-VSOnline)\n+* [Skype](https://github.com/netpro2k/hubot-skype)\n+* [Talker](https://github.com/unixcharles/hubot-talker)\n+* [Twilio](https://github.com/jkarmel/hubot-twilio)\n+* [Twitter](https://github.com/MathildeLemee/hubot-twitter)\n * [Typetalk](https://github.com/nulab/hubot-typetalk)\n-* [Fleep](https://github.com/anroots/hubot-fleep)\n-* [Let's Chat](https://github.com/sdelements/hubot-lets-chat)\n * [VictorOps](https://github.com/victorops/hubot-victorops)\n+* [Visual Studio Online](https://github.com/scrumdod/hubot-VSOnline)\n+* [XMPP](https://github.com/markstory/hubot-xmpp)\n+* [Yammer](https://github.com/athieriot/hubot-yammer)\n \n ## Writing Your Own Adapter\n ", "changes": 37}], "975": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1f3159278590b4292f669ab9e18ee7a17704654c/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1f3159278590b4292f669ab9e18ee7a17704654c/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=1f3159278590b4292f669ab9e18ee7a17704654c", "filename": "src/robot.coffee", "sha": "33ac4655192a25a152980710bd314ecc91c694fb", "additions": 10, "patch": "@@ -91,6 +91,15 @@ class Robot\n   #\n   # Returns nothing.\n   respond: (regex, options, callback) ->\n+    @listeners.push new TextListener(@, @respondPattern(regex), options, callback)\n+\n+  # Private: Build a regular expression that matches messages addressed\n+  # directly to the robot\n+  #\n+  # regex - A RegExp for the message part that follows the robot's name/alias\n+  #\n+  # Returns RegExp.\n+  respondPattern: (regex) ->\n     re = regex.toString().split('/')\n     re.shift()\n     modifiers = re.pop()\n@@ -116,7 +125,7 @@ class Robot\n         modifiers\n       )\n \n-    @listeners.push new TextListener(@, newRegex, options, callback)\n+    newRegex\n \n   # Public: Adds a Listener that triggers when anyone enters the room.\n   #", "changes": 11}, {"status": "modified", "deletions": 89, "raw_url": "https://github.com/hubotio/hubot/raw/1f3159278590b4292f669ab9e18ee7a17704654c/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1f3159278590b4292f669ab9e18ee7a17704654c/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=1f3159278590b4292f669ab9e18ee7a17704654c", "filename": "test/robot_test.coffee", "sha": "ed8350b3469ea4fcaa20fbabc952181fae1e0685", "additions": 54, "patch": "@@ -75,112 +75,77 @@ describe 'Robot', ->\n         httpClient = @robot.http('http://localhost', agent: agentB)\n         expect(httpClient.options.agent).to.equal(agentB)\n \n-    describe '#hear', ->\n-      it 'registers a new listener', ->\n-        expect(@robot.listeners).to.have.length(0)\n-        @robot.hear /.*/, ->\n-        expect(@robot.listeners).to.have.length(1)\n+    describe '#respondPattern', ->\n+      it 'matches messages starting with robot\\'s name', ->\n+        testMessage = @robot.name + 'message123'\n+        testRegex   = /(.*)/\n \n-    describe '#respond', ->\n-      it 'registers a new listener', ->\n-        expect(@robot.listeners).to.have.length(0)\n-        @robot.respond /.*/, ->\n-        expect(@robot.listeners).to.have.length(1)\n+        pattern = @robot.respondPattern testRegex\n+        expect(testMessage).to.match(pattern)\n+        match = testMessage.match(pattern)[1]\n+        expect(match).to.equal('message123')\n \n-      it \"responds to messages starting with robot's name\", ->\n-        callback    = sinon.spy()\n-        testMessage = new TextMessage(@user, @robot.name + 'message123')\n-        testRegex   = /.*/\n+      it 'matches messages starting with robot\\'s alias', ->\n+        testMessage = @robot.alias + 'message123'\n+        testRegex   = /(.*)/\n \n-        @robot.listeners = []\n-        @robot.respond testRegex, callback\n-        @robot.receive testMessage\n+        pattern = @robot.respondPattern testRegex\n+        expect(testMessage).to.match(pattern)\n+        match = testMessage.match(pattern)[1]\n+        expect(match).to.equal('message123')\n \n-        # Restore robot's state\n-        @robot.listeners = []\n-\n-        expect(callback).to.have.been.calledOnce\n-\n-      it \"responds to messages starting with robot's alias\", ->\n-        callback    = sinon.spy()\n-        testMessage = new TextMessage(@user, @robot.alias + 'message123')\n-        testRegex   = /.*/\n-\n-        @robot.listeners = []\n-        @robot.respond testRegex, callback\n-        @robot.receive testMessage\n-\n-        # Restore robot's state\n-        @robot.listeners = []\n-\n-        expect(callback).to.have.been.calledOnce\n-\n-      it 'does not reply to other messages', ->\n-        callback    = sinon.spy()\n-        testMessage = new TextMessage(@user, 'message123')\n-        testRegex   = /.*/\n-\n-        @robot.listeners = []\n-        @robot.respond testRegex, callback\n-        @robot.receive testMessage\n-\n-        # Restore robot's state\n-        @robot.listeners = []\n-\n-        expect(callback).to.have.not.been.called\n+      it 'does not match unaddressed messages', ->\n+        testMessage = 'message123'\n+        testRegex   = /(.*)/\n \n+        pattern = @robot.respondPattern testRegex\n+        expect(testMessage).to.not.match(pattern)\n \n       it 'matches properly when name is substring of alias', ->\n-        oldName  = @robot.name\n-        oldAlias = @robot.alias\n-\n-        testName  = 'Meg'\n-        testAlias = 'Megan'\n-        callback = sinon.spy (res) -> res.match[1]\n-        testMessage1 = new TextMessage(@user, testName  + ' message123')\n-        testMessage2 = new TextMessage(@user, testAlias + ' message123')\n+        @robot.name  = 'Meg'\n+        @robot.alias = 'Megan'\n+        testMessage1 = @robot.name  + ' message123'\n+        testMessage2 = @robot.alias + ' message123'\n         testRegex = /(.*)/\n \n-        @robot.name  = testName\n-        @robot.alias = testAlias\n-        @robot.listeners = []\n-        @robot.respond testRegex, callback\n-        @robot.receive testMessage1\n-        @robot.receive testMessage2\n+        pattern = @robot.respondPattern testRegex\n \n-        # Restore robot's state\n-        @robot.name  = oldName\n-        @robot.alias = oldAlias\n-        @robot.listeners = []\n+        expect(testMessage1).to.match(pattern)\n+        match1 = testMessage1.match(pattern)[1]\n+        expect(match1).to.equal('message123')\n \n-        expect(callback).to.have.been.calledTwice\n-        expect(callback).to.have.always.returned('message123')\n+        expect(testMessage2).to.match(pattern)\n+        match2 = testMessage2.match(pattern)[1]\n+        expect(match2).to.equal('message123')\n \n       it 'matches properly when alias is substring of name', ->\n-        oldName  = @robot.name\n-        oldAlias = @robot.alias\n-\n-        testName  = 'Megan'\n-        testAlias = 'Meg'\n-        callback = sinon.spy (res) -> res.match[1]\n-        testMessage1 = new TextMessage(@user, testName  + ' message123')\n-        testMessage2 = new TextMessage(@user, testAlias + ' message123')\n+        @robot.name  = 'Megan'\n+        @robot.alias = 'Meg'\n+        testMessage1 = @robot.name  + ' message123'\n+        testMessage2 = @robot.alias + ' message123'\n         testRegex = /(.*)/\n \n-        @robot.name  = testName\n-        @robot.alias = testAlias\n-        @robot.listeners = []\n-        @robot.respond testRegex, callback\n-        @robot.receive testMessage1\n-        @robot.receive testMessage2\n+        pattern = @robot.respondPattern testRegex\n \n-        # Restore robot's state\n-        @robot.name  = oldName\n-        @robot.alias = oldAlias\n-        @robot.listeners = []\n+        expect(testMessage1).to.match(pattern)\n+        match1 = testMessage1.match(pattern)[1]\n+        expect(match1).to.equal('message123')\n+\n+        expect(testMessage2).to.match(pattern)\n+        match2 = testMessage2.match(pattern)[1]\n+        expect(match2).to.equal('message123')\n \n-        expect(callback).to.have.been.calledTwice\n-        expect(callback).to.have.always.returned('message123')\n+    describe '#hear', ->\n+      it 'registers a new listener', ->\n+        expect(@robot.listeners).to.have.length(0)\n+        @robot.hear /.*/, ->\n+        expect(@robot.listeners).to.have.length(1)\n+\n+    describe '#respond', ->\n+      it 'registers a new listener', ->\n+        expect(@robot.listeners).to.have.length(0)\n+        @robot.respond /.*/, ->\n+        expect(@robot.listeners).to.have.length(1)\n \n     describe '#enter', ->\n       it 'registers a new listener', ->", "changes": 143}], "978": [{"status": "removed", "deletions": 24, "raw_url": "https://github.com/hubotio/hubot/raw/54c6be9a8857521964024a65a7d0358da82f3de6/Makefile", "blob_url": "https://github.com/hubotio/hubot/blob/54c6be9a8857521964024a65a7d0358da82f3de6/Makefile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Makefile?ref=54c6be9a8857521964024a65a7d0358da82f3de6", "filename": "Makefile", "sha": "042ab88cd2444a93d1b83765e139db3d9978666b", "additions": 0, "patch": "@@ -1,24 +0,0 @@\n-NPM_EXECUTABLE_HOME := node_modules/.bin\n-\n-PATH := ${NPM_EXECUTABLE_HOME}:${PATH}\n-\n-test: deps\n-\t@script/test\n-\n-dev: generate-js\n-\t@coffee -wc --bare -o lib src/*.coffee\n-\n-generate-js:\n-\t@find src -name '*.coffee' | xargs coffee -c -o lib\n-\n-package:\n-\t@bin/hubot -c hubot\n-\t@chmod 0755 hubot/bin/hubot\n-\n-remove-js:\n-\t@rm -fr lib/\n-\n-deps:\n-\n-.PHONY: all\n-", "changes": 24}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/41089fd293a1b29db262bdbd9edf51e66277cce2/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/41089fd293a1b29db262bdbd9edf51e66277cce2/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=41089fd293a1b29db262bdbd9edf51e66277cce2", "filename": "package.json", "sha": "b4d49e18dbf58a8e6278e796b87b1cb10df9b0a8", "additions": 13, "patch": "@@ -26,11 +26,13 @@\n     \"scoped-http-client\": \"0.11.0\"\n   },\n   \"devDependencies\": {\n+    \"generator-hubot\": \"^0.3.1\",\n     \"hubot-mock-adapter\": \"^1.0.0\",\n     \"coffee-errors\": \"0.8.6\",\n     \"mocha\": \"^2.1.0\",\n     \"mockery\": \"^1.4.0\",\n-    \"sinon-chai\": \"^2.6.0\"\n+    \"sinon-chai\": \"^2.6.0\",\n+    \"yo\": \"^1.4.7\"\n   },\n   \"engines\": {\n     \"node\": \">= 0.8.x\",\n@@ -41,6 +43,15 @@\n     \"hubot\": \"./bin/hubot\"\n   },\n   \"scripts\": {\n-    \"test\": \"./script/test\"\n+    \"clean\": \"rm -rf lib/\",\n+    \"preinstall\": \"script/dotenv\",\n+    \"prestart\": \"script/dotenv\",\n+    \"start\": \"bin/hubot\",\n+    \"pretest\": \"script/dotenv\",\n+    \"test\": \"mocha --require coffee-errors --compilers coffee:coffee-script\",\n+    \"test:smoke\": \"coffee src/**/*.coffee\",\n+    \"compile\": \"coffee --compile --bare --output lib src\",\n+    \"compile:watch\": \"coffee --compile --bare --output lib --watch src\",\n+    \"package\": \"mkdir -p hubot && cd hubot && yo hubot --force --no-insight\"\n   }\n }", "changes": 15}, {"status": "modified", "deletions": 16, "raw_url": "https://github.com/hubotio/hubot/raw/41089fd293a1b29db262bdbd9edf51e66277cce2/script/bootstrap", "blob_url": "https://github.com/hubotio/hubot/blob/41089fd293a1b29db262bdbd9edf51e66277cce2/script/bootstrap", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/bootstrap?ref=41089fd293a1b29db262bdbd9edf51e66277cce2", "filename": "script/bootstrap", "sha": "1aa4730e6fa02c3270c92e18fe31a392584c6e14", "additions": 1, "patch": "@@ -1,18 +1,3 @@\n-#!/bin/bash\n-\n-# Make sure everything is development forever\n-export NODE_ENV=development\n-\n-# Load environment specific environment variables\n-if [ -f .env ]; then\n-  source .env\n-fi\n-\n-if [ -f .env.${NODE_ENV} ]; then\n-  source .env.${NODE_ENV}\n-fi\n+#!/usr/bin/env bash\n \n npm install\n-\n-# Make sure mocha and coffee are in the PATH\n-export PATH=\"node_modules/.bin:$PATH\"", "changes": 17}, {"status": "removed", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/54c6be9a8857521964024a65a7d0358da82f3de6/script/cibuild", "blob_url": "https://github.com/hubotio/hubot/blob/54c6be9a8857521964024a65a7d0358da82f3de6/script/cibuild", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/cibuild?ref=54c6be9a8857521964024a65a7d0358da82f3de6", "filename": "script/cibuild", "sha": "a8eba550fa196771f3b9ffae0849f2eb921eb0b2", "additions": 0, "patch": "@@ -1,3 +0,0 @@\n-#!/usr/bin/env bash\n-\n-make test", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/41089fd293a1b29db262bdbd9edf51e66277cce2/script/dotenv", "blob_url": "https://github.com/hubotio/hubot/blob/41089fd293a1b29db262bdbd9edf51e66277cce2/script/dotenv", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/dotenv?ref=41089fd293a1b29db262bdbd9edf51e66277cce2", "filename": "script/dotenv", "sha": "597b1c87e03c5e42d4c95f8bede150106ff2c34a", "additions": 13, "patch": "@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+\n+# Make sure everything is development forever\n+export NODE_ENV=development\n+\n+# Load environment specific environment variables\n+if [ -f .env ]; then\n+  source .env\n+fi\n+\n+if [ -f .env.${NODE_ENV} ]; then\n+  source .env.${NODE_ENV}\n+fi", "changes": 13}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/41089fd293a1b29db262bdbd9edf51e66277cce2/script/server", "blob_url": "https://github.com/hubotio/hubot/blob/41089fd293a1b29db262bdbd9edf51e66277cce2/script/server", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/server?ref=41089fd293a1b29db262bdbd9edf51e66277cce2", "filename": "script/server", "sha": "e23532137c68458f6150c39613a30791411f5397", "additions": 1, "patch": "@@ -1,7 +1,3 @@\n #!/usr/bin/env bash\n \n-set -e\n-\n-source script/bootstrap\n-\n-bin/hubot \"$@\"\n+npm start -- \"$@\"", "changes": 6}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/41089fd293a1b29db262bdbd9edf51e66277cce2/script/smoke-test", "blob_url": "https://github.com/hubotio/hubot/blob/41089fd293a1b29db262bdbd9edf51e66277cce2/script/smoke-test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/smoke-test?ref=41089fd293a1b29db262bdbd9edf51e66277cce2", "filename": "script/smoke-test", "sha": "84ba0df8e99ed4b537750ed64cebd0c1671a0331", "additions": 1, "patch": "@@ -1,5 +1,3 @@\n #!/usr/bin/env bash\n \n-set -ex\n-\n-coffee src/**/*.coffee\n+npm run test:smoke", "changes": 4}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/41089fd293a1b29db262bdbd9edf51e66277cce2/script/test", "blob_url": "https://github.com/hubotio/hubot/blob/41089fd293a1b29db262bdbd9edf51e66277cce2/script/test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/test?ref=41089fd293a1b29db262bdbd9edf51e66277cce2", "filename": "script/test", "sha": "80a8ae954b4e22b2f8b4e07e5fdaa518dc695658", "additions": 2, "patch": "@@ -1,4 +1,3 @@\n-#!/bin/bash\n+#!/usr/bin/env bash\n \n-source script/bootstrap\n-mocha --require coffee-errors --compilers coffee:coffee-script \"$@\"\n+npm test -- \"$@\"", "changes": 5}], "980": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/512155bc9f2b1cac7e4969cb047f40c4785c8a61/.gitignore", "blob_url": "https://github.com/hubotio/hubot/blob/512155bc9f2b1cac7e4969cb047f40c4785c8a61/.gitignore", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.gitignore?ref=512155bc9f2b1cac7e4969cb047f40c4785c8a61", "filename": ".gitignore", "sha": "87d46e6aab355dff1f8e63e2de4bdc0d071fe7b2", "additions": 1, "patch": "@@ -1,2 +1,3 @@\n node_modules\n .hubot_history\n+.node-version", "changes": 1}], "981": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c0580750ddf7a7e1023bc520dc62df2a46099d20/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/c0580750ddf7a7e1023bc520dc62df2a46099d20/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=c0580750ddf7a7e1023bc520dc62df2a46099d20", "filename": "CHANGELOG.md", "sha": "b51cdb6e57c8f22440f8c79c4156db0aa434a7b3", "additions": 7, "patch": "@@ -1,11 +1,17 @@\n+v2.13.2\n+=======\n+\n+* Minor documentation updates\n+* Add Robot.respondPattern private to improve testability https://github.com/github/hubot/pull/975\n+* Ignore .node-version so it isn't included in releases https://github.com/github/hubot/pull/980\n+\n v2.13.1\n =======\n \n * Fix documentation when running `hubot -c` to suggest correct usage of generator https://github.com/github/hubot/pull/938\n * Fix respond listeners matching when robot alias is a substring of robot name https://github.com/github/hubot/pull/927\n * Update bin/hubot to log a warning if called with non-existent options https://github.com/github/hubot/pull/931\n \n-\n v2.13.0\n =======\n ", "changes": 8}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c0580750ddf7a7e1023bc520dc62df2a46099d20/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/c0580750ddf7a7e1023bc520dc62df2a46099d20/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=c0580750ddf7a7e1023bc520dc62df2a46099d20", "filename": "package.json", "sha": "7f0ce46962c8c0d8a058d09bd2789a5f52f862f0", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.13.1\",\n+  \"version\": \"2.13.2\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "982": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/59ea1952a1f6b28f815381dcee3f55549bce52a1/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/59ea1952a1f6b28f815381dcee3f55549bce52a1/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=59ea1952a1f6b28f815381dcee3f55549bce52a1", "filename": "docs/index.md", "sha": "368cac4c0801ae0826c4721c657bbf2295e91d17", "additions": 1, "patch": "@@ -6,10 +6,7 @@ layout: docs\n \n ## Getting Started With Hubot\n \n-You will need [node.js](http://nodejs.org/) and [npm](https://npmjs.org/). Joyent has\n-an [excellent blog post on how to get those installed](http://joyent.com/blog/installing-node-and-npm), so we'll omit those details here.\n-\n-Once node and npm are ready, we can install the hubot generator:\n+You will need [node.js and npm](https://docs.npmjs.com/getting-started/installing-node). Once those are installed, we can install the hubot generator:\n \n     %  npm install -g yo generator-hubot\n ", "changes": 5}], "984": [{"status": "modified", "deletions": 39, "raw_url": "https://github.com/hubotio/hubot/raw/59b4b8ac18471366772139c2e81a830546b967d3/docs/deploying/azure.md", "blob_url": "https://github.com/hubotio/hubot/blob/59b4b8ac18471366772139c2e81a830546b967d3/docs/deploying/azure.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/azure.md?ref=59b4b8ac18471366772139c2e81a830546b967d3", "filename": "docs/deploying/azure.md", "sha": "a07a13414a36875afea5c0328c090b16888f05b9", "additions": 35, "patch": "@@ -4,7 +4,7 @@ layout: docs\n ---\n \n If you've been following along with [Getting Started](../README.md), it's time to deploy so you can use it beyond just your local machine.\n-[Azure](http://http://azure.microsoft.com/) is a somewhat easy and probably unsupported way to deploy hubot.\n+[Azure](http://azure.microsoft.com/) is a way to deploy hubot as an alternative to [Heroku](/docs/deploying/heroku.md).\n \n You will need to install the azure-cli via npm after you have follow the initial instructions for your hubot.\n \n@@ -16,66 +16,62 @@ Inside your new hubot directory, make sure you've created a git repository, and\n     % git add .\n     % git commit -m \"Initial commit\"\n \n-Then create a github repository for your hubot. This is where zzure will pull your code from instead of needing to deploy directly from your dev machine to azure.\n+Then [create a GitHub repository](https://help.github.com/articles/create-a-repo/) for your hubot. This is where Azure will pull your code from instead of needing to deploy directly from your dev machine to Azure.\n \n-    % git remote add origin _your github repo_\n-\t% git push -u origin master\n-\t\n-Create a linked azure website. In azure, create a website and select integrated source control. When it asks \"where is your source control\" select GitHub and link this website to your git repo that you created in the previous step. If you have downloaded the azure powershell modules, you can also do this via powershell.\n+    % git remote add origin _your GitHub repo_\n+    % git push -u origin master\n+\n+Once you have your GitHub repo, create an Azure website linked to your repo. In Azure, create a website and select integrated source control. When it asks \"where is your source control\" select GitHub and link this website to your git repo that you created in the previous step. If you have downloaded the Azure PowerShell modules, you can also do this via PowerShell.\n \n     % $creds = Get-Credential\n-\t% new-azurewebsite mynewhubot -github -hithubrepository yourgithubaccount/yourhubotreponame -githubcredentials $creds\n-\t\n-Once you have done this, azure will deploy your site on the next commit and push you do to github. Your hubot won't run quite right yet, though. Next, you need to configure the deployment to tell azure how to run hubot.\n-\t\n-First, run the follow command to add _deploy.cmd_ to your hubot directory. This is the file that azure uses to know how to deploy your node application.\n+    % New-AzureWebsite mynewhubot -github -githubrepository yourgithubaccount/yourhubotreponame -githubcredentials $creds\n+\n+Once you have done this, Azure will deploy your site any time you commit and push to GitHub. Your hubot won't run quite right yet, though. Next, you need to configure the deployment to tell Azure how to run hubot.\n+\n+First, run the follow command to add `deploy.cmd` to your hubot directory. This is the file that Azure uses to know how to deploy your node application.\n \n     % azure site deploymentscript --node\n-\t\n+\n Then, edit this file and look for the sections that give you steps 1, 2 and 3. You're going to add a 4th step:\n \n     :: 4. Create Hubot file with a coffee extension\n     copy /Y \u201c%DEPLOYMENT_TARGET%\\node_modules\\hubot\\bin\\hubot\u201d \u201c%DEPLOYMENT_TARGET%\\node_modules\\hubot\\bin\\hubot.coffee\u201d\n \n-Now, create a new file in the base directory of Hubot called \"server.js\" and put these two lines into it:\n+Now, create a new file in the base directory of hubot called `server.js` and put these two lines into it:\n \n     require('coffee-script/register');\n-\tmodule.exports = require('hubot/bin/hubot.coffee');\n-\t\n-Save this file. Then open up external-scripts.json and remove the following two lines, as these two bits aren't compatible with azure.\n+    module.exports = require('hubot/bin/hubot.coffee');\n \n-    \"hubot-heroku-keepalive\",\n-\t\"hubot-redit-brain\",\n-\t\n-Save this file then install coffee-script as a requirement to your local hubot. Azure requires this to run hubot properly.\n+Save this file. Then open up `external-scripts.json` and remove the following two lines, as these two bits aren't compatible with Azure and then save the file.\n \n-    % npm install coffee-script --save\n+    \"hubot-heroku-keepalive\",\n+    \"hubot-redit-brain\",\n \n-Finally you will need to add the environment variables to the website to make sure it runs properly. You can either do it through the GUI, under configuration or you can use the azure powershell command line, as follows (example is showing slack as an adapter and mynewhubot as the website name).\n+Finally you will need to add the environment variables to the website to make sure it runs properly. You can either do it through the GUI (under configuration) or you can use the Azure PowerShell command line, as follows (example is showing slack as an adapter and mynewhubot as the website name).\n \n     % $settings = New-Object Hashtable\n-\t% $settings[\"HUBOT_ADAPTER\"] = \"Slack\"\n-\t% $settings[\"HUBOT_SLACK_TOKEN\"] = \"yourslackapikey\"\n-\t% Set-AzureWebsite -AppSettings $settings mynewhubot\n-\t\n-Commit your changes in git and push to github and azure will automatically pick up the changes and deploy them to your website.\n+    % $settings[\"HUBOT_ADAPTER\"] = \"Slack\"\n+    % $settings[\"HUBOT_SLACK_TOKEN\"] = \"yourslackapikey\"\n+    % Set-AzureWebsite -AppSettings $settings mynewhubot\n+\n+Commit your changes in git and push to GitHub and Azure will automatically pick up the changes and deploy them to your website.\n+\n+    % git commit -m \"Add Azure settings for hubot\"\n+    % git push\n \n-    % git commit -m \"Add azure settings for hubot\"\n-\t% git push\n-\t\n-Hubot now works just fine but doesn't have a brain. To add a brain that works with azure, you will need to create an azure storage account and account key. Then you can do the following in your base hubot directory.\n+Hubot now works just fine but doesn't have a brain. To add a brain that works with Azure, you will need to create an Azure storage account and account key. Then you can do the following in your base hubot directory.\n \n     % npm install hubot-azure-scripts --save\n \n-Then add the following line in external-scripts.json in the list with the other external scripts\n+Then add the following line in `external-scripts.json` in the list with the other external scripts\n \n     \"hubot-azure-scripts/brain/azure-blob-brain\"\n-\t\n-Finally, add two more environment variables to your website. You can do this either via the gui or powershell commands.\n+\n+Finally, add two more environment variables to your website. You can do this either via the GUI or the following PowerShell commands.\n \n     % $settings = New-Object Hashtable\n-\t% $settings[\"HUBOT_BRAIN_AZURE_STORAGE_ACCOUNT\"] = \"your azure storage account\"\n-\t% $settings[\"HUBOT_BRAIN_AZURE_STORAGE_ACCESS_KEY\"] = \"your azure storage account key\"\n-\t% Set-AzureWebsite -AppSettings $settings mynewhubot\n-\t\n-Now any scripts that require a brain will function. You should look up other scripts or write your own by looking at the [documentation](https://hubot.github.com/docs/scripting/). All of the normal scripts for hubot are compatible with hosting hubot on azure.\n\\ No newline at end of file\n+    % $settings[\"HUBOT_BRAIN_AZURE_STORAGE_ACCOUNT\"] = \"your Azure storage account\"\n+    % $settings[\"HUBOT_BRAIN_AZURE_STORAGE_ACCESS_KEY\"] = \"your Azure storage account key\"\n+    % Set-AzureWebsite -AppSettings $settings mynewhubot\n+\n+Now any scripts that require a brain will function. You should look up other scripts or write your own by looking at the [documentation](/docs/scripting.md). All of the normal scripts for hubot are compatible with hosting hubot on Azure.\n\\ No newline at end of file", "changes": 74}, {"status": "modified", "deletions": 16, "raw_url": "https://github.com/hubotio/hubot/raw/59b4b8ac18471366772139c2e81a830546b967d3/docs/deploying/windows.md", "blob_url": "https://github.com/hubotio/hubot/blob/59b4b8ac18471366772139c2e81a830546b967d3/docs/deploying/windows.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/windows.md?ref=59b4b8ac18471366772139c2e81a830546b967d3", "filename": "docs/deploying/windows.md", "sha": "8995bb26953a372596c453d39ec3bbeccdbc2de8", "additions": 16, "patch": "@@ -5,12 +5,12 @@ layout: docs\n \n Hasn't been fully tested - YMMV\n \n-There are 3 primary things to deploying and running hubot on a windows machine:\n+There are 4 primary steps to deploying and running hubot on a Windows machine:\n \n   * node and npm\n   * a way to get source code updated on the server\n-  * a way to start hubot, start it up if it crashes, and restart it when code\n-    updates\n+  * setting up environment variables for hubot\n+  * a way to start hubot, start it up if it crashes, and restart it when code updates\n \n ## node and npm\n \n@@ -22,15 +22,15 @@ Your other option is to install directly from [NodeJS](https://nodejs.org/) and\n \n ## Updating code on the server\n \n-To get the code on your server, you can follow the instructions at [Getting Started](https://hubot.github.com/docs/) on your local development machine or directly on the server. If you are building locally, push your hubot to git and clone the repo onto your server. Don't clone the normal [github/hubot repository](http://github.com/github/hubot), make sure you're using the Yo Generator to build your own hubot.\n+To get the code on your server, you can follow the instructions at [Getting Started](/docs/index.md) on your local development machine or directly on the server. If you are building locally, push your hubot to GitHub and clone the repo onto your server. Don't clone the normal [github/hubot repository](http://github.com/github/hubot), make sure you're using the Yo Generator to build your own hubot.\n \n ## Setting up environment vars\n \n-You will want to set up your hubot environment variables on the server where it will run. You can do this by opening a administrative powershell/command prompt and typing the following:\n+You will want to set up your hubot environment variables on the server where it will run. You can do this by opening an administrative PowerShell and typing the following:\n \n     [Environment]::SetEnvironmentVariable(\"HUBOT_ADAPTER\", \"Campfire\", \"Machine\")\n-\t\n-This is equivelent to going into the system menu -> selecting advanced system settings => environment vars and adding a new system variable called HUBOT_ADAPTER with the value of Campfire.\n+\n+This is equivalent to going into the system menu -> selecting advanced system settings -> environment vars and adding a new system variable called HUBOT_ADAPTER with the value of Campfire.\n \n ## Starting, stopping, and restarting hubot\n \n@@ -45,21 +45,21 @@ There are a few issues if you call it manually, though.\n * hubot dies, for any reason, and doesn't start again\n * it doesn't start up at boot automatically\n \n-To fix this, you will want to create a .ps1 file with whatever name makes you happy that you will call from your Hubot directory. It should contain the following:\n+To fix this, you will want to create a .ps1 file with whatever name makes you happy that you will call from your hubot directory. There is a copy of this file in the `examples` directory [here](/examples/hubot-start.ps1). It should contain the following:\n \n-    Write-Host \u201cStarting Hubot Watcher\u201d\n+    Write-Host \"Starting Hubot Watcher\"\n     While (1)\n     {\n-        Write-Host \u201cStarting Hubot\n-        Start-Process powershell -ArgumentList \u201c.\\bin\\hubot \u2013adapter slack\u201d -wait\n-\t}\n+        Write-Host \"Starting Hubot\"\n+        Start-Process powershell -ArgumentList \".\\bin\\hubot \u2013adapter slack\" -wait\n+    }\n \n-Remember to allow local unsigned powershell scripts if you are using this. Run this in an Administrator Powershell window.\n+Remember to allow local unsigned PowerShell scripts if you are using the .ps1 file to run hubot. Run this command in an Administrator PowerShell window.\n \n     Set-ExecutionPolicy RemoteSigned\n-\t\n-You can set this as scheduled task on boot if you like or some other way to start your process. \n-\t\n+\n+You can set this .ps1 as scheduled task on boot if you like or some other way to start your process. \n+\n ## Expanding the documentation\n \n Not yet fleshed out. [Help contribute by submitting a pull request, please?](https://github.com/github/hubot/pull/new/master)", "changes": 32}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/59b4b8ac18471366772139c2e81a830546b967d3/examples/hubot-start.ps1", "blob_url": "https://github.com/hubotio/hubot/blob/59b4b8ac18471366772139c2e81a830546b967d3/examples/hubot-start.ps1", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/examples/hubot-start.ps1?ref=59b4b8ac18471366772139c2e81a830546b967d3", "filename": "examples/hubot-start.ps1", "sha": "b3ef4ef1448bd8b36e970dfae002d6bef2a6ee50", "additions": 12, "patch": "@@ -0,0 +1,12 @@\n+#Hubot PowerShell Start Script\n+#Invoke from the PowerShell prompt or start via automated tools \n+\n+$HubotPath = \"drive:\\path\\to\\hubot\"\n+$HubotAdapter = \"Hubot adapter\"\n+\n+Write-Host \"Starting Hubot Watcher\"\n+While (1)\n+{\n+    Write-Host \"Starting Hubot\"\n+    Start-Process powershell -ArgumentList \"$HubotPath\\bin\\hubot \u2013adapter $HubotAdapter\" -wait\n+}\n\\ No newline at end of file", "changes": 12}], "986": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158", "filename": "docs/patterns.md", "sha": "c6a4474b0e3ec2ad990967f87b214244d14d2294", "additions": 31, "patch": "@@ -78,6 +78,37 @@ module.export = (robot) ->\n   robot.globalHttpOptions.httpsAgent = proxy('http://my-proxy-server.internal', true)\n ```\n \n+## Dynamic matching of messages\n+\n+In some situations, you want to dynamically match different messages (e.g. factoids, JIRA projects). Rather than defining an overly broad regular expression that always matches, you can tell Hubot to only match when certain conditions are met.\n+\n+In a simple robot, this isn't much different from just putting the conditions in the Listener callback, but it makes a big difference when you are dealing with middleware: with the basic model, middleware will be executed for every match of the generic regex. With the dynamic matching model, middleware will only be executed when the dynamic conditions are matched.\n+\n+For example, the [factoid lookup command](https://github.com/github/hubot-scripts/blob/bd810f99f9394818a9dcc2ea3729427e4101b96d/src/scripts/factoid.coffee#L95-L99) could be reimplemented as:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  # Dynamically populated list of factoids\n+  facts =\n+    fact1: 'stuff'\n+    fact2: 'other stuff'\n+\n+  robot.listen(\n+    # Matcher\n+    (message) ->\n+      match = message.match(/^~(.*)$/)\n+      # Only match if there is a matching factoid\n+      if match and match[1] in facts\n+        match[1]\n+      else\n+        false\n+    # Callback\n+    (response) ->\n+      fact = response.match\n+      res.reply \"#{fact} is #{facts[fact]}\"\n+  )\n+```\n+\n ## Restricting access to commands\n \n One of the awesome features of Hubot is its ability to make changes to a production environment with a single chat message. However, not everyone with access to your chat service should be able to trigger production changes.", "changes": 31}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158", "filename": "docs/scripting.md", "sha": "db8ba1adbe9fa17d82bebcf13680f0729153a751", "additions": 20, "patch": "@@ -260,6 +260,26 @@ module.exports = (robot) ->\n     res.send res.random leaveReplies\n ```\n \n+## Custom Listeners\n+\n+While the above helpers cover most of the functionality the average user needs (hear, respond, enter, leave, topic), sometimes you would like to have very specialized matching logic for listeners. If so, you can use `listen` to specify a custom match function instead of a regular expression.\n+\n+The match function must return a truthy value if the listener callback should be executed. The truthy return value of the match function is then passed to the callback as response.match.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.listen(\n+    (message) -> # Match function\n+      # Occassionally respond to things that Steve says\n+      message.user.name is \"Steve\" and Math.random() > 0.8\n+    (response) -> # Standard listener callback\n+      # Let Steve know how happy you are that he exists\n+      response.reply \"HI STEVE! YOU'RE MY BEST FRIEND! (but only like #{response.match * 100}% of the time)\"\n+  )\n+```\n+\n+See [the design patterns document](patterns.md) for examples of complex matchers.\n+\n ## Environment variables\n \n Hubot can access the environment he's running in, just like any other node program, using [`process.env`](http://nodejs.org/api/process.html#process_process_env). This can be used to configure how scripts are run, with the convention being to use the `HUBOT_` prefix.", "changes": 20}, {"status": "modified", "deletions": 17, "raw_url": "https://github.com/hubotio/hubot/raw/baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158", "filename": "src/robot.coffee", "sha": "261d647a644f0d917904bbfc394176fb6a59c096", "additions": 28, "patch": "@@ -72,6 +72,21 @@ class Robot\n       @emit 'error', err\n     process.on 'uncaughtException', @onUncaughtException\n \n+  # Public: Adds a custom Listener with the provided matcher, options, and\n+  # callback\n+  #\n+  # matcher  - A Function that determines whether to call the callback.\n+  #            Expected to return a truthy value if the callback should be\n+  #            executed.\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n+  # callback - A Function that is called with a Response object if the\n+  #            matcher function returns true.\n+  #\n+  # Returns nothing.\n+  listen: (matcher, options, callback) ->\n+    @listeners.push new Listener(@, matcher, options, callback)\n+\n   # Public: Adds a Listener that attempts to match incoming messages based on\n   # a Regex.\n   #\n@@ -95,7 +110,7 @@ class Robot\n   #\n   # Returns nothing.\n   respond: (regex, options, callback) ->\n-    @listeners.push new TextListener(@, @respondPattern(regex), options, callback)\n+    @hear(@respondPattern(regex), options, callback)\n \n   # Public: Build a regular expression that matches messages addressed\n   # directly to the robot\n@@ -139,10 +154,9 @@ class Robot\n   #\n   # Returns nothing.\n   enter: (options, callback) ->\n-    @listeners.push new Listener(\n-      @,\n-      ((msg) -> msg instanceof EnterMessage),\n-      options,\n+    @listen(\n+      ((msg) -> msg instanceof EnterMessage)\n+      options\n       callback\n     )\n \n@@ -154,10 +168,9 @@ class Robot\n   #\n   # Returns nothing.\n   leave: (options, callback) ->\n-    @listeners.push new Listener(\n-      @,\n-      ((msg) -> msg instanceof LeaveMessage),\n-      options,\n+    @listen(\n+      ((msg) -> msg instanceof LeaveMessage)\n+      options\n       callback\n     )\n \n@@ -169,10 +182,9 @@ class Robot\n   #\n   # Returns nothing.\n   topic: (options, callback) ->\n-    @listeners.push new Listener(\n-      @,\n-      ((msg) -> msg instanceof TopicMessage),\n-      options,\n+    @listen(\n+      ((msg) -> msg instanceof TopicMessage)\n+      options\n       callback\n     )\n \n@@ -214,10 +226,9 @@ class Robot\n       callback = options\n       options = {}\n \n-    @listeners.push new Listener(\n-      @,\n-      ((msg) -> msg instanceof CatchAllMessage),\n-      options,\n+    @listen(\n+      ((msg) -> msg instanceof CatchAllMessage)\n+      options\n       ((msg) -> msg.message = msg.message.message; callback msg)\n     )\n ", "changes": 45}, {"status": "modified", "deletions": 16, "raw_url": "https://github.com/hubotio/hubot/raw/baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=baf07fb4a4fc747f9b08c8d747d15a3dfdb1f158", "filename": "test/robot_test.coffee", "sha": "1dbe7d990258c4800a6bab8dce0faa7f63c7c8f4", "additions": 35, "patch": "@@ -141,41 +141,47 @@ describe 'Robot', ->\n         match2 = testMessage2.match(pattern)[1]\n         expect(match2).to.equal('message123')\n \n+    describe '#listen', ->\n+      it 'registers a new listener directly', ->\n+        expect(@robot.listeners).to.have.length(0)\n+        @robot.listen (->), ->\n+        expect(@robot.listeners).to.have.length(1)\n+\n     describe '#hear', ->\n-      it 'registers a new listener', ->\n+      it 'registers a new listener directly', ->\n         expect(@robot.listeners).to.have.length(0)\n         @robot.hear /.*/, ->\n         expect(@robot.listeners).to.have.length(1)\n \n     describe '#respond', ->\n-      it 'registers a new listener', ->\n-        expect(@robot.listeners).to.have.length(0)\n+      it 'registers a new listener using hear', ->\n+        sinon.spy @robot, 'hear'\n         @robot.respond /.*/, ->\n-        expect(@robot.listeners).to.have.length(1)\n+        expect(@robot.hear).to.have.been.called\n \n     describe '#enter', ->\n-      it 'registers a new listener', ->\n-        expect(@robot.listeners).to.have.length(0)\n+      it 'registers a new listener using listen', ->\n+        sinon.spy @robot, 'listen'\n         @robot.enter ->\n-        expect(@robot.listeners).to.have.length(1)\n+        expect(@robot.listen).to.have.been.called\n \n     describe '#leave', ->\n-      it 'registers a new listener', ->\n-        expect(@robot.listeners).to.have.length(0)\n+      it 'registers a new listener using listen', ->\n+        sinon.spy @robot, 'listen'\n         @robot.leave ->\n-        expect(@robot.listeners).to.have.length(1)\n+        expect(@robot.listen).to.have.been.called\n \n     describe '#topic', ->\n-      it 'registers a new listener', ->\n-        expect(@robot.listeners).to.have.length(0)\n+      it 'registers a new listener using listen', ->\n+        sinon.spy @robot, 'listen'\n         @robot.topic ->\n-        expect(@robot.listeners).to.have.length(1)\n+        expect(@robot.listen).to.have.been.called\n \n     describe '#catchAll', ->\n-      it 'registers a new listener', ->\n-        expect(@robot.listeners).to.have.length(0)\n+      it 'registers a new listener using listen', ->\n+        sinon.spy @robot, 'listen'\n         @robot.catchAll ->\n-        expect(@robot.listeners).to.have.length(1)\n+        expect(@robot.listen).to.have.been.called\n \n     describe '#receive', ->\n       it 'calls all registered listeners', (done) ->\n@@ -349,6 +355,19 @@ describe 'Robot', ->\n           expect(@robot.logger.warning).to.have.been.called\n \n   describe 'Listener Registration', ->\n+    describe '#listen', ->\n+      it 'forwards the matcher, options, and callback to Listener', ->\n+        callback = sinon.spy()\n+        matcher = sinon.spy()\n+        options = {}\n+\n+        @robot.listen(matcher, options, callback)\n+        testListener = @robot.listeners[0]\n+\n+        expect(testListener.matcher).to.equal(matcher)\n+        expect(testListener.callback).to.equal(callback)\n+        expect(testListener.options).to.equal(options)\n+\n     describe '#hear', ->\n       it 'matches TextMessages', ->\n         callback = sinon.spy()", "changes": 51}], "991": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c234336e7cb3e5018a3150c834bad2baf2b6248f/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/c234336e7cb3e5018a3150c834bad2baf2b6248f/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=c234336e7cb3e5018a3150c834bad2baf2b6248f", "filename": "docs/adapters.md", "sha": "cb7b8a4cfa33fb246f88e072510bd900c4ba724f", "additions": 1, "patch": "@@ -22,6 +22,7 @@ to have yours added to the list:\n \n * [AIM](https://github.com/shaundubuque/hubot-aim)\n * [ChatWork](https://github.com/akiomik/hubot-chatwork)\n+* [Dasher](https://github.com/nebulist/hubot-dasher)\n * [Fleep](https://github.com/anroots/hubot-fleep)\n * [Flowdock](https://github.com/flowdock/hubot-flowdock)\n * [Gitter](https://github.com/huafu/hubot-gitter2)", "changes": 1}], "993": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/752f52c3e7e3a9da9937dfbf725f3b6141d9ea56/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/752f52c3e7e3a9da9937dfbf725f3b6141d9ea56/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=752f52c3e7e3a9da9937dfbf725f3b6141d9ea56", "filename": "docs/adapters.md", "sha": "ad40d0862735609e1482fff5c64651e365dd95ba", "additions": 1, "patch": "@@ -40,6 +40,7 @@ to have yours added to the list:\n * [Slack](https://github.com/tinyspeck/hubot-slack)\n * [Skype](https://github.com/netpro2k/hubot-skype)\n * [Talker](https://github.com/unixcharles/hubot-talker)\n+* [Telegram](https://github.com/lukefx/hubot-telegram)\n * [Twilio](https://github.com/jkarmel/hubot-twilio)\n * [Twitter](https://github.com/MathildeLemee/hubot-twitter)\n * [Typetalk](https://github.com/nulab/hubot-typetalk)", "changes": 1}], "994": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/216bb1b5c6cba1bc4972bdea872665a498a3cde3/mafiagame_korean", "blob_url": "https://github.com/hubotio/hubot/blob/216bb1b5c6cba1bc4972bdea872665a498a3cde3/mafiagame_korean", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/mafiagame_korean?ref=216bb1b5c6cba1bc4972bdea872665a498a3cde3", "filename": "mafiagame_korean", "sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "additions": 1, "patch": "@@ -0,0 +1 @@\n+", "changes": 1}], "996": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/36f4ce9f3e45482165996e07e4a783acb65a6e14/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/36f4ce9f3e45482165996e07e4a783acb65a6e14/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=36f4ce9f3e45482165996e07e4a783acb65a6e14", "filename": "src/adapter.coffee", "sha": "bd90411c73c5e653ef5541a64ed5c0bdd4fa49be", "additions": 10, "patch": "@@ -14,6 +14,16 @@ class Adapter extends EventEmitter\n   # Returns nothing.\n   send: (envelope, strings...) ->\n \n+  # Public: Posts an image back to the chat source\n+  #\n+  # envelope - A Object with message, room and user details.\n+  # url      - URL of the image resource\n+  # strings  - One or more strings to be posted. The order of these strings\n+  #            should be kept intact.\n+  #\n+  # Returns nothing.\n+  sendImage: (envelope, url, strings...) ->\n+\n   # Public: Raw method for sending emote data back to the chat source.\n   # Defaults as an alias for send\n   #", "changes": 10}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/36f4ce9f3e45482165996e07e4a783acb65a6e14/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/36f4ce9f3e45482165996e07e4a783acb65a6e14/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=36f4ce9f3e45482165996e07e4a783acb65a6e14", "filename": "src/response.coffee", "sha": "793553a9cf6fc0802dd17708c8e7508045fa1c8a", "additions": 10, "patch": "@@ -21,6 +21,16 @@ class Response\n   send: (strings...) ->\n     @robot.adapter.send @envelope, strings...\n \n+  # Public: Posts an image back to the chat source\n+  #\n+  # url     - URL of the image resource\n+  # strings - One or more strings to be posted. The order of these strings\n+  #           should be kept intact.\n+  #\n+  # Returns nothing.\n+  sendImage: (url, strings...) ->\n+    @robot.adapter.sendImage @envelope, url, strings...\n+\n   # Public: Posts an emote back to the chat source\n   #\n   # strings - One or more strings to be posted. The order of these strings", "changes": 10}], "999": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0d16e259003a57d512cc0f89d7255677edc6f691/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/0d16e259003a57d512cc0f89d7255677edc6f691/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=0d16e259003a57d512cc0f89d7255677edc6f691", "filename": "docs/adapters.md", "sha": "a4ac1582bf0a3c32712e5ab88a7c84ff0cdc4043", "additions": 1, "patch": "@@ -39,6 +39,7 @@ to have yours added to the list:\n * [Rocket.Chat](https://github.com/RocketChat/hubot-rocketchat)\n * [Slack](https://github.com/tinyspeck/hubot-slack)\n * [Skype](https://github.com/netpro2k/hubot-skype)\n+* [SkypeWeb](https://github.com/sdimkov/hubot-skype-web)\n * [Talker](https://github.com/unixcharles/hubot-talker)\n * [Twilio](https://github.com/jkarmel/hubot-twilio)\n * [Twitter](https://github.com/MathildeLemee/hubot-twitter)", "changes": 1}], "1000": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd3cddc1fae679d612b963aa5b7970cb295c06fe/LICENSE", "blob_url": "https://github.com/hubotio/hubot/blob/dd3cddc1fae679d612b963aa5b7970cb295c06fe/LICENSE", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/LICENSE?ref=dd3cddc1fae679d612b963aa5b7970cb295c06fe", "filename": "LICENSE", "sha": "94cd7c454981a7d4abfb4523a5a08dd26d5ce576", "additions": 21, "patch": "@@ -0,0 +1,21 @@\n+The MIT License (MIT)\n+\n+Copyright (c) 2015 GitHub\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.", "changes": 21}], "1003": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/52c904334a81772be77414a6c8390b2c8092f6da/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/52c904334a81772be77414a6c8390b2c8092f6da/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=52c904334a81772be77414a6c8390b2c8092f6da", "filename": "bin/hubot", "sha": "8ff3225672b22c66b49e50c6dde02b9b8b0f071e", "additions": 1, "patch": "@@ -84,14 +84,12 @@ if Options.create\n else\n   adapterPath = Path.join __dirname, \"..\", \"src\", \"adapters\"\n \n-  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name\n+  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name, Options.alias\n \n   if Options.version\n     console.log robot.version\n     process.exit 0\n \n-  robot.alias = Options.alias\n-\n   loadScripts = ->\n     scriptsPath = Path.resolve \".\", \"scripts\"\n     robot.load scriptsPath", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/52c904334a81772be77414a6c8390b2c8092f6da/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/52c904334a81772be77414a6c8390b2c8092f6da/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=52c904334a81772be77414a6c8390b2c8092f6da", "filename": "index.coffee", "sha": "0467f3289cbf8a0c5d56db9168ad820b5aa96f30", "additions": 2, "patch": "@@ -22,5 +22,5 @@ module.exports = {\n   CatchAllMessage\n }\n \n-module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName) ->\n-  new Robot adapterPath, adapterName, enableHttpd, botName\n+module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName, botAlias) ->\n+  new Robot adapterPath, adapterName, enableHttpd, botName, botAlias", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/52c904334a81772be77414a6c8390b2c8092f6da/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/52c904334a81772be77414a6c8390b2c8092f6da/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=52c904334a81772be77414a6c8390b2c8092f6da", "filename": "src/robot.coffee", "sha": "a48e8e35510fbe5f03559d1b127703a33537dd1c", "additions": 2, "patch": "@@ -40,11 +40,11 @@ class Robot\n   # name        - A String of the robot name, defaults to Hubot.\n   #\n   # Returns nothing.\n-  constructor: (adapterPath, adapter, httpd, name = 'Hubot') ->\n+  constructor: (adapterPath, adapter, httpd, name = 'Hubot', alias = false) ->\n     @name       = name\n     @events     = new EventEmitter\n     @brain      = new Brain @\n-    @alias      = false\n+    @alias      = alias\n     @adapter    = null\n     @Response   = Response\n     @commands   = []", "changes": 4}], "1004": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/e721aa2c772a0d5020b33e213aac21d4e6dc8016/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/e721aa2c772a0d5020b33e213aac21d4e6dc8016/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=e721aa2c772a0d5020b33e213aac21d4e6dc8016", "filename": "src/robot.coffee", "sha": "4f06a41fa345048022cad3874b64f73ea1ac6f77", "additions": 4, "patch": "@@ -271,7 +271,7 @@ class Robot\n       for file in Fs.readdirSync(path).sort()\n         @loadFile path, file\n \n-  # Public: Load scripts specfied in the `hubot-scripts.json` file.\n+  # Public: Load scripts specified in the `hubot-scripts.json` file.\n   #\n   # path    - A String path to the hubot-scripts files.\n   # scripts - An Array of scripts to load.\n@@ -282,7 +282,7 @@ class Robot\n     for script in scripts\n       @loadFile path, script\n \n-  # Public: Load scripts from packages specfied in the\n+  # Public: Load scripts from packages specified in the\n   # `external-scripts.json` file.\n   #\n   # packages - An Array of packages containing hubot scripts to load.\n@@ -457,7 +457,7 @@ class Robot\n     @adapter.send user, strings...\n \n   # Public: A wrapper around the EventEmitter API to make usage\n-  # semanticly better.\n+  # semantically better.\n   #\n   # event    - The event name.\n   # listener - A Function that is called with the event parameter\n@@ -468,7 +468,7 @@ class Robot\n     @events.on event, args...\n \n   # Public: A wrapper around the EventEmitter API to make usage\n-  # semanticly better.\n+  # semantically better.\n   #\n   # event   - The event name.\n   # args...  - Arguments emitted by the event", "changes": 8}], "1005": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f3595e5c4e5033b21eb19fa0309d3337c5deea6e/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/f3595e5c4e5033b21eb19fa0309d3337c5deea6e/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=f3595e5c4e5033b21eb19fa0309d3337c5deea6e", "filename": "CONTRIBUTING.md", "sha": "39bd44052a1c8d6599c6167a570af4f8e641c55a", "additions": 3, "patch": "@@ -1,5 +1,8 @@\n # Contributing\n \n+This project adheres to the [Open Code of Conduct][code-of-conduct]. By participating, you are expected to uphold this code.\n+[code-of-conduct]: http://todogroup.org/opencodeofconduct/#Hubot/opensource@github.com\n+\n We love pull requests. Here's a quick guide:\n \n 1. Check for [existing issues](https://github.com/github/hubot/issues) for duplicates and confirm that it hasn't been fixed already in the [master branch](https://github.com/github/hubot/commits/master)", "changes": 3}], "1006": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e86e590c5bce296af1f109026b780ee5c738566a/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/e86e590c5bce296af1f109026b780ee5c738566a/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=e86e590c5bce296af1f109026b780ee5c738566a", "filename": "CONTRIBUTING.md", "sha": "923a13a8ff040ce93476d548096b5d28bdc3a45e", "additions": 1, "patch": "@@ -21,7 +21,7 @@ Some things that will increase the chance that your pull request is accepted:\n   update anything is affected by your contribution.\n * Include any information that would be relevant to reproducing bugs, use cases for new features, etc.\n \n-* Discuss the impact on existing [hubot installs](docs/README.md), [hubot adapters](docs/adapters.md), and [hubot scripts](docs/scripting.md) (e.g. backwards compatibility)\n+* Discuss the impact on existing [hubot installs](docs/index.md), [hubot adapters](docs/adapters.md), and [hubot scripts](docs/scripting.md) (e.g. backwards compatibility)\n   * If the change does break compatibility, how can it be updated to become backwards compatible, while directing users to the new way of doing things?\n * Your commits are associated with your GitHub user: https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/\n * Make pull requests against a feature branch,", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e86e590c5bce296af1f109026b780ee5c738566a/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/e86e590c5bce296af1f109026b780ee5c738566a/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=e86e590c5bce296af1f109026b780ee5c738566a", "filename": "bin/hubot", "sha": "55aa23bf7029359bba0a49a98fa3647d8aaf86d0", "additions": 1, "patch": "@@ -78,7 +78,7 @@ if Options.create\n   console.error \"    mkdir -p #{Options.path}\"\n   console.error \"    cd #{Options.path}\"\n   console.error \"    yo hubot\"\n-  console.error \"See https://github.com/github/hubot/blob/master/docs/README.md for more details on getting started.\"\n+  console.error \"See https://github.com/github/hubot/blob/master/docs/index.md for more details on getting started.\"\n   process.exit 1\n \n else", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e86e590c5bce296af1f109026b780ee5c738566a/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/e86e590c5bce296af1f109026b780ee5c738566a/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=e86e590c5bce296af1f109026b780ee5c738566a", "filename": "docs/deploying/heroku.md", "sha": "182350e9fa60623e8a59bb9df9b2011603c624e4", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/deploying/heroku/index.html\n layout: docs\n ---\n \n-If you've been following along with [Getting Started](../README.md), it's time to deploy so you can use it beyond just your local machine.\n+If you've been following along with [Getting Started](../index.md), it's time to deploy so you can use it beyond just your local machine.\n [Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.\n \n Install the [Heroku Toolbelt](https://toolbelt.heroku.com/) to start, then follow their 'Getting Started' instructions, including logging in the first time:", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e86e590c5bce296af1f109026b780ee5c738566a/docs/deploying/unix.md", "blob_url": "https://github.com/hubotio/hubot/blob/e86e590c5bce296af1f109026b780ee5c738566a/docs/deploying/unix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/unix.md?ref=e86e590c5bce296af1f109026b780ee5c738566a", "filename": "docs/deploying/unix.md", "sha": "192cbf18b2933b278340bcf241e4d5f1228651b6", "additions": 1, "patch": "@@ -23,7 +23,7 @@ for [installing Node.js via package manager](https://github.com/joyent/node/wiki\n ## Updating code on the server\n \n The simplest way to update your hubot's code is going to be to have a git\n-checkout of your hubot's source code (that you've created during [Getting Started](../README.md), not the [github/hubot repository](http://github.com/github/hubot), and just git pull to get change. This may\n+checkout of your hubot's source code (that you've created during [Getting Started](../index.md), not the [github/hubot repository](http://github.com/github/hubot), and just git pull to get change. This may\n feel a dirty hack, but it works when you are starting out.\n \n If you have a Ruby background, you might be more comfortable using", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e86e590c5bce296af1f109026b780ee5c738566a/docs/deploying/windows.md", "blob_url": "https://github.com/hubotio/hubot/blob/e86e590c5bce296af1f109026b780ee5c738566a/docs/deploying/windows.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/windows.md?ref=e86e590c5bce296af1f109026b780ee5c738566a", "filename": "docs/deploying/windows.md", "sha": "b3ea1a771203d4951cecd472b48377d12f6f7a7e", "additions": 1, "patch": "@@ -21,7 +21,7 @@ I've found that sometimes the system path variable is not correctly set; ensure\n ## Updating code on the server\n \n The simplest way to update your hubot's code is going to be to have a git\n-checkout of your hubot's source code (that you've created during [Getting Started](../README.md), not the [github/hubot repository](http://github.com/github/hubot), and just git pull to get change. This may\n+checkout of your hubot's source code (that you've created during [Getting Started](../index.md), not the [github/hubot repository](http://github.com/github/hubot), and just git pull to get change. This may\n feel a dirty hack, but it works when you are starting out.\n \n ## Starting, stopping, and restarting hubot", "changes": 2}], "1007": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d07d59a3d8f9db86fe76a469353e5abf3d31eecb/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/d07d59a3d8f9db86fe76a469353e5abf3d31eecb/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=d07d59a3d8f9db86fe76a469353e5abf3d31eecb", "filename": "README.md", "sha": "7ab71d131c3ba43e9d0b952c7a6af14d528e7d41", "additions": 1, "patch": "@@ -11,7 +11,7 @@ for details on getting up and running with your very own robot friend.\n In most cases, you'll probably never have to hack on this repo directly if you\n are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTING.md)\n \n-If you'd like to chat, drop by #hubot on FreeNode IRC.\n+If you'd like to chat, drop by [#hubot](http://webchat.freenode.net/?channels=#hubot) on FreeNode IRC.\n \n ## License\n ", "changes": 2}], "1011": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/741fc8feb224fb96c8aa5a5059dcc7d48a5345c4/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/741fc8feb224fb96c8aa5a5059dcc7d48a5345c4/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=741fc8feb224fb96c8aa5a5059dcc7d48a5345c4", "filename": "src/robot.coffee", "sha": "06d4b61894ac6b316fe4e56cbcd9398ecd0bb561", "additions": 1, "patch": "@@ -93,7 +93,7 @@ class Robot\n   respond: (regex, options, callback) ->\n     @listeners.push new TextListener(@, @respondPattern(regex), options, callback)\n \n-  # Private: Build a regular expression that matches messages addressed\n+  # Public: Build a regular expression that matches messages addressed\n   # directly to the robot\n   #\n   # regex - A RegExp for the message part that follows the robot's name/alias", "changes": 2}], "1012": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/675f35d7f0c001e45db56ca4ba084c62113be3cf/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/675f35d7f0c001e45db56ca4ba084c62113be3cf/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=675f35d7f0c001e45db56ca4ba084c62113be3cf", "filename": "docs/scripting.md", "sha": "70a04cd060bfa7022713f5ea0fb45b3fbd647b0c", "additions": 1, "patch": "@@ -380,6 +380,7 @@ The most common use of this is for providing HTTP end points for services with w\n \n ```coffeescript\n module.exports = (robot) ->\n+  # the expected value of :room is going to vary by adapter, it might be a numeric id, name, token, or some other value\n   robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n     room   = req.params.room\n     data   = if req.body.payload? then JSON.parse req.body.payload else req.body", "changes": 1}], "1016": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f46526f78c9a2a2d83dacf9beb8ffd7c3efd6c67/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/f46526f78c9a2a2d83dacf9beb8ffd7c3efd6c67/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=f46526f78c9a2a2d83dacf9beb8ffd7c3efd6c67", "filename": "CHANGELOG.md", "sha": "122ee8818ae76d4a980ee4814ca48107016ba813", "additions": 7, "patch": "@@ -1,3 +1,10 @@\n+v2.14.0\n+=======\n+\n+* Lots of documentation tweaks and new adapters\n+* Added a code of conduct https://github.com/github/hubot/pull/1005\n+* Add Listener Middleware https://github.com/github/hubot/pull/803\n+\n v2.13.2\n =======\n ", "changes": 7}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f46526f78c9a2a2d83dacf9beb8ffd7c3efd6c67/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/f46526f78c9a2a2d83dacf9beb8ffd7c3efd6c67/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=f46526f78c9a2a2d83dacf9beb8ffd7c3efd6c67", "filename": "package.json", "sha": "10fa04c33876f35afd6f303b77fcb43b51df43c5", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.13.2\",\n+  \"version\": \"2.14.0\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "1017": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/bbe5af3d88aa6f7e4e8cbfbea57371c2906f2358/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/bbe5af3d88aa6f7e4e8cbfbea57371c2906f2358/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=bbe5af3d88aa6f7e4e8cbfbea57371c2906f2358", "filename": "docs/patterns.md", "sha": "5ba6db90f2377dcd07a1354a354e53db9ab6610e", "additions": 8, "patch": "@@ -85,7 +85,8 @@ One of the awesome features of Hubot is its ability to make changes to a product\n There are a variety of different patterns for restricting access that you can follow depending on your specific needs:\n \n * Two buckets of access: full and restricted with whitelist/blacklist\n-* specific access rules for every command (Role-based Access Control)\n+* Specific access rules for every command (Role-based Access Control)\n+* Blacklisting/whitelisting commands in specific rooms\n \n ### Simple (full vs restricted access)\n \n@@ -142,3 +143,9 @@ Example access policy:\n * The front desk cannot cut releases nor deploy services\n \n Complex policies like this are currently best implemented in code directly, though there is [ongoing work](https://github.com/michaelansel/hubot-rbac) to build a generalized framework for access management.\n+\n+### Specific access rules per room\n+\n+Organizations that have a number of chat rooms that serve different purposes often want to be able to use the same instance of hubot but have a different set of commands allowed in each room.\n+\n+Work on generalized blacklist solution is [ongoing](https://github.com/kristenmills/hubot-command-blacklist). A whitelist soultion could take a similar approach.", "changes": 9}], "1019": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7", "filename": "docs/patterns.md", "sha": "261dfb9320b20a973e0ab5d510194ea418e4944a", "additions": 1, "patch": "@@ -88,7 +88,7 @@ There are a variety of different patterns for restricting access that you can fo\n * Specific access rules for every command (Role-based Access Control)\n * Blacklisting/whitelisting commands in specific rooms\n \n-### Simple (full vs restricted access)\n+### Simple per-listener access\n \n In some organizations, almost all employees are given the same level of access and only a select few need to be restricted (e.g. new hires, contractors, etc.). In this model, you partition the set of all listeners to separate the \"power commands\" from the \"normal commands\".\n ", "changes": 2}, {"status": "modified", "deletions": 15, "raw_url": "https://github.com/hubotio/hubot/raw/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7", "filename": "docs/scripting.md", "sha": "8f8dcb9b51db7d954a329c320c552b5ee46c0976", "additions": 59, "patch": "@@ -622,11 +622,14 @@ These scoped identifiers allow you to externally specify new behaviors like:\n - authorization policy: \"allow everyone in the `annoyers` group to execute `annoyance.*` commands\"\n - rate limiting: \"only allow executing `annoyance.start` once every 30 minutes\"\n \n-# Listener Middleware\n+# Middleware\n+\n+There are two kinds of middleware: Receive middleware and Listener Middleware.\n \n-Hubot supports inserting logic between the listener matching a message and the listener executing. This allows you to create extensions that apply to all scripts. Examples include centralized authorization policies, rate limiting, logging, and metrics. Middleware is implemented like other hubot scripts: instead of using the `hear` and `respond` methods, middleware is registered using `listenerMiddleware`.\n+Receive middleware runs once, before listeners are checked.\n+Listener middleware runs for every listener that matches the message.\n \n-## Execution Process\n+## Execution Process and API\n \n Similar to [Express middleware](http://expressjs.com/api.html#middleware), Hubot listener middleware executes middleware in definition order. Each middleware can either continue the chain (by calling `next`) or interrupt the chain (by calling `done`). If all middleware continues, the listener callback is executed and `done` is called. Middleware may wrap the `done` callback to allow executing code in the second half of the process (after the listener callback has been executed or a deeper piece of middleware has interrupted).\n \n@@ -637,12 +640,27 @@ Middleware is called with:\n   - response object (contains the original message)\n - next/done callbacks.\n \n-For more details, see the [Listener Middleware API](#listener-middleware-api) section.\n+- `context`\n+  - See the each middleware type's API to see what the context will expose.\n+- `next`\n+  - a Function with no additional properties that should be called to continue on to the next piece of middleware/execute the Listener callback\n+  - `next` should be called with a single, optional argument: either the provided `done` function or a new function that eventually calls `done`. If the argument is not given, the provided `done` will be assumed.\n+- `done`\n+ - a Function with no additional properties that should be called to interrupt middleware execution and begin executing the chain of completion functions.\n+ - `done` should be called with no arguments\n+\n+Every middleware receives the same API signature of `context`, `next`, and\n+`done`. Different kinds of middleware may receive different information in the\n+`context` object. For more details, see the API for each type of middleware.\n \n ### Error Handling\n \n For synchronous middleware (never yields to the event loop), hubot will automatically catch errors and emit an an `error` event, just like in standard listeners. Hubot will also automatically call the most recent `done` callback to unwind the middleware stack. Asynchronous middleware should catch its own exceptions, emit an `error` event, and call `done`. Any uncaught exceptions will interrupt all execution of middleware completion callbacks.\n \n+# Listener Middleware\n+\n+Listener middleware inserts logic between the listener matching a message and the listener executing. This allows you to create extensions that run for every matching script. Examples include centralized authorization policies, rate limiting, logging, and metrics. Middleware is implemented like other hubot scripts: instead of using the `hear` and `respond` methods, middleware is registered using `listenerMiddleware`.\n+\n ## Listener Middleware Examples\n \n A fully functioning example can be found in [hubot-rate-limit](https://github.com/michaelansel/hubot-rate-limit/blob/master/src/rate-limit.coffee).\n@@ -698,24 +716,50 @@ module.exports = (robot) ->\n \n ## Listener Middleware API\n \n-Although internal data structures are exposed, not all properties on the objects are considered part of the supported API. Below are the supported properties and usage information for each of the arguments middleware receives.\n-\n-- `context`\n+Listener middleware callbacks receive three arguments, `context`, `next`, and\n+`done`. See the [middleware API](#execution-process-and-api) for a description\n+of `next` and `done`. Listener middleware context includes these fields:\n   - `listener`\n     - `options`: a simple Object containing options set when defining the listener. See [Listener Metadata](#listener-metadata).\n     - all other properties should be considered internal\n-\n   - `response`\n     - all parts of the standard response API are included in the middleware API. See [Send & Reply](#send--reply).\n     - middleware may decorate (but not modify) the response object with additional information (e.g. add a property to `response.message.user` with a user's LDAP groups)\n     - note: the textual message (`response.message.text`) should be considered immutable in listener middleware\n \n-- `next`\n-  - a Function with no additional properties that should be called to continue on to the next piece of middleware/execute the Listener callback\n-  - `next` should be called with a single optional argument: either the provided `done` function or a new function that eventually calls `done`\n+# Receive Middleware\n \n-- `done`\n- - a Function with no additional properties that should be called to interrupt middleware execution and begin executing the chain of completion functions.\n- - `done` should be called with no arguments\n+Receive middleware runs before any listeners have executed. It's suitable for\n+blacklisting commands that have not been updated to add an ID, metrics, and more.\n+\n+## Receive Middleware Example\n+\n+This simple middlware bans hubot use by a particular user, including `hear`\n+listeners. If the user attempts to run a command explicitly, it will return\n+an error message.\n+\n+```coffeescript\n+BLACKLISTED_USERS = [\n+  '12345' # Restrict access for a user ID for a contractor\n+]\n \n-Note that this API is protected by automated tests (`test/middleware_test.coffee`) to prevent breakage. Anything not covered by the tests is susceptible to change.\n+robot.receiveMiddleware (context, next, done) ->\n+  if context.response.message.user.id in BLACKLISTED_USERS\n+    if context.response.message.text?.match(robot.respondPattern(''))\n+      context.response.reply \"I'm sorry @#{context.response.message.user.name}, but I'm configured to ignore your commands.\"\n+    context.response.message.finish()\n+    done()\n+  else\n+    next(done)\n+```\n+\n+## Receive Middleware API\n+\n+Receive middleware callbacks receive three arguments, `context`, `next`, and\n+`done`. See the [middleware API](#execution-process-and-api) for a description\n+of `next` and `done`. Receive middleware context includes these fields:\n+  - `response`\n+    - all parts of the standard response API are included in the middleware API. See [Send & Reply](#send--reply).\n+    - middleware may decorate the response object with additional information (e.g. add a property to `response.message.user` with a user's LDAP groups)\n+    - middleware may modify the `response.message` object\n+    - note: the textual message (`response.message.text`) should be considered immutable in listener middleware", "changes": 74}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/src/middleware.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/src/middleware.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/middleware.coffee?ref=c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7", "filename": "src/middleware.coffee", "sha": "b81ea667257774fde7f188d74135851c039eee54", "additions": 1, "patch": "@@ -21,6 +21,7 @@ class Middleware\n   # Returns nothing\n   # Returns before executing any middleware\n   execute: (context, next, done) ->\n+    done ?= ->\n     # Execute a single piece of middleware and update the completion callback\n     # (each piece of middleware can wrap the 'done' callback with additional\n     # logic).", "changes": 1}, {"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7", "filename": "src/robot.coffee", "sha": "226fb6ce4cba90d660dc8cee124962defb1ae189", "additions": 43, "patch": "@@ -51,6 +51,7 @@ class Robot\n     @listeners  = []\n     @middleware =\n       listener: new Middleware(@)\n+      receive:  new Middleware(@)\n     @logger     = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n     @pingIntervalId = null\n     @globalHttpOptions = {}\n@@ -226,7 +227,7 @@ class Robot\n   #\n   # middleware - A function that determines whether or not a given matching\n   #              Listener should be executed. The function is called with\n-  #              (robot, listener, response, next, done). If execution should\n+  #              (context, next, done). If execution should\n   #              continue (next middleware, Listener callback), the middleware\n   #              should call the 'next' function with 'done' as an argument.\n   #              If not, the middleware should call the 'done' function with\n@@ -237,7 +238,22 @@ class Robot\n     @middleware.listener.register middleware\n     return undefined\n \n-  # Public: Passes the given message to any interested Listeners.\n+  # Public: Registers new middleware for execution before matching\n+  #\n+  # middleware - A function that determines whether or not listeners should be\n+  #              checked. The function is called with (context, next, done). If\n+  #              ext, next, done). If execution should continue to the next\n+  #              middleware or matching phase, it should call the 'next'\n+  #              function with 'done' as an argument. If not, the middleware\n+  #              should call the 'done' function with no arguments.\n+  #\n+  # Returns nothing.\n+  receiveMiddleware: (middleware) ->\n+    @middleware.receive.register middleware\n+    return undefined\n+\n+  # Public: Passes the given message to any interested Listeners after running\n+  #         receive middleware.\n   #\n   # message - A Message instance. Listeners can flag this message as 'done' to\n   #           prevent further execution.\n@@ -247,34 +263,53 @@ class Robot\n   # Returns nothing.\n   # Returns before executing callback\n   receive: (message, cb) ->\n+    # When everything is finished (down the middleware stack and back up),\n+    # pass control back to the robot\n+    @middleware.receive.execute(\n+      {response: new Response(this, message)}\n+      @processListeners.bind this\n+      cb\n+    )\n+\n+  # Private: Passes the given message to any interested Listeners.\n+  #\n+  # message - A Message instance. Listeners can flag this message as 'done' to\n+  #           prevent further execution.\n+  #\n+  # done - Optional callback that is called when message processing is complete\n+  #\n+  # Returns nothing.\n+  # Returns before executing callback\n+  processListeners: (context, done) ->\n     # Try executing all registered Listeners in order of registration\n     # and return after message is done being processed\n     anyListenersExecuted = false\n     async.detectSeries(\n       @listeners,\n       (listener, cb) =>\n         try\n-          listener.call message, @middleware.listener, (listenerExecuted) ->\n+          listener.call context.response.message, @middleware.listener, (listenerExecuted) ->\n             anyListenersExecuted = anyListenersExecuted || listenerExecuted\n             # Defer to the event loop at least after every listener so the\n             # stack doesn't get too big\n             process.nextTick () ->\n               # Stop processing when message.done == true\n-              cb(message.done)\n+              cb(context.response.message.done)\n         catch err\n-          @emit('error', err, new @Response(@, message, []))\n+          @emit('error', err, new @Response(@, context.response.message, []))\n           # Continue to next listener when there is an error\n           cb(false)\n       ,\n       # Ignore the result ( == the listener that set message.done = true)\n       (_) =>\n         # If no registered Listener matched the message\n-        if message not instanceof CatchAllMessage and not anyListenersExecuted\n+        if context.response.message not instanceof CatchAllMessage and not anyListenersExecuted\n           @logger.debug 'No listeners executed; falling back to catch-all'\n-          @receive new CatchAllMessage(message), cb\n+          @receive new CatchAllMessage(context.response.message), done\n         else\n-          process.nextTick cb if cb?\n+          process.nextTick done if done?\n     )\n+    return undefined\n \n \n   # Public: Loads a file in path.", "changes": 51}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/test/middleware_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/test/middleware_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/middleware_test.coffee?ref=c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7", "filename": "test/middleware_test.coffee", "sha": "a7a0df7cb9fc62685146c7981e515999be3f4961", "additions": 43, "patch": "@@ -137,6 +137,17 @@ describe 'Middleware', ->\n         @middleware.execute {}, (->), (->)\n         finished = true\n \n+      it 'creates a default \"done\" function', (testDone) ->\n+        finished = false\n+\n+        @middleware.register (context, next, done) ->\n+          expect(finished).to.be.ok\n+          testDone()\n+\n+        # we're testing the lack of a third argument here.\n+        @middleware.execute {}, (->)\n+        finished = true\n+\n       it 'does the right thing with done callbacks', (testDone) ->\n         # we want to ensure that the 'done' callbacks are nested correctly\n         # (executed in reverse order of definition)\n@@ -299,7 +310,7 @@ describe 'Middleware', ->\n   # Per the documentation in docs/scripting.md\n   # Any new fields that are exposed to middleware should be explicitly\n   # tested for.\n-  describe 'Listener Middleware Public API', ->\n+  describe 'Public Middleware APIs', ->\n     beforeEach ->\n       @robot = new Robot null, 'mock-adapter', yes, 'TestHubot'\n       @robot.run\n@@ -319,9 +330,6 @@ describe 'Middleware', ->\n       @middleware = sinon.spy (context, next, done) ->\n         next(done)\n \n-      @robot.listenerMiddleware (context, next, done) =>\n-        @middleware.call @, context, next, done\n-\n       @testMessage = new TextMessage @user, 'message123'\n       @robot.hear /^message123$/, (response) ->\n       @testListener = @robot.listeners[0]\n@@ -330,7 +338,11 @@ describe 'Middleware', ->\n       @robot.server.close()\n       @robot.shutdown()\n \n-    describe 'context', ->\n+    describe 'listener middleware context', ->\n+      beforeEach ->\n+        @robot.listenerMiddleware (context, next, done) =>\n+          @middleware.call @, context, next, done\n+\n       describe 'listener', ->\n         it 'is the listener object that matched', (testDone) ->\n           @robot.receive @testMessage, () =>\n@@ -366,7 +378,29 @@ describe 'Middleware', ->\n             )\n             testDone()\n \n+    describe 'receive middleware context', ->\n+      beforeEach ->\n+        @robot.receiveMiddleware (context, next, done) =>\n+          @middleware.call @, context, next, done\n+\n+      describe 'response', ->\n+        it 'is a match-less Response object', (testDone) ->\n+          @robot.receive @testMessage, () =>\n+            expect(@middleware).to.have.been.calledWithMatch(\n+              sinon.match.has('response',\n+                sinon.match.instanceOf(Response).and(\n+                  sinon.match.has('message',\n+                    sinon.match.same(@testMessage)))) # context\n+              sinon.match.any                         # next\n+              sinon.match.any                         # done\n+            )\n+            testDone()\n+\n     describe 'next', ->\n+      beforeEach ->\n+        @robot.listenerMiddleware (context, next, done) =>\n+          @middleware.call @, context, next, done\n+\n       it 'is a function with arity one', (testDone) ->\n         @robot.receive @testMessage, () =>\n           expect(@middleware).to.have.been.calledWithMatch(\n@@ -379,6 +413,10 @@ describe 'Middleware', ->\n           testDone()\n \n     describe 'done', ->\n+      beforeEach ->\n+        @robot.listenerMiddleware (context, next, done) =>\n+          @middleware.call @, context, next, done\n+\n       it 'is a function with arity zero', (testDone) ->\n         @robot.receive @testMessage, () =>\n           expect(@middleware).to.have.been.calledWithMatch(", "changes": 48}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=c41a6a0d7cf798b0dc120cfdb4913d674b8bcfc7", "filename": "test/robot_test.coffee", "sha": "79d5fe1bd5e49103279e0da289213a929b670d2e", "additions": 99, "patch": "@@ -35,6 +35,7 @@ describe 'Robot', ->\n \n     # Re-throw AssertionErrors for clearer test failures\n     @robot.on 'error', (name, err, response) ->\n+      return unless err?.constructor?\n       if err.constructor.name == \"AssertionError\"\n         process.nextTick () ->\n           throw err\n@@ -647,3 +648,101 @@ describe 'Robot', ->\n             'doneA'\n           ])\n           testDone()\n+\n+    describe 'Receive Middleware', ->\n+      it 'fires for all messages, including non-matching ones', (testDone) ->\n+        middlewareSpy = sinon.spy()\n+        listenerCallback = sinon.spy()\n+        @robot.hear /^message123$/, listenerCallback\n+        @robot.receiveMiddleware (context, next, done) ->\n+          middlewareSpy()\n+          next(done)\n+\n+        testMessage = new TextMessage @user, 'not message 123'\n+\n+        @robot.receive testMessage, () ->\n+          expect(listenerCallback).to.not.have.been.called\n+          expect(middlewareSpy).to.have.been.called\n+          testDone()\n+\n+      it 'can block listener execution', (testDone) ->\n+        middlewareSpy = sinon.spy()\n+        listenerCallback = sinon.spy()\n+        @robot.hear /^message123$/, listenerCallback\n+        @robot.receiveMiddleware (context, next, done) ->\n+          # Block Listener callback execution\n+          middlewareSpy()\n+          done()\n+\n+        testMessage = new TextMessage @user, 'message123'\n+        @robot.receive testMessage, () ->\n+          expect(listenerCallback).to.not.have.been.called\n+          expect(middlewareSpy).to.have.been.called\n+          testDone()\n+\n+      it 'receives the correct arguments', (testDone) ->\n+        @robot.hear /^message123$/, () ->\n+        testMessage = new TextMessage @user, 'message123'\n+\n+        @robot.receiveMiddleware (context, next, done) ->\n+          # Escape middleware error handling for clearer test failures\n+          expect(context.response.message).to.equal(testMessage)\n+          expect(next).to.be.a('function')\n+          expect(done).to.be.a('function')\n+          testDone()\n+          next(done)\n+\n+        @robot.receive testMessage\n+\n+      it 'executes receive middleware in order of definition', (testDone) ->\n+        execution = []\n+\n+        testMiddlewareA = (context, next, done) ->\n+          execution.push 'middlewareA'\n+          next () ->\n+            execution.push 'doneA'\n+            done()\n+\n+        testMiddlewareB = (context, next, done) ->\n+          execution.push 'middlewareB'\n+          next () ->\n+            execution.push 'doneB'\n+            done()\n+\n+        @robot.receiveMiddleware testMiddlewareA\n+        @robot.receiveMiddleware testMiddlewareB\n+\n+        @robot.hear /^message123$/, () ->\n+          execution.push 'listener'\n+\n+        testMessage = new TextMessage @user, 'message123'\n+        @robot.receive testMessage, () ->\n+          expect(execution).to.deep.equal([\n+            'middlewareA'\n+            'middlewareB'\n+            'listener'\n+            'doneB'\n+            'doneA'\n+          ])\n+          testDone()\n+\n+      it 'allows editing the message portion of the given response', (testDone) ->\n+        execution = []\n+\n+        testMiddlewareA = (context, next, done) ->\n+          context.response.message.text = \"foobar\"\n+          next()\n+\n+        testMiddlewareB = (context, next, done) ->\n+          expect(context.response.message.text).to.equal(\"foobar\")\n+          next()\n+\n+        @robot.receiveMiddleware testMiddlewareA\n+        @robot.receiveMiddleware testMiddlewareB\n+\n+        @robot.hear /^foobar$/, () ->\n+          # We'll never get to this if testMiddlewareA has not modified the message.\n+          testDone()\n+\n+        testMessage = new TextMessage @user, 'message123'\n+        @robot.receive testMessage", "changes": 99}], "1020": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/95090953661f0ceec4608c6f0c578edc9b440a17/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/95090953661f0ceec4608c6f0c578edc9b440a17/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=95090953661f0ceec4608c6f0c578edc9b440a17", "filename": "package.json", "sha": "f2dfa42f444bcbb909a4001c4f62a82f8429c746", "additions": 1, "patch": "@@ -27,6 +27,7 @@\n   },\n   \"devDependencies\": {\n     \"hubot-mock-adapter\": \"^1.0.0\",\n+    \"coffee-errors\": \"0.8.6\",\n     \"mocha\": \"^2.1.0\",\n     \"mockery\": \"^1.4.0\",\n     \"sinon-chai\": \"^2.6.0\"", "changes": 1}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/95090953661f0ceec4608c6f0c578edc9b440a17/script/test", "blob_url": "https://github.com/hubotio/hubot/blob/95090953661f0ceec4608c6f0c578edc9b440a17/script/test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/test?ref=95090953661f0ceec4608c6f0c578edc9b440a17", "filename": "script/test", "sha": "705a6f54e9d524163ce7edef959a7a44c7a2c8a7", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n #!/bin/bash\n \n source script/bootstrap\n-mocha --compilers coffee:coffee-script \"$@\"\n+mocha --require coffee-errors --compilers coffee:coffee-script \"$@\"", "changes": 2}], "1021": [{"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/0544029fb3f8d0964228cf5f379e160bea48b573/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/0544029fb3f8d0964228cf5f379e160bea48b573/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=0544029fb3f8d0964228cf5f379e160bea48b573", "filename": "docs/scripting.md", "sha": "6eb39e82737198fb5c9990914d002f943db7a210", "additions": 36, "patch": "@@ -645,22 +645,18 @@ These scoped identifiers allow you to externally specify new behaviors like:\n \n # Middleware\n \n-There are two kinds of middleware: Receive middleware and Listener Middleware.\n+There are three kinds of middleware: Receive, Listener and Response.\n \n Receive middleware runs once, before listeners are checked.\n Listener middleware runs for every listener that matches the message.\n+Response middleware runs for every response sent to a message.\n \n ## Execution Process and API\n \n-Similar to [Express middleware](http://expressjs.com/api.html#middleware), Hubot listener middleware executes middleware in definition order. Each middleware can either continue the chain (by calling `next`) or interrupt the chain (by calling `done`). If all middleware continues, the listener callback is executed and `done` is called. Middleware may wrap the `done` callback to allow executing code in the second half of the process (after the listener callback has been executed or a deeper piece of middleware has interrupted).\n+Similar to [Express middleware](http://expressjs.com/api.html#middleware), Hubot executes middleware in definition order. Each middleware can either continue the chain (by calling `next`) or interrupt the chain (by calling `done`). If all middleware continues, the listener callback is executed and `done` is called. Middleware may wrap the `done` callback to allow executing code in the second half of the process (after the listener callback has been executed or a deeper piece of middleware has interrupted).\n \n Middleware is called with:\n \n-- a context object containing:\n-  - matching Listener object (with associated metadata)\n-  - response object (contains the original message)\n-- next/done callbacks.\n-\n - `context`\n   - See the each middleware type's API to see what the context will expose.\n - `next`\n@@ -789,3 +785,36 @@ of `next` and `done`. Receive middleware context includes these fields:\n     - this response object will not have a `match` property, as no listeners have been run yet to match it.\n     - middleware may decorate the response object with additional information (e.g. add a property to `response.message.user` with a user's LDAP groups)\n     - middleware may modify the `response.message` object\n+\n+# Response Middleware\n+\n+Response middleware runs against every message hubot sends to a chat room. It's\n+helpful for message formatting, preventing password leaks, metrics, and more.\n+\n+## Response Middleware Example\n+\n+This simple example changes the format of links sent to a chat room from\n+markdown links (like [example](https://example.com)) to the format supported\n+by [Slack](https://slack.com), <https://example.com|example>.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.responseMiddleware (context, next, done) ->\n+    return unless context.plaintext?\n+    context.strings = (string.replace(/\\[([^\\[\\]]*?)\\]\\((https?:\\/\\/.*?)\\)/, \"<$2|$1>\") for string in context.strings)\n+    next()\n+```\n+\n+## Response Middleware API\n+\n+Response middleware callbacks receive three arguments, `context`, `next`, and\n+`done`. See the [middleware API](#execution-process-and-api) for a description\n+of `next` and `done`. Receive middleware context includes these fields:\n+  - `response`\n+    - This response object can be used to send new messages from the middleware. Middleware will be called on these new responses. Be careful not to create infinite loops.\n+  - `strings`\n+    - An array of strings being sent to the chat room adapter. You can edit these, or use `context.strings = [\"new strings\"]` to replace them.\n+  - `method`\n+    - A string representing which type of response message the listener sent, such as `send`, `reply`, `emote` or `topic`.\n+  - `plaintext`\n+    - `true` or `undefined`. This will be set to `true` if the message is of a normal plaintext type, such as `send` or `reply`. This property should be treated as read-only.", "changes": 43}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/0544029fb3f8d0964228cf5f379e160bea48b573/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0544029fb3f8d0964228cf5f379e160bea48b573/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=0544029fb3f8d0964228cf5f379e160bea48b573", "filename": "src/response.coffee", "sha": "504ee382a29fef139e6beead60a052e404b64359", "additions": 25, "patch": "@@ -19,7 +19,7 @@ class Response\n   #\n   # Returns nothing.\n   send: (strings...) ->\n-    @robot.adapter.send @envelope, strings...\n+    @runWithMiddleware(\"send\", { plaintext: true }, strings...)\n \n   # Public: Posts an emote back to the chat source\n   #\n@@ -28,7 +28,7 @@ class Response\n   #\n   # Returns nothing.\n   emote: (strings...) ->\n-    @robot.adapter.emote @envelope, strings...\n+    @runWithMiddleware(\"emote\", { plaintext: true }, strings...)\n \n   # Public: Posts a message mentioning the current user.\n   #\n@@ -37,7 +37,7 @@ class Response\n   #\n   # Returns nothing.\n   reply: (strings...) ->\n-    @robot.adapter.reply @envelope, strings...\n+    @runWithMiddleware(\"reply\", { plaintext: true }, strings...)\n \n   # Public: Posts a topic changing message\n   #\n@@ -46,7 +46,7 @@ class Response\n   #\n   # Returns nothing.\n   topic: (strings...) ->\n-    @robot.adapter.topic @envelope, strings...\n+    @runWithMiddleware(\"topic\", { plaintext: true }, strings...)\n \n   # Public: Play a sound in the chat source\n   #\n@@ -55,7 +55,7 @@ class Response\n   #\n   # Returns nothing\n   play: (strings...) ->\n-    @robot.adapter.play @envelope, strings...\n+    @runWithMiddleware(\"play\", strings...)\n \n   # Public: Posts a message in an unlogged room\n   #\n@@ -64,7 +64,26 @@ class Response\n   #\n   # Returns nothing\n   locked: (strings...) ->\n-    @robot.adapter.locked @envelope, strings...\n+    @runWithMiddleware(\"locked\", { plaintext: true }, strings...)\n+\n+  # Private: Call with a method for the given strings using response\n+  # middleware.\n+  runWithMiddleware: (methodName, opts, strings...) ->\n+    callback = undefined\n+    copy = strings.slice(0)\n+    if typeof(copy[copy.length - 1]) == 'function'\n+      callback = copy.pop()\n+    context = {response: @, strings: copy, method: methodName}\n+    context.plaintext = true if opts.plaintext?\n+    responseMiddlewareDone = ->\n+    runAdapterSend = (_, done) =>\n+      result = context.strings\n+      result.push(callback) if callback?\n+      @robot.adapter[methodName](@envelope, result...)\n+      done()\n+    @robot.middleware.response.execute context,\n+                                       runAdapterSend,\n+                                       responseMiddlewareDone\n \n   # Public: Picks a random item from the given items.\n   #", "changes": 31}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0544029fb3f8d0964228cf5f379e160bea48b573/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0544029fb3f8d0964228cf5f379e160bea48b573/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=0544029fb3f8d0964228cf5f379e160bea48b573", "filename": "src/robot.coffee", "sha": "35d5a8fdc1b7782b9aa34d0000eafcb2cae3cf2e", "additions": 16, "patch": "@@ -51,6 +51,7 @@ class Robot\n     @listeners  = []\n     @middleware =\n       listener: new Middleware(@)\n+      response: new Middleware(@)\n       receive:  new Middleware(@)\n     @logger     = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n     @pingIntervalId = null\n@@ -249,6 +250,21 @@ class Robot\n     @middleware.listener.register middleware\n     return undefined\n \n+  # Public: Registers new middleware for execution as a response to any\n+  # message is being sent.\n+  #\n+  # middleware - A function that examines an outgoing message and can modify\n+  #              it or prevent its sending. The function is called with\n+  #              (context, next, done). If execution should continue,\n+  #              the middleware should call next(done). If execution should stop,\n+  #              the middleware should call done(). To modify the outgoing message,\n+  #              set context.string to a new message.\n+  #\n+  # Returns nothing.\n+  responseMiddleware: (middleware) ->\n+    @middleware.response.register middleware\n+    return undefined\n+\n   # Public: Registers new middleware for execution before matching\n   #\n   # middleware - A function that determines whether or not listeners should be", "changes": 16}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/0544029fb3f8d0964228cf5f379e160bea48b573/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/0544029fb3f8d0964228cf5f379e160bea48b573/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=0544029fb3f8d0964228cf5f379e160bea48b573", "filename": "test/robot_test.coffee", "sha": "19d4f33d6df0820dcca18d6ad1961d357503519d", "additions": 82, "patch": "@@ -767,3 +767,85 @@ describe 'Robot', ->\n         @robot.receive testMessage, ->\n           expect(testCallback).to.have.been.called\n           testDone()\n+\n+    describe 'Response Middleware', ->\n+      it 'executes response middleware in order', (testDone) ->\n+        @robot.adapter.send = sendSpy = sinon.spy()\n+        listenerCallback = sinon.spy()\n+        @robot.hear /^message123$/, (response) ->\n+          response.send \"foobar, sir, foobar.\"\n+\n+        @robot.responseMiddleware (context, next, done) ->\n+          context.strings[0] = context.strings[0].replace(/foobar/g, \"barfoo\")\n+          next()\n+\n+        @robot.responseMiddleware (context, next, done) ->\n+          context.strings[0] = context.strings[0].replace(/barfoo/g, \"replaced bar-foo\")\n+          next()\n+\n+        testMessage = new TextMessage @user, 'message123'\n+        @robot.receive testMessage, () ->\n+          expect(sendSpy.getCall(0).args[1]).to.equal('replaced bar-foo, sir, replaced bar-foo.')\n+          testDone()\n+\n+      it 'allows replacing outgoing strings', (testDone) ->\n+        @robot.adapter.send = sendSpy = sinon.spy()\n+        listenerCallback = sinon.spy()\n+        @robot.hear /^message123$/, (response) ->\n+          response.send \"foobar, sir, foobar.\"\n+\n+        @robot.responseMiddleware (context, next, done) ->\n+          context.strings = [\"whatever I want.\"]\n+          next()\n+\n+        testMessage = new TextMessage @user, 'message123'\n+        @robot.receive testMessage, () ->\n+          expect(sendSpy.getCall(0).args[1]).to.deep.equal(\"whatever I want.\")\n+          testDone()\n+\n+      it 'marks plaintext as plaintext', (testDone) ->\n+        @robot.adapter.send = sendSpy = sinon.spy()\n+        listenerCallback = sinon.spy()\n+        @robot.hear /^message123$/, (response) ->\n+          response.send \"foobar, sir, foobar.\"\n+        @robot.hear /^message456$/, (response) ->\n+          response.play \"good luck with that\"\n+\n+        method = undefined\n+        plaintext = undefined\n+        @robot.responseMiddleware (context, next, done) ->\n+          method = context.method\n+          plaintext = context.plaintext\n+          next(done)\n+\n+        testMessage = new TextMessage @user, 'message123'\n+\n+        @robot.receive testMessage, () =>\n+          expect(plaintext).to.equal true\n+          expect(method).to.equal \"send\"\n+          testMessage2 = new TextMessage @user, 'message456'\n+          @robot.receive testMessage2, () ->\n+            expect(plaintext).to.equal undefined\n+            expect(method).to.equal \"play\"\n+            testDone()\n+\n+      it 'does not send trailing functions to middleware', (testDone) ->\n+        @robot.adapter.send = sendSpy = sinon.spy()\n+        asserted = false\n+        postSendCallback = ->\n+        @robot.hear /^message123$/, (response) ->\n+          response.send \"foobar, sir, foobar.\", postSendCallback\n+\n+        @robot.responseMiddleware (context, next, done) ->\n+          # We don't send the callback function to middleware, so it's not here.\n+          expect(context.strings).to.deep.equal [\"foobar, sir, foobar.\"]\n+          expect(context.method).to.equal \"send\"\n+          asserted = true\n+          next()\n+\n+        testMessage = new TextMessage @user, 'message123'\n+        @robot.receive testMessage, ->\n+          expect(asserted).to.equal(true)\n+          expect(sendSpy.getCall(0).args[1]).to.equal('foobar, sir, foobar.')\n+          expect(sendSpy.getCall(0).args[2]).to.equal(postSendCallback)\n+          testDone()", "changes": 82}], "1025": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/116df643c2c9bdc3f9596259d1d6e52d77842386/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/116df643c2c9bdc3f9596259d1d6e52d77842386/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=116df643c2c9bdc3f9596259d1d6e52d77842386", "filename": "src/robot.coffee", "sha": "be67703dd992ea262a0f2fa27d3b5aadb61ba47b", "additions": 3, "patch": "@@ -54,6 +54,7 @@ class Robot\n     @logger     = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n     @pingIntervalId = null\n     @globalHttpOptions = {}\n+    @scriptDocumentation = []\n \n     @parseVersion()\n     if httpd\n@@ -467,6 +468,8 @@ class Robot\n         scriptDocumentation.commands.push cleanedLine\n         @commands.push cleanedLine\n \n+    @scriptDocumentation.push scriptDocumentation\n+\n   # Public: A helper send function which delegates to the adapter's send\n   # function.\n   #", "changes": 3}], "1028": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/fb932fa39f2f42ccc18c97a019f8ebb92c871185/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/fb932fa39f2f42ccc18c97a019f8ebb92c871185/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=fb932fa39f2f42ccc18c97a019f8ebb92c871185", "filename": "docs/patterns.md", "sha": "11a7a3cc201285894619090c73bd85299e30159c", "additions": 2, "patch": "@@ -121,14 +121,14 @@ module.exports = (robot) ->\n     if context.listener.options.id in POWER_COMMANDS\n       if context.response.message.user.id in POWER_USERS\n         # User is allowed access to this command\n-        next(done)\n+        next()\n       else\n         # Restricted command, but user isn't in whitelist\n         context.response.reply \"I'm sorry, @#{context.response.message.user.name}, but you don't have access to do that.\"\n         done()\n     else\n       # This is not a restricted command; allow everyone\n-      next(done)\n+      next()\n ```\n \n Remember that middleware executes for ALL listeners that match a given message (including `robot.hear /.+/`), so make sure you include them when categorizing your listeners.", "changes": 4}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/fb932fa39f2f42ccc18c97a019f8ebb92c871185/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/fb932fa39f2f42ccc18c97a019f8ebb92c871185/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=fb932fa39f2f42ccc18c97a019f8ebb92c871185", "filename": "docs/scripting.md", "sha": "a578f94ac4524f9c0aa4e958ff7df71a146cbbbb", "additions": 3, "patch": "@@ -655,7 +655,7 @@ module.exports = (robot) ->\n     # Log commands\n     robot.logger.info \"#{context.response.message.user.name} asked me to #{context.response.message.text}\"\n     # Continue executing middleware\n-    next(done)\n+    next()\n ```\n \n In this example, a log message will be written for each chat message that matches a Listener.\n@@ -678,7 +678,7 @@ module.exports = (robot) ->\n         # Command is being executed too quickly!\n         done()\n       else\n-        next () ->\n+        next ->\n           lastExecutedTime[context.listener.options.id] = Date.now()\n           done()\n     catch err\n@@ -712,7 +712,7 @@ Although internal data structures are exposed, not all properties on the objects\n \n - `next`\n   - a Function with no additional properties that should be called to continue on to the next piece of middleware/execute the Listener callback\n-  - `next` should be called with a single argument: either the provided `done` function or a new function that eventually calls `done`\n+  - `next` should be called with a single optional argument: either the provided `done` function or a new function that eventually calls `done`\n \n - `done`\n  - a Function with no additional properties that should be called to interrupt middleware execution and begin executing the chain of completion functions.", "changes": 6}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/fb932fa39f2f42ccc18c97a019f8ebb92c871185/src/middleware.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fb932fa39f2f42ccc18c97a019f8ebb92c871185/src/middleware.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/middleware.coffee?ref=fb932fa39f2f42ccc18c97a019f8ebb92c871185", "filename": "src/middleware.coffee", "sha": "37aee219bf3488d58f3caefeeced700bae917706", "additions": 3, "patch": "@@ -26,7 +26,7 @@ class Middleware\n     # logic).\n     executeSingleMiddleware = (doneFunc, middlewareFunc, cb) =>\n       # Match the async.reduce interface\n-      nextFunc = (newDoneFunc) -> cb(null, newDoneFunc)\n+      nextFunc = (newDoneFunc) -> cb(null, newDoneFunc or doneFunc)\n       # Catch errors in synchronous middleware\n       try\n         middlewareFunc.call(undefined, context, nextFunc, doneFunc)\n@@ -50,7 +50,8 @@ class Middleware\n   #              continue the pipeline or interrupt it. The function is called\n   #              with (robot, context, next, done). If execution should\n   #              continue (next middleware, final callback), the middleware\n-  #              should call the 'next' function with 'done' as an argument.\n+  #              should call the 'next' function with 'done' as an optional\n+  #              argument.\n   #              If not, the middleware should call the 'done' function with\n   #              no arguments. Middleware may wrap the 'done' function in\n   #              order to execute logic after the final callback has been", "changes": 5}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fb932fa39f2f42ccc18c97a019f8ebb92c871185/test/middleware_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fb932fa39f2f42ccc18c97a019f8ebb92c871185/test/middleware_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/middleware_test.coffee?ref=fb932fa39f2f42ccc18c97a019f8ebb92c871185", "filename": "test/middleware_test.coffee", "sha": "89b6d381f25cbebbca080eb4247e33c0febdaf2d", "additions": 29, "patch": "@@ -168,6 +168,35 @@ describe 'Middleware', ->\n           allDone\n         )\n \n+      it 'defaults to the latest done callback if none is provided', (testDone) ->\n+        # we want to ensure that the 'done' callbacks are nested correctly\n+        # (executed in reverse order of definition)\n+        execution = []\n+\n+        testMiddlewareA = (context, next, done) ->\n+          execution.push 'middlewareA'\n+          next () ->\n+            execution.push 'doneA'\n+            done()\n+\n+        testMiddlewareB = (context, next, done) ->\n+          execution.push 'middlewareB'\n+          next()\n+\n+        @middleware.register testMiddlewareA\n+        @middleware.register testMiddlewareB\n+\n+        allDone = () ->\n+          expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'doneA'])\n+          testDone()\n+\n+        @middleware.execute(\n+          {}\n+          # Short circuit at the bottom of the middleware stack\n+          (_, done) -> done()\n+          allDone\n+        )\n+\n       describe 'error handling', ->\n         it 'does not execute subsequent middleware after the error is thrown', (testDone) ->\n           middlewareExecution = []", "changes": 29}], "1029": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/23882cd667a0326af56189893c3ef7849584b11f/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/23882cd667a0326af56189893c3ef7849584b11f/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=23882cd667a0326af56189893c3ef7849584b11f", "filename": "src/listener.coffee", "sha": "764a0cfa98913fd25f761309997991b27b028f3e", "additions": 2, "patch": "@@ -1,6 +1,7 @@\n {inspect} = require 'util'\n async     = require 'async'\n \n+Response = require './response'\n {TextMessage} = require './message'\n Middleware = require './middleware'\n \n@@ -75,7 +76,7 @@ class Listener\n         if cb?\n           process.nextTick -> cb true\n \n-      response = new @robot.Response(@robot, message, match)\n+      response = new Response(@robot, message, match)\n       middleware.execute(\n         {listener: @, response: response}\n         executeListener", "changes": 3}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/23882cd667a0326af56189893c3ef7849584b11f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/23882cd667a0326af56189893c3ef7849584b11f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=23882cd667a0326af56189893c3ef7849584b11f", "filename": "src/robot.coffee", "sha": "e6dc03274174a3c07a18506413b9062b50a47e46", "additions": 1, "patch": "@@ -46,7 +46,6 @@ class Robot\n     @brain      = new Brain @\n     @alias      = false\n     @adapter    = null\n-    @Response   = Response\n     @commands   = []\n     @listeners  = []\n     @middleware =\n@@ -262,7 +261,7 @@ class Robot\n               # Stop processing when message.done == true\n               cb(message.done)\n         catch err\n-          @emit('error', err, new @Response(@, message, []))\n+          @emit('error', err, new Response(@, message, []))\n           # Continue to next listener when there is an error\n           cb(false)\n       ,", "changes": 3}], "1030": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d56a26690e1b1a688bd2c939b17761224be0836c/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/d56a26690e1b1a688bd2c939b17761224be0836c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=d56a26690e1b1a688bd2c939b17761224be0836c", "filename": "CHANGELOG.md", "sha": "7f05b98b2ecb3247baf7201f29a452f4f7eda6c0", "additions": 7, "patch": "@@ -1,3 +1,10 @@\n+v2.15.0\n+=======\n+\n+* Document another middleware pattern https://github.com/github/hubot/pull/1017\n+* Make Robot.respondPattern a public method https://github.com/github/hubot/pull/1011\n+* Make \"done\" argument optional for middleware https://github.com/github/hubot/pull/1028\n+\n v2.14.0\n =======\n ", "changes": 7}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d56a26690e1b1a688bd2c939b17761224be0836c/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/d56a26690e1b1a688bd2c939b17761224be0836c/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=d56a26690e1b1a688bd2c939b17761224be0836c", "filename": "package.json", "sha": "be4cde9678d69023f05acd34a4cb5c444d692a14", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.14.0\",\n+  \"version\": \"2.15.0\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "1031": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a32cce7e6ff00f4a394d98a2b2d18ef055e95520/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/a32cce7e6ff00f4a394d98a2b2d18ef055e95520/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=a32cce7e6ff00f4a394d98a2b2d18ef055e95520", "filename": "docs/scripting.md", "sha": "2fa84254ad44fb2111c8fd709c13f5a0e96c5349", "additions": 29, "patch": "@@ -622,6 +622,35 @@ These scoped identifiers allow you to externally specify new behaviors like:\n - authorization policy: \"allow everyone in the `annoyers` group to execute `annoyance.*` commands\"\n - rate limiting: \"only allow executing `annoyance.start` once every 30 minutes\"\n \n+## Fetching Listeners\n+\n+It is sometimes useful to retrieve a specific Listener (e.g. for unit testing). Listeners can be retrieved by their `id` attribute using `robot.listenerById`. Listener IDs are assumed to be unique, so only the first matching listener is returned if there are multiple matches.\n+\n+A unit testing example:\n+\n+The script:\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.respond /who is oncall?/, id: 'get-room-oncall', (response) ->\n+    # it does stuff\n+```\n+\n+The test:\n+```coffeescript\n+describe 'listener \"get-room-oncall\"', ->\n+  it 'should match \"who is oncall?\"', (testDone) ->\n+    listener = @robot.listenerById 'get-room-oncall'\n+\n+    # Stub out the real work; just testing the match\n+    listener.callback = sinon.stub() # private API\n+\n+    testMessage = new TextMessage @user, \"TestHubot: who is oncall?\"\n+\n+    listener.call testMessage, (result) -> # private API\n+      expect(result).to.be.ok\n+      testDone()\n+```\n+\n # Listener Middleware\n \n Hubot supports inserting logic between the listener matching a message and the listener executing. This allows you to create extensions that apply to all scripts. Examples include centralized authorization policies, rate limiting, logging, and metrics. Middleware is implemented like other hubot scripts: instead of using the `hear` and `respond` methods, middleware is registered using `listenerMiddleware`.", "changes": 29}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a32cce7e6ff00f4a394d98a2b2d18ef055e95520/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a32cce7e6ff00f4a394d98a2b2d18ef055e95520/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=a32cce7e6ff00f4a394d98a2b2d18ef055e95520", "filename": "src/robot.coffee", "sha": "292d0169f8a2fbdff1e5ec7086612d099719ae77", "additions": 10, "patch": "@@ -221,6 +221,16 @@ class Robot\n       ((msg) -> msg.message = msg.message.message; callback msg)\n     )\n \n+  # Public: Find the listener with matching ID. Behavior is undefined if\n+  # multiple listeners have the same ID\n+  #\n+  # id - String that should exactly match listener.options.id\n+  #\n+  # Returns Listener instance\n+  listenerById: (id) ->\n+    results = @listeners.filter (listener) -> listener.options.id == id\n+    results[0] or null\n+\n   # Public: Registers new middleware for execution after matching but before\n   # Listener callbacks\n   #", "changes": 10}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a32cce7e6ff00f4a394d98a2b2d18ef055e95520/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/a32cce7e6ff00f4a394d98a2b2d18ef055e95520/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=a32cce7e6ff00f4a394d98a2b2d18ef055e95520", "filename": "test/robot_test.coffee", "sha": "2150f51bf5527d9cb398511ff04a1d91b9e60381", "additions": 20, "patch": "@@ -11,6 +11,7 @@ mockery = require 'mockery'\n Robot = require '../src/robot.coffee'\n { CatchAllMessage, EnterMessage, LeaveMessage, TextMessage, TopicMessage } = require '../src/message'\n Adapter = require '../src/adapter'\n+{ Listener } = require '../src/listener'\n \n ScopedHttpClient = require 'scoped-http-client'\n \n@@ -479,6 +480,25 @@ describe 'Robot', ->\n \n         expect(result).to.not.be.ok\n \n+    describe '#listenerById', ->\n+      beforeEach ->\n+        # Mock the relevant fields\n+        @testListener = options: id: 'test-listener'\n+\n+      it 'finds a listener with the given ID', ->\n+        @robot.listeners = [ @testListener ]\n+        expect(@robot.listenerById 'test-listener').to.be.equal(@testListener)\n+\n+      it 'returns null if no listener found', ->\n+        @robot.listeners = [ @testListener ]\n+        expect(@robot.listenerById 'fake-listener').to.be.null\n+\n+      it 'picks the first listener if multiple listeners found', ->\n+        # Add an extra field to make debugging a failing test easier\n+        @testListenerB = options: { id: 'test-listener', 'this-is': 'listener-b' }\n+        @robot.listeners = [ @testListener, @testListenerB ]\n+        expect(@robot.listenerById 'test-listener').to.be.equal(@testListener)\n+\n   describe 'Message Processing', ->\n     it 'calls a matching listener', (done) ->\n       testMessage = new TextMessage(@user, 'message123')", "changes": 20}], "1032": [{"status": "modified", "deletions": 47, "raw_url": "https://github.com/hubotio/hubot/raw/367a344fc487f9a1a04dab1a05beda3a04bf3a3d/test/listener_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/367a344fc487f9a1a04dab1a05beda3a04bf3a3d/test/listener_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.coffee?ref=367a344fc487f9a1a04dab1a05beda3a04bf3a3d", "filename": "test/listener_test.coffee", "sha": "f64424de8ed729705a16b42a66671944d1e63ad2", "additions": 31, "patch": "@@ -18,11 +18,11 @@ describe 'Listener', ->\n       # Re-throw AssertionErrors for clearer test failures\n       emit: (name, err, response) ->\n         if err.constructor.name == \"AssertionError\"\n-          process.nextTick () ->\n+          process.nextTick ->\n             throw err\n       # Ignore log messages\n       logger:\n-        debug: () ->\n+        debug: ->\n       # Why is this part of the Robot object??\n       Response: Response\n \n@@ -63,50 +63,46 @@ describe 'Listener', ->\n           done()\n \n       describe 'if the matcher returns true', ->\n+        beforeEach ->\n+          @createListener = (cb) ->\n+            new Listener @robot, sinon.stub().returns(true), cb\n+\n         it 'executes the listener callback', (done) ->\n           listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener listenerCallback\n           testListener.call testMessage, (_) ->\n             expect(listenerCallback).to.have.been.called\n             done()\n \n \n-        it 'returns true', () ->\n-          listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(true)\n+        it 'returns true', ->\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener ->\n           result = testListener.call testMessage\n           expect(result).to.be.ok\n \n         it 'calls the provided callback with true', (done) ->\n-          listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener ->\n           testListener.call testMessage, (result) ->\n             expect(result).to.be.ok\n             done()\n \n         it 'calls the provided callback after the function returns', (done) ->\n-          listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener ->\n           finished = false\n           testListener.call testMessage, (result) ->\n             expect(finished).to.be.ok\n             done()\n           finished = true\n \n         it 'handles uncaught errors from the listener callback', (done) ->\n-          testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n           theError = new Error()\n \n@@ -119,40 +115,36 @@ describe 'Listener', ->\n             expect(response.message).to.equal(testMessage)\n             done()\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener listenerCallback\n           testListener.call testMessage, sinon.spy()\n \n         it 'calls the provided callback with true if there is an error thrown by the listener callback', (done) ->\n-          testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n           theError = new Error()\n \n           listenerCallback = (response) ->\n             throw theError\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener listenerCallback\n           testListener.call testMessage, (result) ->\n             expect(result).to.be.ok\n             done()\n \n         it 'calls the listener callback with a Response that wraps the Message', (done) ->\n-          testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n \n           listenerCallback = (response) ->\n             expect(response.message).to.equal(testMessage)\n             done()\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener listenerCallback\n \n           testListener.call testMessage, sinon.spy()\n \n         it 'passes through the provided middleware stack', (testDone) ->\n-          listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener ->\n           testMiddleware =\n             execute: (context, next, done) ->\n               expect(context.listener).to.be.equal(testListener)\n@@ -166,10 +158,9 @@ describe 'Listener', ->\n \n         it 'executes the listener callback if middleware succeeds', (testDone) ->\n           listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener listenerCallback\n \n           testListener.call testMessage, (result) ->\n             expect(listenerCallback).to.have.been.called\n@@ -179,10 +170,9 @@ describe 'Listener', ->\n \n         it 'does not execute the listener callback if middleware fails', (testDone) ->\n           listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener listenerCallback\n           testMiddleware =\n             execute: (context, next, done) ->\n               # Middleware fails\n@@ -196,11 +186,10 @@ describe 'Listener', ->\n \n         it 'unwinds the middleware stack if there is an error in the listener callback', (testDone) ->\n           listenerCallback = sinon.stub().throws(new Error())\n-          testMatcher = sinon.stub().returns(true)\n           testMessage = {}\n           extraDoneFunc = null\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener listenerCallback\n           testMiddleware =\n             execute: (context, next, done) ->\n               extraDoneFunc = sinon.spy done\n@@ -217,54 +206,49 @@ describe 'Listener', ->\n \n \n       describe 'if the matcher returns false', ->\n+        beforeEach ->\n+          @createListener = (cb) ->\n+            new Listener @robot, sinon.stub().returns(false), cb\n+\n         it 'does not execute the listener callback', (done) ->\n           listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(false)\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener listenerCallback\n           testListener.call testMessage, (_) ->\n             expect(listenerCallback).to.not.have.been.called\n             done()\n \n \n-        it 'returns false', () ->\n-          listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(false)\n+        it 'returns false', ->\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener ->\n           result = testListener.call testMessage\n           expect(result).to.not.be.ok\n \n         it 'calls the provided callback with false', (done) ->\n-          listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(false)\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener ->\n           testListener.call testMessage, (result) ->\n             expect(result).to.not.be.ok\n             done()\n \n         it 'calls the provided callback after the function returns', (done) ->\n-          listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(false)\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener ->\n           finished = false\n           testListener.call testMessage, (result) ->\n             expect(finished).to.be.ok\n             done()\n           finished = true\n \n         it 'does not execute any middleware', (done) ->\n-          listenerCallback = sinon.spy()\n-          testMatcher = sinon.stub().returns(false)\n           testMessage = {}\n \n-          testListener = new Listener(@robot, testMatcher, listenerCallback)\n+          testListener = @createListener ->\n           testMiddleware =\n             execute: sinon.spy()\n \n@@ -274,13 +258,13 @@ describe 'Listener', ->\n \n     describe '#constructor', ->\n       it 'requires a matcher', ->\n-        expect(() -> new Listener(@robot, undefined, {}, sinon.spy())).to.throw(Error)\n+        expect(-> new Listener(@robot, undefined, {}, sinon.spy())).to.throw(Error)\n \n       it 'requires a callback', ->\n         # No options\n-        expect(() -> new Listener(@robot, sinon.spy(), undefined)).to.throw(Error)\n+        expect(-> new Listener(@robot, sinon.spy())).to.throw(Error)\n         # With options\n-        expect(() -> new Listener(@robot, sinon.spy(), {}, undefined)).to.throw(Error)\n+        expect(-> new Listener(@robot, sinon.spy(), {})).to.throw(Error)\n \n       it 'gracefully handles missing options', ->\n         testMatcher = sinon.spy()", "changes": 78}, {"status": "modified", "deletions": 9, "raw_url": "https://github.com/hubotio/hubot/raw/367a344fc487f9a1a04dab1a05beda3a04bf3a3d/test/middleware_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/367a344fc487f9a1a04dab1a05beda3a04bf3a3d/test/middleware_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/middleware_test.coffee?ref=367a344fc487f9a1a04dab1a05beda3a04bf3a3d", "filename": "test/middleware_test.coffee", "sha": "086f85be350b6fc80eb03961c241e1f091f4f288", "additions": 8, "patch": "@@ -144,20 +144,20 @@ describe 'Middleware', ->\n \n         testMiddlewareA = (context, next, done) ->\n           execution.push 'middlewareA'\n-          next () ->\n+          next ->\n             execution.push 'doneA'\n             done()\n \n         testMiddlewareB = (context, next, done) ->\n           execution.push 'middlewareB'\n-          next () ->\n+          next ->\n             execution.push 'doneB'\n             done()\n \n         @middleware.register testMiddlewareA\n         @middleware.register testMiddlewareB\n \n-        allDone = () ->\n+        allDone = ->\n           expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'doneB', 'doneA'])\n           testDone()\n \n@@ -175,7 +175,7 @@ describe 'Middleware', ->\n \n         testMiddlewareA = (context, next, done) ->\n           execution.push 'middlewareA'\n-          next () ->\n+          next ->\n             execution.push 'doneA'\n             done()\n \n@@ -186,7 +186,7 @@ describe 'Middleware', ->\n         @middleware.register testMiddlewareA\n         @middleware.register testMiddlewareB\n \n-        allDone = () ->\n+        allDone = ->\n           expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'doneA'])\n           testDone()\n \n@@ -259,8 +259,7 @@ describe 'Middleware', ->\n \n           testMiddlewareA = (context, next, done) ->\n             # Goal: make sure that the middleware stack is unwound correctly\n-            extraDoneFunc = sinon.spy () ->\n-              done()\n+            extraDoneFunc = sinon.spy done\n             next extraDoneFunc\n \n           testMiddlewareB = (context, next, done) ->\n@@ -270,7 +269,7 @@ describe 'Middleware', ->\n           @middleware.register testMiddlewareB\n \n           middlewareFinished = sinon.spy()\n-          middlewareFailed = () ->\n+          middlewareFailed = ->\n             # Sanity check that the error was actually thrown\n             expect(middlewareFinished).to.not.have.been.called\n \n@@ -307,7 +306,7 @@ describe 'Middleware', ->\n       # Re-throw AssertionErrors for clearer test failures\n       @robot.on 'error', (name, err, response) ->\n         if err?.constructor?.name == \"AssertionError\"\n-          process.nextTick () ->\n+          process.nextTick ->\n             throw err\n \n       @user = @robot.brain.userForId '1', {", "changes": 17}, {"status": "modified", "deletions": 18, "raw_url": "https://github.com/hubotio/hubot/raw/367a344fc487f9a1a04dab1a05beda3a04bf3a3d/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/367a344fc487f9a1a04dab1a05beda3a04bf3a3d/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=367a344fc487f9a1a04dab1a05beda3a04bf3a3d", "filename": "test/robot_test.coffee", "sha": "f141706c9f33a6ba1cfecd9beee0cf40685bf775", "additions": 17, "patch": "@@ -36,7 +36,7 @@ describe 'Robot', ->\n     # Re-throw AssertionErrors for clearer test failures\n     @robot.on 'error', (name, err, response) ->\n       if err.constructor.name == \"AssertionError\"\n-        process.nextTick () ->\n+        process.nextTick ->\n           throw err\n \n     @user = @robot.brain.userForId '1', {\n@@ -194,7 +194,7 @@ describe 'Robot', ->\n           listener\n         ]\n \n-        @robot.receive testMessage, () ->\n+        @robot.receive testMessage, ->\n           # When no listeners match, each listener is called twice: once with\n           # the original message and once with a CatchAll message\n           expect(listener.call).to.have.callCount(8)\n@@ -237,8 +237,7 @@ describe 'Robot', ->\n         ]\n \n         # Call the original receive method that we want to test\n-        oldReceive.call @robot, testMessage, () ->\n-          done()\n+        oldReceive.call @robot, testMessage, done\n \n         # Ensure the function did not recurse\n         expect(@robot.receive).to.not.have.been.called\n@@ -260,7 +259,7 @@ describe 'Robot', ->\n           listenerSpy\n         ]\n \n-        @robot.receive testMessage, () ->\n+        @robot.receive testMessage, ->\n           expect(listenerSpy.call).to.not.have.been.called\n           done()\n \n@@ -269,7 +268,7 @@ describe 'Robot', ->\n         theError = new Error()\n \n         badListener =\n-          call: () ->\n+          call: ->\n             throw theError\n \n         goodListenerCalled = false\n@@ -498,7 +497,7 @@ describe 'Robot', ->\n       @robot.hear /^message123$/, listenerCallback\n       @robot.hear /^message123$/, listenerCallback\n \n-      @robot.receive testMessage, () ->\n+      @robot.receive testMessage, ->\n         expect(listenersCalled).to.equal(2)\n         done()\n \n@@ -524,7 +523,7 @@ describe 'Robot', ->\n       catchAllCallback = sinon.spy()\n       @robot.catchAll catchAllCallback\n \n-      @robot.receive testMessage, () ->\n+      @robot.receive testMessage, ->\n         expect(listenerCallback).to.have.been.called.once\n         expect(catchAllCallback).to.not.have.been.called\n         done()\n@@ -538,7 +537,7 @@ describe 'Robot', ->\n       listenerCallback = sinon.spy()\n       @robot.hear /^message123$/, listenerCallback\n \n-      @robot.receive testMessage, () ->\n+      @robot.receive testMessage, ->\n         expect(listenerCallback).to.not.have.been.called\n         done()\n \n@@ -555,11 +554,11 @@ describe 'Robot', ->\n       testMessage = new TextMessage @user, 'message123'\n       theError = new Error()\n \n-      @robot.hear /^message123$/, () ->\n+      @robot.hear /^message123$/, ->\n         throw theError\n \n       goodListenerCalled = false\n-      @robot.hear /^message123$/, () ->\n+      @robot.hear /^message123$/, ->\n         goodListenerCalled = true\n \n       [badListener,goodListener] = @robot.listeners\n@@ -584,7 +583,7 @@ describe 'Robot', ->\n           next done\n \n         testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, () ->\n+        @robot.receive testMessage, ->\n           expect(listenerCallback).to.have.been.called\n           testDone()\n \n@@ -596,12 +595,12 @@ describe 'Robot', ->\n           done()\n \n         testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, () ->\n+        @robot.receive testMessage, ->\n           expect(listenerCallback).to.not.have.been.called\n           testDone()\n \n       it 'receives the correct arguments', (testDone) ->\n-        @robot.hear /^message123$/, () ->\n+        @robot.hear /^message123$/, ->\n         testListener = @robot.listeners[0]\n         testMessage = new TextMessage @user, 'message123'\n \n@@ -621,24 +620,24 @@ describe 'Robot', ->\n \n         testMiddlewareA = (context, next, done) ->\n           execution.push 'middlewareA'\n-          next () ->\n+          next ->\n             execution.push 'doneA'\n             done()\n \n         testMiddlewareB = (context, next, done) ->\n           execution.push 'middlewareB'\n-          next () ->\n+          next ->\n             execution.push 'doneB'\n             done()\n \n         @robot.listenerMiddleware testMiddlewareA\n         @robot.listenerMiddleware testMiddlewareB\n \n-        @robot.hear /^message123$/, () ->\n+        @robot.hear /^message123$/, ->\n           execution.push 'listener'\n \n         testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, () ->\n+        @robot.receive testMessage, ->\n           expect(execution).to.deep.equal([\n             'middlewareA'\n             'middlewareB'", "changes": 35}], "1033": [{"status": "modified", "deletions": 13, "raw_url": "https://github.com/hubotio/hubot/raw/f21f89cdd4e6b95e313abcab8c7dda213e04f8d7/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/f21f89cdd4e6b95e313abcab8c7dda213e04f8d7/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=f21f89cdd4e6b95e313abcab8c7dda213e04f8d7", "filename": "docs/deploying/heroku.md", "sha": "c902588de0bcc235f3bfa7a9775782ed44385dd2", "additions": 2, "patch": "@@ -39,19 +39,6 @@ scripts, you'd need to set the following environment variables:\n     % heroku config:set HUBOT_CAMPFIRE_TOKEN=yourcampfiretoken\n     % heroku config:set HUBOT_CAMPFIRE_ROOMS=comma,separated,list,of,rooms,to,join\n \n-In addition, there is one special environment variable for Heroku. The default hubot\n-[Procfile](https://devcenter.heroku.com/articles/procfile) marks the process as\n-a 'web' process type, in order to support serving http requests (more on that\n-in the [scripting docs](/docs/scripting.md)). The downside of this is that dynos\n-will [idle after an hour of inactivity](https://devcenter.heroku.com/articles/dynos#dyno-idling).\n-That means your hubot would leave after an hour of idle web traffic, and only rejoin when it does get traffic. This is extremely\n-inconvenient since most interaction is done through chat, and hubot has to be online and in the room to respond to messages. To get around this,\n-there's a special environment variable to make hubot regularly ping itself over http. If\n-the app is deployed to http://rosemary-britches-123.herokuapp.com/, you'd\n-configure:\n-\n-    % heroku config:set HEROKU_URL=http://rosemary-britches-123.herokuapp.com\n-\n At this point, you are ready to deploy and start chatting. With Heroku, that's a\n git push away:\n \n@@ -72,3 +59,5 @@ before:\n Some scripts needs Redis to work, Heroku offers an addon called [Redis Cloud](https://addons.heroku.com/rediscloud), which has a free plan. To use it:\n \n     % heroku addons:add rediscloud\n+\n+Free dynos on Heroku will [sleep after 30 minutes of inactivity](https://devcenter.heroku.com/articles/dyno-sleeping). That means your hubot would leave the chat room and only rejoin when it does get traffic. This is extremely inconvenient since most interaction is done through chat, and hubot has to be online and in the room to respond to messages. To get around this, you can use the [hubot-heroku-keepalive](https://github.com/hubot-scripts/hubot-heroku-keepalive) script, which will keep your free dyno alive for up to 18 hours/day. If you never want Hubot to sleep, you will need to [upgrade to Heroku's hobby plan](https://www.heroku.com/pricing).", "changes": 15}], "1035": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c01b161e5f4cb5d137fe1a90c202a0313eec3cf1/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/c01b161e5f4cb5d137fe1a90c202a0313eec3cf1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=c01b161e5f4cb5d137fe1a90c202a0313eec3cf1", "filename": "CHANGELOG.md", "sha": "f61498fff3290e7c9c1d34fbb1d62b67ab7d4a7f", "additions": 14, "patch": "@@ -1,3 +1,17 @@\n+[v2.16.0](https://github.com/github/hubot/tree/v2.16.0)\n+========\n+\n+[Full Changelog](https://github.com/github/hubot/compare/v2.15.0...v2.16.0)\n+\n+**Merged pull requests:**\n+\n+- Update docs on keepalive support [\\#1033](https://github.com/github/hubot/pull/1033) ([@bkeepers](https://github.com/bkeepers))\n+- Cleanup tests [\\#1032](https://github.com/github/hubot/pull/1032) ([@michaelansel](https://github.com/michaelansel))\n+- Add coffee-errors to test scaffolding [\\#1020](https://github.com/github/hubot/pull/1020) ([@bhuga](https://github.com/bhuga))\n+- Receive middleware [\\#1019](https://github.com/github/hubot/pull/1019) ([bhuga](https://github.com/bhuga))\n+- Pass alias in Robot constructor. Fixes issue \\#1002. [\\#1003](https://github.com/github/hubot/pull/1003) ([@sdimkov](https://github.com/sdimkov))\n+- Add Robot.listen [\\#986](https://github.com/github/hubot/pull/986) ([@michaelansel](https://github.com/michaelansel))\n+\n v2.15.0\n =======\n ", "changes": 14}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c01b161e5f4cb5d137fe1a90c202a0313eec3cf1/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/c01b161e5f4cb5d137fe1a90c202a0313eec3cf1/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=c01b161e5f4cb5d137fe1a90c202a0313eec3cf1", "filename": "package.json", "sha": "43571cad66aa56ab5b8f6bfef99d4ce2d70928ca", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.15.0\",\n+  \"version\": \"2.16.0\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "1037": [{"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/b58e8d178a325328da005a824f152cafcafe2b9f/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b58e8d178a325328da005a824f152cafcafe2b9f/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=b58e8d178a325328da005a824f152cafcafe2b9f", "filename": "test/robot_test.coffee", "sha": "21db0189054851d3809974baed9265474f949c4d", "additions": 8, "patch": "@@ -748,19 +748,22 @@ describe 'Robot', ->\n         execution = []\n \n         testMiddlewareA = (context, next, done) ->\n-          context.response.message.text = \"foobar\"\n+          context.response.message.text = 'foobar'\n           next()\n \n         testMiddlewareB = (context, next, done) ->\n+          # Subsequent middleware should see the modified message\n           expect(context.response.message.text).to.equal(\"foobar\")\n           next()\n \n         @robot.receiveMiddleware testMiddlewareA\n         @robot.receiveMiddleware testMiddlewareB\n \n-        @robot.hear /^foobar$/, () ->\n-          # We'll never get to this if testMiddlewareA has not modified the message.\n-          testDone()\n+        testCallback = sinon.spy()\n+        # We'll never get to this if testMiddlewareA has not modified the message.\n+        @robot.hear /^foobar$/, testCallback\n \n         testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage\n+        @robot.receive testMessage, ->\n+          expect(testCallback).to.have.been.called\n+          testDone()", "changes": 13}], "1038": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/8348c4890ff64bc24fd99008cc2d49af7ccceeda/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/8348c4890ff64bc24fd99008cc2d49af7ccceeda/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=8348c4890ff64bc24fd99008cc2d49af7ccceeda", "filename": "docs/scripting.md", "sha": "07c00947f093fffb73be4dd12249866cbac02b94", "additions": 8, "patch": "@@ -765,9 +765,15 @@ BLACKLISTED_USERS = [\n \n robot.receiveMiddleware (context, next, done) ->\n   if context.response.message.user.id in BLACKLISTED_USERS\n+    # Don't process this message further.\n+    context.response.message.finish()\n+\n+    # If the message starts with 'hubot' or the alias pattern, this user was\n+    # explicitly trying to run a command, so respond with an error message.\n     if context.response.message.text?.match(robot.respondPattern(''))\n       context.response.reply \"I'm sorry @#{context.response.message.user.name}, but I'm configured to ignore your commands.\"\n-    context.response.message.finish()\n+\n+    # Don't process further middleware.\n     done()\n   else\n     next(done)\n@@ -779,7 +785,6 @@ Receive middleware callbacks receive three arguments, `context`, `next`, and\n `done`. See the [middleware API](#execution-process-and-api) for a description\n of `next` and `done`. Receive middleware context includes these fields:\n   - `response`\n-    - all parts of the standard response API are included in the middleware API. See [Send & Reply](#send--reply).\n+    - this response object will not have a `match` property, as no listeners have been run yet to match it.\n     - middleware may decorate the response object with additional information (e.g. add a property to `response.message.user` with a user's LDAP groups)\n     - middleware may modify the `response.message` object\n-    - note: the textual message (`response.message.text`) should be considered immutable in listener middleware", "changes": 11}], "1039": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a515bea1ec8ef77a6adf231f24511f23fe1a1a29/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/a515bea1ec8ef77a6adf231f24511f23fe1a1a29/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=a515bea1ec8ef77a6adf231f24511f23fe1a1a29", "filename": "docs/adapters.md", "sha": "6c5d789bc5b1cc636d330ac066904a4ab1264ec6", "additions": 1, "patch": "@@ -37,7 +37,7 @@ to have yours added to the list:\n * [QQ](https://github.com/xhan/qqbot)\n * [Partychat](https://github.com/iangreenleaf/hubot-partychat-hooks)\n * [Rocket.Chat](https://github.com/RocketChat/hubot-rocketchat)\n-* [Slack](https://github.com/tinyspeck/hubot-slack)\n+* [Slack](https://github.com/slackhq/hubot-slack)\n * [Skype](https://github.com/netpro2k/hubot-skype)\n * [SkypeWeb](https://github.com/sdimkov/hubot-skype-web)\n * [Talker](https://github.com/unixcharles/hubot-talker)", "changes": 2}], "1041": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c09c4cdefa05c15019a921850b3b721530a3418c/docs/deploying.md", "blob_url": "https://github.com/hubotio/hubot/blob/c09c4cdefa05c15019a921850b3b721530a3418c/docs/deploying.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying.md?ref=c09c4cdefa05c15019a921850b3b721530a3418c", "filename": "docs/deploying.md", "sha": "e92efdb6b480c109192aaabc53c4fcac533dd331", "additions": 1, "patch": "@@ -3,6 +3,7 @@ permalink: /docs/deploying/index.html\n layout: docs\n ---\n \n+- [Azure](/docs/deploying/azure.md)\n - [Heroku](/docs/deploying/heroku.md)\n - [Unix](/docs/deploying/unix.md)\n - [Windows](/docs/deploying/windows.md)", "changes": 1}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/c09c4cdefa05c15019a921850b3b721530a3418c/docs/deploying/azure.md", "blob_url": "https://github.com/hubotio/hubot/blob/c09c4cdefa05c15019a921850b3b721530a3418c/docs/deploying/azure.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/azure.md?ref=c09c4cdefa05c15019a921850b3b721530a3418c", "filename": "docs/deploying/azure.md", "sha": "ad7b3733d88fe41961e75c725d7212e30b04ad3c", "additions": 22, "patch": "@@ -42,11 +42,6 @@ Now, create a new file in the base directory of hubot called `server.js` and put\n     require('coffee-script/register');\n     module.exports = require('hubot/bin/hubot.coffee');\n \n-Save this file. Then open up `external-scripts.json` and remove the following two lines, as these two bits aren't compatible with Azure and then save the file.\n-\n-    \"hubot-heroku-keepalive\",\n-    \"hubot-redit-brain\",\n-\n Finally you will need to add the environment variables to the website to make sure it runs properly. You can either do it through the GUI (under configuration) or you can use the Azure PowerShell command line, as follows (example is showing slack as an adapter and mynewhubot as the website name).\n \n     % $settings = New-Object Hashtable\n@@ -59,7 +54,7 @@ Commit your changes in git and push to GitHub and Azure will automatically pick\n     % git commit -m \"Add Azure settings for hubot\"\n     % git push\n \n-Hubot now works just fine but doesn't have a brain. To add a brain that works with Azure, you will need to create an Azure storage account and account key. Then you can do the following in your base hubot directory.\n+Azure offers a marketplace where you can use the default heroku-redis-brain using Redis Cloud provided by Redis Labs. Alternatively, to add an Azure storage brain, you will need to create an Azure storage account and account key. Then you can do the following in your base hubot directory.\n \n     % npm install hubot-azure-scripts --save\n \n@@ -74,4 +69,24 @@ Finally, add two more environment variables to your website. You can do this eit\n     % $settings[\"HUBOT_BRAIN_AZURE_STORAGE_ACCESS_KEY\"] = \"your Azure storage account key\"\n     % Set-AzureWebsite -AppSettings $settings mynewhubot\n \n-Now any scripts that require a brain will function. You should look up other scripts or write your own by looking at the [documentation](/docs/scripting.md). All of the normal scripts for hubot are compatible with hosting hubot on Azure.\n\\ No newline at end of file\n+Now any scripts that require a brain will function. You should look up other scripts or write your own by looking at the [documentation](/docs/scripting.md). All of the normal scripts for hubot are compatible with hosting hubot on Azure.\n+\n+### Troubleshooting tips and tricks\n+\n+Due to Azure being Windows-based, you may run into path length problems. To overcome this issue you can set the environment variable `IN_PLACE_DEPLOYMENT` to `1` and use [custom deployment scripts to take advantage of NPM3](https://github.com/felixrieseberg/azure-npm3) and flat module installation.\n+\n+If using the free tier of Azure, you can also add a post-deployment step to ping the server on startup by setting the environment variable `POST_DEPLOYMENT_ACTION` with a script (relative to the src dir) such as `startup.sh`\n+\n+An example of a startup script:\n+\n+```\n+let retrys=0\n+while : ; do\n+    STATUSCODE=$(curl --silent --output /dev/stderr --write-out \"%{http_code}\" https://${WEBSITE_SITE_NAME}.azurewebsites.net/heroku/keepalive)\n+    echo $STATUSCODE\n+    [[ $retrys -ne 5 ]] || break\n+    echo $retrys\n+    ((retrys++))\n+    [[ $STATUSCODE -ne 200 ]] || break\n+done\n+```", "changes": 29}], "1042": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b2d8074dcdfb0c050b906303e3b6ec501c3a7e26/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/b2d8074dcdfb0c050b906303e3b6ec501c3a7e26/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=b2d8074dcdfb0c050b906303e3b6ec501c3a7e26", "filename": "CONTRIBUTING.md", "sha": "9f3566c28f643dd0ba810fd6fdafb002dcd7d544", "additions": 1, "patch": "@@ -21,7 +21,7 @@ Some things that will increase the chance that your pull request is accepted:\n \n * Use CoffeeScript [idioms](http://arcturo.github.io/library/coffeescript/04_idioms.html) and [style guide](https://github.com/polarmobile/coffeescript-style-guide)\n * Update the documentation: code comments, example code, guides. Basically,\n-  update anything is affected by your contribution.\n+  update everything affected by your contribution.\n * Include any information that would be relevant to reproducing bugs, use cases for new features, etc.\n \n * Discuss the impact on existing [hubot installs](docs/index.md), [hubot adapters](docs/adapters.md), and [hubot scripts](docs/scripting.md) (e.g. backwards compatibility)", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/b2d8074dcdfb0c050b906303e3b6ec501c3a7e26/docs/deploying/unix.md", "blob_url": "https://github.com/hubotio/hubot/blob/b2d8074dcdfb0c050b906303e3b6ec501c3a7e26/docs/deploying/unix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/unix.md?ref=b2d8074dcdfb0c050b906303e3b6ec501c3a7e26", "filename": "docs/deploying/unix.md", "sha": "212f47572e5bc7d3416b5d9f2eff82e7a1d22194", "additions": 2, "patch": "@@ -56,8 +56,8 @@ really, you probably want some process monitoring using tools like\n [upstart](http://upstart.ubuntu.com/),\n [systemd](http://freedesktop.org/wiki/Software/systemd/).\n \n-For starting at boot, you can create an init script for appropriate your UNIX\n-distribution, or if you are using one the process monitoring tools above, make\n+For starting at boot, you can create an init script appropriate for your UNIX\n+distribution. If you are using one of the process monitoring tools above, make\n sure it boots at startup. See the [examples](https://github.com/github/hubot/tree/master/examples)\n for configuration examples.\n ", "changes": 4}], "1043": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/6f41af2f58314b36cc507beb02f2af2f8ccab07b/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/6f41af2f58314b36cc507beb02f2af2f8ccab07b/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=6f41af2f58314b36cc507beb02f2af2f8ccab07b", "filename": "README.md", "sha": "d127430e36b0bfcd1be3922d8d155eba68386e88", "additions": 12, "patch": "@@ -1,9 +1,19 @@\n-# Hubot\n+# Ultra-Hubot\n \n-Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n+Originally Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n cool. He's [extendable with scripts](http://hubot.github.com/docs/#scripts) and can work on [many\n different chat services](https://hubot.github.com/docs/adapters/).\n \n+What we wish to achieve with this fork of hubot is to add a few more features.\n+\n+Ability to query various other virtual assitants or to be called by other virtual assitance.\n+\n+The ability to have a phone number and when called it will recieve your calls and either confirm that the tasks assigned to it were completed are done.\n+\n+The ability to recognise faces when given a picture and then query your facebook and give you a report about who you are seeing.\n+\n+The ability to query public or private databases for information about the people that surround you.\n+\n This repository provides a library that's distributed by `npm` that you\n use for building your own bots.  See the [documentation](http://hubot.github.com/docs)\n for details on getting up and running with your very own robot friend.", "changes": 14}], "1048": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/51aa74a848e2db7baca0db001adb6b548758bd17/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/51aa74a848e2db7baca0db001adb6b548758bd17/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=51aa74a848e2db7baca0db001adb6b548758bd17", "filename": "docs/scripting.md", "sha": "eca1f33c79cf6bb3117dad88db52153ec6e330f5", "additions": 14, "patch": "@@ -638,6 +638,20 @@ module.exports = (robot) ->\n     # code to stop annoying someone\n ```\n \n+You can scope all listeners in a file with the `listenerOptions` function:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.listenerOptions annoying: true\n+  robot.respond /annoy me/, (msg) ->\n+    # code to annoy someone. This listener will have annoying: true as its\n+    # metadata.\n+\n+  robot.respond /unannoy me/, annoying: false, (msg) ->\n+    # Code to stop annoying someone. This lisenter will have annoying: false\n+    # as its metadata\n+```\n+\n These scoped identifiers allow you to externally specify new behaviors like:\n - authorization policy: \"allow everyone in the `annoyers` group to execute `annoyance.*` commands\"\n - rate limiting: \"only allow executing `annoyance.start` once every 30 minutes\"", "changes": 14}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/51aa74a848e2db7baca0db001adb6b548758bd17/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51aa74a848e2db7baca0db001adb6b548758bd17/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=51aa74a848e2db7baca0db001adb6b548758bd17", "filename": "src/listener.coffee", "sha": "0ca240df23de3607a55cdf79ca82c40b26ee2a73", "additions": 8, "patch": "@@ -27,6 +27,14 @@ class Listener\n     if not @options.id?\n       @options.id = null\n \n+    if @robot.defaultOptions?\n+      newOptions = {}\n+      for key, val of @robot.defaultOptions\n+        newOptions[key] = val\n+      for key, val of @options\n+        newOptions[key] = val\n+      @options = newOptions\n+\n     if not @callback? or typeof @callback != 'function'\n       throw new Error \"Missing a callback for Listener\"\n ", "changes": 8}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/51aa74a848e2db7baca0db001adb6b548758bd17/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51aa74a848e2db7baca0db001adb6b548758bd17/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=51aa74a848e2db7baca0db001adb6b548758bd17", "filename": "src/robot.coffee", "sha": "286b4cecedd4f51b9fa42f122a834a27c7565624", "additions": 7, "patch": "@@ -322,6 +322,12 @@ class Robot\n     )\n     return undefined\n \n+  # Public: Adds default metadata for all remaining listeners defined in a\n+  # given file.\n+  #\n+  # Returns nothing.\n+  listenerOptions: (metadata) ->\n+    @defaultOptions = metadata\n \n   # Public: Loads a file in path.\n   #\n@@ -338,6 +344,7 @@ class Robot\n \n         if typeof script is 'function'\n           script @\n+          @listenerOptions(undefined)\n           @parseHelp Path.join(path, file)\n         else\n           @logger.warning \"Expected #{full} to assign a function to module.exports, got #{typeof script}\"", "changes": 7}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/51aa74a848e2db7baca0db001adb6b548758bd17/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51aa74a848e2db7baca0db001adb6b548758bd17/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=51aa74a848e2db7baca0db001adb6b548758bd17", "filename": "test/robot_test.coffee", "sha": "c6c6c145f4ceb1f8392fca5cd2e552ce97a4e540", "additions": 26, "patch": "@@ -341,6 +341,31 @@ describe 'Robot', ->\n           @robot.loadFile('./scripts', 'test-script.coffee')\n           expect(@robot.parseHelp).to.have.been.calledWith('scripts/test-script.coffee')\n \n+      describe 'scoped metadata', ->\n+        it 'applies file-scoped metadata to listeners defined with defaultOptions', ->\n+          module = require 'module'\n+          @script = sinon.spy (robot) ->\n+            robot.listenerOptions fooEnabled: true\n+            robot.respond /foo/, barEnabled: true, (response) ->\n+              response.send \"foo\"\n+            robot.respond /bar/, fooEnabled: false, (response) ->\n+              response.send \"bar\"\n+\n+          @scriptWithoutDefaults = sinon.spy (robot) ->\n+            robot.respond /baz/, (response) ->\n+              response.send \"foo\"\n+\n+          stub = @sandbox.stub(module, '_load').onCall(0).returns(@script)\n+          stub.onCall(0).returns(@script)\n+          stub.onCall(1).returns(@scriptWithoutDefaults)\n+          @sandbox.stub @robot, 'parseHelp'\n+\n+          @robot.loadFile('./scripts', 'test-script.coffee')\n+          @robot.loadFile('./scripts', 'test-script-2.coffee')\n+          expect(@robot.listeners[0].options).to.deep.equal { fooEnabled: true, barEnabled: true, id: null }\n+          expect(@robot.listeners[1].options).to.deep.equal { fooEnabled: false, id: null }\n+          expect(@robot.listeners[2].options).to.deep.equal { id: null }\n+\n       describe 'non-Function script', ->\n         beforeEach ->\n           module = require 'module'\n@@ -366,7 +391,7 @@ describe 'Robot', ->\n \n         expect(testListener.matcher).to.equal(matcher)\n         expect(testListener.callback).to.equal(callback)\n-        expect(testListener.options).to.equal(options)\n+        expect(testListener.options).to.deep.equal(options)\n \n     describe '#hear', ->\n       it 'matches TextMessages', ->", "changes": 27}], "1049": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/afe0ce87f7c8351564f2ee79df7e21fbd66eeb4c/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/afe0ce87f7c8351564f2ee79df7e21fbd66eeb4c/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=afe0ce87f7c8351564f2ee79df7e21fbd66eeb4c", "filename": "docs/deploying/heroku.md", "sha": "1476d2ce3e867a9dc98a2734e6283bd790f0824c", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/deploying/heroku/index.html\n layout: docs\n ---\n \n-If you've been following along with [Getting Started](../index.md), it's time to deploy so you can use it beyond just your local machine.\n+If you've been following along with [Getting Started](../../index.md), it's time to deploy so you can use it beyond just your local machine.\n [Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.\n \n Install the [Heroku Toolbelt](https://toolbelt.heroku.com/) to start, then follow their 'Getting Started' instructions, including logging in the first time:", "changes": 2}], "1050": [], "1052": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ea2065072ba73231c120f0cde5e2398259e53da3/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ea2065072ba73231c120f0cde5e2398259e53da3/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=ea2065072ba73231c120f0cde5e2398259e53da3", "filename": "src/adapters/shell.coffee", "sha": "74f1063ad4692090aa623d4402c73d620d6f5ae0", "additions": 4, "patch": "@@ -42,7 +42,10 @@ class Shell extends Adapter\n     @cli = cline()\n \n     @cli.command '*', (input) =>\n-      userId = parseInt(process.env.HUBOT_SHELL_USER_ID or '1')\n+      userId = process.env.HUBOT_SHELL_USER_ID or '1'\n+      if userId.match (/\\A\\d+\\z/)\n+        userId = parseInt(userId)\n+\n       userName = process.env.HUBOT_SHELL_USER_NAME or 'Shell'\n       user = @robot.brain.userForId userId, name: userName, room: 'Shell'\n       @receive new TextMessage user, input, 'messageId'", "changes": 5}], "1054": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b9d2733c4736da70843c02888926e82d53c4c579/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/b9d2733c4736da70843c02888926e82d53c4c579/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=b9d2733c4736da70843c02888926e82d53c4c579", "filename": "docs/deploying/heroku.md", "sha": "a4895c08d978b87325cd116de31a6f3727ab4093", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/deploying/heroku/index.html\n layout: docs\n ---\n \n-If you've been following along with [Getting Started](../../index.md), it's time to deploy so you can use it beyond just your local machine.\n+If you've been following along with [Getting Started](/docs/deploying/), it's time to deploy so you can use it beyond just your local machine.\n [Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.\n \n Install the [Heroku Toolbelt](https://toolbelt.heroku.com/) to start, then follow their 'Getting Started' instructions, including logging in the first time:", "changes": 2}], "1056": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/23103abe5ab9b68003c5a6c87d473c5592fa7833/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/23103abe5ab9b68003c5a6c87d473c5592fa7833/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=23103abe5ab9b68003c5a6c87d473c5592fa7833", "filename": "docs/scripting.md", "sha": "617de5937b3434ec605d4d50df5b17372ed8da3c", "additions": 31, "patch": "@@ -421,6 +421,37 @@ curl -d 'payload=%7B%22secret%22%3A%22C-TECH+Astronomy%22%7D' http://127.0.0.1:8\n \n All endpoint URLs should start with the literal string `/hubot` (regardless of what your robot's name is). This consistency makes it easier to set up webhooks (copy-pasteable URL) and guarantees that URLs are valid (not all bot names are URL-safe).\n \n+### Get raw body string\n+\n+Hubot maps the raw body to the req.rawBody property. This is important,\n+if you need to do some hashing on the body of the request.\n+\n+Below is a simple example how to validate GitHub's push webhook request (HMAC).\n+\n+```coffeescript\n+crypto = require 'crypto'\n+\n+module.exports = (robot) ->\n+  robot.router.post '/hubot/github_hook/:room', (req, res) ->\n+    room   = req.params.room\n+    raw_payload = req.rawBody\n+    github_secret = process.env.HUBOT_REPO_GITHUB_SECRET\n+\n+    # sha1 key must be a buffer\n+    hmac = crypto.createHmac(\"sha1\", new Buffer(github_secret))\n+    hmac.update raw_payload\n+    digest = hmac.digest 'hex'\n+    # catch HMAC mismatch\n+    if \"sha1=#{digest}\" isnt req.headers['x-hub-signature']\n+      console.log \"Auth error\"\n+      res.json 401, { send: true, error: true }\n+      return\n+\n+    robot.messageRoom room, \"#{req.body.pusher.name} pushed to #{req.body.repository.name}\"\n+\n+    res.json { send: true }\n+```\n+\n ## Events\n \n Hubot can also respond to events which can be used to pass data between scripts. This is done by encapsulating node.js's [EventEmitter](http://nodejs.org/api/events.html#events_class_events_eventemitter) with `robot.emit` and `robot.on`.", "changes": 31}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/23103abe5ab9b68003c5a6c87d473c5592fa7833/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/23103abe5ab9b68003c5a6c87d473c5592fa7833/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=23103abe5ab9b68003c5a6c87d473c5592fa7833", "filename": "package.json", "sha": "25fc753cb73f14f61bc6cbe03f77fa83ca5d9f43", "additions": 3, "patch": "@@ -16,6 +16,7 @@\n   },\n   \"dependencies\": {\n     \"async\": \">=0.1.0 <1.0.0\",\n+    \"body-parser\": \"^1.14.0\",\n     \"chalk\": \"^1.0.0\",\n     \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n@@ -30,7 +31,8 @@\n     \"coffee-errors\": \"0.8.6\",\n     \"mocha\": \"^2.1.0\",\n     \"mockery\": \"^1.4.0\",\n-    \"sinon-chai\": \"^2.6.0\"\n+    \"sinon-chai\": \"^2.6.0\",\n+    \"supertest\": \"^1.1.0\"\n   },\n   \"engines\": {\n     \"node\": \">= 0.8.x\",", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/23103abe5ab9b68003c5a6c87d473c5592fa7833/script/bootstrap", "blob_url": "https://github.com/hubotio/hubot/blob/23103abe5ab9b68003c5a6c87d473c5592fa7833/script/bootstrap", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/bootstrap?ref=23103abe5ab9b68003c5a6c87d473c5592fa7833", "filename": "script/bootstrap", "sha": "fa310cf670696b7d5b822dd9e0a76b082405b85e", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/usr/bin/env bash\n \n # Make sure everything is development forever\n export NODE_ENV=development", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/23103abe5ab9b68003c5a6c87d473c5592fa7833/script/test", "blob_url": "https://github.com/hubotio/hubot/blob/23103abe5ab9b68003c5a6c87d473c5592fa7833/script/test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/test?ref=23103abe5ab9b68003c5a6c87d473c5592fa7833", "filename": "script/test", "sha": "dcddba0c2843f5efd97a5dd61ae1d8ab3dae6eca", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/usr/bin/env bash\n \n source script/bootstrap\n mocha --require coffee-errors --compilers coffee:coffee-script \"$@\"", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/23103abe5ab9b68003c5a6c87d473c5592fa7833/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/23103abe5ab9b68003c5a6c87d473c5592fa7833/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=23103abe5ab9b68003c5a6c87d473c5592fa7833", "filename": "src/robot.coffee", "sha": "627ba5b7beb9764ed239893267950221cf58e873", "additions": 24, "patch": "@@ -400,18 +400,40 @@ class Robot\n \n     express = require 'express'\n     multipart = require 'connect-multiparty'\n+    bodyParser = require 'body-parser'\n \n     app = express()\n \n+    app.use (req, res, next) =>\n+      req.rawBody = ''\n+      next()\n+\n     app.use (req, res, next) =>\n       res.setHeader \"X-Powered-By\", \"hubot/#{@name}\"\n       next()\n \n     app.use express.basicAuth user, pass if user and pass\n     app.use express.query()\n \n-    app.use express.json()\n-    app.use express.urlencoded()\n+    app.use bodyParser.json(\n+      verify: (req, res, buf, encoding) ->\n+        req.rawBody = buf.toString()\n+    )\n+\n+    # the extended false sets the parser to `querystring`\n+    # https://github.com/expressjs/body-parser#bodyparserurlencodedoptions\n+    app.use bodyParser.urlencoded(\n+      verify: (req, res, buf, encoding) ->\n+        req.rawBody = buf.toString()\n+      extended: false\n+    )\n+\n+    app.use bodyParser.text(\n+      type: ['text/*', 'application/xml']\n+      verify: (req, res, buf, encoding) ->\n+        req.rawBody = buf.toString()\n+    )\n+\n     # replacement for deprecated express.multipart/connect.multipart\n     # limit to 100mb, as per the old behavior\n     app.use multipart(maxFilesSize: 100 * 1024 * 1024)", "changes": 26}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/23103abe5ab9b68003c5a6c87d473c5592fa7833/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/23103abe5ab9b68003c5a6c87d473c5592fa7833/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=23103abe5ab9b68003c5a6c87d473c5592fa7833", "filename": "test/robot_test.coffee", "sha": "495281f317afea3d9d8d7fc567c453b51144b674", "additions": 128, "patch": "@@ -7,6 +7,8 @@ chai.use require 'sinon-chai'\n \n mockery = require 'mockery'\n \n+request = require 'supertest'\n+\n # Hubot classes\n Robot = require '../src/robot.coffee'\n { CatchAllMessage, EnterMessage, LeaveMessage, TextMessage, TopicMessage } = require '../src/message'\n@@ -28,6 +30,7 @@ mockery.disable()\n \n \n describe 'Robot', ->\n+\n   beforeEach ->\n     @robot = new Robot null, 'mock-adapter', yes, 'TestHubot'\n     @robot.alias = 'Hubot'\n@@ -767,3 +770,128 @@ describe 'Robot', ->\n         @robot.receive testMessage, ->\n           expect(testCallback).to.have.been.called\n           testDone()\n+\n+  describe 'Raw body mapping', ->\n+\n+      beforeEach ->\n+        @caught = null\n+\n+\n+      describe 'JSON request', ->\n+\n+        it 'has body property (Object)', (done) ->\n+          # ensure default Express behavior\n+          @robot.router.post '/hubot/post_test', (req, res) =>\n+            try\n+              expect(req.body).to.deep.equal({'fu': 'bar'})\n+            catch error\n+              @caught = error\n+            res.send 'done'\n+\n+          error_handler = =>\n+            if @caught\n+              throw @caught\n+            done()\n+\n+          request(@robot.router).post('/hubot/post_test').\\\n+            set('Content-Type', 'application/json').send('{\"fu\": \"bar\"}').\\\n+            end(error_handler)\n+\n+        it 'has rawBody property (String)', (done) ->\n+          @robot.router.post '/hubot/post_test', (req, res) =>\n+            try\n+              expect(req.rawBody).to.equal('{\"bar\": \"baz\"}')\n+            catch error\n+              @caught = error\n+            res.send 'done'\n+\n+          error_handler = =>\n+            if @caught\n+              throw @caught\n+            done()\n+\n+          request(@robot.router).post('/hubot/post_test').\\\n+            set('Content-Type', 'application/json').send('{\"bar\": \"baz\"}').\\\n+            end(error_handler)\n+\n+      describe 'urlencoded request', ->\n+\n+        it 'has body property (Object)', (done) ->\n+          # ensure default Express behavior\n+          @robot.router.post '/hubot/post_test', (req, res) =>\n+            try\n+              expect(req.body).to.deep.equal({'fu': 'bar'})\n+            catch error\n+              @caught = error\n+            res.send 'done'\n+\n+          error_handler = =>\n+            if @caught\n+              throw @caught\n+            done()\n+\n+          request(@robot.router).post('/hubot/post_test').\\\n+            set('Content-Type', 'application/x-www-form-urlencoded').\\\n+            send('fu=bar').\\\n+            end(error_handler)\n+\n+        it 'has rawBody property (String)', (done) ->\n+\n+          @robot.router.post '/hubot/post_test', (req, res) =>\n+            try\n+              expect(req.rawBody).to.equal('bar=baz')\n+            catch error\n+              @caught = error\n+            res.send 'done'\n+\n+          error_handler = =>\n+            if @caught\n+              throw @caught\n+            done()\n+\n+          request(@robot.router).post('/hubot/post_test').\\\n+            set('Content-Type', 'application/x-www-form-urlencoded').\\\n+            send('bar=baz').\\\n+            end(error_handler)\n+\n+      describe 'text/* and application/xml requests', ->\n+\n+        it 'has body property (String)', (done) ->\n+          # for example application/xml\n+\n+          @robot.router.post '/hubot/post_test', (req, res) =>\n+            try\n+              expect(req.body).to.equal('<?xml version=\"1.0\" encoding=\"UTF-8\"?><fu>bar</fu>')\n+            catch error\n+              @caught = error\n+            res.send 'done'\n+\n+          error_handler = =>\n+            if @caught\n+              throw @caught\n+            done()\n+\n+          request(@robot.router).post('/hubot/post_test').\\\n+            set('Content-Type', 'application/xml').\\\n+            send('<?xml version=\"1.0\" encoding=\"UTF-8\"?><fu>bar</fu>').\\\n+            end(error_handler)\n+\n+        it 'has rawBody property (String)', (done) ->\n+          # for example application/xml\n+\n+          @robot.router.post '/hubot/post_test', (req, res) =>\n+            try\n+              expect(req.rawBody).to.equal('<?xml version=\"1.0\" encoding=\"UTF-8\"?><fu>bar</fu>')\n+            catch error\n+              @caught = error\n+            res.send 'done'\n+\n+          error_handler = =>\n+            if @caught\n+              throw @caught\n+            done()\n+\n+          request(@robot.router).post('/hubot/post_test').\\\n+            set('Content-Type', 'application/xml').\\\n+            send('<?xml version=\"1.0\" encoding=\"UTF-8\"?><fu>bar</fu>').\\\n+            end(error_handler)", "changes": 128}], "1065": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b346f76e7008d472fc95415677ccd5e0a5e45506/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/b346f76e7008d472fc95415677ccd5e0a5e45506/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=b346f76e7008d472fc95415677ccd5e0a5e45506", "filename": "docs/deploying/heroku.md", "sha": "c902588de0bcc235f3bfa7a9775782ed44385dd2", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/deploying/heroku/index.html\n layout: docs\n ---\n \n-If you've been following along with [Getting Started](../../index.md), it's time to deploy so you can use it beyond just your local machine.\n+If you've been following along with [Getting Started](../index.md), it's time to deploy so you can use it beyond just your local machine.\n [Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.\n \n Install the [Heroku Toolbelt](https://toolbelt.heroku.com/) to start, then follow their 'Getting Started' instructions, including logging in the first time:", "changes": 2}], "1066": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/1653c3f1b99da1d3ae7f7af661c5ce42f473d7c7/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/1653c3f1b99da1d3ae7f7af661c5ce42f473d7c7/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=1653c3f1b99da1d3ae7f7af661c5ce42f473d7c7", "filename": "docs/deploying/heroku.md", "sha": "4179dba7f41ac6c7f0db3f432e4595c3732e4405", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/deploying/heroku/index.html\n layout: docs\n ---\n \n-If you've been following along with [Getting Started](../../index.md), it's time to deploy so you can use it beyond just your local machine.\n+If you've been following along with [Getting Started](../../docs/index.md), it's time to deploy so you can use it beyond just your local machine.\n [Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.\n \n Install the [Heroku Toolbelt](https://toolbelt.heroku.com/) to start, then follow their 'Getting Started' instructions, including logging in the first time:", "changes": 2}], "1068": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/d3667834a6745ee7365c9ff575afd004cf9c1278/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/d3667834a6745ee7365c9ff575afd004cf9c1278/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=d3667834a6745ee7365c9ff575afd004cf9c1278", "filename": ".travis.yml", "sha": "859b77cae03a155be012a03abd5064cbd1133248", "additions": 5, "patch": "@@ -1,11 +1,10 @@\n language: node_js\n-node_js:\n-  - \"0.11\"\n-  - \"0.10\"\n+\n matrix:\n   include:\n-    - node_js: \"0.8\"\n-      # old versions of NPM don't include support for `^` dependency prefixes in package.json\n-      before_install: npm update -g npm\n+    - node_js: \"0.10\"\n+    - node_js: \"0.12\"\n+    - node_js: \"4\"\n notifications:\n   email: false\n+sudo: false", "changes": 11}], "1069": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/6ec008b015c9b871137d5e0a975f650bfea78d5b/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/6ec008b015c9b871137d5e0a975f650bfea78d5b/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=6ec008b015c9b871137d5e0a975f650bfea78d5b", "filename": "bin/hubot", "sha": "4b80fa1c1424cc4fbce1b7a3918816b488deeeba", "additions": 1, "patch": "@@ -132,6 +132,6 @@ else\n     console.log \"OK\"\n     process.exit 0\n \n-  robot.adapter.on 'connected', loadScripts\n+  robot.adapter.once 'connected', loadScripts\n \n   robot.run()", "changes": 2}], "1073": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f0703f411b4b069a914d047c67bfc178adae0d75/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/f0703f411b4b069a914d047c67bfc178adae0d75/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=f0703f411b4b069a914d047c67bfc178adae0d75", "filename": "bin/hubot", "sha": "4b80fa1c1424cc4fbce1b7a3918816b488deeeba", "additions": 1, "patch": "@@ -132,6 +132,6 @@ else\n     console.log \"OK\"\n     process.exit 0\n \n-  robot.adapter.on 'connected', loadScripts\n+  robot.adapter.once 'connected', loadScripts\n \n   robot.run()", "changes": 2}], "1074": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/eda5bfdf085038de199f1c73cc5df5f048c5fc1e/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/eda5bfdf085038de199f1c73cc5df5f048c5fc1e/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=eda5bfdf085038de199f1c73cc5df5f048c5fc1e", "filename": "src/listener.coffee", "sha": "a7205ab856c658c0cfb2e1cb6e00d1ff855e20dd", "additions": 1, "patch": "@@ -55,7 +55,7 @@ class Listener\n     if match = @matcher message\n       if @regex\n         @robot.logger.debug \\\n-          \"Message '#{message}' matched regex /#{inspect @regex}/\"\n+          \"Message '#{message}' matched regex /#{inspect @regex}/; listener.options = #{inspect @options}\"\n \n       # special middleware-like function that always executes the Listener's\n       # callback and calls done (never calls 'next')", "changes": 2}], "1077": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/605c8f22b8c88e088f9a55a45e70806078acca79/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/605c8f22b8c88e088f9a55a45e70806078acca79/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=605c8f22b8c88e088f9a55a45e70806078acca79", "filename": ".travis.yml", "sha": "ab6fd243ab3e8f02d8849c21c72eb6f958ed76cc", "additions": 1, "patch": "@@ -5,6 +5,7 @@ matrix:\n     - node_js: \"0.10\"\n     - node_js: \"0.12\"\n     - node_js: \"4\"\n+    - node_js: \"5\"\n notifications:\n   email: false\n sudo: false", "changes": 1}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/605c8f22b8c88e088f9a55a45e70806078acca79/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/605c8f22b8c88e088f9a55a45e70806078acca79/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=605c8f22b8c88e088f9a55a45e70806078acca79", "filename": "package.json", "sha": "85b26193602cd2d0ad2b0f4485634d69654a2982", "additions": 3, "patch": "@@ -30,7 +30,9 @@\n     \"coffee-errors\": \"0.8.6\",\n     \"mocha\": \"^2.1.0\",\n     \"mockery\": \"^1.4.0\",\n-    \"sinon-chai\": \"^2.6.0\"\n+    \"sinon-chai\": \"^2.8.0\",\n+    \"sinon\":\"~1.17.0\",\n+    \"chai\":\"~2.1.0\"\n   },\n   \"engines\": {\n     \"node\": \">= 0.8.x\",", "changes": 4}], "1081": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/25aeb4482fe240b0ff3625f7703899e2e68db7de/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/25aeb4482fe240b0ff3625f7703899e2e68db7de/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=25aeb4482fe240b0ff3625f7703899e2e68db7de", "filename": "src/listener.coffee", "sha": "61aa15cf3d944a9977998b057a6f379a88c215ab", "additions": 1, "patch": "@@ -73,7 +73,7 @@ class Listener\n         # Yes, we tried to execute the listener callback (middleware may\n         # have intercepted before actually executing though)\n         if cb?\n-          process.nextTick -> cb true\n+          Middleware.ticker -> cb true\n \n       response = new @robot.Response(@robot, message, match)\n       middleware.execute(", "changes": 2}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/25aeb4482fe240b0ff3625f7703899e2e68db7de/src/middleware.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/25aeb4482fe240b0ff3625f7703899e2e68db7de/src/middleware.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/middleware.coffee?ref=25aeb4482fe240b0ff3625f7703899e2e68db7de", "filename": "src/middleware.coffee", "sha": "7f9d16e399cf1c1e79be8781857985d15d11587c", "additions": 3, "patch": "@@ -1,6 +1,9 @@\n async = require 'async'\n \n class Middleware\n+  # We use this recursively, and using nextTick recursively is deprecated in node 0.10.\n+  @ticker: if typeof setImmediate is \"function\" then setImmediate else process.nextTick\n+\n   constructor: (@robot) ->\n     @stack = []\n ", "changes": 3}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/25aeb4482fe240b0ff3625f7703899e2e68db7de/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/25aeb4482fe240b0ff3625f7703899e2e68db7de/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=25aeb4482fe240b0ff3625f7703899e2e68db7de", "filename": "src/robot.coffee", "sha": "89091f8786f6d29063505a60f8c394aa4482d051", "additions": 1, "patch": "@@ -319,7 +319,7 @@ class Robot\n             anyListenersExecuted = anyListenersExecuted || listenerExecuted\n             # Defer to the event loop at least after every listener so the\n             # stack doesn't get too big\n-            process.nextTick () ->\n+            Middleware.ticker () ->\n               # Stop processing when message.done == true\n               cb(context.response.message.done)\n         catch err", "changes": 2}], "1083": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/cd8a4a79f0bb799e82c8f2e4673cf52cd7875d40/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/cd8a4a79f0bb799e82c8f2e4673cf52cd7875d40/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=cd8a4a79f0bb799e82c8f2e4673cf52cd7875d40", "filename": "CHANGELOG.md", "sha": "e9b6517fe0415d9be4ce846ad0ceebc767197e2b", "additions": 20, "patch": "@@ -1,3 +1,23 @@\n+[v2.17.0](https://github.com/github/hubot/tree/v2.17.0)\n+========\n+\n+[Full Changelog](https://github.com/github/hubot/compare/v2.16.0...v2.17.0)\n+\n+**Merged pull requests:**\n+\n+- Add node v5 to travis [\\#1077](https://github.com/github/hubot/pull/1077) ([@scboucher](https://github.com/scboucher))\n+- Only loadScripts once [\\#1069](https://github.com/github/hubot/pull/1069) ([@technicalpickles](https://github.com/technicalpickles))\n+- Response middleware [\\#1021](https://github.com/github/hubot/pull/1021) ([@bhuga](https://github.com/bhuga))\n+- Debug listener options [\\#1074](https://github.com/github/hubot/pull/1074) ([@msabramo](https://github.com/msabramo))\n+- Add Node 4.2 to travis [\\#1068](https://github.com/github/hubot/pull/1068) ([@scboucher](https://github.com/scboucher))\n+- Clarify that a room token might be expected [\\#1012](https://github.com/github/hubot/pull/1012) ([@alininja](https://github.com/alininja))\n+- Fix link to heroku docs [\\#1049](https://github.com/github/hubot/pull/1049) ([@doque](https://github.com/doque))\n+- Doc tweaks [\\#1042](https://github.com/github/hubot/pull/1042) ([@xuoe](https://github.com/xuoe))\n+- Update Azure documentation [\\#1041](https://github.com/github/hubot/pull/1041) ([@davidkassa](https://github.com/davidkassa))\n+- Update slack adapter doc link [\\#1039](https://github.com/github/hubot/pull/1039) ([@danielcompton](https://github.com/danielcompton))\n+- Doc tweaks [\\#1038](https://github.com/github/hubot/pull/1038) ([@bhuga](https://github.com/bhuga))\n+- Test tweaks [\\#1037](https://github.com/github/hubot/pull/1037) ([@michaelansel](https://github.com/michaelansel))\n+\n [v2.16.0](https://github.com/github/hubot/tree/v2.16.0)\n ========\n ", "changes": 20}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/cd8a4a79f0bb799e82c8f2e4673cf52cd7875d40/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/cd8a4a79f0bb799e82c8f2e4673cf52cd7875d40/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=cd8a4a79f0bb799e82c8f2e4673cf52cd7875d40", "filename": "package.json", "sha": "9cc592c99a69c0f05ef1f0427eed7d1d97954e47", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.16.0\",\n+  \"version\": \"2.17.0\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "1090": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1f796b89fd1b2a5cd74f681947e8e8541c1c5080/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/1f796b89fd1b2a5cd74f681947e8e8541c1c5080/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=1f796b89fd1b2a5cd74f681947e8e8541c1c5080", "filename": "docs/adapters.md", "sha": "decceb3d45f311a5bad061c840b67c15acb5bfaa", "additions": 1, "patch": "@@ -49,6 +49,7 @@ to have yours added to the list:\n * [Visual Studio Online](https://github.com/scrumdod/hubot-VSOnline)\n * [XMPP](https://github.com/markstory/hubot-xmpp)\n * [Yammer](https://github.com/athieriot/hubot-yammer)\n+* [Mattermost](https://github.com/renanvicente/hubot-mattermost)\n \n ## Writing Your Own Adapter\n ", "changes": 1}], "1091": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/hook.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/hook.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hook.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/hook.coffee", "sha": "30fb521ba1c3d9ed9cdfda8e73b551a9637f0448", "additions": 35, "patch": "@@ -0,0 +1,35 @@\n+class Hook\n+  constructor: (opts) ->\n+    @response = opts.response\n+    @robot    = opts.robot\n+    @listener = opts.listener\n+    @message  = opts.message\n+    @response ||= new @robot.Response(@robot, @message)\n+\n+    @reply    = opts.reply # An object like { text: \"string\" }\n+\n+    @hooks    = opts.hooks\n+    @callback = opts.callback\n+    @nextHook = -1\n+\n+  run: ->\n+    for hook in @hooks\n+      hook(@)\n+      return if @finished?\n+    @callback(@reply.text if @reply?)\n+\n+  finish: =>\n+    @finished = true\n+    if @reply?\n+      # We're processing a reply, not a listen or receive. The message has\n+      # been processed, so it's too late to finish() it. By not calling\n+      # @run() or @callback() we end processing and do not send the reply.\n+      # if they reply has been updated, we note that by returning the new value.\n+      @reply.text\n+    else\n+      @message.finish()\n+      @callback()\n+\n+module.exports = {\n+  Hook\n+}", "changes": 35}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/listener.coffee", "sha": "55724f96eacbffc251674f04a2e099c0764651a6", "additions": 4, "patch": "@@ -37,10 +37,13 @@ class Listener\n   # Returns a boolean of whether the matcher matched.\n   call: (message) ->\n     if match = @matcher message\n+\n       @robot.logger.debug \\\n         \"Message '#{message}' matched regex /#{inspect @regex}/\" if @regex\n \n-      @callback new @robot.Response(@robot, message, match)\n+      response = new @robot.Response(@robot, message, match)\n+\n+      @robot.runPrelistenHooks(this, response)\n       true\n     else\n       false", "changes": 5}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/response.coffee", "sha": "8ec29b6908d5359edf9757f9d7df503da7e045a0", "additions": 24, "patch": "@@ -19,7 +19,10 @@ class Response\n   #\n   # Returns nothing.\n   send: (strings...) ->\n-    @robot.adapter.send @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.send @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts an emote back to the chat source\n   #\n@@ -28,7 +31,10 @@ class Response\n   #\n   # Returns nothing.\n   emote: (strings...) ->\n-    @robot.adapter.emote @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.emote @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts a message mentioning the current user.\n   #\n@@ -37,7 +43,10 @@ class Response\n   #\n   # Returns nothing.\n   reply: (strings...) ->\n-    @robot.adapter.reply @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.reply @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts a topic changing message\n   #\n@@ -46,7 +55,10 @@ class Response\n   #\n   # Returns nothing.\n   topic: (strings...) ->\n-    @robot.adapter.topic @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.topic @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Play a sound in the chat source\n   #\n@@ -55,7 +67,10 @@ class Response\n   #\n   # Returns nothing\n   play: (strings...) ->\n-    @robot.adapter.play @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.play @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts a message in an unlogged room\n   #\n@@ -64,7 +79,10 @@ class Response\n   #\n   # Returns nothing\n   locked: (strings...) ->\n-    @robot.adapter.locked @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.locked @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Picks a random item from the given items.\n   #", "changes": 30}, {"status": "modified", "deletions": 23, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/robot.coffee", "sha": "7ba8ea97e1d3932d28cfe112e0c02d09e9270672", "additions": 93, "patch": "@@ -9,6 +9,7 @@ Brain = require './brain'\n Response = require './response'\n {Listener,TextListener} = require './listener'\n {EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n+{Hook} = require './hook'\n \n HUBOT_DEFAULT_ADAPTERS = [\n   'campfire'\n@@ -49,8 +50,10 @@ class Robot\n     @listeners = []\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n     @pingIntervalId = null\n+    @hooks     = {}\n     @globalHttpOptions = {}\n \n+\n     @parseVersion()\n     if httpd\n       @setupExpress()\n@@ -214,17 +217,29 @@ class Robot\n   #\n   # Returns nothing.\n   receive: (message) ->\n+    curriedReceive = =>\n+      @receiveWithoutHooks(message)\n+    @runHooks 'prereceive', curriedReceive, message\n+\n+  # Private: receive a message, passing it to any inerested listeners. Does\n+  # not execute callbacks.\n+  #\n+  # message - A Message instance\n+  #\n+  # Returns nothing.\n+  receiveWithoutHooks: (message) ->\n     results = []\n     for listener in @listeners\n       try\n-        results.push listener.call(message)\n         break if message.done\n+        results.push listener.call(message)\n       catch error\n         @emit('error', error, new @Response(@, message, []))\n \n         false\n+\n     if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n-      @receive new CatchAllMessage(message)\n+      @receiveWithoutHooks new CatchAllMessage(message)\n \n   # Public: Loads a file in path.\n   #\n@@ -416,26 +431,6 @@ class Robot\n         scriptDocumentation.commands.push cleanedLine\n         @commands.push cleanedLine\n \n-  # Public: A helper send function which delegates to the adapter's send\n-  # function.\n-  #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  send: (user, strings...) ->\n-    @adapter.send user, strings...\n-\n-  # Public: A helper reply function which delegates to the adapter's reply\n-  # function.\n-  #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  reply: (user, strings...) ->\n-    @adapter.reply user, strings...\n-\n   # Public: A helper send function to message a room that the robot is in.\n   #\n   # room    - String designating the room to message.\n@@ -526,6 +521,82 @@ class Robot\n     HttpClient.create(url, @extend({}, @globalHttpOptions, options))\n       .header('User-Agent', \"Hubot/#{@version}\")\n \n+  # Public. Adds a prereceive callback hook to this robot.\n+  #\n+  #   cb  - A callback function which accepts a Hook object.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  prereceive: (cb) ->\n+    @hooks['prereceive'] ||= []\n+    @hooks['prereceive'].push cb\n+\n+  # Public. Adds a prelisten callback hook to this robot.\n+  #\n+  #   cb  - A callback function which accepts a Hook object.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  prelisten: (cb) ->\n+    @hooks['prelisten'] ||= []\n+    @hooks['prelisten'].push cb\n+\n+  # Protected. For use by Listener to run prelisten callbacks after a match\n+  # is found.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  runPrelistenHooks: (listener, response) ->\n+    done = ->\n+      listener.callback(response) unless response.envelope.message.done\n+    @runHooks 'prelisten', done, response.envelope.message, response, listener\n+\n+  # Public. Adds a prereply callback hook to this robot.\n+  #\n+  #   cb  - A callback function which accepts a Hook object.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  prereply: (cb) ->\n+    @hooks['prereply'] ||= []\n+    @hooks['prereply'].push cb\n+\n+  # Protected. For use by Response to run hooks before replying.\n+  #\n+  # TODO: we should have a listener available here, but there's no way to get\n+  # to it. Responses belong to listeners but don't have a way to get to them,\n+  # and we should change that API.\n+  runPrereplyHooks: (response, string, cb) ->\n+    @runHooks 'prereply', cb, response.envelope.message, response, response.listener, { text: string }\n+\n+  # Private. Run the hooks of a given name\n+  #\n+  #  name     - 'prereceive'\n+  #  response - The response object\n+  #  listener - The matching listener, if any\n+  #  message  - A message that hubot is trying to send, if any\n+  #\n+  # Each hook must call hook.next() or hook.done(). Hook.next() continues\n+  # processing and hook.done() aborts the message. If a response message\n+  # exists, hook.done() prevents it from being sent.\n+  #\n+  # Returns nothing.\n+  runHooks: (name, callback, message, response, listener, reply) ->\n+    hooks = @hooks[name]\n+    if hooks?.length > 0\n+      opts =\n+        hooks:    hooks\n+        callback: callback\n+        response: response\n+        message:  message\n+        listener: listener\n+        robot:    this\n+        reply:    reply\n+      hook = new Hook(opts)\n+      hook.run()\n+    else\n+      callback()\n+\n   # Private: Extend obj with objects passed as additional args.\n   #\n   # Returns the original object with updated changes.\n@@ -534,5 +605,4 @@ class Robot\n       obj[key] = value for own key, value of source\n     obj\n \n-\n module.exports = Robot", "changes": 116}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/listener_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/listener_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "test/listener_test.coffee", "sha": "5601bd819435aecf061aed59a0e37523c69267be", "additions": 8, "patch": "@@ -17,6 +17,8 @@ describe 'Listener', ->\n     @robot =\n       # Why is this part of the Robot object??\n       Response: Response\n+      runPrelistenHooks: (listener, response) ->\n+        listener.callback(response)\n \n     # Test user\n     @user = new User\n@@ -74,7 +76,7 @@ describe 'Listener', ->\n           result = testListener.call testMessage\n \n           expect(result).to.be.ok\n-          \n+\n \n         it 'calls the listener callback with a Response that wraps the Message', (done) ->\n           testMatcher = sinon.stub().returns(true)\n@@ -117,21 +119,21 @@ describe 'Listener', ->\n           testMessage = new TextMessage(@user, 'test')\n           testMessage.match = sinon.stub().returns(true)\n           testRegex = /test/\n- \n+\n           testListener = new TextListener(@robot, testRegex, callback)\n           result = testListener.matcher(testMessage)\n- \n+\n           expect(result).to.be.ok\n           expect(testMessage.match).to.have.been.calledWith(testRegex)\n- \n+\n         it 'does not match EnterMessages', ->\n           callback = sinon.spy()\n           testMessage = new EnterMessage(@user)\n           testMessage.match = sinon.stub().returns(true)\n           testRegex = /test/\n- \n+\n           testListener = new TextListener(@robot, testRegex, callback)\n           result = testListener.matcher(testMessage)\n- \n+\n           expect(result).to.not.be.ok\n           expect(testMessage.match).to.not.have.been.called", "changes": 14}, {"status": "modified", "deletions": 13, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "test/robot_test.coffee", "sha": "ae140c937634e0caaf27d1881ad307d922d80aa2", "additions": 86, "patch": "@@ -136,20 +136,11 @@ describe 'Robot', ->\n         # original message\n \n         testMessage = new TextMessage(@user, 'message123')\n-        @robot.listeners = []\n-\n-        # Replace @robot.receive so we can catch when the functions recurses\n-        oldReceive = @robot.receive\n-        @robot.receive = (message) ->\n-          expect(message).to.be.instanceof(CatchAllMessage)\n-          expect(message.message).to.be.equal(testMessage)\n-        sinon.spy(@robot, 'receive')\n-\n-        # Call the original receive method that we want to test\n-        oldReceive.call @robot, testMessage\n+        listener = sinon.spy()\n+        @robot.catchAll listener\n+        @robot.receive testMessage\n+        expect(listener).to.have.been.called\n \n-        # Ensure the function recursed\n-        expect(@robot.receive).to.have.been.called\n \n       it 'does not trigger a CatchAllMessage if a listener matches', ->\n         testMessage = new TextMessage(@user, 'message123')\n@@ -472,3 +463,85 @@ describe 'Robot', ->\n         done()\n \n       @robot.receive testMessage\n+\n+    it 'passes on a message that a prereceive hook allows', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      @robot.prereceive (hook) ->\n+        hook.message.addedData = \"added data\"\n+      @robot.hear /^message123$/, (response) ->\n+        expect(response.message.addedData).to.equal(\"added data\")\n+        done()\n+      @robot.receive testMessage\n+\n+    it 'provides a response object so replies can be sent before a match', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      replier = @robot.adapter.reply = sinon.spy()\n+      listenerCallback = sinon.spy()\n+      @robot.hear /^message123$/, listenerCallback\n+      @robot.prereceive (hook) ->\n+        hook.response.reply \"Listen bud, here's why I won't let you do that.\"\n+        hook.finish()\n+      @robot.receive testMessage\n+      expect(listenerCallback).to.not.have.been.called\n+      expect(replier).to.have.been.calledOnce\n+      done()\n+\n+    it 'does not pass on a message that a prereceive hook finishes', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      listenerCallback = sinon.spy()\n+      @robot.hear /^message123$/, listenerCallback\n+      @robot.prereceive (hook) ->\n+        hook.finish()\n+      @robot.receive testMessage\n+      expect(listenerCallback).to.not.have.been.calledOnce\n+      done()\n+\n+    it 'runs a prelistener hook before each listener', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      @robot.hear /^message123$/, (response) ->\n+        expect(response.message.addedData).to.equal(\"added data\")\n+        done()\n+      listener = @robot.listeners[0]\n+      @robot.prelisten (hook) ->\n+        hook.message.addedData = \"added data\"\n+        expect(hook.listener).to.equal(listener)\n+        expect(hook.response.message).to.equal(testMessage)\n+      @robot.receive testMessage\n+\n+    it 'stops processing if a prelisten hook finishes', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      listener = sinon.spy()\n+      @robot.prelisten (hook) ->\n+        hook.finish()\n+      @robot.hear /^message123$/, listener\n+      @robot.receive testMessage\n+      expect(listener).to.not.have.been.calledOnce\n+      done()\n+\n+    it 'runs a prereply hook before each replied message', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      sender = @robot.adapter.send = sinon.spy()\n+      replier = @robot.adapter.reply = sinon.spy()\n+      @robot.hear /^message123$/, (response) ->\n+        response.send \"this sounds awesome\"\n+        response.send \"dump passwords to IRC lol\"\n+        response.reply \"more passwords, seriously?\", \"this is fine though\"\n+        done()\n+      @robot.prereply (hook) ->\n+        if hook.reply.text.match(/passwords/)\n+          hook.finish()\n+      @robot.receive testMessage\n+      expect(replier).to.have.been.calledOnce\n+      expect(sender).to.have.been.calledOnce\n+\n+    it 'allows changing the outgoing message', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      sender = @robot.adapter.send = sinon.spy()\n+      @robot.hear /^message123$/, (response) ->\n+        response.send \"dump passwords to IRC lol\"\n+        done()\n+      @robot.prereply (hook) ->\n+        if hook.reply.text.match(/passwords/)\n+          hook.reply.text = \"Sorry meatbag, no passwords.\"\n+      @robot.receive testMessage\n+      expect(sender.getCall(0).args[1]).to.equal(\"Sorry meatbag, no passwords.\")", "changes": 99}], "1092": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f0bf5abd645f95f3541df42170ed54c6a58ac45e/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/f0bf5abd645f95f3541df42170ed54c6a58ac45e/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=f0bf5abd645f95f3541df42170ed54c6a58ac45e", "filename": "docs/patterns.md", "sha": "4c3f055bf983529af0c4b527aefaa1d6c611c4ca", "additions": 5, "patch": "@@ -71,9 +71,13 @@ In many corporate environments, a web proxy is required to access the Internet a\n \n Due to the way node.js handles HTTP and HTTPS requests, you need to specify a different Agent for each protocol. ScopedHTTPClient will then automatically choose the right ProxyAgent for each request.\n \n+1. Install ProxyAgent. `npm install proxy-agent`\n+2. Create a [bundled script](/docs/scripting.md) in the `scripts/` directory of your Hubot instance called `proxy.coffee`\n+3. Add the following code, modified for your needs:\n+\n ```coffeescript\n proxy = require 'proxy-agent'\n-module.export = (robot) ->\n+module.exports = (robot) ->\n   robot.globalHttpOptions.httpAgent  = proxy('http://my-proxy-server.internal', false)\n   robot.globalHttpOptions.httpsAgent = proxy('http://my-proxy-server.internal', true)\n ```", "changes": 6}], "1094": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1a062d8e8120e7d438f85142b95d051be2a9fdc4/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/1a062d8e8120e7d438f85142b95d051be2a9fdc4/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=1a062d8e8120e7d438f85142b95d051be2a9fdc4", "filename": "docs/scripting.md", "sha": "e4c1381ccfb9dd3b23c0e5ade7435bc683fabd00", "additions": 80, "patch": "@@ -620,6 +620,10 @@ If you are using git, the generated directory includes a .gitignore, so you can\n \n You now have a hubot script repository that's ready to roll! Feel free to crack open the pre-created `src/awesome-script.coffee` file and start building up your script! When you've got it ready, you can publish it to [npmjs](http://npmjs.org) by [following their documentation](https://docs.npmjs.com/getting-started/publishing-npm-packages)!\n \n+You'll probably want to write some unit tests for your new script.  A sample test script is written to\n+`test/awesome-script-test.coffee`, which you can run with `grunt`.  For more information on tests,\n+see **Testing Hubot Scripts**.\n+\n # Listener Metadata\n \n In addition to a regular expression and callback, the `hear` and `respond` functions also accept an optional options Object which can be used to attach arbitrary metadata to the generated Listener object. This metadata allows for easy extension of your script's behavior without modifying the script package.\n@@ -818,3 +822,79 @@ of `next` and `done`. Receive middleware context includes these fields:\n     - A string representing which type of response message the listener sent, such as `send`, `reply`, `emote` or `topic`.\n   - `plaintext`\n     - `true` or `undefined`. This will be set to `true` if the message is of a normal plaintext type, such as `send` or `reply`. This property should be treated as read-only.\n+\n+# Testing Hubot Scripts\n+\n+[hubot-test-helper](https://github.com/mtsmfm/hubot-test-helper) is a good\n+framework for unit testing Hubot scripts.  (Note that, in order to use\n+hubot-test-helper, you'll need a recent Node version with support for Promises.)\n+\n+Install the package in your Hubot instance:\n+\n+``` % npm install hubot-test-helper --save-dev ```\n+\n+You'll also need to install:\n+\n+ * a JavaScript testing framework such as *Mocha*\n+ * an assertion library such as *chai* or *expect.js*\n+\n+You may also want to install:\n+\n+ * *coffee-script* (if you're writing your tests in CoffeeScript rather than JavaScript)\n+ * a mocking library such as *Sinon.js* (if your script performs webservice calls or\n+   other asynchronous actions)\n+\n+Here is a sample script that tests the first couple of commands in the\n+[Hubot sample script](https://github.com/github/generator-hubot/blob/master/generators/app/templates/scripts/example.coffee).  This script uses *Mocha*, *chai*, *coffee-script*, and of course *hubot-test-helper*:\n+\n+**test/example-test.coffee**\n+```coffeescript\n+Helper = require('hubot-test-helper')\n+chai = require 'chai'\n+\n+expect = chai.expect\n+\n+helper = new Helper('../scripts/example.coffee')\n+\n+describe 'example script', ->\n+  beforeEach ->\n+    @room = helper.createRoom()\n+\n+  afterEach ->\n+    @room.destroy()\n+\n+  it 'doesn\\'t need badgers', ->\n+    @room.user.say('alice', 'did someone call for a badger?').then =>\n+      expect(@room.messages).to.eql [\n+        ['alice', 'did someone call for a badger?']\n+        ['hubot', 'Badgers? BADGERS? WE DON\\'T NEED NO STINKIN BADGERS']\n+      ]\n+\n+  it 'won\\'t open the pod bay doors', ->\n+    @room.user.say('bob', '@hubot open the pod bay doors').then =>\n+      expect(@room.messages).to.eql [\n+        ['bob', '@hubot open the pod bay doors']\n+        ['hubot', '@bob I\\'m afraid I can\\'t let you do that.']\n+      ]\n+\n+  it 'will open the dutch doors', ->\n+    @room.user.say('bob', '@hubot open the dutch doors').then =>\n+      expect(@room.messages).to.eql [\n+        ['bob', '@hubot open the dutch doors']\n+        ['hubot', '@bob Opening dutch doors']\n+      ]\n+```\n+\n+**sample output**\n+```bash\n+% mocha --compilers \"coffee:coffee-script/register\" test/*.coffee\n+\n+\n+  example script\n+    \u2713 doesn't need badgers\n+    \u2713 won't open the pod bay doors\n+    \u2713 will open the dutch doors\n+\n+\n+  3 passing (212ms)\n+```", "changes": 80}], "1095": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/5b27aa62cc997b4a7b62630d515ddb17dbafa48c/docs/deploying.md", "blob_url": "https://github.com/hubotio/hubot/blob/5b27aa62cc997b4a7b62630d515ddb17dbafa48c/docs/deploying.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying.md?ref=5b27aa62cc997b4a7b62630d515ddb17dbafa48c", "filename": "docs/deploying.md", "sha": "4b43dc5f1228bc9a1fc8f626ab45423af1f03cde", "additions": 1, "patch": "@@ -4,6 +4,7 @@ layout: docs\n ---\n \n - [Azure](/docs/deploying/azure.md)\n+- [Bluemix](/docs/deploying/bluemix.md)\n - [Heroku](/docs/deploying/heroku.md)\n - [Unix](/docs/deploying/unix.md)\n - [Windows](/docs/deploying/windows.md)", "changes": 1}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/5b27aa62cc997b4a7b62630d515ddb17dbafa48c/docs/deploying/bluemix.md", "blob_url": "https://github.com/hubotio/hubot/blob/5b27aa62cc997b4a7b62630d515ddb17dbafa48c/docs/deploying/bluemix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/bluemix.md?ref=5b27aa62cc997b4a7b62630d515ddb17dbafa48c", "filename": "docs/deploying/bluemix.md", "sha": "b1c7629446cef8116d7ee92537eaa46d0291ac6e", "additions": 111, "patch": "@@ -0,0 +1,111 @@\n+---\n+permalink: /docs/deploying/bluemix/index.html\n+layout: docs\n+---\n+\n+If you've been following along with [Getting Started](../README.md), it's time\n+to deploy so you can use it beyond just your local machine.\n+[IBM Bluemix](http://bluemix.net) is a way to deploy hubot as an alternative to\n+[Heroku](/docs/deploying/heroku.md). It is built on the open-source project\n+[Cloud Foundry](https://www.cloudfoundry.org/), so we'll be using the `cf cli`\n+throughout these examples.\n+\n+Unlike Heroku, the free tier on Bluemix supports 24/7 uptime, so you don't need\n+to go through the hassle of setting up something like\n+[hubot-heroku-keepalive](https://github.com/hubot-scripts/hubot-heroku-keepalive).\n+\n+You will need to install the\n+[Cloud Foundry CLI](https://github.com/cloudfoundry/cli/releases), and create a\n+[Bluemix Account](http://bluemix.net).\n+\n+First we need to define a `manifest.yml` file in the root directory (and delete\n+the generated `procfile`). The contents of the manifest at the bare minimum\n+should look like:\n+\n+```yml\n+applications:\n+- buildpack: https://github.com/jthomas/nodejs-v4-buildpack.git\n+  command: ./bin/hubot --adapter slack\n+  path: .\n+  instances: 1\n+  memory: 256M\n+```\n+\n+In this example, we're using the slack adapter (as shown by the start command).\n+Of course, the start command can be whatever you need to start your specific\n+hubot. You can optionally set a `host`, and `name`, and much more, or you can\n+set those up through the Bluemix GUI in the dashboard. For thorough\n+documentation on what the `manifest.yml` file does and how it used and how to\n+configure your own, see\n+[these docs](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html).\n+\n+You then need to connect your hubot project to Bluemix:\n+\n+```sh\n+$ cd your_hubot_project\n+$ cf api https://api.ng.bluemix.net\n+$ cf login\n+```\n+\n+This will prompt you with your login credentials. Then to deploy your hubot, all\n+you need to do is:\n+\n+```sh\n+$ cf push NAME_OF_YOUR_HUBOT_APP\n+```\n+\n+Note: if you do not specify a `name` and `host` in your manifest, you will have\n+needed to create a `Node.js` Cloudfoundry app in the Bluemix dashboard. You then\n+use the name that of that app in your `cf push` command. For very thorough\n+documentation on deploying a Node.js app to Bluemix, please\n+[read here](https://www.ng.bluemix.net/docs/starters/nodejs/index.html), for\n+very thorough documentation of the command line interface, please\n+[read here](https://www.ng.bluemix.net/docs/cli/reference/cfcommands/index.html).\n+\n+Finally you will need to add the environment variables to the website to make\n+sure it runs properly. You can either do it through the GUI (under your app's\n+dashboard) or you can use the command line, as follows (example is showing slack\n+as an adapter):\n+\n+```sh\n+$ cf set-env NAME_OF_YOUR_HUBOT_APP HUBOT_SLACK_TOKEN TOKEN_VALUE\n+```\n+\n+### Usage With Git\n+\n+It is not mandatory to use Bluemix with git, but Bluemix supports delivery\n+pipelines that can be tied to Github, Github Enterprise, or a private JazzHub\n+repo.\n+\n+Inside your new hubot directory, make sure you've created a git repository,\n+and that your work is committed:\n+\n+```sh\n+$ git init\n+$ git add .\n+$ git commit -m \"Initial commit\"\n+```\n+\n+Then [create a GitHub repository](https://help.github.com/articles/create-a-repo/)\n+for your hubot. This is where Bluemix will pull your code from instead of\n+needing to deploy directly from your dev machine to Bluemix.\n+\n+```sh\n+$ git remote add origin _your GitHub repo_\n+$ git push -u origin master\n+```\n+\n+Once you have your GitHub repo, navigate to your project dashboard, and click\n+\"add git\" (in the upper right hand corner). This will guide you through the\n+process of using either your Github account, or setting up a JazzHub account.\n+You can then add any permutations of test/build/deploy stages into your\n+pipeline. For thorough documentation on that, see\n+[here](https://www.ng.bluemix.net/docs/#services/DeliveryPipeline/index.html#getstartwithCD).\n+\n+### Further Reading\n+\n+  - [Deploying Cloud Foundry Apps To Bluemix](https://www.ng.bluemix.net/docs/cfapps/runtimes.html)\n+  - [Neploying Node.js Apps to Bluemix](https://www.ng.bluemix.net/docs/starters/nodejs/index.html)\n+  - [Setting up your manifest](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html)\n+  - [Understanding the CF CLI](https://www.ng.bluemix.net/docs/cli/reference/cfcommands/index.html)\n+  - [Setting up a Build Pipleline in Bluemix](https://www.ng.bluemix.net/docs/#services/DeliveryPipeline/index.html#getstartwithCD)", "changes": 111}], "1097": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/92ee7fb4949437dc9798b77f883bf7563396b321/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/92ee7fb4949437dc9798b77f883bf7563396b321/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=92ee7fb4949437dc9798b77f883bf7563396b321", "filename": "docs/adapters.md", "sha": "33cdfda4ab53e43b7f691032d1e154a876613bfd", "additions": 1, "patch": "@@ -40,6 +40,7 @@ to have yours added to the list:\n * [Slack](https://github.com/slackhq/hubot-slack)\n * [Skype](https://github.com/netpro2k/hubot-skype)\n * [SkypeWeb](https://github.com/sdimkov/hubot-skype-web)\n+* [Skyweb](https://github.com/EllisV/hubot-skyweb)\n * [Talker](https://github.com/unixcharles/hubot-talker)\n * [Telegram](https://github.com/lukefx/hubot-telegram)\n * [Twilio](https://github.com/jkarmel/hubot-twilio)", "changes": 1}], "1099": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f17ae8c0c84650d4f412c110324a41b7db58fba6/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/f17ae8c0c84650d4f412c110324a41b7db58fba6/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=f17ae8c0c84650d4f412c110324a41b7db58fba6", "filename": "docs/adapters.md", "sha": "a5172da2a9768dd1b4d33f4fc6ccada82048b7a6", "additions": 2, "patch": "@@ -42,7 +42,8 @@ to have yours added to the list:\n * [SkypeWeb](https://github.com/sdimkov/hubot-skype-web)\n * [Talker](https://github.com/unixcharles/hubot-talker)\n * [Telegram](https://github.com/lukefx/hubot-telegram)\n-* [Twilio](https://github.com/jkarmel/hubot-twilio)\n+* [Twilio IP Messaging](https://github.com/philnash/hubot-twilio-ip-messaging)\n+* [Twilio SMS](https://github.com/jkarmel/hubot-twilio)\n * [Twitter](https://github.com/MathildeLemee/hubot-twitter)\n * [Typetalk](https://github.com/nulab/hubot-typetalk)\n * [VictorOps](https://github.com/victorops/hubot-victorops)", "changes": 3}], "1101": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/7d174c79ec9099806274c73f40aab624bf9c618f/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/7d174c79ec9099806274c73f40aab624bf9c618f/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=7d174c79ec9099806274c73f40aab624bf9c618f", "filename": "docs/index.md", "sha": "71c578bf8bb909fbf53ba3f049916b8959f3c449", "additions": 3, "patch": "@@ -20,8 +20,8 @@ we wanted to make a bot called myhubot:\n     % yo hubot\n \n At this point, you'll be asked a few questions about who is creating the bot,\n-and which [adapter](/docs/adapters.md) you'll be using. Adapters are hubot's way of\n-integrating with different chat providers.\n+and which [adapter](/docs/adapters.md) you'll be using. Adapters are hubot's\n+way of integrating with different chat providers.\n \n If you are using git, the generated directory includes a .gitignore, so you can\n initialize and add everything:\n@@ -46,7 +46,7 @@ You now have your own functional hubot! There's a `bin/hubot`\n command for convenience, to handle installing npm dependencies, loading scripts,\n and then launching your hubot.\n \n-Hubot needs Redis to persist data, so before you can start hubot on your own computer, you should have Redis installed on your localhost. If just want to test Hubot without Redis, then you can remove `redis-brain.coffee` from `hubot-scripts.json`.\n+Hubot needs Redis to persist data, so before you can start hubot on your own computer, you should have Redis installed on your localhost. If just want to test Hubot without Redis, then you can remove `hubot-redis-brain` from `external-scripts.json`.\n \n     % bin/hubot\n     Hubot>", "changes": 6}], "1103": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b8a1167bd0ad6e768d0cfa38ce903420f11f3c5f/LICENSE.md", "blob_url": "https://github.com/hubotio/hubot/blob/b8a1167bd0ad6e768d0cfa38ce903420f11f3c5f/LICENSE.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/LICENSE.md?ref=b8a1167bd0ad6e768d0cfa38ce903420f11f3c5f", "filename": "LICENSE.md", "sha": "e4a68c7dcc4787a6c801d07b5b4e8e2c3840178d", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n-Copyright (c) 2011-2015 GitHub Inc.\n+Copyright (c) 2011-2016 GitHub Inc.\n \n Permission is hereby granted, free of charge, to any person obtaining\n a copy of this software and associated documentation files (the", "changes": 2}], "1104": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/cf2d9abded666a8830689b0d2b01a0e6eabec099/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/cf2d9abded666a8830689b0d2b01a0e6eabec099/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=cf2d9abded666a8830689b0d2b01a0e6eabec099", "filename": "src/robot.coffee", "sha": "da991a2926975de64d042e15c1cdbef98187bf7f", "additions": 41, "patch": "@@ -148,6 +148,47 @@ class Robot\n \n     newRegex\n \n+  # Public: Updates the robot name and its listeners accordingly.\n+  #\n+  # newName - A String of the new robot name.\n+  #\n+  # Returns nothing.\n+  changeName: (newName) ->\n+    # Escapes names:\n+    alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+    oldNameRegex = @name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+    newNameRegex = newName.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+\n+    # Updates the name.\n+    @name = newName\n+\n+    # Updates listeners:\n+    listeners = []\n+    for listener in @listeners\n+      if listener instanceof TextListener\n+        # Extracts regex and modifiers:\n+        re = listener.regex.toString().split('/')\n+        re.shift()\n+        modifiers = re.pop()\n+        oldRegex = re.join('/')\n+\n+        if @alias\n+        # Listener's regex also contains an alias.\n+          [a,b] = if oldNameRegex.length > alias.length then [oldNameRegex,alias] else [alias,oldNameRegex]\n+          oldStartRegex = \"^\\\\s*[@]?(?:#{a}[:,]?|#{b}[:,]?)\\\\s*(?:\"\n+          [c,d] = if newNameRegex.length > alias.length then [newNameRegex,alias] else [alias,newNameRegex]\n+          newStartRegex = \"^\\\\s*[@]?(?:#{c}[:,]?|#{d}[:,]?)\\\\s*(?:\"\n+          regex = oldRegex.replace(oldStartRegex, newStartRegex)\n+        else\n+          oldStartRegex = \"^\\\\s*[@]?#{oldNameRegex}[:,]?\\\\s*(?:\"\n+          newStartRegex = \"^\\\\s*[@]?#{newNameRegex}[:,]?\\\\s*(?:\"\n+          regex = oldRegex.replace(oldNameRegex, newNameRegex)\n+        re = new RegExp(regex, modifiers)\n+        listeners.push new TextListener(@, re, listener.options, listener.callback)\n+      else\n+        listeners.push listener\n+    @listeners = listeners\n+\n   # Public: Adds a Listener that triggers when anyone enters the room.\n   #\n   # options  - An Object of additional parameters keyed on extension name", "changes": 41}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/cf2d9abded666a8830689b0d2b01a0e6eabec099/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/cf2d9abded666a8830689b0d2b01a0e6eabec099/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=cf2d9abded666a8830689b0d2b01a0e6eabec099", "filename": "test/robot_test.coffee", "sha": "0b9c51b775023e7cb1d198ea2349fa326f3b9305", "additions": 27, "patch": "@@ -82,6 +82,20 @@ describe 'Robot', ->\n         httpClient = @robot.http('http://localhost', agent: agentB)\n         expect(httpClient.options.agent).to.equal(agentB)\n \n+    describe '#changeName', ->\n+      it 'updates the name', ->\n+        expect(@robot.name).to.equal('TestHubot')\n+        @robot.changeName 'Testbot'\n+        expect(@robot.name).to.equal('Testbot')\n+\n+      it 'updates listeners with the new name', ->\n+        @robot.respond /.*/, ->\n+        regex = @robot.listeners[0].regex.toString()\n+        expect(regex).to.equal('/^\\\\s*[@]?(?:TestHubot[:,]?|Hubot[:,]?)\\\\s*(?:.*)/')\n+        @robot.changeName 'Testbot'\n+        regex = @robot.listeners[0].regex.toString()\n+        expect(regex).to.equal('/^\\\\s*[@]?(?:Testbot[:,]?|Hubot[:,]?)\\\\s*(?:.*)/')\n+\n     describe '#respondPattern', ->\n       it 'matches messages starting with robot\\'s name', ->\n         testMessage = @robot.name + 'message123'\n@@ -414,6 +428,19 @@ describe 'Robot', ->\n \n         expect(result).to.not.be.ok\n \n+    describe '#changeName', ->\n+      it 'still matches TextMessages addressed to the robot', ->\n+        callback = sinon.spy()\n+        testMessage = new TextMessage(@user, 'Testbot Message123')\n+        testRegex = /message123$/i\n+\n+        @robot.respond(testRegex, callback)\n+        @robot.changeName 'Testbot'\n+\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+        expect(result).to.be.ok\n+\n     describe '#enter', ->\n       it 'matches EnterMessages', ->\n         callback = sinon.spy()", "changes": 27}], "1106": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/051e1e2cc6ba0499238a02dace19020e8174e25f/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/051e1e2cc6ba0499238a02dace19020e8174e25f/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=051e1e2cc6ba0499238a02dace19020e8174e25f", "filename": "docs/scripting.md", "sha": "2e5a63e284b62824cfcdba4eb578ce72ccb6854b", "additions": 2, "patch": "@@ -395,6 +395,8 @@ module.exports = (robot) ->\n \n Hubot includes support for the [express](http://expressjs.com) web framework to serve up HTTP requests. It listens on the port specified by the `EXPRESS_PORT` or `PORT` environment variables (preferred in that order) and defaults to 8080. An instance of an express application is available at `robot.router`. It can be protected with username and password by specifying `EXPRESS_USER` and `EXPRESS_PASSWORD`. It can automatically serve static files by setting `EXPRESS_STATIC`.\n \n+You can increase the [maximum request body size](https://github.com/expressjs/body-parser#limit-3) by specifying `EXPRESS_LIMIT`. It defaults to '100kb'.  You can also set the [maximum number of parameters](https://github.com/expressjs/body-parser#parameterlimit) that are allowed in the URL-encoded data by setting `EXPRESS_PARAMETER_LIMIT`. The default is `1000`.\n+\n The most common use of this is for providing HTTP end points for services with webhooks to push to, and have those show up in chat.\n \n ", "changes": 2}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/051e1e2cc6ba0499238a02dace19020e8174e25f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/051e1e2cc6ba0499238a02dace19020e8174e25f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=051e1e2cc6ba0499238a02dace19020e8174e25f", "filename": "src/robot.coffee", "sha": "7a011b613e782ba1a3f0a3bc08fb533acfd0a015", "additions": 8, "patch": "@@ -408,11 +408,13 @@ class Robot\n   #\n   # Returns nothing.\n   setupExpress: ->\n-    user    = process.env.EXPRESS_USER\n-    pass    = process.env.EXPRESS_PASSWORD\n-    stat    = process.env.EXPRESS_STATIC\n-    port    = process.env.EXPRESS_PORT or process.env.PORT or 8080\n-    address = process.env.EXPRESS_BIND_ADDRESS or process.env.BIND_ADDRESS or '0.0.0.0'\n+    user       = process.env.EXPRESS_USER\n+    pass       = process.env.EXPRESS_PASSWORD\n+    stat       = process.env.EXPRESS_STATIC\n+    port       = process.env.EXPRESS_PORT or process.env.PORT or 8080\n+    address    = process.env.EXPRESS_BIND_ADDRESS or process.env.BIND_ADDRESS or '0.0.0.0'\n+    limit      = process.env.EXPRESS_LIMIT or '100kb'\n+    paramLimit = parseInt(process.env.EXPRESS_PARAMETER_LIMIT) or 1000\n \n     express = require 'express'\n     multipart = require 'connect-multiparty'\n@@ -427,7 +429,7 @@ class Robot\n     app.use express.query()\n \n     app.use express.json()\n-    app.use express.urlencoded()\n+    app.use express.urlencoded(limit: limit, parameterLimit: paramLimit)\n     # replacement for deprecated express.multipart/connect.multipart\n     # limit to 100mb, as per the old behavior\n     app.use multipart(maxFilesSize: 100 * 1024 * 1024)", "changes": 14}], "1109": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/684b7d41cec3c89dc79c861e14b26badb5a91187/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/684b7d41cec3c89dc79c861e14b26badb5a91187/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=684b7d41cec3c89dc79c861e14b26badb5a91187", "filename": "bin/hubot", "sha": "ea4a417dbc8453f5d41c8164a7e927452040cfbd", "additions": 1, "patch": "@@ -82,9 +82,7 @@ if Options.create\n   process.exit 1\n \n else\n-  adapterPath = Path.join __dirname, \"..\", \"src\", \"adapters\"\n-\n-  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name, Options.alias\n+  robot = Hubot.loadBot undefined, Options.adapter, Options.enableHttpd, Options.name, Options.alias\n \n   if Options.version\n     console.log robot.version", "changes": 4}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/684b7d41cec3c89dc79c861e14b26badb5a91187/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/684b7d41cec3c89dc79c861e14b26badb5a91187/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=684b7d41cec3c89dc79c861e14b26badb5a91187", "filename": "src/robot.coffee", "sha": "fdfbdb18b11851e709da491d2b9ea383fca09823", "additions": 6, "patch": "@@ -34,13 +34,15 @@ class Robot\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n   # dispatch them to matching listeners.\n   #\n-  # adapterPath - A String of the path to local adapters.\n+  # adapterPath -  A String of the path to built-in adapters (defaults to src/adapters)\n   # adapter     - A String of the adapter name.\n   # httpd       - A Boolean whether to enable the HTTP daemon.\n   # name        - A String of the robot name, defaults to Hubot.\n   #\n   # Returns nothing.\n   constructor: (adapterPath, adapter, httpd, name = 'Hubot', alias = false) ->\n+    @adapterPath ?= Path.join __dirname, \"adapters\"\n+\n     @name       = name\n     @events     = new EventEmitter\n     @brain      = new Brain @\n@@ -62,7 +64,7 @@ class Robot\n     else\n       @setupNullRouter()\n \n-    @loadAdapter adapterPath, adapter\n+    @loadAdapter adapter\n \n     @adapterName   = adapter\n     @errorHandlers = []\n@@ -452,12 +454,12 @@ class Robot\n   # adapter - A String of the adapter name to use.\n   #\n   # Returns nothing.\n-  loadAdapter: (path, adapter) ->\n+  loadAdapter: (adapter) ->\n     @logger.debug \"Loading adapter #{adapter}\"\n \n     try\n       path = if adapter in HUBOT_DEFAULT_ADAPTERS\n-        \"#{path}/#{adapter}\"\n+        \"#{@adapterPath}/#{adapter}\"\n       else\n         \"hubot-#{adapter}\"\n ", "changes": 10}], "1110": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/93d54955bb24e3c4e08d7b996d5453bac534b965/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/93d54955bb24e3c4e08d7b996d5453bac534b965/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=93d54955bb24e3c4e08d7b996d5453bac534b965", "filename": "bin/hubot", "sha": "ea4a417dbc8453f5d41c8164a7e927452040cfbd", "additions": 1, "patch": "@@ -82,9 +82,7 @@ if Options.create\n   process.exit 1\n \n else\n-  adapterPath = Path.join __dirname, \"..\", \"src\", \"adapters\"\n-\n-  robot = Hubot.loadBot adapterPath, Options.adapter, Options.enableHttpd, Options.name, Options.alias\n+  robot = Hubot.loadBot undefined, Options.adapter, Options.enableHttpd, Options.name, Options.alias\n \n   if Options.version\n     console.log robot.version", "changes": 4}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/93d54955bb24e3c4e08d7b996d5453bac534b965/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/93d54955bb24e3c4e08d7b996d5453bac534b965/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=93d54955bb24e3c4e08d7b996d5453bac534b965", "filename": "index.coffee", "sha": "44c1a69b8565399f095c0a8d5ff614e5bdde028c", "additions": 7, "patch": "@@ -5,6 +5,12 @@ Adapter                                                              = require '\n Response                                                             = require './src/response'\n {Listener,TextListener}                                              = require './src/listener'\n {Message,TextMessage,EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './src/message'\n+Shell                                                               = require './src/adapters/shell'\n+Campfire                                                            = require './src/adapters/campfire'\n+BuiltinAdapters = {\n+  Shell\n+  Campfire\n+}\n \n module.exports = {\n   User\n@@ -20,6 +26,7 @@ module.exports = {\n   LeaveMessage\n   TopicMessage\n   CatchAllMessage\n+  BuiltinAdapters\n }\n \n module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName, botAlias) ->", "changes": 7}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/93d54955bb24e3c4e08d7b996d5453bac534b965/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/93d54955bb24e3c4e08d7b996d5453bac534b965/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=93d54955bb24e3c4e08d7b996d5453bac534b965", "filename": "src/adapters/campfire.coffee", "sha": "a6e7739709b8963cc1852e77093bf2cf493b8029", "additions": 1, "patch": "@@ -113,6 +113,7 @@ class Campfire extends Adapter\n \n     self.emit \"connected\"\n \n+module.exports = exports = Campfire\n exports.use = (robot) ->\n   new Campfire robot\n ", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/93d54955bb24e3c4e08d7b996d5453bac534b965/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/93d54955bb24e3c4e08d7b996d5453bac534b965/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=93d54955bb24e3c4e08d7b996d5453bac534b965", "filename": "src/adapters/shell.coffee", "sha": "65b3776db947eca1e62fdbb6beeb62a928e26d79", "additions": 2, "patch": "@@ -97,5 +97,7 @@ class Shell extends Adapter\n       else\n         callback([])\n \n+module.exports = exports = Shell\n+\n exports.use = (robot) ->\n   new Shell robot", "changes": 2}, {"status": "modified", "deletions": 13, "raw_url": "https://github.com/hubotio/hubot/raw/93d54955bb24e3c4e08d7b996d5453bac534b965/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/93d54955bb24e3c4e08d7b996d5453bac534b965/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=93d54955bb24e3c4e08d7b996d5453bac534b965", "filename": "src/robot.coffee", "sha": "860759b75de8004bbba48fc179c40ed93f4c0010", "additions": 31, "patch": "@@ -34,17 +34,17 @@ class Robot\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n   # dispatch them to matching listeners.\n   #\n-  # adapterPath - A String of the path to local adapters.\n+  # adapterPath -  A String of the path to built-in adapters (defaults to src/adapters)\n   # adapter     - A String of the adapter name.\n   # httpd       - A Boolean whether to enable the HTTP daemon.\n   # name        - A String of the robot name, defaults to Hubot.\n   #\n   # Returns nothing.\n-  constructor: (adapterPath, adapter, httpd, name = 'Hubot', alias = false) ->\n-    @name       = name\n+  constructor: (adapterPath, adapter, httpd, @name = 'Hubot', @alias = false) ->\n+    @adapterPath ?= Path.join __dirname, \"adapters\"\n+\n     @events     = new EventEmitter\n     @brain      = new Brain @\n-    @alias      = alias\n     @adapter    = null\n     @Response   = Response\n     @commands   = []\n@@ -62,7 +62,7 @@ class Robot\n     else\n       @setupNullRouter()\n \n-    @loadAdapter adapterPath, adapter\n+    @loadAdapter adapter if adapter?\n \n     @adapterName   = adapter\n     @errorHandlers = []\n@@ -376,17 +376,33 @@ class Robot\n   #\n   # Returns nothing.\n   loadExternalScripts: (packages) ->\n-    @logger.debug \"Loading external-scripts from npm packages\"\n     try\n       if packages instanceof Array\n-        for pkg in packages\n-          require(pkg)(@)\n+        @loadScriptPackage(pkg) for pkg in packages\n       else\n-        for pkg, scripts of packages\n-          require(pkg)(@, scripts)\n+        @loadScriptPackage(pkg, scripts) for pkg, scripts of packages\n+\n+  # Public: load a script from an npm module\n+  #\n+  # pkg - A string of the package to load, or a script that has been required, but hasn't been loaded yet\n+  # scripts - An Array of scripts to load from the package (optional)\n+  #\n+  # Examples:\n+  #   robot.loadScriptPackage require('hubot-help')\n+  #   robot.loadScriptPackage 'hubot-help'\n+  #\n+  # Note:\n+  #   Specifying package as string may fail depending on your NODE_PATH settings.\n+  #   This can be fixed by requiring the package, and passing that to this function.\n+  #\n+  # Returns nothing\n+  loadScriptPackage: (pkg, scripts) ->\n+    try\n+      pkg = require(pkg) unless typeof(pkg) is 'function'\n     catch err\n       @logger.error \"Error loading scripts from npm package - #{err.stack}\"\n       process.exit(1)\n+    pkg(@, scripts)\n \n   # Setup the Express server's defaults.\n   #\n@@ -448,16 +464,15 @@ class Robot\n \n   # Load the adapter Hubot is going to use.\n   #\n-  # path    - A String of the path to adapter if local.\n   # adapter - A String of the adapter name to use.\n   #\n   # Returns nothing.\n-  loadAdapter: (path, adapter) ->\n+  loadAdapter: (adapter) ->\n     @logger.debug \"Loading adapter #{adapter}\"\n \n     try\n       path = if adapter in HUBOT_DEFAULT_ADAPTERS\n-        \"#{path}/#{adapter}\"\n+        \"#{@adapterPath}/#{adapter}\"\n       else\n         \"hubot-#{adapter}\"\n \n@@ -568,6 +583,9 @@ class Robot\n   #\n   # Returns nothing.\n   run: ->\n+    unless @adapter\n+      throw new Error(\"no adapter present. did you forget to specify one or not call 'loadApdapter'?\")\n+\n     @emit \"running\"\n     @adapter.run()\n ", "changes": 44}], "1111": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/11d1ed2599e71aae324062adaf07578bd04dfefb/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/11d1ed2599e71aae324062adaf07578bd04dfefb/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=11d1ed2599e71aae324062adaf07578bd04dfefb", "filename": "src/adapters/shell.coffee", "sha": "08ed66f29ba946827a822bd935e0363dd091b89e", "additions": 1, "patch": "@@ -17,7 +17,7 @@ historyPath = \".hubot_history\"\n \n class Shell extends Adapter\n   send: (envelope, strings...) ->\n-    console.log chalk.green.bold(\"#{str}\") for str in strings\n+    console.log chalk.bold(\"#{str}\") for str in strings\n \n   emote: (envelope, strings...) ->\n     @send envelope, \"* #{str}\" for str in strings", "changes": 2}], "1114": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c7b68424c7ea1a1db757d5358a38199fd523a158/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/c7b68424c7ea1a1db757d5358a38199fd523a158/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=c7b68424c7ea1a1db757d5358a38199fd523a158", "filename": "docs/scripting.md", "sha": "b7c2b67623abb1441beee3be9b5eeb743db49938", "additions": 1, "patch": "@@ -212,7 +212,7 @@ For those times that there isn't an API, there's always the possibility of scree\n \n ### Advanced HTTP and HTTPS settings\n \n-As mentioned, hubot uses [node-scoped-http-client](https://github.com/technoweenie/node-scoped-http-client) to provide a simple interface for making HTTP and HTTP requests. Under its hood, it's using node's builtin [http](http://nodejs.org/api/http.html) and [https](http://nodejs.org/api/https.html) libraries, but providing an easy DSL for the most common kinds of interaction.\n+As mentioned, hubot uses [node-scoped-http-client](https://github.com/technoweenie/node-scoped-http-client) to provide a simple interface for making HTTP and HTTPS requests. Under its hood, it's using node's builtin [http](http://nodejs.org/api/http.html) and [https](http://nodejs.org/api/https.html) libraries, but providing an easy DSL for the most common kinds of interaction.\n \n If you need to control options on http and https more directly, you pass a second argument to `robot.http` that will be passed on to node-scoped-http-client which will be passed on to http and https:\n ", "changes": 2}], "1115": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ed23a4fafb5df5790c22736179ffea79f16dbc1b/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ed23a4fafb5df5790c22736179ffea79f16dbc1b/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=ed23a4fafb5df5790c22736179ffea79f16dbc1b", "filename": "src/listener.coffee", "sha": "f63f1ef4a96512c9077ac27c46c08ea99d4de8c1", "additions": 14, "patch": "@@ -104,7 +104,21 @@ class TextListener extends Listener\n         message.match @regex\n     super @robot, @matcher, @options, @callback\n \n+class RespondListener extends TextListener\n+  # RespondListeners receive every message from the chat source and decide if they\n+  # want to act on it.\n+  #\n+  # robot    - A Robot instance.\n+  # regex    - A RegExp for the message part that follows the robot's name/alias.\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n+  # callback - A Function that is triggered if the incoming message matches.\n+  constructor: (@robot, @originalRegex, @options, @callback) ->\n+    @regex = @robot.respondPattern(@originalRegex)\n+    super @robot, @regex, @options, @callback\n+\n module.exports = {\n   Listener\n   TextListener\n+  RespondListener\n }", "changes": 14}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/ed23a4fafb5df5790c22736179ffea79f16dbc1b/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ed23a4fafb5df5790c22736179ffea79f16dbc1b/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=ed23a4fafb5df5790c22736179ffea79f16dbc1b", "filename": "src/robot.coffee", "sha": "ad7603796309244cad38e755634b82cdc37e2e50", "additions": 20, "patch": "@@ -8,7 +8,7 @@ async          = require 'async'\n User = require './user'\n Brain = require './brain'\n Response = require './response'\n-{Listener,TextListener} = require './listener'\n+{Listener,TextListener,RespondListener} = require './listener'\n {EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n Middleware = require './middleware'\n \n@@ -112,7 +112,7 @@ class Robot\n   #\n   # Returns nothing.\n   respond: (regex, options, callback) ->\n-    @hear(@respondPattern(regex), options, callback)\n+    @listeners.push new RespondListener(@, regex, options, callback)\n \n   # Public: Build a regular expression that matches messages addressed\n   # directly to the robot\n@@ -148,6 +148,24 @@ class Robot\n \n     newRegex\n \n+  # Public: Updates the robot name and its listeners accordingly.\n+  #\n+  # newName - A String of the new robot name.\n+  #\n+  # Returns nothing.\n+  changeName: (newName) ->\n+    # Updates the name.\n+    @name = newName\n+\n+    # Reconstructs respond listeners:\n+    listeners = []\n+    for listener in @listeners\n+      if listener instanceof RespondListener\n+        listeners.push new RespondListener(@, listener.originalRegex, listener.options, listener.callback)\n+      else\n+        listeners.push listener\n+    @listeners = listeners\n+\n   # Public: Adds a Listener that triggers when anyone enters the room.\n   #\n   # options  - An Object of additional parameters keyed on extension name", "changes": 22}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/ed23a4fafb5df5790c22736179ffea79f16dbc1b/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ed23a4fafb5df5790c22736179ffea79f16dbc1b/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=ed23a4fafb5df5790c22736179ffea79f16dbc1b", "filename": "test/robot_test.coffee", "sha": "7eda666cf6a6037fa0fa5e5b306113210938b3fa", "additions": 31, "patch": "@@ -82,6 +82,20 @@ describe 'Robot', ->\n         httpClient = @robot.http('http://localhost', agent: agentB)\n         expect(httpClient.options.agent).to.equal(agentB)\n \n+    describe '#changeName', ->\n+      it 'updates the name', ->\n+        expect(@robot.name).to.equal('TestHubot')\n+        @robot.changeName 'Testbot'\n+        expect(@robot.name).to.equal('Testbot')\n+\n+      it 'updates listeners with the new name', ->\n+        @robot.respond /.*/, ->\n+        regex = @robot.listeners[0].regex.toString()\n+        expect(regex).to.equal('/^\\\\s*[@]?(?:TestHubot[:,]?|Hubot[:,]?)\\\\s*(?:.*)/')\n+        @robot.changeName 'Testbot'\n+        regex = @robot.listeners[0].regex.toString()\n+        expect(regex).to.equal('/^\\\\s*[@]?(?:Testbot[:,]?|Hubot[:,]?)\\\\s*(?:.*)/')\n+\n     describe '#respondPattern', ->\n       it 'matches messages starting with robot\\'s name', ->\n         testMessage = @robot.name + 'message123'\n@@ -155,10 +169,10 @@ describe 'Robot', ->\n         expect(@robot.listeners).to.have.length(1)\n \n     describe '#respond', ->\n-      it 'registers a new listener using hear', ->\n-        sinon.spy @robot, 'hear'\n-        @robot.respond /.*/, ->\n-        expect(@robot.hear).to.have.been.called\n+      it 'registers a new listener directly', ->\n+        expect(@robot.listeners).to.have.length(0)\n+        @robot.hear /.*/, ->\n+        expect(@robot.listeners).to.have.length(1)\n \n     describe '#enter', ->\n       it 'registers a new listener using listen', ->\n@@ -414,6 +428,19 @@ describe 'Robot', ->\n \n         expect(result).to.not.be.ok\n \n+    describe '#changeName', ->\n+      it 'still matches TextMessages addressed to the robot', ->\n+        callback = sinon.spy()\n+        testMessage = new TextMessage(@user, 'Testbot Message123')\n+        testRegex = /message123$/i\n+\n+        @robot.respond(testRegex, callback)\n+        @robot.changeName 'Testbot'\n+\n+        testListener = @robot.listeners[0]\n+        result = testListener.matcher(testMessage)\n+        expect(result).to.be.ok\n+\n     describe '#enter', ->\n       it 'matches EnterMessages', ->\n         callback = sinon.spy()", "changes": 35}], "1116": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/85f5b5706a75385a61fe084398c45e14d4ecb671/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/85f5b5706a75385a61fe084398c45e14d4ecb671/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=85f5b5706a75385a61fe084398c45e14d4ecb671", "filename": "docs/deploying/heroku.md", "sha": "c902588de0bcc235f3bfa7a9775782ed44385dd2", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/deploying/heroku/index.html\n layout: docs\n ---\n \n-If you've been following along with [Getting Started](../../index.md), it's time to deploy so you can use it beyond just your local machine.\n+If you've been following along with [Getting Started](../index.md), it's time to deploy so you can use it beyond just your local machine.\n [Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.\n \n Install the [Heroku Toolbelt](https://toolbelt.heroku.com/) to start, then follow their 'Getting Started' instructions, including logging in the first time:", "changes": 2}], "1119": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/ea6642a0d55d31f38a88946e33844b835c499106/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/ea6642a0d55d31f38a88946e33844b835c499106/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=ea6642a0d55d31f38a88946e33844b835c499106", "filename": "package.json", "sha": "23b71534169bd2c89e4d62cebdbeeac99e9997a9", "additions": 3, "patch": "@@ -20,7 +20,7 @@\n     \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n     \"connect-multiparty\": \"^1.2.5\",\n-    \"express\": \"3.18.1\",\n+    \"express\": \"^3.21.2\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",\n     \"scoped-http-client\": \"0.11.0\"\n@@ -31,8 +31,8 @@\n     \"mocha\": \"^2.1.0\",\n     \"mockery\": \"^1.4.0\",\n     \"sinon-chai\": \"^2.8.0\",\n-    \"sinon\":\"~1.17.0\",\n-    \"chai\":\"~2.1.0\"\n+    \"sinon\": \"~1.17.0\",\n+    \"chai\": \"~2.1.0\"\n   },\n   \"engines\": {\n     \"node\": \">= 0.8.x\",", "changes": 6}], "1120": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/db84cdd8092c82791dd142b01a626f6033f37505/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/db84cdd8092c82791dd142b01a626f6033f37505/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=db84cdd8092c82791dd142b01a626f6033f37505", "filename": "docs/adapters.md", "sha": "0766a5abe9a938f75ef8bbf1f9f726acccafc99a", "additions": 2, "patch": "@@ -18,7 +18,6 @@ Third-party adapters are available as `npm` packages. Here is a list of known\n adapters, but please [submit an issue](https://github.com/github/hubot/issues)\n to have yours added to the list:\n \n-* [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.\n \n * [AIM](https://github.com/shaundubuque/hubot-aim)\n * [ChatWork](https://github.com/akiomik/hubot-chatwork)\n@@ -34,8 +33,10 @@ to have yours added to the list:\n * [Jabbr](https://github.com/smoak/hubot-jabbr)\n * [Let's Chat](https://github.com/sdelements/hubot-lets-chat)\n * [Lingr](https://github.com/miyagawa/hubot-lingr)\n+* [Mattermost](https://github.com/renanvicente/hubot-mattermost)\n * [QQ](https://github.com/xhan/qqbot)\n * [Partychat](https://github.com/iangreenleaf/hubot-partychat-hooks)\n+* [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.\n * [Rocket.Chat](https://github.com/RocketChat/hubot-rocketchat)\n * [Slack](https://github.com/slackhq/hubot-slack)\n * [Skype](https://github.com/netpro2k/hubot-skype)", "changes": 3}], "1121": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/7e1bcfba63ef896c74ff3a38ab9b1612db610568/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/7e1bcfba63ef896c74ff3a38ab9b1612db610568/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=7e1bcfba63ef896c74ff3a38ab9b1612db610568", "filename": "CHANGELOG.md", "sha": "31a9498db0411e48255c90c22a01510decc32a3b", "additions": 42, "patch": "@@ -1,3 +1,45 @@\n+## [v2.18.0](https://github.com/github/hubot/tree/v2.18.0) (2016-01-19)\n+[Full Changelog](https://github.com/github/hubot/compare/v2.17.0...v2.18.0)\n+\n+**Implemented enhancements:**\n+\n+- Only coerce ids that are all digits into integers [\\#1052](https://github.com/github/hubot/pull/1052) ([technicalpickles](https://github.com/technicalpickles))\n+\n+\n+**Closed issues:**\n+\n+- Allow for non-integer user id in the shell adapter. [\\#1117](https://github.com/github/hubot/issues/1117)\n+- Markdown syntax in docs/adapters.md preventing update of hubot.github.com [\\#1100](https://github.com/github/hubot/issues/1100)\n+- Possible Error in Docs [\\#1096](https://github.com/github/hubot/issues/1096)\n+- Propose adding Hubot-Mattermost to list of Hubot adapters [\\#1089](https://github.com/github/hubot/issues/1089)\n+- bug\\(hubot@2.17.0\\): adapters don't run script [\\#1086](https://github.com/github/hubot/issues/1086)\n+- Depressing Pug Picture [\\#1084](https://github.com/github/hubot/issues/1084)\n+- Hubot - robot.http get method returns null body & res.  Suspecting hubot timing out [\\#1080](https://github.com/github/hubot/issues/1080)\n+- Steam + Hubot [\\#1076](https://github.com/github/hubot/issues/1076)\n+- Hubot won't start on Heroku because of node modules [\\#1071](https://github.com/github/hubot/issues/1071)\n+- Documentation 404 [\\#1064](https://github.com/github/hubot/issues/1064)\n+- Can't make HTTP requests [\\#1060](https://github.com/github/hubot/issues/1060)\n+- Define and document testing patterns for scripts [\\#985](https://github.com/github/hubot/issues/985)\n+\n+**Merged pull requests:**\n+\n+- Mattermost adapter [\\#1120](https://github.com/github/hubot/pull/1120) ([technicalpickles](https://github.com/technicalpickles))\n+- Upgrade express to v3.21.2 [\\#1119](https://github.com/github/hubot/pull/1119) ([sgerrand](https://github.com/sgerrand))\n+- Fixed link to getting started [\\#1116](https://github.com/github/hubot/pull/1116) ([jackmawer](https://github.com/jackmawer))\n+- Fix http and https documentation [\\#1114](https://github.com/github/hubot/pull/1114) ([technicalpickles](https://github.com/technicalpickles))\n+- \\[shell\\] don't color hubot responses green, to be more visible on light backgrounds [\\#1111](https://github.com/github/hubot/pull/1111) ([technicalpickles](https://g\n+ithub.com/technicalpickles))\n+- Determine adapterPath in robot.coffee, rather than bin/hubot [\\#1109](https://github.com/github/hubot/pull/1109) ([technicalpickles](https://github.com/technicalpickl\n+es))\n+- Updated copyright to 2016 [\\#1103](https://github.com/github/hubot/pull/1103) ([aqnouch](https://github.com/aqnouch))\n+- Update docs to reflect external scripts brain location [\\#1101](https://github.com/github/hubot/pull/1101) ([cycomachead](https://github.com/cycomachead))\n+- Added Twilio IP Messaging adapter to the list. [\\#1099](https://github.com/github/hubot/pull/1099) ([philnash](https://github.com/philnash))\n+- Add Skyweb to a list of adapters [\\#1097](https://github.com/github/hubot/pull/1097) ([EllisV](https://github.com/EllisV))\n+- Instructions for deploying hubot to IBM Bluemix [\\#1095](https://github.com/github/hubot/pull/1095) ([kauffecup](https://github.com/kauffecup))\n+- Adding documentation for testing Hubot scripts [\\#1094](https://github.com/github/hubot/pull/1094) ([mdelagrange](https://github.com/mdelagrange))\n+- Proxy instructions: typo + foolproof [\\#1092](https://github.com/github/hubot/pull/1092) ([jbick](https://github.com/jbick))\n+- Optionally use setImmediate instead of nextTick in middleware [\\#1081](https://github.com/github/hubot/pull/1081) ([bhuga](https://github.com/bhuga))\n+\n [v2.17.0](https://github.com/github/hubot/tree/v2.17.0)\n ========\n ", "changes": 42}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/7e1bcfba63ef896c74ff3a38ab9b1612db610568/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/7e1bcfba63ef896c74ff3a38ab9b1612db610568/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=7e1bcfba63ef896c74ff3a38ab9b1612db610568", "filename": "package.json", "sha": "46eb87d907b97642898a1b38a43e476380006c29", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.17.0\",\n+  \"version\": \"2.18.0\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "1122": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/efa0ae8d8cf7ee8e682c686097a352be2a4d5b5e/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/efa0ae8d8cf7ee8e682c686097a352be2a4d5b5e/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=efa0ae8d8cf7ee8e682c686097a352be2a4d5b5e", "filename": "docs/deploying/heroku.md", "sha": "64e26be9571e1698f6a4a697a88123de438e07cd", "additions": 1, "patch": "@@ -58,6 +58,6 @@ before:\n \n Some scripts needs Redis to work, Heroku offers an addon called [Redis Cloud](https://addons.heroku.com/rediscloud), which has a free plan. To use it:\n \n-    % heroku addons:add rediscloud\n+    % heroku addons:create rediscloud\n \n Free dynos on Heroku will [sleep after 30 minutes of inactivity](https://devcenter.heroku.com/articles/dyno-sleeping). That means your hubot would leave the chat room and only rejoin when it does get traffic. This is extremely inconvenient since most interaction is done through chat, and hubot has to be online and in the room to respond to messages. To get around this, you can use the [hubot-heroku-keepalive](https://github.com/hubot-scripts/hubot-heroku-keepalive) script, which will keep your free dyno alive for up to 18 hours/day. If you never want Hubot to sleep, you will need to [upgrade to Heroku's hobby plan](https://www.heroku.com/pricing).", "changes": 2}], "1123": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/adc4b71c9c1a41b89fa3f67f87beca39cd6f75f5/docs/deploying/azure.md", "blob_url": "https://github.com/hubotio/hubot/blob/adc4b71c9c1a41b89fa3f67f87beca39cd6f75f5/docs/deploying/azure.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/azure.md?ref=adc4b71c9c1a41b89fa3f67f87beca39cd6f75f5", "filename": "docs/deploying/azure.md", "sha": "3cefb71e2d804a3f9dd285d93bad2a81ab5f8c39", "additions": 2, "patch": "@@ -35,7 +35,7 @@ First, run the follow command to add `deploy.cmd` to your hubot directory. This\n Then, edit this file and look for the sections that give you steps 1, 2 and 3. You're going to add a 4th step:\n \n     :: 4. Create Hubot file with a coffee extension\n-    copy /Y \u201c%DEPLOYMENT_TARGET%\\node_modules\\hubot\\bin\\hubot\u201d \u201c%DEPLOYMENT_TARGET%\\node_modules\\hubot\\bin\\hubot.coffee\u201d\n+    copy /Y \"%DEPLOYMENT_TARGET%\\node_modules\\hubot\\bin\\hubot\" \"%DEPLOYMENT_TARGET%\\node_modules\\hubot\\bin\\hubot.coffee\"\n \n Now, create a new file in the base directory of hubot called `server.js` and put these two lines into it:\n \n@@ -60,7 +60,7 @@ Azure offers a marketplace where you can use the default heroku-redis-brain usin\n \n Then add the following line in `external-scripts.json` in the list with the other external scripts\n \n-    \"hubot-azure-scripts/brain/azure-blob-brain\"\n+    \"hubot-azure-scripts/brain/storage-blob-brain\"\n \n Finally, add two more environment variables to your website. You can do this either via the GUI or the following PowerShell commands.\n ", "changes": 4}], "1127": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/hook.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/hook.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/hook.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/hook.coffee", "sha": "30fb521ba1c3d9ed9cdfda8e73b551a9637f0448", "additions": 35, "patch": "@@ -0,0 +1,35 @@\n+class Hook\n+  constructor: (opts) ->\n+    @response = opts.response\n+    @robot    = opts.robot\n+    @listener = opts.listener\n+    @message  = opts.message\n+    @response ||= new @robot.Response(@robot, @message)\n+\n+    @reply    = opts.reply # An object like { text: \"string\" }\n+\n+    @hooks    = opts.hooks\n+    @callback = opts.callback\n+    @nextHook = -1\n+\n+  run: ->\n+    for hook in @hooks\n+      hook(@)\n+      return if @finished?\n+    @callback(@reply.text if @reply?)\n+\n+  finish: =>\n+    @finished = true\n+    if @reply?\n+      # We're processing a reply, not a listen or receive. The message has\n+      # been processed, so it's too late to finish() it. By not calling\n+      # @run() or @callback() we end processing and do not send the reply.\n+      # if they reply has been updated, we note that by returning the new value.\n+      @reply.text\n+    else\n+      @message.finish()\n+      @callback()\n+\n+module.exports = {\n+  Hook\n+}", "changes": 35}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/listener.coffee", "sha": "55724f96eacbffc251674f04a2e099c0764651a6", "additions": 4, "patch": "@@ -37,10 +37,13 @@ class Listener\n   # Returns a boolean of whether the matcher matched.\n   call: (message) ->\n     if match = @matcher message\n+\n       @robot.logger.debug \\\n         \"Message '#{message}' matched regex /#{inspect @regex}/\" if @regex\n \n-      @callback new @robot.Response(@robot, message, match)\n+      response = new @robot.Response(@robot, message, match)\n+\n+      @robot.runPrelistenHooks(this, response)\n       true\n     else\n       false", "changes": 5}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/response.coffee", "sha": "8ec29b6908d5359edf9757f9d7df503da7e045a0", "additions": 24, "patch": "@@ -19,7 +19,10 @@ class Response\n   #\n   # Returns nothing.\n   send: (strings...) ->\n-    @robot.adapter.send @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.send @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts an emote back to the chat source\n   #\n@@ -28,7 +31,10 @@ class Response\n   #\n   # Returns nothing.\n   emote: (strings...) ->\n-    @robot.adapter.emote @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.emote @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts a message mentioning the current user.\n   #\n@@ -37,7 +43,10 @@ class Response\n   #\n   # Returns nothing.\n   reply: (strings...) ->\n-    @robot.adapter.reply @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.reply @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts a topic changing message\n   #\n@@ -46,7 +55,10 @@ class Response\n   #\n   # Returns nothing.\n   topic: (strings...) ->\n-    @robot.adapter.topic @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.topic @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Play a sound in the chat source\n   #\n@@ -55,7 +67,10 @@ class Response\n   #\n   # Returns nothing\n   play: (strings...) ->\n-    @robot.adapter.play @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.play @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Posts a message in an unlogged room\n   #\n@@ -64,7 +79,10 @@ class Response\n   #\n   # Returns nothing\n   locked: (strings...) ->\n-    @robot.adapter.locked @envelope, strings...\n+    for string in strings\n+      done = (newText) =>\n+        @robot.adapter.locked @envelope, newText\n+      @robot.runPrereplyHooks this, string, done\n \n   # Public: Picks a random item from the given items.\n   #", "changes": 30}, {"status": "modified", "deletions": 23, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "src/robot.coffee", "sha": "7ba8ea97e1d3932d28cfe112e0c02d09e9270672", "additions": 93, "patch": "@@ -9,6 +9,7 @@ Brain = require './brain'\n Response = require './response'\n {Listener,TextListener} = require './listener'\n {EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n+{Hook} = require './hook'\n \n HUBOT_DEFAULT_ADAPTERS = [\n   'campfire'\n@@ -49,8 +50,10 @@ class Robot\n     @listeners = []\n     @logger    = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n     @pingIntervalId = null\n+    @hooks     = {}\n     @globalHttpOptions = {}\n \n+\n     @parseVersion()\n     if httpd\n       @setupExpress()\n@@ -214,17 +217,29 @@ class Robot\n   #\n   # Returns nothing.\n   receive: (message) ->\n+    curriedReceive = =>\n+      @receiveWithoutHooks(message)\n+    @runHooks 'prereceive', curriedReceive, message\n+\n+  # Private: receive a message, passing it to any inerested listeners. Does\n+  # not execute callbacks.\n+  #\n+  # message - A Message instance\n+  #\n+  # Returns nothing.\n+  receiveWithoutHooks: (message) ->\n     results = []\n     for listener in @listeners\n       try\n-        results.push listener.call(message)\n         break if message.done\n+        results.push listener.call(message)\n       catch error\n         @emit('error', error, new @Response(@, message, []))\n \n         false\n+\n     if message not instanceof CatchAllMessage and results.indexOf(true) is -1\n-      @receive new CatchAllMessage(message)\n+      @receiveWithoutHooks new CatchAllMessage(message)\n \n   # Public: Loads a file in path.\n   #\n@@ -416,26 +431,6 @@ class Robot\n         scriptDocumentation.commands.push cleanedLine\n         @commands.push cleanedLine\n \n-  # Public: A helper send function which delegates to the adapter's send\n-  # function.\n-  #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  send: (user, strings...) ->\n-    @adapter.send user, strings...\n-\n-  # Public: A helper reply function which delegates to the adapter's reply\n-  # function.\n-  #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  reply: (user, strings...) ->\n-    @adapter.reply user, strings...\n-\n   # Public: A helper send function to message a room that the robot is in.\n   #\n   # room    - String designating the room to message.\n@@ -526,6 +521,82 @@ class Robot\n     HttpClient.create(url, @extend({}, @globalHttpOptions, options))\n       .header('User-Agent', \"Hubot/#{@version}\")\n \n+  # Public. Adds a prereceive callback hook to this robot.\n+  #\n+  #   cb  - A callback function which accepts a Hook object.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  prereceive: (cb) ->\n+    @hooks['prereceive'] ||= []\n+    @hooks['prereceive'].push cb\n+\n+  # Public. Adds a prelisten callback hook to this robot.\n+  #\n+  #   cb  - A callback function which accepts a Hook object.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  prelisten: (cb) ->\n+    @hooks['prelisten'] ||= []\n+    @hooks['prelisten'].push cb\n+\n+  # Protected. For use by Listener to run prelisten callbacks after a match\n+  # is found.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  runPrelistenHooks: (listener, response) ->\n+    done = ->\n+      listener.callback(response) unless response.envelope.message.done\n+    @runHooks 'prelisten', done, response.envelope.message, response, listener\n+\n+  # Public. Adds a prereply callback hook to this robot.\n+  #\n+  #   cb  - A callback function which accepts a Hook object.\n+  #\n+  # See also Hook\n+  # Returns nothing\n+  prereply: (cb) ->\n+    @hooks['prereply'] ||= []\n+    @hooks['prereply'].push cb\n+\n+  # Protected. For use by Response to run hooks before replying.\n+  #\n+  # TODO: we should have a listener available here, but there's no way to get\n+  # to it. Responses belong to listeners but don't have a way to get to them,\n+  # and we should change that API.\n+  runPrereplyHooks: (response, string, cb) ->\n+    @runHooks 'prereply', cb, response.envelope.message, response, response.listener, { text: string }\n+\n+  # Private. Run the hooks of a given name\n+  #\n+  #  name     - 'prereceive'\n+  #  response - The response object\n+  #  listener - The matching listener, if any\n+  #  message  - A message that hubot is trying to send, if any\n+  #\n+  # Each hook must call hook.next() or hook.done(). Hook.next() continues\n+  # processing and hook.done() aborts the message. If a response message\n+  # exists, hook.done() prevents it from being sent.\n+  #\n+  # Returns nothing.\n+  runHooks: (name, callback, message, response, listener, reply) ->\n+    hooks = @hooks[name]\n+    if hooks?.length > 0\n+      opts =\n+        hooks:    hooks\n+        callback: callback\n+        response: response\n+        message:  message\n+        listener: listener\n+        robot:    this\n+        reply:    reply\n+      hook = new Hook(opts)\n+      hook.run()\n+    else\n+      callback()\n+\n   # Private: Extend obj with objects passed as additional args.\n   #\n   # Returns the original object with updated changes.\n@@ -534,5 +605,4 @@ class Robot\n       obj[key] = value for own key, value of source\n     obj\n \n-\n module.exports = Robot", "changes": 116}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/listener_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/listener_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "test/listener_test.coffee", "sha": "5601bd819435aecf061aed59a0e37523c69267be", "additions": 8, "patch": "@@ -17,6 +17,8 @@ describe 'Listener', ->\n     @robot =\n       # Why is this part of the Robot object??\n       Response: Response\n+      runPrelistenHooks: (listener, response) ->\n+        listener.callback(response)\n \n     # Test user\n     @user = new User\n@@ -74,7 +76,7 @@ describe 'Listener', ->\n           result = testListener.call testMessage\n \n           expect(result).to.be.ok\n-          \n+\n \n         it 'calls the listener callback with a Response that wraps the Message', (done) ->\n           testMatcher = sinon.stub().returns(true)\n@@ -117,21 +119,21 @@ describe 'Listener', ->\n           testMessage = new TextMessage(@user, 'test')\n           testMessage.match = sinon.stub().returns(true)\n           testRegex = /test/\n- \n+\n           testListener = new TextListener(@robot, testRegex, callback)\n           result = testListener.matcher(testMessage)\n- \n+\n           expect(result).to.be.ok\n           expect(testMessage.match).to.have.been.calledWith(testRegex)\n- \n+\n         it 'does not match EnterMessages', ->\n           callback = sinon.spy()\n           testMessage = new EnterMessage(@user)\n           testMessage.match = sinon.stub().returns(true)\n           testRegex = /test/\n- \n+\n           testListener = new TextListener(@robot, testRegex, callback)\n           result = testListener.matcher(testMessage)\n- \n+\n           expect(result).to.not.be.ok\n           expect(testMessage.match).to.not.have.been.called", "changes": 14}, {"status": "modified", "deletions": 13, "raw_url": "https://github.com/hubotio/hubot/raw/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=51eb5b6ee4ffe5cf5a09e38474f02f4234f9c113", "filename": "test/robot_test.coffee", "sha": "ae140c937634e0caaf27d1881ad307d922d80aa2", "additions": 86, "patch": "@@ -136,20 +136,11 @@ describe 'Robot', ->\n         # original message\n \n         testMessage = new TextMessage(@user, 'message123')\n-        @robot.listeners = []\n-\n-        # Replace @robot.receive so we can catch when the functions recurses\n-        oldReceive = @robot.receive\n-        @robot.receive = (message) ->\n-          expect(message).to.be.instanceof(CatchAllMessage)\n-          expect(message.message).to.be.equal(testMessage)\n-        sinon.spy(@robot, 'receive')\n-\n-        # Call the original receive method that we want to test\n-        oldReceive.call @robot, testMessage\n+        listener = sinon.spy()\n+        @robot.catchAll listener\n+        @robot.receive testMessage\n+        expect(listener).to.have.been.called\n \n-        # Ensure the function recursed\n-        expect(@robot.receive).to.have.been.called\n \n       it 'does not trigger a CatchAllMessage if a listener matches', ->\n         testMessage = new TextMessage(@user, 'message123')\n@@ -472,3 +463,85 @@ describe 'Robot', ->\n         done()\n \n       @robot.receive testMessage\n+\n+    it 'passes on a message that a prereceive hook allows', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      @robot.prereceive (hook) ->\n+        hook.message.addedData = \"added data\"\n+      @robot.hear /^message123$/, (response) ->\n+        expect(response.message.addedData).to.equal(\"added data\")\n+        done()\n+      @robot.receive testMessage\n+\n+    it 'provides a response object so replies can be sent before a match', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      replier = @robot.adapter.reply = sinon.spy()\n+      listenerCallback = sinon.spy()\n+      @robot.hear /^message123$/, listenerCallback\n+      @robot.prereceive (hook) ->\n+        hook.response.reply \"Listen bud, here's why I won't let you do that.\"\n+        hook.finish()\n+      @robot.receive testMessage\n+      expect(listenerCallback).to.not.have.been.called\n+      expect(replier).to.have.been.calledOnce\n+      done()\n+\n+    it 'does not pass on a message that a prereceive hook finishes', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      listenerCallback = sinon.spy()\n+      @robot.hear /^message123$/, listenerCallback\n+      @robot.prereceive (hook) ->\n+        hook.finish()\n+      @robot.receive testMessage\n+      expect(listenerCallback).to.not.have.been.calledOnce\n+      done()\n+\n+    it 'runs a prelistener hook before each listener', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      @robot.hear /^message123$/, (response) ->\n+        expect(response.message.addedData).to.equal(\"added data\")\n+        done()\n+      listener = @robot.listeners[0]\n+      @robot.prelisten (hook) ->\n+        hook.message.addedData = \"added data\"\n+        expect(hook.listener).to.equal(listener)\n+        expect(hook.response.message).to.equal(testMessage)\n+      @robot.receive testMessage\n+\n+    it 'stops processing if a prelisten hook finishes', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      listener = sinon.spy()\n+      @robot.prelisten (hook) ->\n+        hook.finish()\n+      @robot.hear /^message123$/, listener\n+      @robot.receive testMessage\n+      expect(listener).to.not.have.been.calledOnce\n+      done()\n+\n+    it 'runs a prereply hook before each replied message', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      sender = @robot.adapter.send = sinon.spy()\n+      replier = @robot.adapter.reply = sinon.spy()\n+      @robot.hear /^message123$/, (response) ->\n+        response.send \"this sounds awesome\"\n+        response.send \"dump passwords to IRC lol\"\n+        response.reply \"more passwords, seriously?\", \"this is fine though\"\n+        done()\n+      @robot.prereply (hook) ->\n+        if hook.reply.text.match(/passwords/)\n+          hook.finish()\n+      @robot.receive testMessage\n+      expect(replier).to.have.been.calledOnce\n+      expect(sender).to.have.been.calledOnce\n+\n+    it 'allows changing the outgoing message', (done) ->\n+      testMessage = new TextMessage(@user, 'message123')\n+      sender = @robot.adapter.send = sinon.spy()\n+      @robot.hear /^message123$/, (response) ->\n+        response.send \"dump passwords to IRC lol\"\n+        done()\n+      @robot.prereply (hook) ->\n+        if hook.reply.text.match(/passwords/)\n+          hook.reply.text = \"Sorry meatbag, no passwords.\"\n+      @robot.receive testMessage\n+      expect(sender.getCall(0).args[1]).to.equal(\"Sorry meatbag, no passwords.\")", "changes": 99}], "1128": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1e154d18aeacbf83e8cf9859ef125f14c08c255b/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1e154d18aeacbf83e8cf9859ef125f14c08c255b/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=1e154d18aeacbf83e8cf9859ef125f14c08c255b", "filename": "src/robot.coffee", "sha": "3594ab0ca06040bba918f43e1ee3e0e2cfa0d855", "additions": 4, "patch": "@@ -354,6 +354,10 @@ class Robot\n       try\n         script = require(full)\n \n+        # Support Babel 6's `export default function`\n+        if typeof script.default is 'function'\n+          script = script.default\n+\n         if typeof script is 'function'\n           script @\n           @parseHelp Path.join(path, file)", "changes": 4}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/1e154d18aeacbf83e8cf9859ef125f14c08c255b/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/1e154d18aeacbf83e8cf9859ef125f14c08c255b/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=1e154d18aeacbf83e8cf9859ef125f14c08c255b", "filename": "test/robot_test.coffee", "sha": "dc19bebdd736cf1f5a280adba75a7bbe80fd80de", "additions": 16, "patch": "@@ -341,6 +341,22 @@ describe 'Robot', ->\n           @robot.loadFile('./scripts', 'test-script.coffee')\n           expect(@robot.parseHelp).to.have.been.calledWith('scripts/test-script.coffee')\n \n+      describe \"script generated using Babel 6's export default\", ->\n+        beforeEach ->\n+          module = require 'module'\n+\n+          @script = default: sinon.spy((robot) ->)\n+          @sandbox.stub(module, '_load').returns(@script)\n+          @sandbox.stub @robot, 'parseHelp'\n+\n+        it 'should call the script with the Robot', ->\n+          @robot.loadFile('./scripts', 'test-script.coffee')\n+          expect(@script.default).to.have.been.calledWith(@robot)\n+\n+        it 'should parse the script documentation', ->\n+          @robot.loadFile('./scripts', 'test-script.coffee')\n+          expect(@robot.parseHelp).to.have.been.calledWith('scripts/test-script.coffee')\n+\n       describe 'non-Function script', ->\n         beforeEach ->\n           module = require 'module'", "changes": 16}], "1130": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/503d2b519231300493a1b4e2efa88b920ff5a773/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/503d2b519231300493a1b4e2efa88b920ff5a773/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=503d2b519231300493a1b4e2efa88b920ff5a773", "filename": "docs/index.md", "sha": "2ab3a484bad0ccd6d1e8128e88da11df210b87ad", "additions": 1, "patch": "@@ -67,7 +67,7 @@ is mostly useful for development. Make note of  `Hubot>`; this is the name your\n     hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n     hubot mustache me <url> - Adds a mustache to the specified URL.\n     hubot ping - Reply with pong\n-    hubot pronounce <phrase> in <language> - Provides pronounciation of <phrase> (<language> is optional)\n+    hubot pronounce <phrase> in <language> - Provides pronunciation of <phrase> (<language> is optional)\n     hubot pug bomb N - get N pugs\n     hubot pug me - Receive a pug\n     hubot the rules - Make sure hubot still knows the rules.", "changes": 2}], "1133": [{"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/b3bd613eea449b3da97898eeb59675a1de59f236/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b3bd613eea449b3da97898eeb59675a1de59f236/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=b3bd613eea449b3da97898eeb59675a1de59f236", "filename": "src/robot.coffee", "sha": "0233c72360c2fac8d81e0f10fce109a549102099", "additions": 10, "patch": "@@ -534,22 +534,22 @@ class Robot\n   # Public: A helper send function which delegates to the adapter's send\n   # function.\n   #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n+  # envelope - A Object with message, room and user details.\n+  # strings  - One or more Strings for each message to send.\n   #\n   # Returns nothing.\n-  send: (user, strings...) ->\n-    @adapter.send user, strings...\n+  send: (envelope, strings...) ->\n+    @adapter.send envelope, strings...\n \n   # Public: A helper reply function which delegates to the adapter's reply\n   # function.\n   #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n+  # envelope - A Object with message, room and user details.\n+  # strings  - One or more Strings for each message to send.\n   #\n   # Returns nothing.\n-  reply: (user, strings...) ->\n-    @adapter.reply user, strings...\n+  reply: (envelope, strings...) ->\n+    @adapter.reply envelope, strings...\n \n   # Public: A helper send function to message a room that the robot is in.\n   #\n@@ -558,8 +558,8 @@ class Robot\n   #\n   # Returns nothing.\n   messageRoom: (room, strings...) ->\n-    user = { room: room }\n-    @adapter.send user, strings...\n+    envelope = { room: room }\n+    @adapter.send envelope, strings...\n \n   # Public: A wrapper around the EventEmitter API to make usage\n   # semantically better.", "changes": 20}], "1134": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ed4ae6024f6501dcc7db486f821b43b3dcb60096/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ed4ae6024f6501dcc7db486f821b43b3dcb60096/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=ed4ae6024f6501dcc7db486f821b43b3dcb60096", "filename": "index.coffee", "sha": "f7cf08ab7c9e4b26127aef59beb3b360696720d2", "additions": 2, "patch": "@@ -1,6 +1,7 @@\n User                                                                 = require './src/user'\n Brain                                                                = require './src/brain'\n Robot                                                                = require './src/robot'\n+Basebot                                                              = require './src/basebot'\n Adapter                                                              = require './src/adapter'\n Response                                                             = require './src/response'\n {Listener,TextListener}                                              = require './src/listener'\n@@ -9,6 +10,7 @@ Response                                                             = require '\n module.exports = {\n   User\n   Brain\n+  Basebot\n   Robot\n   Adapter\n   Response", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ed4ae6024f6501dcc7db486f821b43b3dcb60096/src/basebot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ed4ae6024f6501dcc7db486f821b43b3dcb60096/src/basebot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/basebot.coffee?ref=ed4ae6024f6501dcc7db486f821b43b3dcb60096", "filename": "src/basebot.coffee", "sha": "00ce73d9d4257212acf493604c9b1239e1c84d64", "additions": 434, "patch": "@@ -0,0 +1,434 @@\n+Log            = require 'log'\n+{EventEmitter} = require 'events'\n+async          = require 'async'\n+\n+User = require './user'\n+Brain = require './brain'\n+Response = require './response'\n+{Listener,TextListener} = require './listener'\n+{EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n+Middleware = require './middleware'\n+\n+class Basebot\n+  # Robots receive messages from a chat source (Campfire, irc, etc), and\n+  # dispatch them to matching listeners.\n+  #\n+  # adapter     - A String of the adapter name.\n+  # name        - A String of the robot name, defaults to Hubot.\n+  #\n+  # Returns nothing.\n+  constructor: (name = 'Hubot', alias = false) ->\n+    @name       = name\n+    @events     = new EventEmitter\n+    @brain      = new Brain @\n+    @alias      = alias\n+    @adapter    = null\n+    @Response   = Response\n+    @commands   = []\n+    @listeners  = []\n+    @middleware =\n+      listener: new Middleware(@)\n+      response: new Middleware(@)\n+      receive:  new Middleware(@)\n+    @logger     = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n+    @pingIntervalId = null\n+    @globalHttpOptions = {}\n+\n+    @setupRouter(@nullRouter())\n+    @setupHTTP(@nullHTTP())\n+\n+    @errorHandlers = []\n+\n+    @on 'error', (err, res) =>\n+      @invokeErrorHandlers(err, res)\n+    @onUncaughtException = (err) =>\n+      @emit 'error', err\n+    process.on 'uncaughtException', @onUncaughtException\n+\n+  loadScript: (script) ->\n+    script @\n+\n+  # Public: Adds a custom Listener with the provided matcher, options, and\n+  # callback\n+  #\n+  # matcher  - A Function that determines whether to call the callback.\n+  #            Expected to return a truthy value if the callback should be\n+  #            executed.\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n+  # callback - A Function that is called with a Response object if the\n+  #            matcher function returns true.\n+  #\n+  # Returns nothing.\n+  listen: (matcher, options, callback) ->\n+    @listeners.push new Listener(@, matcher, options, callback)\n+\n+  # Public: Adds a Listener that attempts to match incoming messages based on\n+  # a Regex.\n+  #\n+  # regex    - A Regex that determines if the callback should be called.\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  hear: (regex, options, callback) ->\n+    @listeners.push new TextListener(@, regex, options, callback)\n+\n+  # Public: Adds a Listener that attempts to match incoming messages directed\n+  # at the robot based on a Regex. All regexes treat patterns like they begin\n+  # with a '^'\n+  #\n+  # regex    - A Regex that determines if the callback should be called.\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  respond: (regex, options, callback) ->\n+    @hear(@respondPattern(regex), options, callback)\n+\n+  # Public: Build a regular expression that matches messages addressed\n+  # directly to the robot\n+  #\n+  # regex - A RegExp for the message part that follows the robot's name/alias\n+  #\n+  # Returns RegExp.\n+  respondPattern: (regex) ->\n+    re = regex.toString().split('/')\n+    re.shift()\n+    modifiers = re.pop()\n+\n+    if re[0] and re[0][0] is '^'\n+      @logger.warning \\\n+        \"Anchors don't work well with respond, perhaps you want to use 'hear'\"\n+      @logger.warning \"The regex in question was #{regex.toString()}\"\n+\n+    pattern = re.join('/')\n+    name = @name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+\n+    if @alias\n+      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+      [a,b] = if name.length > alias.length then [name,alias] else [alias,name]\n+      newRegex = new RegExp(\n+        \"^\\\\s*[@]?(?:#{a}[:,]?|#{b}[:,]?)\\\\s*(?:#{pattern})\"\n+        modifiers\n+      )\n+    else\n+      newRegex = new RegExp(\n+        \"^\\\\s*[@]?#{name}[:,]?\\\\s*(?:#{pattern})\",\n+        modifiers\n+      )\n+\n+    newRegex\n+\n+  # Public: Adds a Listener that triggers when anyone enters the room.\n+  #\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  enter: (options, callback) ->\n+    @listen(\n+      ((msg) -> msg instanceof EnterMessage)\n+      options\n+      callback\n+    )\n+\n+  # Public: Adds a Listener that triggers when anyone leaves the room.\n+  #\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  leave: (options, callback) ->\n+    @listen(\n+      ((msg) -> msg instanceof LeaveMessage)\n+      options\n+      callback\n+    )\n+\n+  # Public: Adds a Listener that triggers when anyone changes the topic.\n+  #\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  topic: (options, callback) ->\n+    @listen(\n+      ((msg) -> msg instanceof TopicMessage)\n+      options\n+      callback\n+    )\n+\n+  # Public: Adds an error handler when an uncaught exception or user emitted\n+  # error event occurs.\n+  #\n+  # callback - A Function that is called with the error object.\n+  #\n+  # Returns nothing.\n+  error: (callback) ->\n+    @errorHandlers.push callback\n+\n+  # Calls and passes any registered error handlers for unhandled exceptions or\n+  # user emitted error events.\n+  #\n+  # err - An Error object.\n+  # res - An optional Response object that generated the error\n+  #\n+  # Returns nothing.\n+  invokeErrorHandlers: (err, res) ->\n+    @logger.error err.stack\n+    for errorHandler in @errorHandlers\n+     try\n+       errorHandler(err, res)\n+     catch errErr\n+       @logger.error \"while invoking error handler: #{errErr}\\n#{errErr.stack}\"\n+\n+  # Public: Adds a Listener that triggers when no other text matchers match.\n+  #\n+  # options  - An Object of additional parameters keyed on extension name\n+  #            (optional).\n+  # callback - A Function that is called with a Response object.\n+  #\n+  # Returns nothing.\n+  catchAll: (options, callback) ->\n+    # `options` is optional; need to isolate the real callback before\n+    # wrapping it with logic below\n+    if not callback?\n+      callback = options\n+      options = {}\n+\n+    @listen(\n+      ((msg) -> msg instanceof CatchAllMessage)\n+      options\n+      ((msg) -> msg.message = msg.message.message; callback msg)\n+    )\n+\n+  # Public: Registers new middleware for execution after matching but before\n+  # Listener callbacks\n+  #\n+  # middleware - A function that determines whether or not a given matching\n+  #              Listener should be executed. The function is called with\n+  #              (context, next, done). If execution should\n+  #              continue (next middleware, Listener callback), the middleware\n+  #              should call the 'next' function with 'done' as an argument.\n+  #              If not, the middleware should call the 'done' function with\n+  #              no arguments.\n+  #\n+  # Returns nothing.\n+  listenerMiddleware: (middleware) ->\n+    @middleware.listener.register middleware\n+    return undefined\n+\n+  # Public: Registers new middleware for execution as a response to any\n+  # message is being sent.\n+  #\n+  # middleware - A function that examines an outgoing message and can modify\n+  #              it or prevent its sending. The function is called with\n+  #              (context, next, done). If execution should continue,\n+  #              the middleware should call next(done). If execution should stop,\n+  #              the middleware should call done(). To modify the outgoing message,\n+  #              set context.string to a new message.\n+  #\n+  # Returns nothing.\n+  responseMiddleware: (middleware) ->\n+    @middleware.response.register middleware\n+    return undefined\n+\n+  # Public: Registers new middleware for execution before matching\n+  #\n+  # middleware - A function that determines whether or not listeners should be\n+  #              checked. The function is called with (context, next, done). If\n+  #              ext, next, done). If execution should continue to the next\n+  #              middleware or matching phase, it should call the 'next'\n+  #              function with 'done' as an argument. If not, the middleware\n+  #              should call the 'done' function with no arguments.\n+  #\n+  # Returns nothing.\n+  receiveMiddleware: (middleware) ->\n+    @middleware.receive.register middleware\n+    return undefined\n+\n+  # Public: Passes the given message to any interested Listeners after running\n+  #         receive middleware.\n+  #\n+  # message - A Message instance. Listeners can flag this message as 'done' to\n+  #           prevent further execution.\n+  #\n+  # cb - Optional callback that is called when message processing is complete\n+  #\n+  # Returns nothing.\n+  # Returns before executing callback\n+  receive: (message, cb) ->\n+    # When everything is finished (down the middleware stack and back up),\n+    # pass control back to the robot\n+    @middleware.receive.execute(\n+      {response: new Response(this, message)}\n+      @processListeners.bind this\n+      cb\n+    )\n+\n+  # Private: Passes the given message to any interested Listeners.\n+  #\n+  # message - A Message instance. Listeners can flag this message as 'done' to\n+  #           prevent further execution.\n+  #\n+  # done - Optional callback that is called when message processing is complete\n+  #\n+  # Returns nothing.\n+  # Returns before executing callback\n+  processListeners: (context, done) ->\n+    # Try executing all registered Listeners in order of registration\n+    # and return after message is done being processed\n+    anyListenersExecuted = false\n+    async.detectSeries(\n+      @listeners,\n+      (listener, cb) =>\n+        try\n+          listener.call context.response.message, @middleware.listener, (listenerExecuted) ->\n+            anyListenersExecuted = anyListenersExecuted || listenerExecuted\n+            # Defer to the event loop at least after every listener so the\n+            # stack doesn't get too big\n+            Middleware.ticker () ->\n+              # Stop processing when message.done == true\n+              cb(context.response.message.done)\n+        catch err\n+          @emit('error', err, new @Response(@, context.response.message, []))\n+          # Continue to next listener when there is an error\n+          cb(false)\n+      ,\n+      # Ignore the result ( == the listener that set message.done = true)\n+      (_) =>\n+        # If no registered Listener matched the message\n+        if context.response.message not instanceof CatchAllMessage and not anyListenersExecuted\n+          @logger.debug 'No listeners executed; falling back to catch-all'\n+          @receive new CatchAllMessage(context.response.message), done\n+        else\n+          process.nextTick done if done?\n+    )\n+    return undefined\n+\n+  setupRouter: (router) ->\n+    @router = router\n+\n+  # Setup an empty router object\n+  #\n+  # returns nothing\n+  nullRouter: ->\n+    msg = \"A script has tried registering a HTTP route while the HTTP server is disabled with --disabled-httpd.\"\n+\n+    return {\n+      get: ()=> @logger.warning msg\n+      post: ()=> @logger.warning msg\n+      put: ()=> @logger.warning msg\n+      delete: ()=> @logger.warning msg\n+    }\n+\n+  setupHTTP: (httpClient) ->\n+    @http = httpClient\n+\n+  nullHTTP: ->\n+    msg = \"A script has tried making a HTTP request while the HTTP client has not been initialized.\"\n+    return -> {\n+      query: ()=> @logger.warning msg; ->\n+      header: ()=> @logger.warning msg; ->\n+      headers: ()=> @logger.warning msg; ->\n+      get: ()=> @logger.warning msg; ->\n+      post: ()=> @logger.warning msg; ->\n+      put: ()=> @logger.warning msg; ->\n+      delete: ()=> @logger.warning msg; ->\n+    }\n+\n+\n+  # Load the adapter Hubot is going to use.\n+  #\n+  # path    - A String of the path to adapter if local.\n+  # adapter - A String of the adapter name to use.\n+  #\n+  # Returns nothing.\n+  loadAdapter: (adapter) ->\n+    @logger.debug \"Loading adapter #{adapter}\"\n+    @adapter = adapter.use @\n+\n+\n+  # Public: A helper send function which delegates to the adapter's send\n+  # function.\n+  #\n+  # user    - A User instance.\n+  # strings - One or more Strings for each message to send.\n+  #\n+  # Returns nothing.\n+  send: (user, strings...) ->\n+    @adapter.send user, strings...\n+\n+  # Public: A helper reply function which delegates to the adapter's reply\n+  # function.\n+  #\n+  # user    - A User instance.\n+  # strings - One or more Strings for each message to send.\n+  #\n+  # Returns nothing.\n+  reply: (user, strings...) ->\n+    @adapter.reply user, strings...\n+\n+  # Public: A helper send function to message a room that the robot is in.\n+  #\n+  # room    - String designating the room to message.\n+  # strings - One or more Strings for each message to send.\n+  #\n+  # Returns nothing.\n+  messageRoom: (room, strings...) ->\n+    user = { room: room }\n+    @adapter.send user, strings...\n+\n+  # Public: A wrapper around the EventEmitter API to make usage\n+  # semantically better.\n+  #\n+  # event    - The event name.\n+  # listener - A Function that is called with the event parameter\n+  #            when event happens.\n+  #\n+  # Returns nothing.\n+  on: (event, args...) ->\n+    @events.on event, args...\n+\n+  # Public: A wrapper around the EventEmitter API to make usage\n+  # semantically better.\n+  #\n+  # event   - The event name.\n+  # args...  - Arguments emitted by the event\n+  #\n+  # Returns nothing.\n+  emit: (event, args...) ->\n+    @events.emit event, args...\n+\n+  # Public: Kick off the event loop for the adapter\n+  #\n+  # Returns nothing.\n+  run: ->\n+    @emit \"running\"\n+    @adapter.run()\n+\n+  # Public: Gracefully shutdown the robot process\n+  #\n+  # Returns nothing.\n+  shutdown: ->\n+    clearInterval @pingIntervalId if @pingIntervalId?\n+    process.removeListener 'uncaughtException', @onUncaughtException\n+    @adapter.close()\n+    @brain.close()\n+\n+  # Private: Extend obj with objects passed as additional args.\n+  #\n+  # Returns the original object with updated changes.\n+  extend: (obj, sources...) ->\n+    for source in sources\n+      obj[key] = value for own key, value of source\n+    obj\n+\n+\n+module.exports = Basebot", "changes": 434}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ed4ae6024f6501dcc7db486f821b43b3dcb60096/src/express.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ed4ae6024f6501dcc7db486f821b43b3dcb60096/src/express.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/express.coffee?ref=ed4ae6024f6501dcc7db486f821b43b3dcb60096", "filename": "src/express.coffee", "sha": "64a1f1f48267baefc47f2d74a109f9a75dc5bea7", "additions": 43, "patch": "@@ -0,0 +1,43 @@\n+express = require 'express'\n+multipart = require 'connect-multiparty'\n+\n+module.exports = (robot) ->\n+  user    = process.env.EXPRESS_USER\n+  pass    = process.env.EXPRESS_PASSWORD\n+  stat    = process.env.EXPRESS_STATIC\n+  port    = process.env.EXPRESS_PORT or process.env.PORT or 8080\n+  address = process.env.EXPRESS_BIND_ADDRESS or process.env.BIND_ADDRESS or '0.0.0.0'\n+\n+  app = express()\n+\n+  app.use (req, res, next) =>\n+    res.setHeader \"X-Powered-By\", \"hubot/#{robot.name}\"\n+    next()\n+\n+  app.use express.basicAuth user, pass if user and pass\n+  app.use express.query()\n+\n+  app.use express.json()\n+  app.use express.urlencoded()\n+  # replacement for deprecated express.multipart/connect.multipart\n+  # limit to 100mb, as per the old behavior\n+  app.use multipart(maxFilesSize: 100 * 1024 * 1024)\n+\n+  app.use express.static stat if stat\n+\n+  try\n+    robot.server = app.listen(port, address)\n+  catch err\n+    robot.logger.error \"Error trying to start HTTP server: #{err}\\n#{err.stack}\"\n+    process.exit(1)\n+\n+  herokuUrl = process.env.HEROKU_URL\n+\n+  if herokuUrl\n+    herokuUrl += '/' unless /\\/$/.test herokuUrl\n+    robot.pingIntervalId = setInterval =>\n+      HttpClient.create(\"#{herokuUrl}hubot/ping\").post() (err, res, body) =>\n+        robot.logger.info 'keep alive ping!'\n+    , 5 * 60 * 1000\n+\n+  app", "changes": 43}, {"status": "modified", "deletions": 479, "raw_url": "https://github.com/hubotio/hubot/raw/ed4ae6024f6501dcc7db486f821b43b3dcb60096/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ed4ae6024f6501dcc7db486f821b43b3dcb60096/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=ed4ae6024f6501dcc7db486f821b43b3dcb60096", "filename": "src/robot.coffee", "sha": "ffc44e91bcb085c7e84494c387d1a98550290abf", "additions": 26, "patch": "@@ -1,16 +1,7 @@\n Fs             = require 'fs'\n-Log            = require 'log'\n Path           = require 'path'\n-HttpClient     = require 'scoped-http-client'\n-{EventEmitter} = require 'events'\n-async          = require 'async'\n \n-User = require './user'\n-Brain = require './brain'\n-Response = require './response'\n-{Listener,TextListener} = require './listener'\n-{EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n-Middleware = require './middleware'\n+Basebot = require './basebot'\n \n HUBOT_DEFAULT_ADAPTERS = [\n   'campfire'\n@@ -30,316 +21,30 @@ HUBOT_DOCUMENTATION_SECTIONS = [\n   'urls'\n ]\n \n-class Robot\n-  # Robots receive messages from a chat source (Campfire, irc, etc), and\n-  # dispatch them to matching listeners.\n+class Robot extends Basebot\n+  # Robot extends Basebot and provides autoloading of scripts and adapters for\n+  # ease of use.\n   #\n   # adapterPath -  A String of the path to built-in adapters (defaults to src/adapters)\n-  # adapter     - A String of the adapter name.\n+  # adapterName     - A String of the adapter name.\n   # httpd       - A Boolean whether to enable the HTTP daemon.\n   # name        - A String of the robot name, defaults to Hubot.\n   #\n   # Returns nothing.\n-  constructor: (adapterPath, adapter, httpd, name = 'Hubot', alias = false) ->\n+  constructor: (adapterPath, adapterName, httpd, name = 'Hubot', alias = false) ->\n     @adapterPath ?= Path.join __dirname, \"adapters\"\n+    @adapterName = adapterName\n+    super name, alias\n \n-    @name       = name\n-    @events     = new EventEmitter\n-    @brain      = new Brain @\n-    @alias      = alias\n-    @adapter    = null\n-    @Response   = Response\n-    @commands   = []\n-    @listeners  = []\n-    @middleware =\n-      listener: new Middleware(@)\n-      response: new Middleware(@)\n-      receive:  new Middleware(@)\n-    @logger     = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n-    @pingIntervalId = null\n-    @globalHttpOptions = {}\n+    adapter = @loadAdapterFile @adapterName\n+    @adapter = adapter.use @\n \n-    @parseVersion()\n     if httpd\n       @setupExpress()\n-    else\n-      @setupNullRouter()\n-\n-    @loadAdapter adapter\n-\n-    @adapterName   = adapter\n-    @errorHandlers = []\n-\n-    @on 'error', (err, res) =>\n-      @invokeErrorHandlers(err, res)\n-    @onUncaughtException = (err) =>\n-      @emit 'error', err\n-    process.on 'uncaughtException', @onUncaughtException\n-\n-  # Public: Adds a custom Listener with the provided matcher, options, and\n-  # callback\n-  #\n-  # matcher  - A Function that determines whether to call the callback.\n-  #            Expected to return a truthy value if the callback should be\n-  #            executed.\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object if the\n-  #            matcher function returns true.\n-  #\n-  # Returns nothing.\n-  listen: (matcher, options, callback) ->\n-    @listeners.push new Listener(@, matcher, options, callback)\n-\n-  # Public: Adds a Listener that attempts to match incoming messages based on\n-  # a Regex.\n-  #\n-  # regex    - A Regex that determines if the callback should be called.\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  hear: (regex, options, callback) ->\n-    @listeners.push new TextListener(@, regex, options, callback)\n \n-  # Public: Adds a Listener that attempts to match incoming messages directed\n-  # at the robot based on a Regex. All regexes treat patterns like they begin\n-  # with a '^'\n-  #\n-  # regex    - A Regex that determines if the callback should be called.\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  respond: (regex, options, callback) ->\n-    @hear(@respondPattern(regex), options, callback)\n-\n-  # Public: Build a regular expression that matches messages addressed\n-  # directly to the robot\n-  #\n-  # regex - A RegExp for the message part that follows the robot's name/alias\n-  #\n-  # Returns RegExp.\n-  respondPattern: (regex) ->\n-    re = regex.toString().split('/')\n-    re.shift()\n-    modifiers = re.pop()\n-\n-    if re[0] and re[0][0] is '^'\n-      @logger.warning \\\n-        \"Anchors don't work well with respond, perhaps you want to use 'hear'\"\n-      @logger.warning \"The regex in question was #{regex.toString()}\"\n-\n-    pattern = re.join('/')\n-    name = @name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n-\n-    if @alias\n-      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n-      [a,b] = if name.length > alias.length then [name,alias] else [alias,name]\n-      newRegex = new RegExp(\n-        \"^\\\\s*[@]?(?:#{a}[:,]?|#{b}[:,]?)\\\\s*(?:#{pattern})\"\n-        modifiers\n-      )\n-    else\n-      newRegex = new RegExp(\n-        \"^\\\\s*[@]?#{name}[:,]?\\\\s*(?:#{pattern})\",\n-        modifiers\n-      )\n-\n-    newRegex\n-\n-  # Public: Adds a Listener that triggers when anyone enters the room.\n-  #\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  enter: (options, callback) ->\n-    @listen(\n-      ((msg) -> msg instanceof EnterMessage)\n-      options\n-      callback\n-    )\n-\n-  # Public: Adds a Listener that triggers when anyone leaves the room.\n-  #\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  leave: (options, callback) ->\n-    @listen(\n-      ((msg) -> msg instanceof LeaveMessage)\n-      options\n-      callback\n-    )\n-\n-  # Public: Adds a Listener that triggers when anyone changes the topic.\n-  #\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  topic: (options, callback) ->\n-    @listen(\n-      ((msg) -> msg instanceof TopicMessage)\n-      options\n-      callback\n-    )\n-\n-  # Public: Adds an error handler when an uncaught exception or user emitted\n-  # error event occurs.\n-  #\n-  # callback - A Function that is called with the error object.\n-  #\n-  # Returns nothing.\n-  error: (callback) ->\n-    @errorHandlers.push callback\n-\n-  # Calls and passes any registered error handlers for unhandled exceptions or\n-  # user emitted error events.\n-  #\n-  # err - An Error object.\n-  # res - An optional Response object that generated the error\n-  #\n-  # Returns nothing.\n-  invokeErrorHandlers: (err, res) ->\n-    @logger.error err.stack\n-    for errorHandler in @errorHandlers\n-     try\n-       errorHandler(err, res)\n-     catch errErr\n-       @logger.error \"while invoking error handler: #{errErr}\\n#{errErr.stack}\"\n-\n-  # Public: Adds a Listener that triggers when no other text matchers match.\n-  #\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  catchAll: (options, callback) ->\n-    # `options` is optional; need to isolate the real callback before\n-    # wrapping it with logic below\n-    if not callback?\n-      callback = options\n-      options = {}\n-\n-    @listen(\n-      ((msg) -> msg instanceof CatchAllMessage)\n-      options\n-      ((msg) -> msg.message = msg.message.message; callback msg)\n-    )\n-\n-  # Public: Registers new middleware for execution after matching but before\n-  # Listener callbacks\n-  #\n-  # middleware - A function that determines whether or not a given matching\n-  #              Listener should be executed. The function is called with\n-  #              (context, next, done). If execution should\n-  #              continue (next middleware, Listener callback), the middleware\n-  #              should call the 'next' function with 'done' as an argument.\n-  #              If not, the middleware should call the 'done' function with\n-  #              no arguments.\n-  #\n-  # Returns nothing.\n-  listenerMiddleware: (middleware) ->\n-    @middleware.listener.register middleware\n-    return undefined\n-\n-  # Public: Registers new middleware for execution as a response to any\n-  # message is being sent.\n-  #\n-  # middleware - A function that examines an outgoing message and can modify\n-  #              it or prevent its sending. The function is called with\n-  #              (context, next, done). If execution should continue,\n-  #              the middleware should call next(done). If execution should stop,\n-  #              the middleware should call done(). To modify the outgoing message,\n-  #              set context.string to a new message.\n-  #\n-  # Returns nothing.\n-  responseMiddleware: (middleware) ->\n-    @middleware.response.register middleware\n-    return undefined\n-\n-  # Public: Registers new middleware for execution before matching\n-  #\n-  # middleware - A function that determines whether or not listeners should be\n-  #              checked. The function is called with (context, next, done). If\n-  #              ext, next, done). If execution should continue to the next\n-  #              middleware or matching phase, it should call the 'next'\n-  #              function with 'done' as an argument. If not, the middleware\n-  #              should call the 'done' function with no arguments.\n-  #\n-  # Returns nothing.\n-  receiveMiddleware: (middleware) ->\n-    @middleware.receive.register middleware\n-    return undefined\n-\n-  # Public: Passes the given message to any interested Listeners after running\n-  #         receive middleware.\n-  #\n-  # message - A Message instance. Listeners can flag this message as 'done' to\n-  #           prevent further execution.\n-  #\n-  # cb - Optional callback that is called when message processing is complete\n-  #\n-  # Returns nothing.\n-  # Returns before executing callback\n-  receive: (message, cb) ->\n-    # When everything is finished (down the middleware stack and back up),\n-    # pass control back to the robot\n-    @middleware.receive.execute(\n-      {response: new Response(this, message)}\n-      @processListeners.bind this\n-      cb\n-    )\n-\n-  # Private: Passes the given message to any interested Listeners.\n-  #\n-  # message - A Message instance. Listeners can flag this message as 'done' to\n-  #           prevent further execution.\n-  #\n-  # done - Optional callback that is called when message processing is complete\n-  #\n-  # Returns nothing.\n-  # Returns before executing callback\n-  processListeners: (context, done) ->\n-    # Try executing all registered Listeners in order of registration\n-    # and return after message is done being processed\n-    anyListenersExecuted = false\n-    async.detectSeries(\n-      @listeners,\n-      (listener, cb) =>\n-        try\n-          listener.call context.response.message, @middleware.listener, (listenerExecuted) ->\n-            anyListenersExecuted = anyListenersExecuted || listenerExecuted\n-            # Defer to the event loop at least after every listener so the\n-            # stack doesn't get too big\n-            Middleware.ticker () ->\n-              # Stop processing when message.done == true\n-              cb(context.response.message.done)\n-        catch err\n-          @emit('error', err, new @Response(@, context.response.message, []))\n-          # Continue to next listener when there is an error\n-          cb(false)\n-      ,\n-      # Ignore the result ( == the listener that set message.done = true)\n-      (_) =>\n-        # If no registered Listener matched the message\n-        if context.response.message not instanceof CatchAllMessage and not anyListenersExecuted\n-          @logger.debug 'No listeners executed; falling back to catch-all'\n-          @receive new CatchAllMessage(context.response.message), done\n-        else\n-          process.nextTick done if done?\n-    )\n-    return undefined\n+    @setupScopedHTTPClient()\n \n+    @parseVersion()\n \n   # Public: Loads a file in path.\n   #\n@@ -406,71 +111,13 @@ class Robot\n       @logger.error \"Error loading scripts from npm package - #{err.stack}\"\n       process.exit(1)\n \n-  # Setup the Express server's defaults.\n-  #\n-  # Returns nothing.\n-  setupExpress: ->\n-    user    = process.env.EXPRESS_USER\n-    pass    = process.env.EXPRESS_PASSWORD\n-    stat    = process.env.EXPRESS_STATIC\n-    port    = process.env.EXPRESS_PORT or process.env.PORT or 8080\n-    address = process.env.EXPRESS_BIND_ADDRESS or process.env.BIND_ADDRESS or '0.0.0.0'\n-\n-    express = require 'express'\n-    multipart = require 'connect-multiparty'\n-\n-    app = express()\n-\n-    app.use (req, res, next) =>\n-      res.setHeader \"X-Powered-By\", \"hubot/#{@name}\"\n-      next()\n-\n-    app.use express.basicAuth user, pass if user and pass\n-    app.use express.query()\n-\n-    app.use express.json()\n-    app.use express.urlencoded()\n-    # replacement for deprecated express.multipart/connect.multipart\n-    # limit to 100mb, as per the old behavior\n-    app.use multipart(maxFilesSize: 100 * 1024 * 1024)\n-\n-    app.use express.static stat if stat\n-\n-    try\n-      @server = app.listen(port, address)\n-      @router = app\n-    catch err\n-      @logger.error \"Error trying to start HTTP server: #{err}\\n#{err.stack}\"\n-      process.exit(1)\n-\n-    herokuUrl = process.env.HEROKU_URL\n-\n-    if herokuUrl\n-      herokuUrl += '/' unless /\\/$/.test herokuUrl\n-      @pingIntervalId = setInterval =>\n-        HttpClient.create(\"#{herokuUrl}hubot/ping\").post() (err, res, body) =>\n-          @logger.info 'keep alive ping!'\n-      , 5 * 60 * 1000\n-\n-  # Setup an empty router object\n-  #\n-  # returns nothing\n-  setupNullRouter: ->\n-    msg = \"A script has tried registering a HTTP route while the HTTP server is disabled with --disabled-httpd.\"\n-    @router =\n-      get: ()=> @logger.warning msg\n-      post: ()=> @logger.warning msg\n-      put: ()=> @logger.warning msg\n-      delete: ()=> @logger.warning msg\n-\n-\n   # Load the adapter Hubot is going to use.\n   #\n   # path    - A String of the path to adapter if local.\n   # adapter - A String of the adapter name to use.\n   #\n   # Returns nothing.\n-  loadAdapter: (adapter) ->\n+  loadAdapterFile: (adapter) ->\n     @logger.debug \"Loading adapter #{adapter}\"\n \n     try\n@@ -479,11 +126,23 @@ class Robot\n       else\n         \"hubot-#{adapter}\"\n \n-      @adapter = require(path).use @\n+      return require(path)\n     catch err\n       @logger.error \"Cannot load adapter #{adapter} - #{err}\"\n       process.exit(1)\n \n+  # Setup the Express server's defaults.\n+  #\n+  # Returns nothing.\n+  setupExpress: ->\n+    router = require('./express') @\n+    @setupRouter router\n+\n+  setupScopedHTTPClient: ->\n+    client = require('./scopedHTTPClient') @\n+    @setupHTTP client\n+\n+\n   # Public: Help Commands for Running Scripts.\n   #\n   # Returns an Array of help commands for running scripts.\n@@ -531,123 +190,11 @@ class Robot\n         scriptDocumentation.commands.push cleanedLine\n         @commands.push cleanedLine\n \n-  # Public: A helper send function which delegates to the adapter's send\n-  # function.\n-  #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  send: (user, strings...) ->\n-    @adapter.send user, strings...\n-\n-  # Public: A helper reply function which delegates to the adapter's reply\n-  # function.\n-  #\n-  # user    - A User instance.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  reply: (user, strings...) ->\n-    @adapter.reply user, strings...\n-\n-  # Public: A helper send function to message a room that the robot is in.\n-  #\n-  # room    - String designating the room to message.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  messageRoom: (room, strings...) ->\n-    user = { room: room }\n-    @adapter.send user, strings...\n-\n-  # Public: A wrapper around the EventEmitter API to make usage\n-  # semantically better.\n-  #\n-  # event    - The event name.\n-  # listener - A Function that is called with the event parameter\n-  #            when event happens.\n-  #\n-  # Returns nothing.\n-  on: (event, args...) ->\n-    @events.on event, args...\n-\n-  # Public: A wrapper around the EventEmitter API to make usage\n-  # semantically better.\n-  #\n-  # event   - The event name.\n-  # args...  - Arguments emitted by the event\n-  #\n-  # Returns nothing.\n-  emit: (event, args...) ->\n-    @events.emit event, args...\n-\n-  # Public: Kick off the event loop for the adapter\n-  #\n-  # Returns nothing.\n-  run: ->\n-    @emit \"running\"\n-    @adapter.run()\n-\n-  # Public: Gracefully shutdown the robot process\n-  #\n-  # Returns nothing.\n-  shutdown: ->\n-    clearInterval @pingIntervalId if @pingIntervalId?\n-    process.removeListener 'uncaughtException', @onUncaughtException\n-    @adapter.close()\n-    @brain.close()\n-\n   # Public: The version of Hubot from npm\n   #\n   # Returns a String of the version number.\n   parseVersion: ->\n     pkg = require Path.join __dirname, '..', 'package.json'\n     @version = pkg.version\n \n-  # Public: Creates a scoped http client with chainable methods for\n-  # modifying the request. This doesn't actually make a request though.\n-  # Once your request is assembled, you can call `get()`/`post()`/etc to\n-  # send the request.\n-  #\n-  # url - String URL to access.\n-  # options - Optional options to pass on to the client\n-  #\n-  # Examples:\n-  #\n-  #     robot.http(\"http://example.com\")\n-  #       # set a single header\n-  #       .header('Authorization', 'bearer abcdef')\n-  #\n-  #       # set multiple headers\n-  #       .headers(Authorization: 'bearer abcdef', Accept: 'application/json')\n-  #\n-  #       # add URI query parameters\n-  #       .query(a: 1, b: 'foo & bar')\n-  #\n-  #       # make the actual request\n-  #       .get() (err, res, body) ->\n-  #         console.log body\n-  #\n-  #       # or, you can POST data\n-  #       .post(data) (err, res, body) ->\n-  #         console.log body\n-  #\n-  #    # Can also set options\n-  #    robot.http(\"https://example.com\", {rejectUnauthorized: false})\n-  #\n-  # Returns a ScopedClient instance.\n-  http: (url, options) ->\n-    HttpClient.create(url, @extend({}, @globalHttpOptions, options))\n-      .header('User-Agent', \"Hubot/#{@version}\")\n-\n-  # Private: Extend obj with objects passed as additional args.\n-  #\n-  # Returns the original object with updated changes.\n-  extend: (obj, sources...) ->\n-    for source in sources\n-      obj[key] = value for own key, value of source\n-    obj\n-\n-\n module.exports = Robot", "changes": 505}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ed4ae6024f6501dcc7db486f821b43b3dcb60096/src/scopedHTTPClient.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ed4ae6024f6501dcc7db486f821b43b3dcb60096/src/scopedHTTPClient.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/scopedHTTPClient.coffee?ref=ed4ae6024f6501dcc7db486f821b43b3dcb60096", "filename": "src/scopedHTTPClient.coffee", "sha": "6b38b6315fe58de22ab127e8ac033bab162ac238", "additions": 38, "patch": "@@ -0,0 +1,38 @@\n+HttpClient = require 'scoped-http-client'\n+\n+module.exports = (robot) ->\n+  # Public: Creates a scoped http client with chainable methods for\n+  # modifying the request. This doesn't actually make a request though.\n+  # Once your request is assembled, you can call `get()`/`post()`/etc to\n+  # send the request.\n+  #\n+  # url - String URL to access.\n+  # options - Optional options to pass on to the client\n+  #\n+  # Examples:\n+  #\n+  #     robot.http(\"http://example.com\")\n+  #       # set a single header\n+  #       .header('Authorization', 'bearer abcdef')\n+  #\n+  #       # set multiple headers\n+  #       .headers(Authorization: 'bearer abcdef', Accept: 'application/json')\n+  #\n+  #       # add URI query parameters\n+  #       .query(a: 1, b: 'foo & bar')\n+  #\n+  #       # make the actual request\n+  #       .get() (err, res, body) ->\n+  #         console.log body\n+  #\n+  #       # or, you can POST data\n+  #       .post(data) (err, res, body) ->\n+  #         console.log body\n+  #\n+  #    # Can also set options\n+  #    robot.http(\"https://example.com\", {rejectUnauthorized: false})\n+  #\n+  # Returns a ScopedClient instance.\n+  return (url, options) ->\n+    HttpClient.create(url, @extend({}, @globalHttpOptions, options))\n+      .header('User-Agent', \"Hubot/#{robot.version}\")", "changes": 38}], "1135": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/69034ae725bdc4511f53e0588415aee96cc33f1f/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/69034ae725bdc4511f53e0588415aee96cc33f1f/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=69034ae725bdc4511f53e0588415aee96cc33f1f", "filename": "docs/scripting.md", "sha": "ddd06219cf69f358e97b930f2e28b64a8a876bb4", "additions": 1, "patch": "@@ -622,7 +622,7 @@ You now have a hubot script repository that's ready to roll! Feel free to crack\n \n You'll probably want to write some unit tests for your new script.  A sample test script is written to\n `test/awesome-script-test.coffee`, which you can run with `grunt`.  For more information on tests,\n-see **Testing Hubot Scripts**.\n+see the [Testing Hubot Scripts](#testing-hubot-scripts) section.\n \n # Listener Metadata\n ", "changes": 2}], "1136": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/fe566a58704423659e7062c89f1a2c718197e1da/docs/deploying/windows.md", "blob_url": "https://github.com/hubotio/hubot/blob/fe566a58704423659e7062c89f1a2c718197e1da/docs/deploying/windows.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/windows.md?ref=fe566a58704423659e7062c89f1a2c718197e1da", "filename": "docs/deploying/windows.md", "sha": "d4ced3e954f21b94ceaa62468d5391d85495acfa", "additions": 24, "patch": "@@ -2,21 +2,39 @@\n permalink: /docs/deploying/windows/index.html\n layout: docs\n ---\n-\n-Hasn't been fully tested - YMMV\n-\n There are 4 primary steps to deploying and running hubot on a Windows machine:\n \n   * node and npm\n   * a way to get source code updated on the server\n   * setting up environment variables for hubot\n   * a way to start hubot, start it up if it crashes, and restart it when code updates\n \n+# PowerShell Module\n+\n+A PowerShell Module called `PoshHubot` is available which will allow you to install and configure Hubot for Windows with a few commands.\n+\n+If you have PowerShell v5 installed you can simple run the following command to install the module:\n+\n+```\n+Install-Module -Name PoshHubot\n+```\n+Details about using Hubot on Windows with PowerShell can be found in this blog post: https://hodgkins.io/chatops-on-windows-with-hubot-and-powershell\n+\n+# Manually\n+Hasn't been fully tested - YMMV\n ## node and npm\n \n-To start, your windows server will need node and npm.\n-The best way to do this is with [chocolatey](http://chocolatey.org) using the [nodejs.install](http://chocolatey.org/packages/nodejs.install) package.\n-I've found that sometimes the system path variable is not correctly set; ensure you can run node/npm from the command line. If needed set the PATH variable with \"setx PATH \\\"%PATH%;C:\\Program Files\\nodejs\\\" \"\n+To start, your Windows server will need node and npm.\n+\n+### Use Chocolatey to Install Node.js\n+One way to easily install node.js is with [chocolatey](http://chocolatey.org) using the [nodejs.install](http://chocolatey.org/packages/nodejs.install) package.\n+\n+Once installed, ensure you can run node/npm from the command line. If needed, set the PATH variable with\n+```\n+SET PATH=%PATH%;C:\\Program Files\\Nodejs\n+```\n+\n+### Install Node.js Manually\n \n Your other option is to install directly from [NodeJS](https://nodejs.org/) and run the current download (v0.12.4 as of this documentation). This should set your PATH variables for you.\n ", "changes": 30}], "1142": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/4dfc66291f0a62206b674867e55e1608fa2691c8/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/4dfc66291f0a62206b674867e55e1608fa2691c8/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=4dfc66291f0a62206b674867e55e1608fa2691c8", "filename": "docs/scripting.md", "sha": "784ba67fa69255b6d9712b11342c3148f70f955a", "additions": 1, "patch": "@@ -278,7 +278,7 @@ module.exports = (robot) ->\n   )\n ```\n \n-See [the design patterns document](patterns.md) for examples of complex matchers.\n+See [the design patterns document](https://hubot.github.com/docs/patterns/#dynamic-matching-of-messages) for examples of complex matchers.\n \n ## Environment variables\n ", "changes": 2}], "1147": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/79871bf5f14392561083b360fefb6ad91d164e12/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/79871bf5f14392561083b360fefb6ad91d164e12/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=79871bf5f14392561083b360fefb6ad91d164e12", "filename": "docs/adapters.md", "sha": "b85c443825ceee27b09dc4890bc892229861157c", "additions": 1, "patch": "@@ -50,6 +50,7 @@ to have yours added to the list:\n * [Typetalk](https://github.com/nulab/hubot-typetalk)\n * [VictorOps](https://github.com/victorops/hubot-victorops)\n * [Visual Studio Online](https://github.com/scrumdod/hubot-VSOnline)\n+* [Weixin](https://github.com/KasperDeng/Hubot-WeChat)\n * [XMPP](https://github.com/markstory/hubot-xmpp)\n * [Yammer](https://github.com/athieriot/hubot-yammer)\n ", "changes": 1}], "1148": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a96877ebf28e596f1abd6d734e7c73e04d3fe41e/docs/deploying/azure.md", "blob_url": "https://github.com/hubotio/hubot/blob/a96877ebf28e596f1abd6d734e7c73e04d3fe41e/docs/deploying/azure.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/azure.md?ref=a96877ebf28e596f1abd6d734e7c73e04d3fe41e", "filename": "docs/deploying/azure.md", "sha": "344f1801beb3de85fa453516b4ae01b6b9e2c0e0", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/deploying/azure/index.html\n layout: docs\n ---\n \n-If you've been following along with [Getting Started](../README.md), it's time to deploy so you can use it beyond just your local machine.\n+If you've been following along with [Getting Started](../index.md), it's time to deploy so you can use it beyond just your local machine.\n [Azure](http://azure.microsoft.com/) is a way to deploy hubot as an alternative to [Heroku](/docs/deploying/heroku.md).\n \n You will need to install the azure-cli via npm after you have follow the initial instructions for your hubot.", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a96877ebf28e596f1abd6d734e7c73e04d3fe41e/docs/deploying/bluemix.md", "blob_url": "https://github.com/hubotio/hubot/blob/a96877ebf28e596f1abd6d734e7c73e04d3fe41e/docs/deploying/bluemix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/bluemix.md?ref=a96877ebf28e596f1abd6d734e7c73e04d3fe41e", "filename": "docs/deploying/bluemix.md", "sha": "54d3a458075b226dce748e4b945443705f50c067", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/deploying/bluemix/index.html\n layout: docs\n ---\n \n-If you've been following along with [Getting Started](../README.md), it's time\n+If you've been following along with [Getting Started](../index.md), it's time\n to deploy so you can use it beyond just your local machine.\n [IBM Bluemix](http://bluemix.net) is a way to deploy hubot as an alternative to\n [Heroku](/docs/deploying/heroku.md). It is built on the open-source project", "changes": 2}], "1149": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/63d9dc6ba83f2141dce6439f45545c0aaef9dc34/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/63d9dc6ba83f2141dce6439f45545c0aaef9dc34/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=63d9dc6ba83f2141dce6439f45545c0aaef9dc34", "filename": "docs/adapters.md", "sha": "a63e3f16c7a028955471038948ab52b16423b0e4", "additions": 1, "patch": "@@ -34,6 +34,7 @@ to have yours added to the list:\n * [Let's Chat](https://github.com/sdelements/hubot-lets-chat)\n * [Lingr](https://github.com/miyagawa/hubot-lingr)\n * [Mattermost](https://github.com/renanvicente/hubot-mattermost)\n+* [Mattermost](https://github.com/loafoe/hubot-matteruser) - websocket\n * [QQ](https://github.com/xhan/qqbot)\n * [Partychat](https://github.com/iangreenleaf/hubot-partychat-hooks)\n * [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.", "changes": 1}], "1150": [{"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/b32fbbeb60876b9a32df60e4ad9ab54b678fd6b5/test/adapter_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/b32fbbeb60876b9a32df60e4ad9ab54b678fd6b5/test/adapter_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/adapter_test.coffee?ref=b32fbbeb60876b9a32df60e4ad9ab54b678fd6b5", "filename": "test/adapter_test.coffee", "sha": "18b48679f90e64781a57ae7071481106c6de5b3b", "additions": 1, "patch": "@@ -42,13 +42,6 @@ describe 'Adapter', ->\n       it 'does nothing', ->\n         @adapter.topic({}, 'nothing')\n \n-    describe 'topic', ->\n-      it 'is a function', ->\n-        expect(@adapter.topic).to.be.a('function')\n-\n-      it 'does nothing', ->\n-        @adapter.topic({}, 'nothing')\n-\n     describe 'play', ->\n       it 'is a function', ->\n         expect(@adapter.play).to.be.a('function')\n@@ -75,7 +68,7 @@ describe 'Adapter', ->\n     @robot.receive = sinon.spy()\n     @adapter = new Adapter(@robot)\n     @message = sinon.spy()\n-    \n+\n     @adapter.receive(@message)\n \n     expect(@robot.receive).to.have.been.calledWith(@message)", "changes": 9}], "1151": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3c1c46f43198306ceec9362132f1648b82a5cb86/docs/implementation.md", "blob_url": "https://github.com/hubotio/hubot/blob/3c1c46f43198306ceec9362132f1648b82a5cb86/docs/implementation.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/implementation.md?ref=3c1c46f43198306ceec9362132f1648b82a5cb86", "filename": "docs/implementation.md", "sha": "0efbcee0e24066295cb17ecbb44e3dcce6572a02", "additions": 11, "patch": "@@ -32,3 +32,14 @@ There are two primary entry points for middleware:\n \n 1. `robot.listenerMiddleware` - registers a new piece of middleware in a global array\n 2. `middleware.execute` - executes all registered middleware in order\n+\n+## Persistence\n+\n+Hubot has a memory exposed as the `robot.brain` object that can be used to store and retrieve data.\n+Furthermore, Hubot scripts exist to enable persistence across Hubot restarts.\n+`hubot-redis-brain` is such a script and uses a backend Redis server.\n+\n+By default, the brain contains a list of all users seen by Hubot.\n+Therefore, without persistence across restarts, the brain will contain the list of users encountered so far, during the current run of Hubot.\n+On the other hand, with persistence across restarts, the brain will contain all users encountered by Hubot during all of its runs.\n+This list of users can be accessed through `hubot.brain.users()` and other utility methods.", "changes": 11}], "1154": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/de0f646bc55997db1507b6ce1d0a89d9684d9aa3/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/de0f646bc55997db1507b6ce1d0a89d9684d9aa3/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=de0f646bc55997db1507b6ce1d0a89d9684d9aa3", "filename": "bin/hubot", "sha": "54ef18e9405004e4eaf197c21bc8a0e3a6d5bb3a", "additions": 1, "patch": "@@ -7,6 +7,7 @@ Hubot    = require '..'\n Fs       = require 'fs'\n OptParse = require 'optparse'\n Path     = require 'path'\n+env      = require('dotenv').config({silent: true}); \n \n Switches = [\n   [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/de0f646bc55997db1507b6ce1d0a89d9684d9aa3/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/de0f646bc55997db1507b6ce1d0a89d9684d9aa3/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=de0f646bc55997db1507b6ce1d0a89d9684d9aa3", "filename": "package.json", "sha": "b4ae41e32d5183d621ab6dcfd7a431beabb30f29", "additions": 1, "patch": "@@ -20,6 +20,7 @@\n     \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n     \"connect-multiparty\": \"^1.2.5\",\n+    \"dotenv\": \"^2.0.0\",\n     \"express\": \"^3.21.2\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",", "changes": 1}], "1155": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4067de4a627f676f762793d3a6a9d655d4b3f9ce/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/4067de4a627f676f762793d3a6a9d655d4b3f9ce/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=4067de4a627f676f762793d3a6a9d655d4b3f9ce", "filename": "docs/patterns.md", "sha": "a9be69e38985b0167a46b42f6ccaafe1d603b689", "additions": 128, "patch": "@@ -142,3 +142,131 @@ Example access policy:\n * The front desk cannot cut releases nor deploy services\n \n Complex policies like this are currently best implemented in code directly, though there is [ongoing work](https://github.com/michaelansel/hubot-rbac) to build a generalized framework for access management.\n+\n+## Middleware Examples\n+\n+Middleware is often used for authentication and authorization.  There are three kinds of middleware:\n+- **Receive**: executed for every message prior to testing for listener matches\n+- **Listener**: executed for every listener that matches a message before executing the listener callback\n+- **Response**: executed for every message hubot attempts to send, regardless of reason or source\n+\n+Middleware is asynchronous by default, needing to call either `middleware.next()` to continue processing or `middleware.done()` to stop processing. There are Sync helper functions for each type to simplify creating simple middleware units.\n+\n+**All of these are just examples. None of them are secure. Don't use them.**\n+\n+Here's a simple example to blacklist users at the listener level.\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.listenerMiddleware (middleware) ->\n+    if middleware.listener.options.id is \"banned.command\"\n+      if middleware.response.message.user.id is \"whitelistedUser\"\n+        # User is allowed access to this command\n+        middleware.next()\n+      else\n+        # Restricted command, but user isn't in whitelist\n+        middleware.response.reply \"I'm sorry, @#{middleware.response.message.user.name}, but you don't have access to do that.\"\n+        middleware.done()\n+    else\n+      # This is not a restricted command; allow everyone\n+      middleware.next()\n+```\n+\n+Here's a synchronous version of the same example. As soon as this function returns,\n+the listener will run (or the next middleware, if any). If `middleware.done()` is\n+called, further processing will stop.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.listenerMiddlewareSync (middleware) ->\n+    if middleware.listener.options.id is \"banned.command\" and\n+       middleware.response.message.user.id isnt \"whitelistedUser\"\n+      middleware.response.reply \"I'm sorry, @#{middleware.response.message.user.name}, but you don't have access to do that.\"\n+      false\n+    else\n+      true\n+```\n+\n+Here's a similar synchronous example, blacklisting particular users from *all* commands:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.receiveMiddlewareSync (middleware) ->\n+    if middleware.response.message.user.id is \"blacklistedUser\"\n+      context.response.reply \"I'm sorry, @#{middleware.response.message.user.name}, but you don't have access to do that.\"\n+      false\n+    else\n+      true\n+```\n+\n+Here's an example that will prevent sensitive information from being sent under any circumstances:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.responseMiddleware (middleware) ->\n+    # Modify the message and then allow it\n+    middleware.envelope.text = middleware.envelope.text.replace(/passwords lol/, '[REDACTED]')\n+    middleware.next()\n+```\n+\n+You could also block the message entirely:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.responseMiddleware (middleware) ->\n+    if middleware.envelope.text.match(/passwords lol/)\n+      # Block the message\n+      middleware.done()\n+    else\n+      # Permit the message\n+      middleware.next()\n+```\n+\n+Here's a more complicated example, using an external auth system to\n+authenticate users for particular listeners:\n+\n+```coffeescript\n+module.exports = (robot) ->\n+  robot.listenerMiddleware (middleware) ->\n+    robot.auth middleware.response.user, middleware.listener.options, (auth) ->\n+      if auth.allowed()\n+        middleware.next()\n+      else\n+        middleware.response.reply \"I'm sorry, @#{middleware.response.message.user.name}, but you don't have access to do that.\"\n+        middleware.done()\n+```\n+\n+Lastly, here's a version of the two-person rule, requiring a second person\n+to validate commands tagged as requiring it.\n+\n+```coffeescript\n+crypto = require('crypto')\n+module.exports = (robot) ->\n+  randomIdentifier = (len = 12) ->\n+    crypto.randomBytes(Math.ceil(len * 3 / 4)).toString('base64').slice(0, len)\n+\n+  robot.commandsAwaitingVerification = {}\n+\n+  robot.listenerMiddlewareSync (middleware) ->\n+    if middleware.listener.options.two_person_protected?\n+      if middleware.response.message.verified?\n+        middleware.response.send \"Who am I to argue with *two* fleshy constructs?\"\n+        true\n+      else\n+        middleware.message.code = randomIdentifier()\n+        robot.commandsAwaitingVerification[middleware.message.code] = middleware.message\n+        middleware.response.reply \"A bold strategy. One of your meatbag friends needs to verify it with /verify #{msg.code}\"\n+        false\n+\n+  robot.receiveMiddleware (middleware) ->\n+    if match = middleware.message.text.match(/verify (\\S+)/)\n+      code = match[1]\n+      if old_message = robot.commandsAwaitingVerification[code]\n+        if middleware.message.user.id == old_message.middleware.user.id\n+          middleware.response.reply \"You can't verify your own commands, silly meatbag.\"\n+          middleware.done()\n+        else\n+          # stop further processing on the verification and send the old message through the pipeline again.\n+          middleware.done()\n+          old_message.verified = true\n+          robot.receive(old_message)\n+```", "changes": 128}], "1161": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c28ed1cb925d542a7d8306996c571d3ac03ad132/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/c28ed1cb925d542a7d8306996c571d3ac03ad132/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=c28ed1cb925d542a7d8306996c571d3ac03ad132", "filename": "docs/scripting.md", "sha": "b108aee23ff7a81c61a155d890239359e091e8bd", "additions": 26, "patch": "@@ -75,6 +75,32 @@ The `robot.hear /badgers/` callback sends a message exactly as specified regardl\n \n If a user Dave says \"HAL: open the pod bay doors\", `robot.respond /open the pod bay doors/i` callback sends a message \"Dave: I'm afraid I can't let you do that.\"\n \n+## Messages to a room or user\n+\n+Messages can be sent to a specified room or user using the messageRoom function.\n+\n+```coffeescript\n+module.exports = (robot) ->\n+\n+  robot.hear /green eggs/i, (res) ->\n+    room = \"mytestroom\"\n+    robot.messageRoom room, \"I do not like green eggs and ham.  I do not like them sam-I-am.\"\n+```\n+\n+User name can be explicitely specified if desired ( for a cc to an admin/manager), or using\n+the response object a private message can be sent to the original sender.\n+\n+```coffeescript\n+  robot.respond /I don't like Sam-I-am/i, (res) ->\n+    room =  'joemanager'\n+    robot.messageRoom room, \"Someone does not like Dr. Seus\"\n+    res.reply  \"That Sam-I-am\\nThat Sam-I-am\\nI do not like\\nthat Sam-I-am\"\n+\n+  robot.hear /Sam-I-am/i, (res) ->\n+    room =  res.envelope.user.name\n+    robot.messageRoom room, \"That Sam-I-am\\nThat Sam-I-am\\nI do not like\\nthat Sam-I-am\"\n+```\n+\n ## Capturing data\n \n So far, our scripts have had static responses, which while amusing, are boring functionality-wise. `res.match` has the result of `match`ing the incoming message against the regular expression. This is just a [JavaScript thing](http://www.w3schools.com/jsref/jsref_match.asp), which ends up being an array with index 0 being the full text matching the expression. If you include capture groups, those will be populated `res.match`. For example, if we update a script like:", "changes": 26}], "1162": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ddbb074a98e034d725c4ab3324894ecead8cc7ce/.babelrc", "blob_url": "https://github.com/hubotio/hubot/blob/ddbb074a98e034d725c4ab3324894ecead8cc7ce/.babelrc", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.babelrc?ref=ddbb074a98e034d725c4ab3324894ecead8cc7ce", "filename": ".babelrc", "sha": "ad0ec0817e69e850f928bf5fca25fed9b60dfee7", "additions": 4, "patch": "@@ -0,0 +1,4 @@\n+{\n+  \"presets\": [\"es2015\"],\n+  \"plugins\": [\"add-module-exports\"]\n+}", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ddbb074a98e034d725c4ab3324894ecead8cc7ce/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/ddbb074a98e034d725c4ab3324894ecead8cc7ce/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=ddbb074a98e034d725c4ab3324894ecead8cc7ce", "filename": "bin/hubot", "sha": "e11d91c3edab77942e30270d030e3e1748c65167", "additions": 1, "patch": "@@ -2,7 +2,7 @@\n # vim:ft=coffee ts=2 sw=2 et :\n # -*- mode:coffee -*-\n \n-Hubot    = require '..'\n+Hubot    = require '../dist'\n \n Fs       = require 'fs'\n OptParse = require 'optparse'", "changes": 2}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ddbb074a98e034d725c4ab3324894ecead8cc7ce/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ddbb074a98e034d725c4ab3324894ecead8cc7ce/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=ddbb074a98e034d725c4ab3324894ecead8cc7ce", "filename": "index.coffee", "sha": "c7ad1eb8b555d0adb660da1312d985aa3ae6d464", "additions": 1, "patch": "@@ -1,3 +1,4 @@\n+require 'core-js'\n User                                                                 = require './src/user'\n Brain                                                                = require './src/brain'\n Robot                                                                = require './src/robot'", "changes": 1}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/ddbb074a98e034d725c4ab3324894ecead8cc7ce/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/ddbb074a98e034d725c4ab3324894ecead8cc7ce/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=ddbb074a98e034d725c4ab3324894ecead8cc7ce", "filename": "package.json", "sha": "645450a89371f19a47322571abf5b20686ae49fb", "additions": 16, "patch": "@@ -20,29 +20,40 @@\n     \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n     \"connect-multiparty\": \"^1.2.5\",\n+    \"core-js\": \"^2.3.0\",\n     \"express\": \"^3.21.2\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",\n     \"scoped-http-client\": \"0.11.0\"\n   },\n   \"devDependencies\": {\n-    \"hubot-mock-adapter\": \"^1.0.0\",\n+    \"babel-cli\": \"^6.6.5\",\n+    \"babel-core\": \"^6.7.4\",\n+    \"babel-plugin-add-module-exports\": \"^0.1.2\",\n+    \"babel-preset-es2015\": \"^6.6.0\",\n+    \"babel-register\": \"^6.7.2\",\n+    \"chai\": \"~2.1.0\",\n     \"coffee-errors\": \"0.8.6\",\n+    \"hubot-mock-adapter\": \"^1.0.0\",\n     \"mocha\": \"^2.1.0\",\n     \"mockery\": \"^1.4.0\",\n-    \"sinon-chai\": \"^2.8.0\",\n     \"sinon\": \"~1.17.0\",\n-    \"chai\": \"~2.1.0\"\n+    \"sinon-chai\": \"^2.8.0\"\n   },\n   \"engines\": {\n     \"node\": \">= 0.8.x\",\n     \"npm\": \">= 1.1.x\"\n   },\n-  \"main\": \"./index\",\n+  \"main\": \"dist/index.js\",\n   \"bin\": {\n     \"hubot\": \"./bin/hubot\"\n   },\n   \"scripts\": {\n-    \"test\": \"./script/test\"\n+    \"test\": \"./script/test\",\n+    \"prebuild\": \"rm -rf dist && mkdir dist\",\n+    \"build\": \"npm run build_coffee && npm run build_es6\",\n+    \"build_coffee\": \"cp index.coffee dist/index.coffee && cp -r src dist/src\",\n+    \"build_es6\": \"babel src/user.js -o dist/src/user.js\",\n+    \"postbuild\": \"cp package.json dist/\"\n   }\n }", "changes": 21}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ddbb074a98e034d725c4ab3324894ecead8cc7ce/script/release", "blob_url": "https://github.com/hubotio/hubot/blob/ddbb074a98e034d725c4ab3324894ecead8cc7ce/script/release", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/release?ref=ddbb074a98e034d725c4ab3324894ecead8cc7ce", "filename": "script/release", "sha": "a3898d1ba92dfee03c36a57a6303c9c9d85a6f7a", "additions": 3, "patch": "@@ -11,6 +11,9 @@ cd $(dirname \"$0\")/..\n \n npm update && script/smoke-test\n \n+# compile hubot to dist/\n+npm run build\n+\n # Make sure we're on the master branch.\n \n (git branch | grep -q '* master') || {", "changes": 3}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ddbb074a98e034d725c4ab3324894ecead8cc7ce/script/test", "blob_url": "https://github.com/hubotio/hubot/blob/ddbb074a98e034d725c4ab3324894ecead8cc7ce/script/test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/test?ref=ddbb074a98e034d725c4ab3324894ecead8cc7ce", "filename": "script/test", "sha": "128a9fd5b1fe01803d38a0a8792766b170812005", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n #!/bin/bash\n \n source script/bootstrap\n-mocha --require coffee-errors --compilers coffee:coffee-script \"$@\"\n+mocha --require coffee-errors --compilers coffee:coffee-script,js:babel-register \"$@\"", "changes": 2}, {"status": "removed", "deletions": 11, "raw_url": "https://github.com/hubotio/hubot/raw/c0f6bdf947c5271c2cac5d48730320b129c2e44f/src/user.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/c0f6bdf947c5271c2cac5d48730320b129c2e44f/src/user.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/user.coffee?ref=c0f6bdf947c5271c2cac5d48730320b129c2e44f", "filename": "src/user.coffee", "sha": "a490a03f86b73b2a7cf3763cdeb07a02999d0337", "additions": 0, "patch": "@@ -1,11 +0,0 @@\n-class User\n-  # Represents a participating user in the chat.\n-  #\n-  # id      - A unique ID for the user.\n-  # options - An optional Hash of key, value pairs for this user.\n-  constructor: (@id, options = {}) ->\n-    for k of (options or {})\n-      @[k] = options[k]\n-    @['name'] ||= @id.toString()\n-\n-module.exports = User", "changes": 11}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ddbb074a98e034d725c4ab3324894ecead8cc7ce/src/user.js", "blob_url": "https://github.com/hubotio/hubot/blob/ddbb074a98e034d725c4ab3324894ecead8cc7ce/src/user.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/user.js?ref=ddbb074a98e034d725c4ab3324894ecead8cc7ce", "filename": "src/user.js", "sha": "30135ffc98e554651c46579996fa7935a8dcc008", "additions": 18, "patch": "@@ -0,0 +1,18 @@\n+/**\n+ * Represents a participating user in the chat.\n+ *\n+ * @param {string} id      - A unique ID for the user.\n+ * @param {object} options - An optional Hash of key, value pairs for this user.\n+ */\n+class User {\n+  constructor(id, options = {}) {\n+    this.id = id;\n+    let ref = options || {};\n+    for (let key of Object.keys(ref)) {\n+      this[key] = options[key];\n+    }\n+    this['name'] || (this['name'] = this.id.toString());\n+  }\n+}\n+\n+export default User;", "changes": 18}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ddbb074a98e034d725c4ab3324894ecead8cc7ce/test/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ddbb074a98e034d725c4ab3324894ecead8cc7ce/test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.coffee?ref=ddbb074a98e034d725c4ab3324894ecead8cc7ce", "filename": "test/brain_test.coffee", "sha": "14f729f89410308a27e378f54575a67b0c9564f5", "additions": 1, "patch": "@@ -7,7 +7,7 @@ chai.use require 'sinon-chai'\n \n # Hubot classes\n Brain = require '../src/brain.coffee'\n-User = require '../src/user.coffee'\n+User = require '../src/user'\n \n describe 'Brain', ->\n   beforeEach ->", "changes": 2}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/ddbb074a98e034d725c4ab3324894ecead8cc7ce/test/listener_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ddbb074a98e034d725c4ab3324894ecead8cc7ce/test/listener_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.coffee?ref=ddbb074a98e034d725c4ab3324894ecead8cc7ce", "filename": "test/listener_test.coffee", "sha": "c07890184aaf2d2002411083578546bd06746494", "additions": 6, "patch": "@@ -9,7 +9,7 @@ chai.use require 'sinon-chai'\n { CatchAllMessage, EnterMessage, TextMessage } = require '../src/message'\n { Listener, TextListener } = require '../src/listener'\n Response = require '../src/response.coffee'\n-User = require '../src/user.coffee'\n+User = require '../src/user'\n \n describe 'Listener', ->\n   beforeEach ->\n@@ -287,21 +287,21 @@ describe 'Listener', ->\n           testMessage = new TextMessage(@user, 'test')\n           testMessage.match = sinon.stub().returns(true)\n           testRegex = /test/\n- \n+\n           testListener = new TextListener(@robot, testRegex, callback)\n           result = testListener.matcher(testMessage)\n- \n+\n           expect(result).to.be.ok\n           expect(testMessage.match).to.have.been.calledWith(testRegex)\n- \n+\n         it 'does not match EnterMessages', ->\n           callback = sinon.spy()\n           testMessage = new EnterMessage(@user)\n           testMessage.match = sinon.stub().returns(true)\n           testRegex = /test/\n- \n+\n           testListener = new TextListener(@robot, testRegex, callback)\n           result = testListener.matcher(testMessage)\n- \n+\n           expect(result).to.not.be.ok\n           expect(testMessage.match).to.not.have.been.called", "changes": 12}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ddbb074a98e034d725c4ab3324894ecead8cc7ce/test/message_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ddbb074a98e034d725c4ab3324894ecead8cc7ce/test/message_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/message_test.coffee?ref=ddbb074a98e034d725c4ab3324894ecead8cc7ce", "filename": "test/message_test.coffee", "sha": "b6685ec8663e25f14bea05d39cb6425bd93c5945", "additions": 1, "patch": "@@ -6,7 +6,7 @@ chai.use require 'sinon-chai'\n { expect } = chai\n \n # Hubot classes\n-User = require '../src/user.coffee'\n+User = require '../src/user'\n { CatchAllMessage, EnterMessage, Message, TextMessage } = require '../src/message'\n \n describe 'Message', ->", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ddbb074a98e034d725c4ab3324894ecead8cc7ce/test/user_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/ddbb074a98e034d725c4ab3324894ecead8cc7ce/test/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/user_test.coffee?ref=ddbb074a98e034d725c4ab3324894ecead8cc7ce", "filename": "test/user_test.coffee", "sha": "bfb2c16249f96a3dbf0bbe4b19d2b8c04d3515f3", "additions": 2, "patch": "@@ -1,5 +1,6 @@\n+require 'core-js'\n {expect} = require 'chai'\n-User = require '../src/user.coffee'\n+User = require '../src/user'\n \n describe 'User', ->\n   describe 'new', ->", "changes": 3}], "1164": [{"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/25b91b203c1056bff33fb5d0b199bbe8221f9f60/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/25b91b203c1056bff33fb5d0b199bbe8221f9f60/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=25b91b203c1056bff33fb5d0b199bbe8221f9f60", "filename": "bin/hubot", "sha": "1cd052de46ac6ac84667a2ed633b6630b65a3f5e", "additions": 20, "patch": "@@ -9,15 +9,17 @@ OptParse = require 'optparse'\n Path     = require 'path'\n \n Switches = [\n-  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n-  [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n-  [ \"-h\", \"--help\",            \"Display the help information\" ],\n-  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n-  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n-  [ \"-r\", \"--require PATH\",    \"Alternative scripts path\" ],\n-  [ \"-t\", \"--config-check\",    \"Test hubot's config to make sure it won't fail at startup\"]\n-  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n+  [ \"-a\", \"--adapter ADAPTER\",     \"The Adapter to use\" ],\n+  [ \"-c\", \"--create PATH\",         \"Create a deployable hubot\" ],\n+  [ \"-d\", \"--disable-httpd\",       \"Disable the HTTP server\" ],\n+  [ \"-e\", \"--log-level LOG_LEVEL\", \"Log level\" ],\n+  [ \"-f\", \"--log-file LOG_FILE\",   \"Log file\" ],\n+  [ \"-h\", \"--help\",                \"Display the help information\" ],\n+  [ \"-l\", \"--alias ALIAS\",         \"Enable replacing the robot's name with alias\" ],\n+  [ \"-n\", \"--name NAME\",           \"The name of the robot in chat\" ],\n+  [ \"-r\", \"--require PATH\",        \"Alternative scripts path\" ],\n+  [ \"-t\", \"--config-check\",        \"Test hubot's config to make sure it won't fail at startup\"],\n+  [ \"-v\", \"--version\",             \"Displays the version of hubot installed\" ]\n ]\n \n Options =\n@@ -29,6 +31,8 @@ Options =\n   name:        process.env.HUBOT_NAME    or \"Hubot\"\n   path:        process.env.HUBOT_PATH    or \".\"\n   configCheck: false\n+  logLevel:    process.env.HUBOT_LOG_LEVEL or \"info\"\n+  logFile:     process.env.HUBOT_LOG_FILE or null\n \n Parser = new OptParse.OptionParser(Switches)\n Parser.banner = \"Usage hubot [options]\"\n@@ -63,6 +67,12 @@ Parser.on \"config-check\", (opt) ->\n Parser.on \"version\", (opt, value) ->\n   Options.version = true\n \n+Parser.on \"log-level\", (opt, value) ->\n+  Options.logLevel = value\n+\n+Parser.on \"log-file\", (opt, value) ->\n+  Options.logFile = value\n+\n Parser.on (opt, value) ->\n   console.warn \"Unknown option: #{opt}\"\n \n@@ -82,7 +92,7 @@ if Options.create\n   process.exit 1\n \n else\n-  robot = Hubot.loadBot undefined, Options.adapter, Options.enableHttpd, Options.name, Options.alias\n+  robot = Hubot.loadBot undefined, Options.adapter, Options.enableHttpd, Options.name, Options.alias, Options.logLevel, Options.logFile\n \n   if Options.version\n     console.log robot.version", "changes": 30}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/25b91b203c1056bff33fb5d0b199bbe8221f9f60/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/25b91b203c1056bff33fb5d0b199bbe8221f9f60/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=25b91b203c1056bff33fb5d0b199bbe8221f9f60", "filename": "docs/scripting.md", "sha": "d9c62ad835dd1922aa689b04b046c8ca738a3eea", "additions": 17, "patch": "@@ -493,6 +493,23 @@ Using previous examples:\n \n For the second example, it's worth thinking about what messages the user would see. If you have an error handler that replies to the user, you may not need to add a custom message and could send back the error message provided to the `get()` request, but of course it depends on how public you want to be with your exception reporting.\n \n+## Logging\n+Hubot uses [log](https://www.npmjs.com/package/log) to manage logging.\n+By default, logging done to stdout, but you can redirect to a file using `HUBOT_LOG_FILE` config or `--log-file` option.\n+You also can specify the log level using `HUBOT_LOG_LEVEL` config or `--log-level` option.\n+\n+```coffeescript\n+s3.putObject { Bucket: bucket, Key: brain_file_name, ACL: 'private', ContentType: 'application/json', Body: buffer }, (err, response) ->\n+  if err\n+    # log an error using robot.logger.error() API\n+    robot.logger.error util.inspect(err)\n+  else if response\n+    # log a debug message using robot.logger.debug() API\n+    robot.logger.debug \"Saved brain to S3 path #{bucket}#{brain_file_name}\"\n+\n+  if callback then callback(err, response)\n+```\n+\n ## Documenting Scripts\n \n Hubot scripts can be documented with comments at the top of their file, for example:", "changes": 17}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/25b91b203c1056bff33fb5d0b199bbe8221f9f60/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/25b91b203c1056bff33fb5d0b199bbe8221f9f60/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=25b91b203c1056bff33fb5d0b199bbe8221f9f60", "filename": "index.coffee", "sha": "d1cde5794b4a7bc54e614421307a8c39b4a7ed4b", "additions": 2, "patch": "@@ -22,5 +22,5 @@ module.exports = {\n   CatchAllMessage\n }\n \n-module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName, botAlias) ->\n-  new Robot adapterPath, adapterName, enableHttpd, botName, botAlias\n+module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName, botAlias, logLevel, logFile) ->\n+  new Robot adapterPath, adapterName, enableHttpd, botName, botAlias, logLevel, logFile", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/25b91b203c1056bff33fb5d0b199bbe8221f9f60/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/25b91b203c1056bff33fb5d0b199bbe8221f9f60/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=25b91b203c1056bff33fb5d0b199bbe8221f9f60", "filename": "src/robot.coffee", "sha": "e3e887a88cee02783bac823689d3bcca9b535702", "additions": 6, "patch": "@@ -40,7 +40,7 @@ class Robot\n   # name        - A String of the robot name, defaults to Hubot.\n   #\n   # Returns nothing.\n-  constructor: (adapterPath, adapter, httpd, name = 'Hubot', alias = false) ->\n+  constructor: (adapterPath, adapter, httpd, name = 'Hubot', alias = false, logLevel = 'info', logFile = null) ->\n     @adapterPath ?= Path.join __dirname, \"adapters\"\n \n     @name       = name\n@@ -55,7 +55,7 @@ class Robot\n       listener: new Middleware(@)\n       response: new Middleware(@)\n       receive:  new Middleware(@)\n-    @logger     = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n+    @logger     = @createLogger(logLevel, logFile)\n     @pingIntervalId = null\n     @globalHttpOptions = {}\n \n@@ -649,5 +649,9 @@ class Robot\n       obj[key] = value for own key, value of source\n     obj\n \n+  # Private: Create a logger with the specificed level and file.\n+  # Returns a Log instance: https://www.npmjs.com/package/log.\n+  createLogger: (logLevel = 'info', logFile = null) ->\n+    new Log logLevel, (Fs.createWriteStream(logFile, { flags: 'a' }) if logFile?)\n \n module.exports = Robot", "changes": 8}], "1166": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/89724807c81f9ce7f406b8ca5d8c586eb59b67ea/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/89724807c81f9ce7f406b8ca5d8c586eb59b67ea/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=89724807c81f9ce7f406b8ca5d8c586eb59b67ea", "filename": "docs/adapters.md", "sha": "f406e98b4c2b1f2f4aa9e1f4a3cb16d5394a480a", "additions": 1, "patch": "@@ -35,6 +35,7 @@ to have yours added to the list:\n * [Lingr](https://github.com/miyagawa/hubot-lingr)\n * [Mattermost](https://github.com/renanvicente/hubot-mattermost)\n * [Mattermost](https://github.com/loafoe/hubot-matteruser) - websocket\n+* [Messenger Platform](https://github.com/ClaudeBot/hubot-messenger-bot)\n * [QQ](https://github.com/xhan/qqbot)\n * [Partychat](https://github.com/iangreenleaf/hubot-partychat-hooks)\n * [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.", "changes": 1}], "1171": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/ae6dcfb867bcfb9382c759e747b78571db48d170/license", "blob_url": "https://github.com/hubotio/hubot/blob/ae6dcfb867bcfb9382c759e747b78571db48d170/license", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/license?ref=ae6dcfb867bcfb9382c759e747b78571db48d170", "filename": "license", "sha": "9cecc1d4669ee8af2ca727a5d8cde10cd8b2d7cc", "additions": 674, "patch": "@@ -0,0 +1,674 @@\n+                    GNU GENERAL PUBLIC LICENSE\n+                       Version 3, 29 June 2007\n+\n+ Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n+ Everyone is permitted to copy and distribute verbatim copies\n+ of this license document, but changing it is not allowed.\n+\n+                            Preamble\n+\n+  The GNU General Public License is a free, copyleft license for\n+software and other kinds of works.\n+\n+  The licenses for most software and other practical works are designed\n+to take away your freedom to share and change the works.  By contrast,\n+the GNU General Public License is intended to guarantee your freedom to\n+share and change all versions of a program--to make sure it remains free\n+software for all its users.  We, the Free Software Foundation, use the\n+GNU General Public License for most of our software; it applies also to\n+any other work released this way by its authors.  You can apply it to\n+your programs, too.\n+\n+  When we speak of free software, we are referring to freedom, not\n+price.  Our General Public Licenses are designed to make sure that you\n+have the freedom to distribute copies of free software (and charge for\n+them if you wish), that you receive source code or can get it if you\n+want it, that you can change the software or use pieces of it in new\n+free programs, and that you know you can do these things.\n+\n+  To protect your rights, we need to prevent others from denying you\n+these rights or asking you to surrender the rights.  Therefore, you have\n+certain responsibilities if you distribute copies of the software, or if\n+you modify it: responsibilities to respect the freedom of others.\n+\n+  For example, if you distribute copies of such a program, whether\n+gratis or for a fee, you must pass on to the recipients the same\n+freedoms that you received.  You must make sure that they, too, receive\n+or can get the source code.  And you must show them these terms so they\n+know their rights.\n+\n+  Developers that use the GNU GPL protect your rights with two steps:\n+(1) assert copyright on the software, and (2) offer you this License\n+giving you legal permission to copy, distribute and/or modify it.\n+\n+  For the developers' and authors' protection, the GPL clearly explains\n+that there is no warranty for this free software.  For both users' and\n+authors' sake, the GPL requires that modified versions be marked as\n+changed, so that their problems will not be attributed erroneously to\n+authors of previous versions.\n+\n+  Some devices are designed to deny users access to install or run\n+modified versions of the software inside them, although the manufacturer\n+can do so.  This is fundamentally incompatible with the aim of\n+protecting users' freedom to change the software.  The systematic\n+pattern of such abuse occurs in the area of products for individuals to\n+use, which is precisely where it is most unacceptable.  Therefore, we\n+have designed this version of the GPL to prohibit the practice for those\n+products.  If such problems arise substantially in other domains, we\n+stand ready to extend this provision to those domains in future versions\n+of the GPL, as needed to protect the freedom of users.\n+\n+  Finally, every program is threatened constantly by software patents.\n+States should not allow patents to restrict development and use of\n+software on general-purpose computers, but in those that do, we wish to\n+avoid the special danger that patents applied to a free program could\n+make it effectively proprietary.  To prevent this, the GPL assures that\n+patents cannot be used to render the program non-free.\n+\n+  The precise terms and conditions for copying, distribution and\n+modification follow.\n+\n+                       TERMS AND CONDITIONS\n+\n+  0. Definitions.\n+\n+  \"This License\" refers to version 3 of the GNU General Public License.\n+\n+  \"Copyright\" also means copyright-like laws that apply to other kinds of\n+works, such as semiconductor masks.\n+\n+  \"The Program\" refers to any copyrightable work licensed under this\n+License.  Each licensee is addressed as \"you\".  \"Licensees\" and\n+\"recipients\" may be individuals or organizations.\n+\n+  To \"modify\" a work means to copy from or adapt all or part of the work\n+in a fashion requiring copyright permission, other than the making of an\n+exact copy.  The resulting work is called a \"modified version\" of the\n+earlier work or a work \"based on\" the earlier work.\n+\n+  A \"covered work\" means either the unmodified Program or a work based\n+on the Program.\n+\n+  To \"propagate\" a work means to do anything with it that, without\n+permission, would make you directly or secondarily liable for\n+infringement under applicable copyright law, except executing it on a\n+computer or modifying a private copy.  Propagation includes copying,\n+distribution (with or without modification), making available to the\n+public, and in some countries other activities as well.\n+\n+  To \"convey\" a work means any kind of propagation that enables other\n+parties to make or receive copies.  Mere interaction with a user through\n+a computer network, with no transfer of a copy, is not conveying.\n+\n+  An interactive user interface displays \"Appropriate Legal Notices\"\n+to the extent that it includes a convenient and prominently visible\n+feature that (1) displays an appropriate copyright notice, and (2)\n+tells the user that there is no warranty for the work (except to the\n+extent that warranties are provided), that licensees may convey the\n+work under this License, and how to view a copy of this License.  If\n+the interface presents a list of user commands or options, such as a\n+menu, a prominent item in the list meets this criterion.\n+\n+  1. Source Code.\n+\n+  The \"source code\" for a work means the preferred form of the work\n+for making modifications to it.  \"Object code\" means any non-source\n+form of a work.\n+\n+  A \"Standard Interface\" means an interface that either is an official\n+standard defined by a recognized standards body, or, in the case of\n+interfaces specified for a particular programming language, one that\n+is widely used among developers working in that language.\n+\n+  The \"System Libraries\" of an executable work include anything, other\n+than the work as a whole, that (a) is included in the normal form of\n+packaging a Major Component, but which is not part of that Major\n+Component, and (b) serves only to enable use of the work with that\n+Major Component, or to implement a Standard Interface for which an\n+implementation is available to the public in source code form.  A\n+\"Major Component\", in this context, means a major essential component\n+(kernel, window system, and so on) of the specific operating system\n+(if any) on which the executable work runs, or a compiler used to\n+produce the work, or an object code interpreter used to run it.\n+\n+  The \"Corresponding Source\" for a work in object code form means all\n+the source code needed to generate, install, and (for an executable\n+work) run the object code and to modify the work, including scripts to\n+control those activities.  However, it does not include the work's\n+System Libraries, or general-purpose tools or generally available free\n+programs which are used unmodified in performing those activities but\n+which are not part of the work.  For example, Corresponding Source\n+includes interface definition files associated with source files for\n+the work, and the source code for shared libraries and dynamically\n+linked subprograms that the work is specifically designed to require,\n+such as by intimate data communication or control flow between those\n+subprograms and other parts of the work.\n+\n+  The Corresponding Source need not include anything that users\n+can regenerate automatically from other parts of the Corresponding\n+Source.\n+\n+  The Corresponding Source for a work in source code form is that\n+same work.\n+\n+  2. Basic Permissions.\n+\n+  All rights granted under this License are granted for the term of\n+copyright on the Program, and are irrevocable provided the stated\n+conditions are met.  This License explicitly affirms your unlimited\n+permission to run the unmodified Program.  The output from running a\n+covered work is covered by this License only if the output, given its\n+content, constitutes a covered work.  This License acknowledges your\n+rights of fair use or other equivalent, as provided by copyright law.\n+\n+  You may make, run and propagate covered works that you do not\n+convey, without conditions so long as your license otherwise remains\n+in force.  You may convey covered works to others for the sole purpose\n+of having them make modifications exclusively for you, or provide you\n+with facilities for running those works, provided that you comply with\n+the terms of this License in conveying all material for which you do\n+not control copyright.  Those thus making or running the covered works\n+for you must do so exclusively on your behalf, under your direction\n+and control, on terms that prohibit them from making any copies of\n+your copyrighted material outside their relationship with you.\n+\n+  Conveying under any other circumstances is permitted solely under\n+the conditions stated below.  Sublicensing is not allowed; section 10\n+makes it unnecessary.\n+\n+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n+\n+  No covered work shall be deemed part of an effective technological\n+measure under any applicable law fulfilling obligations under article\n+11 of the WIPO copyright treaty adopted on 20 December 1996, or\n+similar laws prohibiting or restricting circumvention of such\n+measures.\n+\n+  When you convey a covered work, you waive any legal power to forbid\n+circumvention of technological measures to the extent such circumvention\n+is effected by exercising rights under this License with respect to\n+the covered work, and you disclaim any intention to limit operation or\n+modification of the work as a means of enforcing, against the work's\n+users, your or third parties' legal rights to forbid circumvention of\n+technological measures.\n+\n+  4. Conveying Verbatim Copies.\n+\n+  You may convey verbatim copies of the Program's source code as you\n+receive it, in any medium, provided that you conspicuously and\n+appropriately publish on each copy an appropriate copyright notice;\n+keep intact all notices stating that this License and any\n+non-permissive terms added in accord with section 7 apply to the code;\n+keep intact all notices of the absence of any warranty; and give all\n+recipients a copy of this License along with the Program.\n+\n+  You may charge any price or no price for each copy that you convey,\n+and you may offer support or warranty protection for a fee.\n+\n+  5. Conveying Modified Source Versions.\n+\n+  You may convey a work based on the Program, or the modifications to\n+produce it from the Program, in the form of source code under the\n+terms of section 4, provided that you also meet all of these conditions:\n+\n+    a) The work must carry prominent notices stating that you modified\n+    it, and giving a relevant date.\n+\n+    b) The work must carry prominent notices stating that it is\n+    released under this License and any conditions added under section\n+    7.  This requirement modifies the requirement in section 4 to\n+    \"keep intact all notices\".\n+\n+    c) You must license the entire work, as a whole, under this\n+    License to anyone who comes into possession of a copy.  This\n+    License will therefore apply, along with any applicable section 7\n+    additional terms, to the whole of the work, and all its parts,\n+    regardless of how they are packaged.  This License gives no\n+    permission to license the work in any other way, but it does not\n+    invalidate such permission if you have separately received it.\n+\n+    d) If the work has interactive user interfaces, each must display\n+    Appropriate Legal Notices; however, if the Program has interactive\n+    interfaces that do not display Appropriate Legal Notices, your\n+    work need not make them do so.\n+\n+  A compilation of a covered work with other separate and independent\n+works, which are not by their nature extensions of the covered work,\n+and which are not combined with it such as to form a larger program,\n+in or on a volume of a storage or distribution medium, is called an\n+\"aggregate\" if the compilation and its resulting copyright are not\n+used to limit the access or legal rights of the compilation's users\n+beyond what the individual works permit.  Inclusion of a covered work\n+in an aggregate does not cause this License to apply to the other\n+parts of the aggregate.\n+\n+  6. Conveying Non-Source Forms.\n+\n+  You may convey a covered work in object code form under the terms\n+of sections 4 and 5, provided that you also convey the\n+machine-readable Corresponding Source under the terms of this License,\n+in one of these ways:\n+\n+    a) Convey the object code in, or embodied in, a physical product\n+    (including a physical distribution medium), accompanied by the\n+    Corresponding Source fixed on a durable physical medium\n+    customarily used for software interchange.\n+\n+    b) Convey the object code in, or embodied in, a physical product\n+    (including a physical distribution medium), accompanied by a\n+    written offer, valid for at least three years and valid for as\n+    long as you offer spare parts or customer support for that product\n+    model, to give anyone who possesses the object code either (1) a\n+    copy of the Corresponding Source for all the software in the\n+    product that is covered by this License, on a durable physical\n+    medium customarily used for software interchange, for a price no\n+    more than your reasonable cost of physically performing this\n+    conveying of source, or (2) access to copy the\n+    Corresponding Source from a network server at no charge.\n+\n+    c) Convey individual copies of the object code with a copy of the\n+    written offer to provide the Corresponding Source.  This\n+    alternative is allowed only occasionally and noncommercially, and\n+    only if you received the object code with such an offer, in accord\n+    with subsection 6b.\n+\n+    d) Convey the object code by offering access from a designated\n+    place (gratis or for a charge), and offer equivalent access to the\n+    Corresponding Source in the same way through the same place at no\n+    further charge.  You need not require recipients to copy the\n+    Corresponding Source along with the object code.  If the place to\n+    copy the object code is a network server, the Corresponding Source\n+    may be on a different server (operated by you or a third party)\n+    that supports equivalent copying facilities, provided you maintain\n+    clear directions next to the object code saying where to find the\n+    Corresponding Source.  Regardless of what server hosts the\n+    Corresponding Source, you remain obligated to ensure that it is\n+    available for as long as needed to satisfy these requirements.\n+\n+    e) Convey the object code using peer-to-peer transmission, provided\n+    you inform other peers where the object code and Corresponding\n+    Source of the work are being offered to the general public at no\n+    charge under subsection 6d.\n+\n+  A separable portion of the object code, whose source code is excluded\n+from the Corresponding Source as a System Library, need not be\n+included in conveying the object code work.\n+\n+  A \"User Product\" is either (1) a \"consumer product\", which means any\n+tangible personal property which is normally used for personal, family,\n+or household purposes, or (2) anything designed or sold for incorporation\n+into a dwelling.  In determining whether a product is a consumer product,\n+doubtful cases shall be resolved in favor of coverage.  For a particular\n+product received by a particular user, \"normally used\" refers to a\n+typical or common use of that class of product, regardless of the status\n+of the particular user or of the way in which the particular user\n+actually uses, or expects or is expected to use, the product.  A product\n+is a consumer product regardless of whether the product has substantial\n+commercial, industrial or non-consumer uses, unless such uses represent\n+the only significant mode of use of the product.\n+\n+  \"Installation Information\" for a User Product means any methods,\n+procedures, authorization keys, or other information required to install\n+and execute modified versions of a covered work in that User Product from\n+a modified version of its Corresponding Source.  The information must\n+suffice to ensure that the continued functioning of the modified object\n+code is in no case prevented or interfered with solely because\n+modification has been made.\n+\n+  If you convey an object code work under this section in, or with, or\n+specifically for use in, a User Product, and the conveying occurs as\n+part of a transaction in which the right of possession and use of the\n+User Product is transferred to the recipient in perpetuity or for a\n+fixed term (regardless of how the transaction is characterized), the\n+Corresponding Source conveyed under this section must be accompanied\n+by the Installation Information.  But this requirement does not apply\n+if neither you nor any third party retains the ability to install\n+modified object code on the User Product (for example, the work has\n+been installed in ROM).\n+\n+  The requirement to provide Installation Information does not include a\n+requirement to continue to provide support service, warranty, or updates\n+for a work that has been modified or installed by the recipient, or for\n+the User Product in which it has been modified or installed.  Access to a\n+network may be denied when the modification itself materially and\n+adversely affects the operation of the network or violates the rules and\n+protocols for communication across the network.\n+\n+  Corresponding Source conveyed, and Installation Information provided,\n+in accord with this section must be in a format that is publicly\n+documented (and with an implementation available to the public in\n+source code form), and must require no special password or key for\n+unpacking, reading or copying.\n+\n+  7. Additional Terms.\n+\n+  \"Additional permissions\" are terms that supplement the terms of this\n+License by making exceptions from one or more of its conditions.\n+Additional permissions that are applicable to the entire Program shall\n+be treated as though they were included in this License, to the extent\n+that they are valid under applicable law.  If additional permissions\n+apply only to part of the Program, that part may be used separately\n+under those permissions, but the entire Program remains governed by\n+this License without regard to the additional permissions.\n+\n+  When you convey a copy of a covered work, you may at your option\n+remove any additional permissions from that copy, or from any part of\n+it.  (Additional permissions may be written to require their own\n+removal in certain cases when you modify the work.)  You may place\n+additional permissions on material, added by you to a covered work,\n+for which you have or can give appropriate copyright permission.\n+\n+  Notwithstanding any other provision of this License, for material you\n+add to a covered work, you may (if authorized by the copyright holders of\n+that material) supplement the terms of this License with terms:\n+\n+    a) Disclaiming warranty or limiting liability differently from the\n+    terms of sections 15 and 16 of this License; or\n+\n+    b) Requiring preservation of specified reasonable legal notices or\n+    author attributions in that material or in the Appropriate Legal\n+    Notices displayed by works containing it; or\n+\n+    c) Prohibiting misrepresentation of the origin of that material, or\n+    requiring that modified versions of such material be marked in\n+    reasonable ways as different from the original version; or\n+\n+    d) Limiting the use for publicity purposes of names of licensors or\n+    authors of the material; or\n+\n+    e) Declining to grant rights under trademark law for use of some\n+    trade names, trademarks, or service marks; or\n+\n+    f) Requiring indemnification of licensors and authors of that\n+    material by anyone who conveys the material (or modified versions of\n+    it) with contractual assumptions of liability to the recipient, for\n+    any liability that these contractual assumptions directly impose on\n+    those licensors and authors.\n+\n+  All other non-permissive additional terms are considered \"further\n+restrictions\" within the meaning of section 10.  If the Program as you\n+received it, or any part of it, contains a notice stating that it is\n+governed by this License along with a term that is a further\n+restriction, you may remove that term.  If a license document contains\n+a further restriction but permits relicensing or conveying under this\n+License, you may add to a covered work material governed by the terms\n+of that license document, provided that the further restriction does\n+not survive such relicensing or conveying.\n+\n+  If you add terms to a covered work in accord with this section, you\n+must place, in the relevant source files, a statement of the\n+additional terms that apply to those files, or a notice indicating\n+where to find the applicable terms.\n+\n+  Additional terms, permissive or non-permissive, may be stated in the\n+form of a separately written license, or stated as exceptions;\n+the above requirements apply either way.\n+\n+  8. Termination.\n+\n+  You may not propagate or modify a covered work except as expressly\n+provided under this License.  Any attempt otherwise to propagate or\n+modify it is void, and will automatically terminate your rights under\n+this License (including any patent licenses granted under the third\n+paragraph of section 11).\n+\n+  However, if you cease all violation of this License, then your\n+license from a particular copyright holder is reinstated (a)\n+provisionally, unless and until the copyright holder explicitly and\n+finally terminates your license, and (b) permanently, if the copyright\n+holder fails to notify you of the violation by some reasonable means\n+prior to 60 days after the cessation.\n+\n+  Moreover, your license from a particular copyright holder is\n+reinstated permanently if the copyright holder notifies you of the\n+violation by some reasonable means, this is the first time you have\n+received notice of violation of this License (for any work) from that\n+copyright holder, and you cure the violation prior to 30 days after\n+your receipt of the notice.\n+\n+  Termination of your rights under this section does not terminate the\n+licenses of parties who have received copies or rights from you under\n+this License.  If your rights have been terminated and not permanently\n+reinstated, you do not qualify to receive new licenses for the same\n+material under section 10.\n+\n+  9. Acceptance Not Required for Having Copies.\n+\n+  You are not required to accept this License in order to receive or\n+run a copy of the Program.  Ancillary propagation of a covered work\n+occurring solely as a consequence of using peer-to-peer transmission\n+to receive a copy likewise does not require acceptance.  However,\n+nothing other than this License grants you permission to propagate or\n+modify any covered work.  These actions infringe copyright if you do\n+not accept this License.  Therefore, by modifying or propagating a\n+covered work, you indicate your acceptance of this License to do so.\n+\n+  10. Automatic Licensing of Downstream Recipients.\n+\n+  Each time you convey a covered work, the recipient automatically\n+receives a license from the original licensors, to run, modify and\n+propagate that work, subject to this License.  You are not responsible\n+for enforcing compliance by third parties with this License.\n+\n+  An \"entity transaction\" is a transaction transferring control of an\n+organization, or substantially all assets of one, or subdividing an\n+organization, or merging organizations.  If propagation of a covered\n+work results from an entity transaction, each party to that\n+transaction who receives a copy of the work also receives whatever\n+licenses to the work the party's predecessor in interest had or could\n+give under the previous paragraph, plus a right to possession of the\n+Corresponding Source of the work from the predecessor in interest, if\n+the predecessor has it or can get it with reasonable efforts.\n+\n+  You may not impose any further restrictions on the exercise of the\n+rights granted or affirmed under this License.  For example, you may\n+not impose a license fee, royalty, or other charge for exercise of\n+rights granted under this License, and you may not initiate litigation\n+(including a cross-claim or counterclaim in a lawsuit) alleging that\n+any patent claim is infringed by making, using, selling, offering for\n+sale, or importing the Program or any portion of it.\n+\n+  11. Patents.\n+\n+  A \"contributor\" is a copyright holder who authorizes use under this\n+License of the Program or a work on which the Program is based.  The\n+work thus licensed is called the contributor's \"contributor version\".\n+\n+  A contributor's \"essential patent claims\" are all patent claims\n+owned or controlled by the contributor, whether already acquired or\n+hereafter acquired, that would be infringed by some manner, permitted\n+by this License, of making, using, or selling its contributor version,\n+but do not include claims that would be infringed only as a\n+consequence of further modification of the contributor version.  For\n+purposes of this definition, \"control\" includes the right to grant\n+patent sublicenses in a manner consistent with the requirements of\n+this License.\n+\n+  Each contributor grants you a non-exclusive, worldwide, royalty-free\n+patent license under the contributor's essential patent claims, to\n+make, use, sell, offer for sale, import and otherwise run, modify and\n+propagate the contents of its contributor version.\n+\n+  In the following three paragraphs, a \"patent license\" is any express\n+agreement or commitment, however denominated, not to enforce a patent\n+(such as an express permission to practice a patent or covenant not to\n+sue for patent infringement).  To \"grant\" such a patent license to a\n+party means to make such an agreement or commitment not to enforce a\n+patent against the party.\n+\n+  If you convey a covered work, knowingly relying on a patent license,\n+and the Corresponding Source of the work is not available for anyone\n+to copy, free of charge and under the terms of this License, through a\n+publicly available network server or other readily accessible means,\n+then you must either (1) cause the Corresponding Source to be so\n+available, or (2) arrange to deprive yourself of the benefit of the\n+patent license for this particular work, or (3) arrange, in a manner\n+consistent with the requirements of this License, to extend the patent\n+license to downstream recipients.  \"Knowingly relying\" means you have\n+actual knowledge that, but for the patent license, your conveying the\n+covered work in a country, or your recipient's use of the covered work\n+in a country, would infringe one or more identifiable patents in that\n+country that you have reason to believe are valid.\n+\n+  If, pursuant to or in connection with a single transaction or\n+arrangement, you convey, or propagate by procuring conveyance of, a\n+covered work, and grant a patent license to some of the parties\n+receiving the covered work authorizing them to use, propagate, modify\n+or convey a specific copy of the covered work, then the patent license\n+you grant is automatically extended to all recipients of the covered\n+work and works based on it.\n+\n+  A patent license is \"discriminatory\" if it does not include within\n+the scope of its coverage, prohibits the exercise of, or is\n+conditioned on the non-exercise of one or more of the rights that are\n+specifically granted under this License.  You may not convey a covered\n+work if you are a party to an arrangement with a third party that is\n+in the business of distributing software, under which you make payment\n+to the third party based on the extent of your activity of conveying\n+the work, and under which the third party grants, to any of the\n+parties who would receive the covered work from you, a discriminatory\n+patent license (a) in connection with copies of the covered work\n+conveyed by you (or copies made from those copies), or (b) primarily\n+for and in connection with specific products or compilations that\n+contain the covered work, unless you entered into that arrangement,\n+or that patent license was granted, prior to 28 March 2007.\n+\n+  Nothing in this License shall be construed as excluding or limiting\n+any implied license or other defenses to infringement that may\n+otherwise be available to you under applicable patent law.\n+\n+  12. No Surrender of Others' Freedom.\n+\n+  If conditions are imposed on you (whether by court order, agreement or\n+otherwise) that contradict the conditions of this License, they do not\n+excuse you from the conditions of this License.  If you cannot convey a\n+covered work so as to satisfy simultaneously your obligations under this\n+License and any other pertinent obligations, then as a consequence you may\n+not convey it at all.  For example, if you agree to terms that obligate you\n+to collect a royalty for further conveying from those to whom you convey\n+the Program, the only way you could satisfy both those terms and this\n+License would be to refrain entirely from conveying the Program.\n+\n+  13. Use with the GNU Affero General Public License.\n+\n+  Notwithstanding any other provision of this License, you have\n+permission to link or combine any covered work with a work licensed\n+under version 3 of the GNU Affero General Public License into a single\n+combined work, and to convey the resulting work.  The terms of this\n+License will continue to apply to the part which is the covered work,\n+but the special requirements of the GNU Affero General Public License,\n+section 13, concerning interaction through a network will apply to the\n+combination as such.\n+\n+  14. Revised Versions of this License.\n+\n+  The Free Software Foundation may publish revised and/or new versions of\n+the GNU General Public License from time to time.  Such new versions will\n+be similar in spirit to the present version, but may differ in detail to\n+address new problems or concerns.\n+\n+  Each version is given a distinguishing version number.  If the\n+Program specifies that a certain numbered version of the GNU General\n+Public License \"or any later version\" applies to it, you have the\n+option of following the terms and conditions either of that numbered\n+version or of any later version published by the Free Software\n+Foundation.  If the Program does not specify a version number of the\n+GNU General Public License, you may choose any version ever published\n+by the Free Software Foundation.\n+\n+  If the Program specifies that a proxy can decide which future\n+versions of the GNU General Public License can be used, that proxy's\n+public statement of acceptance of a version permanently authorizes you\n+to choose that version for the Program.\n+\n+  Later license versions may give you additional or different\n+permissions.  However, no additional obligations are imposed on any\n+author or copyright holder as a result of your choosing to follow a\n+later version.\n+\n+  15. Disclaimer of Warranty.\n+\n+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\n+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\n+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\n+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\n+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\n+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\n+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n+\n+  16. Limitation of Liability.\n+\n+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\n+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\n+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\n+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\n+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\n+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\n+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\n+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\n+SUCH DAMAGES.\n+\n+  17. Interpretation of Sections 15 and 16.\n+\n+  If the disclaimer of warranty and limitation of liability provided\n+above cannot be given local legal effect according to their terms,\n+reviewing courts shall apply local law that most closely approximates\n+an absolute waiver of all civil liability in connection with the\n+Program, unless a warranty or assumption of liability accompanies a\n+copy of the Program in return for a fee.\n+\n+                     END OF TERMS AND CONDITIONS\n+\n+            How to Apply These Terms to Your New Programs\n+\n+  If you develop a new program, and you want it to be of the greatest\n+possible use to the public, the best way to achieve this is to make it\n+free software which everyone can redistribute and change under these terms.\n+\n+  To do so, attach the following notices to the program.  It is safest\n+to attach them to the start of each source file to most effectively\n+state the exclusion of warranty; and each file should have at least\n+the \"copyright\" line and a pointer to where the full notice is found.\n+\n+    {one line to give the program's name and a brief idea of what it does.}\n+    Copyright (C) {year}  {name of author}\n+\n+    This program is free software: you can redistribute it and/or modify\n+    it under the terms of the GNU General Public License as published by\n+    the Free Software Foundation, either version 3 of the License, or\n+    (at your option) any later version.\n+\n+    This program is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+    GNU General Public License for more details.\n+\n+    You should have received a copy of the GNU General Public License\n+    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+Also add information on how to contact you by electronic and paper mail.\n+\n+  If the program does terminal interaction, make it output a short\n+notice like this when it starts in an interactive mode:\n+\n+    {project}  Copyright (C) {year}  {fullname}\n+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n+    This is free software, and you are welcome to redistribute it\n+    under certain conditions; type `show c' for details.\n+\n+The hypothetical commands `show w' and `show c' should show the appropriate\n+parts of the General Public License.  Of course, your program's commands\n+might be different; for a GUI interface, you would use an \"about box\".\n+\n+  You should also get your employer (if you work as a programmer) or school,\n+if any, to sign a \"copyright disclaimer\" for the program, if necessary.\n+For more information on this, and how to apply and follow the GNU GPL, see\n+<http://www.gnu.org/licenses/>.\n+\n+  The GNU General Public License does not permit incorporating your program\n+into proprietary programs.  If your program is a subroutine library, you\n+may consider it more useful to permit linking proprietary applications with\n+the library.  If this is what you want to do, use the GNU Lesser General\n+Public License instead of this License.  But first, please read\n+<http://www.gnu.org/philosophy/why-not-lgpl.html>.", "changes": 674}], "1174": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d05cb6d8e3af84f0f3adee67f8693b0a6abd27f6/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/d05cb6d8e3af84f0f3adee67f8693b0a6abd27f6/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=d05cb6d8e3af84f0f3adee67f8693b0a6abd27f6", "filename": "package.json", "sha": "7578056f7376b2695685ca382b126ecb947d0148", "additions": 1, "patch": "@@ -21,6 +21,7 @@\n     \"coffee-script\": \"1.6.3\",\n     \"connect-multiparty\": \"^1.2.5\",\n     \"express\": \"^3.21.2\",\n+    \"is-promise\": \"^2.1.0\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",\n     \"scoped-http-client\": \"0.11.0\"", "changes": 1}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/d05cb6d8e3af84f0f3adee67f8693b0a6abd27f6/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d05cb6d8e3af84f0f3adee67f8693b0a6abd27f6/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=d05cb6d8e3af84f0f3adee67f8693b0a6abd27f6", "filename": "src/listener.coffee", "sha": "30cb34188a521ef21611d3661679fea12a4454bb", "additions": 11, "patch": "@@ -1,5 +1,6 @@\n {inspect} = require 'util'\n async     = require 'async'\n+isPromise = require 'is-promise'\n \n {TextMessage} = require './message'\n Middleware = require './middleware'\n@@ -61,10 +62,18 @@ class Listener\n       # callback and calls done (never calls 'next')\n       executeListener = (context, done) =>\n         @robot.logger.debug \"Executing listener callback for Message '#{message}'\"\n+        emitError = (err) => @robot.emit('error', err, context.response)\n+        \n         try\n-          @callback context.response\n+          callbackResult = @callback context.response\n         catch err\n-          @robot.emit('error', err, context.response)\n+          emitError(err)\n+\n+        if isPromise(callbackResult)\n+          return callbackResult\n+            .then(done)\n+            .catch emitError\n+\n         done()\n \n       # When everything is finished (down the middleware stack and back up),", "changes": 13}], "1185": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a28d4277eae248a80737887683a8c339a818e6ae/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/a28d4277eae248a80737887683a8c339a818e6ae/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=a28d4277eae248a80737887683a8c339a818e6ae", "filename": "CHANGELOG.md", "sha": "0b6e64d4b9dced00d7c67f627374e1afbad28a8e", "additions": 13, "patch": "@@ -1,3 +1,16 @@\n+## [v2.19.0](https://github.com/github/hubot/tree/v2.19.0) (2016-05-0-6)\n+[Full Changelog](https://github.com/github/hubot/compare/v2.18.0...v2.19.0)\n+\n+**Implemented enhancements:**\n+\n+- Print warning for loading deprecated hubot-scripts.json [\\#970](https://github.com/github/hubot/pull/970) ([bkeepers](https://github.com/bkeepers) and [technicalpickles](https://github.com/technicalpickles)\n+\n+**Merged pull requests:**\n+\n+- Add link to Facebook Messenger Platform adapter [\\#1166](https://github.com/github/hubot/pull/1166) ([MrSaints](https://github.com/MrSaints))\n+- Add Hubot-Wechat to the adapter-list. [\\#1147](https://github.com/github/hubot/pull/1147) ([KasperDeng](https://github.com/KasperDeng))\n+- Fix broken links in docs [\\#1147](https://github.com/github/hubot/pull/1148) ([akameco](https://github.com/akameco))\n+\n ## [v2.18.0](https://github.com/github/hubot/tree/v2.18.0) (2016-01-19)\n [Full Changelog](https://github.com/github/hubot/compare/v2.17.0...v2.18.0)\n ", "changes": 13}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a28d4277eae248a80737887683a8c339a818e6ae/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/a28d4277eae248a80737887683a8c339a818e6ae/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=a28d4277eae248a80737887683a8c339a818e6ae", "filename": "package.json", "sha": "8c187e17998037a69d2dbfa7931fbc5b53895d11", "additions": 1, "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.18.0\",\n+  \"version\": \"2.19.0\",\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",", "changes": 2}], "1188": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a8d3a1539820fe4c5e90cb67d646ad5f76a69115/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/a8d3a1539820fe4c5e90cb67d646ad5f76a69115/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=a8d3a1539820fe4c5e90cb67d646ad5f76a69115", "filename": "docs/scripting.md", "sha": "8d76a4ebea949977a238b3837d54f27b0a7180d4", "additions": 1, "patch": "@@ -553,7 +553,7 @@ robot.respond /sleep it off/i, (res) ->\n   msg.reply 'zzzzz'\n ```\n \n-If the script needs to lookup user data, there are methods on `robot.brain` for looking up one or many users by id, name, or 'fuzzy' matching of name: `userForName`, `userForId`, `userForFuzzyName`, and `usersForFuzzyName`.\n+If the script needs to lookup user data, there are methods on `robot.brain` for looking up one or many users by id, name, or 'fuzzy' matching of name: `userForName`, `userForId`, `usersForFuzzyName`, and `usersForRawFuzzyName`.\n \n ```coffeescript\n module.exports = (robot) ->", "changes": 2}], "1189": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/0e0f6cc8715ca6d0a309f0acf9b1ed4152b095e1/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/0e0f6cc8715ca6d0a309f0acf9b1ed4152b095e1/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=0e0f6cc8715ca6d0a309f0acf9b1ed4152b095e1", "filename": "docs/scripting.md", "sha": "004c7c64d42ef41d3a7c801e41ce3d28ff16760f", "additions": 1, "patch": "@@ -223,7 +223,7 @@ If you need to control options on http and https more directly, you pass a secon\n   robot.http(\"https://midnight-train\", options)\n ```\n \n-In addition, if node-scoped-http-client doesn't suit you, you can can use [http](http://nodejs.org/api/http.html) and [https](http://nodejs.org/api/https.html) yourself directly, or any other node library like [request](https://github.com/request/request).\n+In addition, if node-scoped-http-client doesn't suit you, you can use [http](http://nodejs.org/api/http.html) and [https](http://nodejs.org/api/https.html) yourself directly, or any other node library like [request](https://github.com/request/request).\n \n ## Random\n ", "changes": 2}], "1196": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e946be6c2a419b1f6576a577d96e7660ed60076c/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/e946be6c2a419b1f6576a577d96e7660ed60076c/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=e946be6c2a419b1f6576a577d96e7660ed60076c", "filename": "docs/deploying/heroku.md", "sha": "b16b0e1098dbe94c74af2faf7b11324f2def2e4c", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/deploying/heroku/index.html\n layout: docs\n ---\n \n-If you've been following along with [Getting Started](../index.md), it's time to deploy so you can use it beyond just your local machine.\n+If you've been following along with [Getting Started](/docs/index.md), it's time to deploy so you can use it beyond just your local machine.\n [Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.\n \n Install the [Heroku Toolbelt](https://toolbelt.heroku.com/) to start, then follow their 'Getting Started' instructions, including logging in the first time:", "changes": 2}], "1197": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/6b97981e688df9739905334927227067b2347b84/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/6b97981e688df9739905334927227067b2347b84/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=6b97981e688df9739905334927227067b2347b84", "filename": "README.md", "sha": "1c83e962eca5ca8ffd9ee4d15c99fa86d3c1f6b7", "additions": 2, "patch": "@@ -13,6 +13,8 @@ are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTI\n \n If you'd like to chat, drop by [#hubot](http://webchat.freenode.net/?channels=#hubot) on FreeNode IRC.\n \n+w00p w00p!\n+\n ## License\n \n See the [LICENSE](LICENSE.md) file for license rights and limitations (MIT).", "changes": 2}], "1200": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4d5ae98c3e66448dad4805b5ba866e6aac184289/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/4d5ae98c3e66448dad4805b5ba866e6aac184289/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=4d5ae98c3e66448dad4805b5ba866e6aac184289", "filename": "docs/adapters.md", "sha": "65d4d4292686d592c44326d7144a41128c7c05a3", "additions": 1, "patch": "@@ -44,6 +44,7 @@ to have yours added to the list:\n * [Skype](https://github.com/netpro2k/hubot-skype)\n * [SkypeWeb](https://github.com/sdimkov/hubot-skype-web)\n * [Skyweb](https://github.com/EllisV/hubot-skyweb)\n+* [SkypeBots](https://github.com/ivadim/hubot-skypebots) - Using official skype bot api\n * [Talker](https://github.com/unixcharles/hubot-talker)\n * [Telegram](https://github.com/lukefx/hubot-telegram)\n * [Twilio IP Messaging](https://github.com/philnash/hubot-twilio-ip-messaging)", "changes": 1}], "1202": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/f7f8ab81b3cd1a7d94152d9df22bec9f14eaec59/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/f7f8ab81b3cd1a7d94152d9df22bec9f14eaec59/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=f7f8ab81b3cd1a7d94152d9df22bec9f14eaec59", "filename": ".travis.yml", "sha": "ad97abe89daf95a098b5bdb84b51eb361e8c9dab", "additions": 1, "patch": "@@ -5,7 +5,7 @@ matrix:\n     - node_js: \"0.10\"\n     - node_js: \"0.12\"\n     - node_js: \"4\"\n-    - node_js: \"5\"\n+    - node_js: \"6\"\n notifications:\n   email: false\n sudo: false", "changes": 2}], "1203": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c6ff710720b2582ecfd699800d4a213215a280d0/docs/deploying/azure.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6ff710720b2582ecfd699800d4a213215a280d0/docs/deploying/azure.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/azure.md?ref=c6ff710720b2582ecfd699800d4a213215a280d0", "filename": "docs/deploying/azure.md", "sha": "e2ee3c2f594f6ee9fb7856bee835b2048b6f1305", "additions": 5, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/deploying/azure/index.html\n layout: docs\n ---\n \n-If you've been following along with [Getting Started](../index.md), it's time to deploy so you can use it beyond just your local machine.\n+If you've been following along with [Getting Started](/docs/index.md), it's time to deploy so you can use it beyond just your local machine.\n [Azure](http://azure.microsoft.com/) is a way to deploy hubot as an alternative to [Heroku](/docs/deploying/heroku.md).\n \n You will need to install the azure-cli via npm after you have follow the initial instructions for your hubot.\n@@ -42,6 +42,10 @@ Now, create a new file in the base directory of hubot called `server.js` and put\n     require('coffee-script/register');\n     module.exports = require('hubot/bin/hubot.coffee');\n \n+Install coffee-script package.\n+\n+    npm install coffee-script --save\n+\n Finally you will need to add the environment variables to the website to make sure it runs properly. You can either do it through the GUI (under configuration) or you can use the Azure PowerShell command line, as follows (example is showing slack as an adapter and mynewhubot as the website name).\n \n     % $settings = New-Object Hashtable", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c6ff710720b2582ecfd699800d4a213215a280d0/docs/deploying/bluemix.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6ff710720b2582ecfd699800d4a213215a280d0/docs/deploying/bluemix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/bluemix.md?ref=c6ff710720b2582ecfd699800d4a213215a280d0", "filename": "docs/deploying/bluemix.md", "sha": "43bf5c08d131050b56692b1964f45fa6a68f67b1", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/deploying/bluemix/index.html\n layout: docs\n ---\n \n-If you've been following along with [Getting Started](../index.md), it's time\n+If you've been following along with [Getting Started](/docs/index.md), it's time\n to deploy so you can use it beyond just your local machine.\n [IBM Bluemix](http://bluemix.net) is a way to deploy hubot as an alternative to\n [Heroku](/docs/deploying/heroku.md). It is built on the open-source project", "changes": 2}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c6ff710720b2582ecfd699800d4a213215a280d0/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/c6ff710720b2582ecfd699800d4a213215a280d0/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=c6ff710720b2582ecfd699800d4a213215a280d0", "filename": "docs/index.md", "sha": "3986136ce6dce7598a179b6f09e0e2c510b8deb5", "additions": 2, "patch": "@@ -121,6 +121,8 @@ You can deploy hubot to Heroku, which is the officially supported method.\n Additionally you are able to deploy hubot to a UNIX-like system or Windows.\n Please note the support for deploying to Windows isn't officially supported.\n \n+* [Deploying Hubot onto Azure](/docs/deploying/azure.md)\n+* [Deploying Hubot onto Bluemix](/docs/deploying/bluemix.md)\n * [Deploying Hubot onto Heroku](/docs/deploying/heroku.md)\n * [Deploying Hubot onto UNIX](/docs/deploying/unix.md)\n * [Deploying Hubot onto Windows](/docs/deploying/windows.md)", "changes": 2}], "1206": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/.editorconfig", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/.editorconfig", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.editorconfig?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": ".editorconfig", "sha": "5760be5836966242237ac86fd439b632b34f58e3", "additions": 12, "patch": "@@ -0,0 +1,12 @@\n+# http://editorconfig.org\n+root = true\n+\n+[*]\n+indent_style = space\n+indent_size = 2\n+charset = utf-8\n+trim_trailing_whitespace = true\n+insert_final_newline = true\n+\n+[*.md]\n+trim_trailing_whitespace = false", "changes": 12}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/.gitignore", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/.gitignore", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.gitignore?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": ".gitignore", "sha": "eb150b9bfc2cd6ed62518eff0f5b3510f5dd286f", "additions": 3, "patch": "@@ -1,3 +1,6 @@\n node_modules\n .hubot_history\n .node-version\n+log\n+run\n+.hubotrc", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Procfile?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": "Procfile", "sha": "9cf394ec3b78c3cc3be21b626c69fdbf221ab861", "additions": 1, "patch": "@@ -0,0 +1 @@\n+web: bin/hubot -a slack", "changes": 1}, {"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": "README.md", "sha": "eadd029df80a98bb52ec1e1e50cd83ea2c18f3ac", "additions": 150, "patch": "@@ -1,18 +1,156 @@\n-# Hubot\n+# merzbot\n \n-Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n-cool. He's [extendable with scripts](http://hubot.github.com/docs/#scripts) and can work on [many\n-different chat services](https://hubot.github.com/docs/adapters/).\n+merzbot is a chat bot built on the [Hubot][hubot] framework. It was\n+initially generated by [generator-hubot][generator-hubot] to get you up and running as quick as possible.\n \n-This repository provides a library that's distributed by `npm` that you\n-use for building your own bots.  See the [documentation](http://hubot.github.com/docs)\n-for details on getting up and running with your very own robot friend.\n+merzbot primarily is my development environment for hubot scripts and my personal bot.\n \n-In most cases, you'll probably never have to hack on this repo directly if you\n-are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTING.md)\n+This README is intended to help get you started. Definitely update and improve\n+to talk about your own instance, how to use and deploy, what functionality is\n+available, etc!\n \n-If you'd like to chat, drop by [#hubot](http://webchat.freenode.net/?channels=#hubot) on FreeNode IRC.\n+[hubot]: http://hubot.github.com\n+[generator-hubot]: https://github.com/github/generator-hubot\n \n-## License\n+### Running merzbot Locally\n \n-See the [LICENSE](LICENSE.md) file for license rights and limitations (MIT).\n+You can test your hubot by running the following, however some plugins will not\n+behave as expected unless the [environment variables](#configuration) they rely\n+upon have been set.\n+\n+You can start merzbot locally by running:\n+\n+    % bin/hubot\n+\n+You'll see some start up output and a prompt:\n+\n+    [Sat Feb 28 2015 12:38:27 GMT+0000 (GMT)] INFO Using default redis on localhost:6379\n+    merzbot>\n+\n+Then you can interact with merzbot by typing `merzbot help`.\n+\n+    merzbot> merzbot help\n+    merzbot animate me <query> - The same thing as `image me`, except adds [snip]\n+    merzbot help - Displays all of the help commands that merzbot knows about.\n+    ...\n+\n+### Configuration\n+\n+A few scripts (including some installed by default) require environment\n+variables to be set as a simple form of configuration.\n+\n+Each script should have a commented header which contains a \"Configuration\"\n+section that explains which values it requires to be placed in which variable.\n+When you have lots of scripts installed this process can be quite labour\n+intensive. The following shell command can be used as a stop gap until an\n+easier way to do this has been implemented.\n+\n+    grep -o 'hubot-[a-z0-9_-]\\+' external-scripts.json | \\\n+      xargs -n1 -I {} sh -c 'sed -n \"/^# Configuration/,/^#$/ s/^/{} /p\" \\\n+          $(find node_modules/{}/ -name \"*.coffee\")' | \\\n+        awk -F '#' '{ printf \"%-25s %s\\n\", $1, $2 }'\n+\n+How to set environment variables will be specific to your operating system.\n+Rather than recreate the various methods and best practices in achieving this,\n+it's suggested that you search for a dedicated guide focused on your OS.\n+\n+### Scripting\n+\n+An example script is included at `scripts/example.coffee`, so check it out to\n+get started, along with the [Scripting Guide][scripting-docs].\n+\n+For many common tasks, there's a good chance someone has already one to do just\n+the thing.\n+\n+[scripting-docs]: https://github.com/github/hubot/blob/master/docs/scripting.md\n+\n+### external-scripts\n+\n+There will inevitably be functionality that everyone will want. Instead of\n+writing it yourself, you can use existing plugins.\n+\n+Hubot is able to load plugins from third-party `npm` packages. This is the\n+recommended way to add functionality to your hubot. You can get a list of\n+available hubot plugins on [npmjs.com][npmjs] or by using `npm search`:\n+\n+    % npm search hubot-scripts panda\n+    NAME             DESCRIPTION                        AUTHOR DATE       VERSION KEYWORDS\n+    hubot-pandapanda a hubot script for panda responses =missu 2014-11-30 0.9.2   hubot hubot-scripts panda\n+    ...\n+\n+\n+To use a package, check the package's documentation, but in general it is:\n+\n+1. Use `npm install --save` to add the package to `package.json` and install it\n+2. Add the package name to `external-scripts.json` as a double quoted string\n+\n+You can review `external-scripts.json` to see what is included by default.\n+\n+##### Advanced Usage\n+\n+It is also possible to define `external-scripts.json` as an object to\n+explicitly specify which scripts from a package should be included. The example\n+below, for example, will only activate two of the six available scripts inside\n+the `hubot-fun` plugin, but all four of those in `hubot-auto-deploy`.\n+\n+```json\n+{\n+  \"hubot-fun\": [\n+    \"crazy\",\n+    \"thanks\"\n+  ],\n+  \"hubot-auto-deploy\": \"*\"\n+}\n+```\n+\n+**Be aware that not all plugins support this usage and will typically fallback\n+to including all scripts.**\n+\n+[npmjs]: https://www.npmjs.com\n+\n+### hubot-scripts\n+\n+Before hubot plugin packages were adopted, most plugins were held in the\n+[hubot-scripts][hubot-scripts] package. Some of these plugins have yet to be\n+migrated to their own packages. They can still be used but the setup is a bit\n+different.\n+\n+To enable scripts from the hubot-scripts package, add the script name with\n+extension as a double quoted string to the `hubot-scripts.json` file in this\n+repo.\n+\n+[hubot-scripts]: https://github.com/github/hubot-scripts\n+\n+##  Persistence\n+\n+If you are going to use the `hubot-redis-brain` package (strongly suggested),\n+you will need to add the Redis to Go addon on Heroku which requires a verified\n+account or you can create an account at [Redis to Go][redistogo] and manually\n+set the `REDISTOGO_URL` variable.\n+\n+    % heroku config:add REDISTOGO_URL=\"...\"\n+\n+If you don't need any persistence feel free to remove the `hubot-redis-brain`\n+from `external-scripts.json` and you don't need to worry about redis at all.\n+\n+[redistogo]: https://redistogo.com/\n+\n+## Adapters\n+\n+Adapters are the interface to the service you want your hubot to run on, such\n+as Campfire or IRC. There are a number of third party adapters that the\n+community have contributed. Check [Hubot Adapters][hubot-adapters] for the\n+available ones.\n+\n+If you would like to run a non-Campfire or shell adapter you will need to add\n+the adapter package as a dependency to the `package.json` file in the\n+`dependencies` section.\n+\n+Once you've added the dependency with `npm install --save` to install it you\n+can then run hubot with the adapter.\n+\n+    % bin/hubot -a <adapter>\n+\n+Where `<adapter>` is the name of your adapter without the `hubot-` prefix.\n+\n+[hubot-adapters]: https://github.com/github/hubot/blob/master/docs/adapters.md", "changes": 162}, {"status": "modified", "deletions": 132, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": "bin/hubot", "sha": "024632117eea413e576fd335e1d71a4ebf6f4148", "additions": 5, "patch": "@@ -1,135 +1,8 @@\n-#!/usr/bin/env coffee\n-# vim:ft=coffee ts=2 sw=2 et :\n-# -*- mode:coffee -*-\n+#!/bin/sh\n \n-Hubot    = require '..'\n+set -e\n \n-Fs       = require 'fs'\n-OptParse = require 'optparse'\n-Path     = require 'path'\n+npm install\n+export PATH=\"node_modules/.bin:node_modules/hubot/node_modules/.bin:$PATH\"\n \n-Switches = [\n-  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n-  [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n-  [ \"-h\", \"--help\",            \"Display the help information\" ],\n-  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n-  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n-  [ \"-r\", \"--require PATH\",    \"Alternative scripts path\" ],\n-  [ \"-t\", \"--config-check\",    \"Test hubot's config to make sure it won't fail at startup\"]\n-  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n-]\n-\n-Options =\n-  adapter:     process.env.HUBOT_ADAPTER or \"shell\"\n-  alias:       process.env.HUBOT_ALIAS   or false\n-  create:      process.env.HUBOT_CREATE  or false\n-  enableHttpd: process.env.HUBOT_HTTPD   or true\n-  scripts:     process.env.HUBOT_SCRIPTS or []\n-  name:        process.env.HUBOT_NAME    or \"Hubot\"\n-  path:        process.env.HUBOT_PATH    or \".\"\n-  configCheck: false\n-\n-Parser = new OptParse.OptionParser(Switches)\n-Parser.banner = \"Usage hubot [options]\"\n-\n-Parser.on \"adapter\", (opt, value) ->\n-  Options.adapter = value\n-\n-Parser.on \"create\", (opt, value) ->\n-  Options.path = value\n-  Options.create = true\n-\n-Parser.on \"disable-httpd\", (opt) ->\n-  Options.enableHttpd = false\n-\n-Parser.on \"help\", (opt, value) ->\n-  console.log Parser.toString()\n-  process.exit 0\n-\n-Parser.on \"alias\", (opt, value) ->\n-  value or= '/'\n-  Options.alias = value\n-\n-Parser.on \"name\", (opt, value) ->\n-  Options.name = value\n-\n-Parser.on \"require\", (opt, value) ->\n-  Options.scripts.push(value)\n-\n-Parser.on \"config-check\", (opt) ->\n-  Options.configCheck = true\n-\n-Parser.on \"version\", (opt, value) ->\n-  Options.version = true\n-\n-Parser.on (opt, value) ->\n-  console.warn \"Unknown option: #{opt}\"\n-\n-Parser.parse process.argv\n-\n-unless process.platform is \"win32\"\n-  process.on 'SIGTERM', ->\n-    process.exit 0\n-\n-if Options.create\n-  console.error \"'hubot --create' is deprecated. Use the yeoman generator instead:\"\n-  console.error \"    npm install -g yo generator-hubot\"\n-  console.error \"    mkdir -p #{Options.path}\"\n-  console.error \"    cd #{Options.path}\"\n-  console.error \"    yo hubot\"\n-  console.error \"See https://github.com/github/hubot/blob/master/docs/index.md for more details on getting started.\"\n-  process.exit 1\n-\n-else\n-  robot = Hubot.loadBot undefined, Options.adapter, Options.enableHttpd, Options.name, Options.alias\n-\n-  if Options.version\n-    console.log robot.version\n-    process.exit 0\n-\n-  loadScripts = ->\n-    scriptsPath = Path.resolve \".\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    scriptsPath = Path.resolve \".\", \"src\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    hubotScripts = Path.resolve \".\", \"hubot-scripts.json\"\n-    if Fs.existsSync(hubotScripts)\n-      data = Fs.readFileSync(hubotScripts)\n-      if data.length > 0\n-        try\n-          scripts = JSON.parse data\n-          scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n-          robot.loadHubotScripts scriptsPath, scripts\n-        catch err\n-          console.error \"Error parsing JSON data from hubot-scripts.json: #{err}\"\n-          process.exit(1)\n-\n-    externalScripts = Path.resolve \".\", \"external-scripts.json\"\n-    if Fs.existsSync(externalScripts)\n-      Fs.readFile externalScripts, (err, data) ->\n-        if data.length > 0\n-          try\n-            scripts = JSON.parse data\n-          catch err\n-            console.error \"Error parsing JSON data from external-scripts.json: #{err}\"\n-            process.exit(1)\n-          robot.loadExternalScripts scripts\n-\n-    for path in Options.scripts\n-      if path[0] == '/'\n-        scriptsPath = path\n-      else\n-        scriptsPath = Path.resolve \".\", path\n-      robot.load scriptsPath\n-\n-  if Options.configCheck\n-    loadScripts()\n-    console.log \"OK\"\n-    process.exit 0\n-\n-  robot.adapter.once 'connected', loadScripts\n-\n-  robot.run()\n+exec node_modules/.bin/hubot --name \"merzbot\" \"$@\"", "changes": 137}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/bin/hubot.cmd", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/bin/hubot.cmd", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot.cmd?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": "bin/hubot.cmd", "sha": "12ec578f8f615e64d1a464f53fffe6acd7f91b2e", "additions": 3, "patch": "@@ -0,0 +1,3 @@\n+@echo off\n+\n+npm install && node_modules\\.bin\\hubot.cmd --name \"merzbot\" %* \n\\ No newline at end of file", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/external-scripts.json", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/external-scripts.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/external-scripts.json?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": "external-scripts.json", "sha": "8425d7032b48bfddd59b621b4dcf6a9946083621", "additions": 13, "patch": "@@ -0,0 +1,13 @@\n+[\n+  \"hubot-diagnostics\",\n+  \"hubot-help\",\n+  \"hubot-google-images\",\n+  \"hubot-google-translate\",\n+  \"hubot-pugme\",\n+  \"hubot-maps\",\n+  \"hubot-redis-brain\",\n+  \"hubot-rules\",\n+  \"hubot-shipit\",\n+  \"hubot-meowme\",\n+  \"hubot-9gag\"\n+]", "changes": 13}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/hubot-scripts.json", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/hubot-scripts.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/hubot-scripts.json?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": "hubot-scripts.json", "sha": "0637a088a01e8ddab3bf3fa98dbe804cbde1a0dc", "additions": 1, "patch": "@@ -0,0 +1 @@\n+[]\n\\ No newline at end of file", "changes": 1}, {"status": "modified", "deletions": 42, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": "package.json", "sha": "310ee0b8541874864795a0e6cea5ca52709d5f1f", "additions": 21, "patch": "@@ -1,48 +1,27 @@\n {\n-  \"name\": \"hubot\",\n-  \"version\": \"2.18.0\",\n-  \"author\": \"hubot\",\n-  \"keywords\": [\n-    \"github\",\n-    \"hubot\",\n-    \"campfire\",\n-    \"bot\"\n-  ],\n-  \"description\": \"A simple helpful robot for your Company\",\n-  \"license\": \"MIT\",\n-  \"repository\": {\n-    \"type\": \"git\",\n-    \"url\": \"https://github.com/github/hubot.git\"\n-  },\n+  \"name\": \"merzbot\",\n+  \"version\": \"1.0.0\",\n+  \"private\": true,\n+  \"author\": \"Niklas <nm4500@rhoen.de>\",\n+  \"description\": \"My personal bot\",\n   \"dependencies\": {\n-    \"async\": \">=0.1.0 <1.0.0\",\n-    \"chalk\": \"^1.0.0\",\n-    \"cline\": \"^0.8.2\",\n-    \"coffee-script\": \"1.6.3\",\n-    \"connect-multiparty\": \"^1.2.5\",\n-    \"express\": \"^3.21.2\",\n-    \"log\": \"1.4.0\",\n-    \"optparse\": \"1.0.4\",\n-    \"scoped-http-client\": \"0.11.0\"\n-  },\n-  \"devDependencies\": {\n-    \"hubot-mock-adapter\": \"^1.0.0\",\n-    \"coffee-errors\": \"0.8.6\",\n-    \"mocha\": \"^2.1.0\",\n-    \"mockery\": \"^1.4.0\",\n-    \"sinon-chai\": \"^2.8.0\",\n-    \"sinon\": \"~1.17.0\",\n-    \"chai\": \"~2.1.0\"\n+    \"hubot\": \"^2.18.0\",\n+    \"hubot-9gag\": \"^0.2.0\",\n+    \"hubot-diagnostics\": \"0.0.1\",\n+    \"hubot-google-images\": \"^0.2.6\",\n+    \"hubot-google-translate\": \"^0.2.0\",\n+    \"hubot-help\": \"^0.1.3\",\n+    \"hubot-maps\": \"0.0.2\",\n+    \"hubot-meowme\": \">= 0.0.1\",\n+    \"hubot-pugme\": \"^0.1.0\",\n+    \"hubot-redis-brain\": \"0.0.3\",\n+    \"hubot-rules\": \"^0.1.1\",\n+    \"hubot-scripts\": \"^2.16.2\",\n+    \"hubot-shipit\": \"^0.2.0\",\n+    \"hubot-slack\": \"^3.4.2\",\n+    \"tumblr.js\": \"0.0.7\"\n   },\n   \"engines\": {\n-    \"node\": \">= 0.8.x\",\n-    \"npm\": \">= 1.1.x\"\n-  },\n-  \"main\": \"./index\",\n-  \"bin\": {\n-    \"hubot\": \"./bin/hubot\"\n-  },\n-  \"scripts\": {\n-    \"test\": \"./script/test\"\n+    \"node\": \"0.10.x\"\n   }\n }", "changes": 63}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/scripts/carme.js", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/scripts/carme.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/scripts/carme.js?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": "scripts/carme.js", "sha": "11f2783fd33f7bb9efbc5972c05e9f4d6e1d4939", "additions": 25, "patch": "@@ -0,0 +1,25 @@\n+// Description:\n+//   Get some tumblr tag\n+//\n+// Dependencies:\n+//   None\n+//\n+// Configuration:\n+//   export TUMBLR_API_KEY='YOURAPIKEY'\n+//\n+// Commands:\n+//   hubot carme \"sometag\"\n+module.exports = function(robot) {\n+    robot.hear(/carme (.*)/i, function(res){\n+      var cartag = res.match[1];\n+      var tumblr = require('tumblr.js');\n+      var apikey = process.env.TUMBLR_API_KEY;\n+      console.log(apikey);\n+      var client = tumblr.createClient({ consumer_key: apikey });\n+\n+      client.tagged(cartag, { limit: 1 }, function (err, data) {\n+          console.log(data);\n+          res.reply(data[0].image_permalink);\n+      });\n+    });\n+}", "changes": 25}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/scripts/example.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/scripts/example.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/scripts/example.coffee?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": "scripts/example.coffee", "sha": "7c9839c5f9b2fcf5e2d7beac40db563cf088e544", "additions": 106, "patch": "@@ -0,0 +1,106 @@\n+# Description:\n+#   Example scripts for you to examine and try out.\n+#\n+# Notes:\n+#   They are commented out by default, because most of them are pretty silly and\n+#   wouldn't be useful and amusing enough for day to day huboting.\n+#   Uncomment the ones you want to try and experiment with.\n+#\n+#   These are from the scripting documentation: https://github.com/github/hubot/blob/master/docs/scripting.md\n+\n+module.exports = (robot) ->\n+\n+  # robot.hear /badger/i, (res) ->\n+  #   res.send \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\"\n+  #\n+  # robot.respond /open the (.*) doors/i, (res) ->\n+  #   doorType = res.match[1]\n+  #   if doorType is \"pod bay\"\n+  #     res.reply \"I'm afraid I can't let you do that.\"\n+  #   else\n+  #     res.reply \"Opening #{doorType} doors\"\n+  #\n+  # robot.hear /I like pie/i, (res) ->\n+  #   res.emote \"makes a freshly baked pie\"\n+  #\n+  # lulz = ['lol', 'rofl', 'lmao']\n+  #\n+  # robot.respond /lulz/i, (res) ->\n+  #   res.send res.random lulz\n+  #\n+  # robot.topic (res) ->\n+  #   res.send \"#{res.message.text}? That's a Paddlin'\"\n+  #\n+  #\n+  # enterReplies = ['Hi', 'Target Acquired', 'Firing', 'Hello friend.', 'Gotcha', 'I see you']\n+  # leaveReplies = ['Are you still there?', 'Target lost', 'Searching']\n+  #\n+  # robot.enter (res) ->\n+  #   res.send res.random enterReplies\n+  # robot.leave (res) ->\n+  #   res.send res.random leaveReplies\n+  #\n+  # answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n+  #\n+  # robot.respond /what is the answer to the ultimate question of life/, (res) ->\n+  #   unless answer?\n+  #     res.send \"Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again\"\n+  #     return\n+  #   res.send \"#{answer}, but what is the question?\"\n+  #\n+  # robot.respond /you are a little slow/, (res) ->\n+  #   setTimeout () ->\n+  #     res.send \"Who you calling 'slow'?\"\n+  #   , 60 * 1000\n+  #\n+  # annoyIntervalId = null\n+  #\n+  # robot.respond /annoy me/, (res) ->\n+  #   if annoyIntervalId\n+  #     res.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+  #     return\n+  #\n+  #   res.send \"Hey, want to hear the most annoying sound in the world?\"\n+  #   annoyIntervalId = setInterval () ->\n+  #     res.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+  #   , 1000\n+  #\n+  # robot.respond /unannoy me/, (res) ->\n+  #   if annoyIntervalId\n+  #     res.send \"GUYS, GUYS, GUYS!\"\n+  #     clearInterval(annoyIntervalId)\n+  #     annoyIntervalId = null\n+  #   else\n+  #     res.send \"Not annoying you right now, am I?\"\n+  #\n+  #\n+  # robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n+  #   room   = req.params.room\n+  #   data   = JSON.parse req.body.payload\n+  #   secret = data.secret\n+  #\n+  #   robot.messageRoom room, \"I have a secret: #{secret}\"\n+  #\n+  #   res.send 'OK'\n+  #\n+  # robot.error (err, res) ->\n+  #   robot.logger.error \"DOES NOT COMPUTE\"\n+  #\n+  #   if res?\n+  #     res.reply \"DOES NOT COMPUTE\"\n+  #\n+  # robot.respond /have a soda/i, (res) ->\n+  #   # Get number of sodas had (coerced to a number).\n+  #   sodasHad = robot.brain.get('totalSodas') * 1 or 0\n+  #\n+  #   if sodasHad > 4\n+  #     res.reply \"I'm too fizzy..\"\n+  #\n+  #   else\n+  #     res.reply 'Sure!'\n+  #\n+  #     robot.brain.set 'totalSodas', sodasHad+1\n+  #\n+  # robot.respond /sleep it off/i, (res) ->\n+  #   robot.brain.set 'totalSodas', 0\n+  #   res.reply 'zzzzz'", "changes": 106}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/scripts/playground.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/scripts/playground.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/scripts/playground.coffee?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": "scripts/playground.coffee", "sha": "45011d16b865761e7fbf7a627954d66f2b7331da", "additions": 106, "patch": "@@ -0,0 +1,106 @@\n+# Description:\n+#   Example scripts for you to examine and try out.\n+#\n+# Notes:\n+#   They are commented out by default, because most of them are pretty silly and\n+#   wouldn't be useful and amusing enough for day to day huboting.\n+#   Uncomment the ones you want to try and experiment with.\n+#\n+#   These are from the scripting documentation: https://github.com/github/hubot/blob/master/docs/scripting.md\n+\n+module.exports = (robot) ->\n+\n+  robot.hear /girls/i, (res) ->\n+     res.send \"Girls girls girls\"\n+  #\n+  # robot.respond /open the (.*) doors/i, (res) ->\n+  #   doorType = res.match[1]\n+  #   if doorType is \"pod bay\"\n+  #     res.reply \"I'm afraid I can't let you do that.\"\n+  #   else\n+  #     res.reply \"Opening #{doorType} doors\"\n+  #\n+  # robot.hear /I like pie/i, (res) ->\n+  #   res.emote \"makes a freshly baked pie\"\n+  #\n+  # lulz = ['lol', 'rofl', 'lmao']\n+  #\n+  # robot.respond /lulz/i, (res) ->\n+  #   res.send res.random lulz\n+  #\n+  # robot.topic (res) ->\n+  #   res.send \"#{res.message.text}? That's a Paddlin'\"\n+  #\n+  #\n+  # enterReplies = ['Hi', 'Target Acquired', 'Firing', 'Hello friend.', 'Gotcha', 'I see you']\n+  # leaveReplies = ['Are you still there?', 'Target lost', 'Searching']\n+  #\n+  # robot.enter (res) ->\n+  #   res.send res.random enterReplies\n+  # robot.leave (res) ->\n+  #   res.send res.random leaveReplies\n+  #\n+  # answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING\n+  #\n+  # robot.respond /what is the answer to the ultimate question of life/, (res) ->\n+  #   unless answer?\n+  #     res.send \"Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again\"\n+  #     return\n+  #   res.send \"#{answer}, but what is the question?\"\n+  #\n+  # robot.respond /you are a little slow/, (res) ->\n+  #   setTimeout () ->\n+  #     res.send \"Who you calling 'slow'?\"\n+  #   , 60 * 1000\n+  #\n+  # annoyIntervalId = null\n+  #\n+  # robot.respond /annoy me/, (res) ->\n+  #   if annoyIntervalId\n+  #     res.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+  #     return\n+  #\n+  #   res.send \"Hey, want to hear the most annoying sound in the world?\"\n+  #   annoyIntervalId = setInterval () ->\n+  #     res.send \"AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH\"\n+  #   , 1000\n+  #\n+  # robot.respond /unannoy me/, (res) ->\n+  #   if annoyIntervalId\n+  #     res.send \"GUYS, GUYS, GUYS!\"\n+  #     clearInterval(annoyIntervalId)\n+  #     annoyIntervalId = null\n+  #   else\n+  #     res.send \"Not annoying you right now, am I?\"\n+  #\n+  #\n+  # robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n+  #   room   = req.params.room\n+  #   data   = JSON.parse req.body.payload\n+  #   secret = data.secret\n+  #\n+  #   robot.messageRoom room, \"I have a secret: #{secret}\"\n+  #\n+  #   res.send 'OK'\n+  #\n+  # robot.error (err, res) ->\n+  #   robot.logger.error \"DOES NOT COMPUTE\"\n+  #\n+  #   if res?\n+  #     res.reply \"DOES NOT COMPUTE\"\n+  #\n+  # robot.respond /have a soda/i, (res) ->\n+  #   # Get number of sodas had (coerced to a number).\n+  #   sodasHad = robot.brain.get('totalSodas') * 1 or 0\n+  #\n+  #   if sodasHad > 4\n+  #     res.reply \"I'm too fizzy..\"\n+  #\n+  #   else\n+  #     res.reply 'Sure!'\n+  #\n+  #     robot.brain.set 'totalSodas', sodasHad+1\n+  #\n+  # robot.respond /sleep it off/i, (res) ->\n+  #   robot.brain.set 'totalSodas', 0\n+  #   res.reply 'zzzzz'", "changes": 106}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/startHubot.json", "blob_url": "https://github.com/hubotio/hubot/blob/8c895ebabf3eb85685a8342ee4a03009a1fd56f7/startHubot.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/startHubot.json?ref=8c895ebabf3eb85685a8342ee4a03009a1fd56f7", "filename": "startHubot.json", "sha": "920fd7ceef6f62bade981b93c752224eda4964e3", "additions": 18, "patch": "@@ -0,0 +1,18 @@\n+{\n+  \"apps\" : [{\n+    \"name\"        : \"hubot\",\n+    \"script\"           : \"bin/hubot\",\n+    \"exec_interpreter\" : \"sh\",\n+    \"args\"             : \"--adapter slack\",\n+    \"error_file\"       : \"log/hubot.stderr.log\",\n+    \"out_file\"         : \"log/hubot.stdout.log\",\n+    \"watch\": [\"bin\", \"src\", \"script\", \"scripts\"],\n+    \"ignore_watch\"      : [\"[\\\\/\\\\\\\\]\\\\./\", \"node_modules\", \"README.md\"],\n+    \"log_date_format\"  : \"DD-MM-YYYY HH:mm \",\n+    \"merge_logs\"       : true,\n+    \"exec_mode\"  : \"fork_mode\",\n+    \"env\": {\n+      \"NODE_ENV\": \"development\"\n+    }\n+    }]\n+  }", "changes": 18}], "1209": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/998638973049a6a695b18691446046441900e89e/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/998638973049a6a695b18691446046441900e89e/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=998638973049a6a695b18691446046441900e89e", "filename": "src/adapters/shell.coffee", "sha": "61ccd1dd680d1c57af5b36c767d8e713399c6b1e", "additions": 2, "patch": "@@ -64,7 +64,8 @@ class Shell extends Adapter\n         startIndex = history.length - historySize\n         history = history.reverse().splice(startIndex, historySize)\n \n-        outstream = fs.createWriteStream(historyPath)\n+        fileOpts = { mode:0o600 }\n+        outstream = fs.createWriteStream(historyPath, fileOpts)\n         # >= node 0.10\n         outstream.on 'finish', () =>\n           @shutdown()", "changes": 3}], "1214": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/fe37e3fa7c7ed23e9105b6252dc98a7701cc0b48/docs/deploying/unix.md", "blob_url": "https://github.com/hubotio/hubot/blob/fe37e3fa7c7ed23e9105b6252dc98a7701cc0b48/docs/deploying/unix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/unix.md?ref=fe37e3fa7c7ed23e9105b6252dc98a7701cc0b48", "filename": "docs/deploying/unix.md", "sha": "f3213dbafeb78767177378292d127a379f997781", "additions": 3, "patch": "@@ -29,8 +29,8 @@ feel a dirty hack, but it works when you are starting out.\n If you have a Ruby background, you might be more comfortable using\n [capistrano](https://github.com/capistrano/capistrano).\n \n-If you have a [Chef](http://www.opscode.com/chef/) background, there's a\n-[deploy](http://docs.opscode.com/resource_deploy.html) resource for managing\n+If you have a [Chef](http://www.chef.io/chef/) background, there's a\n+[deploy](https://docs.chef.io/resource_deploy.html) resource for managing\n deployments.\n \n ## Starting, stopping, and restarting hubot\n@@ -54,6 +54,7 @@ really, you probably want some process monitoring using tools like\n [god](http://godrb.com/),\n [bluepill](https://github.com/arya/bluepill),\n [upstart](http://upstart.ubuntu.com/),\n+[runit](http://smarden.org/runit/),\n [systemd](http://freedesktop.org/wiki/Software/systemd/).\n \n For starting at boot, you can create an init script appropriate for your UNIX", "changes": 5}], "1215": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/b95814211a14d0175ab662dae72664ab16a7a8f0/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/b95814211a14d0175ab662dae72664ab16a7a8f0/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=b95814211a14d0175ab662dae72664ab16a7a8f0", "filename": "docs/scripting.md", "sha": "5376763d3c471240f396f202ebae1e5686c1c2f2", "additions": 1, "patch": "@@ -3,7 +3,7 @@ permalink: /docs/scripting/index.html\n layout: docs\n ---\n \n-Hubot out of the box doesn't do too much but it is an extensible, scriptable robot friend. There are [hundreds of scripts written and maintained by the community](/docs/#scripts.md) and it's easy to write your own.  You can create a custom script in hubot's `scripts` directory or [create a script package](#creating-a-script-package) for sharing with the community!\n+Hubot out of the box doesn't do too much but it is an extensible, scriptable robot friend. There are [hundreds of scripts written and maintained by the community](https://hubot.github.com/docs/#scripts) and it's easy to write your own.  You can create a custom script in hubot's `scripts` directory or [create a script package](#creating-a-script-package) for sharing with the community!\n \n ## Anatomy of a script\n ", "changes": 2}], "1221": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3b59080235b55f85d6f0d8956a2af7df2a4b3b40/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/3b59080235b55f85d6f0d8956a2af7df2a4b3b40/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=3b59080235b55f85d6f0d8956a2af7df2a4b3b40", "filename": "package.json", "sha": "fa6e655f4de87a2cdf475724f6a7933374f6c249", "additions": 1, "patch": "@@ -21,6 +21,7 @@\n     \"coffee-script\": \"1.6.3\",\n     \"connect-multiparty\": \"^1.2.5\",\n     \"express\": \"^3.21.2\",\n+    \"lodash.merge\": \"^4.5.1\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",\n     \"scoped-http-client\": \"0.11.0\"", "changes": 1}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/3b59080235b55f85d6f0d8956a2af7df2a4b3b40/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3b59080235b55f85d6f0d8956a2af7df2a4b3b40/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=3b59080235b55f85d6f0d8956a2af7df2a4b3b40", "filename": "src/brain.coffee", "sha": "3f019e2a8d3b4dca89c55857301f5881318a031a", "additions": 5, "patch": "@@ -2,6 +2,8 @@\n \n User = require './user'\n \n+lodashMerge = require 'lodash.merge'\n+\n class Brain extends EventEmitter\n   # Represents somewhat persistent storage for the robot. Extend this.\n   #\n@@ -86,9 +88,7 @@ class Brain extends EventEmitter\n   #\n   # Caveats: Deeply nested structures don't merge well.\n   mergeData: (data) ->\n-    for k of (data or { })\n-      @data[k] = data[k]\n-\n+    @data = lodashMerge @data, data\n     @emit 'loaded', @data\n \n   # Public: Get an Array of User objects stored in the brain.\n@@ -105,8 +105,8 @@ class Brain extends EventEmitter\n     unless user\n       user = new User id, options\n       @data.users[id] = user\n-\n-    if options and options.room and (!user.room or user.room isnt options.room)\n+    if (options and options.room and (!user.room or user.room isnt options.room)) or (options and options.roles and (!user.roles))\n+      options = lodashMerge user, options\n       user = new User id, options\n       @data.users[id] = user\n ", "changes": 10}], "1222": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/bd7290b511ec8c14a2745658d5933e5ef75183ca/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/bd7290b511ec8c14a2745658d5933e5ef75183ca/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=bd7290b511ec8c14a2745658d5933e5ef75183ca", "filename": "docs/adapters.md", "sha": "209eff639168d56117c9496982a961f206513ccc", "additions": 1, "patch": "@@ -22,6 +22,7 @@ to have yours added to the list:\n * [AIM](https://github.com/shaundubuque/hubot-aim)\n * [ChatWork](https://github.com/akiomik/hubot-chatwork)\n * [Dasher](https://github.com/nebulist/hubot-dasher)\n+* [Disqus](https://github.com/jlobos/hubot-disqus)\n * [Fleep](https://github.com/anroots/hubot-fleep)\n * [Flowdock](https://github.com/flowdock/hubot-flowdock)\n * [Gitter](https://github.com/huafu/hubot-gitter2)", "changes": 1}], "1225": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/ddd8ccf52653aa3d20207177708240db577a407b/docs/deploying/unix.md", "blob_url": "https://github.com/hubotio/hubot/blob/ddd8ccf52653aa3d20207177708240db577a407b/docs/deploying/unix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/unix.md?ref=ddd8ccf52653aa3d20207177708240db577a407b", "filename": "docs/deploying/unix.md", "sha": "d4f44509e214241e3465473f5137431417210249", "additions": 1, "patch": "@@ -23,7 +23,7 @@ for [installing Node.js via package manager](https://github.com/joyent/node/wiki\n ## Updating code on the server\n \n The simplest way to update your hubot's code is going to be to have a git\n-checkout of your hubot's source code (that you've created during [Getting Started](../index.md), not the [github/hubot repository](http://github.com/github/hubot), and just git pull to get change. This may\n+checkout of your hubot's source code (that you've created during [Getting Started](/docs/index.md), not the [github/hubot repository](http://github.com/github/hubot), and just git pull to get change. This may\n feel a dirty hack, but it works when you are starting out.\n \n If you have a Ruby background, you might be more comfortable using", "changes": 2}], "1228": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/98768c33071d7848da071b07d09cb1c328729f98/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/98768c33071d7848da071b07d09cb1c328729f98/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=98768c33071d7848da071b07d09cb1c328729f98", "filename": "docs/adapters.md", "sha": "197c21393d1ebb9f1b94b5e11be6099219980b09", "additions": 1, "patch": "@@ -44,6 +44,7 @@ to have yours added to the list:\n * [Skype](https://github.com/netpro2k/hubot-skype)\n * [SkypeWeb](https://github.com/sdimkov/hubot-skype-web)\n * [Skyweb](https://github.com/EllisV/hubot-skyweb)\n+* [Symphony](https://github.com/symphonyoss/hubot-symphony)\n * [Talker](https://github.com/unixcharles/hubot-talker)\n * [Telegram](https://github.com/lukefx/hubot-telegram)\n * [Twilio IP Messaging](https://github.com/philnash/hubot-twilio-ip-messaging)", "changes": 1}], "1239": [], "1240": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/4ad0d969a3674abd1bbe7f2132ac2f3bfaec1201/examples/hubot.service", "blob_url": "https://github.com/hubotio/hubot/blob/4ad0d969a3674abd1bbe7f2132ac2f3bfaec1201/examples/hubot.service", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/examples/hubot.service?ref=4ad0d969a3674abd1bbe7f2132ac2f3bfaec1201", "filename": "examples/hubot.service", "sha": "42da41750c1a59067b29523d6dfe9bb86bc3faf0", "additions": 6, "patch": "@@ -14,8 +14,12 @@ User=change-to-hubot-user\n Restart=always\n RestartSec=10\n \n-; Configure Hubot environment variables, make sure to use quotes around whitespace as shown below.\n-Environment=HUBOT_aaa=xxx \"HUBOT_bbb='yyy yyy'\"\n+; Configure Hubot environment variables, use quotes around vars with whitespace as shown below.\n+Environment=\"HUBOT_aaa=xxx\"\n+Environment=\"HUBOT_bbb='yyy yyy'\"\n+\n+; Alternatively multiple environment variables can loaded from an external file\n+;EnvironmentFile=/etc/hubot-environment\n \n ExecStart=/path/to/hubot/bin/hubot --adapter zzz\n ", "changes": 8}], "1255": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/db5d96a530d9b331de3c81450cb5312faa0270bb/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/db5d96a530d9b331de3c81450cb5312faa0270bb/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=db5d96a530d9b331de3c81450cb5312faa0270bb", "filename": "docs/scripting.md", "sha": "aff7f58f9eeb2e262d8b084a166a48823db622e5", "additions": 1, "patch": "@@ -481,7 +481,7 @@ Using previous examples:\n     # rest of the code here\n \n \n-  robot.hear /midnight train/i, (res)\n+  robot.hear /midnight train/i, (res) ->\n     robot.http(\"https://midnight-train\")\n       .get() (err, res, body) ->\n         if err", "changes": 2}], "1256": [{"status": "renamed", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/401a7518e9d40e01a1c2d354faa545f030f4ea67/LICENSE", "blob_url": "https://github.com/hubotio/hubot/blob/401a7518e9d40e01a1c2d354faa545f030f4ea67/LICENSE", "previous_filename": "LICENSE.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/LICENSE?ref=401a7518e9d40e01a1c2d354faa545f030f4ea67", "filename": "LICENSE", "sha": "e4a68c7dcc4787a6c801d07b5b4e8e2c3840178d", "additions": 0, "changes": 0}], "1263": [{"status": "removed", "deletions": 48, "raw_url": "https://github.com/hubotio/hubot/raw/498d65611388d2881e6ae24f74bd68a832a24211/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/498d65611388d2881e6ae24f74bd68a832a24211/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=498d65611388d2881e6ae24f74bd68a832a24211", "filename": "package.json", "sha": "8c187e17998037a69d2dbfa7931fbc5b53895d11", "additions": 0, "patch": "@@ -1,48 +0,0 @@\n-{\n-  \"name\": \"hubot\",\n-  \"version\": \"2.19.0\",\n-  \"author\": \"hubot\",\n-  \"keywords\": [\n-    \"github\",\n-    \"hubot\",\n-    \"campfire\",\n-    \"bot\"\n-  ],\n-  \"description\": \"A simple helpful robot for your Company\",\n-  \"license\": \"MIT\",\n-  \"repository\": {\n-    \"type\": \"git\",\n-    \"url\": \"https://github.com/github/hubot.git\"\n-  },\n-  \"dependencies\": {\n-    \"async\": \">=0.1.0 <1.0.0\",\n-    \"chalk\": \"^1.0.0\",\n-    \"cline\": \"^0.8.2\",\n-    \"coffee-script\": \"1.6.3\",\n-    \"connect-multiparty\": \"^1.2.5\",\n-    \"express\": \"^3.21.2\",\n-    \"log\": \"1.4.0\",\n-    \"optparse\": \"1.0.4\",\n-    \"scoped-http-client\": \"0.11.0\"\n-  },\n-  \"devDependencies\": {\n-    \"hubot-mock-adapter\": \"^1.0.0\",\n-    \"coffee-errors\": \"0.8.6\",\n-    \"mocha\": \"^2.1.0\",\n-    \"mockery\": \"^1.4.0\",\n-    \"sinon-chai\": \"^2.8.0\",\n-    \"sinon\": \"~1.17.0\",\n-    \"chai\": \"~2.1.0\"\n-  },\n-  \"engines\": {\n-    \"node\": \">= 0.8.x\",\n-    \"npm\": \">= 1.1.x\"\n-  },\n-  \"main\": \"./index\",\n-  \"bin\": {\n-    \"hubot\": \"./bin/hubot\"\n-  },\n-  \"scripts\": {\n-    \"test\": \"./script/test\"\n-  }\n-}", "changes": 48}], "1264": [{"status": "removed", "deletions": 24, "raw_url": "https://github.com/hubotio/hubot/raw/498d65611388d2881e6ae24f74bd68a832a24211/Makefile", "blob_url": "https://github.com/hubotio/hubot/blob/498d65611388d2881e6ae24f74bd68a832a24211/Makefile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Makefile?ref=498d65611388d2881e6ae24f74bd68a832a24211", "filename": "Makefile", "sha": "042ab88cd2444a93d1b83765e139db3d9978666b", "additions": 0, "patch": "@@ -1,24 +0,0 @@\n-NPM_EXECUTABLE_HOME := node_modules/.bin\n-\n-PATH := ${NPM_EXECUTABLE_HOME}:${PATH}\n-\n-test: deps\n-\t@script/test\n-\n-dev: generate-js\n-\t@coffee -wc --bare -o lib src/*.coffee\n-\n-generate-js:\n-\t@find src -name '*.coffee' | xargs coffee -c -o lib\n-\n-package:\n-\t@bin/hubot -c hubot\n-\t@chmod 0755 hubot/bin/hubot\n-\n-remove-js:\n-\t@rm -fr lib/\n-\n-deps:\n-\n-.PHONY: all\n-", "changes": 24}], "1265": [{"status": "removed", "deletions": 11, "raw_url": "https://github.com/hubotio/hubot/raw/498d65611388d2881e6ae24f74bd68a832a24211/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/498d65611388d2881e6ae24f74bd68a832a24211/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=498d65611388d2881e6ae24f74bd68a832a24211", "filename": ".travis.yml", "sha": "ab6fd243ab3e8f02d8849c21c72eb6f958ed76cc", "additions": 0, "patch": "@@ -1,11 +0,0 @@\n-language: node_js\n-\n-matrix:\n-  include:\n-    - node_js: \"0.10\"\n-    - node_js: \"0.12\"\n-    - node_js: \"4\"\n-    - node_js: \"5\"\n-notifications:\n-  email: false\n-sudo: false", "changes": 11}], "1266": [{"status": "removed", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/498d65611388d2881e6ae24f74bd68a832a24211/docs/deploying.md", "blob_url": "https://github.com/hubotio/hubot/blob/498d65611388d2881e6ae24f74bd68a832a24211/docs/deploying.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying.md?ref=498d65611388d2881e6ae24f74bd68a832a24211", "filename": "docs/deploying.md", "sha": "4b43dc5f1228bc9a1fc8f626ab45423af1f03cde", "additions": 0, "patch": "@@ -1,10 +0,0 @@\n----\n-permalink: /docs/deploying/index.html\n-layout: docs\n----\n-\n-- [Azure](/docs/deploying/azure.md)\n-- [Bluemix](/docs/deploying/bluemix.md)\n-- [Heroku](/docs/deploying/heroku.md)\n-- [Unix](/docs/deploying/unix.md)\n-- [Windows](/docs/deploying/windows.md)", "changes": 10}], "1267": [{"status": "removed", "deletions": 65, "raw_url": "https://github.com/hubotio/hubot/raw/498d65611388d2881e6ae24f74bd68a832a24211/docs/deploying/windows.md", "blob_url": "https://github.com/hubotio/hubot/blob/498d65611388d2881e6ae24f74bd68a832a24211/docs/deploying/windows.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/windows.md?ref=498d65611388d2881e6ae24f74bd68a832a24211", "filename": "docs/deploying/windows.md", "sha": "bc94d28df34519544f0ab49c9e4b04f8fc18e2c2", "additions": 0, "patch": "@@ -1,65 +0,0 @@\n----\n-permalink: /docs/deploying/windows/index.html\n-layout: docs\n----\n-\n-Hasn't been fully tested - YMMV\n-\n-There are 4 primary steps to deploying and running hubot on a Windows machine:\n-\n-  * node and npm\n-  * a way to get source code updated on the server\n-  * setting up environment variables for hubot\n-  * a way to start hubot, start it up if it crashes, and restart it when code updates\n-\n-## node and npm\n-\n-To start, your windows server will need node and npm.\n-The best way to do this is with [chocolatey](http://chocolatey.org) using the [nodejs.install](http://chocolatey.org/packages/nodejs.install) package.\n-I've found that sometimes the system path variable is not correctly set; ensure you can run node/npm from the command line. If needed set the PATH variable with \"setx PATH \\\"%PATH%;C:\\Program Files\\nodejs\\\" \"\n-\n-Your other option is to install directly from [NodeJS](https://nodejs.org/) and run the current download (v0.12.4 as of this documentation). This should set your PATH variables for you.\n-\n-## Updating code on the server\n-\n-To get the code on your server, you can follow the instructions at [Getting Started](/docs/index.md) on your local development machine or directly on the server. If you are building locally, push your hubot to GitHub and clone the repo onto your server. Don't clone the normal [github/hubot repository](http://github.com/github/hubot), make sure you're using the Yo Generator to build your own hubot.\n-\n-## Setting up environment vars\n-\n-You will want to set up your hubot environment variables on the server where it will run. You can do this by opening an administrative PowerShell and typing the following:\n-\n-    [Environment]::SetEnvironmentVariable(\"HUBOT_ADAPTER\", \"Campfire\", \"Machine\")\n-\n-This is equivalent to going into the system menu -> selecting advanced system settings -> environment vars and adding a new system variable called HUBOT_ADAPTER with the value of Campfire.\n-\n-## Starting, stopping, and restarting hubot\n-\n-Every hubot install has a `bin/hubot` script to handle starting up the hubot.\n-You can run this command directly from your hubot folder by typing the following:\n-\n-    .\\bin\\hubot \u2013adapter campfire\n-\n-There are a few issues if you call it manually, though.\n-\n-* you disconnect, and hubot dies\n-* hubot dies, for any reason, and doesn't start again\n-* it doesn't start up at boot automatically\n-\n-To fix this, you will want to create a .ps1 file with whatever name makes you happy that you will call from your hubot directory. There is a copy of this file in the `examples` directory [here](/examples/hubot-start.ps1). It should contain the following:\n-\n-    Write-Host \"Starting Hubot Watcher\"\n-    While (1)\n-    {\n-        Write-Host \"Starting Hubot\"\n-        Start-Process powershell -ArgumentList \".\\bin\\hubot \u2013adapter slack\" -wait\n-    }\n-\n-Remember to allow local unsigned PowerShell scripts if you are using the .ps1 file to run hubot. Run this command in an Administrator PowerShell window.\n-\n-    Set-ExecutionPolicy RemoteSigned\n-\n-You can set this .ps1 as scheduled task on boot if you like or some other way to start your process.\n-\n-## Expanding the documentation\n-\n-Not yet fleshed out. [Help contribute by submitting a pull request, please?](https://github.com/github/hubot/pull/new/master)", "changes": 65}], "1268": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9b401fa3d89280e5336a03f4788f94dcbac2648e/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/9b401fa3d89280e5336a03f4788f94dcbac2648e/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=9b401fa3d89280e5336a03f4788f94dcbac2648e", "filename": "docs/index.md", "sha": "c508555f4e64be5cf02ebe255ec62168eaf584f9", "additions": 1, "patch": "@@ -6,6 +6,7 @@ layout: docs\n \n ## Getting Started With Hubot\n \n+A better line\n You will need [node.js and npm](https://docs.npmjs.com/getting-started/installing-node). Once those are installed, we can install the hubot generator:\n \n     %  npm install -g yo generator-hubot", "changes": 1}], "1272": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/48e76e542988e701addff2844589a96778d035c5/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/48e76e542988e701addff2844589a96778d035c5/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=48e76e542988e701addff2844589a96778d035c5", "filename": "docs/scripting.md", "sha": "abbaf5c334e2e56c1bce3a4798745c601ff4f40c", "additions": 1, "patch": "@@ -608,7 +608,7 @@ Once you've got the hubot generator installed, creating a hubot script is simila\n % yo hubot:script\n ```\n \n-At this point, the you'll be asked a few questions about the author for the script, name of the script (which is guessed by the directory name), a short description, and keywords to find it (we suggest having at least `hubot, hubot-scripts` in this list).\n+At this point, you'll be asked a few questions about the author of the script, name of the script (which is guessed by the directory name), a short description, and keywords to find it (we suggest having at least `hubot, hubot-scripts` in this list).\n \n If you are using git, the generated directory includes a .gitignore, so you can initialize and add everything:\n ", "changes": 2}], "1273": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/fcdc8b97dc518fc19be43503a67b4b934765c478/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/fcdc8b97dc518fc19be43503a67b4b934765c478/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=fcdc8b97dc518fc19be43503a67b4b934765c478", "filename": "package.json", "sha": "c2080626ec1b77468ccab63d9bedb47c35f8bf37", "additions": 3, "patch": "@@ -16,11 +16,13 @@\n   },\n   \"dependencies\": {\n     \"async\": \">=0.1.0 <1.0.0\",\n+    \"body-parser\": \"^1.15.2\",\n     \"chalk\": \"^1.0.0\",\n     \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n     \"connect-multiparty\": \"^1.2.5\",\n-    \"express\": \"^3.21.2\",\n+    \"ejs\": \"^2.5.5\",\n+    \"express\": \"^4.14.0\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",\n     \"scoped-http-client\": \"0.11.0\"", "changes": 4}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/fcdc8b97dc518fc19be43503a67b4b934765c478/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/fcdc8b97dc518fc19be43503a67b4b934765c478/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=fcdc8b97dc518fc19be43503a67b4b934765c478", "filename": "src/robot.coffee", "sha": "8c5218bcec6fb6d1324067bdccc94653d60b95a9", "additions": 16, "patch": "@@ -413,23 +413,37 @@ class Robot\n     user    = process.env.EXPRESS_USER\n     pass    = process.env.EXPRESS_PASSWORD\n     stat    = process.env.EXPRESS_STATIC\n+    env     = process.env.NODE_ENV or 'development'\n     port    = process.env.EXPRESS_PORT or process.env.PORT or 8080\n     address = process.env.EXPRESS_BIND_ADDRESS or process.env.BIND_ADDRESS or '0.0.0.0'\n \n     express = require 'express'\n     multipart = require 'connect-multiparty'\n+    bodyParser = require 'body-parser'\n \n     app = express()\n \n     app.use (req, res, next) =>\n+      if req.headers['x-forwarded-proto'] != 'https' and env == 'production'\n+        return res.redirect(301, [\n+          'https://'\n+          req.get('Host')\n+          req.url\n+        ].join(''))\n       res.setHeader \"X-Powered-By\", \"hubot/#{@name}\"\n       next()\n \n     app.use express.basicAuth user, pass if user and pass\n     app.use express.query()\n \n-    app.use express.json()\n-    app.use express.urlencoded()\n+    ## set the view engine to ejs\n+    app.set('view engine', 'ejs')\n+\n+    app.use(bodyParser.urlencoded({\n+        extended: true\n+    }));\n+    app.use(bodyParser.json());\n+\n     # replacement for deprecated express.multipart/connect.multipart\n     # limit to 100mb, as per the old behavior\n     app.use multipart(maxFilesSize: 100 * 1024 * 1024)", "changes": 18}], "1274": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/80b70bc8d36e67fb381835dadf8df5ff5b259d56/.editorconfig", "blob_url": "https://github.com/hubotio/hubot/blob/80b70bc8d36e67fb381835dadf8df5ff5b259d56/.editorconfig", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.editorconfig?ref=80b70bc8d36e67fb381835dadf8df5ff5b259d56", "filename": ".editorconfig", "sha": "5760be5836966242237ac86fd439b632b34f58e3", "additions": 12, "patch": "@@ -0,0 +1,12 @@\n+# http://editorconfig.org\n+root = true\n+\n+[*]\n+indent_style = space\n+indent_size = 2\n+charset = utf-8\n+trim_trailing_whitespace = true\n+insert_final_newline = true\n+\n+[*.md]\n+trim_trailing_whitespace = false", "changes": 12}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/80b70bc8d36e67fb381835dadf8df5ff5b259d56/.gitignore", "blob_url": "https://github.com/hubotio/hubot/blob/80b70bc8d36e67fb381835dadf8df5ff5b259d56/.gitignore", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.gitignore?ref=80b70bc8d36e67fb381835dadf8df5ff5b259d56", "filename": ".gitignore", "sha": "e9049bb9fda7b4da4a78b50d2d00e11bb7cae61d", "additions": 1, "patch": "@@ -1,3 +1,3 @@\n node_modules\n+.DS_Store*\n .hubot_history\n-.node-version", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/80b70bc8d36e67fb381835dadf8df5ff5b259d56/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/80b70bc8d36e67fb381835dadf8df5ff5b259d56/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Procfile?ref=80b70bc8d36e67fb381835dadf8df5ff5b259d56", "filename": "Procfile", "sha": "c5ef931c15b3272fa312932bb6c3dc46704dc776", "additions": 1, "patch": "@@ -0,0 +1 @@\n+web: bin/hubot -a flowdock", "changes": 1}, {"status": "modified", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/80b70bc8d36e67fb381835dadf8df5ff5b259d56/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/80b70bc8d36e67fb381835dadf8df5ff5b259d56/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=80b70bc8d36e67fb381835dadf8df5ff5b259d56", "filename": "README.md", "sha": "96a894e5095e16f9e0836d0c2498a2d37eb85c45", "additions": 4, "patch": "@@ -1,18 +1,8 @@\n-# Hubot\n+# Mebot\n \n-Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n-cool. He's [extendable with scripts](http://hubot.github.com/docs/#scripts) and can work on [many\n-different chat services](https://hubot.github.com/docs/adapters/).\n+Mebot is a chat bot built on the [Hubot][hubot] framework. It was initially generated by [generator-hubot][generator-hubot].\n \n-This repository provides a library that's distributed by `npm` that you\n-use for building your own bots.  See the [documentation](http://hubot.github.com/docs)\n-for details on getting up and running with your very own robot friend.\n+This project is a tying together of a yo generated hubot and several published packages for the purpose of taking an individual's presence in one room and replicating this onto a different service.\n \n-In most cases, you'll probably never have to hack on this repo directly if you\n-are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTING.md)\n+It was written by Andrew Lucas for resin.io's internal communication streamlining.\n \n-If you'd like to chat, drop by [#hubot](http://webchat.freenode.net/?channels=#hubot) on FreeNode IRC.\n-\n-## License\n-\n-See the [LICENSE](LICENSE.md) file for license rights and limitations (MIT).", "changes": 18}, {"status": "modified", "deletions": 165, "raw_url": "https://github.com/hubotio/hubot/raw/80b70bc8d36e67fb381835dadf8df5ff5b259d56/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/80b70bc8d36e67fb381835dadf8df5ff5b259d56/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=80b70bc8d36e67fb381835dadf8df5ff5b259d56", "filename": "bin/hubot", "sha": "5beabf5c5e9968f8b7ebc9205be30439331eff1c", "additions": 5, "patch": "@@ -1,168 +1,8 @@\n-#!/usr/bin/env coffee\n-# vim:ft=coffee ts=2 sw=2 et :\n-# -*- mode:coffee -*-\n+#!/bin/sh\n \n-Hubot    = require '..'\n+set -e\n \n-Fs       = require 'fs'\n-OptParse = require 'optparse'\n-Path     = require 'path'\n+npm install\n+export PATH=\"node_modules/.bin:node_modules/hubot/node_modules/.bin:$PATH\"\n \n-Switches = [\n-  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n-  [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n-  [ \"-h\", \"--help\",            \"Display the help information\" ],\n-  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n-  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n-  [ \"-r\", \"--require PATH\",    \"Alternative scripts path\" ],\n-  [ \"-t\", \"--config-check\",    \"Test hubot's config to make sure it won't fail at startup\"]\n-  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n-]\n-\n-Options =\n-  adapter:     process.env.HUBOT_ADAPTER or \"shell\"\n-  alias:       process.env.HUBOT_ALIAS   or false\n-  create:      process.env.HUBOT_CREATE  or false\n-  enableHttpd: process.env.HUBOT_HTTPD   or true\n-  scripts:     process.env.HUBOT_SCRIPTS or []\n-  name:        process.env.HUBOT_NAME    or \"Hubot\"\n-  path:        process.env.HUBOT_PATH    or \".\"\n-  configCheck: false\n-\n-Parser = new OptParse.OptionParser(Switches)\n-Parser.banner = \"Usage hubot [options]\"\n-\n-Parser.on \"adapter\", (opt, value) ->\n-  Options.adapter = value\n-\n-Parser.on \"create\", (opt, value) ->\n-  Options.path = value\n-  Options.create = true\n-\n-Parser.on \"disable-httpd\", (opt) ->\n-  Options.enableHttpd = false\n-\n-Parser.on \"help\", (opt, value) ->\n-  console.log Parser.toString()\n-  process.exit 0\n-\n-Parser.on \"alias\", (opt, value) ->\n-  value or= '/'\n-  Options.alias = value\n-\n-Parser.on \"name\", (opt, value) ->\n-  Options.name = value\n-\n-Parser.on \"require\", (opt, value) ->\n-  Options.scripts.push(value)\n-\n-Parser.on \"config-check\", (opt) ->\n-  Options.configCheck = true\n-\n-Parser.on \"version\", (opt, value) ->\n-  Options.version = true\n-\n-Parser.on (opt, value) ->\n-  console.warn \"Unknown option: #{opt}\"\n-\n-Parser.parse process.argv\n-\n-unless process.platform is \"win32\"\n-  process.on 'SIGTERM', ->\n-    process.exit 0\n-\n-if Options.create\n-  console.error \"'hubot --create' is deprecated. Use the yeoman generator instead:\"\n-  console.error \"    npm install -g yo generator-hubot\"\n-  console.error \"    mkdir -p #{Options.path}\"\n-  console.error \"    cd #{Options.path}\"\n-  console.error \"    yo hubot\"\n-  console.error \"See https://github.com/github/hubot/blob/master/docs/index.md for more details on getting started.\"\n-  process.exit 1\n-\n-else\n-  robot = Hubot.loadBot undefined, Options.adapter, Options.enableHttpd, Options.name, Options.alias\n-\n-  if Options.version\n-    console.log robot.version\n-    process.exit 0\n-\n-  loadScripts = ->\n-    scriptsPath = Path.resolve \".\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    scriptsPath = Path.resolve \".\", \"src\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    hubotScripts = Path.resolve \".\", \"hubot-scripts.json\"\n-    if Fs.existsSync(hubotScripts)\n-      data = Fs.readFileSync(hubotScripts)\n-      if data.length > 0\n-        try\n-          scripts = JSON.parse data\n-          scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n-          robot.loadHubotScripts scriptsPath, scripts\n-        catch err\n-          robot.logger.error \"Error parsing JSON data from hubot-scripts.json: #{err}\"\n-          process.exit(1)\n-\n-        hubotScriptsWarning = \"Loading scripts from hubot-scripts.json is deprecated and \" +\n-          \"will be removed in 3.0 (https://github.com/github/hubot-scripts/issues/1113) \" +\n-          \"in favor of packages for each script.\\n\\n\"\n-\n-        if scripts.length is 0\n-          hubotScriptsWarning += \"Your hubot-scripts.json is empty, so you just need to remove it.\"\n-        else\n-          hubotScriptsReplacements = Path.resolve \"node_modules\", \"hubot-scripts\", \"replacements.json\"\n-\n-          if Fs.existsSync(hubotScriptsReplacements)\n-            hubotScriptsWarning += \"The following scripts have known replacements. Follow the link for installation instructions, then remove it from hubot-scripts.json:\\n\"\n-\n-            replacementsData = Fs.readFileSync(hubotScriptsReplacements)\n-            replacements = JSON.parse(replacementsData)\n-            scriptsWithoutReplacements = []\n-            for script in scripts\n-              replacement = replacements[script]\n-              if replacement\n-                hubotScriptsWarning += \"* #{script}: #{replacement}\\n\"\n-              else\n-                scriptsWithoutReplacements.push(script)\n-            hubotScriptsWarning += \"\\n\"\n-\n-            if scriptsWithoutReplacements.length > 0\n-              hubotScriptsWarning += \"The following scripts don't have (known) replacements. You can try searching https://www.npmjs.com/ or http://github.com/search or your favorite search engine. You can copy the script into your local scripts directory, or consider creating a new package to maintain yourself. If you find a replacement or create a package yourself, please post on https://github.com/github/hubot-scripts/issues/1641:\\n\"\n-              hubotScriptsWarning += \"* #{script}\\n\" for script in scriptsWithoutReplacements\n-\n-              hubotScriptsWarning += \"\\nYou an also try updating hubot-scripts to get the latest list of replacements: npm install --save hubot-scripts@latest\"\n-          else\n-              hubotScriptsWarning += \"To get a list of recommended replacements, update your hubot-scripts: npm install --save hubot-scripts@latest\"\n-\n-      robot.logger.warning hubotScriptsWarning\n-\n-    externalScripts = Path.resolve \".\", \"external-scripts.json\"\n-    if Fs.existsSync(externalScripts)\n-      Fs.readFile externalScripts, (err, data) ->\n-        if data.length > 0\n-          try\n-            scripts = JSON.parse data\n-          catch err\n-            console.error \"Error parsing JSON data from external-scripts.json: #{err}\"\n-            process.exit(1)\n-          robot.loadExternalScripts scripts\n-\n-    for path in Options.scripts\n-      if path[0] == '/'\n-        scriptsPath = path\n-      else\n-        scriptsPath = Path.resolve \".\", path\n-      robot.load scriptsPath\n-\n-  if Options.configCheck\n-    loadScripts()\n-    console.log \"OK\"\n-    process.exit 0\n-\n-  robot.adapter.once 'connected', loadScripts\n-\n-  robot.run()\n+exec node_modules/.bin/hubot --name \"sqweelygig\" \"$@\"", "changes": 170}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/80b70bc8d36e67fb381835dadf8df5ff5b259d56/bin/hubot.cmd", "blob_url": "https://github.com/hubotio/hubot/blob/80b70bc8d36e67fb381835dadf8df5ff5b259d56/bin/hubot.cmd", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot.cmd?ref=80b70bc8d36e67fb381835dadf8df5ff5b259d56", "filename": "bin/hubot.cmd", "sha": "31bb4820009afbac20921eea066793f13aec4ec9", "additions": 7, "patch": "@@ -0,0 +1,7 @@\n+@echo off\n+\n+call npm install\n+SETLOCAL\n+SET PATH=node_modules\\.bin;node_modules\\hubot\\node_modules\\.bin;%PATH%\n+\n+node_modules\\.bin\\hubot.cmd --name \"sqweelygig\" %* ", "changes": 7}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/80b70bc8d36e67fb381835dadf8df5ff5b259d56/external-scripts.json", "blob_url": "https://github.com/hubotio/hubot/blob/80b70bc8d36e67fb381835dadf8df5ff5b259d56/external-scripts.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/external-scripts.json?ref=80b70bc8d36e67fb381835dadf8df5ff5b259d56", "filename": "external-scripts.json", "sha": "3fc110d4088fe2f766ae31bd0417aa7ff6671a18", "additions": 9, "patch": "@@ -0,0 +1,9 @@\n+[\n+  \"hubot-redis-brain\",\n+  \"hubot-ignore\",\n+  \"hubot-ignore-self\",\n+  \"hubot-room-select\",\n+  \"hubot-annoying-song\",\n+  \"hubot-gitter-echo\",\n+  \"hubot-rules\"\n+]", "changes": 9}, {"status": "modified", "deletions": 32, "raw_url": "https://github.com/hubotio/hubot/raw/80b70bc8d36e67fb381835dadf8df5ff5b259d56/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/80b70bc8d36e67fb381835dadf8df5ff5b259d56/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=80b70bc8d36e67fb381835dadf8df5ff5b259d56", "filename": "package.json", "sha": "030f747e1b7cc9bc99bb5e149dabc54f55ed5fec", "additions": 27, "patch": "@@ -1,31 +1,34 @@\n {\n-  \"name\": \"hubot\",\n-  \"version\": \"2.19.0\",\n-  \"author\": \"hubot\",\n-  \"keywords\": [\n-    \"github\",\n-    \"hubot\",\n-    \"campfire\",\n-    \"bot\"\n-  ],\n-  \"description\": \"A simple helpful robot for your Company\",\n-  \"license\": \"MIT\",\n-  \"repository\": {\n-    \"type\": \"git\",\n-    \"url\": \"https://github.com/github/hubot.git\"\n-  },\n+  \"name\": \"sqweelygig\",\n+  \"version\": \"0.0.0\",\n+  \"private\": true,\n+  \"author\": \"Andrew Lucas <sqweelygig@googlemail.com>\",\n+  \"description\": \"A simple helpful robot for you\",\n+  \"license\": \"Apache 2.0\",\n   \"dependencies\": {\n-    \"async\": \">=0.1.0 <1.0.0\",\n-    \"chalk\": \"^1.0.0\",\n-    \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n-    \"connect-multiparty\": \"^1.2.5\",\n-    \"express\": \"^3.21.2\",\n-    \"log\": \"1.4.0\",\n-    \"optparse\": \"1.0.4\",\n-    \"scoped-http-client\": \"0.11.0\"\n+    \"hubot\": \"^2.19.0\",\n+    \"hubot-annoying-song\": \"^0.x\",\n+    \"hubot-diagnostics\": \"0.0.1\",\n+    \"hubot-flowdock-attend-own-account\": \"^0.7.7\",\n+    \"hubot-gitter2\": \"^0.1.3\",\n+    \"hubot-gitter-echo\": \"^0.x\",\n+    \"hubot-google-images\": \"^0.2.6\",\n+    \"hubot-google-translate\": \"^0.2.0\",\n+    \"hubot-help\": \"^0.2.0\",\n+    \"hubot-heroku-keepalive\": \"^1.0.2\",\n+    \"hubot-ignore\": \"^0.x\",\n+    \"hubot-ignore-self\": \"^0.x\",\n+    \"hubot-maps\": \"0.0.2\",\n+    \"hubot-pugme\": \"^0.1.0\",\n+    \"hubot-redis-brain\": \"0.0.3\",\n+    \"hubot-room-select\": \"^0.x\",\n+    \"hubot-rules\": \"^0.1.1\",\n+    \"hubot-scripts\": \"^2.17.2\",\n+    \"hubot-shipit\": \"^0.2.0\"\n   },\n   \"devDependencies\": {\n+    \"resin-lint\": \"^1.4.0\",\n     \"hubot-mock-adapter\": \"^1.0.0\",\n     \"coffee-errors\": \"0.8.6\",\n     \"mocha\": \"^2.1.0\",\n@@ -35,14 +38,6 @@\n     \"chai\": \"~2.1.0\"\n   },\n   \"engines\": {\n-    \"node\": \">= 0.8.x\",\n-    \"npm\": \">= 1.1.x\"\n-  },\n-  \"main\": \"./index\",\n-  \"bin\": {\n-    \"hubot\": \"./bin/hubot\"\n-  },\n-  \"scripts\": {\n-    \"test\": \"./script/test\"\n+    \"node\": \"0.10.x\"\n   }\n }", "changes": 59}], "1275": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/.editorconfig", "blob_url": "https://github.com/hubotio/hubot/blob/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/.editorconfig", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.editorconfig?ref=a35c216b6976e6dc40dc354eeb47ccd2c17403d6", "filename": ".editorconfig", "sha": "5760be5836966242237ac86fd439b632b34f58e3", "additions": 12, "patch": "@@ -0,0 +1,12 @@\n+# http://editorconfig.org\n+root = true\n+\n+[*]\n+indent_style = space\n+indent_size = 2\n+charset = utf-8\n+trim_trailing_whitespace = true\n+insert_final_newline = true\n+\n+[*.md]\n+trim_trailing_whitespace = false", "changes": 12}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/.gitignore", "blob_url": "https://github.com/hubotio/hubot/blob/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/.gitignore", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.gitignore?ref=a35c216b6976e6dc40dc354eeb47ccd2c17403d6", "filename": ".gitignore", "sha": "e9049bb9fda7b4da4a78b50d2d00e11bb7cae61d", "additions": 1, "patch": "@@ -1,3 +1,3 @@\n node_modules\n+.DS_Store*\n .hubot_history\n-.node-version", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/Procfile", "blob_url": "https://github.com/hubotio/hubot/blob/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/Procfile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Procfile?ref=a35c216b6976e6dc40dc354eeb47ccd2c17403d6", "filename": "Procfile", "sha": "c5ef931c15b3272fa312932bb6c3dc46704dc776", "additions": 1, "patch": "@@ -0,0 +1 @@\n+web: bin/hubot -a flowdock", "changes": 1}, {"status": "modified", "deletions": 14, "raw_url": "https://github.com/hubotio/hubot/raw/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=a35c216b6976e6dc40dc354eeb47ccd2c17403d6", "filename": "README.md", "sha": "96a894e5095e16f9e0836d0c2498a2d37eb85c45", "additions": 4, "patch": "@@ -1,18 +1,8 @@\n-# Hubot\n+# Mebot\n \n-Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n-cool. He's [extendable with scripts](http://hubot.github.com/docs/#scripts) and can work on [many\n-different chat services](https://hubot.github.com/docs/adapters/).\n+Mebot is a chat bot built on the [Hubot][hubot] framework. It was initially generated by [generator-hubot][generator-hubot].\n \n-This repository provides a library that's distributed by `npm` that you\n-use for building your own bots.  See the [documentation](http://hubot.github.com/docs)\n-for details on getting up and running with your very own robot friend.\n+This project is a tying together of a yo generated hubot and several published packages for the purpose of taking an individual's presence in one room and replicating this onto a different service.\n \n-In most cases, you'll probably never have to hack on this repo directly if you\n-are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTING.md)\n+It was written by Andrew Lucas for resin.io's internal communication streamlining.\n \n-If you'd like to chat, drop by [#hubot](http://webchat.freenode.net/?channels=#hubot) on FreeNode IRC.\n-\n-## License\n-\n-See the [LICENSE](LICENSE.md) file for license rights and limitations (MIT).", "changes": 18}, {"status": "modified", "deletions": 165, "raw_url": "https://github.com/hubotio/hubot/raw/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=a35c216b6976e6dc40dc354eeb47ccd2c17403d6", "filename": "bin/hubot", "sha": "5beabf5c5e9968f8b7ebc9205be30439331eff1c", "additions": 5, "patch": "@@ -1,168 +1,8 @@\n-#!/usr/bin/env coffee\n-# vim:ft=coffee ts=2 sw=2 et :\n-# -*- mode:coffee -*-\n+#!/bin/sh\n \n-Hubot    = require '..'\n+set -e\n \n-Fs       = require 'fs'\n-OptParse = require 'optparse'\n-Path     = require 'path'\n+npm install\n+export PATH=\"node_modules/.bin:node_modules/hubot/node_modules/.bin:$PATH\"\n \n-Switches = [\n-  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n-  [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n-  [ \"-h\", \"--help\",            \"Display the help information\" ],\n-  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n-  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n-  [ \"-r\", \"--require PATH\",    \"Alternative scripts path\" ],\n-  [ \"-t\", \"--config-check\",    \"Test hubot's config to make sure it won't fail at startup\"]\n-  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n-]\n-\n-Options =\n-  adapter:     process.env.HUBOT_ADAPTER or \"shell\"\n-  alias:       process.env.HUBOT_ALIAS   or false\n-  create:      process.env.HUBOT_CREATE  or false\n-  enableHttpd: process.env.HUBOT_HTTPD   or true\n-  scripts:     process.env.HUBOT_SCRIPTS or []\n-  name:        process.env.HUBOT_NAME    or \"Hubot\"\n-  path:        process.env.HUBOT_PATH    or \".\"\n-  configCheck: false\n-\n-Parser = new OptParse.OptionParser(Switches)\n-Parser.banner = \"Usage hubot [options]\"\n-\n-Parser.on \"adapter\", (opt, value) ->\n-  Options.adapter = value\n-\n-Parser.on \"create\", (opt, value) ->\n-  Options.path = value\n-  Options.create = true\n-\n-Parser.on \"disable-httpd\", (opt) ->\n-  Options.enableHttpd = false\n-\n-Parser.on \"help\", (opt, value) ->\n-  console.log Parser.toString()\n-  process.exit 0\n-\n-Parser.on \"alias\", (opt, value) ->\n-  value or= '/'\n-  Options.alias = value\n-\n-Parser.on \"name\", (opt, value) ->\n-  Options.name = value\n-\n-Parser.on \"require\", (opt, value) ->\n-  Options.scripts.push(value)\n-\n-Parser.on \"config-check\", (opt) ->\n-  Options.configCheck = true\n-\n-Parser.on \"version\", (opt, value) ->\n-  Options.version = true\n-\n-Parser.on (opt, value) ->\n-  console.warn \"Unknown option: #{opt}\"\n-\n-Parser.parse process.argv\n-\n-unless process.platform is \"win32\"\n-  process.on 'SIGTERM', ->\n-    process.exit 0\n-\n-if Options.create\n-  console.error \"'hubot --create' is deprecated. Use the yeoman generator instead:\"\n-  console.error \"    npm install -g yo generator-hubot\"\n-  console.error \"    mkdir -p #{Options.path}\"\n-  console.error \"    cd #{Options.path}\"\n-  console.error \"    yo hubot\"\n-  console.error \"See https://github.com/github/hubot/blob/master/docs/index.md for more details on getting started.\"\n-  process.exit 1\n-\n-else\n-  robot = Hubot.loadBot undefined, Options.adapter, Options.enableHttpd, Options.name, Options.alias\n-\n-  if Options.version\n-    console.log robot.version\n-    process.exit 0\n-\n-  loadScripts = ->\n-    scriptsPath = Path.resolve \".\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    scriptsPath = Path.resolve \".\", \"src\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    hubotScripts = Path.resolve \".\", \"hubot-scripts.json\"\n-    if Fs.existsSync(hubotScripts)\n-      data = Fs.readFileSync(hubotScripts)\n-      if data.length > 0\n-        try\n-          scripts = JSON.parse data\n-          scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n-          robot.loadHubotScripts scriptsPath, scripts\n-        catch err\n-          robot.logger.error \"Error parsing JSON data from hubot-scripts.json: #{err}\"\n-          process.exit(1)\n-\n-        hubotScriptsWarning = \"Loading scripts from hubot-scripts.json is deprecated and \" +\n-          \"will be removed in 3.0 (https://github.com/github/hubot-scripts/issues/1113) \" +\n-          \"in favor of packages for each script.\\n\\n\"\n-\n-        if scripts.length is 0\n-          hubotScriptsWarning += \"Your hubot-scripts.json is empty, so you just need to remove it.\"\n-        else\n-          hubotScriptsReplacements = Path.resolve \"node_modules\", \"hubot-scripts\", \"replacements.json\"\n-\n-          if Fs.existsSync(hubotScriptsReplacements)\n-            hubotScriptsWarning += \"The following scripts have known replacements. Follow the link for installation instructions, then remove it from hubot-scripts.json:\\n\"\n-\n-            replacementsData = Fs.readFileSync(hubotScriptsReplacements)\n-            replacements = JSON.parse(replacementsData)\n-            scriptsWithoutReplacements = []\n-            for script in scripts\n-              replacement = replacements[script]\n-              if replacement\n-                hubotScriptsWarning += \"* #{script}: #{replacement}\\n\"\n-              else\n-                scriptsWithoutReplacements.push(script)\n-            hubotScriptsWarning += \"\\n\"\n-\n-            if scriptsWithoutReplacements.length > 0\n-              hubotScriptsWarning += \"The following scripts don't have (known) replacements. You can try searching https://www.npmjs.com/ or http://github.com/search or your favorite search engine. You can copy the script into your local scripts directory, or consider creating a new package to maintain yourself. If you find a replacement or create a package yourself, please post on https://github.com/github/hubot-scripts/issues/1641:\\n\"\n-              hubotScriptsWarning += \"* #{script}\\n\" for script in scriptsWithoutReplacements\n-\n-              hubotScriptsWarning += \"\\nYou an also try updating hubot-scripts to get the latest list of replacements: npm install --save hubot-scripts@latest\"\n-          else\n-              hubotScriptsWarning += \"To get a list of recommended replacements, update your hubot-scripts: npm install --save hubot-scripts@latest\"\n-\n-      robot.logger.warning hubotScriptsWarning\n-\n-    externalScripts = Path.resolve \".\", \"external-scripts.json\"\n-    if Fs.existsSync(externalScripts)\n-      Fs.readFile externalScripts, (err, data) ->\n-        if data.length > 0\n-          try\n-            scripts = JSON.parse data\n-          catch err\n-            console.error \"Error parsing JSON data from external-scripts.json: #{err}\"\n-            process.exit(1)\n-          robot.loadExternalScripts scripts\n-\n-    for path in Options.scripts\n-      if path[0] == '/'\n-        scriptsPath = path\n-      else\n-        scriptsPath = Path.resolve \".\", path\n-      robot.load scriptsPath\n-\n-  if Options.configCheck\n-    loadScripts()\n-    console.log \"OK\"\n-    process.exit 0\n-\n-  robot.adapter.once 'connected', loadScripts\n-\n-  robot.run()\n+exec node_modules/.bin/hubot --name \"sqweelygig\" \"$@\"", "changes": 170}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/bin/hubot.cmd", "blob_url": "https://github.com/hubotio/hubot/blob/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/bin/hubot.cmd", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot.cmd?ref=a35c216b6976e6dc40dc354eeb47ccd2c17403d6", "filename": "bin/hubot.cmd", "sha": "31bb4820009afbac20921eea066793f13aec4ec9", "additions": 7, "patch": "@@ -0,0 +1,7 @@\n+@echo off\n+\n+call npm install\n+SETLOCAL\n+SET PATH=node_modules\\.bin;node_modules\\hubot\\node_modules\\.bin;%PATH%\n+\n+node_modules\\.bin\\hubot.cmd --name \"sqweelygig\" %* ", "changes": 7}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/external-scripts.json", "blob_url": "https://github.com/hubotio/hubot/blob/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/external-scripts.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/external-scripts.json?ref=a35c216b6976e6dc40dc354eeb47ccd2c17403d6", "filename": "external-scripts.json", "sha": "64d9a2224f3fb2949079c277aa60308fc2781fb3", "additions": 9, "patch": "@@ -0,0 +1,9 @@\n+[\n+  \"hubot-redis-brain\",\n+  \"hubot-ignore-by-prefix\",\n+  \"hubot-ignore-own-output\",\n+  \"hubot-room-select\",\n+  \"hubot-annoying-song\",\n+  \"hubot-gitter-echo\",\n+  \"hubot-rules\"\n+]", "changes": 9}, {"status": "modified", "deletions": 30, "raw_url": "https://github.com/hubotio/hubot/raw/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/a35c216b6976e6dc40dc354eeb47ccd2c17403d6/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=a35c216b6976e6dc40dc354eeb47ccd2c17403d6", "filename": "package.json", "sha": "d34eaab5df975a531978102a68f3740126f35f7a", "additions": 44, "patch": "@@ -1,31 +1,33 @@\n {\n-  \"name\": \"hubot\",\n-  \"version\": \"2.19.0\",\n-  \"author\": \"hubot\",\n-  \"keywords\": [\n-    \"github\",\n-    \"hubot\",\n-    \"campfire\",\n-    \"bot\"\n-  ],\n-  \"description\": \"A simple helpful robot for your Company\",\n-  \"license\": \"MIT\",\n-  \"repository\": {\n-    \"type\": \"git\",\n-    \"url\": \"https://github.com/github/hubot.git\"\n-  },\n+  \"name\": \"hubot-as-mebot\",\n+  \"version\": \"0.0.0\",\n+  \"author\": \"Andrew Lucas <sqweelygig@googlemail.com>\",\n+  \"description\": \"A simple helpful robot for you\",\n+  \"license\": \"Apache-2.0\",\n   \"dependencies\": {\n-    \"async\": \">=0.1.0 <1.0.0\",\n-    \"chalk\": \"^1.0.0\",\n-    \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n-    \"connect-multiparty\": \"^1.2.5\",\n-    \"express\": \"^3.21.2\",\n-    \"log\": \"1.4.0\",\n-    \"optparse\": \"1.0.4\",\n-    \"scoped-http-client\": \"0.11.0\"\n+    \"hubot\": \"^2.19.0\",\n+    \"hubot-annoying-song\": \"^0.x\",\n+    \"hubot-diagnostics\": \"0.0.1\",\n+    \"hubot-flowdock-attend-own-account\": \"^0.7.7\",\n+    \"hubot-gitter2\": \"^0.1.3\",\n+    \"hubot-gitter-echo\": \"^0.x\",\n+    \"hubot-google-images\": \"^0.2.6\",\n+    \"hubot-google-translate\": \"^0.2.0\",\n+    \"hubot-help\": \"^0.2.0\",\n+    \"hubot-heroku-keepalive\": \"^1.0.2\",\n+    \"hubot-ignore-by-prefix\": \"^0.x\",\n+    \"hubot-ignore-own-output\": \"^0.x\",\n+    \"hubot-maps\": \"0.0.2\",\n+    \"hubot-pugme\": \"^0.1.0\",\n+    \"hubot-redis-brain\": \"0.0.3\",\n+    \"hubot-room-select\": \"^0.x\",\n+    \"hubot-rules\": \"^0.1.1\",\n+    \"hubot-scripts\": \"^2.17.2\",\n+    \"hubot-shipit\": \"^0.2.0\"\n   },\n   \"devDependencies\": {\n+    \"resin-lint\": \"^1.4.0\",\n     \"hubot-mock-adapter\": \"^1.0.0\",\n     \"coffee-errors\": \"0.8.6\",\n     \"mocha\": \"^2.1.0\",\n@@ -35,14 +37,26 @@\n     \"chai\": \"~2.1.0\"\n   },\n   \"engines\": {\n-    \"node\": \">= 0.8.x\",\n-    \"npm\": \">= 1.1.x\"\n+    \"node\": \"0.10.x\"\n   },\n-  \"main\": \"./index\",\n-  \"bin\": {\n-    \"hubot\": \"./bin/hubot\"\n+  \"main\": \"index.js\",\n+  \"directories\": {\n+    \"doc\": \"docs\",\n+    \"example\": \"examples\",\n+    \"test\": \"test\"\n   },\n   \"scripts\": {\n-    \"test\": \"./script/test\"\n-  }\n+    \"test\": \" \"\n+  },\n+  \"repository\": {\n+    \"type\": \"git\",\n+    \"url\": \"git+https://github.com/resin-io/hubot-as-mebot.git\"\n+  },\n+  \"keywords\": [\n+    \"hubot\"\n+  ],\n+  \"bugs\": {\n+    \"url\": \"https://github.com/resin-io/hubot-as-mebot/issues\"\n+  },\n+  \"homepage\": \"https://github.com/resin-io/hubot-as-mebot#readme\"\n }", "changes": 74}], "1276": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd1f85e461b51e3f04f7ac87ca7f6cdc41104cdb/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/dd1f85e461b51e3f04f7ac87ca7f6cdc41104cdb/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=dd1f85e461b51e3f04f7ac87ca7f6cdc41104cdb", "filename": "package.json", "sha": "9f28a0b68c0b7bf7b47b72c02676bd24352fc024", "additions": 1, "patch": "@@ -20,6 +20,7 @@\n     \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n     \"connect-multiparty\": \"^1.2.5\",\n+    \"ejs\": \"^2.5.5\",\n     \"express\": \"^3.21.2\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/dd1f85e461b51e3f04f7ac87ca7f6cdc41104cdb/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/dd1f85e461b51e3f04f7ac87ca7f6cdc41104cdb/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=dd1f85e461b51e3f04f7ac87ca7f6cdc41104cdb", "filename": "src/robot.coffee", "sha": "b8b519b6b165407a74e12fb85f84d642395df875", "additions": 3, "patch": "@@ -428,6 +428,9 @@ class Robot\n     app.use express.basicAuth user, pass if user and pass\n     app.use express.query()\n \n+    ## set the view engine to ejs\n+    app.set('view engine', 'ejs')\n+\n     app.use express.json()\n     app.use express.urlencoded()\n     # replacement for deprecated express.multipart/connect.multipart", "changes": 3}], "1286": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/79f0c67b5b8b1db38996be64844a0a649decd857/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/79f0c67b5b8b1db38996be64844a0a649decd857/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=79f0c67b5b8b1db38996be64844a0a649decd857", "filename": "README.md", "sha": "cc45095ed3aff32bd6c9a151cdff6c84d6b632fb", "additions": 4, "patch": "@@ -1,8 +1,8 @@\n # Hubot\n \n-Hubot is a chat bot, modeled after GitHub's Campfire bot, hubot. He's pretty\n-cool. He's [extendable with scripts](http://hubot.github.com/docs/#scripts) and can work on [many\n-different chat services](https://hubot.github.com/docs/adapters/).\n+Hubot is a framework to build chat bots, modeled after GitHub's Campfire bot of the same name, hubot. \n+He's pretty cool. He's [extendable with scripts](http://hubot.github.com/docs/#scripts) and can work \n+on [many different chat services](https://hubot.github.com/docs/adapters/).\n \n This repository provides a library that's distributed by `npm` that you\n use for building your own bots.  See the [documentation](http://hubot.github.com/docs)\n@@ -11,7 +11,7 @@ for details on getting up and running with your very own robot friend.\n In most cases, you'll probably never have to hack on this repo directly if you\n are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTING.md)\n \n-If you'd like to chat, drop by [#hubot](http://webchat.freenode.net/?channels=#hubot) on FreeNode IRC.\n+If you'd like to chat with Hubot users and developers, drop by #hubot on FreeNode IRC.\n \n ## License\n ", "changes": 8}], "1289": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/3b01195bcf39e3837f4bb085094482fc188351d8/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3b01195bcf39e3837f4bb085094482fc188351d8/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=3b01195bcf39e3837f4bb085094482fc188351d8", "filename": "src/robot.coffee", "sha": "d30d63dad0f626a6f6ea9b236df94dcc15a3a713", "additions": 1, "patch": "@@ -596,6 +596,7 @@ class Robot\n     clearInterval @pingIntervalId if @pingIntervalId?\n     process.removeListener 'uncaughtException', @onUncaughtException\n     @adapter.close()\n+    @server.close() if @server\n     @brain.close()\n \n   # Public: The version of Hubot from npm", "changes": 1}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3b01195bcf39e3837f4bb085094482fc188351d8/test/middleware_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3b01195bcf39e3837f4bb085094482fc188351d8/test/middleware_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/middleware_test.coffee?ref=3b01195bcf39e3837f4bb085094482fc188351d8", "filename": "test/middleware_test.coffee", "sha": "6fd906696a3a705790aa9c48b8abd2bfc29d2a5b", "additions": 0, "patch": "@@ -334,7 +334,6 @@ describe 'Middleware', ->\n       @testListener = @robot.listeners[0]\n \n     afterEach ->\n-      @robot.server.close()\n       @robot.shutdown()\n \n     describe 'listener middleware context', ->", "changes": 1}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3b01195bcf39e3837f4bb085094482fc188351d8/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/3b01195bcf39e3837f4bb085094482fc188351d8/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=3b01195bcf39e3837f4bb085094482fc188351d8", "filename": "test/robot_test.coffee", "sha": "4bce67b7e6f882d07dc6cda8ad573662cb67b1fd", "additions": 0, "patch": "@@ -46,7 +46,6 @@ describe 'Robot', ->\n     }\n \n   afterEach ->\n-   @robot.server.close()\n    @robot.shutdown()\n \n   describe 'Unit Tests', ->", "changes": 1}], "1290": [{"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/35d7b26dbd1b09550f31454108c54ac64f7a88d1/docs/adapters/development.md", "blob_url": "https://github.com/hubotio/hubot/blob/35d7b26dbd1b09550f31454108c54ac64f7a88d1/docs/adapters/development.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/development.md?ref=35d7b26dbd1b09550f31454108c54ac64f7a88d1", "filename": "docs/adapters/development.md", "sha": "7def7b15a510d4b07523754269a15ea4c59abe37", "additions": 9, "patch": "@@ -66,15 +66,17 @@ exports.use = (robot) ->\n There is a an open issue in the node community around [npm linked peer dependencies not working](https://github.com/npm/npm/issues/5875).  To get this working for our project you will need to do some minor changes to your code.\n \n 1. For the import in your `hubot-sample` adapter, add the following code\n-```coffee\n-try\n-  {Robot,Adapter,TextMessage,User} = require 'hubot'\n-catch\n-  prequire = require('parent-require')\n-  {Robot,Adapter,TextMessage,User} = prequire 'hubot'\n+\n+  ```coffee\n+  try\n+    {Robot,Adapter,TextMessage,User} = require 'hubot'\n+  catch\n+    prequire = require('parent-require')\n+    {Robot,Adapter,TextMessage,User} = prequire 'hubot'\n   ```\n 2. In your `hubot-sample` folder, modify the `package.json` to include the following dependency so this custom import mechanism will work\n-```json\n+\n+  ```json\n   \"dependencies\": {\n     \"parent-require\": \"^1.0.0\"\n   }", "changes": 16}], "1303": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/2fc6c819183f4137ce1719e279a16a4668a00af9/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/2fc6c819183f4137ce1719e279a16a4668a00af9/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=2fc6c819183f4137ce1719e279a16a4668a00af9", "filename": "src/robot.coffee", "sha": "f8eaf4c7dfe8afb32df5502aca3d7b59779c3799", "additions": 4, "patch": "@@ -416,6 +416,8 @@ class Robot\n     port    = process.env.EXPRESS_PORT or process.env.PORT or 8080\n     address = process.env.EXPRESS_BIND_ADDRESS or process.env.BIND_ADDRESS or '0.0.0.0'\n \n+    expressRequestJsonSize = process.env.EXPRESS_REQUEST_JSON_SIZE or '1mb'\n+\n     express = require 'express'\n     multipart = require 'connect-multiparty'\n \n@@ -428,8 +430,9 @@ class Robot\n     app.use express.basicAuth user, pass if user and pass\n     app.use express.query()\n \n-    app.use express.json()\n+    app.use express.json({limit: expressRequestJsonSize})\n     app.use express.urlencoded()\n+\n     # replacement for deprecated express.multipart/connect.multipart\n     # limit to 100mb, as per the old behavior\n     app.use multipart(maxFilesSize: 100 * 1024 * 1024)", "changes": 5}], "1309": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "CHANGELOG.md", "sha": "96988b4646a8bf0ee91c6b7ed8fa60c7c8d83a0a", "additions": 1, "patch": "@@ -40,8 +40,7 @@\n - Upgrade express to v3.21.2 [\\#1119](https://github.com/github/hubot/pull/1119) ([sgerrand](https://github.com/sgerrand))\n - Fixed link to getting started [\\#1116](https://github.com/github/hubot/pull/1116) ([jackmawer](https://github.com/jackmawer))\n - Fix http and https documentation [\\#1114](https://github.com/github/hubot/pull/1114) ([technicalpickles](https://github.com/technicalpickles))\n-- \\[shell\\] don't color hubot responses green, to be more visible on light backgrounds [\\#1111](https://github.com/github/hubot/pull/1111) ([technicalpickles](https://g\n-ithub.com/technicalpickles))\n+- \\[shell\\] don't color hubot responses green, to be more visible on light backgrounds [\\#1111](https://github.com/github/hubot/pull/1111) ([technicalpickles](https://github.com/technicalpickles))\n - Determine adapterPath in robot.coffee, rather than bin/hubot [\\#1109](https://github.com/github/hubot/pull/1109) ([technicalpickles](https://github.com/technicalpickl\n es))\n - Updated copyright to 2016 [\\#1103](https://github.com/github/hubot/pull/1103) ([aqnouch](https://github.com/aqnouch))", "changes": 3}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/adapters.md", "sha": "c8838876113a428a24e2361e0ca84d33186a9f0b", "additions": 6, "patch": "@@ -1,16 +1,17 @@\n ---\n-permalink: /docs/adapters/index.html\n-layout: docs\n+permalink: /docs/adapters/\n ---\n \n+# Adapters\n+\n Adapters are the interface to the service you want your hubot to run on.\n \n ## Official Adapters\n \n Hubot includes two official adapters:\n \n-* [Shell](/docs/adapters/shell.md), i.e. for use with development\n-* [Campfire](/docs/adapters/campfire.md)\n+* [Shell](./adapters/shell.md), i.e. for use with development\n+* [Campfire](./adapters/campfire.md)\n \n ## Third-party Adapters\n \n@@ -58,4 +59,4 @@ to have yours added to the list:\n \n ## Writing Your Own Adapter\n \n-Interested in adding your own adapter? Check out our documentation for [developing adapters](/docs/adapters/development.md)\n+Interested in adding your own adapter? Check out our documentation for [developing adapters](./adapters/development.md)", "changes": 11}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/adapters/campfire.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/adapters/campfire.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/campfire.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/adapters/campfire.md", "sha": "bd519e036b1ad122d4b58a7a2da0ed63f022acb7", "additions": 4, "patch": "@@ -1,8 +1,9 @@\n ---\n-permalink: /docs/adapters/campfire/index.html\n-layout: docs\n+permalink: /docs/adapters/campfire/\n ---\n \n+# Campfire adapter\n+\n [Campfire](http://campfirenow.com/) is a web based chat application built by\n [37signals](http://37signals.com). The Campfire adapter is one of the original\n adapters in Hubot.\n@@ -16,7 +17,7 @@ Next, you will need to create a user on your Campfire account for your Hubot,\n then give it access so it can join to your rooms. You will need to create a room\n if you haven't already.\n \n-Hubot defaults to using its [shell](/docs/adapters/shell.md), so to use Campfire instead, you\n+Hubot defaults to using its [shell](./shell.md), so to use Campfire instead, you\n can run hubot with `-a campfire`:\n \n     % bin/hubot -a campfire", "changes": 7}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/adapters/development.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/adapters/development.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/development.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/adapters/development.md", "sha": "9375d8248ac8248c2501fa1cb186b8da409ad4cd", "additions": 7, "patch": "@@ -1,9 +1,10 @@\n ---\n-layout: docs\n-permalink: /docs/adapters/development/index.html\n+permalink: /docs/adapters/development/\n ---\n \n-# Adapter Basics\n+# Development adapter\n+\n+## Adapter Basics\n \n All adapters inherit from the Adapter class in the `src/adapter.coffee` file.  There are certain methods that you will want to override.  Here is a basic stub of what an extended Adapter class would look like:\n \n@@ -32,7 +33,7 @@ exports.use = (robot) ->\n   new Sample robot\n ```\n \n-# Setting Up Your Development Environment\n+## Setting Up Your Development Environment\n \n 1. Create a new folder for your adapter `hubot-sample`\n   - `mkdir hubot-sample`\n@@ -54,14 +55,14 @@ exports.use = (robot) ->\n     \"coffee-script\": \">=1.2.0\"\n   }\n   ```\n-  \n+\n 7. Generate your Hubot using the `yo hubot` [command](https://hubot.github.com/docs/)\n 8. Change working directories to the `hubot` you created in step 7.\n 9. Now perform an `npm link` to add your adapter to `hubot`\n   - `npm link ../hubot-sample`\n 10. Run `hubot -a sample`\n \n-# Gotchas\n+## Gotchas\n \n There is a an open issue in the node community around [npm linked peer dependencies not working](https://github.com/npm/npm/issues/5875).  To get this working for our project you will need to do some minor changes to your code.\n ", "changes": 13}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/adapters/shell.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/adapters/shell.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters/shell.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/adapters/shell.md", "sha": "5aa8c37a337a7bdb20686516b4bcbb27108ba406", "additions": 3, "patch": "@@ -1,8 +1,9 @@\n ---\n-permalink: /docs/adapters/shell/index.html\n-layout: docs\n+permalink: /docs/adapters/shell/\n ---\n \n+# Shell adapter\n+\n The shell adapter provides a simple read-eval-print loop for interacting with a hubot locally.\n It can be useful for testing scripts before using them on a live hubot.\n ", "changes": 5}, {"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/deploying.md", "sha": "4d725d38d3867648534a4fd0e1aa7c5d7e4978da", "additions": 8, "patch": "@@ -1,10 +1,11 @@\n ---\n-permalink: /docs/deploying/index.html\n-layout: docs\n+permalink: /docs/deploying/\n ---\n \n-- [Azure](/docs/deploying/azure.md)\n-- [Bluemix](/docs/deploying/bluemix.md)\n-- [Heroku](/docs/deploying/heroku.md)\n-- [Unix](/docs/deploying/unix.md)\n-- [Windows](/docs/deploying/windows.md)\n+# Deploying\n+\n+- [Azure](./deploying/azure.md)\n+- [Bluemix](./deploying/bluemix.md)\n+- [Heroku](./deploying/heroku.md)\n+- [Unix](./deploying/unix.md)\n+- [Windows](./deploying/windows.md)", "changes": 15}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying/azure.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying/azure.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/azure.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/deploying/azure.md", "sha": "8d25c0d9347869424dd3ba2321392badceed8baa", "additions": 5, "patch": "@@ -1,10 +1,11 @@\n ---\n-permalink: /docs/deploying/azure/index.html\n-layout: docs\n+permalink: /docs/deploying/azure/\n ---\n \n+# Deploying to Azure\n+\n If you've been following along with [Getting Started](../index.md), it's time to deploy so you can use it beyond just your local machine.\n-[Azure](http://azure.microsoft.com/) is a way to deploy hubot as an alternative to [Heroku](/docs/deploying/heroku.md).\n+[Azure](http://azure.microsoft.com/) is a way to deploy hubot as an alternative to [Heroku](heroku.md).\n \n You will need to install the azure-cli via npm after you have follow the initial instructions for your hubot.\n \n@@ -69,7 +70,7 @@ Finally, add two more environment variables to your website. You can do this eit\n     % $settings[\"HUBOT_BRAIN_AZURE_STORAGE_ACCESS_KEY\"] = \"your Azure storage account key\"\n     % Set-AzureWebsite -AppSettings $settings mynewhubot\n \n-Now any scripts that require a brain will function. You should look up other scripts or write your own by looking at the [documentation](/docs/scripting.md). All of the normal scripts for hubot are compatible with hosting hubot on Azure.\n+Now any scripts that require a brain will function. You should look up other scripts or write your own by looking at the [documentation](../scripting.md). All of the normal scripts for hubot are compatible with hosting hubot on Azure.\n \n ### Troubleshooting tips and tricks\n ", "changes": 9}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying/bluemix.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying/bluemix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/bluemix.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/deploying/bluemix.md", "sha": "72b0780d211e16e1b4702885ebacf7f660c35305", "additions": 4, "patch": "@@ -1,12 +1,13 @@\n ---\n-permalink: /docs/deploying/bluemix/index.html\n-layout: docs\n+permalink: /docs/deploying/bluemix/\n ---\n \n+# Deploying to Bluemix\n+\n If you've been following along with [Getting Started](../index.md), it's time\n to deploy so you can use it beyond just your local machine.\n [IBM Bluemix](http://bluemix.net) is a way to deploy hubot as an alternative to\n-[Heroku](/docs/deploying/heroku.md). It is built on the open-source project\n+[Heroku](heroku.md). It is built on the open-source project\n [Cloud Foundry](https://www.cloudfoundry.org/), so we'll be using the `cf cli`\n throughout these examples.\n ", "changes": 7}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/deploying/heroku.md", "sha": "53d860b0f10b510401824f23189ad23efd15ce7b", "additions": 4, "patch": "@@ -1,8 +1,9 @@\n ---\n-permalink: /docs/deploying/heroku/index.html\n-layout: docs\n+permalink: /docs/deploying/heroku/\n ---\n \n+# Deploying to Heroku\n+\n If you've been following along with [Getting Started](../index.md), it's time to deploy so you can use it beyond just your local machine.\n [Heroku](http://www.heroku.com/) is an easy and supported way to deploy hubot.\n \n@@ -32,7 +33,7 @@ Then create a Heroku application:\n \n Before you deploy the application, you'll need to configure some environment\n variables for hubot to use. The specific variables you'll need depends on which\n-[adapter](/docs/adapters.md) and scripts you are using. For Campfire, with no other\n+[adapter](../adapters.md) and scripts you are using. For Campfire, with no other\n scripts, you'd need to set the following environment variables:\n \n     % heroku config:set HUBOT_CAMPFIRE_ACCOUNT=yourcampfireaccount", "changes": 7}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying/unix.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying/unix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/unix.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/deploying/unix.md", "sha": "07b386d7cc243bae34a8055275be4cf447947aac", "additions": 3, "patch": "@@ -1,8 +1,9 @@\n ---\n-permalink: /docs/deploying/unix/index.html\n-layout: docs\n+permalink: /docs/deploying/unix/\n ---\n \n+# Deploying to Unix\n+\n Because there are so many variations of Linux, and more generally UNIX, it's\n difficult for the hubot team to have canonical documentation for installing and\n deploying it to every version out there. So, this is an attempt to give an", "changes": 5}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying/windows.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/deploying/windows.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/windows.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/deploying/windows.md", "sha": "41fc9b68b6d288134ec80e971031b177be542542", "additions": 5, "patch": "@@ -1,8 +1,9 @@\n ---\n-permalink: /docs/deploying/windows/index.html\n-layout: docs\n+permalink: /docs/deploying/windows/\n ---\n \n+# Deploying to Windows\n+\n Hasn't been fully tested - YMMV\n \n There are 4 primary steps to deploying and running hubot on a Windows machine:\n@@ -22,7 +23,7 @@ Your other option is to install directly from [NodeJS](https://nodejs.org/) and\n \n ## Updating code on the server\n \n-To get the code on your server, you can follow the instructions at [Getting Started](/docs/index.md) on your local development machine or directly on the server. If you are building locally, push your hubot to GitHub and clone the repo onto your server. Don't clone the normal [github/hubot repository](http://github.com/github/hubot), make sure you're using the Yo Generator to build your own hubot.\n+To get the code on your server, you can follow the instructions at [Getting Started](../index.md) on your local development machine or directly on the server. If you are building locally, push your hubot to GitHub and clone the repo onto your server. Don't clone the normal [github/hubot repository](http://github.com/github/hubot), make sure you're using the Yo Generator to build your own hubot.\n \n ## Setting up environment vars\n \n@@ -45,7 +46,7 @@ There are a few issues if you call it manually, though.\n * hubot dies, for any reason, and doesn't start again\n * it doesn't start up at boot automatically\n \n-To fix this, you will want to create a .ps1 file with whatever name makes you happy that you will call from your hubot directory. There is a copy of this file in the `examples` directory [here](/examples/hubot-start.ps1). It should contain the following:\n+To fix this, you will want to create a .ps1 file with whatever name makes you happy that you will call from your hubot directory. There is a copy of this file in the `examples` directory [here](../../examples/hubot-start.ps1). It should contain the following:\n \n     Write-Host \"Starting Hubot Watcher\"\n     While (1)", "changes": 9}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/implementation.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/implementation.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/implementation.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/implementation.md", "sha": "0230d560aefc740a117337f0236c635066f60aec", "additions": 3, "patch": "@@ -1,9 +1,10 @@\n ---\n title: Implementation Notes\n-permalink: /docs/implementation/index.html\n-layout: docs\n+permalink: /docs/implementation/\n ---\n \n+# Implementation\n+\n For the purpose of maintainability, several internal flows are documented here.\n \n ## Message Processing", "changes": 5}, {"status": "modified", "deletions": 18, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/index.md", "sha": "5f59fcae88cc0333b55a4ea84d2bb1b8adb9627e", "additions": 16, "patch": "@@ -1,7 +1,5 @@\n ---\n-title: Hubot\n-permalink: /docs/index.html\n-layout: docs\n+permalink: /docs/\n ---\n \n ## Getting Started With Hubot\n@@ -20,7 +18,7 @@ we wanted to make a bot called myhubot:\n     % yo hubot\n \n At this point, you'll be asked a few questions about who is creating the bot,\n-and which [adapter](/docs/adapters.md) you'll be using. Adapters are hubot's\n+and which [adapter](adapters.md) you'll be using. Adapters are hubot's\n way of integrating with different chat providers.\n \n If you are using git, the generated directory includes a .gitignore, so you can\n@@ -34,13 +32,13 @@ If you'd prefer to automate your hubot build without being interactively\n prompted for its configuration, you can add the following options\n to the `yo hubot` command to do so:\n \n-| Option                                      | Description\n-| ------------------------------------------- | -----------------------------------------------------\n-| `--owner=\"Bot Wrangler <bw@example.com>\"`   | Bot owner, e.g. \"Bot Wrangler <bw@example.com>\"\n-| `--name=\"Hubot\"`                            | Bot name, e.g. \"Hubot\"\n-| `--description=\"Delightfully aware robutt\"` | Bot description, e.g. \"Delightfully aware robutt\"\n-| `--adapter=campfire`                        | Bot adapter, e.g. \"campfire\"\n-| `--defaults`                                | Declare all defaults are set and no prompting required\n+| Option                                      | Description                                            |\n+|:--------------------------------------------|:-------------------------------------------------------|\n+| `--owner=\"Bot Wrangler <bw@example.com>\"`   | Bot owner, e.g. \"Bot Wrangler <bw@example.com>\"        |\n+| `--name=\"Hubot\"`                            | Bot name, e.g. \"Hubot\"                                 |\n+| `--description=\"Delightfully aware robutt\"` | Bot description, e.g. \"Delightfully aware robutt\"      |\n+| `--adapter=campfire`                        | Bot adapter, e.g. \"campfire\"                           |\n+| `--defaults`                                | Declare all defaults are set and no prompting required |\n \n You now have your own functional hubot! There's a `bin/hubot`\n command for convenience, to handle installing npm dependencies, loading scripts,\n@@ -51,7 +49,7 @@ Hubot needs Redis to persist data, so before you can start hubot on your own com\n     % bin/hubot\n     Hubot>\n \n-This starts hubot using the [shell adapter](/docs/adapters/shell.md), which\n+This starts hubot using the [shell adapter](./adapters/shell.md), which\n is mostly useful for development. Make note of  `Hubot>`; this is the name your hubot will\n `respond` to with commands. For example, to list available commands:\n \n@@ -109,22 +107,22 @@ To use a script from an NPM package:\n 2. Add the package to `external-scripts.json`.\n 3. Run `npm home <package-name>` to open a browser window for the homepage of the script, where you can find more information about configuring and installing the script.\n \n-You can also put your own scripts under the `scripts/` directory. All scripts placed there are automatically loaded and ready to use with your hubot. Read more about customizing hubot by [writing your own scripts](/docs/scripting.md).\n+You can also put your own scripts under the `scripts/` directory. All scripts placed there are automatically loaded and ready to use with your hubot. Read more about customizing hubot by [writing your own scripts](scripting.md).\n \n ## Adapters\n \n-Hubot uses the adapter pattern to support multiple chat-backends. Here is a [list of available adapters](/docs/adapters.md), along with details on how to configure them.\n+Hubot uses the adapter pattern to support multiple chat-backends. Here is a [list of available adapters](adapters.md), along with details on how to configure them.\n \n ## Deploying\n \n You can deploy hubot to Heroku, which is the officially supported method.\n Additionally you are able to deploy hubot to a UNIX-like system or Windows.\n Please note the support for deploying to Windows isn't officially supported.\n \n-* [Deploying Hubot onto Heroku](/docs/deploying/heroku.md)\n-* [Deploying Hubot onto UNIX](/docs/deploying/unix.md)\n-* [Deploying Hubot onto Windows](/docs/deploying/windows.md)\n+* [Deploying Hubot onto Heroku](./deploying/heroku.md)\n+* [Deploying Hubot onto UNIX](./deploying/unix.md)\n+* [Deploying Hubot onto Windows](./deploying/windows.md)\n \n ## Patterns\n \n-Using custom scripts, you can quickly customize Hubot to be the most life embettering robot he or she can be. Read [docs/patterns.md](/docs/patterns.md) for some nifty tricks that may come in handy as you teach your hubot new skills.\n+Using custom scripts, you can quickly customize Hubot to be the most life embettering robot he or she can be. Read [docs/patterns.md](patterns.md) for some nifty tricks that may come in handy as you teach your hubot new skills.", "changes": 34}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/patterns.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/patterns.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/patterns.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/patterns.md", "sha": "06ecbc49584718c6cb947f57c04a0d83802e1345", "additions": 5, "patch": "@@ -1,8 +1,9 @@\n ---\n-permalink: /docs/patterns/index.html\n-layout: docs\n+permalink: /docs/patterns/\n ---\n \n+# Patterns\n+\n Shared patterns for dealing with common Hubot scenarios.\n \n ## Renaming the Hubot instance\n@@ -14,7 +15,7 @@ When you rename Hubot, he will no longer respond to his former name. In order to\n \n Setting this up is very easy:\n \n-1. Create a [bundled script](/docs/scripting.md) in the `scripts/` directory of your Hubot instance called `rename-hubot.coffee`\n+1. Create a [bundled script](scripting.md) in the `scripts/` directory of your Hubot instance called `rename-hubot.coffee`\n 2. Add the following code, modified for your needs:\n \n ```coffeescript\n@@ -72,7 +73,7 @@ In many corporate environments, a web proxy is required to access the Internet a\n Due to the way node.js handles HTTP and HTTPS requests, you need to specify a different Agent for each protocol. ScopedHTTPClient will then automatically choose the right ProxyAgent for each request.\n \n 1. Install ProxyAgent. `npm install proxy-agent`\n-2. Create a [bundled script](/docs/scripting.md) in the `scripts/` directory of your Hubot instance called `proxy.coffee`\n+2. Create a [bundled script](scripting.md) in the `scripts/` directory of your Hubot instance called `proxy.coffee`\n 3. Add the following code, modified for your needs:\n \n ```coffeescript", "changes": 9}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=81b08fc44e7aeba96c5bf6dc4dd1a0a4bc4abe75", "filename": "docs/scripting.md", "sha": "ddb17265b0076984a5ecba83b04f760a47ec638a", "additions": 5, "patch": "@@ -1,9 +1,10 @@\n ---\n-permalink: /docs/scripting/index.html\n-layout: docs\n+permalink: /docs/scripting/\n ---\n \n-Hubot out of the box doesn't do too much but it is an extensible, scriptable robot friend. There are [hundreds of scripts written and maintained by the community](/docs/#scripts.md) and it's easy to write your own.  You can create a custom script in hubot's `scripts` directory or [create a script package](#creating-a-script-package) for sharing with the community!\n+# Scripting\n+\n+Hubot out of the box doesn't do too much but it is an extensible, scriptable robot friend. There are [hundreds of scripts written and maintained by the community](index.md#scripts) and it's easy to write your own.  You can create a custom script in hubot's `scripts` directory or [create a script package](#creating-a-script-package) for sharing with the community!\n \n ## Anatomy of a script\n \n@@ -589,7 +590,7 @@ Once you've built some new scripts to extend the abilities of your robot friend,\n \n ## See if a script already exists\n \n-Start by [checking if an NPM package](/docs/index.md#scripts) for a script like yours already exists.  If you don't see an existing package that you can contribute to, then you can easily get started using the `hubot` script [yeoman](http://yeoman.io/) generator.\n+Start by [checking if an NPM package](index.md#scripts) for a script like yours already exists.  If you don't see an existing package that you can contribute to, then you can easily get started using the `hubot` script [yeoman](http://yeoman.io/) generator.\n \n ## Creating A Script Package\n ", "changes": 9}], "1312": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e86a3cc125eb7631454753d59dc5507685c9f64d/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/e86a3cc125eb7631454753d59dc5507685c9f64d/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=e86a3cc125eb7631454753d59dc5507685c9f64d", "filename": "docs/scripting.md", "sha": "a79510a4673adcbda7af0669d0bb90eec8d56f58", "additions": 1, "patch": "@@ -385,7 +385,7 @@ module.exports = (robot) ->\n   robot.respond /unannoy me/, (res) ->\n     if annoyIntervalId\n       res.send \"GUYS, GUYS, GUYS!\"\n-      clearInterval(annoyIntervalId) ->\n+      clearInterval(annoyIntervalId)\n       annoyIntervalId = null\n     else\n       res.send \"Not annoying you right now, am I?\"", "changes": 2}], "1317": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/49f4412fce0dc27e61b2a0e2e1d421040949d439/LICENSE.md", "blob_url": "https://github.com/hubotio/hubot/blob/49f4412fce0dc27e61b2a0e2e1d421040949d439/LICENSE.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/LICENSE.md?ref=49f4412fce0dc27e61b2a0e2e1d421040949d439", "filename": "LICENSE.md", "sha": "5bdf03cdecfafb148570fc9963a893f601907234", "additions": 1, "patch": "@@ -1,4 +1,4 @@\n-Copyright (c) 2011-2016 GitHub Inc.\n+Copyright (c) 2011-2017 GitHub Inc.\n \n Permission is hereby granted, free of charge, to any person obtaining\n a copy of this software and associated documentation files (the", "changes": 2}], "1319": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/07190dd3c3a1caab75801a3097bca2dcea523ae3/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/07190dd3c3a1caab75801a3097bca2dcea523ae3/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=07190dd3c3a1caab75801a3097bca2dcea523ae3", "filename": "docs/adapters.md", "sha": "db5dbd001147a64dcd0b19a563742d8d6e76533b", "additions": 1, "patch": "@@ -22,6 +22,7 @@ to have yours added to the list:\n \n * [AIM](https://github.com/shaundubuque/hubot-aim)\n * [ChatWork](https://github.com/akiomik/hubot-chatwork)\n+* [DCPP](https://github.com/ParthKolekar/hubot-dc)\n * [Dasher](https://github.com/nebulist/hubot-dasher)\n * [Fleep](https://github.com/anroots/hubot-fleep)\n * [Flowdock](https://github.com/flowdock/hubot-flowdock)", "changes": 1}], "1320": [{"status": "modified", "deletions": 38, "raw_url": "https://github.com/hubotio/hubot/raw/2319ce217f9ec2afe99fe4034de2dd47e03e3054/docs/adapters.md", "blob_url": "https://github.com/hubotio/hubot/blob/2319ce217f9ec2afe99fe4034de2dd47e03e3054/docs/adapters.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/adapters.md?ref=2319ce217f9ec2afe99fe4034de2dd47e03e3054", "filename": "docs/adapters.md", "sha": "d7096d65d5013e8a506ee44f7cba35c5cdd1091e", "additions": 3, "patch": "@@ -6,56 +6,21 @@ permalink: /docs/adapters/\n \n Adapters are the interface to the service you want your hubot to run on.\n \n-## Official Adapters\n-\n Hubot includes two official adapters:\n \n * [Shell](./adapters/shell.md), i.e. for use with development\n * [Campfire](./adapters/campfire.md)\n \n-## Third-party Adapters\n-\n-Third-party adapters are available as `npm` packages. Here is a list of known\n-adapters, but please [submit an issue](https://github.com/github/hubot/issues)\n-to have yours added to the list:\n+There are Third-party adapaters are available for most chat services. Here are the most popular ones:\n \n-\n-* [AIM](https://github.com/shaundubuque/hubot-aim)\n-* [ChatWork](https://github.com/akiomik/hubot-chatwork)\n-* [Dasher](https://github.com/nebulist/hubot-dasher)\n-* [Fleep](https://github.com/anroots/hubot-fleep)\n-* [Flowdock](https://github.com/flowdock/hubot-flowdock)\n * [Gitter](https://github.com/huafu/hubot-gitter2)\n-* [Gtalk](https://github.com/atmos/hubot-gtalk)\n-* [Hall](https://github.com/Hall/hubot-hall)\n * [HipChat](https://github.com/hipchat/hubot-hipchat)\n-* [iMessage](https://github.com/lazerwalker/hubot-imessage)\n * [IRC](https://github.com/nandub/hubot-irc)\n-* [Jabbr](https://github.com/smoak/hubot-jabbr)\n-* [Let's Chat](https://github.com/sdelements/hubot-lets-chat)\n-* [Lingr](https://github.com/miyagawa/hubot-lingr)\n-* [Mattermost](https://github.com/renanvicente/hubot-mattermost)\n-* [Mattermost](https://github.com/loafoe/hubot-matteruser) - websocket\n-* [Messenger Platform](https://github.com/ClaudeBot/hubot-messenger-bot)\n-* [QQ](https://github.com/xhan/qqbot)\n-* [Partychat](https://github.com/iangreenleaf/hubot-partychat-hooks)\n-* [Proxy](https://github.com/Hammertime38/hubot-proxy) - This adapter allows the base application to observe, handle, and control events sent to the proxied adapter, all defined in a config object at the root of the module.\n * [Rocket.Chat](https://github.com/RocketChat/hubot-rocketchat)\n * [Slack](https://github.com/slackhq/hubot-slack)\n-* [Skype](https://github.com/netpro2k/hubot-skype)\n-* [SkypeWeb](https://github.com/sdimkov/hubot-skype-web)\n-* [Skyweb](https://github.com/EllisV/hubot-skyweb)\n-* [Talker](https://github.com/unixcharles/hubot-talker)\n-* [Telegram](https://github.com/lukefx/hubot-telegram)\n-* [Twilio IP Messaging](https://github.com/philnash/hubot-twilio-ip-messaging)\n-* [Twilio SMS](https://github.com/jkarmel/hubot-twilio)\n-* [Twitter](https://github.com/MathildeLemee/hubot-twitter)\n-* [Typetalk](https://github.com/nulab/hubot-typetalk)\n-* [VictorOps](https://github.com/victorops/hubot-victorops)\n-* [Visual Studio Online](https://github.com/scrumdod/hubot-VSOnline)\n-* [Weixin](https://github.com/KasperDeng/Hubot-WeChat)\n * [XMPP](https://github.com/markstory/hubot-xmpp)\n-* [Yammer](https://github.com/athieriot/hubot-yammer)\n+\n+Browse all [repositories with the `hubot-adapter` topic on GitHub](https://github.com/search?q=topic%3Ahubot-adapter&type=Repositories) or [search for adapters on NPM](https://www.npmjs.com/search?q=hubot%20adapter&ranking=popularity). Add the `hubot-adapter` [topic](https://help.github.com/articles/classifying-your-repository-with-topics/) to your repository on GitHub to include it in this list.\n \n ## Writing Your Own Adapter\n ", "changes": 41}], "1321": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/bcd94ba79ba285c5c81f28781483b2744b9d75bc/ROADMAP.md", "blob_url": "https://github.com/hubotio/hubot/blob/bcd94ba79ba285c5c81f28781483b2744b9d75bc/ROADMAP.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/ROADMAP.md?ref=bcd94ba79ba285c5c81f28781483b2744b9d75bc", "filename": "ROADMAP.md", "sha": "3d90383126001ad8ecc7a176f0cb27fab6dc7491", "additions": 35, "patch": "@@ -0,0 +1,35 @@\n+# Hubot Roadmap\n+\n+Hubot v3 aims to be a bot framework optimized for developers and developer workflows, with great integration with the most popular chat clients and developer tools, and an active community that is sharing scripts and best practices.\n+\n+This roadmap represents some of priorities for us over the next couple months. Issues or pull requests will be opened to discuss each of these items as they progress.\n+\n+## 1. Return to a \u201cmaintained\u201d status\n+\n+- [ ] Create a Hubot core team with at least 2 GitHub employees and at least 1 community member. Core team members will be expected to participate in a a first-responder rotation, which will aim to reduce the average time to first response on all new Issues and PRs to 48 hours.\n+- [ ] Document all maintainer processes (triage, release, etc.)\n+- [ ] Create an issue template that addresses common requests\n+- [ ] Configure automation ([probot stale](https://github.com/probot/stale), [Greenkeeper](https://greenkeeper.io/), [semantic-release](https://github.com/semantic-release/semantic-release))\n+- [ ] Review all [open PRs](https://github.com/github/hubot/pulls) and triage [open issues](https://github.com/github/hubot/issues)\n+- [ ] Establish a release process and regular release cadence of the first Tuesday of every month.\n+\n+## 2. Modernize the community\n+\n+- [ ] Consolidate all officially supported Hubot projects into a single GitHub organization. This will include github/hubot and a handful of supported scripts, but will not include all community scripts in https://github.com/hubot-scripts\n+- [ ] Create a community forum to provide a place for people to ask questions, get help, and share best practices. [Discourse](https://www.discourse.org/) is the obvious choice here.\n+- [ ] Choose a chat platform for maintainers and contributors, and post notices in various existing places (#hubot on freenode, github/hubot on Gitter). Slack is the obvious choice here.\n+- [ ] Add a code of conduct based on http://contributor-covenant.org/ and processes to enforce it in all official spaces.\n+- [ ] Publish weekly community updates (blog, newsletter, etc) which highlight recent and upcoming changes, give shoutouts to contributors / maintainers, and maybe mention interesting uses of Hubot\n+- [ ] Create Hubot Evolution\u2014inspired by [Swift Evolution](https://github.com/apple/swift-evolution)\u2014for proposing user-visible enhancements. This roadmap will be moved there and all future proposals will follow the process laid out in that repository.\n+\n+## 3. Modernize the project\n+\n+Each of these proposals will go through the \u201cHubot Evolution\u201d process.\n+\n+- [ ] Translate from CoffeeScript to JavaScript and update to modern versions of Node.js and NPM (or Yarn)\n+- [ ] Support for running multiple adapters and archetypes (chat, deployment, CI, github, etc)\n+- [ ] Merge with [@probot](https://github.com/probot) and build out first class GitHub integration.\n+- [ ] Introduce \"Commands\u201d, an explicit interface for registering commands (like Slack\u2019s slash commands) as an alternative to regular expressions\n+- [ ] Publish a ChatOps RPC spec and implement support for Hubot acting as both a client and a server.\n+- [ ] Support rich messages and interactions on platforms that support it\n+- [ ] Publish a public script directory backed by NPM", "changes": 35}], "1323": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3bcf72ec0fb057d493b36fdeb2dadf6f7e09a90d/ROADMAP.md", "blob_url": "https://github.com/hubotio/hubot/blob/3bcf72ec0fb057d493b36fdeb2dadf6f7e09a90d/ROADMAP.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/ROADMAP.md?ref=3bcf72ec0fb057d493b36fdeb2dadf6f7e09a90d", "filename": "ROADMAP.md", "sha": "a4c826972610759b26bd3d05a362e2430b98cfd2", "additions": 2, "patch": "@@ -6,12 +6,13 @@ This roadmap represents some of priorities for us over the next couple months. I\n \n ## 1. Return to a \u201cmaintained\u201d status\n \n-- [ ] Create a Hubot core team with at least 2 GitHub employees and at least 1 community member. Core team members will be expected to participate in a a first-responder rotation, which will aim to reduce the average time to first response on all new Issues and PRs to 48 hours.\n+- [x] Create a Hubot core team with at least 2 GitHub employees and at least 1 community member. The core team is [@technicalpickles](https://github.com/technicalpickles), [@bkeepers](https://github.com/bkeepers), [@mose](https://github.com/mose), and [@gr2m](https://github.com/gr2m)\n - [ ] Document all maintainer processes (triage, release, etc.)\n - [ ] Create an issue template that addresses common requests\n - [ ] Configure automation ([probot stale](https://github.com/probot/stale), [Greenkeeper](https://greenkeeper.io/), [semantic-release](https://github.com/semantic-release/semantic-release))\n - [ ] Review all [open PRs](https://github.com/github/hubot/pulls) and triage [open issues](https://github.com/github/hubot/issues)\n - [ ] Establish a release process and regular release cadence of the first Tuesday of every month.\n+- [ ] Establish a first-responder rotation, which will aim to reduce the average time to first response on all new Issues and PRs to 48 hours.\n \n ## 2. Modernize the community\n ", "changes": 3}], "1325": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/14bfd05a6ddf7074b1bef5c2d5c7bcc04cc3c3fb/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/14bfd05a6ddf7074b1bef5c2d5c7bcc04cc3c3fb/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=14bfd05a6ddf7074b1bef5c2d5c7bcc04cc3c3fb", "filename": "docs/scripting.md", "sha": "a7231f2340d60472bcf0f2364fdc5c9589141dcb", "additions": 1, "patch": "@@ -305,7 +305,7 @@ module.exports = (robot) ->\n   )\n ```\n \n-See [the design patterns document](patterns.md) for examples of complex matchers.\n+See [the design patterns document](../patterns.md) for examples of complex matchers.\n \n ## Environment variables\n ", "changes": 2}], "1326": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/98b7bef7b93c1d9838e0a5dc36cfe0e8861d0a55/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/98b7bef7b93c1d9838e0a5dc36cfe0e8861d0a55/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=98b7bef7b93c1d9838e0a5dc36cfe0e8861d0a55", "filename": "README.md", "sha": "c8c3fc77e9a390814339d14fd7ac673fa2ae38ec", "additions": 3, "patch": "@@ -1,7 +1,7 @@\n # Hubot\n \n-Hubot is a framework to build chat bots, modeled after GitHub's Campfire bot of the same name, hubot. \n-He's pretty cool. He's [extendable with scripts](http://hubot.github.com/docs/#scripts) and can work \n+Hubot is a framework to build chat bots, modeled after GitHub's Campfire bot of the same name, hubot.\n+He's pretty cool. He's [extendable with scripts](http://hubot.github.com/docs/#scripts) and can work\n on [many different chat services](https://hubot.github.com/docs/adapters/).\n \n This repository provides a library that's distributed by `npm` that you\n@@ -11,7 +11,7 @@ for details on getting up and running with your very own robot friend.\n In most cases, you'll probably never have to hack on this repo directly if you\n are building your own bot. But if you do, check out [CONTRIBUTING.md](CONTRIBUTING.md)\n \n-If you'd like to chat with Hubot users and developers, drop by #hubot on FreeNode IRC.\n+If you'd like to chat with Hubot users and developers, [join us on Slack](https://hubot-slackin.herokuapp.com/).\n \n ## License\n ", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/98b7bef7b93c1d9838e0a5dc36cfe0e8861d0a55/ROADMAP.md", "blob_url": "https://github.com/hubotio/hubot/blob/98b7bef7b93c1d9838e0a5dc36cfe0e8861d0a55/ROADMAP.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/ROADMAP.md?ref=98b7bef7b93c1d9838e0a5dc36cfe0e8861d0a55", "filename": "ROADMAP.md", "sha": "5f14ebfcee6cbb84d8331251f5409ca9a3766980", "additions": 1, "patch": "@@ -17,7 +17,7 @@ This roadmap represents some of priorities for us over the next couple months. I\n \n - [ ] Consolidate all officially supported Hubot projects into a single GitHub organization. This will include github/hubot and a handful of supported scripts, but will not include all community scripts in https://github.com/hubot-scripts\n - [ ] Create a community forum to provide a place for people to ask questions, get help, and share best practices. [Discourse](https://www.discourse.org/) is the obvious choice here.\n-- [ ] Choose a chat platform for maintainers and contributors, and post notices in various existing places (#hubot on freenode, github/hubot on Gitter). Slack is the obvious choice here.\n+- [x] Choose a chat platform for maintainers and contributors, and post notices in various existing places (#hubot on freenode, github/hubot on Gitter). Slack is the obvious choice here. [Join us on Slack](https://hubot-slackin.herokuapp.com/).\n - [ ] Add a code of conduct based on http://contributor-covenant.org/ and processes to enforce it in all official spaces.\n - [ ] Publish weekly community updates (blog, newsletter, etc) which highlight recent and upcoming changes, give shoutouts to contributors / maintainers, and maybe mention interesting uses of Hubot\n - [ ] Create Hubot Evolution\u2014inspired by [Swift Evolution](https://github.com/apple/swift-evolution)\u2014for proposing user-visible enhancements. This roadmap will be moved there and all future proposals will follow the process laid out in that repository.", "changes": 2}], "1328": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/62510f808c57f35336f8488b2ad9f9ac1e961279/ROADMAP.md", "blob_url": "https://github.com/hubotio/hubot/blob/62510f808c57f35336f8488b2ad9f9ac1e961279/ROADMAP.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/ROADMAP.md?ref=62510f808c57f35336f8488b2ad9f9ac1e961279", "filename": "ROADMAP.md", "sha": "a47f8c9c08a0a262c7e187041eebff9ca1f4c6b5", "additions": 1, "patch": "@@ -28,6 +28,7 @@ This roadmap represents some of priorities for us over the next couple months. I\n Each of these proposals will go through the \u201cHubot Evolution\u201d process.\n \n - [ ] Translate from CoffeeScript to JavaScript and update to modern versions of Node.js and NPM (or Yarn)\n+- [ ] Revisit new bot generator (yeoman has a ton of dependencies, some of which can be error prone on windows)\n - [ ] Support for running multiple adapters and archetypes (chat, deployment, CI, github, etc)\n - [ ] Merge with [@probot](https://github.com/probot) and build out first class GitHub integration.\n - [ ] Introduce \"Commands\u201d, an explicit interface for registering commands (like Slack\u2019s slash commands) as an alternative to regular expressions", "changes": 1}], "1329": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/7fcad658e496930471e9fdc24413846742671f7a/docs/deploying/azure.md", "blob_url": "https://github.com/hubotio/hubot/blob/7fcad658e496930471e9fdc24413846742671f7a/docs/deploying/azure.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/azure.md?ref=7fcad658e496930471e9fdc24413846742671f7a", "filename": "docs/deploying/azure.md", "sha": "89b05bfae00e69a350c79c898b344183d3307f3e", "additions": 3, "patch": "@@ -91,3 +91,6 @@ while : ; do\n     [[ $STATUSCODE -ne 200 ]] || break\n done\n ```\n+\n+### Slack Integration\n+Currently the Slack integration has trouble finding hubot when deployed to Azure. Adding a `NODE_PATH` application setting with the value `D:\\home\\site\\wwwroot\\node_modules` will allow the Slack module to find hubot.", "changes": 3}], "1332": [{"status": "modified", "deletions": 26, "raw_url": "https://github.com/hubotio/hubot/raw/aba3e8fdef42c540ca1134b2c38a214462655076/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/aba3e8fdef42c540ca1134b2c38a214462655076/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=aba3e8fdef42c540ca1134b2c38a214462655076", "filename": "docs/scripting.md", "sha": "222d409b6093dc0472d5c6c8ff160af0bd08cc0d", "additions": 25, "patch": "@@ -129,7 +129,7 @@ Hubot can make HTTP calls on your behalf to integrate & consume third party APIs\n \n ```coffeescript\n   robot.http(\"https://midnight-train\")\n-    .get() (err, res, body) ->\n+    .get() (err, response, body) ->\n       # your code here\n ```\n \n@@ -141,7 +141,7 @@ A post looks like:\n   })\n   robot.http(\"https://midnight-train\")\n     .header('Content-Type', 'application/json')\n-    .post(data) (err, res, body) ->\n+    .post(data) (err, response, body) ->\n       # your code here\n ```\n \n@@ -150,7 +150,7 @@ A post looks like:\n \n ```coffeescript\n   robot.http(\"https://midnight-train\")\n-    .get() (err, res, body) ->\n+    .get() (err, response, body) ->\n       if err\n         res.send \"Encountered an error :( #{err}\"\n         return\n@@ -161,14 +161,14 @@ A post looks like:\n \n ```coffeescript\n   robot.http(\"https://midnight-train\")\n-    .get() (err, res, body) ->\n+    .get() (err, response, body) ->\n       # pretend there's error checking code here\n \n-      if res.statusCode isnt 200\n+      if response.statusCode isnt 200\n         res.send \"Request didn't come back HTTP 200 :(\"\n         return\n \n-      rateLimitRemaining = parseInt res.getHeader('X-RateLimit-Limit') if res.getHeader('X-RateLimit-Limit')\n+      rateLimitRemaining = parseInt response.getHeader('X-RateLimit-Limit') if response.getHeader('X-RateLimit-Limit')\n       if rateLimitRemaining and rateLimitRemaining < 1\n         res.send \"Rate Limit hit, stop believing for awhile\"\n \n@@ -179,7 +179,7 @@ A post looks like:\n \n ```coffeescript\n   robot.http(\"https://midnight-train\")\n-    .get() (err, res, body) ->\n+    .get() (err, response, body) ->\n       # error checking code here\n \n       res.send \"Got back #{body}\"\n@@ -192,7 +192,7 @@ If you are talking to APIs, the easiest way is going to be JSON because it doesn\n ```coffeescript\n   robot.http(\"https://midnight-train\")\n     .header('Accept', 'application/json')\n-    .get() (err, res, body) ->\n+    .get() (err, response, body) ->\n       # error checking code here\n \n       data = JSON.parse body\n@@ -204,7 +204,7 @@ It's possible to get non-JSON back, like if the API hit an error and it tries to\n ```coffeescript\n   robot.http(\"https://midnight-train\")\n     .header('Accept', 'application/json')\n-    .get() (err, res, body) ->\n+    .get() (err, response, body) ->\n       # err & response status checking code here\n \n       if response.getHeader('Content-Type') isnt 'application/json'\n@@ -428,14 +428,14 @@ The most common use of this is for providing HTTP end points for services with w\n ```coffeescript\n module.exports = (robot) ->\n   # the expected value of :room is going to vary by adapter, it might be a numeric id, name, token, or some other value\n-  robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n-    room   = req.params.room\n-    data   = if req.body.payload? then JSON.parse req.body.payload else req.body\n+  robot.router.post '/hubot/chatsecrets/:room', (request, response) ->\n+    room   = request.params.room\n+    data   = if request.body.payload? then JSON.parse request.body.payload else request.body\n     secret = data.secret\n \n     robot.messageRoom room, \"I have a secret: #{secret}\"\n \n-    res.send 'OK'\n+    response.send 'OK'\n ```\n \n Test it with curl; also see section on [error handling](#error-handling) below.\n@@ -458,11 +458,11 @@ One use case for this would be to have one script for handling interactions with\n ```coffeescript\n # src/scripts/github-commits.coffee\n module.exports = (robot) ->\n-  robot.router.post \"/hubot/gh-commits\", (req, res) ->\n+  robot.router.post \"/hubot/gh-commits\", (request, response) ->\n     robot.emit \"commit\", {\n         user    : {}, #hubot user object\n         repo    : 'https://github.com/github/hubot',\n-        hash  : '2e1951c089bd865839328592ff673d2f08153643'\n+        hash    : '2e1951c089bd865839328592ff673d2f08153643'\n     }\n ```\n \n@@ -497,11 +497,11 @@ Under the hood, there is an 'error' event emitted, with the error handlers consu\n Using previous examples:\n \n ```coffeescript\n-  robot.router.post '/hubot/chatsecrets/:room', (req, res) ->\n-    room = req.params.room\n+  robot.router.post '/hubot/chatsecrets/:room', (request, response) ->\n+    room = request.params.room\n     data = null\n     try\n-      data = JSON.parse req.body.payload\n+      data = JSON.parse request.body.payload\n     catch err\n       robot.emit 'error', err\n \n@@ -510,7 +510,7 @@ Using previous examples:\n \n   robot.hear /midnight train/i, (res) ->\n     robot.http(\"https://midnight-train\")\n-      .get() (err, res, body) ->\n+      .get() (err, response, body) ->\n         if err\n           res.reply \"Had problems taking the midnight train\"\n           robot.emit 'error', err, res\n@@ -570,14 +570,13 @@ robot.respond /have a soda/i, (res) ->\n \n   if sodasHad > 4\n     res.reply \"I'm too fizzy..\"\n-\n   else\n     res.reply 'Sure!'\n+    robot.brain.set 'totalSodas', sodasHad + 1\n \n-    robot.brain.set 'totalSodas', sodasHad+1\n robot.respond /sleep it off/i, (res) ->\n   robot.brain.set 'totalSodas', 0\n-  msg.reply 'zzzzz'\n+  res.reply 'zzzzz'\n ```\n \n If the script needs to lookup user data, there are methods on `robot.brain` for looking up one or many users by id, name, or 'fuzzy' matching of name: `userForName`, `userForId`, `userForFuzzyName`, and `usersForFuzzyName`.\n@@ -663,10 +662,10 @@ Returning to an earlier example:\n \n ```coffeescript\n module.exports = (robot) ->\n-  robot.respond /annoy me/, id:'annoyance.start', (msg)\n+  robot.respond /annoy me/, id:'annoyance.start', (res)\n     # code to annoy someone\n \n-  robot.respond /unannoy me/, id:'annoyance.stop', (msg)\n+  robot.respond /unannoy me/, id:'annoyance.stop', (res)\n     # code to stop annoying someone\n ```\n \n@@ -757,9 +756,9 @@ This example also shows how listener-specific metadata can be leveraged to creat\n \n ```coffeescript\n module.exports = (robot) ->\n-  robot.hear /hello/, id: 'my-hello', rateLimits: {minPeriodMs: 10000}, (msg) ->\n+  robot.hear /hello/, id: 'my-hello', rateLimits: {minPeriodMs: 10000}, (res) ->\n     # This will execute no faster than once every ten seconds\n-    msg.reply 'Why, hello there!'\n+    res.reply 'Why, hello there!'\n ```\n \n ## Listener Middleware API", "changes": 51}], "1334": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/02e291048633956665d7d9c058ffb9f6ae0d2da1/CODE_OF_CONDUCT.md", "blob_url": "https://github.com/hubotio/hubot/blob/02e291048633956665d7d9c058ffb9f6ae0d2da1/CODE_OF_CONDUCT.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CODE_OF_CONDUCT.md?ref=02e291048633956665d7d9c058ffb9f6ae0d2da1", "filename": "CODE_OF_CONDUCT.md", "sha": "caa907b1e161099d929e448bdb97d2f7c4b88927", "additions": 46, "patch": "@@ -0,0 +1,46 @@\n+# Contributor Covenant Code of Conduct\n+\n+## Our Pledge\n+\n+In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n+\n+## Our Standards\n+\n+Examples of behavior that contributes to creating a positive environment include:\n+\n+* Using welcoming and inclusive language\n+* Being respectful of differing viewpoints and experiences\n+* Gracefully accepting constructive criticism\n+* Focusing on what is best for the community\n+* Showing empathy towards other community members\n+\n+Examples of unacceptable behavior by participants include:\n+\n+* The use of sexualized language or imagery and unwelcome sexual attention or advances\n+* Trolling, insulting/derogatory comments, and personal or political attacks\n+* Public or private harassment\n+* Publishing others' private information, such as a physical or electronic address, without explicit permission\n+* Other conduct which could reasonably be considered inappropriate in a professional setting\n+\n+## Our Responsibilities\n+\n+Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n+\n+Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n+\n+## Scope\n+\n+This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n+\n+## Enforcement\n+\n+Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@github.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n+\n+Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n+\n+## Attribution\n+\n+This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n+\n+[homepage]: http://contributor-covenant.org\n+[version]: http://contributor-covenant.org/version/1/4/", "changes": 46}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/02e291048633956665d7d9c058ffb9f6ae0d2da1/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/02e291048633956665d7d9c058ffb9f6ae0d2da1/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=02e291048633956665d7d9c058ffb9f6ae0d2da1", "filename": "CONTRIBUTING.md", "sha": "ad3d909583ff985b2bacec76e9fc6cdd0191df48", "additions": 2, "patch": "@@ -1,7 +1,7 @@\n # Contributing\n \n-This project adheres to the [Open Code of Conduct][code-of-conduct]. By participating, you are expected to uphold this code.\n-[code-of-conduct]: http://todogroup.org/opencodeofconduct/#Hubot/opensource@github.com\n+This project adheres to the [Contributor Covenant Code of Conduct](http://contributor-covenant.org). By participating, you are expected to uphold this code.\n+\n \n We love pull requests. Here's a quick guide:\n ", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/02e291048633956665d7d9c058ffb9f6ae0d2da1/ROADMAP.md", "blob_url": "https://github.com/hubotio/hubot/blob/02e291048633956665d7d9c058ffb9f6ae0d2da1/ROADMAP.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/ROADMAP.md?ref=02e291048633956665d7d9c058ffb9f6ae0d2da1", "filename": "ROADMAP.md", "sha": "d014508562360a5675c3de256412e20645fa4b9b", "additions": 1, "patch": "@@ -19,7 +19,7 @@ This roadmap represents some of priorities for us over the next couple months. I\n - [ ] Consolidate all officially supported Hubot projects into a single GitHub organization. This will include github/hubot and a handful of supported scripts, but will not include all community scripts in https://github.com/hubot-scripts ([#1327](https://github.com/github/hubot/issues/1327))\n - [ ] Create a community forum to provide a place for people to ask questions, get help, and share best practices. [Discourse](https://www.discourse.org/) is the obvious choice here.\n - [x] Choose a chat platform for maintainers and contributors, and post notices in various existing places (#hubot on freenode, github/hubot on Gitter). Slack is the obvious choice here. [Join us on Slack](https://hubot-slackin.herokuapp.com/).\n-- [ ] Add a code of conduct based on http://contributor-covenant.org/ and processes to enforce it in all official spaces.\n+- [x] Add a code of conduct based on http://contributor-covenant.org/ and processes to enforce it in all official spaces. ([#1334](https://github.com/github/hubot/pull/1334))\n - [ ] Publish weekly community updates (blog, newsletter, etc) which highlight recent and upcoming changes, give shoutouts to contributors / maintainers, and maybe mention interesting uses of Hubot\n - [ ] Create Hubot Evolution\u2014inspired by [Swift Evolution](https://github.com/apple/swift-evolution)\u2014for proposing user-visible enhancements. This roadmap will be moved there and all future proposals will follow the process laid out in that repository.\n ", "changes": 2}], "1335": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8ecae72306f31b4cf97490e856f1ea24594dd372/.github/stale.yml", "blob_url": "https://github.com/hubotio/hubot/blob/8ecae72306f31b4cf97490e856f1ea24594dd372/.github/stale.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.github/stale.yml?ref=8ecae72306f31b4cf97490e856f1ea24594dd372", "filename": ".github/stale.yml", "sha": "e6a10d0188206a511823dff5107ce517e00a7da6", "additions": 23, "patch": "@@ -0,0 +1,23 @@\n+# Configuration for probot-stale - https://github.com/probot/stale\n+\n+# Number of days of inactivity before an Issue or Pull Request becomes stale\n+daysUntilStale: 90\n+# Number of days of inactivity before a stale Issue or Pull Request is closed\n+daysUntilClose: 7\n+# Issues or Pull Requests with these labels will never be considered stale\n+exemptLabels:\n+  - pinned\n+  - security\n+# Label to use when marking as stale\n+staleLabel: stale\n+# Comment to post when marking as stale. Set to `false` to disable\n+markComment: >\n+  This issue has been automatically marked as stale because it has [not had\n+  recent activity](https://github.com/github/hubot/blob/master/CONTRIBUTING.md#stale-issue-and-pull-request-policy).\n+  It will be closed if no further activity occurs. Thank you for your contributions.\n+# Comment to post when removing the stale label. Set to `false` to disable\n+unmarkComment: false\n+# Comment to post when closing a stale Issue or Pull Request. Set to `false` to disable\n+closeComment: false\n+# Limit to only `issues` or `pulls`\n+# only: issues", "changes": 23}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/8ecae72306f31b4cf97490e856f1ea24594dd372/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/8ecae72306f31b4cf97490e856f1ea24594dd372/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=8ecae72306f31b4cf97490e856f1ea24594dd372", "filename": "CONTRIBUTING.md", "sha": "a19bd7152bf5eb520db44f83c11d654d76227963", "additions": 6, "patch": "@@ -40,6 +40,12 @@ Syntax:\n   * `a = b` and not `a=b`.\n   * Follow the conventions you see used in the source already.\n \n+# Stale issue and pull request policy\n+\n+Issues and pull requests have a shelf life and sometimes they are no longer relevant. All issues and pull requests that have not had any activity for 90 days will be marked as `stale`. Simply leave a comment with information about why it may still be relevant to keep it open. If no activity occurs in the next 7 days, it will be automatically closed.\n+\n+The goal of this process is to keep the list of open issues and pull requests focused on work that is actionable and important for the maintainers and the community.\n+\n # Releasing\n \n This section is for maintainers of hubot. Here's the current process for releasing:", "changes": 6}], "1336": [{"status": "modified", "deletions": 7, "raw_url": "https://github.com/hubotio/hubot/raw/fb2430318b5103c87597fa0471274bafde8d612b/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/fb2430318b5103c87597fa0471274bafde8d612b/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=fb2430318b5103c87597fa0471274bafde8d612b", "filename": ".travis.yml", "sha": "a26f01db8897041281b62246d556dcd19aad9923", "additions": 8, "patch": "@@ -1,11 +1,12 @@\n language: node_js\n-\n-matrix:\n-  include:\n-    - node_js: \"0.10\"\n-    - node_js: \"0.12\"\n-    - node_js: \"4\"\n-    - node_js: \"5\"\n+node_js:\n+  - \"node\" # latest stable Node.js release\n+  - \"7\"\n+  - \"6\"\n+  - \"5\"\n+  - \"4\"\n+  - \"0.12\"\n+  - \"0.10\"\n notifications:\n   email: false\n sudo: false", "changes": 15}], "1337": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/3af97c2341aa627cb9f7ee73f946124667691305/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/3af97c2341aa627cb9f7ee73f946124667691305/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=3af97c2341aa627cb9f7ee73f946124667691305", "filename": "docs/scripting.md", "sha": "acabfb5b5023b025dd89e83f7bf060fa6fb7eebc", "additions": 1, "patch": "@@ -305,7 +305,7 @@ module.exports = (robot) ->\n   )\n ```\n \n-See [the design patterns document](patterns.md) for examples of complex matchers.\n+See [the design patterns document](patterns.md#dynamic-matching-of-messages) for examples of complex matchers.\n \n ## Environment variables\n ", "changes": 2}], "1339": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/76b0d61313b0f17d9495de8c68cbfbb47f193433/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/76b0d61313b0f17d9495de8c68cbfbb47f193433/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=76b0d61313b0f17d9495de8c68cbfbb47f193433", "filename": "docs/scripting.md", "sha": "6f6d82c9a7a40acff86ce99992b0eb15ce499b79", "additions": 4, "patch": "@@ -705,6 +705,10 @@ Every middleware receives the same API signature of `context`, `next`, and\n `done`. Different kinds of middleware may receive different information in the\n `context` object. For more details, see the API for each type of middleware.\n \n+Middleware execution returns a promise that resolves with the final `context`\n+when the middleware stack completes. If the middleware stack throws an error,\n+the promise will be rejected with the error and `context` at that point.\n+\n ### Error Handling\n \n For synchronous middleware (never yields to the event loop), hubot will automatically catch errors and emit an an `error` event, just like in standard listeners. Hubot will also automatically call the most recent `done` callback to unwind the middleware stack. Asynchronous middleware should catch its own exceptions, emit an `error` event, and call `done`. Any uncaught exceptions will interrupt all execution of middleware completion callbacks.", "changes": 4}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/76b0d61313b0f17d9495de8c68cbfbb47f193433/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/76b0d61313b0f17d9495de8c68cbfbb47f193433/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=76b0d61313b0f17d9495de8c68cbfbb47f193433", "filename": "package.json", "sha": "6fecb535ab81b1cd211d285082e0097edf392316", "additions": 4, "patch": "@@ -1,6 +1,9 @@\n {\n   \"name\": \"hubot\",\n   \"version\": \"0.0.0-development\",\n+  \"standard\": {\n+     \"env\": [ \"mocha\" ]\n+  },\n   \"publishConfig\": {\n     \"tag\": \"next\"\n   },\n@@ -23,6 +26,7 @@\n     \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n     \"connect-multiparty\": \"^1.2.5\",\n+    \"es6-promise\": \"^4.1.0\",\n     \"express\": \"^3.21.2\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",", "changes": 4}, {"status": "modified", "deletions": 28, "raw_url": "https://github.com/hubotio/hubot/raw/76b0d61313b0f17d9495de8c68cbfbb47f193433/src/middleware.js", "blob_url": "https://github.com/hubotio/hubot/blob/76b0d61313b0f17d9495de8c68cbfbb47f193433/src/middleware.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/middleware.js?ref=76b0d61313b0f17d9495de8c68cbfbb47f193433", "filename": "src/middleware.js", "sha": "952493fe865f8302242045f5596bcfbecc828c10", "additions": 39, "patch": "@@ -22,43 +22,54 @@ class Middleware {\n   // done() - Initial (final) completion callback. May be wrapped by\n   //     executed middleware.\n   //\n-  // Returns nothing\n+  // Returns promise - resolves with context when middleware completes\n   // Returns before executing any middleware\n   execute (context, next, done) {\n-    const self = this\n+    return new Promise((resolve, reject) => {\n+      const self = this\n \n-    if (done == null) {\n-      done = function () {}\n-    }\n+      if (done == null) {\n+        done = function () {}\n+      }\n \n-    // Execute a single piece of middleware and update the completion callback\n-    // (each piece of middleware can wrap the 'done' callback with additional\n-    // logic).\n-    function executeSingleMiddleware (doneFunc, middlewareFunc, cb) {\n-      // Match the async.reduce interface\n-      function nextFunc (newDoneFunc) {\n-        cb(null, newDoneFunc || doneFunc)\n+      // Allow each middleware to resolve the promise early if it calls done()\n+      const pieceDone = () => {\n+        done()\n+        resolve(context)\n       }\n \n-      // Catch errors in synchronous middleware\n-      try {\n-        middlewareFunc(context, nextFunc, doneFunc)\n-      } catch (err) {\n-        // Maintaining the existing error interface (Response object)\n-        self.robot.emit('error', err, context.response)\n-        // Forcibly fail the middleware and stop executing deeper\n-        doneFunc()\n+      // Execute a single piece of middleware and update the completion callback\n+      // (each piece of middleware can wrap the 'done' callback with additional\n+      // logic).\n+      function executeSingleMiddleware (doneFunc, middlewareFunc, cb) {\n+        // Match the async.reduce interface\n+        function nextFunc (newDoneFunc) {\n+          cb(null, newDoneFunc || doneFunc)\n+        }\n+\n+        // Catch errors in synchronous middleware\n+        try {\n+          middlewareFunc(context, nextFunc, doneFunc)\n+        } catch (err) {\n+          // Maintaining the existing error interface (Response object)\n+          self.robot.emit('error', err, context.response)\n+          // Forcibly fail the middleware and stop executing deeper\n+          doneFunc()\n+          err.context = context\n+          reject(err)\n+        }\n       }\n-    }\n \n-    // Executed when the middleware stack is finished\n-    function allDone (_, finalDoneFunc) {\n-      next(context, finalDoneFunc)\n-    }\n+      // Executed when the middleware stack is finished\n+      function allDone (_, finalDoneFunc) {\n+        next(context, finalDoneFunc)\n+        resolve(context)\n+      }\n \n-    // Execute each piece of middleware, collecting the latest 'done' callback\n-    // at each step.\n-    process.nextTick(async.reduce.bind(null, this.stack, done, executeSingleMiddleware, allDone))\n+      // Execute each piece of middleware, collecting the latest 'done' callback\n+      // at each step.\n+      process.nextTick(async.reduce.bind(null, this.stack, pieceDone, executeSingleMiddleware, allDone))\n+    })\n   }\n \n   // Public: Registers new middleware", "changes": 67}, {"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/76b0d61313b0f17d9495de8c68cbfbb47f193433/src/response.js", "blob_url": "https://github.com/hubotio/hubot/blob/76b0d61313b0f17d9495de8c68cbfbb47f193433/src/response.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.js?ref=76b0d61313b0f17d9495de8c68cbfbb47f193433", "filename": "src/response.js", "sha": "d00cd9be8bdd6533de0b65ec017f677dd0955be2", "additions": 12, "patch": "@@ -24,65 +24,65 @@ class Response {\n   // strings - One or more strings to be posted. The order of these strings\n   //           should be kept intact.\n   //\n-  // Returns nothing.\n+  // Returns promise - resolves with context when middleware completes\n   send (/* ...strings */) {\n     const strings = [].slice.call(arguments)\n-    this.runWithMiddleware.apply(this, ['send', { plaintext: true }].concat(strings))\n+    return this.runWithMiddleware.apply(this, ['send', { plaintext: true }].concat(strings))\n   }\n \n   // Public: Posts an emote back to the chat source\n   //\n   // strings - One or more strings to be posted. The order of these strings\n   //           should be kept intact.\n   //\n-  // Returns nothing.\n+  // Returns promise - resolves with context when middleware completes\n   emote (/* ...strings */) {\n     const strings = [].slice.call(arguments)\n-    this.runWithMiddleware.apply(this, ['emote', { plaintext: true }].concat(strings))\n+    return this.runWithMiddleware.apply(this, ['emote', { plaintext: true }].concat(strings))\n   }\n \n   // Public: Posts a message mentioning the current user.\n   //\n   // strings - One or more strings to be posted. The order of these strings\n   //           should be kept intact.\n   //\n-  // Returns nothing.\n+  // Returns promise - resolves with context when middleware completes\n   reply (/* ...strings */) {\n     const strings = [].slice.call(arguments)\n-    this.runWithMiddleware.apply(this, ['reply', { plaintext: true }].concat(strings))\n+    return this.runWithMiddleware.apply(this, ['reply', { plaintext: true }].concat(strings))\n   }\n \n   // Public: Posts a topic changing message\n   //\n   // strings - One or more strings to set as the topic of the\n   //           room the bot is in.\n   //\n-  // Returns nothing.\n+  // Returns promise - resolves with context when middleware completes\n   topic (/* ...strings */) {\n     const strings = [].slice.call(arguments)\n-    this.runWithMiddleware.apply(this, ['topic', { plaintext: true }].concat(strings))\n+    return this.runWithMiddleware.apply(this, ['topic', { plaintext: true }].concat(strings))\n   }\n \n   // Public: Play a sound in the chat source\n   //\n   // strings - One or more strings to be posted as sounds to play. The order of\n   //           these strings should be kept intact.\n   //\n-  // Returns nothing\n+  // Returns promise - resolves with context when middleware completes\n   play (/* ...strings */) {\n     const strings = [].slice.call(arguments)\n-    this.runWithMiddleware.apply(this, ['play'].concat(strings))\n+    return this.runWithMiddleware.apply(this, ['play'].concat(strings))\n   }\n \n   // Public: Posts a message in an unlogged room\n   //\n   // strings - One or more strings to be posted. The order of these strings\n   //           should be kept intact.\n   //\n-  // Returns nothing\n+  // Returns promise - resolves with context when middleware completes\n   locked (/* ...strings */) {\n     const strings = [].slice.call(arguments)\n-    this.runWithMiddleware.apply(this, ['locked', { plaintext: true }].concat(strings))\n+    return this.runWithMiddleware.apply(this, ['locked', { plaintext: true }].concat(strings))\n   }\n \n   // Private: Call with a method for the given strings using response", "changes": 24}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/76b0d61313b0f17d9495de8c68cbfbb47f193433/src/robot.js", "blob_url": "https://github.com/hubotio/hubot/blob/76b0d61313b0f17d9495de8c68cbfbb47f193433/src/robot.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.js?ref=76b0d61313b0f17d9495de8c68cbfbb47f193433", "filename": "src/robot.js", "sha": "aafd50155d708221fbe35569719de550e5973e12", "additions": 2, "patch": "@@ -285,12 +285,12 @@ class Robot {\n   //\n   // cb - Optional callback that is called when message processing is complete\n   //\n-  // Returns nothing.\n+  // Returns promise - resolves with context when middleware completes\n   // Returns before executing callback\n   receive (message, cb) {\n     // When everything is finished (down the middleware stack and back up),\n     // pass control back to the robot\n-    this.middleware.receive.execute({ response: new Response(this, message) }, this.processListeners.bind(this), cb)\n+    return this.middleware.receive.execute({ response: new Response(this, message) }, this.processListeners.bind(this), cb)\n   }\n \n   // Private: Passes the given message to any interested Listeners.", "changes": 4}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/76b0d61313b0f17d9495de8c68cbfbb47f193433/test/middleware_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/76b0d61313b0f17d9495de8c68cbfbb47f193433/test/middleware_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/middleware_test.js?ref=76b0d61313b0f17d9495de8c68cbfbb47f193433", "filename": "test/middleware_test.js", "sha": "9910760f609fccc9e67e6b67c3eb35cdd882673f", "additions": 67, "patch": "@@ -224,6 +224,70 @@ describe('Middleware', function () {\n         )\n       })\n \n+      it('returns a promise that resolves when async middleware stack is complete', function (testDone) {\n+        const testMiddlewareA = (context, next, done) => {\n+          setTimeout(() => {\n+            context.A = 'done'\n+            next(done)\n+          }, 50)\n+        }\n+\n+        const testMiddlewareB = (context, next, done) => {\n+          setTimeout(() => {\n+            context.B = 'done'\n+            next(done)\n+          }, 50)\n+        }\n+\n+        this.middleware.register(testMiddlewareA)\n+        this.middleware.register(testMiddlewareB)\n+\n+        const middlewareFinished = () => {}\n+\n+        const middlewarePromise = this.middleware.execute(\n+          {},\n+          (_, done) => done(),\n+          middlewareFinished\n+        )\n+\n+        middlewarePromise.then((finalContext) => {\n+          expect(finalContext).to.deep.equal({ A: 'done', B: 'done' })\n+          testDone()\n+        })\n+      })\n+\n+      it('promise resolves when middleware completes early, with context at that point', function (testDone) {\n+        const testMiddlewareA = (context, next, done) => {\n+          setTimeout(() => {\n+            context.A = 'done'\n+            done()\n+          }, 50)\n+        }\n+\n+        const testMiddlewareB = (context, next, done) => {\n+          setTimeout(() => {\n+            context.B = 'done'\n+            next(done)\n+          }, 50)\n+        }\n+\n+        this.middleware.register(testMiddlewareA)\n+        this.middleware.register(testMiddlewareB)\n+\n+        const middlewareFinished = () => {}\n+\n+        const middlewarePromise = this.middleware.execute(\n+          {},\n+          (_, done) => done(),\n+          middlewareFinished\n+        )\n+\n+        middlewarePromise.then((finalContext) => {\n+          expect(finalContext).to.deep.equal({ A: 'done' })\n+          testDone()\n+        })\n+      })\n+\n       describe('error handling', function () {\n         it('does not execute subsequent middleware after the error is thrown', function (testDone) {\n           const middlewareExecution = []\n@@ -258,7 +322,7 @@ describe('Middleware', function () {\n             {},\n             middlewareFinished,\n             middlewareFailed\n-          )\n+          ).catch((reason) => {}) // supress unhandled promise rejection warning\n         })\n \n         it('emits an error event', function (testDone) {\n@@ -287,7 +351,7 @@ describe('Middleware', function () {\n             {response: testResponse},\n             middlewareFinished,\n             middlewareFailed\n-          )\n+          ).catch((reason) => {}) // supress unhandled promise rejection warning\n         })\n \n         it('unwinds the middleware stack (calling all done functions)', function (testDone) {\n@@ -319,7 +383,7 @@ describe('Middleware', function () {\n             {},\n             middlewareFinished,\n             middlewareFailed\n-          )\n+          ).catch((reason) => {}) // supress unhandled promise rejection warning\n         })\n       })\n     })", "changes": 70}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/76b0d61313b0f17d9495de8c68cbfbb47f193433/test/response_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/76b0d61313b0f17d9495de8c68cbfbb47f193433/test/response_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/response_test.js?ref=76b0d61313b0f17d9495de8c68cbfbb47f193433", "filename": "test/response_test.js", "sha": "0b5ea2e26eac3915d1f06363ac268fc4721b3f45", "additions": 100, "patch": "@@ -0,0 +1,100 @@\n+'use strict'\n+\n+// Assertions and Stubbing\n+const chai = require('chai')\n+const expect = chai.expect\n+\n+// Hubot classes\n+const User = require('../src/user')\n+const Robot = require('../src/robot')\n+const TextMessage = require('../src/message').TextMessage\n+const Response = require('../src/response')\n+\n+const asyncMiddleware = (context, next, done) => {\n+  this.runOrder.push('middleware started')\n+  setTimeout(() => {\n+    this.runOrder.push('middleware finished')\n+    next(done)\n+  }, 100)\n+}\n+\n+// mock `hubot-mock-adapter` module from fixture\n+const mockery = require('mockery')\n+\n+describe('Response', function () {\n+  describe('Unit Tests', function () {\n+    beforeEach(function () {\n+      // setup mock robot\n+      this.user = new User({\n+        id: 1,\n+        name: 'hubottester',\n+        room: '#mocha'\n+      })\n+      mockery.enable({\n+        warnOnReplace: false,\n+        warnOnUnregistered: false\n+      })\n+      mockery.registerMock('hubot-mock-adapter', require('./fixtures/mock-adapter'))\n+      this.robot = new Robot(null, 'mock-adapter', true, 'TestHubot')\n+      this.robot.alias = 'Hubot'\n+      this.robot.run()\n+\n+      // async delayed middleware for promise return tests\n+\n+      // create a mock message and match\n+      const message = new TextMessage(this.user, 'Hubot message123')\n+      const regex = /(.*)/\n+      const pattern = this.robot.respondPattern(regex)\n+      const match = message.match(pattern)[1]\n+\n+      // generate response with mocks\n+      this.res = new Response(this.robot, message, match)\n+\n+      // utility for tracking order of execution\n+      this.runOrder = []\n+\n+      // sends don't send, just log\n+      this.robot.send = x => this.runOrder.push(`sent ${x}`)\n+    })\n+\n+    afterEach(function () {\n+      this.robot.shutdown()\n+    })\n+\n+    describe('#reply', function () {\n+      context('with asynchronous middleware', function () {\n+        beforeEach(function () {\n+          this.robot.responseMiddleware((context, next, done) => asyncMiddleware.bind(this, context, next, done))\n+        })\n+\n+        it('without using returned promise, .reply executes and continues before middleware completed', function () {\n+          const _self = this\n+\n+          _self.runOrder.push('reply sending')\n+          _self.res.reply('test')\n+          _self.runOrder.push('reply finished')\n+          expect(_self.runOrder).to.eql([\n+            'reply sending',\n+            'reply finished'\n+          ])\n+        })\n+\n+        it('using returned promise.then, .reply waits for middleware to complete before continueing', function () {\n+          const _self = this\n+\n+          _self.runOrder.push('reply sending')\n+          _self.res.reply('test')\n+          .then(() => _self.runOrder.push('reply finished'))\n+          .then(() => {\n+            expect(_self.runOrder).to.eql([\n+              'reply sending',\n+              'middleware started',\n+              'middleware finished',\n+              'reply finished'\n+            ])\n+          })\n+        })\n+      })\n+    })\n+  })\n+})", "changes": 100}], "1340": [{"status": "removed", "deletions": 24, "raw_url": "https://github.com/hubotio/hubot/raw/3d55ef7f9ab9f88de880a877560a16d0a6e7cec5/Makefile", "blob_url": "https://github.com/hubotio/hubot/blob/3d55ef7f9ab9f88de880a877560a16d0a6e7cec5/Makefile", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Makefile?ref=3d55ef7f9ab9f88de880a877560a16d0a6e7cec5", "filename": "Makefile", "sha": "042ab88cd2444a93d1b83765e139db3d9978666b", "additions": 0, "patch": "@@ -1,24 +0,0 @@\n-NPM_EXECUTABLE_HOME := node_modules/.bin\n-\n-PATH := ${NPM_EXECUTABLE_HOME}:${PATH}\n-\n-test: deps\n-\t@script/test\n-\n-dev: generate-js\n-\t@coffee -wc --bare -o lib src/*.coffee\n-\n-generate-js:\n-\t@find src -name '*.coffee' | xargs coffee -c -o lib\n-\n-package:\n-\t@bin/hubot -c hubot\n-\t@chmod 0755 hubot/bin/hubot\n-\n-remove-js:\n-\t@rm -fr lib/\n-\n-deps:\n-\n-.PHONY: all\n-", "changes": 24}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/c15938ec93c0e3feed7d42b05dfebbe7df66f441/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/c15938ec93c0e3feed7d42b05dfebbe7df66f441/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=c15938ec93c0e3feed7d42b05dfebbe7df66f441", "filename": "package.json", "sha": "01e6b8fe5ba74ebee93125ee5519654586ef8f57", "additions": 9, "patch": "@@ -43,6 +43,14 @@\n     \"hubot\": \"./bin/hubot\"\n   },\n   \"scripts\": {\n-    \"test\": \"./script/test\"\n+    \"clean\": \"rm -rf lib/\",\n+    \"preinstall\": \"script/dotenv\",\n+    \"prestart\": \"script/dotenv\",\n+    \"start\": \"bin/hubot\",\n+    \"pretest\": \"script/dotenv\",\n+    \"test\": \"mocha --require coffee-errors --compilers coffee:coffee-script\",\n+    \"test:smoke\": \"coffee src/**/*.coffee\",\n+    \"compile\": \"coffee --compile --bare --output lib src\",\n+    \"compile:watch\": \"coffee --compile --bare --output lib --watch src\"\n   }\n }", "changes": 10}, {"status": "modified", "deletions": 16, "raw_url": "https://github.com/hubotio/hubot/raw/c15938ec93c0e3feed7d42b05dfebbe7df66f441/script/bootstrap", "blob_url": "https://github.com/hubotio/hubot/blob/c15938ec93c0e3feed7d42b05dfebbe7df66f441/script/bootstrap", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/bootstrap?ref=c15938ec93c0e3feed7d42b05dfebbe7df66f441", "filename": "script/bootstrap", "sha": "1aa4730e6fa02c3270c92e18fe31a392584c6e14", "additions": 1, "patch": "@@ -1,18 +1,3 @@\n-#!/bin/bash\n-\n-# Make sure everything is development forever\n-export NODE_ENV=development\n-\n-# Load environment specific environment variables\n-if [ -f .env ]; then\n-  source .env\n-fi\n-\n-if [ -f .env.${NODE_ENV} ]; then\n-  source .env.${NODE_ENV}\n-fi\n+#!/usr/bin/env bash\n \n npm install\n-\n-# Make sure mocha and coffee are in the PATH\n-export PATH=\"node_modules/.bin:$PATH\"", "changes": 17}, {"status": "removed", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/3d55ef7f9ab9f88de880a877560a16d0a6e7cec5/script/cibuild", "blob_url": "https://github.com/hubotio/hubot/blob/3d55ef7f9ab9f88de880a877560a16d0a6e7cec5/script/cibuild", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/cibuild?ref=3d55ef7f9ab9f88de880a877560a16d0a6e7cec5", "filename": "script/cibuild", "sha": "a8eba550fa196771f3b9ffae0849f2eb921eb0b2", "additions": 0, "patch": "@@ -1,3 +0,0 @@\n-#!/usr/bin/env bash\n-\n-make test", "changes": 3}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c15938ec93c0e3feed7d42b05dfebbe7df66f441/script/dotenv", "blob_url": "https://github.com/hubotio/hubot/blob/c15938ec93c0e3feed7d42b05dfebbe7df66f441/script/dotenv", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/dotenv?ref=c15938ec93c0e3feed7d42b05dfebbe7df66f441", "filename": "script/dotenv", "sha": "597b1c87e03c5e42d4c95f8bede150106ff2c34a", "additions": 13, "patch": "@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+\n+# Make sure everything is development forever\n+export NODE_ENV=development\n+\n+# Load environment specific environment variables\n+if [ -f .env ]; then\n+  source .env\n+fi\n+\n+if [ -f .env.${NODE_ENV} ]; then\n+  source .env.${NODE_ENV}\n+fi", "changes": 13}, {"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/c15938ec93c0e3feed7d42b05dfebbe7df66f441/script/server", "blob_url": "https://github.com/hubotio/hubot/blob/c15938ec93c0e3feed7d42b05dfebbe7df66f441/script/server", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/server?ref=c15938ec93c0e3feed7d42b05dfebbe7df66f441", "filename": "script/server", "sha": "e23532137c68458f6150c39613a30791411f5397", "additions": 1, "patch": "@@ -1,7 +1,3 @@\n #!/usr/bin/env bash\n \n-set -e\n-\n-source script/bootstrap\n-\n-bin/hubot \"$@\"\n+npm start -- \"$@\"", "changes": 6}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/c15938ec93c0e3feed7d42b05dfebbe7df66f441/script/smoke-test", "blob_url": "https://github.com/hubotio/hubot/blob/c15938ec93c0e3feed7d42b05dfebbe7df66f441/script/smoke-test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/smoke-test?ref=c15938ec93c0e3feed7d42b05dfebbe7df66f441", "filename": "script/smoke-test", "sha": "84ba0df8e99ed4b537750ed64cebd0c1671a0331", "additions": 1, "patch": "@@ -1,5 +1,3 @@\n #!/usr/bin/env bash\n \n-set -ex\n-\n-coffee src/**/*.coffee\n+npm run test:smoke", "changes": 4}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/c15938ec93c0e3feed7d42b05dfebbe7df66f441/script/test", "blob_url": "https://github.com/hubotio/hubot/blob/c15938ec93c0e3feed7d42b05dfebbe7df66f441/script/test", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/test?ref=c15938ec93c0e3feed7d42b05dfebbe7df66f441", "filename": "script/test", "sha": "80a8ae954b4e22b2f8b4e07e5fdaa518dc695658", "additions": 2, "patch": "@@ -1,4 +1,3 @@\n-#!/bin/bash\n+#!/usr/bin/env bash\n \n-source script/bootstrap\n-mocha --require coffee-errors --compilers coffee:coffee-script \"$@\"\n+npm test -- \"$@\"", "changes": 5}], "1342": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/435aa4f47bea0cc0af1c4ee4bfebccf7a343218f/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/435aa4f47bea0cc0af1c4ee4bfebccf7a343218f/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=435aa4f47bea0cc0af1c4ee4bfebccf7a343218f", "filename": "src/robot.coffee", "sha": "435165140692a43d8dfd2a688f169471742a458e", "additions": 2, "patch": "@@ -34,15 +34,14 @@ class Robot\n   # Robots receive messages from a chat source (Campfire, irc, etc), and\n   # dispatch them to matching listeners.\n   #\n-  # adapterPath -  A String of the path to built-in adapters (defaults to src/adapters)\n+  # adapterPath - A String of the path to built-in adapters (defaults to src/adapters)\n   # adapter     - A String of the adapter name.\n   # httpd       - A Boolean whether to enable the HTTP daemon.\n   # name        - A String of the robot name, defaults to Hubot.\n   #\n   # Returns nothing.\n   constructor: (adapterPath, adapter, httpd, name = 'Hubot', alias = false) ->\n-    @adapterPath ?= Path.join __dirname, \"adapters\"\n-\n+    @adapterPath = adapterPath or Path.join __dirname, \"adapters\"\n     @name       = name\n     @events     = new EventEmitter\n     @brain      = new Brain @", "changes": 5}], "1343": [{"status": "modified", "deletions": 8, "raw_url": "https://github.com/hubotio/hubot/raw/a75cd200f6cde474d6a2e931014b96a5b5241df7/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/a75cd200f6cde474d6a2e931014b96a5b5241df7/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=a75cd200f6cde474d6a2e931014b96a5b5241df7", "filename": "CONTRIBUTING.md", "sha": "306a25a5d5816f5a83f6c79312f5a09d1794f0cf", "additions": 10, "patch": "@@ -1,18 +1,20 @@\n # Contributing\n \n-This project adheres to the [Contributor Covenant Code of Conduct](http://contributor-covenant.org). By participating, you are expected to uphold this code.\n+Everyone is welcome to contribute to Hubot. Contributing doesn\u2019t just mean submitting pull requests\u2014there are many different ways for you to get involved, including answering questions in [chat](https://hubot-slackin.herokuapp.com/), reporting or triaging [issues](https://github.com/github/hubot/issues), and participating in the [Hubot Evolution](https://github.com/hubotio/evolution) process.\n \n+No matter how you want to get involved, we ask that you first learn what\u2019s expected of anyone who participates in the project by reading the [Contributor Covenant Code of Conduct](http://contributor-covenant.org). By participating, you are expected to uphold this code.\n \n We love pull requests. Here's a quick guide:\n \n+1. If you're adding a new feature or changing user-facing APIs, check out the [Hubot Evolution](https://github.com/hubotio/evolution) process.\n 1. Check for [existing issues](https://github.com/github/hubot/issues) for duplicates and confirm that it hasn't been fixed already in the [master branch](https://github.com/github/hubot/commits/master)\n-2. Fork the repo, and clone it locally\n-3. `npm link` to make your cloned repo available to npm\n-4. Follow [Getting Started](docs/index.md) to generate a testbot\n-5. `npm link hubot` in your newly created bot to use your hubot fork\n-6. Create a new branch for your contribution\n-7. Add [tests](test/) (run with `npm test`)\n-8. Push to your fork and submit a pull request\n+1. Fork the repo, and clone it locally\n+1. `npm link` to make your cloned repo available to npm\n+1. Follow [Getting Started](docs/index.md) to generate a testbot\n+1. `npm link hubot` in your newly created bot to use your hubot fork\n+1. Create a new branch for your contribution\n+1. Add [tests](test/) (run with `npm test`)\n+1. Push to your fork and submit a pull request\n \n At this point you're waiting on us. We like to at least comment on, if not\n accept, pull requests within a few days. We may suggest some changes or improvements or alternatives.", "changes": 18}, {"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/a75cd200f6cde474d6a2e931014b96a5b5241df7/ROADMAP.md", "blob_url": "https://github.com/hubotio/hubot/blob/a75cd200f6cde474d6a2e931014b96a5b5241df7/ROADMAP.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/ROADMAP.md?ref=a75cd200f6cde474d6a2e931014b96a5b5241df7", "filename": "ROADMAP.md", "sha": "fe5c8a6bcfa43d735834de96d08028f4e62b346d", "additions": 10, "patch": "@@ -21,17 +21,17 @@ This roadmap represents some of priorities for us over the next couple months. I\n - [x] Choose a chat platform for maintainers and contributors, and post notices in various existing places (#hubot on freenode, github/hubot on Gitter). Slack is the obvious choice here. [Join us on Slack](https://hubot-slackin.herokuapp.com/).\n - [x] Add a code of conduct based on http://contributor-covenant.org/ and processes to enforce it in all official spaces. ([#1334](https://github.com/github/hubot/pull/1334))\n - [ ] Publish weekly community updates (blog, newsletter, etc) which highlight recent and upcoming changes, give shoutouts to contributors / maintainers, and maybe mention interesting uses of Hubot\n-- [ ] Create Hubot Evolution\u2014inspired by [Swift Evolution](https://github.com/apple/swift-evolution)\u2014for proposing user-visible enhancements. This roadmap will be moved there and all future proposals will follow the process laid out in that repository. ([hubotio/evolution#1](https://github.com/hubotio/evolution/pull/1))\n+- [x] Create Hubot Evolution\u2014inspired by [Swift Evolution](https://github.com/apple/swift-evolution)\u2014for proposing user-visible enhancements. ([hubotio/evolution#1](https://github.com/hubotio/evolution/pull/1))\n \n ## 3. Modernize the project\n \n-Each of these proposals will go through the \u201cHubot Evolution\u201d process.\n+Each of these proposals will go through the [Hubot Evolution](https://github.com/hubotio/evolution) process.\n \n-- [ ] Translate from CoffeeScript to JavaScript and update to modern versions of Node.js and NPM (or Yarn)\n-- [ ] Revisit new bot generator (yeoman has a ton of dependencies, some of which can be error prone on windows)\n-- [ ] Support for running multiple adapters and archetypes (chat, deployment, CI, github, etc)\n-- [ ] Merge with [@probot](https://github.com/probot) and build out first class GitHub integration.\n-- [ ] Introduce \"Commands\u201d, an explicit interface for registering commands (like Slack\u2019s slash commands) as an alternative to regular expressions\n-- [ ] Publish a ChatOps RPC spec and implement support for Hubot acting as both a client and a server.\n-- [ ] Support rich messages and interactions on platforms that support it\n-- [ ] Publish a public script directory backed by NPM\n+- Translate from CoffeeScript to JavaScript and update to modern versions of Node.js and NPM (or Yarn)\n+- Revisit new bot generator (yeoman has a ton of dependencies, some of which can be error prone on windows)\n+- Support for running multiple adapters and archetypes (chat, deployment, CI, github, etc)\n+- Merge with [@probot](https://github.com/probot) and build out first class GitHub integration.\n+- Introduce \"Commands\u201d, an explicit interface for registering commands (like Slack\u2019s slash commands) as an alternative to regular expressions\n+- Publish a ChatOps RPC spec and implement support for Hubot acting as both a client and a server.\n+- Support rich messages and interactions on platforms that support it\n+- Publish a public script directory backed by NPM", "changes": 20}], "1344": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/62a69961730c442005c6936005627f4d6f141a93/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/62a69961730c442005c6936005627f4d6f141a93/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=62a69961730c442005c6936005627f4d6f141a93", "filename": "package.json", "sha": "97c3fdb5e67d457c7ec428d28eb0b88d03b79889", "additions": 0, "patch": "@@ -44,10 +44,7 @@\n   },\n   \"scripts\": {\n     \"clean\": \"rm -rf lib/\",\n-    \"preinstall\": \"script/dotenv\",\n-    \"prestart\": \"script/dotenv\",\n     \"start\": \"bin/hubot\",\n-    \"pretest\": \"script/dotenv\",\n     \"test\": \"mocha --require coffee-errors --compilers coffee:coffee-script\",\n     \"test:smoke\": \"coffee src/**/*.coffee\",\n     \"compile\": \"coffee --compile --bare --output lib src\",", "changes": 3}, {"status": "removed", "deletions": 13, "raw_url": "https://github.com/hubotio/hubot/raw/1c37cdf0ea7ad9fa5771bc35fed15aa0cd6e12ee/script/dotenv", "blob_url": "https://github.com/hubotio/hubot/blob/1c37cdf0ea7ad9fa5771bc35fed15aa0cd6e12ee/script/dotenv", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/script/dotenv?ref=1c37cdf0ea7ad9fa5771bc35fed15aa0cd6e12ee", "filename": "script/dotenv", "sha": "597b1c87e03c5e42d4c95f8bede150106ff2c34a", "additions": 0, "patch": "@@ -1,13 +0,0 @@\n-#!/usr/bin/env bash\n-\n-# Make sure everything is development forever\n-export NODE_ENV=development\n-\n-# Load environment specific environment variables\n-if [ -f .env ]; then\n-  source .env\n-fi\n-\n-if [ -f .env.${NODE_ENV} ]; then\n-  source .env.${NODE_ENV}\n-fi", "changes": 13}], "1345": [{"status": "modified", "deletions": 28, "raw_url": "https://github.com/hubotio/hubot/raw/90744ca1452a914eebf614e4c634f1d95236b089/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/90744ca1452a914eebf614e4c634f1d95236b089/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=90744ca1452a914eebf614e4c634f1d95236b089", "filename": "docs/index.md", "sha": "a3c1bd3bbd8ee6ff64cb5b5bf185719a4b17c64e", "additions": 28, "patch": "@@ -50,43 +50,43 @@ Hubot needs Redis to persist data, so before you can start hubot on your own com\n     Hubot>\n \n This starts hubot using the [shell adapter](./adapters/shell.md), which\n-is mostly useful for development. Make note of  `Hubot>`; this is the name your hubot will\n-`respond` to with commands. For example, to list available commands:\n+is mostly useful for development. Make note of the name in the `hubot>` prompt;\n+this is the name your hubot will respond to with commands. If the prompt\n+reads `myhubot>` then your commands must start with `myhubot <command>`\n+\n+For example, to list available commands:\n \n     % bin/hubot\n-    hubot> hubot help\n-    hubot adapter - Reply with the adapter\n-    hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.\n-    hubot echo <text> - Reply back with <text>\n-    hubot help - Displays all of the help commands that hubot knows about.\n-    hubot help <query> - Displays all help commands that match <query>.\n-    hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n-    hubot map me <query> - Returns a map view of the area returned by `query`.\n-    hubot mustache me <query> - Searches Google Images for the specified query and mustaches it.\n-    hubot mustache me <url> - Adds a mustache to the specified URL.\n-    hubot ping - Reply with pong\n-    hubot pronounce <phrase> in <language> - Provides pronunciation of <phrase> (<language> is optional)\n-    hubot pug bomb N - get N pugs\n-    hubot pug me - Receive a pug\n-    hubot the rules - Make sure hubot still knows the rules.\n-    hubot time - Reply with current time\n-    hubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.\n-    hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n-    hubot youtube me <query> - Searches YouTube for the query and returns the video embed link.\n+    myhubot> myhubot help\n+    myhubot> Shell: myhubot adapter - Reply with the adapter\n+    myhubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.\n+    myhubot echo <text> - Reply back with <text>\n+    myhubot help - Displays all of the help commands that Hubot knows about.\n+    myhubot help <query> - Displays all help commands that match <query>.\n+    myhubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.\n+    myhubot map me <query> - Returns a map view of the area returned by `query`.\n+    myhubot mustache me <url|query> - Adds a mustache to the specified URL or query result.\n+    myhubot ping - Reply with pong\n+    myhubot pug bomb N - get N pugs\n+    myhubot pug me - Receive a pug\n+    myhubot the rules - Make sure hubot still knows the rules.\n+    myhubot time - Reply with current time\n+    myhubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.\n+    myhubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional\n     ship it - Display a motivation squirrel\n \n You almost definitely will want to change your hubot's name to add character. bin/hubot takes a `--name`:\n \n-    % bin/hubot --name myhubot\n-    myhubot>\n+    % bin/hubot --name sam\n+    sam>\n \n-Your hubot will now respond as `myhubot`. This is\n+Your hubot will now respond as `sam`. This is\n case-insensitive, and can be prefixed with `@` or suffixed with `:`. These are equivalent:\n \n-    MYHUBOT help\n-    myhubot help\n-    @myhubot help\n-    myhubot: help\n+    SAM help\n+    sam help\n+    @sam help\n+    sam: help\n \n ## Scripts\n ", "changes": 56}], "1347": [{"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": ".travis.yml", "sha": "6c5155ee272d809300b34068a27b865a8c607ebe", "additions": 1, "patch": "@@ -1,12 +1,8 @@\n language: node_js\n node_js:\n-  - \"node\" # latest stable Node.js release\n-  - \"7\"\n+  - \"8\"\n   - \"6\"\n-  - \"5\"\n   - \"4\"\n-  - \"0.12\"\n-  - \"0.10\"\n notifications:\n   email: false\n sudo: false", "changes": 6}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "CHANGELOG.md", "sha": "3f08244e29dd950c5559fb78f51b873f4daf6e37", "additions": 13, "patch": "@@ -1,3 +1,16 @@\n+## [v2.19.0](https://github.com/github/hubot/tree/v3.0.0) (2017-06-09)\n+[Full Changelog](https://github.com/github/hubot/compare/v2.19.0...v3.0.0)\n+\n+### Breaking Changes\n+\n+- node@0.10 and node@0.12 are no longer supported\n+- Deep requires like `require('hubot/src/adapter')` are no longer support, use `require('hubot').Adapter` instead.\n+- `Middleware.ticker()` has been removed. Use `process.nextTick()` instead\n+\n+### Features\n+\n+- We now export es2015 `class` declarations of all Hubot classes at `require('hubot/es2015')`\n+\n ## [v2.19.0](https://github.com/github/hubot/tree/v2.19.0) (2016-05-0-6)\n [Full Changelog](https://github.com/github/hubot/compare/v2.18.0...v2.19.0)\n ", "changes": 13}, {"status": "modified", "deletions": 165, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/bin/hubot", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/bin/hubot", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "bin/hubot", "sha": "72850b0ecede1358d1a6f8bd6361b59c04507bec", "additions": 6, "patch": "@@ -1,168 +1,9 @@\n #!/usr/bin/env coffee\n-# vim:ft=coffee ts=2 sw=2 et :\n-# -*- mode:coffee -*-\n \n-Hubot    = require '..'\n+# While all other files have been converted to JavaScript via https://github.com/github/hubot/pull/1347,\n+# we left the `bin/hubot` file to remain in CoffeeScript in order prevent\n+# breaking existing 3rd party adapters of which some are still written in\n+# CoffeeScript themselves. We will depracate and eventually remove this file\n+# in a future version of hubot\n \n-Fs       = require 'fs'\n-OptParse = require 'optparse'\n-Path     = require 'path'\n-\n-Switches = [\n-  [ \"-a\", \"--adapter ADAPTER\", \"The Adapter to use\" ],\n-  [ \"-c\", \"--create PATH\",     \"Create a deployable hubot\" ],\n-  [ \"-d\", \"--disable-httpd\",   \"Disable the HTTP server\" ],\n-  [ \"-h\", \"--help\",            \"Display the help information\" ],\n-  [ \"-l\", \"--alias ALIAS\",     \"Enable replacing the robot's name with alias\" ],\n-  [ \"-n\", \"--name NAME\",       \"The name of the robot in chat\" ],\n-  [ \"-r\", \"--require PATH\",    \"Alternative scripts path\" ],\n-  [ \"-t\", \"--config-check\",    \"Test hubot's config to make sure it won't fail at startup\"]\n-  [ \"-v\", \"--version\",         \"Displays the version of hubot installed\" ]\n-]\n-\n-Options =\n-  adapter:     process.env.HUBOT_ADAPTER or \"shell\"\n-  alias:       process.env.HUBOT_ALIAS   or false\n-  create:      process.env.HUBOT_CREATE  or false\n-  enableHttpd: process.env.HUBOT_HTTPD   or true\n-  scripts:     process.env.HUBOT_SCRIPTS or []\n-  name:        process.env.HUBOT_NAME    or \"Hubot\"\n-  path:        process.env.HUBOT_PATH    or \".\"\n-  configCheck: false\n-\n-Parser = new OptParse.OptionParser(Switches)\n-Parser.banner = \"Usage hubot [options]\"\n-\n-Parser.on \"adapter\", (opt, value) ->\n-  Options.adapter = value\n-\n-Parser.on \"create\", (opt, value) ->\n-  Options.path = value\n-  Options.create = true\n-\n-Parser.on \"disable-httpd\", (opt) ->\n-  Options.enableHttpd = false\n-\n-Parser.on \"help\", (opt, value) ->\n-  console.log Parser.toString()\n-  process.exit 0\n-\n-Parser.on \"alias\", (opt, value) ->\n-  value or= '/'\n-  Options.alias = value\n-\n-Parser.on \"name\", (opt, value) ->\n-  Options.name = value\n-\n-Parser.on \"require\", (opt, value) ->\n-  Options.scripts.push(value)\n-\n-Parser.on \"config-check\", (opt) ->\n-  Options.configCheck = true\n-\n-Parser.on \"version\", (opt, value) ->\n-  Options.version = true\n-\n-Parser.on (opt, value) ->\n-  console.warn \"Unknown option: #{opt}\"\n-\n-Parser.parse process.argv\n-\n-unless process.platform is \"win32\"\n-  process.on 'SIGTERM', ->\n-    process.exit 0\n-\n-if Options.create\n-  console.error \"'hubot --create' is deprecated. Use the yeoman generator instead:\"\n-  console.error \"    npm install -g yo generator-hubot\"\n-  console.error \"    mkdir -p #{Options.path}\"\n-  console.error \"    cd #{Options.path}\"\n-  console.error \"    yo hubot\"\n-  console.error \"See https://github.com/github/hubot/blob/master/docs/index.md for more details on getting started.\"\n-  process.exit 1\n-\n-else\n-  robot = Hubot.loadBot undefined, Options.adapter, Options.enableHttpd, Options.name, Options.alias\n-\n-  if Options.version\n-    console.log robot.version\n-    process.exit 0\n-\n-  loadScripts = ->\n-    scriptsPath = Path.resolve \".\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    scriptsPath = Path.resolve \".\", \"src\", \"scripts\"\n-    robot.load scriptsPath\n-\n-    hubotScripts = Path.resolve \".\", \"hubot-scripts.json\"\n-    if Fs.existsSync(hubotScripts)\n-      data = Fs.readFileSync(hubotScripts)\n-      if data.length > 0\n-        try\n-          scripts = JSON.parse data\n-          scriptsPath = Path.resolve \"node_modules\", \"hubot-scripts\", \"src\", \"scripts\"\n-          robot.loadHubotScripts scriptsPath, scripts\n-        catch err\n-          robot.logger.error \"Error parsing JSON data from hubot-scripts.json: #{err}\"\n-          process.exit(1)\n-\n-        hubotScriptsWarning = \"Loading scripts from hubot-scripts.json is deprecated and \" +\n-          \"will be removed in 3.0 (https://github.com/github/hubot-scripts/issues/1113) \" +\n-          \"in favor of packages for each script.\\n\\n\"\n-\n-        if scripts.length is 0\n-          hubotScriptsWarning += \"Your hubot-scripts.json is empty, so you just need to remove it.\"\n-        else\n-          hubotScriptsReplacements = Path.resolve \"node_modules\", \"hubot-scripts\", \"replacements.json\"\n-\n-          if Fs.existsSync(hubotScriptsReplacements)\n-            hubotScriptsWarning += \"The following scripts have known replacements. Follow the link for installation instructions, then remove it from hubot-scripts.json:\\n\"\n-\n-            replacementsData = Fs.readFileSync(hubotScriptsReplacements)\n-            replacements = JSON.parse(replacementsData)\n-            scriptsWithoutReplacements = []\n-            for script in scripts\n-              replacement = replacements[script]\n-              if replacement\n-                hubotScriptsWarning += \"* #{script}: #{replacement}\\n\"\n-              else\n-                scriptsWithoutReplacements.push(script)\n-            hubotScriptsWarning += \"\\n\"\n-\n-            if scriptsWithoutReplacements.length > 0\n-              hubotScriptsWarning += \"The following scripts don't have (known) replacements. You can try searching https://www.npmjs.com/ or http://github.com/search or your favorite search engine. You can copy the script into your local scripts directory, or consider creating a new package to maintain yourself. If you find a replacement or create a package yourself, please post on https://github.com/github/hubot-scripts/issues/1641:\\n\"\n-              hubotScriptsWarning += \"* #{script}\\n\" for script in scriptsWithoutReplacements\n-\n-              hubotScriptsWarning += \"\\nYou an also try updating hubot-scripts to get the latest list of replacements: npm install --save hubot-scripts@latest\"\n-          else\n-              hubotScriptsWarning += \"To get a list of recommended replacements, update your hubot-scripts: npm install --save hubot-scripts@latest\"\n-\n-      robot.logger.warning hubotScriptsWarning\n-\n-    externalScripts = Path.resolve \".\", \"external-scripts.json\"\n-    if Fs.existsSync(externalScripts)\n-      Fs.readFile externalScripts, (err, data) ->\n-        if data.length > 0\n-          try\n-            scripts = JSON.parse data\n-          catch err\n-            console.error \"Error parsing JSON data from external-scripts.json: #{err}\"\n-            process.exit(1)\n-          robot.loadExternalScripts scripts\n-\n-    for path in Options.scripts\n-      if path[0] == '/'\n-        scriptsPath = path\n-      else\n-        scriptsPath = Path.resolve \".\", path\n-      robot.load scriptsPath\n-\n-  if Options.configCheck\n-    loadScripts()\n-    console.log \"OK\"\n-    process.exit 0\n-\n-  robot.adapter.once 'connected', loadScripts\n-\n-  robot.run()\n+require './hubot.js'", "changes": 171}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/bin/hubot.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/bin/hubot.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "bin/hubot.js", "sha": "aebf530b4455ebb57808a6ee5f112d858217aaab", "additions": 213, "patch": "@@ -0,0 +1,213 @@\n+'use strict'\n+\n+const fs = require('fs')\n+const pathResolve = require('path').resolve\n+\n+const OptParse = require('optparse')\n+\n+const Hubot = require('..')\n+\n+const switches = [\n+  ['-a', '--adapter ADAPTER', 'The Adapter to use'],\n+  ['-c', '--create PATH', 'Create a deployable hubot'],\n+  ['-d', '--disable-httpd', 'Disable the HTTP server'],\n+  ['-h', '--help', 'Display the help information'],\n+  ['-l', '--alias ALIAS', \"Enable replacing the robot's name with alias\"],\n+  ['-n', '--name NAME', 'The name of the robot in chat'],\n+  ['-r', '--require PATH', 'Alternative scripts path'],\n+  ['-t', '--config-check', \"Test hubot's config to make sure it won't fail at startup\"],\n+  ['-v', '--version', 'Displays the version of hubot installed']\n+]\n+\n+const options = {\n+  adapter: process.env.HUBOT_ADAPTER || 'shell',\n+  alias: process.env.HUBOT_ALIAS || false,\n+  create: process.env.HUBOT_CREATE || false,\n+  enableHttpd: process.env.HUBOT_HTTPD || true,\n+  scripts: process.env.HUBOT_SCRIPTS || [],\n+  name: process.env.HUBOT_NAME || 'Hubot',\n+  path: process.env.HUBOT_PATH || '.',\n+  configCheck: false\n+}\n+\n+const Parser = new OptParse.OptionParser(switches)\n+Parser.banner = 'Usage hubot [options]'\n+\n+Parser.on('adapter', (opt, value) => {\n+  options.adapter = value\n+})\n+\n+Parser.on('create', function (opt, value) {\n+  options.path = value\n+  options.create = true\n+})\n+\n+Parser.on('disable-httpd', opt => {\n+  options.enableHttpd = false\n+})\n+\n+Parser.on('help', function (opt, value) {\n+  console.log(Parser.toString())\n+  return process.exit(0)\n+})\n+\n+Parser.on('alias', function (opt, value) {\n+  if (!value) {\n+    value = '/'\n+  }\n+  options.alias = value\n+})\n+\n+Parser.on('name', (opt, value) => {\n+  options.name = value\n+})\n+\n+Parser.on('require', (opt, value) => {\n+  options.scripts.push(value)\n+})\n+\n+Parser.on('config-check', opt => {\n+  options.configCheck = true\n+})\n+\n+Parser.on('version', (opt, value) => {\n+  options.version = true\n+})\n+\n+Parser.on((opt, value) => {\n+  console.warn(`Unknown option: ${opt}`)\n+})\n+\n+Parser.parse(process.argv)\n+\n+if (process.platform !== 'win32') {\n+  process.on('SIGTERM', () => process.exit(0))\n+}\n+\n+if (options.create) {\n+  console.error(\"'hubot --create' is deprecated. Use the yeoman generator instead:\")\n+  console.error('    npm install -g yo generator-hubot')\n+  console.error(`    mkdir -p ${options.path}`)\n+  console.error(`    cd ${options.path}`)\n+  console.error('    yo hubot')\n+  console.error('See https://github.com/github/hubot/blob/master/docs/index.md for more details on getting started.')\n+  process.exit(1)\n+}\n+\n+const robot = Hubot.loadBot(undefined, options.adapter, options.enableHttpd, options.name, options.alias)\n+\n+if (options.version) {\n+  console.log(robot.version)\n+  process.exit(0)\n+}\n+\n+if (options.configCheck) {\n+  loadScripts()\n+  console.log('OK')\n+  process.exit(0)\n+}\n+\n+robot.adapter.once('connected', loadScripts)\n+\n+robot.run()\n+\n+function loadScripts () {\n+  robot.load(pathResolve('.', 'scripts'))\n+  robot.load(pathResolve('.', 'src', 'scripts'))\n+\n+  loadHubotScripts()\n+  loadExternalScripts()\n+\n+  options.scripts.forEach((scriptPath) => {\n+    if (scriptPath[0] === '/') {\n+      return robot.load(scriptPath)\n+    }\n+\n+    robot.load(pathResolve('.', scriptPath))\n+  })\n+}\n+\n+function loadHubotScripts () {\n+  const hubotScripts = pathResolve('.', 'hubot-scripts.json')\n+  let scripts\n+  let scriptsPath\n+\n+  if (fs.existsSync(hubotScripts)) {\n+    let hubotScriptsWarning\n+    const data = fs.readFileSync(hubotScripts)\n+\n+    if (data.length === 0) {\n+      return\n+    }\n+\n+    try {\n+      scripts = JSON.parse(data)\n+      scriptsPath = pathResolve('node_modules', 'hubot-scripts', 'src', 'scripts')\n+      robot.loadHubotScripts(scriptsPath, scripts)\n+    } catch (error) {\n+      const err = error\n+      robot.logger.error(`Error parsing JSON data from hubot-scripts.json: ${err}`)\n+      process.exit(1)\n+    }\n+\n+    hubotScriptsWarning = 'Loading scripts from hubot-scripts.json is deprecated and ' + 'will be removed in 3.0 (https://github.com/github/hubot-scripts/issues/1113) ' + 'in favor of packages for each script.\\n\\n'\n+\n+    if (scripts.length === 0) {\n+      hubotScriptsWarning += 'Your hubot-scripts.json is empty, so you just need to remove it.'\n+      return robot.logger.warning(hubotScriptsWarning)\n+    }\n+\n+    const hubotScriptsReplacements = pathResolve('node_modules', 'hubot-scripts', 'replacements.json')\n+    const replacementsData = fs.readFileSync(hubotScriptsReplacements)\n+    const replacements = JSON.parse(replacementsData)\n+    const scriptsWithoutReplacements = []\n+\n+    if (!fs.existsSync(hubotScriptsReplacements)) {\n+      hubotScriptsWarning += 'To get a list of recommended replacements, update your hubot-scripts: npm install --save hubot-scripts@latest'\n+      return robot.logger.warning(hubotScriptsWarning)\n+    }\n+\n+    hubotScriptsWarning += 'The following scripts have known replacements. Follow the link for installation instructions, then remove it from hubot-scripts.json:\\n'\n+\n+    scripts.forEach((script) => {\n+      const replacement = replacements[script]\n+\n+      if (replacement) {\n+        hubotScriptsWarning += `* ${script}: ${replacement}\\n`\n+      } else {\n+        scriptsWithoutReplacements.push(script)\n+      }\n+    })\n+\n+    hubotScriptsWarning += '\\n'\n+\n+    if (scriptsWithoutReplacements.length > 0) {\n+      hubotScriptsWarning += 'The following scripts don\u2019t have (known) replacements. You can try searching https://www.npmjs.com/ or http://github.com/search or your favorite search engine. You can copy the script into your local scripts directory, or consider creating a new package to maintain yourself. If you find a replacement or create a package yourself, please post on https://github.com/github/hubot-scripts/issues/1641:\\n'\n+      hubotScriptsWarning += scriptsWithoutReplacements.map((script) => `* ${script}\\n`).join('')\n+      hubotScriptsWarning += '\\nYou an also try updating hubot-scripts to get the latest list of replacements: npm install --save hubot-scripts@latest'\n+    }\n+\n+    robot.logger.warning(hubotScriptsWarning)\n+  }\n+}\n+\n+function loadExternalScripts () {\n+  const externalScripts = pathResolve('.', 'external-scripts.json')\n+\n+  if (!fs.existsSync(externalScripts)) {\n+    return\n+  }\n+\n+  fs.readFile(externalScripts, function (error, data) {\n+    if (error) {\n+      throw error\n+    }\n+\n+    try {\n+      robot.loadExternalScripts(JSON.parse(data))\n+    } catch (error) {\n+      console.error(`Error parsing JSON data from external-scripts.json: ${error}`)\n+      process.exit(1)\n+    }\n+  })\n+}", "changes": 213}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/es2015.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/es2015.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/es2015.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "es2015.js", "sha": "a69ca12fa7f85f8705c3be03e9e645f9cb4f767c", "additions": 29, "patch": "@@ -0,0 +1,29 @@\n+'use strict'\n+\n+const User = require('./src/user')\n+const Brain = require('./src/brain')\n+const Robot = require('./src/robot')\n+const Adapter = require('./src/adapter')\n+const Response = require('./src/response')\n+const Listener = require('./src/listener')\n+const Message = require('./src/message')\n+\n+module.exports = {\n+  User,\n+  Brain,\n+  Robot,\n+  Adapter: Adapter,\n+  Response,\n+  Listener: Listener.Listener,\n+  TextListener: Listener.TextListener,\n+  Message: Message.Message,\n+  TextMessage: Message.TextMessage,\n+  EnterMessage: Message.EnterMessage,\n+  LeaveMessage: Message.LeaveMessage,\n+  TopicMessage: Message.TopicMessage,\n+  CatchAllMessage: Message.CatchAllMessage,\n+\n+  loadBot (adapterPath, adapterName, enableHttpd, botName, botAlias) {\n+    return new Robot(adapterPath, adapterName, enableHttpd, botName, botAlias)\n+  }\n+}", "changes": 29}, {"status": "removed", "deletions": 26, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/index.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/index.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "index.coffee", "sha": "0467f3289cbf8a0c5d56db9168ad820b5aa96f30", "additions": 0, "patch": "@@ -1,26 +0,0 @@\n-User                                                                 = require './src/user'\n-Brain                                                                = require './src/brain'\n-Robot                                                                = require './src/robot'\n-Adapter                                                              = require './src/adapter'\n-Response                                                             = require './src/response'\n-{Listener,TextListener}                                              = require './src/listener'\n-{Message,TextMessage,EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './src/message'\n-\n-module.exports = {\n-  User\n-  Brain\n-  Robot\n-  Adapter\n-  Response\n-  Listener\n-  TextListener\n-  Message\n-  TextMessage\n-  EnterMessage\n-  LeaveMessage\n-  TopicMessage\n-  CatchAllMessage\n-}\n-\n-module.exports.loadBot = (adapterPath, adapterName, enableHttpd, botName, botAlias) ->\n-  new Robot adapterPath, adapterName, enableHttpd, botName, botAlias", "changes": 26}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/index.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/index.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/index.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "index.js", "sha": "ee736d83d43608161c6bdbd952b8a02a828c459e", "additions": 39, "patch": "@@ -0,0 +1,39 @@\n+'use strict'\n+\n+const inherits = require('util').inherits\n+\n+const hubotExport = require('./es2015')\n+\n+// make all es2015 class declarations compatible with CoffeeScript\u2019s extend\n+// see https://github.com/hubotio/evolution/pull/4#issuecomment-306437501\n+module.exports = Object.keys(hubotExport).reduce((map, current) => {\n+  if (current !== 'loadBot') {\n+    map[current] = makeClassCoffeeScriptCompatible(hubotExport[current])\n+  } else {\n+    map[current] = hubotExport[current]\n+  }\n+  return map\n+}, {})\n+\n+function makeClassCoffeeScriptCompatible (klass) {\n+  function CoffeeScriptCompatibleClass () {\n+    const Hack = Function.prototype.bind.apply(klass, [null].concat([].slice.call(arguments)))\n+    const instance = new Hack()\n+\n+    // pass methods from child to returned instance\n+    for (const key in this) {\n+      instance[key] = this[key]\n+    }\n+\n+    // support for constructor methods which call super()\n+    // in which this.* properties are set\n+    for (const key in instance) {\n+      this[key] = instance[key]\n+    }\n+\n+    return instance\n+  }\n+  inherits(CoffeeScriptCompatibleClass, klass)\n+\n+  return CoffeeScriptCompatibleClass\n+}", "changes": 39}, {"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "package.json", "sha": "8de14eb6764158f9cb82bff226399298c2890eb5", "additions": 4, "patch": "@@ -26,11 +26,11 @@\n     \"scoped-http-client\": \"0.11.0\"\n   },\n   \"devDependencies\": {\n-    \"coffee-errors\": \"0.8.6\",\n     \"mocha\": \"^2.1.0\",\n     \"mockery\": \"^1.4.0\",\n     \"sinon-chai\": \"^2.8.0\",\n     \"sinon\": \"~1.17.0\",\n+    \"standard\": \"^10.0.2\",\n     \"chai\": \"~2.1.0\"\n   },\n   \"engines\": {\n@@ -42,11 +42,9 @@\n     \"hubot\": \"./bin/hubot\"\n   },\n   \"scripts\": {\n-    \"clean\": \"rm -rf lib/\",\n     \"start\": \"bin/hubot\",\n-    \"test\": \"mocha --require coffee-errors --compilers coffee:coffee-script\",\n-    \"test:smoke\": \"coffee src/**/*.coffee\",\n-    \"compile\": \"coffee --compile --bare --output lib src\",\n-    \"compile:watch\": \"coffee --compile --bare --output lib --watch src\"\n+    \"pretest\": \"standard\",\n+    \"test\": \"mocha\",\n+    \"test:smoke\": \"node src/**/*.js\"\n   }\n }", "changes": 10}, {"status": "removed", "deletions": 117, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "src/adapter.coffee", "sha": "5f31bbd4dd4691376f9be2e2c037e4f962d44cd5", "additions": 0, "patch": "@@ -1,117 +0,0 @@\n-{EventEmitter} = require 'events'\n-\n-class Adapter extends EventEmitter\n-  # An adapter is a specific interface to a chat source for robots.\n-  #\n-  # robot - A Robot instance.\n-  constructor: (@robot) ->\n-\n-  # Public: Raw method for sending data back to the chat source. Extend this.\n-  #\n-  # envelope - A Object with message, room and user details.\n-  # strings  - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  send: (envelope, strings...) ->\n-\n-  # Public: Raw method for sending emote data back to the chat source.\n-  # Defaults as an alias for send\n-  #\n-  # envelope - A Object with message, room and user details.\n-  # strings  - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  emote: (envelope, strings...) ->\n-    @send envelope, strings...\n-\n-  # Public: Raw method for building a reply and sending it back to the chat\n-  # source. Extend this.\n-  #\n-  # envelope - A Object with message, room and user details.\n-  # strings  - One or more Strings for each reply to send.\n-  #\n-  # Returns nothing.\n-  reply: (envelope, strings...) ->\n-\n-  # Public: Raw method for setting a topic on the chat source. Extend this.\n-  #\n-  # envelope - A Object with message, room and user details.\n-  # strings  - One more more Strings to set as the topic.\n-  #\n-  # Returns nothing.\n-  topic: (envelope, strings...) ->\n-\n-  # Public: Raw method for playing a sound in the chat source. Extend this.\n-  #\n-  # envelope - A Object with message, room and user details.\n-  # strings  - One or more strings for each play message to send.\n-  #\n-  # Returns nothing\n-  play: (envelope, strings...) ->\n-\n-  # Public: Raw method for invoking the bot to run. Extend this.\n-  #\n-  # Returns nothing.\n-  run: ->\n-\n-  # Public: Raw method for shutting the bot down. Extend this.\n-  #\n-  # Returns nothing.\n-  close: ->\n-\n-  # Public: Dispatch a received message to the robot.\n-  #\n-  # Returns nothing.\n-  receive: (message) ->\n-    @robot.receive message\n-\n-  # Public: Get an Array of User objects stored in the brain.\n-  #\n-  # Returns an Array of User objects.\n-  users: ->\n-    @robot.logger.warning '@users() is going to be deprecated in 3.0.0 use @robot.brain.users()'\n-    @robot.brain.users()\n-\n-  # Public: Get a User object given a unique identifier.\n-  #\n-  # Returns a User instance of the specified user.\n-  userForId: (id, options) ->\n-    @robot.logger.warning '@userForId() is going to be deprecated in 3.0.0 use @robot.brain.userForId()'\n-    @robot.brain.userForId id, options\n-\n-  # Public: Get a User object given a name.\n-  #\n-  # Returns a User instance for the user with the specified name.\n-  userForName: (name) ->\n-    @robot.logger.warning '@userForName() is going to be deprecated in 3.0.0 use @robot.brain.userForName()'\n-    @robot.brain.userForName name\n-\n-  # Public: Get all users whose names match fuzzyName. Currently, match\n-  # means 'starts with', but this could be extended to match initials,\n-  # nicknames, etc.\n-  #\n-  # Returns an Array of User instances matching the fuzzy name.\n-  usersForRawFuzzyName: (fuzzyName) ->\n-    @robot.logger.warning '@userForRawFuzzyName() is going to be deprecated in 3.0.0 use @robot.brain.userForRawFuzzyName()'\n-    @robot.brain.usersForRawFuzzyName fuzzyName\n-\n-  # Public: If fuzzyName is an exact match for a user, returns an array with\n-  # just that user. Otherwise, returns an array of all users for which\n-  # fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n-  #\n-  # Returns an Array of User instances matching the fuzzy name.\n-  usersForFuzzyName: (fuzzyName) ->\n-    @robot.logger.warning '@userForFuzzyName() is going to be deprecated in 3.0.0 use @robot.brain.userForFuzzyName()'\n-    @robot.brain.usersForFuzzyName fuzzyName\n-\n-  # Public: Creates a scoped http client with chainable methods for\n-  # modifying the request. This doesn't actually make a request though.\n-  # Once your request is assembled, you can call `get()`/`post()`/etc to\n-  # send the request.\n-  #\n-  # Returns a ScopedClient instance.\n-  http: (url) ->\n-    @robot.logger.warning '@http() is going to be deprecated in 3.0.0 use @robot.http()'\n-    @robot.http(url)\n-\n-module.exports = Adapter", "changes": 117}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/src/adapter.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/src/adapter.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapter.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "src/adapter.js", "sha": "26214fd723756bf3ed462ffdda6bebecda7e06c6", "additions": 132, "patch": "@@ -0,0 +1,132 @@\n+'use strict'\n+\n+const EventEmitter = require('events').EventEmitter\n+\n+class Adapter extends EventEmitter {\n+  // An adapter is a specific interface to a chat source for robots.\n+  //\n+  // robot - A Robot instance.\n+  constructor (robot) {\n+    super()\n+    this.robot = robot\n+  }\n+\n+  // Public: Raw method for sending data back to the chat source. Extend this.\n+  //\n+  // envelope - A Object with message, room and user details.\n+  // strings  - One or more Strings for each message to send.\n+  //\n+  // Returns nothing.\n+  send (envelope/* , ...strings */) {}\n+\n+  // Public: Raw method for sending emote data back to the chat source.\n+  // Defaults as an alias for send\n+  //\n+  // envelope - A Object with message, room and user details.\n+  // strings  - One or more Strings for each message to send.\n+  //\n+  // Returns nothing.\n+  emote (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+    return this.send.apply(this, [envelope].concat(strings))\n+  }\n+\n+  // Public: Raw method for building a reply and sending it back to the chat\n+  // source. Extend this.\n+  //\n+  // envelope - A Object with message, room and user details.\n+  // strings  - One or more Strings for each reply to send.\n+  //\n+  // Returns nothing.\n+  reply (envelope/* , ...strings */) {}\n+\n+  // Public: Raw method for setting a topic on the chat source. Extend this.\n+  //\n+  // envelope - A Object with message, room and user details.\n+  // strings  - One more more Strings to set as the topic.\n+  //\n+  // Returns nothing.\n+  topic (envelope/* , ...strings */) {}\n+\n+  // Public: Raw method for playing a sound in the chat source. Extend this.\n+  //\n+  // envelope - A Object with message, room and user details.\n+  // strings  - One or more strings for each play message to send.\n+  //\n+  // Returns nothing\n+  play (envelope/* , ...strings */) {}\n+\n+  // Public: Raw method for invoking the bot to run. Extend this.\n+  //\n+  // Returns nothing.\n+  run () {}\n+\n+  // Public: Raw method for shutting the bot down. Extend this.\n+  //\n+  // Returns nothing.\n+  close () {}\n+\n+  // Public: Dispatch a received message to the robot.\n+  //\n+  // Returns nothing.\n+  receive (message) {\n+    this.robot.receive(message)\n+  }\n+\n+  // Public: Get an Array of User objects stored in the brain.\n+  //\n+  // Returns an Array of User objects.\n+  users () {\n+    this.robot.logger.warning('@users() is going to be deprecated in 3.0.0 use @robot.brain.users()')\n+    return this.robot.brain.users()\n+  }\n+\n+  // Public: Get a User object given a unique identifier.\n+  //\n+  // Returns a User instance of the specified user.\n+  userForId (id, options) {\n+    this.robot.logger.warning('@userForId() is going to be deprecated in 3.0.0 use @robot.brain.userForId()')\n+    return this.robot.brain.userForId(id, options)\n+  }\n+\n+  // Public: Get a User object given a name.\n+  //\n+  // Returns a User instance for the user with the specified name.\n+  userForName (name) {\n+    this.robot.logger.warning('@userForName() is going to be deprecated in 3.0.0 use @robot.brain.userForName()')\n+    return this.robot.brain.userForName(name)\n+  }\n+\n+  // Public: Get all users whose names match fuzzyName. Currently, match\n+  // means 'starts with', but this could be extended to match initials,\n+  // nicknames, etc.\n+  //\n+  // Returns an Array of User instances matching the fuzzy name.\n+  usersForRawFuzzyName (fuzzyName) {\n+    this.robot.logger.warning('@userForRawFuzzyName() is going to be deprecated in 3.0.0 use @robot.brain.userForRawFuzzyName()')\n+    return this.robot.brain.usersForRawFuzzyName(fuzzyName)\n+  }\n+\n+  // Public: If fuzzyName is an exact match for a user, returns an array with\n+  // just that user. Otherwise, returns an array of all users for which\n+  // fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n+  //\n+  // Returns an Array of User instances matching the fuzzy name.\n+  usersForFuzzyName (fuzzyName) {\n+    this.robot.logger.warning('@userForFuzzyName() is going to be deprecated in 3.0.0 use @robot.brain.userForFuzzyName()')\n+    return this.robot.brain.usersForFuzzyName(fuzzyName)\n+  }\n+\n+  // Public: Creates a scoped http client with chainable methods for\n+  // modifying the request. This doesn't actually make a request though.\n+  // Once your request is assembled, you can call `get()`/`post()`/etc to\n+  // send the request.\n+  //\n+  // Returns a ScopedClient instance.\n+  http (url) {\n+    this.robot.logger.warning('@http() is going to be deprecated in 3.0.0 use @robot.http()')\n+    return this.robot.http(url)\n+  }\n+}\n+\n+module.exports = Adapter", "changes": 132}, {"status": "removed", "deletions": 308, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/adapters/campfire.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/adapters/campfire.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "src/adapters/campfire.coffee", "sha": "98ee227d17ef21fe8a299f796547c5e415038b3b", "additions": 0, "patch": "@@ -1,308 +0,0 @@\n-HTTPS          = require 'https'\n-{EventEmitter} = require 'events'\n-\n-Robot                                                = require '../robot'\n-Adapter                                              = require '../adapter'\n-{TextMessage,EnterMessage,LeaveMessage,TopicMessage} = require '../message'\n-\n-class Campfire extends Adapter\n-  send: (envelope, strings...) ->\n-    if strings.length > 0\n-      string = strings.shift()\n-      if typeof(string) == 'function'\n-        string()\n-        @send envelope, strings...\n-      else\n-        @bot.Room(envelope.room).speak string, (err, data) =>\n-          @robot.logger.error \"Campfire send error: #{err}\" if err?\n-          @send envelope, strings...\n-\n-  emote: (envelope, strings...) ->\n-    @send envelope, strings.map((str) -> \"*#{str}*\")...\n-\n-  reply: (envelope, strings...) ->\n-    @send envelope, strings.map((str) -> \"#{envelope.user.name}: #{str}\")...\n-\n-  topic: (envelope, strings...) ->\n-    @bot.Room(envelope.room).topic strings.join(\" / \"), (err, data) =>\n-      @robot.logger.error \"Campfire topic error: #{err}\" if err?\n-\n-  play: (envelope, strings...) ->\n-    @bot.Room(envelope.room).sound strings.shift(), (err, data) =>\n-      @robot.logger.error \"Campfire sound error: #{err}\" if err?\n-      @play envelope, strings...\n-\n-  locked: (envelope, strings...) ->\n-    if envelope.message.private\n-      @send envelope, strings...\n-    else\n-      @bot.Room(envelope.room).lock (args...) =>\n-        strings.push =>\n-          # campfire won't send messages from just before a room unlock. 3000\n-          # is the 3-second poll.\n-          setTimeout (=> @bot.Room(envelope.room).unlock()), 3000\n-        @send envelope, strings...\n-\n-  run: ->\n-    self = @\n-\n-    options =\n-      token:   process.env.HUBOT_CAMPFIRE_TOKEN\n-      rooms:   process.env.HUBOT_CAMPFIRE_ROOMS\n-      account: process.env.HUBOT_CAMPFIRE_ACCOUNT\n-\n-    bot = new CampfireStreaming(options, @robot)\n-\n-    withAuthor = (callback) ->\n-      (id, created, room, user, body) ->\n-        bot.User user, (err, userData) ->\n-          if userData.user\n-            author = self.robot.brain.userForId(userData.user.id, userData.user)\n-            userId = userData.user.id\n-            self.robot.brain.data\n-              .users[userId].name = userData.user.name\n-            self.robot.brain.data\n-              .users[userId].email_address = userData.user.email_address\n-            author.room = room\n-            callback id, created, room, user, body, author\n-\n-    bot.on \"TextMessage\",\n-      withAuthor (id, created, room, user, body, author) ->\n-        unless bot.info.id is author.id\n-          message = new TextMessage author, body, id\n-          message.private = bot.private[room]\n-          self.receive message\n-\n-    bot.on \"EnterMessage\",\n-      withAuthor (id, created, room, user, body, author) ->\n-        unless bot.info.id is author.id\n-          self.receive new EnterMessage author, null, id\n-\n-    bot.on \"LeaveMessage\",\n-      withAuthor (id, created, room, user, body, author) ->\n-        unless bot.info.id is author.id\n-          self.receive new LeaveMessage author, null, id\n-\n-    bot.on \"TopicChangeMessage\",\n-      withAuthor (id, created, room, user, body, author) ->\n-        unless bot.info.id is author.id\n-          self.receive new TopicMessage author, body, id\n-\n-    bot.on \"LockMessage\",\n-      withAuthor (id, created, room, user, body, author) ->\n-        bot.private[room] = true\n-\n-    bot.on \"UnlockMessage\",\n-      withAuthor (id, created, room, user, body, author) ->\n-        bot.private[room] = false\n-\n-    bot.Me (err, data) ->\n-      bot.info = data.user\n-      bot.name = bot.info.name\n-\n-      for roomId in bot.rooms\n-        do (roomId) ->\n-          bot.Room(roomId).join (err, callback) ->\n-            bot.Room(roomId).listen()\n-\n-    bot.on \"reconnect\", (roomId) ->\n-      bot.Room(roomId).join (err, callback) ->\n-        bot.Room(roomId).listen()\n-\n-    @bot = bot\n-\n-    self.emit \"connected\"\n-\n-exports.use = (robot) ->\n-  new Campfire robot\n-\n-class CampfireStreaming extends EventEmitter\n-  constructor: (options, @robot) ->\n-    unless options.token? and options.rooms? and options.account?\n-      @robot.logger.error \\\n-        \"Not enough parameters provided. I need a token, rooms and account\"\n-      process.exit(1)\n-\n-    @token         = options.token\n-    @rooms         = options.rooms.split(\",\")\n-    @account       = options.account\n-    @host          = @account + \".campfirenow.com\"\n-    @authorization = \"Basic \" + new Buffer(\"#{@token}:x\").toString(\"base64\")\n-    @private       = {}\n-\n-  Rooms: (callback) ->\n-    @get \"/rooms\", callback\n-\n-  User: (id, callback) ->\n-    @get \"/users/#{id}\", callback\n-\n-  Me: (callback) ->\n-    @get \"/users/me\", callback\n-\n-  Room: (id) ->\n-    self = @\n-    logger = @robot.logger\n-\n-    show: (callback) ->\n-      self.get \"/room/#{id}\", callback\n-\n-    join: (callback) ->\n-      self.post \"/room/#{id}/join\", \"\", callback\n-\n-    leave: (callback) ->\n-      self.post \"/room/#{id}/leave\", \"\", callback\n-\n-    lock: (callback) ->\n-      self.post \"/room/#{id}/lock\", \"\", callback\n-\n-    unlock: (callback) ->\n-      self.post \"/room/#{id}/unlock\", \"\", callback\n-\n-    # say things to this channel on behalf of the token user\n-    paste: (text, callback) ->\n-      @message text, \"PasteMessage\", callback\n-\n-    topic: (text, callback) ->\n-      body = {room: {topic: text}}\n-      self.put \"/room/#{id}\", body, callback\n-\n-    sound: (text, callback) ->\n-      @message text, \"SoundMessage\", callback\n-\n-    speak: (text, callback) ->\n-      body = { message: { \"body\":text } }\n-      self.post \"/room/#{id}/speak\", body, callback\n-\n-    message: (text, type, callback) ->\n-      body = { message: { \"body\":text, \"type\":type } }\n-      self.post \"/room/#{id}/speak\", body, callback\n-\n-    # listen for activity in channels\n-    listen: ->\n-      headers =\n-        \"Host\"          : \"streaming.campfirenow.com\"\n-        \"Authorization\" : self.authorization\n-        \"User-Agent\"    : \"Hubot/#{@robot?.version} (#{@robot?.name})\"\n-\n-      options =\n-        \"agent\"  : false\n-        \"host\"   : \"streaming.campfirenow.com\"\n-        \"port\"   : 443\n-        \"path\"   : \"/room/#{id}/live.json\"\n-        \"method\" : \"GET\"\n-        \"headers\": headers\n-\n-      request = HTTPS.request options, (response) ->\n-        response.setEncoding(\"utf8\")\n-\n-        buf = ''\n-\n-        response.on \"data\", (chunk) ->\n-          if chunk is ' '\n-            # campfire api sends a ' ' heartbeat every 3s\n-\n-          else if chunk.match(/^\\s*Access Denied/)\n-            logger.error \"Campfire error on room #{id}: #{chunk}\"\n-\n-          else\n-            # api uses newline terminated json payloads\n-            # buffer across tcp packets and parse out lines\n-            buf += chunk\n-\n-            while (offset = buf.indexOf(\"\\r\")) > -1\n-              part = buf.substr(0, offset)\n-              buf = buf.substr(offset + 1)\n-\n-              if part\n-                try\n-                  data = JSON.parse part\n-                  self.emit(\n-                    data.type,\n-                    data.id,\n-                    data.created_at,\n-                    data.room_id,\n-                    data.user_id,\n-                    data.body\n-                  )\n-                catch error\n-                  logger.error \"Campfire data error: #{error}\\n#{error.stack}\"\n-\n-        response.on \"end\", ->\n-          logger.error \"Streaming connection closed for room #{id}. :(\"\n-          setTimeout ->\n-            self.emit \"reconnect\", id\n-          , 5000\n-\n-        response.on \"error\", (err) ->\n-          logger.error \"Campfire listen response error: #{err}\"\n-\n-      request.on \"error\", (err) ->\n-        logger.error \"Campfire listen request error: #{err}\"\n-\n-      request.end()\n-\n-  get: (path, callback) ->\n-    @request \"GET\", path, null, callback\n-\n-  post: (path, body, callback) ->\n-    @request \"POST\", path, body, callback\n-\n-  put: (path, body, callback) ->\n-    @request \"PUT\", path, body, callback\n-\n-  request: (method, path, body, callback) ->\n-    logger = @robot.logger\n-\n-    headers =\n-      \"Authorization\" : @authorization\n-      \"Host\"          : @host\n-      \"Content-Type\"  : \"application/json\"\n-      \"User-Agent\"    : \"Hubot/#{@robot?.version} (#{@robot?.name})\"\n-\n-    options =\n-      \"agent\"  : false\n-      \"host\"   : @host\n-      \"port\"   : 443\n-      \"path\"   : path\n-      \"method\" : method\n-      \"headers\": headers\n-\n-    if method is \"POST\" || method is \"PUT\"\n-      if typeof(body) isnt \"string\"\n-        body = JSON.stringify body\n-\n-      body = new Buffer(body)\n-      options.headers[\"Content-Length\"] = body.length\n-\n-    request = HTTPS.request options, (response) ->\n-      data = \"\"\n-\n-      response.on \"data\", (chunk) ->\n-        data += chunk\n-\n-      response.on \"end\", ->\n-        if response.statusCode >= 400\n-          switch response.statusCode\n-            when 401\n-              throw new Error \"Invalid access token provided\"\n-            else\n-              logger.error \"Campfire HTTPS status code: #{response.statusCode}\"\n-              logger.error \"Campfire HTTPS response data: #{data}\"\n-\n-        if callback\n-          try\n-            callback null, JSON.parse(data)\n-          catch error\n-            callback null, data or { }\n-\n-      response.on \"error\", (err) ->\n-        logger.error \"Campfire HTTPS response error: #{err}\"\n-        callback err, { }\n-\n-    if method is \"POST\" || method is \"PUT\"\n-      request.end(body, 'binary')\n-    else\n-      request.end()\n-\n-    request.on \"error\", (err) ->\n-      logger.error \"Campfire request error: #{err}\"", "changes": 308}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/src/adapters/campfire.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/src/adapters/campfire.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/campfire.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "src/adapters/campfire.js", "sha": "3b37aa38fe023fae26ba8cc43f4049e15dcc952c", "additions": 394, "patch": "@@ -0,0 +1,394 @@\n+'use strict'\n+\n+const HTTPS = require('https')\n+const EventEmitter = require('events').EventEmitter\n+\n+const Adapter = require('../adapter')\n+\n+const Message = require('../message')\n+\n+const TextMessage = Message.TextMessage\n+const EnterMessage = Message.EnterMessage\n+const LeaveMessage = Message.LeaveMessage\n+const TopicMessage = Message.TopicMessage\n+\n+class Campfire extends Adapter {\n+  send (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+\n+    if (strings.length === 0) {\n+      return\n+    }\n+\n+    const string = strings.shift()\n+    if (typeof string === 'function') {\n+      string()\n+      this.send.apply(this, [envelope].concat(strings))\n+      return\n+    }\n+\n+    this.bot.Room(envelope.room).speak(string, (error, data) => {\n+      if (error != null) {\n+        this.robot.logger.error(`Campfire send error: ${error}`)\n+      }\n+      this.send.apply(this, [envelope].concat(strings))\n+    })\n+  }\n+\n+  emote (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+    this.send.apply(this, [envelope].concat(strings.map(str => `*${str}*`)))\n+  }\n+\n+  reply (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+    this.send.apply(this, [envelope].concat(strings.map(str => `${envelope.user.name}: ${str}`)))\n+  }\n+\n+  topic (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+    this.bot.Room(envelope.room).topic(strings.join(' / '), (err, data) => {\n+      if (err != null) {\n+        this.robot.logger.error(`Campfire topic error: ${err}`)\n+      }\n+    })\n+  }\n+\n+  play (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+    this.bot.Room(envelope.room).sound(strings.shift(), (err, data) => {\n+      if (err != null) {\n+        this.robot.logger.error(`Campfire sound error: ${err}`)\n+      }\n+      this.play.apply(this, [envelope].concat(strings))\n+    })\n+  }\n+\n+  locked (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+\n+    if (envelope.message.private) {\n+      this.send.apply(this, [envelope].concat(strings))\n+    }\n+\n+    this.bot.Room(envelope.room).lock(() => {\n+      strings.push(() => {\n+        // campfire won't send messages from just before a room unlock. 3000\n+        // is the 3-second poll.\n+        setTimeout(() => this.bot.Room(envelope.room).unlock(), 3000)\n+      })\n+\n+      this.send.apply(this, [envelope].concat(strings))\n+    })\n+  }\n+\n+  run () {\n+    const self = this\n+\n+    const options = {\n+      token: process.env.HUBOT_CAMPFIRE_TOKEN,\n+      rooms: process.env.HUBOT_CAMPFIRE_ROOMS,\n+      account: process.env.HUBOT_CAMPFIRE_ACCOUNT\n+    }\n+\n+    const bot = new CampfireStreaming(options, this.robot)\n+\n+    function withAuthor (callback) {\n+      return function (id, created, room, user, body) {\n+        bot.User(user, function (_err, userData) {\n+          if (userData.user) {\n+            const author = self.robot.brain.userForId(userData.user.id, userData.user)\n+            const userId = userData.user.id\n+            self.robot.brain.data.users[userId].name = userData.user.name\n+            self.robot.brain.data.users[userId].email_address = userData.user.email_address\n+            author.room = room\n+            return callback(id, created, room, user, body, author)\n+          }\n+        })\n+      }\n+    }\n+\n+    bot.on('TextMessage', withAuthor(function (id, created, room, user, body, author) {\n+      if (bot.info.id !== author.id) {\n+        const message = new TextMessage(author, body, id)\n+        message.private = bot.private[room]\n+        self.receive(message)\n+      }\n+    }))\n+\n+    bot.on('EnterMessage', withAuthor(function (id, created, room, user, body, author) {\n+      if (bot.info.id !== author.id) {\n+        self.receive(new EnterMessage(author, null, id))\n+      }\n+    }))\n+\n+    bot.on('LeaveMessage', withAuthor(function (id, created, room, user, body, author) {\n+      if (bot.info.id !== author.id) {\n+        self.receive(new LeaveMessage(author, null, id))\n+      }\n+    }))\n+\n+    bot.on('TopicChangeMessage', withAuthor(function (id, created, room, user, body, author) {\n+      if (bot.info.id !== author.id) {\n+        self.receive(new TopicMessage(author, body, id))\n+      }\n+    }))\n+\n+    bot.on('LockMessage', withAuthor((id, created, room, user, body, author) => {\n+      bot.private[room] = true\n+    }))\n+\n+    bot.on('UnlockMessage', withAuthor((id, created, room, user, body, author) => {\n+      bot.private[room] = false\n+    }))\n+\n+    bot.Me(function (_err, data) {\n+      bot.info = data.user\n+      bot.name = bot.info.name\n+\n+      return Array.from(bot.rooms).map(roomId => (roomId => bot.Room(roomId).join((_err, callback) => bot.Room(roomId).listen()))(roomId))\n+    })\n+\n+    bot.on('reconnect', roomId => bot.Room(roomId).join((_err, callback) => bot.Room(roomId).listen()))\n+\n+    this.bot = bot\n+\n+    self.emit('connected')\n+  }\n+}\n+\n+exports.use = robot => new Campfire(robot)\n+\n+class CampfireStreaming extends EventEmitter {\n+  constructor (options, robot) {\n+    super()\n+\n+    this.robot = robot\n+    if (options.token == null || options.rooms == null || options.account == null) {\n+      this.robot.logger.error('Not enough parameters provided. I need a token, rooms and account')\n+      process.exit(1)\n+    }\n+\n+    this.token = options.token\n+    this.rooms = options.rooms.split(',')\n+    this.account = options.account\n+    this.host = this.account + '.campfirenow.com'\n+    this.authorization = `Basic ${Buffer.from(`${this.token}:x`).toString('base64')}`\n+    this.private = {}\n+  }\n+\n+  Rooms (callback) {\n+    return this.get('/rooms', callback)\n+  }\n+\n+  User (id, callback) {\n+    return this.get(`/users/${id}`, callback)\n+  }\n+\n+  Me (callback) {\n+    return this.get('/users/me', callback)\n+  }\n+\n+  Room (id) {\n+    const self = this\n+    const logger = this.robot.logger\n+\n+    return {\n+      show (callback) {\n+        return self.get(`/room/${id}`, callback)\n+      },\n+\n+      join (callback) {\n+        return self.post(`/room/${id}/join`, '', callback)\n+      },\n+\n+      leave (callback) {\n+        return self.post(`/room/${id}/leave`, '', callback)\n+      },\n+\n+      lock (callback) {\n+        return self.post(`/room/${id}/lock`, '', callback)\n+      },\n+\n+      unlock (callback) {\n+        return self.post(`/room/${id}/unlock`, '', callback)\n+      },\n+\n+      // say things to this channel on behalf of the token user\n+      paste (text, callback) {\n+        return this.message(text, 'PasteMessage', callback)\n+      },\n+\n+      topic (text, callback) {\n+        const body = { room: { topic: text } }\n+        return self.put(`/room/${id}`, body, callback)\n+      },\n+\n+      sound (text, callback) {\n+        return this.message(text, 'SoundMessage', callback)\n+      },\n+\n+      speak (text, callback) {\n+        const body = { message: { 'body': text } }\n+        return self.post(`/room/${id}/speak`, body, callback)\n+      },\n+\n+      message (text, type, callback) {\n+        const body = { message: { 'body': text, 'type': type } }\n+        return self.post(`/room/${id}/speak`, body, callback)\n+      },\n+\n+      // listen for activity in channels\n+      listen () {\n+        const headers = {\n+          'Host': 'streaming.campfirenow.com',\n+          'Authorization': self.authorization,\n+          'User-Agent': `Hubot/${this.robot != null ? this.robot.version : undefined} (${this.robot != null ? this.robot.name : undefined})`\n+        }\n+\n+        const options = {\n+          'agent': false,\n+          'host': 'streaming.campfirenow.com',\n+          'port': 443,\n+          'path': `/room/${id}/live.json`,\n+          'method': 'GET',\n+          'headers': headers\n+        }\n+\n+        const request = HTTPS.request(options, function (response) {\n+          response.setEncoding('utf8')\n+\n+          let buf = ''\n+\n+          response.on('data', function (chunk) {\n+            if (chunk === ' ') {\n+              // campfire api sends a ' ' heartbeat every 3s\n+\n+            } else if (chunk.match(/^\\s*Access Denied/)) {\n+              return logger.error(`Campfire error on room ${id}: ${chunk}`)\n+            } else {\n+              // api uses newline terminated json payloads\n+              // buffer across tcp packets and parse out lines\n+              buf += chunk\n+\n+              return (() => {\n+                let offset\n+                const result = []\n+                while ((offset = buf.indexOf('\\r')) > -1) {\n+                  let item\n+                  const part = buf.substr(0, offset)\n+                  buf = buf.substr(offset + 1)\n+\n+                  if (part) {\n+                    try {\n+                      const data = JSON.parse(part)\n+                      item = self.emit(data.type, data.id, data.created_at, data.room_id, data.user_id, data.body)\n+                    } catch (error) {\n+                      item = logger.error(`Campfire data error: ${error}\\n${error.stack}`)\n+                    }\n+                  }\n+                  result.push(item)\n+                }\n+\n+                return result\n+              })()\n+            }\n+          })\n+\n+          response.on('end', function () {\n+            logger.error(`Streaming connection closed for room ${id}. :(`)\n+            return setTimeout(() => self.emit('reconnect', id), 5000)\n+          })\n+\n+          return response.on('error', err => logger.error(`Campfire listen response error: ${err}`))\n+        })\n+\n+        request.on('error', err => logger.error(`Campfire listen request error: ${err}`))\n+\n+        return request.end()\n+      }\n+    }\n+  }\n+\n+  get (path, callback) {\n+    return this.request('GET', path, null, callback)\n+  }\n+\n+  post (path, body, callback) {\n+    return this.request('POST', path, body, callback)\n+  }\n+\n+  put (path, body, callback) {\n+    return this.request('PUT', path, body, callback)\n+  }\n+\n+  request (method, path, body, callback) {\n+    const logger = this.robot.logger\n+\n+    const headers = {\n+      'Authorization': this.authorization,\n+      'Host': this.host,\n+      'Content-Type': 'application/json',\n+      'User-Agent': `Hubot/${this.robot != null ? this.robot.version : undefined} (${this.robot != null ? this.robot.name : undefined})`\n+    }\n+\n+    const options = {\n+      'agent': false,\n+      'host': this.host,\n+      'port': 443,\n+      'path': path,\n+      'method': method,\n+      'headers': headers\n+    }\n+\n+    if (method === 'POST' || method === 'PUT') {\n+      if (typeof body !== 'string') {\n+        body = JSON.stringify(body)\n+      }\n+\n+      body = Buffer.from(body)\n+      options.headers['Content-Length'] = body.length\n+    }\n+\n+    const request = HTTPS.request(options, function (response) {\n+      let data = ''\n+\n+      response.on('data', chunk => {\n+        data += chunk\n+      })\n+\n+      response.on('end', function () {\n+        if (response.statusCode >= 400) {\n+          switch (response.statusCode) {\n+            case 401:\n+              throw new Error('Invalid access token provided')\n+            default:\n+              logger.error(`Campfire HTTPS status code: ${response.statusCode}`)\n+              logger.error(`Campfire HTTPS response data: ${data}`)\n+          }\n+        }\n+\n+        if (callback) {\n+          try {\n+            return callback(null, JSON.parse(data))\n+          } catch (_err) {\n+            return callback(null, data || {})\n+          }\n+        }\n+      })\n+\n+      return response.on('error', function (err) {\n+        logger.error(`Campfire HTTPS response error: ${err}`)\n+        return callback(err, {})\n+      })\n+    })\n+\n+    if (method === 'POST' || method === 'PUT') {\n+      request.end(body, 'binary')\n+    } else {\n+      request.end()\n+    }\n+\n+    return request.on('error', err => logger.error(`Campfire request error: ${err}`))\n+  }\n+}", "changes": 394}, {"status": "removed", "deletions": 105, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/adapters/shell.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/adapters/shell.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "src/adapters/shell.coffee", "sha": "61ccd1dd680d1c57af5b36c767d8e713399c6b1e", "additions": 0, "patch": "@@ -1,105 +0,0 @@\n-fs       = require('fs')\n-readline = require('readline')\n-stream   = require('stream')\n-cline    = require('cline')\n-chalk    = require('chalk')\n-\n-Robot         = require '../robot'\n-Adapter       = require '../adapter'\n-{TextMessage} = require '../message'\n-\n-historySize = if process.env.HUBOT_SHELL_HISTSIZE?\n-                parseInt(process.env.HUBOT_SHELL_HISTSIZE)\n-              else\n-                1024\n-\n-historyPath = \".hubot_history\"\n-\n-class Shell extends Adapter\n-  send: (envelope, strings...) ->\n-    console.log chalk.bold(\"#{str}\") for str in strings\n-\n-  emote: (envelope, strings...) ->\n-    @send envelope, \"* #{str}\" for str in strings\n-\n-  reply: (envelope, strings...) ->\n-    strings = strings.map (s) -> \"#{envelope.user.name}: #{s}\"\n-    @send envelope, strings...\n-\n-  run: ->\n-    @buildCli()\n-\n-    @loadHistory (history) =>\n-      @cli.history(history)\n-      @cli.interact(\"#{@robot.name}> \")\n-      @emit 'connected'\n-\n-  shutdown: () ->\n-    @robot.shutdown()\n-    process.exit 0\n-\n-  buildCli: () ->\n-    @cli = cline()\n-\n-    @cli.command '*', (input) =>\n-      userId = process.env.HUBOT_SHELL_USER_ID or '1'\n-      if userId.match (/\\A\\d+\\z/)\n-        userId = parseInt(userId)\n-\n-      userName = process.env.HUBOT_SHELL_USER_NAME or 'Shell'\n-      user = @robot.brain.userForId userId, name: userName, room: 'Shell'\n-      @receive new TextMessage user, input, 'messageId'\n-\n-    @cli.command 'history', () =>\n-      console.log item for item in @cli.history()\n-\n-    @cli.on 'history', (item) =>\n-      if item.length > 0 and item isnt 'exit' and item isnt 'history'\n-        fs.appendFile historyPath, \"#{item}\\n\", (err) =>\n-          @robot.emit 'error', err if err\n-\n-    @cli.on 'close', () =>\n-      history = @cli.history()\n-      if history.length > historySize\n-        startIndex = history.length - historySize\n-        history = history.reverse().splice(startIndex, historySize)\n-\n-        fileOpts = { mode:0o600 }\n-        outstream = fs.createWriteStream(historyPath, fileOpts)\n-        # >= node 0.10\n-        outstream.on 'finish', () =>\n-          @shutdown()\n-\n-        for item in history\n-          outstream.write \"#{item}\\n\"\n-\n-        # < node 0.10\n-        outstream.end () =>\n-          @shutdown()\n-       else\n-         @shutdown()\n-\n-  # Private: load history from .hubot_history.\n-  #\n-  # callback - A Function that is called with the loaded history items (or an empty array if there is no history)\n-  loadHistory: (callback) ->\n-    fs.exists historyPath, (exists) ->\n-      if exists\n-        instream = fs.createReadStream(historyPath)\n-        outstream = new stream\n-        outstream.readable = true\n-        outstream.writable = true\n-\n-        items = []\n-        rl = readline.createInterface(input: instream, output: outstream, terminal: false)\n-        rl.on 'line', (line) ->\n-          line = line.trim()\n-          if line.length > 0 \n-            items.push(line)\n-        rl.on 'close', () ->\n-          callback(items)\n-      else\n-        callback([])\n-\n-exports.use = (robot) ->\n-  new Shell robot", "changes": 105}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/src/adapters/shell.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/src/adapters/shell.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/adapters/shell.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "src/adapters/shell.js", "sha": "7dedb26d66c5cf91bde0eac3232d75d53f57c321", "additions": 138, "patch": "@@ -0,0 +1,138 @@\n+'use strict'\n+\n+const fs = require('fs')\n+const readline = require('readline')\n+const Stream = require('stream')\n+const cline = require('cline')\n+const chalk = require('chalk')\n+\n+const Adapter = require('../adapter')\n+\n+var _require = require('../message')\n+\n+const TextMessage = _require.TextMessage\n+\n+const historySize = process.env.HUBOT_SHELL_HISTSIZE != null ? parseInt(process.env.HUBOT_SHELL_HISTSIZE) : 1024\n+\n+const historyPath = '.hubot_history'\n+\n+class Shell extends Adapter {\n+  send (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+\n+    Array.from(strings).forEach(str => console.log(chalk.bold(`${str}`)))\n+  }\n+\n+  emote (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+    Array.from(strings).map(str => this.send(envelope, `* ${str}`))\n+  }\n+\n+  reply (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1).map((s) => `${envelope.user.name}: ${s}`)\n+\n+    this.send.apply(this, [envelope].concat(strings))\n+  }\n+\n+  run () {\n+    this.buildCli()\n+\n+    loadHistory((error, history) => {\n+      if (error) {\n+        console.log(error.message)\n+      }\n+\n+      this.cli.history(history)\n+      this.cli.interact(`${this.robot.name}> `)\n+      return this.emit('connected')\n+    })\n+  }\n+\n+  shutdown () {\n+    this.robot.shutdown()\n+    return process.exit(0)\n+  }\n+\n+  buildCli () {\n+    this.cli = cline()\n+\n+    this.cli.command('*', input => {\n+      let userId = process.env.HUBOT_SHELL_USER_ID || '1'\n+      if (userId.match(/A\\d+z/)) {\n+        userId = parseInt(userId)\n+      }\n+\n+      const userName = process.env.HUBOT_SHELL_USER_NAME || 'Shell'\n+      const user = this.robot.brain.userForId(userId, { name: userName, room: 'Shell' })\n+      this.receive(new TextMessage(user, input, 'messageId'))\n+    })\n+\n+    this.cli.command('history', () => {\n+      Array.from(this.cli.history()).map(item => console.log(item))\n+    })\n+\n+    this.cli.on('history', item => {\n+      if (item.length > 0 && item !== 'exit' && item !== 'history') {\n+        fs.appendFile(historyPath, `${item}\\n`, error => {\n+          if (error) {\n+            this.robot.emit('error', error)\n+          }\n+        })\n+      }\n+    })\n+\n+    this.cli.on('close', () => {\n+      let fileOpts, history, i, item, len, outstream, startIndex\n+\n+      history = this.cli.history()\n+\n+      if (history.length <= historySize) {\n+        return this.shutdown()\n+      }\n+\n+      startIndex = history.length - historySize\n+      history = history.reverse().splice(startIndex, historySize)\n+      fileOpts = {\n+        mode: 0x180\n+      }\n+\n+      outstream = fs.createWriteStream(historyPath, fileOpts)\n+      outstream.on('finish', this.shutdown.bind(this))\n+\n+      for (i = 0, len = history.length; i < len; i++) {\n+        item = history[i]\n+        outstream.write(item + '\\n')\n+      }\n+\n+      outstream.end(this.shutdown.bind(this))\n+    })\n+  }\n+}\n+\n+exports.use = robot => new Shell(robot)\n+\n+// load history from .hubot_history.\n+//\n+// callback - A Function that is called with the loaded history items (or an empty array if there is no history)\n+function loadHistory (callback) {\n+  if (!fs.existsSync(historyPath)) {\n+    return callback(new Error('No history available'))\n+  }\n+\n+  const instream = fs.createReadStream(historyPath)\n+  const outstream = new Stream()\n+  outstream.readable = true\n+  outstream.writable = true\n+\n+  const items = []\n+\n+  readline.createInterface({ input: instream, output: outstream, terminal: false })\n+    .on('line', function (line) {\n+      line = line.trim()\n+      if (line.length > 0) {\n+        items.push(line)\n+      }\n+    })\n+    .on('close', () => callback(null, items))\n+    .on('error', callback)\n+}", "changes": 138}, {"status": "removed", "deletions": 159, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/brain.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/brain.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "src/brain.coffee", "sha": "536b703cdae86186261c7fcd9e2edcdcd09ca3b0", "additions": 0, "patch": "@@ -1,159 +0,0 @@\n-{EventEmitter} = require 'events'\n-\n-User = require './user'\n-\n-class Brain extends EventEmitter\n-  # Represents somewhat persistent storage for the robot. Extend this.\n-  #\n-  # Returns a new Brain with no external storage.\n-  constructor: (robot) ->\n-    @data =\n-      users:    { }\n-      _private: { }\n-\n-    @autoSave = true\n-\n-    robot.on \"running\", =>\n-      @resetSaveInterval 5\n-\n-  # Public: Store key-value pair under the private namespace and extend\n-  # existing @data before emitting the 'loaded' event.\n-  #\n-  # Returns the instance for chaining.\n-  set: (key, value) ->\n-    if key is Object(key)\n-      pair = key\n-    else\n-      pair = {}\n-      pair[key] = value\n-\n-    extend @data._private, pair\n-    @emit 'loaded', @data\n-    @\n-\n-  # Public: Get value by key from the private namespace in @data\n-  # or return null if not found.\n-  #\n-  # Returns the value.\n-  get: (key) ->\n-    @data._private[key] ? null\n-\n-  # Public: Remove value by key from the private namespace in @data\n-  # if it exists\n-  #\n-  # Returns the instance for chaining.\n-  remove: (key) ->\n-    delete @data._private[key] if @data._private[key]?\n-    @\n-\n-  # Public: Emits the 'save' event so that 'brain' scripts can handle\n-  # persisting.\n-  #\n-  # Returns nothing.\n-  save: ->\n-    @emit 'save', @data\n-\n-  # Public: Emits the 'close' event so that 'brain' scripts can handle closing.\n-  #\n-  # Returns nothing.\n-  close: ->\n-    clearInterval @saveInterval\n-    @save()\n-    @emit 'close'\n-\n-  # Public: Enable or disable the automatic saving\n-  #\n-  # enabled - A boolean whether to autosave or not\n-  #\n-  # Returns nothing\n-  setAutoSave: (enabled) ->\n-    @autoSave = enabled\n-\n-  # Public: Reset the interval between save function calls.\n-  #\n-  # seconds - An Integer of seconds between saves.\n-  #\n-  # Returns nothing.\n-  resetSaveInterval: (seconds) ->\n-    clearInterval @saveInterval if @saveInterval\n-    @saveInterval = setInterval =>\n-      @save() if @autoSave\n-    , seconds * 1000\n-\n-  # Public: Merge keys loaded from a DB against the in memory representation.\n-  #\n-  # Returns nothing.\n-  #\n-  # Caveats: Deeply nested structures don't merge well.\n-  mergeData: (data) ->\n-    for k of (data or { })\n-      @data[k] = data[k]\n-\n-    @emit 'loaded', @data\n-\n-  # Public: Get an Array of User objects stored in the brain.\n-  #\n-  # Returns an Array of User objects.\n-  users: ->\n-    @data.users\n-\n-  # Public: Get a User object given a unique identifier.\n-  #\n-  # Returns a User instance of the specified user.\n-  userForId: (id, options) ->\n-    user = @data.users[id]\n-    unless user\n-      user = new User id, options\n-      @data.users[id] = user\n-\n-    if options and options.room and (!user.room or user.room isnt options.room)\n-      user = new User id, options\n-      @data.users[id] = user\n-\n-    user\n-\n-  # Public: Get a User object given a name.\n-  #\n-  # Returns a User instance for the user with the specified name.\n-  userForName: (name) ->\n-    result = null\n-    lowerName = name.toLowerCase()\n-    for k of (@data.users or { })\n-      userName = @data.users[k]['name']\n-      if userName? and userName.toString().toLowerCase() is lowerName\n-        result = @data.users[k]\n-    result\n-\n-  # Public: Get all users whose names match fuzzyName. Currently, match\n-  # means 'starts with', but this could be extended to match initials,\n-  # nicknames, etc.\n-  #\n-  # Returns an Array of User instances matching the fuzzy name.\n-  usersForRawFuzzyName: (fuzzyName) ->\n-    lowerFuzzyName = fuzzyName.toLowerCase()\n-    user for key, user of (@data.users or {}) when (\n-      user.name.toLowerCase().lastIndexOf(lowerFuzzyName, 0) is 0\n-    )\n-\n-  # Public: If fuzzyName is an exact match for a user, returns an array with\n-  # just that user. Otherwise, returns an array of all users for which\n-  # fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n-  #\n-  # Returns an Array of User instances matching the fuzzy name.\n-  usersForFuzzyName: (fuzzyName) ->\n-    matchedUsers = @usersForRawFuzzyName(fuzzyName)\n-    lowerFuzzyName = fuzzyName.toLowerCase()\n-    for user in matchedUsers\n-      return [user] if user.name.toLowerCase() is lowerFuzzyName\n-\n-    matchedUsers\n-\n-# Private: Extend obj with objects passed as additional args.\n-#\n-# Returns the original object with updated changes.\n-extend = (obj, sources...) ->\n-  for source in sources\n-    obj[key] = value for own key, value of source\n-  obj\n-\n-module.exports = Brain", "changes": 159}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/src/brain.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/src/brain.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/brain.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "src/brain.js", "sha": "f6697dfa6f7ae758ddeb95766ccee05269771e58", "additions": 198, "patch": "@@ -0,0 +1,198 @@\n+'use strict'\n+\n+const EventEmitter = require('events').EventEmitter\n+\n+const User = require('./user')\n+\n+class Brain extends EventEmitter {\n+  // Represents somewhat persistent storage for the robot. Extend this.\n+  //\n+  // Returns a new Brain with no external storage.\n+  constructor (robot) {\n+    super()\n+    this.data = {\n+      users: {},\n+      _private: {}\n+    }\n+\n+    this.autoSave = true\n+\n+    robot.on('running', () => {\n+      this.resetSaveInterval(5)\n+    })\n+  }\n+\n+  // Public: Store key-value pair under the private namespace and extend\n+  // existing @data before emitting the 'loaded' event.\n+  //\n+  // Returns the instance for chaining.\n+  set (key, value) {\n+    let pair\n+    if (key === Object(key)) {\n+      pair = key\n+    } else {\n+      pair = {}\n+      pair[key] = value\n+    }\n+\n+    Object.keys(pair).forEach((key) => {\n+      this.data._private[key] = pair[key]\n+    })\n+\n+    this.emit('loaded', this.data)\n+\n+    return this\n+  }\n+\n+  // Public: Get value by key from the private namespace in @data\n+  // or return null if not found.\n+  //\n+  // Returns the value.\n+  get (key) {\n+    return this.data._private[key] != null ? this.data._private[key] : null\n+  }\n+\n+  // Public: Remove value by key from the private namespace in @data\n+  // if it exists\n+  //\n+  // Returns the instance for chaining.\n+  remove (key) {\n+    if (this.data._private[key] != null) {\n+      delete this.data._private[key]\n+    }\n+\n+    return this\n+  }\n+\n+  // Public: Emits the 'save' event so that 'brain' scripts can handle\n+  // persisting.\n+  //\n+  // Returns nothing.\n+  save () {\n+    this.emit('save', this.data)\n+  }\n+\n+  // Public: Emits the 'close' event so that 'brain' scripts can handle closing.\n+  //\n+  // Returns nothing.\n+  close () {\n+    clearInterval(this.saveInterval)\n+    this.save()\n+    this.emit('close')\n+  }\n+\n+  // Public: Enable or disable the automatic saving\n+  //\n+  // enabled - A boolean whether to autosave or not\n+  //\n+  // Returns nothing\n+  setAutoSave (enabled) {\n+    this.autoSave = enabled\n+  }\n+\n+  // Public: Reset the interval between save function calls.\n+  //\n+  // seconds - An Integer of seconds between saves.\n+  //\n+  // Returns nothing.\n+  resetSaveInterval (seconds) {\n+    if (this.saveInterval) {\n+      clearInterval(this.saveInterval)\n+    }\n+    this.saveInterval = setInterval(() => {\n+      if (this.autoSave) {\n+        this.save()\n+      }\n+    }, seconds * 1000)\n+  }\n+\n+  // Public: Merge keys loaded from a DB against the in memory representation.\n+  //\n+  // Returns nothing.\n+  //\n+  // Caveats: Deeply nested structures don't merge well.\n+  mergeData (data) {\n+    for (let k in data || {}) {\n+      this.data[k] = data[k]\n+    }\n+\n+    this.emit('loaded', this.data)\n+  }\n+\n+  // Public: Get an Array of User objects stored in the brain.\n+  //\n+  // Returns an Array of User objects.\n+  users () {\n+    return this.data.users\n+  }\n+\n+  // Public: Get a User object given a unique identifier.\n+  //\n+  // Returns a User instance of the specified user.\n+  userForId (id, options) {\n+    let user = this.data.users[id]\n+\n+    if (!user) {\n+      user = new User(id, options)\n+      this.data.users[id] = user\n+    }\n+\n+    if (options && options.room && (!user.room || user.room !== options.room)) {\n+      user = new User(id, options)\n+      this.data.users[id] = user\n+    }\n+\n+    return user\n+  }\n+\n+  // Public: Get a User object given a name.\n+  //\n+  // Returns a User instance for the user with the specified name.\n+  userForName (name) {\n+    let result = null\n+    const lowerName = name.toLowerCase()\n+\n+    for (let k in this.data.users || {}) {\n+      const userName = this.data.users[k]['name']\n+      if (userName != null && userName.toString().toLowerCase() === lowerName) {\n+        result = this.data.users[k]\n+      }\n+    }\n+\n+    return result\n+  }\n+\n+  // Public: Get all users whose names match fuzzyName. Currently, match\n+  // means 'starts with', but this could be extended to match initials,\n+  // nicknames, etc.\n+  //\n+  // Returns an Array of User instances matching the fuzzy name.\n+  usersForRawFuzzyName (fuzzyName) {\n+    const lowerFuzzyName = fuzzyName.toLowerCase()\n+\n+    const users = this.data.users || {}\n+\n+    return Object.keys(users).reduce((result, key) => {\n+      const user = users[key]\n+      if (user.name.toLowerCase().lastIndexOf(lowerFuzzyName, 0) === 0) {\n+        result.push(user)\n+      }\n+      return result\n+    }, [])\n+  }\n+\n+  // Public: If fuzzyName is an exact match for a user, returns an array with\n+  // just that user. Otherwise, returns an array of all users for which\n+  // fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n+  //\n+  // Returns an Array of User instances matching the fuzzy name.\n+  usersForFuzzyName (fuzzyName) {\n+    const matchedUsers = this.usersForRawFuzzyName(fuzzyName)\n+    const lowerFuzzyName = fuzzyName.toLowerCase()\n+    const fuzzyMatchedUsers = matchedUsers.filter(user => user.name.toLowerCase() === lowerFuzzyName)\n+\n+    return fuzzyMatchedUsers.length > 0 ? fuzzyMatchedUsers : matchedUsers\n+  }\n+}\n+\n+module.exports = Brain", "changes": 198}, {"status": "removed", "deletions": 110, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/listener.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/listener.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "src/listener.coffee", "sha": "61aa15cf3d944a9977998b057a6f379a88c215ab", "additions": 0, "patch": "@@ -1,110 +0,0 @@\n-{inspect} = require 'util'\n-async     = require 'async'\n-\n-{TextMessage} = require './message'\n-Middleware = require './middleware'\n-\n-class Listener\n-  # Listeners receive every message from the chat source and decide if they\n-  # want to act on it.\n-  # An identifier should be provided in the options parameter to uniquely\n-  # identify the listener (options.id).\n-  #\n-  # robot    - A Robot instance.\n-  # matcher  - A Function that determines if this listener should trigger the\n-  #            callback.\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is triggered if the incoming message matches.\n-  constructor: (@robot, @matcher, @options, @callback) ->\n-    if not @matcher?\n-      throw new Error \"Missing a matcher for Listener\"\n-\n-    if not @callback?\n-      @callback = @options\n-      @options = {}\n-\n-    if not @options.id?\n-      @options.id = null\n-\n-    if not @callback? or typeof @callback != 'function'\n-      throw new Error \"Missing a callback for Listener\"\n-\n-  # Public: Determines if the listener likes the content of the message. If\n-  # so, a Response built from the given Message is passed through all\n-  # registered middleware and potentially the Listener callback. Note that\n-  # middleware can intercept the message and prevent the callback from ever\n-  # being executed.\n-  #\n-  # message - A Message instance.\n-  # middleware - Optional Middleware object to execute before the Listener callback\n-  # callback - Optional Function called with a boolean of whether the matcher matched\n-  #\n-  # Returns a boolean of whether the matcher matched.\n-  # Returns before executing callback\n-  call: (message, middleware, cb) ->\n-    # middleware argument is optional\n-    if not cb? and typeof middleware is 'function'\n-      cb = middleware\n-      middleware = undefined\n-\n-    # ensure we have a Middleware object\n-    if not middleware?\n-      middleware = new Middleware(@robot)\n-\n-    if match = @matcher message\n-      if @regex\n-        @robot.logger.debug \\\n-          \"Message '#{message}' matched regex /#{inspect @regex}/; listener.options = #{inspect @options}\"\n-\n-      # special middleware-like function that always executes the Listener's\n-      # callback and calls done (never calls 'next')\n-      executeListener = (context, done) =>\n-        @robot.logger.debug \"Executing listener callback for Message '#{message}'\"\n-        try\n-          @callback context.response\n-        catch err\n-          @robot.emit('error', err, context.response)\n-        done()\n-\n-      # When everything is finished (down the middleware stack and back up),\n-      # pass control back to the robot\n-      allDone = () ->\n-        # Yes, we tried to execute the listener callback (middleware may\n-        # have intercepted before actually executing though)\n-        if cb?\n-          Middleware.ticker -> cb true\n-\n-      response = new @robot.Response(@robot, message, match)\n-      middleware.execute(\n-        {listener: @, response: response}\n-        executeListener\n-        allDone\n-      )\n-      true\n-    else\n-      if cb?\n-        # No, we didn't try to execute the listener callback\n-        process.nextTick -> cb false\n-      false\n-\n-class TextListener extends Listener\n-  # TextListeners receive every message from the chat source and decide if they\n-  # want to act on it.\n-  #\n-  # robot    - A Robot instance.\n-  # regex    - A Regex that determines if this listener should trigger the\n-  #            callback.\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is triggered if the incoming message matches.\n-  constructor: (@robot, @regex, @options, @callback) ->\n-    @matcher = (message) =>\n-      if message instanceof TextMessage\n-        message.match @regex\n-    super @robot, @matcher, @options, @callback\n-\n-module.exports = {\n-  Listener\n-  TextListener\n-}", "changes": 110}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/src/listener.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/src/listener.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/listener.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "src/listener.js", "sha": "c1731d45922e06f2e75b922d57c6a5eba4d9fdfc", "additions": 134, "patch": "@@ -0,0 +1,134 @@\n+'use strict'\n+\n+const inspect = require('util').inspect\n+\n+const TextMessage = require('./message').TextMessage\n+const Middleware = require('./middleware')\n+\n+class Listener {\n+  // Listeners receive every message from the chat source and decide if they\n+  // want to act on it.\n+  // An identifier should be provided in the options parameter to uniquely\n+  // identify the listener (options.id).\n+  //\n+  // robot    - A Robot instance.\n+  // matcher  - A Function that determines if this listener should trigger the\n+  //            callback.\n+  // options  - An Object of additional parameters keyed on extension name\n+  //            (optional).\n+  // callback - A Function that is triggered if the incoming message matches.\n+  constructor (robot, matcher, options, callback) {\n+    this.robot = robot\n+    this.matcher = matcher\n+    this.options = options\n+    this.callback = callback\n+\n+    if (this.matcher == null) {\n+      throw new Error('Missing a matcher for Listener')\n+    }\n+\n+    if (this.callback == null) {\n+      this.callback = this.options\n+      this.options = {}\n+    }\n+\n+    if (this.options.id == null) {\n+      this.options.id = null\n+    }\n+\n+    if (this.callback == null || typeof this.callback !== 'function') {\n+      throw new Error('Missing a callback for Listener')\n+    }\n+  }\n+\n+  // Public: Determines if the listener likes the content of the message. If\n+  // so, a Response built from the given Message is passed through all\n+  // registered middleware and potentially the Listener callback. Note that\n+  // middleware can intercept the message and prevent the callback from ever\n+  // being executed.\n+  //\n+  // message - A Message instance.\n+  // middleware - Optional Middleware object to execute before the Listener callback\n+  // callback - Optional Function called with a boolean of whether the matcher matched\n+  //\n+  // Returns a boolean of whether the matcher matched.\n+  // Returns before executing callback\n+  call (message, middleware, didMatchCallback) {\n+    // middleware argument is optional\n+    if (didMatchCallback == null && typeof middleware === 'function') {\n+      didMatchCallback = middleware\n+      middleware = undefined\n+    }\n+\n+    // ensure we have a Middleware object\n+    if (middleware == null) {\n+      middleware = new Middleware(this.robot)\n+    }\n+\n+    const match = this.matcher(message)\n+    if (match) {\n+      if (this.regex) {\n+        this.robot.logger.debug(`Message '${message}' matched regex /${inspect(this.regex)}/; listener.options = ${inspect(this.options)}`)\n+      }\n+\n+      // special middleware-like function that always executes the Listener's\n+      // callback and calls done (never calls 'next')\n+      const executeListener = (context, done) => {\n+        this.robot.logger.debug(`Executing listener callback for Message '${message}'`)\n+        try {\n+          this.callback(context.response)\n+        } catch (err) {\n+          this.robot.emit('error', err, context.response)\n+        }\n+        done()\n+      }\n+\n+      // When everything is finished (down the middleware stack and back up),\n+      // pass control back to the robot\n+      const allDone = function allDone () {\n+        // Yes, we tried to execute the listener callback (middleware may\n+        // have intercepted before actually executing though)\n+        if (didMatchCallback != null) {\n+          process.nextTick(() => didMatchCallback(true))\n+        }\n+      }\n+\n+      const response = new this.robot.Response(this.robot, message, match)\n+      middleware.execute({ listener: this, response }, executeListener, allDone)\n+      return true\n+    } else {\n+      if (didMatchCallback != null) {\n+        // No, we didn't try to execute the listener callback\n+        process.nextTick(() => didMatchCallback(false))\n+      }\n+      return false\n+    }\n+  }\n+}\n+\n+class TextListener extends Listener {\n+  // TextListeners receive every message from the chat source and decide if they\n+  // want to act on it.\n+  //\n+  // robot    - A Robot instance.\n+  // regex    - A Regex that determines if this listener should trigger the\n+  //            callback.\n+  // options  - An Object of additional parameters keyed on extension name\n+  //            (optional).\n+  // callback - A Function that is triggered if the incoming message matches.\n+  constructor (robot, regex, options, callback) {\n+    function matcher (message) {\n+      if (message instanceof TextMessage) {\n+        return message.match(regex)\n+      }\n+    }\n+\n+    super(robot, matcher, options, callback)\n+    this.regex = regex\n+  }\n+}\n+\n+module.exports = {\n+  Listener,\n+  TextListener\n+}", "changes": 134}, {"status": "removed", "deletions": 72, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/message.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/message.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "src/message.coffee", "sha": "1b73ffc855e6b00275c4e1ea83042cd717268408", "additions": 0, "patch": "@@ -1,72 +0,0 @@\n-class Message\n-  # Represents an incoming message from the chat.\n-  #\n-  # user - A User instance that sent the message.\n-  constructor: (@user, @done = false) ->\n-    @room = @user.room\n-\n-  # Indicates that no other Listener should be called on this object\n-  #\n-  # Returns nothing.\n-  finish: ->\n-    @done = true\n-\n-class TextMessage extends Message\n-  # Represents an incoming message from the chat.\n-  #\n-  # user - A User instance that sent the message.\n-  # text - A String message.\n-  # id   - A String of the message ID.\n-  constructor: (@user, @text, @id) ->\n-    super @user\n-\n-  # Determines if the message matches the given regex.\n-  #\n-  # regex - A Regex to check.\n-  #\n-  # Returns a Match object or null.\n-  match: (regex) ->\n-    @text.match regex\n-  \n-  # String representation of a TextMessage\n-  #\n-  # Returns the message text\n-  toString: () ->\n-    @text\n-\n-# Represents an incoming user entrance notification.\n-#\n-# user - A User instance for the user who entered.\n-# text - Always null.\n-# id   - A String of the message ID.\n-class EnterMessage extends Message\n-\n-# Represents an incoming user exit notification.\n-#\n-# user - A User instance for the user who left.\n-# text - Always null.\n-# id   - A String of the message ID.\n-class LeaveMessage extends Message\n-\n-# Represents an incoming topic change notification.\n-#\n-# user - A User instance for the user who changed the topic.\n-# text - A String of the new topic\n-# id   - A String of the message ID.\n-class TopicMessage extends TextMessage\n-\n-class CatchAllMessage extends Message\n-  # Represents a message that no matchers matched.\n-  #\n-  # message - The original message.\n-  constructor: (@message) ->\n-    super @message.user\n-\n-module.exports = {\n-  Message\n-  TextMessage\n-  EnterMessage\n-  LeaveMessage\n-  TopicMessage\n-  CatchAllMessage\n-}", "changes": 72}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/src/message.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/src/message.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/message.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "src/message.js", "sha": "e2176d8ab0ec08f308c8328e27d8004734a67462", "additions": 88, "patch": "@@ -0,0 +1,88 @@\n+'use strict'\n+\n+class Message {\n+  // Represents an incoming message from the chat.\n+  //\n+  // user - A User instance that sent the message.\n+  constructor (user, done) {\n+    this.user = user\n+    this.done = done || false\n+    this.room = this.user.room\n+  }\n+\n+  // Indicates that no other Listener should be called on this object\n+  //\n+  // Returns nothing.\n+  finish () {\n+    this.done = true\n+  }\n+}\n+\n+class TextMessage extends Message {\n+  // Represents an incoming message from the chat.\n+  //\n+  // user - A User instance that sent the message.\n+  // text - A String message.\n+  // id   - A String of the message ID.\n+  constructor (user, text, id) {\n+    super(user)\n+    this.text = text\n+    this.id = id\n+  }\n+\n+  // Determines if the message matches the given regex.\n+  //\n+  // regex - A Regex to check.\n+  //\n+  // Returns a Match object or null.\n+  match (regex) {\n+    return this.text.match(regex)\n+  }\n+\n+  // String representation of a TextMessage\n+  //\n+  // Returns the message text\n+  toString () {\n+    return this.text\n+  }\n+}\n+\n+// Represents an incoming user entrance notification.\n+//\n+// user - A User instance for the user who entered.\n+// text - Always null.\n+// id   - A String of the message ID.\n+class EnterMessage extends Message {}\n+\n+// Represents an incoming user exit notification.\n+//\n+// user - A User instance for the user who left.\n+// text - Always null.\n+// id   - A String of the message ID.\n+class LeaveMessage extends Message {}\n+\n+// Represents an incoming topic change notification.\n+//\n+// user - A User instance for the user who changed the topic.\n+// text - A String of the new topic\n+// id   - A String of the message ID.\n+class TopicMessage extends TextMessage {}\n+\n+class CatchAllMessage extends Message {\n+  // Represents a message that no matchers matched.\n+  //\n+  // message - The original message.\n+  constructor (message) {\n+    super(message.user)\n+    this.message = message\n+  }\n+}\n+\n+module.exports = {\n+  Message,\n+  TextMessage,\n+  EnterMessage,\n+  LeaveMessage,\n+  TopicMessage,\n+  CatchAllMessage\n+}", "changes": 88}, {"status": "removed", "deletions": 71, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/middleware.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/middleware.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/middleware.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "src/middleware.coffee", "sha": "7f9d16e399cf1c1e79be8781857985d15d11587c", "additions": 0, "patch": "@@ -1,71 +0,0 @@\n-async = require 'async'\n-\n-class Middleware\n-  # We use this recursively, and using nextTick recursively is deprecated in node 0.10.\n-  @ticker: if typeof setImmediate is \"function\" then setImmediate else process.nextTick\n-\n-  constructor: (@robot) ->\n-    @stack = []\n-\n-  # Public: Execute all middleware in order and call 'next' with the latest\n-  # 'done' callback if last middleware calls through. If all middleware is\n-  # compliant, 'done' should be called with no arguments when the entire\n-  # round trip is complete.\n-  #\n-  # context - context object that is passed through the middleware stack.\n-  #     When handling errors, this is assumed to have a `response` property.\n-  #\n-  # next(context, done) - Called when all middleware is complete (assuming\n-  #     all continued by calling respective 'next' functions)\n-  #\n-  # done() - Initial (final) completion callback. May be wrapped by\n-  #     executed middleware.\n-  #\n-  # Returns nothing\n-  # Returns before executing any middleware\n-  execute: (context, next, done) ->\n-    done ?= ->\n-    # Execute a single piece of middleware and update the completion callback\n-    # (each piece of middleware can wrap the 'done' callback with additional\n-    # logic).\n-    executeSingleMiddleware = (doneFunc, middlewareFunc, cb) =>\n-      # Match the async.reduce interface\n-      nextFunc = (newDoneFunc) -> cb(null, newDoneFunc or doneFunc)\n-      # Catch errors in synchronous middleware\n-      try\n-        middlewareFunc.call(undefined, context, nextFunc, doneFunc)\n-      catch err\n-        # Maintaining the existing error interface (Response object)\n-        @robot.emit('error', err, context.response)\n-        # Forcibly fail the middleware and stop executing deeper\n-        doneFunc()\n-\n-    # Executed when the middleware stack is finished\n-    allDone = (_, finalDoneFunc) -> next(context, finalDoneFunc)\n-\n-    # Execute each piece of middleware, collecting the latest 'done' callback\n-    # at each step.\n-    process.nextTick =>\n-      async.reduce(@stack, done, executeSingleMiddleware, allDone)\n-\n-  # Public: Registers new middleware\n-  #\n-  # middleware - A generic pipeline component function that can either\n-  #              continue the pipeline or interrupt it. The function is called\n-  #              with (robot, context, next, done). If execution should\n-  #              continue (next middleware, final callback), the middleware\n-  #              should call the 'next' function with 'done' as an optional\n-  #              argument.\n-  #              If not, the middleware should call the 'done' function with\n-  #              no arguments. Middleware may wrap the 'done' function in\n-  #              order to execute logic after the final callback has been\n-  #              executed.\n-  #\n-  # Returns nothing.\n-  register: (middleware) ->\n-    if middleware.length != 3\n-      throw new Error(\"Incorrect number of arguments for middleware callback (expected 3, got #{middleware.length})\")\n-    @stack.push middleware\n-    return undefined\n-\n-module.exports = Middleware", "changes": 71}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/src/middleware.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/src/middleware.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/middleware.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "src/middleware.js", "sha": "3059706d794dce4e91928dda422896118dad327f", "additions": 86, "patch": "@@ -0,0 +1,86 @@\n+'use strict'\n+\n+const async = require('async')\n+\n+class Middleware {\n+  constructor (robot) {\n+    this.robot = robot\n+    this.stack = []\n+  }\n+\n+  // Public: Execute all middleware in order and call 'next' with the latest\n+  // 'done' callback if last middleware calls through. If all middleware is\n+  // compliant, 'done' should be called with no arguments when the entire\n+  // round trip is complete.\n+  //\n+  // context - context object that is passed through the middleware stack.\n+  //     When handling errors, this is assumed to have a `response` property.\n+  //\n+  // next(context, done) - Called when all middleware is complete (assuming\n+  //     all continued by calling respective 'next' functions)\n+  //\n+  // done() - Initial (final) completion callback. May be wrapped by\n+  //     executed middleware.\n+  //\n+  // Returns nothing\n+  // Returns before executing any middleware\n+  execute (context, next, done) {\n+    const self = this\n+\n+    if (done == null) {\n+      done = function () {}\n+    }\n+\n+    // Execute a single piece of middleware and update the completion callback\n+    // (each piece of middleware can wrap the 'done' callback with additional\n+    // logic).\n+    function executeSingleMiddleware (doneFunc, middlewareFunc, cb) {\n+      // Match the async.reduce interface\n+      function nextFunc (newDoneFunc) {\n+        cb(null, newDoneFunc || doneFunc)\n+      }\n+\n+      // Catch errors in synchronous middleware\n+      try {\n+        middlewareFunc(context, nextFunc, doneFunc)\n+      } catch (err) {\n+        // Maintaining the existing error interface (Response object)\n+        self.robot.emit('error', err, context.response)\n+        // Forcibly fail the middleware and stop executing deeper\n+        doneFunc()\n+      }\n+    }\n+\n+    // Executed when the middleware stack is finished\n+    function allDone (_, finalDoneFunc) {\n+      next(context, finalDoneFunc)\n+    }\n+\n+    // Execute each piece of middleware, collecting the latest 'done' callback\n+    // at each step.\n+    process.nextTick(async.reduce.bind(null, this.stack, done, executeSingleMiddleware, allDone))\n+  }\n+\n+  // Public: Registers new middleware\n+  //\n+  // middleware - A generic pipeline component function that can either\n+  //              continue the pipeline or interrupt it. The function is called\n+  //              with (robot, context, next, done). If execution should\n+  //              continue (next middleware, final callback), the middleware\n+  //              should call the 'next' function with 'done' as an optional\n+  //              argument.\n+  //              If not, the middleware should call the 'done' function with\n+  //              no arguments. Middleware may wrap the 'done' function in\n+  //              order to execute logic after the final callback has been\n+  //              executed.\n+  //\n+  // Returns nothing.\n+  register (middleware) {\n+    if (middleware.length !== 3) {\n+      throw new Error(`Incorrect number of arguments for middleware callback (expected 3, got ${middleware.length})`)\n+    }\n+    this.stack.push(middleware)\n+  }\n+}\n+\n+module.exports = Middleware", "changes": 86}, {"status": "removed", "deletions": 111, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "src/response.coffee", "sha": "504ee382a29fef139e6beead60a052e404b64359", "additions": 0, "patch": "@@ -1,111 +0,0 @@\n-class Response\n-  # Public: Responses are sent to matching listeners. Messages know about the\n-  # content and user that made the original message, and how to reply back to\n-  # them.\n-  #\n-  # robot   - A Robot instance.\n-  # message - A Message instance.\n-  # match   - A Match object from the successful Regex match.\n-  constructor: (@robot, @message, @match) ->\n-    @envelope =\n-      room: @message.room\n-      user: @message.user\n-      message: @message\n-\n-  # Public: Posts a message back to the chat source\n-  #\n-  # strings - One or more strings to be posted. The order of these strings\n-  #           should be kept intact.\n-  #\n-  # Returns nothing.\n-  send: (strings...) ->\n-    @runWithMiddleware(\"send\", { plaintext: true }, strings...)\n-\n-  # Public: Posts an emote back to the chat source\n-  #\n-  # strings - One or more strings to be posted. The order of these strings\n-  #           should be kept intact.\n-  #\n-  # Returns nothing.\n-  emote: (strings...) ->\n-    @runWithMiddleware(\"emote\", { plaintext: true }, strings...)\n-\n-  # Public: Posts a message mentioning the current user.\n-  #\n-  # strings - One or more strings to be posted. The order of these strings\n-  #           should be kept intact.\n-  #\n-  # Returns nothing.\n-  reply: (strings...) ->\n-    @runWithMiddleware(\"reply\", { plaintext: true }, strings...)\n-\n-  # Public: Posts a topic changing message\n-  #\n-  # strings - One or more strings to set as the topic of the\n-  #           room the bot is in.\n-  #\n-  # Returns nothing.\n-  topic: (strings...) ->\n-    @runWithMiddleware(\"topic\", { plaintext: true }, strings...)\n-\n-  # Public: Play a sound in the chat source\n-  #\n-  # strings - One or more strings to be posted as sounds to play. The order of\n-  #           these strings should be kept intact.\n-  #\n-  # Returns nothing\n-  play: (strings...) ->\n-    @runWithMiddleware(\"play\", strings...)\n-\n-  # Public: Posts a message in an unlogged room\n-  #\n-  # strings - One or more strings to be posted. The order of these strings\n-  #           should be kept intact.\n-  #\n-  # Returns nothing\n-  locked: (strings...) ->\n-    @runWithMiddleware(\"locked\", { plaintext: true }, strings...)\n-\n-  # Private: Call with a method for the given strings using response\n-  # middleware.\n-  runWithMiddleware: (methodName, opts, strings...) ->\n-    callback = undefined\n-    copy = strings.slice(0)\n-    if typeof(copy[copy.length - 1]) == 'function'\n-      callback = copy.pop()\n-    context = {response: @, strings: copy, method: methodName}\n-    context.plaintext = true if opts.plaintext?\n-    responseMiddlewareDone = ->\n-    runAdapterSend = (_, done) =>\n-      result = context.strings\n-      result.push(callback) if callback?\n-      @robot.adapter[methodName](@envelope, result...)\n-      done()\n-    @robot.middleware.response.execute context,\n-                                       runAdapterSend,\n-                                       responseMiddlewareDone\n-\n-  # Public: Picks a random item from the given items.\n-  #\n-  # items - An Array of items.\n-  #\n-  # Returns a random item.\n-  random: (items) ->\n-    items[ Math.floor(Math.random() * items.length) ]\n-\n-  # Public: Tell the message to stop dispatching to listeners\n-  #\n-  # Returns nothing.\n-  finish: ->\n-    @message.finish()\n-\n-  # Public: Creates a scoped http client with chainable methods for\n-  # modifying the request. This doesn't actually make a request though.\n-  # Once your request is assembled, you can call `get()`/`post()`/etc to\n-  # send the request.\n-  #\n-  # Returns a ScopedClient instance.\n-  http: (url, options) ->\n-    @robot.http(url, options)\n-\n-module.exports = Response", "changes": 111}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/src/response.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/src/response.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "src/response.js", "sha": "9656a6a08d62c560f781287d4a1fc2040689cc68", "additions": 150, "patch": "@@ -0,0 +1,150 @@\n+'use strict'\n+\n+class Response {\n+  // Public: Responses are sent to matching listeners. Messages know about the\n+  // content and user that made the original message, and how to reply back to\n+  // them.\n+  //\n+  // robot   - A Robot instance.\n+  // message - A Message instance.\n+  // match   - A Match object from the successful Regex match.\n+  constructor (robot, message, match) {\n+    this.robot = robot\n+    this.message = message\n+    this.match = match\n+    this.envelope = {\n+      room: this.message.room,\n+      user: this.message.user,\n+      message: this.message\n+    }\n+  }\n+\n+  // Public: Posts a message back to the chat source\n+  //\n+  // strings - One or more strings to be posted. The order of these strings\n+  //           should be kept intact.\n+  //\n+  // Returns nothing.\n+  send (/* ...strings */) {\n+    const strings = [].slice.call(arguments)\n+    this.runWithMiddleware.apply(this, ['send', { plaintext: true }].concat(strings))\n+  }\n+\n+  // Public: Posts an emote back to the chat source\n+  //\n+  // strings - One or more strings to be posted. The order of these strings\n+  //           should be kept intact.\n+  //\n+  // Returns nothing.\n+  emote (/* ...strings */) {\n+    const strings = [].slice.call(arguments)\n+    this.runWithMiddleware.apply(this, ['emote', { plaintext: true }].concat(strings))\n+  }\n+\n+  // Public: Posts a message mentioning the current user.\n+  //\n+  // strings - One or more strings to be posted. The order of these strings\n+  //           should be kept intact.\n+  //\n+  // Returns nothing.\n+  reply (/* ...strings */) {\n+    const strings = [].slice.call(arguments)\n+    this.runWithMiddleware.apply(this, ['reply', { plaintext: true }].concat(strings))\n+  }\n+\n+  // Public: Posts a topic changing message\n+  //\n+  // strings - One or more strings to set as the topic of the\n+  //           room the bot is in.\n+  //\n+  // Returns nothing.\n+  topic (/* ...strings */) {\n+    const strings = [].slice.call(arguments)\n+    this.runWithMiddleware.apply(this, ['topic', { plaintext: true }].concat(strings))\n+  }\n+\n+  // Public: Play a sound in the chat source\n+  //\n+  // strings - One or more strings to be posted as sounds to play. The order of\n+  //           these strings should be kept intact.\n+  //\n+  // Returns nothing\n+  play (/* ...strings */) {\n+    const strings = [].slice.call(arguments)\n+    this.runWithMiddleware.apply(this, ['play'].concat(strings))\n+  }\n+\n+  // Public: Posts a message in an unlogged room\n+  //\n+  // strings - One or more strings to be posted. The order of these strings\n+  //           should be kept intact.\n+  //\n+  // Returns nothing\n+  locked (/* ...strings */) {\n+    const strings = [].slice.call(arguments)\n+    this.runWithMiddleware.apply(this, ['locked', { plaintext: true }].concat(strings))\n+  }\n+\n+  // Private: Call with a method for the given strings using response\n+  // middleware.\n+  runWithMiddleware (methodName, opts/* , ...strings */) {\n+    const self = this\n+    const strings = [].slice.call(arguments, 2)\n+    const copy = strings.slice(0)\n+    let callback\n+\n+    if (typeof copy[copy.length - 1] === 'function') {\n+      callback = copy.pop()\n+    }\n+\n+    const context = {\n+      response: this,\n+      strings: copy,\n+      method: methodName\n+    }\n+\n+    if (opts.plaintext != null) {\n+      context.plaintext = true\n+    }\n+\n+    function responseMiddlewareDone () {}\n+    function runAdapterSend (_, done) {\n+      const result = context.strings\n+      if (callback != null) {\n+        result.push(callback)\n+      }\n+      self.robot.adapter[methodName].apply(self.robot.adapter, [self.envelope].concat(result))\n+      done()\n+    }\n+\n+    return this.robot.middleware.response.execute(context, runAdapterSend, responseMiddlewareDone)\n+  }\n+\n+  // Public: Picks a random item from the given items.\n+  //\n+  // items - An Array of items.\n+  //\n+  // Returns a random item.\n+  random (items) {\n+    return items[Math.floor(Math.random() * items.length)]\n+  }\n+\n+  // Public: Tell the message to stop dispatching to listeners\n+  //\n+  // Returns nothing.\n+  finish () {\n+    this.message.finish()\n+  }\n+\n+  // Public: Creates a scoped http client with chainable methods for\n+  // modifying the request. This doesn't actually make a request though.\n+  // Once your request is assembled, you can call `get()`/`post()`/etc to\n+  // send the request.\n+  //\n+  // Returns a ScopedClient instance.\n+  http (url, options) {\n+    return this.robot.http(url, options)\n+  }\n+}\n+\n+module.exports = Response", "changes": 150}, {"status": "removed", "deletions": 656, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "src/robot.coffee", "sha": "75b6a3c3377f0ff17a29b3c1748050ab36630ef2", "additions": 0, "patch": "@@ -1,656 +0,0 @@\n-Fs             = require 'fs'\n-Log            = require 'log'\n-Path           = require 'path'\n-HttpClient     = require 'scoped-http-client'\n-{EventEmitter} = require 'events'\n-async          = require 'async'\n-\n-User = require './user'\n-Brain = require './brain'\n-Response = require './response'\n-{Listener,TextListener} = require './listener'\n-{EnterMessage,LeaveMessage,TopicMessage,CatchAllMessage} = require './message'\n-Middleware = require './middleware'\n-\n-HUBOT_DEFAULT_ADAPTERS = [\n-  'campfire'\n-  'shell'\n-]\n-\n-HUBOT_DOCUMENTATION_SECTIONS = [\n-  'description'\n-  'dependencies'\n-  'configuration'\n-  'commands'\n-  'notes'\n-  'author'\n-  'authors'\n-  'examples'\n-  'tags'\n-  'urls'\n-]\n-\n-class Robot\n-  # Robots receive messages from a chat source (Campfire, irc, etc), and\n-  # dispatch them to matching listeners.\n-  #\n-  # adapterPath -  A String of the path to built-in adapters (defaults to src/adapters)\n-  # adapter     - A String of the adapter name.\n-  # httpd       - A Boolean whether to enable the HTTP daemon.\n-  # name        - A String of the robot name, defaults to Hubot.\n-  #\n-  # Returns nothing.\n-  constructor: (adapterPath, adapter, httpd, name = 'Hubot', alias = false) ->\n-    @adapterPath ?= Path.join __dirname, \"adapters\"\n-\n-    @name       = name\n-    @events     = new EventEmitter\n-    @brain      = new Brain @\n-    @alias      = alias\n-    @adapter    = null\n-    @Response   = Response\n-    @commands   = []\n-    @listeners  = []\n-    @middleware =\n-      listener: new Middleware(@)\n-      response: new Middleware(@)\n-      receive:  new Middleware(@)\n-    @logger     = new Log process.env.HUBOT_LOG_LEVEL or 'info'\n-    @pingIntervalId = null\n-    @globalHttpOptions = {}\n-\n-    @parseVersion()\n-    if httpd\n-      @setupExpress()\n-    else\n-      @setupNullRouter()\n-\n-    @loadAdapter adapter\n-\n-    @adapterName   = adapter\n-    @errorHandlers = []\n-\n-    @on 'error', (err, res) =>\n-      @invokeErrorHandlers(err, res)\n-    @onUncaughtException = (err) =>\n-      @emit 'error', err\n-    process.on 'uncaughtException', @onUncaughtException\n-\n-  # Public: Adds a custom Listener with the provided matcher, options, and\n-  # callback\n-  #\n-  # matcher  - A Function that determines whether to call the callback.\n-  #            Expected to return a truthy value if the callback should be\n-  #            executed.\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object if the\n-  #            matcher function returns true.\n-  #\n-  # Returns nothing.\n-  listen: (matcher, options, callback) ->\n-    @listeners.push new Listener(@, matcher, options, callback)\n-\n-  # Public: Adds a Listener that attempts to match incoming messages based on\n-  # a Regex.\n-  #\n-  # regex    - A Regex that determines if the callback should be called.\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  hear: (regex, options, callback) ->\n-    @listeners.push new TextListener(@, regex, options, callback)\n-\n-  # Public: Adds a Listener that attempts to match incoming messages directed\n-  # at the robot based on a Regex. All regexes treat patterns like they begin\n-  # with a '^'\n-  #\n-  # regex    - A Regex that determines if the callback should be called.\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  respond: (regex, options, callback) ->\n-    @hear(@respondPattern(regex), options, callback)\n-\n-  # Public: Build a regular expression that matches messages addressed\n-  # directly to the robot\n-  #\n-  # regex - A RegExp for the message part that follows the robot's name/alias\n-  #\n-  # Returns RegExp.\n-  respondPattern: (regex) ->\n-    re = regex.toString().split('/')\n-    re.shift()\n-    modifiers = re.pop()\n-\n-    if re[0] and re[0][0] is '^'\n-      @logger.warning \\\n-        \"Anchors don't work well with respond, perhaps you want to use 'hear'\"\n-      @logger.warning \"The regex in question was #{regex.toString()}\"\n-\n-    pattern = re.join('/')\n-    name = @name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n-\n-    if @alias\n-      alias = @alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n-      [a,b] = if name.length > alias.length then [name,alias] else [alias,name]\n-      newRegex = new RegExp(\n-        \"^\\\\s*[@]?(?:#{a}[:,]?|#{b}[:,]?)\\\\s*(?:#{pattern})\"\n-        modifiers\n-      )\n-    else\n-      newRegex = new RegExp(\n-        \"^\\\\s*[@]?#{name}[:,]?\\\\s*(?:#{pattern})\",\n-        modifiers\n-      )\n-\n-    newRegex\n-\n-  # Public: Adds a Listener that triggers when anyone enters the room.\n-  #\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  enter: (options, callback) ->\n-    @listen(\n-      ((msg) -> msg instanceof EnterMessage)\n-      options\n-      callback\n-    )\n-\n-  # Public: Adds a Listener that triggers when anyone leaves the room.\n-  #\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  leave: (options, callback) ->\n-    @listen(\n-      ((msg) -> msg instanceof LeaveMessage)\n-      options\n-      callback\n-    )\n-\n-  # Public: Adds a Listener that triggers when anyone changes the topic.\n-  #\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  topic: (options, callback) ->\n-    @listen(\n-      ((msg) -> msg instanceof TopicMessage)\n-      options\n-      callback\n-    )\n-\n-  # Public: Adds an error handler when an uncaught exception or user emitted\n-  # error event occurs.\n-  #\n-  # callback - A Function that is called with the error object.\n-  #\n-  # Returns nothing.\n-  error: (callback) ->\n-    @errorHandlers.push callback\n-\n-  # Calls and passes any registered error handlers for unhandled exceptions or\n-  # user emitted error events.\n-  #\n-  # err - An Error object.\n-  # res - An optional Response object that generated the error\n-  #\n-  # Returns nothing.\n-  invokeErrorHandlers: (err, res) ->\n-    @logger.error err.stack\n-    for errorHandler in @errorHandlers\n-     try\n-       errorHandler(err, res)\n-     catch errErr\n-       @logger.error \"while invoking error handler: #{errErr}\\n#{errErr.stack}\"\n-\n-  # Public: Adds a Listener that triggers when no other text matchers match.\n-  #\n-  # options  - An Object of additional parameters keyed on extension name\n-  #            (optional).\n-  # callback - A Function that is called with a Response object.\n-  #\n-  # Returns nothing.\n-  catchAll: (options, callback) ->\n-    # `options` is optional; need to isolate the real callback before\n-    # wrapping it with logic below\n-    if not callback?\n-      callback = options\n-      options = {}\n-\n-    @listen(\n-      ((msg) -> msg instanceof CatchAllMessage)\n-      options\n-      ((msg) -> msg.message = msg.message.message; callback msg)\n-    )\n-\n-  # Public: Registers new middleware for execution after matching but before\n-  # Listener callbacks\n-  #\n-  # middleware - A function that determines whether or not a given matching\n-  #              Listener should be executed. The function is called with\n-  #              (context, next, done). If execution should\n-  #              continue (next middleware, Listener callback), the middleware\n-  #              should call the 'next' function with 'done' as an argument.\n-  #              If not, the middleware should call the 'done' function with\n-  #              no arguments.\n-  #\n-  # Returns nothing.\n-  listenerMiddleware: (middleware) ->\n-    @middleware.listener.register middleware\n-    return undefined\n-\n-  # Public: Registers new middleware for execution as a response to any\n-  # message is being sent.\n-  #\n-  # middleware - A function that examines an outgoing message and can modify\n-  #              it or prevent its sending. The function is called with\n-  #              (context, next, done). If execution should continue,\n-  #              the middleware should call next(done). If execution should stop,\n-  #              the middleware should call done(). To modify the outgoing message,\n-  #              set context.string to a new message.\n-  #\n-  # Returns nothing.\n-  responseMiddleware: (middleware) ->\n-    @middleware.response.register middleware\n-    return undefined\n-\n-  # Public: Registers new middleware for execution before matching\n-  #\n-  # middleware - A function that determines whether or not listeners should be\n-  #              checked. The function is called with (context, next, done). If\n-  #              ext, next, done). If execution should continue to the next\n-  #              middleware or matching phase, it should call the 'next'\n-  #              function with 'done' as an argument. If not, the middleware\n-  #              should call the 'done' function with no arguments.\n-  #\n-  # Returns nothing.\n-  receiveMiddleware: (middleware) ->\n-    @middleware.receive.register middleware\n-    return undefined\n-\n-  # Public: Passes the given message to any interested Listeners after running\n-  #         receive middleware.\n-  #\n-  # message - A Message instance. Listeners can flag this message as 'done' to\n-  #           prevent further execution.\n-  #\n-  # cb - Optional callback that is called when message processing is complete\n-  #\n-  # Returns nothing.\n-  # Returns before executing callback\n-  receive: (message, cb) ->\n-    # When everything is finished (down the middleware stack and back up),\n-    # pass control back to the robot\n-    @middleware.receive.execute(\n-      {response: new Response(this, message)}\n-      @processListeners.bind this\n-      cb\n-    )\n-\n-  # Private: Passes the given message to any interested Listeners.\n-  #\n-  # message - A Message instance. Listeners can flag this message as 'done' to\n-  #           prevent further execution.\n-  #\n-  # done - Optional callback that is called when message processing is complete\n-  #\n-  # Returns nothing.\n-  # Returns before executing callback\n-  processListeners: (context, done) ->\n-    # Try executing all registered Listeners in order of registration\n-    # and return after message is done being processed\n-    anyListenersExecuted = false\n-    async.detectSeries(\n-      @listeners,\n-      (listener, cb) =>\n-        try\n-          listener.call context.response.message, @middleware.listener, (listenerExecuted) ->\n-            anyListenersExecuted = anyListenersExecuted || listenerExecuted\n-            # Defer to the event loop at least after every listener so the\n-            # stack doesn't get too big\n-            Middleware.ticker () ->\n-              # Stop processing when message.done == true\n-              cb(context.response.message.done)\n-        catch err\n-          @emit('error', err, new @Response(@, context.response.message, []))\n-          # Continue to next listener when there is an error\n-          cb(false)\n-      ,\n-      # Ignore the result ( == the listener that set message.done = true)\n-      (_) =>\n-        # If no registered Listener matched the message\n-        if context.response.message not instanceof CatchAllMessage and not anyListenersExecuted\n-          @logger.debug 'No listeners executed; falling back to catch-all'\n-          @receive new CatchAllMessage(context.response.message), done\n-        else\n-          process.nextTick done if done?\n-    )\n-    return undefined\n-\n-\n-  # Public: Loads a file in path.\n-  #\n-  # path - A String path on the filesystem.\n-  # file - A String filename in path on the filesystem.\n-  #\n-  # Returns nothing.\n-  loadFile: (path, file) ->\n-    ext  = Path.extname file\n-    full = Path.join path, Path.basename(file, ext)\n-    if require.extensions[ext]\n-      try\n-        script = require(full)\n-\n-        if typeof script is 'function'\n-          script @\n-          @parseHelp Path.join(path, file)\n-        else\n-          @logger.warning \"Expected #{full} to assign a function to module.exports, got #{typeof script}\"\n-\n-      catch error\n-        @logger.error \"Unable to load #{full}: #{error.stack}\"\n-        process.exit(1)\n-\n-  # Public: Loads every script in the given path.\n-  #\n-  # path - A String path on the filesystem.\n-  #\n-  # Returns nothing.\n-  load: (path) ->\n-    @logger.debug \"Loading scripts from #{path}\"\n-\n-    if Fs.existsSync(path)\n-      for file in Fs.readdirSync(path).sort()\n-        @loadFile path, file\n-\n-  # Public: Load scripts specified in the `hubot-scripts.json` file.\n-  #\n-  # path    - A String path to the hubot-scripts files.\n-  # scripts - An Array of scripts to load.\n-  #\n-  # Returns nothing.\n-  loadHubotScripts: (path, scripts) ->\n-    @logger.debug \"Loading hubot-scripts from #{path}\"\n-    for script in scripts\n-      @loadFile path, script\n-\n-  # Public: Load scripts from packages specified in the\n-  # `external-scripts.json` file.\n-  #\n-  # packages - An Array of packages containing hubot scripts to load.\n-  #\n-  # Returns nothing.\n-  loadExternalScripts: (packages) ->\n-    @logger.debug \"Loading external-scripts from npm packages\"\n-    try\n-      if packages instanceof Array\n-        for pkg in packages\n-          require(pkg)(@)\n-      else\n-        for pkg, scripts of packages\n-          require(pkg)(@, scripts)\n-    catch err\n-      @logger.error \"Error loading scripts from npm package - #{err.stack}\"\n-      process.exit(1)\n-\n-  # Setup the Express server's defaults.\n-  #\n-  # Returns nothing.\n-  setupExpress: ->\n-    user       = process.env.EXPRESS_USER\n-    pass       = process.env.EXPRESS_PASSWORD\n-    stat       = process.env.EXPRESS_STATIC\n-    port       = process.env.EXPRESS_PORT or process.env.PORT or 8080\n-    address    = process.env.EXPRESS_BIND_ADDRESS or process.env.BIND_ADDRESS or '0.0.0.0'\n-    limit      = process.env.EXPRESS_LIMIT or '100kb'\n-    paramLimit = parseInt(process.env.EXPRESS_PARAMETER_LIMIT) or 1000\n-\n-    express = require 'express'\n-    multipart = require 'connect-multiparty'\n-\n-    app = express()\n-\n-    app.use (req, res, next) =>\n-      res.setHeader \"X-Powered-By\", \"hubot/#{@name}\"\n-      next()\n-\n-    app.use express.basicAuth user, pass if user and pass\n-    app.use express.query()\n-\n-    app.use express.json()\n-    app.use express.urlencoded(limit: limit, parameterLimit: paramLimit)\n-    # replacement for deprecated express.multipart/connect.multipart\n-    # limit to 100mb, as per the old behavior\n-    app.use multipart(maxFilesSize: 100 * 1024 * 1024)\n-\n-    app.use express.static stat if stat\n-\n-    try\n-      @server = app.listen(port, address)\n-      @router = app\n-    catch err\n-      @logger.error \"Error trying to start HTTP server: #{err}\\n#{err.stack}\"\n-      process.exit(1)\n-\n-    herokuUrl = process.env.HEROKU_URL\n-\n-    if herokuUrl\n-      herokuUrl += '/' unless /\\/$/.test herokuUrl\n-      @pingIntervalId = setInterval =>\n-        HttpClient.create(\"#{herokuUrl}hubot/ping\").post() (err, res, body) =>\n-          @logger.info 'keep alive ping!'\n-      , 5 * 60 * 1000\n-\n-  # Setup an empty router object\n-  #\n-  # returns nothing\n-  setupNullRouter: ->\n-    msg = \"A script has tried registering a HTTP route while the HTTP server is disabled with --disabled-httpd.\"\n-    @router =\n-      get: ()=> @logger.warning msg\n-      post: ()=> @logger.warning msg\n-      put: ()=> @logger.warning msg\n-      delete: ()=> @logger.warning msg\n-\n-\n-  # Load the adapter Hubot is going to use.\n-  #\n-  # path    - A String of the path to adapter if local.\n-  # adapter - A String of the adapter name to use.\n-  #\n-  # Returns nothing.\n-  loadAdapter: (adapter) ->\n-    @logger.debug \"Loading adapter #{adapter}\"\n-\n-    try\n-      path = if adapter in HUBOT_DEFAULT_ADAPTERS\n-        \"#{@adapterPath}/#{adapter}\"\n-      else\n-        \"hubot-#{adapter}\"\n-\n-      @adapter = require(path).use @\n-    catch err\n-      @logger.error \"Cannot load adapter #{adapter} - #{err}\"\n-      process.exit(1)\n-\n-  # Public: Help Commands for Running Scripts.\n-  #\n-  # Returns an Array of help commands for running scripts.\n-  helpCommands: ->\n-    @commands.sort()\n-\n-  # Private: load help info from a loaded script.\n-  #\n-  # path - A String path to the file on disk.\n-  #\n-  # Returns nothing.\n-  parseHelp: (path) ->\n-    @logger.debug \"Parsing help for #{path}\"\n-    scriptName = Path.basename(path).replace /\\.(coffee|js)$/, ''\n-    scriptDocumentation = {}\n-\n-    body = Fs.readFileSync path, 'utf-8'\n-\n-    currentSection = null\n-    for line in body.split \"\\n\"\n-      break unless line[0] is '#' or line.substr(0, 2) is '//'\n-\n-      cleanedLine = line.replace(/^(#|\\/\\/)\\s?/, \"\").trim()\n-\n-      continue if cleanedLine.length is 0\n-      continue if cleanedLine.toLowerCase() is 'none'\n-\n-      nextSection = cleanedLine.toLowerCase().replace(':', '')\n-      if nextSection in HUBOT_DOCUMENTATION_SECTIONS\n-        currentSection = nextSection\n-        scriptDocumentation[currentSection] = []\n-      else\n-        if currentSection\n-          scriptDocumentation[currentSection].push cleanedLine.trim()\n-          if currentSection is 'commands'\n-            @commands.push cleanedLine.trim()\n-\n-    if currentSection is null\n-      @logger.info \"#{path} is using deprecated documentation syntax\"\n-      scriptDocumentation.commands = []\n-      for line in body.split(\"\\n\")\n-        break    if not (line[0] is '#' or line.substr(0, 2) is '//')\n-        continue if not line.match('-')\n-        cleanedLine = line[2..line.length].replace(/^hubot/i, @name).trim()\n-        scriptDocumentation.commands.push cleanedLine\n-        @commands.push cleanedLine\n-\n-  # Public: A helper send function which delegates to the adapter's send\n-  # function.\n-  #\n-  # envelope - A Object with message, room and user details.\n-  # strings  - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  send: (envelope, strings...) ->\n-    @adapter.send envelope, strings...\n-\n-  # Public: A helper reply function which delegates to the adapter's reply\n-  # function.\n-  #\n-  # envelope - A Object with message, room and user details.\n-  # strings  - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  reply: (envelope, strings...) ->\n-    @adapter.reply envelope, strings...\n-\n-  # Public: A helper send function to message a room that the robot is in.\n-  #\n-  # room    - String designating the room to message.\n-  # strings - One or more Strings for each message to send.\n-  #\n-  # Returns nothing.\n-  messageRoom: (room, strings...) ->\n-    envelope = { room: room }\n-    @adapter.send envelope, strings...\n-\n-  # Public: A wrapper around the EventEmitter API to make usage\n-  # semantically better.\n-  #\n-  # event    - The event name.\n-  # listener - A Function that is called with the event parameter\n-  #            when event happens.\n-  #\n-  # Returns nothing.\n-  on: (event, args...) ->\n-    @events.on event, args...\n-\n-  # Public: A wrapper around the EventEmitter API to make usage\n-  # semantically better.\n-  #\n-  # event   - The event name.\n-  # args...  - Arguments emitted by the event\n-  #\n-  # Returns nothing.\n-  emit: (event, args...) ->\n-    @events.emit event, args...\n-\n-  # Public: Kick off the event loop for the adapter\n-  #\n-  # Returns nothing.\n-  run: ->\n-    @emit \"running\"\n-    @adapter.run()\n-\n-  # Public: Gracefully shutdown the robot process\n-  #\n-  # Returns nothing.\n-  shutdown: ->\n-    clearInterval @pingIntervalId if @pingIntervalId?\n-    process.removeListener 'uncaughtException', @onUncaughtException\n-    @adapter.close()\n-    @server.close() if @server\n-    @brain.close()\n-\n-  # Public: The version of Hubot from npm\n-  #\n-  # Returns a String of the version number.\n-  parseVersion: ->\n-    pkg = require Path.join __dirname, '..', 'package.json'\n-    @version = pkg.version\n-\n-  # Public: Creates a scoped http client with chainable methods for\n-  # modifying the request. This doesn't actually make a request though.\n-  # Once your request is assembled, you can call `get()`/`post()`/etc to\n-  # send the request.\n-  #\n-  # url - String URL to access.\n-  # options - Optional options to pass on to the client\n-  #\n-  # Examples:\n-  #\n-  #     robot.http(\"http://example.com\")\n-  #       # set a single header\n-  #       .header('Authorization', 'bearer abcdef')\n-  #\n-  #       # set multiple headers\n-  #       .headers(Authorization: 'bearer abcdef', Accept: 'application/json')\n-  #\n-  #       # add URI query parameters\n-  #       .query(a: 1, b: 'foo & bar')\n-  #\n-  #       # make the actual request\n-  #       .get() (err, res, body) ->\n-  #         console.log body\n-  #\n-  #       # or, you can POST data\n-  #       .post(data) (err, res, body) ->\n-  #         console.log body\n-  #\n-  #    # Can also set options\n-  #    robot.http(\"https://example.com\", {rejectUnauthorized: false})\n-  #\n-  # Returns a ScopedClient instance.\n-  http: (url, options) ->\n-    HttpClient.create(url, @extend({}, @globalHttpOptions, options))\n-      .header('User-Agent', \"Hubot/#{@version}\")\n-\n-  # Private: Extend obj with objects passed as additional args.\n-  #\n-  # Returns the original object with updated changes.\n-  extend: (obj, sources...) ->\n-    for source in sources\n-      obj[key] = value for own key, value of source\n-    obj\n-\n-\n-module.exports = Robot", "changes": 656}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/src/robot.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/src/robot.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "src/robot.js", "sha": "db11721e421f19cdf659e1dbb969a0553e136637", "additions": 747, "patch": "@@ -0,0 +1,747 @@\n+'use strict'\n+\n+const EventEmitter = require('events').EventEmitter\n+const fs = require('fs')\n+const path = require('path')\n+\n+const async = require('async')\n+const Log = require('log')\n+const HttpClient = require('scoped-http-client')\n+\n+const Brain = require('./brain')\n+const Response = require('./response')\n+const Listener = require('./listener')\n+const Message = require('./message')\n+const Middleware = require('./middleware')\n+\n+const HUBOT_DEFAULT_ADAPTERS = ['campfire', 'shell']\n+const HUBOT_DOCUMENTATION_SECTIONS = ['description', 'dependencies', 'configuration', 'commands', 'notes', 'author', 'authors', 'examples', 'tags', 'urls']\n+\n+class Robot {\n+  // Robots receive messages from a chat source (Campfire, irc, etc), and\n+  // dispatch them to matching listeners.\n+  //\n+  // adapterPath -  A String of the path to built-in adapters (defaults to src/adapters)\n+  // adapter     - A String of the adapter name.\n+  // httpd       - A Boolean whether to enable the HTTP daemon.\n+  // name        - A String of the robot name, defaults to Hubot.\n+  constructor (adapterPath, adapter, httpd, name, alias) {\n+    if (name == null) {\n+      name = 'Hubot'\n+    }\n+    if (alias == null) {\n+      alias = false\n+    }\n+    this.adapterPath = path.join(__dirname, 'adapters')\n+\n+    this.name = name\n+    this.events = new EventEmitter()\n+    this.brain = new Brain(this)\n+    this.alias = alias\n+    this.adapter = null\n+    this.Response = Response\n+    this.commands = []\n+    this.listeners = []\n+    this.middleware = {\n+      listener: new Middleware(this),\n+      response: new Middleware(this),\n+      receive: new Middleware(this)\n+    }\n+    this.logger = new Log(process.env.HUBOT_LOG_LEVEL || 'info')\n+    this.pingIntervalId = null\n+    this.globalHttpOptions = {}\n+\n+    this.parseVersion()\n+    if (httpd) {\n+      this.setupExpress()\n+    } else {\n+      this.setupNullRouter()\n+    }\n+\n+    this.loadAdapter(adapter)\n+\n+    this.adapterName = adapter\n+    this.errorHandlers = []\n+\n+    this.on('error', (err, res) => {\n+      return this.invokeErrorHandlers(err, res)\n+    })\n+    this.onUncaughtException = err => {\n+      return this.emit('error', err)\n+    }\n+    process.on('uncaughtException', this.onUncaughtException)\n+  }\n+\n+  // Public: Adds a custom Listener with the provided matcher, options, and\n+  // callback\n+  //\n+  // matcher  - A Function that determines whether to call the callback.\n+  //            Expected to return a truthy value if the callback should be\n+  //            executed.\n+  // options  - An Object of additional parameters keyed on extension name\n+  //            (optional).\n+  // callback - A Function that is called with a Response object if the\n+  //            matcher function returns true.\n+  //\n+  // Returns nothing.\n+  listen (matcher, options, callback) {\n+    this.listeners.push(new Listener.Listener(this, matcher, options, callback))\n+  }\n+\n+  // Public: Adds a Listener that attempts to match incoming messages based on\n+  // a Regex.\n+  //\n+  // regex    - A Regex that determines if the callback should be called.\n+  // options  - An Object of additional parameters keyed on extension name\n+  //            (optional).\n+  // callback - A Function that is called with a Response object.\n+  //\n+  // Returns nothing.\n+  hear (regex, options, callback) {\n+    this.listeners.push(new Listener.TextListener(this, regex, options, callback))\n+  }\n+\n+  // Public: Adds a Listener that attempts to match incoming messages directed\n+  // at the robot based on a Regex. All regexes treat patterns like they begin\n+  // with a '^'\n+  //\n+  // regex    - A Regex that determines if the callback should be called.\n+  // options  - An Object of additional parameters keyed on extension name\n+  //            (optional).\n+  // callback - A Function that is called with a Response object.\n+  //\n+  // Returns nothing.\n+  respond (regex, options, callback) {\n+    this.hear(this.respondPattern(regex), options, callback)\n+  }\n+\n+  // Public: Build a regular expression that matches messages addressed\n+  // directly to the robot\n+  //\n+  // regex - A RegExp for the message part that follows the robot's name/alias\n+  //\n+  // Returns RegExp.\n+  respondPattern (regex) {\n+    const regexWithoutModifiers = regex.toString().split('/')\n+    regexWithoutModifiers.shift()\n+    const modifiers = regexWithoutModifiers.pop()\n+    const regexStartsWithAnchor = regexWithoutModifiers[0] && regexWithoutModifiers[0][0] === '^'\n+    const pattern = regexWithoutModifiers.join('/')\n+    const name = this.name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+\n+    if (regexStartsWithAnchor) {\n+      this.logger.warning(`Anchors don\u2019t work well with respond, perhaps you want to use 'hear'`)\n+      this.logger.warning(`The regex in question was ${regex.toString()}`)\n+    }\n+\n+    if (!this.alias) {\n+      return new RegExp('^\\\\s*[@]?' + name + '[:,]?\\\\s*(?:' + pattern + ')', modifiers)\n+    }\n+\n+    const alias = this.alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n+\n+    // matches properly when alias is substring of name\n+    if (name.length > alias.length) {\n+      return new RegExp('^\\\\s*[@]?(?:' + name + '[:,]?|' + alias + '[:,]?)\\\\s*(?:' + pattern + ')', modifiers)\n+    }\n+\n+    // matches properly when name is substring of alias\n+    return new RegExp('^\\\\s*[@]?(?:' + alias + '[:,]?|' + name + '[:,]?)\\\\s*(?:' + pattern + ')', modifiers)\n+  }\n+\n+  // Public: Adds a Listener that triggers when anyone enters the room.\n+  //\n+  // options  - An Object of additional parameters keyed on extension name\n+  //            (optional).\n+  // callback - A Function that is called with a Response object.\n+  //\n+  // Returns nothing.\n+  enter (options, callback) {\n+    this.listen(msg => msg instanceof Message.EnterMessage, options, callback)\n+  }\n+\n+  // Public: Adds a Listener that triggers when anyone leaves the room.\n+  //\n+  // options  - An Object of additional parameters keyed on extension name\n+  //            (optional).\n+  // callback - A Function that is called with a Response object.\n+  //\n+  // Returns nothing.\n+  leave (options, callback) {\n+    this.listen(msg => msg instanceof Message.LeaveMessage, options, callback)\n+  }\n+\n+  // Public: Adds a Listener that triggers when anyone changes the topic.\n+  //\n+  // options  - An Object of additional parameters keyed on extension name\n+  //            (optional).\n+  // callback - A Function that is called with a Response object.\n+  //\n+  // Returns nothing.\n+  topic (options, callback) {\n+    this.listen(msg => msg instanceof Message.TopicMessage, options, callback)\n+  }\n+\n+  // Public: Adds an error handler when an uncaught exception or user emitted\n+  // error event occurs.\n+  //\n+  // callback - A Function that is called with the error object.\n+  //\n+  // Returns nothing.\n+  error (callback) {\n+    this.errorHandlers.push(callback)\n+  }\n+\n+  // Calls and passes any registered error handlers for unhandled exceptions or\n+  // user emitted error events.\n+  //\n+  // err - An Error object.\n+  // res - An optional Response object that generated the error\n+  //\n+  // Returns nothing.\n+  invokeErrorHandlers (error, res) {\n+    this.logger.error(error.stack)\n+\n+    this.errorHandlers.map((errorHandler) => {\n+      try {\n+        errorHandler(error, res)\n+      } catch (errorHandlerError) {\n+        this.logger.error(`while invoking error handler: ${errorHandlerError}\\n${errorHandlerError.stack}`)\n+      }\n+    })\n+  }\n+\n+  // Public: Adds a Listener that triggers when no other text matchers match.\n+  //\n+  // options  - An Object of additional parameters keyed on extension name\n+  //            (optional).\n+  // callback - A Function that is called with a Response object.\n+  //\n+  // Returns nothing.\n+  catchAll (options, callback) {\n+    // `options` is optional; need to isolate the real callback before\n+    // wrapping it with logic below\n+    if (callback == null) {\n+      callback = options\n+      options = {}\n+    }\n+\n+    this.listen(isCatchAllMessage, options, function listenCallback (msg) {\n+      msg.message = msg.message.message\n+      callback(msg)\n+    })\n+  }\n+\n+  // Public: Registers new middleware for execution after matching but before\n+  // Listener callbacks\n+  //\n+  // middleware - A function that determines whether or not a given matching\n+  //              Listener should be executed. The function is called with\n+  //              (context, next, done). If execution should\n+  //              continue (next middleware, Listener callback), the middleware\n+  //              should call the 'next' function with 'done' as an argument.\n+  //              If not, the middleware should call the 'done' function with\n+  //              no arguments.\n+  //\n+  // Returns nothing.\n+  listenerMiddleware (middleware) {\n+    this.middleware.listener.register(middleware)\n+  }\n+\n+  // Public: Registers new middleware for execution as a response to any\n+  // message is being sent.\n+  //\n+  // middleware - A function that examines an outgoing message and can modify\n+  //              it or prevent its sending. The function is called with\n+  //              (context, next, done). If execution should continue,\n+  //              the middleware should call next(done). If execution should\n+  //              stop, the middleware should call done(). To modify the\n+  //              outgoing message, set context.string to a new message.\n+  //\n+  // Returns nothing.\n+  responseMiddleware (middleware) {\n+    this.middleware.response.register(middleware)\n+  }\n+\n+  // Public: Registers new middleware for execution before matching\n+  //\n+  // middleware - A function that determines whether or not listeners should be\n+  //              checked. The function is called with (context, next, done). If\n+  //              ext, next, done). If execution should continue to the next\n+  //              middleware or matching phase, it should call the 'next'\n+  //              function with 'done' as an argument. If not, the middleware\n+  //              should call the 'done' function with no arguments.\n+  //\n+  // Returns nothing.\n+  receiveMiddleware (middleware) {\n+    this.middleware.receive.register(middleware)\n+  }\n+\n+  // Public: Passes the given message to any interested Listeners after running\n+  //         receive middleware.\n+  //\n+  // message - A Message instance. Listeners can flag this message as 'done' to\n+  //           prevent further execution.\n+  //\n+  // cb - Optional callback that is called when message processing is complete\n+  //\n+  // Returns nothing.\n+  // Returns before executing callback\n+  receive (message, cb) {\n+    // When everything is finished (down the middleware stack and back up),\n+    // pass control back to the robot\n+    this.middleware.receive.execute({ response: new Response(this, message) }, this.processListeners.bind(this), cb)\n+  }\n+\n+  // Private: Passes the given message to any interested Listeners.\n+  //\n+  // message - A Message instance. Listeners can flag this message as 'done' to\n+  //           prevent further execution.\n+  //\n+  // done - Optional callback that is called when message processing is complete\n+  //\n+  // Returns nothing.\n+  // Returns before executing callback\n+  processListeners (context, done) {\n+    // Try executing all registered Listeners in order of registration\n+    // and return after message is done being processed\n+    let anyListenersExecuted = false\n+\n+    async.detectSeries(this.listeners, (listener, done) => {\n+      try {\n+        listener.call(context.response.message, this.middleware.listener, function (listenerExecuted) {\n+          anyListenersExecuted = anyListenersExecuted || listenerExecuted\n+          // Defer to the event loop at least after every listener so the\n+          // stack doesn't get too big\n+          process.nextTick(() =>\n+            // Stop processing when message.done == true\n+            done(context.response.message.done)\n+          )\n+        })\n+      } catch (err) {\n+        this.emit('error', err, new this.Response(this, context.response.message, []))\n+        // Continue to next listener when there is an error\n+        done(false)\n+      }\n+    },\n+    // Ignore the result ( == the listener that set message.done = true)\n+    _ => {\n+      // If no registered Listener matched the message\n+\n+      if (!(context.response.message instanceof Message.CatchAllMessage) && !anyListenersExecuted) {\n+        this.logger.debug('No listeners executed; falling back to catch-all')\n+        this.receive(new Message.CatchAllMessage(context.response.message), done)\n+      } else {\n+        if (done != null) {\n+          process.nextTick(done)\n+        }\n+      }\n+    })\n+  }\n+\n+  // Public: Loads a file in path.\n+  //\n+  // filepath - A String path on the filesystem.\n+  // filename - A String filename in path on the filesystem.\n+  //\n+  // Returns nothing.\n+  loadFile (filepath, filename) {\n+    const ext = path.extname(filename)\n+    const full = path.join(filepath, path.basename(filename, ext))\n+\n+    try {\n+      const script = require(full)\n+\n+      if (typeof script === 'function') {\n+        script(this)\n+        this.parseHelp(path.join(filepath, filename))\n+      } else {\n+        this.logger.warning(`Expected ${full} to assign a function to module.exports, got ${typeof script}`)\n+      }\n+    } catch (error) {\n+      this.logger.error(`Unable to load ${full}: ${error.stack}`)\n+      process.exit(1)\n+    }\n+  }\n+\n+  // Public: Loads every script in the given path.\n+  //\n+  // path - A String path on the filesystem.\n+  //\n+  // Returns nothing.\n+  load (path) {\n+    this.logger.debug(`Loading scripts from ${path}`)\n+\n+    if (fs.existsSync(path)) {\n+      fs.readdirSync(path).sort().map(file => this.loadFile(path, file))\n+    }\n+  }\n+\n+  // Public: Load scripts specified in the `hubot-scripts.json` file.\n+  //\n+  // path    - A String path to the hubot-scripts files.\n+  // scripts - An Array of scripts to load.\n+  //\n+  // Returns nothing.\n+  loadHubotScripts (path, scripts) {\n+    this.logger.debug(`Loading hubot-scripts from ${path}`)\n+    Array.from(scripts).map(script => this.loadFile(path, script))\n+  }\n+\n+  // Public: Load scripts from packages specified in the\n+  // `external-scripts.json` file.\n+  //\n+  // packages - An Array of packages containing hubot scripts to load.\n+  //\n+  // Returns nothing.\n+  loadExternalScripts (packages) {\n+    this.logger.debug('Loading external-scripts from npm packages')\n+\n+    try {\n+      if (Array.isArray(packages)) {\n+        return packages.forEach(pkg => require(pkg)(this))\n+      }\n+\n+      Object.keys(packages).forEach(key => require(key)(this, packages[key]))\n+    } catch (error) {\n+      this.logger.error(`Error loading scripts from npm package - ${error.stack}`)\n+      process.exit(1)\n+    }\n+  }\n+\n+  // Setup the Express server's defaults.\n+  //\n+  // Returns nothing.\n+  setupExpress () {\n+    const user = process.env.EXPRESS_USER\n+    const pass = process.env.EXPRESS_PASSWORD\n+    const stat = process.env.EXPRESS_STATIC\n+    const port = process.env.EXPRESS_PORT || process.env.PORT || 8080\n+    const address = process.env.EXPRESS_BIND_ADDRESS || process.env.BIND_ADDRESS || '0.0.0.0'\n+    const limit = process.env.EXPRESS_LIMIT || '100kb'\n+    const paramLimit = parseInt(process.env.EXPRESS_PARAMETER_LIMIT) || 1000\n+\n+    const express = require('express')\n+    const multipart = require('connect-multiparty')\n+\n+    const app = express()\n+\n+    app.use((req, res, next) => {\n+      res.setHeader('X-Powered-By', `hubot/${this.name}`)\n+      return next()\n+    })\n+\n+    if (user && pass) {\n+      app.use(express.basicAuth(user, pass))\n+    }\n+    app.use(express.query())\n+\n+    app.use(express.json())\n+    app.use(express.urlencoded({ limit, parameterLimit: paramLimit }))\n+    // replacement for deprecated express.multipart/connect.multipart\n+    // limit to 100mb, as per the old behavior\n+    app.use(multipart({ maxFilesSize: 100 * 1024 * 1024 }))\n+\n+    if (stat) {\n+      app.use(express.static(stat))\n+    }\n+\n+    try {\n+      this.server = app.listen(port, address)\n+      this.router = app\n+    } catch (error) {\n+      const err = error\n+      this.logger.error(`Error trying to start HTTP server: ${err}\\n${err.stack}`)\n+      process.exit(1)\n+    }\n+\n+    let herokuUrl = process.env.HEROKU_URL\n+\n+    if (herokuUrl) {\n+      if (!/\\/$/.test(herokuUrl)) {\n+        herokuUrl += '/'\n+      }\n+      this.pingIntervalId = setInterval(() => {\n+        HttpClient.create(`${herokuUrl}hubot/ping`).post()((_err, res, body) => {\n+          this.logger.info('keep alive ping!')\n+        })\n+      }, 5 * 60 * 1000)\n+    }\n+  }\n+\n+  // Setup an empty router object\n+  //\n+  // returns nothing\n+  setupNullRouter () {\n+    const msg = 'A script has tried registering a HTTP route while the HTTP server is disabled with --disabled-httpd.'\n+\n+    this.router = {\n+      get: () => this.logger.warning(msg),\n+      post: () => this.logger.warning(msg),\n+      put: () => this.logger.warning(msg),\n+      delete: () => this.logger.warning(msg)\n+    }\n+  }\n+\n+  // Load the adapter Hubot is going to use.\n+  //\n+  // path    - A String of the path to adapter if local.\n+  // adapter - A String of the adapter name to use.\n+  //\n+  // Returns nothing.\n+  loadAdapter (adapter) {\n+    this.logger.debug(`Loading adapter ${adapter}`)\n+\n+    try {\n+      const path = Array.from(HUBOT_DEFAULT_ADAPTERS).indexOf(adapter) !== -1 ? `${this.adapterPath}/${adapter}` : `hubot-${adapter}`\n+\n+      this.adapter = require(path).use(this)\n+    } catch (err) {\n+      this.logger.error(`Cannot load adapter ${adapter} - ${err}`)\n+      process.exit(1)\n+    }\n+  }\n+\n+  // Public: Help Commands for Running Scripts.\n+  //\n+  // Returns an Array of help commands for running scripts.\n+  helpCommands () {\n+    return this.commands.sort()\n+  }\n+\n+  // Private: load help info from a loaded script.\n+  //\n+  // path - A String path to the file on disk.\n+  //\n+  // Returns nothing.\n+  parseHelp (path) {\n+    const scriptDocumentation = {}\n+    const body = fs.readFileSync(path, 'utf-8')\n+    const lines = body.split('\\n')\n+      .reduce(toHeaderCommentBlock, {lines: [], isHeader: true}).lines\n+      .filter(Boolean) // remove empty lines\n+    let currentSection = null\n+    let nextSection\n+\n+    this.logger.debug(`Parsing help for ${path}`)\n+\n+    for (let i = 0, line; i < lines.length; i++) {\n+      line = lines[i]\n+\n+      if (line.toLowerCase() === 'none') {\n+        continue\n+      }\n+\n+      nextSection = line.toLowerCase().replace(':', '')\n+      if (Array.from(HUBOT_DOCUMENTATION_SECTIONS).indexOf(nextSection) !== -1) {\n+        currentSection = nextSection\n+        scriptDocumentation[currentSection] = []\n+      } else {\n+        if (currentSection) {\n+          scriptDocumentation[currentSection].push(line)\n+          if (currentSection === 'commands') {\n+            this.commands.push(line)\n+          }\n+        }\n+      }\n+    }\n+\n+    if (currentSection === null) {\n+      this.logger.info(`${path} is using deprecated documentation syntax`)\n+      scriptDocumentation.commands = []\n+      for (let i = 0, line, cleanedLine; i < lines.length; i++) {\n+        line = lines[i]\n+        if (line.match('-')) {\n+          continue\n+        }\n+\n+        cleanedLine = line.slice(2, +line.length + 1 || 9e9).replace(/^hubot/i, this.name).trim()\n+        scriptDocumentation.commands.push(cleanedLine)\n+        this.commands.push(cleanedLine)\n+      }\n+    }\n+  }\n+\n+  // Public: A helper send function which delegates to the adapter's send\n+  // function.\n+  //\n+  // envelope - A Object with message, room and user details.\n+  // strings  - One or more Strings for each message to send.\n+  //\n+  // Returns nothing.\n+  send (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+\n+    this.adapter.send.apply(this, [envelope].concat(strings))\n+  }\n+\n+  // Public: A helper reply function which delegates to the adapter's reply\n+  // function.\n+  //\n+  // envelope - A Object with message, room and user details.\n+  // strings  - One or more Strings for each message to send.\n+  //\n+  // Returns nothing.\n+  reply (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+\n+    this.adapter.reply.apply(this, [envelope].concat(strings))\n+  }\n+\n+  // Public: A helper send function to message a room that the robot is in.\n+  //\n+  // room    - String designating the room to message.\n+  // strings - One or more Strings for each message to send.\n+  //\n+  // Returns nothing.\n+  messageRoom (room/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+    const envelope = { room }\n+\n+    this.adapter.send.apply(this, [envelope].concat(strings))\n+  }\n+\n+  // Public: A wrapper around the EventEmitter API to make usage\n+  // semantically better.\n+  //\n+  // event    - The event name.\n+  // listener - A Function that is called with the event parameter\n+  //            when event happens.\n+  //\n+  // Returns nothing.\n+  on (event/* , ...args */) {\n+    const args = [].slice.call(arguments, 1)\n+\n+    this.events.on.apply(this, [event].concat(args))\n+  }\n+\n+  // Public: A wrapper around the EventEmitter API to make usage\n+  // semantically better.\n+  //\n+  // event   - The event name.\n+  // args...  - Arguments emitted by the event\n+  //\n+  // Returns nothing.\n+  emit (event/* , ...args */) {\n+    const args = [].slice.call(arguments, 1)\n+\n+    this.events.emit.apply(this, [event].concat(args))\n+  }\n+\n+  // Public: Kick off the event loop for the adapter\n+  //\n+  // Returns nothing.\n+  run () {\n+    this.emit('running')\n+\n+    this.adapter.run()\n+  }\n+\n+  // Public: Gracefully shutdown the robot process\n+  //\n+  // Returns nothing.\n+  shutdown () {\n+    if (this.pingIntervalId != null) {\n+      clearInterval(this.pingIntervalId)\n+    }\n+    process.removeListener('uncaughtException', this.onUncaughtException)\n+    this.adapter.close()\n+    if (this.server) {\n+      this.server.close()\n+    }\n+\n+    this.brain.close()\n+  }\n+\n+  // Public: The version of Hubot from npm\n+  //\n+  // Returns a String of the version number.\n+  parseVersion () {\n+    const pkg = require(path.join(__dirname, '..', 'package.json'))\n+    this.version = pkg.version\n+\n+    return this.version\n+  }\n+\n+  // Public: Creates a scoped http client with chainable methods for\n+  // modifying the request. This doesn't actually make a request though.\n+  // Once your request is assembled, you can call `get()`/`post()`/etc to\n+  // send the request.\n+  //\n+  // url - String URL to access.\n+  // options - Optional options to pass on to the client\n+  //\n+  // Examples:\n+  //\n+  //     robot.http(\"http://example.com\")\n+  //       # set a single header\n+  //       .header('Authorization', 'bearer abcdef')\n+  //\n+  //       # set multiple headers\n+  //       .headers(Authorization: 'bearer abcdef', Accept: 'application/json')\n+  //\n+  //       # add URI query parameters\n+  //       .query(a: 1, b: 'foo & bar')\n+  //\n+  //       # make the actual request\n+  //       .get() (err, res, body) ->\n+  //         console.log body\n+  //\n+  //       # or, you can POST data\n+  //       .post(data) (err, res, body) ->\n+  //         console.log body\n+  //\n+  //    # Can also set options\n+  //    robot.http(\"https://example.com\", {rejectUnauthorized: false})\n+  //\n+  // Returns a ScopedClient instance.\n+  http (url, options) {\n+    const httpOptions = extend({}, this.globalHttpOptions, options)\n+\n+    return HttpClient.create(url, httpOptions).header('User-Agent', `Hubot/${this.version}`)\n+  }\n+}\n+\n+module.exports = Robot\n+\n+function isCatchAllMessage (message) {\n+  return message instanceof Message.CatchAllMessage\n+}\n+\n+function toHeaderCommentBlock (block, currentLine) {\n+  if (!block.isHeader) {\n+    return block\n+  }\n+\n+  if (isCommentLine(currentLine)) {\n+    block.lines.push(removeCommentPrefix(currentLine))\n+  } else {\n+    block.isHeader = false\n+  }\n+\n+  return block\n+}\n+\n+function isCommentLine (line) {\n+  return /^(#|\\/\\/)/.test(line)\n+}\n+\n+function removeCommentPrefix (line) {\n+  return line.replace(/^[#/]+\\s*/, '')\n+}\n+\n+function extend (obj/* , ...sources */) {\n+  const sources = [].slice.call(arguments, 1)\n+\n+  sources.forEach((source) => {\n+    if (typeof source !== 'object') {\n+      return\n+    }\n+\n+    Object.keys(source).forEach((key) => {\n+      obj[key] = source[key]\n+    })\n+  })\n+\n+  return obj\n+}", "changes": 747}, {"status": "removed", "deletions": 11, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/user.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/src/user.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/user.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "src/user.coffee", "sha": "a490a03f86b73b2a7cf3763cdeb07a02999d0337", "additions": 0, "patch": "@@ -1,11 +0,0 @@\n-class User\n-  # Represents a participating user in the chat.\n-  #\n-  # id      - A unique ID for the user.\n-  # options - An optional Hash of key, value pairs for this user.\n-  constructor: (@id, options = {}) ->\n-    for k of (options or {})\n-      @[k] = options[k]\n-    @['name'] ||= @id.toString()\n-\n-module.exports = User", "changes": 11}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/src/user.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/src/user.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/user.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "src/user.js", "sha": "d071f2dd7209e9b86e9d5aff57887cbbca0c437b", "additions": 25, "patch": "@@ -0,0 +1,25 @@\n+'use strict'\n+\n+class User {\n+  // Represents a participating user in the chat.\n+  //\n+  // id      - A unique ID for the user.\n+  // options - An optional Hash of key, value pairs for this user.\n+  constructor (id, options) {\n+    this.id = id\n+\n+    if (options == null) {\n+      options = {}\n+    }\n+\n+    Object.keys(options).forEach((key) => {\n+      this[key] = options[key]\n+    })\n+\n+    if (!this.name) {\n+      this.name = this.id.toString()\n+    }\n+  }\n+}\n+\n+module.exports = User", "changes": 25}, {"status": "removed", "deletions": 74, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/adapter_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/adapter_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/adapter_test.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "test/adapter_test.coffee", "sha": "30932bd2c22f275fdaf775df84ab90abfea6ea69", "additions": 0, "patch": "@@ -1,74 +0,0 @@\n-chai = require 'chai'\n-sinon = require 'sinon'\n-chai.use require 'sinon-chai'\n-\n-expect = chai.expect\n-\n-Adapter = require '../src/adapter'\n-\n-describe 'Adapter', ->\n-  beforeEach ->\n-    @robot =\n-      receive: sinon.spy()\n-\n-  # this one is hard, as it requires files\n-  it \"can load adapter by name\"\n-\n-  describe 'Public API', ->\n-    beforeEach ->\n-      @adapter = new Adapter(@robot)\n-\n-    it 'assigns robot', ->\n-      expect(@adapter.robot).to.equal(@robot)\n-\n-    describe 'send', ->\n-      it 'is a function', ->\n-        expect(@adapter.send).to.be.a('function')\n-\n-      it 'does nothing', ->\n-        @adapter.send({}, 'nothing')\n-\n-    describe 'reply', ->\n-      it 'is a function', ->\n-        expect(@adapter.reply).to.be.a('function')\n-\n-      it 'does nothing', ->\n-        @adapter.reply({}, 'nothing')\n-\n-    describe 'topic', ->\n-      it 'is a function', ->\n-        expect(@adapter.topic).to.be.a('function')\n-\n-      it 'does nothing', ->\n-        @adapter.topic({}, 'nothing')\n-\n-    describe 'play', ->\n-      it 'is a function', ->\n-        expect(@adapter.play).to.be.a('function')\n-\n-      it 'does nothing', ->\n-        @adapter.play({}, 'nothing')\n-\n-    describe 'run', ->\n-      it 'is a function', ->\n-        expect(@adapter.run).to.be.a('function')\n-\n-      it 'does nothing', ->\n-        @adapter.run()\n-\n-    describe 'close', ->\n-      it 'is a function', ->\n-        expect(@adapter.close).to.be.a('function')\n-\n-      it 'does nothing', ->\n-        @adapter.close()\n-\n-\n-  it 'dispatches received messages to the robot', ->\n-    @robot.receive = sinon.spy()\n-    @adapter = new Adapter(@robot)\n-    @message = sinon.spy()\n-\n-    @adapter.receive(@message)\n-\n-    expect(@robot.receive).to.have.been.calledWith(@message)", "changes": 74}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/test/adapter_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/test/adapter_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/adapter_test.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "test/adapter_test.js", "sha": "68037ad3074277e8fecd33f8792a04a1a88ef9d8", "additions": 100, "patch": "@@ -0,0 +1,100 @@\n+'use strict'\n+\n+/* global describe, beforeEach, it */\n+\n+const chai = require('chai')\n+const sinon = require('sinon')\n+chai.use(require('sinon-chai'))\n+\n+const expect = chai.expect\n+\n+const Adapter = require('../src/adapter')\n+\n+describe('Adapter', function () {\n+  beforeEach(function () {\n+    this.robot = {receive: sinon.spy()}\n+  })\n+\n+  // this one is hard, as it requires files\n+  it('can load adapter by name')\n+\n+  describe('Public API', function () {\n+    beforeEach(function () {\n+      this.adapter = new Adapter(this.robot)\n+    })\n+\n+    it('assigns robot', function () {\n+      expect(this.adapter.robot).to.equal(this.robot)\n+    })\n+\n+    describe('send', function () {\n+      it('is a function', function () {\n+        expect(this.adapter.send).to.be.a('function')\n+      })\n+\n+      it('does nothing', function () {\n+        this.adapter.send({}, 'nothing')\n+      })\n+    })\n+\n+    describe('reply', function () {\n+      it('is a function', function () {\n+        expect(this.adapter.reply).to.be.a('function')\n+      })\n+\n+      it('does nothing', function () {\n+        this.adapter.reply({}, 'nothing')\n+      })\n+    })\n+\n+    describe('topic', function () {\n+      it('is a function', function () {\n+        expect(this.adapter.topic).to.be.a('function')\n+      })\n+\n+      it('does nothing', function () {\n+        this.adapter.topic({}, 'nothing')\n+      })\n+    })\n+\n+    describe('play', function () {\n+      it('is a function', function () {\n+        expect(this.adapter.play).to.be.a('function')\n+      })\n+\n+      it('does nothing', function () {\n+        this.adapter.play({}, 'nothing')\n+      })\n+    })\n+\n+    describe('run', function () {\n+      it('is a function', function () {\n+        expect(this.adapter.run).to.be.a('function')\n+      })\n+\n+      it('does nothing', function () {\n+        this.adapter.run()\n+      })\n+    })\n+\n+    describe('close', function () {\n+      it('is a function', function () {\n+        expect(this.adapter.close).to.be.a('function')\n+      })\n+\n+      it('does nothing', function () {\n+        this.adapter.close()\n+      })\n+    })\n+  })\n+\n+  it('dispatches received messages to the robot', function () {\n+    this.robot.receive = sinon.spy()\n+    this.adapter = new Adapter(this.robot)\n+    this.message = sinon.spy()\n+\n+    this.adapter.receive(this.message)\n+\n+    expect(this.robot.receive).to.have.been.calledWith(this.message)\n+  })\n+})", "changes": 100}, {"status": "removed", "deletions": 253, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "test/brain_test.coffee", "sha": "e02e5f97fd1f4d89375c7c62bc9efcf6d4cc6f6b", "additions": 0, "patch": "@@ -1,253 +0,0 @@\n-# Assertions and Stubbing\n-chai = require 'chai'\n-sinon = require 'sinon'\n-chai.use require 'sinon-chai'\n-\n-{ expect } = chai\n-\n-# Hubot classes\n-Brain = require '../src/brain'\n-User = require '../src/user'\n-\n-describe 'Brain', ->\n-  beforeEach ->\n-    @clock = sinon.useFakeTimers()\n-    @mockRobot =\n-      emit: ->\n-      on: ->\n-\n-    # This *should* be callsArgAsync to match the 'on' API, but that makes\n-    # the tests more complicated and seems irrelevant.\n-    sinon.stub(@mockRobot, 'on').withArgs('running').callsArg(1)\n-\n-    @brain = new Brain @mockRobot\n-\n-    @user1 = @brain.userForId '1', name: 'Guy One'\n-    @user2 = @brain.userForId '2', name: 'Guy One Two'\n-    @user3 = @brain.userForId '3', name: 'Girl Three'\n-\n-  afterEach ->\n-    @clock.restore()\n-\n-  describe 'Unit Tests', ->\n-    describe '#mergeData', ->\n-      it 'performs a proper merge with the new data taking precedent', ->\n-        @brain.data =\n-          1: 'old'\n-          2: 'old'\n-\n-        @brain.mergeData\n-          2: 'new'\n-\n-        expect(@brain.data).to.deep.equal\n-          1: 'old'\n-          2: 'new'\n-\n-       it 'emits a loaded event with the new data', ->\n-         sinon.spy @brain, 'emit'\n-         @brain.mergeData {}\n-         expect(@brain.emit).to.have.been.calledWith('loaded', @brain.data)\n-\n-    describe '#save', ->\n-      it 'emits a save event', ->\n-        sinon.spy @brain, 'emit'\n-        @brain.save()\n-        expect(@brain.emit).to.have.been.calledWith('save', @brain.data)\n-\n-    describe '#resetSaveInterval', ->\n-      it 'updates the auto-save interval', ->\n-        sinon.spy @brain, 'save'\n-        # default is 5s\n-        @brain.resetSaveInterval 10\n-        # make sure autosave is on\n-        @brain.setAutoSave true\n-\n-        @clock.tick(5000)\n-        # old interval has passed\n-        expect(@brain.save).to.not.have.been.called\n-        @clock.tick(5000)\n-        # new interval has passed\n-        expect(@brain.save).to.have.been.calledOnce\n-\n-    describe '#close', ->\n-      it 'saves', ->\n-        sinon.spy @brain, 'save'\n-        @brain.close()\n-        expect(@brain.save).to.have.been.calledOnce\n-\n-      it 'emits a close event', ->\n-        sinon.spy @brain, 'emit'\n-        @brain.close()\n-        expect(@brain.emit).to.have.been.calledWith('close')\n-\n-      it 'saves before emitting the close event', ->\n-        sinon.spy(@brain, 'save')\n-        sinon.spy(@brain, 'emit').withArgs('close')\n-        @brain.close()\n-        expect(@brain.save).to.have.been.calledBefore(@brain.emit)\n-\n-      it 'stops auto-saving', ->\n-        # make sure autosave is on\n-        @brain.setAutoSave true\n-        @brain.close()\n-\n-        # set up the spy after because 'close' calls 'save'\n-        sinon.spy @brain, 'save'\n-\n-        @clock.tick(2*5000)\n-        expect(@brain.save).to.not.have.been.called\n-\n-    describe '#get', ->\n-      it 'returns the saved value', ->\n-        @brain.data._private['test-key'] = 'value'\n-        expect(@brain.get('test-key')).to.equal('value')\n-\n-      it 'returns null if object is not found', ->\n-        expect(@brain.get('not a real key')).to.be.null\n-\n-    describe '#set', ->\n-      it 'saves the value', ->\n-        @brain.set('test-key', 'value')\n-        expect(@brain.data._private['test-key']).to.equal('value')\n-\n-      it 'sets multiple keys at once if an object is provided', ->\n-        @brain.data._private =\n-          key1: 'val1'\n-          key2: 'val1'\n-\n-        @brain.set\n-          key2: 'val2'\n-          key3: 'val2'\n-\n-        expect(@brain.data._private).to.deep.equal\n-          key1: 'val1'\n-          key2: 'val2'\n-          key3: 'val2'\n-\n-      # Unable to understand why this behavior is needed, but adding a test\n-      # case to protect it\n-      it 'emits loaded', ->\n-        sinon.spy @brain, 'emit'\n-        @brain.set('test-key', 'value')\n-        expect(@brain.emit).to.have.been.calledWith('loaded', @brain.data)\n-\n-      it 'returns the brain', ->\n-        expect(@brain.set('test-key', 'value')).to.equal(@brain)\n-\n-    describe '#remove', ->\n-      it 'removes the specified key', ->\n-        @brain.data._private['test-key'] = 'value'\n-        @brain.remove 'test-key'\n-        expect(@brain.data._private).to.not.include.keys('test-key')\n-\n-    describe '#userForId', ->\n-      it 'returns the user object', ->\n-        expect(@brain.userForId(1)).to.equal(@user1)\n-\n-      it 'does an exact match', ->\n-        user4 = @brain.userForId('FOUR')\n-        expect(@brain.userForId('four')).to.not.equal(user4)\n-\n-      # Cannot understand why this behavior is needed, but adding a test case\n-      # to protect it\n-      it 'recreates the user if the room option differs from the user object', ->\n-        expect(@brain.userForId(1).room).to.be.undefined\n-\n-        # undefined -> having a room\n-        newUser1 = @brain.userForId(1, room: 'room1')\n-        expect(newUser1).to.not.equal(@user1)\n-\n-        # changing the room\n-        newUser2 = @brain.userForId(1, room: 'room2')\n-        expect(newUser2).to.not.equal(newUser1)\n-\n-      describe 'when there is no matching user ID', ->\n-        it 'creates a new User', ->\n-          expect(@brain.data.users).to.not.include.key('all-new-user')\n-          newUser = @brain.userForId('all-new-user')\n-          expect(newUser).to.be.instanceof(User)\n-          expect(newUser.id).to.equal('all-new-user')\n-          expect(@brain.data.users).to.include.key('all-new-user')\n-\n-        it 'passes the provided options to the new User', ->\n-          newUser = @brain.userForId('all-new-user', name: 'All New User', prop: 'mine')\n-          expect(newUser.name).to.equal('All New User')\n-          expect(newUser.prop).to.equal('mine')\n-\n-    describe '#userForName', ->\n-      it 'returns the user with a matching name', ->\n-        expect(@brain.userForName('Guy One')).to.equal(@user1)\n-\n-      it 'does a case-insensitive match', ->\n-        expect(@brain.userForName('guy one')).to.equal(@user1)\n-\n-      it 'returns null if no user matches', ->\n-        expect(@brain.userForName('not a real user')).to.be.null\n-\n-    describe '#usersForRawFuzzyName', ->\n-      it 'does a case-insensitive match', ->\n-        expect(@brain.usersForRawFuzzyName('guy')).to.have.members([@user1,@user2])\n-\n-      it 'returns all matching users (prefix match) when there is not an exact match (case-insensitive)', ->\n-        expect(@brain.usersForRawFuzzyName('Guy')).to.have.members([@user1,@user2])\n-\n-      it 'returns all matching users (prefix match) when there is an exact match (case-insensitive)', ->\n-        # Matched case\n-        expect(@brain.usersForRawFuzzyName('Guy One')).to.deep.equal([@user1,@user2])\n-        # Mismatched case\n-        expect(@brain.usersForRawFuzzyName('guy one')).to.deep.equal([@user1,@user2])\n-\n-      it 'returns an empty array if no users match', ->\n-        result = @brain.usersForRawFuzzyName('not a real user')\n-        expect(result).to.be.an('array')\n-        expect(result).to.be.empty\n-\n-    describe '#usersForFuzzyName', ->\n-      it 'does a case-insensitive match', ->\n-        expect(@brain.usersForFuzzyName('guy')).to.have.members([@user1,@user2])\n-\n-      it 'returns all matching users (prefix match) when there is not an exact match', ->\n-        expect(@brain.usersForFuzzyName('Guy')).to.have.members([@user1,@user2])\n-\n-      it 'returns just the user when there is an exact match (case-insensitive)', ->\n-        # Matched case\n-        expect(@brain.usersForFuzzyName('Guy One')).to.deep.equal([@user1])\n-        # Mismatched case\n-        expect(@brain.usersForFuzzyName('guy one')).to.deep.equal([@user1])\n-\n-      it 'returns an empty array if no users match', ->\n-        result = @brain.usersForFuzzyName('not a real user')\n-        expect(result).to.be.an('array')\n-        expect(result).to.be.empty\n-\n-  describe 'Auto-Save', ->\n-    it 'is on by default', ->\n-      expect(@brain.autoSave).to.equal(true)\n-\n-    it 'automatically saves every 5 seconds when turned on', ->\n-      sinon.spy @brain, 'save'\n-\n-      @brain.setAutoSave true\n-\n-      @clock.tick(5000)\n-      expect(@brain.save).to.have.been.called\n-\n-    it 'does not auto-save when turned off', ->\n-      sinon.spy @brain, 'save'\n-\n-      @brain.setAutoSave false\n-\n-      @clock.tick(2*5000)\n-      expect(@brain.save).to.not.have.been.called\n-\n-  describe 'User Searching', ->\n-    it 'finds users by ID', ->\n-      expect(@brain.userForId('1')).to.equal(@user1)\n-\n-    it 'finds users by exact name', ->\n-      expect(@brain.userForName('Guy One')).to.equal(@user1)\n-\n-    it 'finds users by fuzzy name (prefix match)', ->\n-      result = @brain.usersForFuzzyName('Guy')\n-      expect(result).to.have.members([@user1, @user2])\n-      expect(result).to.not.have.members([@user3])", "changes": 253}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/test/brain_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/test/brain_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "test/brain_test.js", "sha": "99740695cba75eb1e0ecc1d897888d462b359021", "additions": 312, "patch": "@@ -0,0 +1,312 @@\n+'use strict'\n+\n+/* global describe, beforeEach, afterEach, it */\n+/* eslint-disable no-unused-expressions */\n+\n+// Assertions and Stubbing\n+const chai = require('chai')\n+const sinon = require('sinon')\n+chai.use(require('sinon-chai'))\n+\n+const expect = chai.expect\n+\n+// Hubot classes\n+const Brain = require('../src/brain')\n+const User = require('../src/user')\n+\n+describe('Brain', function () {\n+  beforeEach(function () {\n+    this.clock = sinon.useFakeTimers()\n+    this.mockRobot = {\n+      emit () {},\n+      on () {}\n+    }\n+\n+    // This *should* be callsArgAsync to match the 'on' API, but that makes\n+    // the tests more complicated and seems irrelevant.\n+    sinon.stub(this.mockRobot, 'on').withArgs('running').callsArg(1)\n+\n+    this.brain = new Brain(this.mockRobot)\n+\n+    this.user1 = this.brain.userForId('1', {name: 'Guy One'})\n+    this.user2 = this.brain.userForId('2', {name: 'Guy One Two'})\n+    this.user3 = this.brain.userForId('3', {name: 'Girl Three'})\n+  })\n+\n+  afterEach(function () {\n+    this.clock.restore()\n+  })\n+\n+  describe('Unit Tests', function () {\n+    describe('#mergeData', function () {\n+      it('performs a proper merge with the new data taking precedent', function () {\n+        this.brain.data = {\n+          1: 'old',\n+          2: 'old'\n+        }\n+\n+        this.brain.mergeData({2: 'new'})\n+\n+        expect(this.brain.data).to.deep.equal({\n+          1: 'old',\n+          2: 'new'\n+        })\n+      })\n+\n+      it('emits a loaded event with the new data', function () {\n+        sinon.spy(this.brain, 'emit')\n+        this.brain.mergeData({})\n+        expect(this.brain.emit).to.have.been.calledWith('loaded', this.brain.data)\n+      })\n+    })\n+\n+    describe('#save', () => it('emits a save event', function () {\n+      sinon.spy(this.brain, 'emit')\n+      this.brain.save()\n+      expect(this.brain.emit).to.have.been.calledWith('save', this.brain.data)\n+    }))\n+\n+    describe('#resetSaveInterval', () => it('updates the auto-save interval', function () {\n+      sinon.spy(this.brain, 'save')\n+      // default is 5s\n+      this.brain.resetSaveInterval(10)\n+      // make sure autosave is on\n+      this.brain.setAutoSave(true)\n+\n+      this.clock.tick(5000)\n+      // old interval has passed\n+      expect(this.brain.save).to.not.have.been.called\n+      this.clock.tick(5000)\n+      // new interval has passed\n+      expect(this.brain.save).to.have.been.calledOnce\n+    }))\n+\n+    describe('#close', function () {\n+      it('saves', function () {\n+        sinon.spy(this.brain, 'save')\n+        this.brain.close()\n+        expect(this.brain.save).to.have.been.calledOnce\n+      })\n+\n+      it('emits a close event', function () {\n+        sinon.spy(this.brain, 'emit')\n+        this.brain.close()\n+        expect(this.brain.emit).to.have.been.calledWith('close')\n+      })\n+\n+      it('saves before emitting the close event', function () {\n+        sinon.spy(this.brain, 'save')\n+        sinon.spy(this.brain, 'emit').withArgs('close')\n+        this.brain.close()\n+        expect(this.brain.save).to.have.been.calledBefore(this.brain.emit)\n+      })\n+\n+      it('stops auto-saving', function () {\n+        // make sure autosave is on\n+        this.brain.setAutoSave(true)\n+        this.brain.close()\n+\n+        // set up the spy after because 'close' calls 'save'\n+        sinon.spy(this.brain, 'save')\n+\n+        this.clock.tick(2 * 5000)\n+        expect(this.brain.save).to.not.have.been.called\n+      })\n+    })\n+\n+    describe('#get', function () {\n+      it('returns the saved value', function () {\n+        this.brain.data._private['test-key'] = 'value'\n+        expect(this.brain.get('test-key')).to.equal('value')\n+      })\n+\n+      it('returns null if object is not found', function () {\n+        expect(this.brain.get('not a real key')).to.be.null\n+      })\n+    })\n+\n+    describe('#set', function () {\n+      it('saves the value', function () {\n+        this.brain.set('test-key', 'value')\n+        expect(this.brain.data._private['test-key']).to.equal('value')\n+      })\n+\n+      it('sets multiple keys at once if an object is provided', function () {\n+        this.brain.data._private = {\n+          key1: 'val1',\n+          key2: 'val1'\n+        }\n+\n+        this.brain.set({\n+          key2: 'val2',\n+          key3: 'val2'\n+        })\n+\n+        expect(this.brain.data._private).to.deep.equal({\n+          key1: 'val1',\n+          key2: 'val2',\n+          key3: 'val2'\n+        })\n+      })\n+\n+      // Unable to understand why this behavior is needed, but adding a test\n+      // case to protect it\n+      it('emits loaded', function () {\n+        sinon.spy(this.brain, 'emit')\n+        this.brain.set('test-key', 'value')\n+        expect(this.brain.emit).to.have.been.calledWith('loaded', this.brain.data)\n+      })\n+\n+      it('returns the brain', function () {\n+        expect(this.brain.set('test-key', 'value')).to.equal(this.brain)\n+      })\n+    })\n+\n+    describe('#remove', () => it('removes the specified key', function () {\n+      this.brain.data._private['test-key'] = 'value'\n+      this.brain.remove('test-key')\n+      expect(this.brain.data._private).to.not.include.keys('test-key')\n+    }))\n+\n+    describe('#userForId', function () {\n+      it('returns the user object', function () {\n+        expect(this.brain.userForId(1)).to.equal(this.user1)\n+      })\n+\n+      it('does an exact match', function () {\n+        const user4 = this.brain.userForId('FOUR')\n+        expect(this.brain.userForId('four')).to.not.equal(user4)\n+      })\n+\n+      // Cannot understand why this behavior is needed, but adding a test case\n+      // to protect it\n+      it('recreates the user if the room option differs from the user object', function () {\n+        expect(this.brain.userForId(1).room).to.be.undefined\n+\n+        // undefined -> having a room\n+        const newUser1 = this.brain.userForId(1, { room: 'room1' })\n+        expect(newUser1).to.not.equal(this.user1)\n+\n+        // changing the room\n+        const newUser2 = this.brain.userForId(1, { room: 'room2' })\n+        expect(newUser2).to.not.equal(newUser1)\n+      })\n+\n+      describe('when there is no matching user ID', function () {\n+        it('creates a new User', function () {\n+          expect(this.brain.data.users).to.not.include.key('all-new-user')\n+          const newUser = this.brain.userForId('all-new-user')\n+          expect(newUser).to.be.instanceof(User)\n+          expect(newUser.id).to.equal('all-new-user')\n+          expect(this.brain.data.users).to.include.key('all-new-user')\n+        })\n+\n+        it('passes the provided options to the new User', function () {\n+          const newUser = this.brain.userForId('all-new-user', {name: 'All New User', prop: 'mine'})\n+          expect(newUser.name).to.equal('All New User')\n+          expect(newUser.prop).to.equal('mine')\n+        })\n+      })\n+    })\n+\n+    describe('#userForName', function () {\n+      it('returns the user with a matching name', function () {\n+        expect(this.brain.userForName('Guy One')).to.equal(this.user1)\n+      })\n+\n+      it('does a case-insensitive match', function () {\n+        expect(this.brain.userForName('guy one')).to.equal(this.user1)\n+      })\n+\n+      it('returns null if no user matches', function () {\n+        expect(this.brain.userForName('not a real user')).to.be.null\n+      })\n+    })\n+\n+    describe('#usersForRawFuzzyName', function () {\n+      it('does a case-insensitive match', function () {\n+        expect(this.brain.usersForRawFuzzyName('guy')).to.have.members([this.user1, this.user2])\n+      })\n+\n+      it('returns all matching users (prefix match) when there is not an exact match (case-insensitive)', function () {\n+        expect(this.brain.usersForRawFuzzyName('Guy')).to.have.members([this.user1, this.user2])\n+      })\n+\n+      it('returns all matching users (prefix match) when there is an exact match (case-insensitive)', function () {\n+        // Matched case\n+        expect(this.brain.usersForRawFuzzyName('Guy One')).to.deep.equal([this.user1, this.user2])\n+        // Mismatched case\n+        expect(this.brain.usersForRawFuzzyName('guy one')).to.deep.equal([this.user1, this.user2])\n+      })\n+\n+      it('returns an empty array if no users match', function () {\n+        const result = this.brain.usersForRawFuzzyName('not a real user')\n+        expect(result).to.be.an('array')\n+        expect(result).to.be.empty\n+      })\n+    })\n+\n+    describe('#usersForFuzzyName', function () {\n+      it('does a case-insensitive match', function () {\n+        expect(this.brain.usersForFuzzyName('guy')).to.have.members([this.user1, this.user2])\n+      })\n+\n+      it('returns all matching users (prefix match) when there is not an exact match', function () {\n+        expect(this.brain.usersForFuzzyName('Guy')).to.have.members([this.user1, this.user2])\n+      })\n+\n+      it('returns just the user when there is an exact match (case-insensitive)', function () {\n+        // Matched case\n+        expect(this.brain.usersForFuzzyName('Guy One')).to.deep.equal([this.user1])\n+        // Mismatched case\n+        expect(this.brain.usersForFuzzyName('guy one')).to.deep.equal([this.user1])\n+      })\n+\n+      it('returns an empty array if no users match', function () {\n+        const result = this.brain.usersForFuzzyName('not a real user')\n+        expect(result).to.be.an('array')\n+        expect(result).to.be.empty\n+      })\n+    })\n+  })\n+\n+  describe('Auto-Save', function () {\n+    it('is on by default', function () {\n+      expect(this.brain.autoSave).to.equal(true)\n+    })\n+\n+    it('automatically saves every 5 seconds when turned on', function () {\n+      sinon.spy(this.brain, 'save')\n+\n+      this.brain.setAutoSave(true)\n+\n+      this.clock.tick(5000)\n+      expect(this.brain.save).to.have.been.called\n+    })\n+\n+    it('does not auto-save when turned off', function () {\n+      sinon.spy(this.brain, 'save')\n+\n+      this.brain.setAutoSave(false)\n+\n+      this.clock.tick(2 * 5000)\n+      expect(this.brain.save).to.not.have.been.called\n+    })\n+  })\n+\n+  describe('User Searching', function () {\n+    it('finds users by ID', function () {\n+      expect(this.brain.userForId('1')).to.equal(this.user1)\n+    })\n+\n+    it('finds users by exact name', function () {\n+      expect(this.brain.userForName('Guy One')).to.equal(this.user1)\n+    })\n+\n+    it('finds users by fuzzy name (prefix match)', function () {\n+      const result = this.brain.usersForFuzzyName('Guy')\n+      expect(result).to.have.members([this.user1, this.user2])\n+      expect(result).to.not.have.members([this.user3])\n+    })\n+  })\n+})", "changes": 312}, {"status": "removed", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/fixtures/mock-adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/fixtures/mock-adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/fixtures/mock-adapter.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "test/fixtures/mock-adapter.coffee", "sha": "535c81629bcc3dc5a23b39cef0ece616621bceed", "additions": 0, "patch": "@@ -1,12 +0,0 @@\n-Adapter = require('../..').Adapter\n-\n-class MockAdapter extends Adapter\n-  send: (envelope, strings...) -> @emit('send', envelope, strings)\n-  reply: (envelope, strings...) -> @emit('reply', envelope, strings)\n-  topic: (envelope, strings...) -> @emit('topic', envelope, strings)\n-  play: (envelope, strings...) -> @emit('play', envelope, strings)\n-\n-  run: -> @emit('connected')\n-  close: -> @emit('closed')\n-\n-module.exports.use = (robot) -> return new MockAdapter(robot)", "changes": 12}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/test/fixtures/mock-adapter.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/test/fixtures/mock-adapter.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/fixtures/mock-adapter.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "test/fixtures/mock-adapter.js", "sha": "5f2ffecb9ad60cf93a296f83b0fa04cf7bd1f512", "additions": 30, "patch": "@@ -0,0 +1,30 @@\n+'use strict'\n+\n+const Adapter = require('../..').Adapter\n+\n+class MockAdapter extends Adapter {\n+  send (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+    this.emit('send', envelope, strings)\n+  }\n+  reply (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+    this.emit('reply', envelope, strings)\n+  }\n+  topic (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+    this.emit('topic', envelope, strings)\n+  }\n+  play (envelope/* , ...strings */) {\n+    const strings = [].slice.call(arguments, 1)\n+    this.emit('play', envelope, strings)\n+  }\n+  run () {\n+    this.emit('connected')\n+  }\n+  close () {\n+    this.emit('closed')\n+  }\n+}\n+\n+module.exports.use = robot => new MockAdapter(robot)", "changes": 30}, {"status": "removed", "deletions": 307, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/listener_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/listener_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "test/listener_test.coffee", "sha": "3a08b0b9bf518bebfd087641602453a063fd7cf1", "additions": 0, "patch": "@@ -1,307 +0,0 @@\n-# Assertions and Stubbing\n-chai = require 'chai'\n-sinon = require 'sinon'\n-chai.use require 'sinon-chai'\n-\n-{ expect } = chai\n-\n-# Hubot classes\n-{ CatchAllMessage, EnterMessage, TextMessage } = require '../src/message'\n-{ Listener, TextListener } = require '../src/listener'\n-Response = require '../src/response'\n-User = require '../src/user'\n-\n-describe 'Listener', ->\n-  beforeEach ->\n-    # Dummy robot\n-    @robot =\n-      # Re-throw AssertionErrors for clearer test failures\n-      emit: (name, err, response) ->\n-        if err.constructor.name == \"AssertionError\"\n-          process.nextTick ->\n-            throw err\n-      # Ignore log messages\n-      logger:\n-        debug: ->\n-      # Why is this part of the Robot object??\n-      Response: Response\n-\n-    # Test user\n-    @user = new User\n-      id: 1\n-      name: 'hubottester'\n-      room: '#mocha'\n-\n-  describe 'Unit Tests', ->\n-    describe '#call', ->\n-      it 'calls the matcher', (done) ->\n-        callback = sinon.spy()\n-        testMatcher = sinon.spy()\n-        testMessage = {}\n-\n-        testListener = new Listener(@robot, testMatcher, callback)\n-        testListener.call testMessage, (_) ->\n-          expect(testMatcher).to.have.been.calledWith(testMessage)\n-          done()\n-\n-      it 'passes the matcher result on to the listener callback', (done) ->\n-        matcherResult = {}\n-        testMatcher = sinon.stub().returns(matcherResult)\n-        testMessage = {}\n-        listenerCallback = (response) ->\n-          expect(response.match).to.be.equal(matcherResult)\n-\n-        # sanity check; matcherResult must be truthy\n-        expect(matcherResult).to.be.ok\n-\n-        testListener = new Listener(@robot, testMatcher, listenerCallback)\n-        testListener.call testMessage, (result) ->\n-          # sanity check; message should have been processed\n-          expect(testMatcher).to.have.been.called\n-          expect(result).to.be.ok\n-\n-          done()\n-\n-      describe 'if the matcher returns true', ->\n-        beforeEach ->\n-          @createListener = (cb) ->\n-            new Listener @robot, sinon.stub().returns(true), cb\n-\n-        it 'executes the listener callback', (done) ->\n-          listenerCallback = sinon.spy()\n-          testMessage = {}\n-\n-          testListener = @createListener listenerCallback\n-          testListener.call testMessage, (_) ->\n-            expect(listenerCallback).to.have.been.called\n-            done()\n-\n-\n-        it 'returns true', ->\n-          testMessage = {}\n-\n-          testListener = @createListener ->\n-          result = testListener.call testMessage\n-          expect(result).to.be.ok\n-\n-        it 'calls the provided callback with true', (done) ->\n-          testMessage = {}\n-\n-          testListener = @createListener ->\n-          testListener.call testMessage, (result) ->\n-            expect(result).to.be.ok\n-            done()\n-\n-        it 'calls the provided callback after the function returns', (done) ->\n-          testMessage = {}\n-\n-          testListener = @createListener ->\n-          finished = false\n-          testListener.call testMessage, (result) ->\n-            expect(finished).to.be.ok\n-            done()\n-          finished = true\n-\n-        it 'handles uncaught errors from the listener callback', (done) ->\n-          testMessage = {}\n-          theError = new Error()\n-\n-          listenerCallback = (response) ->\n-            throw theError\n-\n-          @robot.emit = (name, err, response) ->\n-            expect(name).to.equal('error')\n-            expect(err).to.equal(theError)\n-            expect(response.message).to.equal(testMessage)\n-            done()\n-\n-          testListener = @createListener listenerCallback\n-          testListener.call testMessage, sinon.spy()\n-\n-        it 'calls the provided callback with true if there is an error thrown by the listener callback', (done) ->\n-          testMessage = {}\n-          theError = new Error()\n-\n-          listenerCallback = (response) ->\n-            throw theError\n-\n-          testListener = @createListener listenerCallback\n-          testListener.call testMessage, (result) ->\n-            expect(result).to.be.ok\n-            done()\n-\n-        it 'calls the listener callback with a Response that wraps the Message', (done) ->\n-          testMessage = {}\n-\n-          listenerCallback = (response) ->\n-            expect(response.message).to.equal(testMessage)\n-            done()\n-\n-          testListener = @createListener listenerCallback\n-\n-          testListener.call testMessage, sinon.spy()\n-\n-        it 'passes through the provided middleware stack', (testDone) ->\n-          testMessage = {}\n-\n-          testListener = @createListener ->\n-          testMiddleware =\n-            execute: (context, next, done) ->\n-              expect(context.listener).to.be.equal(testListener)\n-              expect(context.response).to.be.instanceof(Response)\n-              expect(context.response.message).to.be.equal(testMessage)\n-              expect(next).to.be.a('function')\n-              expect(done).to.be.a('function')\n-              testDone()\n-\n-          testListener.call(testMessage, testMiddleware, sinon.spy())\n-\n-        it 'executes the listener callback if middleware succeeds', (testDone) ->\n-          listenerCallback = sinon.spy()\n-          testMessage = {}\n-\n-          testListener = @createListener listenerCallback\n-\n-          testListener.call testMessage, (result) ->\n-            expect(listenerCallback).to.have.been.called\n-            # Matcher matched, so we return true\n-            expect(result).to.be.ok\n-            testDone()\n-\n-        it 'does not execute the listener callback if middleware fails', (testDone) ->\n-          listenerCallback = sinon.spy()\n-          testMessage = {}\n-\n-          testListener = @createListener listenerCallback\n-          testMiddleware =\n-            execute: (context, next, done) ->\n-              # Middleware fails\n-              done()\n-\n-          testListener.call testMessage, testMiddleware, (result) ->\n-            expect(listenerCallback).to.not.have.been.called\n-            # Matcher still matched, so we return true\n-            expect(result).to.be.ok\n-            testDone()\n-\n-        it 'unwinds the middleware stack if there is an error in the listener callback', (testDone) ->\n-          listenerCallback = sinon.stub().throws(new Error())\n-          testMessage = {}\n-          extraDoneFunc = null\n-\n-          testListener = @createListener listenerCallback\n-          testMiddleware =\n-            execute: (context, next, done) ->\n-              extraDoneFunc = sinon.spy done\n-              next context, extraDoneFunc\n-\n-          testListener.call testMessage, testMiddleware, (result) ->\n-            # Listener callback was called (and failed)\n-            expect(listenerCallback).to.have.been.called\n-            # Middleware stack was unwound correctly\n-            expect(extraDoneFunc).to.have.been.called\n-            # Matcher still matched, so we return true\n-            expect(result).to.be.ok\n-            testDone()\n-\n-\n-      describe 'if the matcher returns false', ->\n-        beforeEach ->\n-          @createListener = (cb) ->\n-            new Listener @robot, sinon.stub().returns(false), cb\n-\n-        it 'does not execute the listener callback', (done) ->\n-          listenerCallback = sinon.spy()\n-          testMessage = {}\n-\n-          testListener = @createListener listenerCallback\n-          testListener.call testMessage, (_) ->\n-            expect(listenerCallback).to.not.have.been.called\n-            done()\n-\n-\n-        it 'returns false', ->\n-          testMessage = {}\n-\n-          testListener = @createListener ->\n-          result = testListener.call testMessage\n-          expect(result).to.not.be.ok\n-\n-        it 'calls the provided callback with false', (done) ->\n-          testMessage = {}\n-\n-          testListener = @createListener ->\n-          testListener.call testMessage, (result) ->\n-            expect(result).to.not.be.ok\n-            done()\n-\n-        it 'calls the provided callback after the function returns', (done) ->\n-          testMessage = {}\n-\n-          testListener = @createListener ->\n-          finished = false\n-          testListener.call testMessage, (result) ->\n-            expect(finished).to.be.ok\n-            done()\n-          finished = true\n-\n-        it 'does not execute any middleware', (done) ->\n-          testMessage = {}\n-\n-          testListener = @createListener ->\n-          testMiddleware =\n-            execute: sinon.spy()\n-\n-          testListener.call testMessage, (result) =>\n-            expect(testMiddleware.execute).to.not.have.been.called\n-            done()\n-\n-    describe '#constructor', ->\n-      it 'requires a matcher', ->\n-        expect(-> new Listener(@robot, undefined, {}, sinon.spy())).to.throw(Error)\n-\n-      it 'requires a callback', ->\n-        # No options\n-        expect(-> new Listener(@robot, sinon.spy())).to.throw(Error)\n-        # With options\n-        expect(-> new Listener(@robot, sinon.spy(), {})).to.throw(Error)\n-\n-      it 'gracefully handles missing options', ->\n-        testMatcher = sinon.spy()\n-        listenerCallback = sinon.spy()\n-        testListener = new Listener(@robot, testMatcher, listenerCallback)\n-        # slightly brittle because we are testing for the default options Object\n-        expect(testListener.options).to.deep.equal({id:null})\n-        expect(testListener.callback).to.be.equal(listenerCallback)\n-\n-      it 'gracefully handles a missing ID (set to null)', ->\n-        testMatcher = sinon.spy()\n-        listenerCallback = sinon.spy()\n-        testListener = new Listener(@robot, testMatcher, {}, listenerCallback)\n-        expect(testListener.options.id).to.be.null\n-\n-    describe 'TextListener', ->\n-      describe '#matcher', ->\n-        it 'matches TextMessages', ->\n-          callback = sinon.spy()\n-          testMessage = new TextMessage(@user, 'test')\n-          testMessage.match = sinon.stub().returns(true)\n-          testRegex = /test/\n- \n-          testListener = new TextListener(@robot, testRegex, callback)\n-          result = testListener.matcher(testMessage)\n- \n-          expect(result).to.be.ok\n-          expect(testMessage.match).to.have.been.calledWith(testRegex)\n- \n-        it 'does not match EnterMessages', ->\n-          callback = sinon.spy()\n-          testMessage = new EnterMessage(@user)\n-          testMessage.match = sinon.stub().returns(true)\n-          testRegex = /test/\n- \n-          testListener = new TextListener(@robot, testRegex, callback)\n-          result = testListener.matcher(testMessage)\n- \n-          expect(result).to.not.be.ok\n-          expect(testMessage.match).to.not.have.been.called", "changes": 307}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/test/listener_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/test/listener_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "test/listener_test.js", "sha": "04926dbeedd68af4eeedcd20fcca1c708131d195", "additions": 379, "patch": "@@ -0,0 +1,379 @@\n+'use strict'\n+\n+/* global describe, beforeEach, it */\n+/* eslint-disable no-unused-expressions */\n+\n+// Assertions and Stubbing\n+const chai = require('chai')\n+const sinon = require('sinon')\n+chai.use(require('sinon-chai'))\n+\n+const expect = chai.expect\n+\n+// Hubot classes\n+const EnterMessage = require('../src/message').EnterMessage\n+const TextMessage = require('../src/message').TextMessage\n+const Listener = require('../src/listener').Listener\n+const TextListener = require('../src/listener').TextListener\n+const Response = require('../src/response')\n+const User = require('../src/user')\n+\n+describe('Listener', function () {\n+  beforeEach(function () {\n+    // Dummy robot\n+    this.robot = {\n+      // Re-throw AssertionErrors for clearer test failures\n+      emit (name, err, response) {\n+        if (err.constructor.name === 'AssertionError') {\n+          return process.nextTick(function () {\n+            throw err\n+          })\n+        }\n+      },\n+      // Ignore log messages\n+      logger: {\n+        debug () {}\n+      },\n+      // Why is this part of the Robot object??\n+      Response\n+    }\n+\n+    // Test user\n+    this.user = new User({\n+      id: 1,\n+      name: 'hubottester',\n+      room: '#mocha'\n+    })\n+  })\n+\n+  describe('Unit Tests', function () {\n+    describe('#call', function () {\n+      it('calls the matcher', function (done) {\n+        const callback = sinon.spy()\n+        const testMatcher = sinon.spy()\n+        const testMessage = {}\n+\n+        const testListener = new Listener(this.robot, testMatcher, callback)\n+        testListener.call(testMessage, function (_) {\n+          expect(testMatcher).to.have.been.calledWith(testMessage)\n+          done()\n+        })\n+      })\n+\n+      it('passes the matcher result on to the listener callback', function (done) {\n+        const matcherResult = {}\n+        const testMatcher = sinon.stub().returns(matcherResult)\n+        const testMessage = {}\n+        const listenerCallback = response => expect(response.match).to.be.equal(matcherResult)\n+\n+        // sanity check; matcherResult must be truthy\n+        expect(matcherResult).to.be.ok\n+\n+        const testListener = new Listener(this.robot, testMatcher, listenerCallback)\n+        testListener.call(testMessage, function (result) {\n+          // sanity check; message should have been processed\n+          expect(testMatcher).to.have.been.called\n+          expect(result).to.be.ok\n+\n+          done()\n+        })\n+      })\n+\n+      describe('if the matcher returns true', function () {\n+        beforeEach(function () {\n+          this.createListener = function (cb) {\n+            return new Listener(this.robot, sinon.stub().returns(true), cb)\n+          }\n+        })\n+\n+        it('executes the listener callback', function (done) {\n+          const listenerCallback = sinon.spy()\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(listenerCallback)\n+          testListener.call(testMessage, function (_) {\n+            expect(listenerCallback).to.have.been.called\n+            done()\n+          })\n+        })\n+\n+        it('returns true', function () {\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(function () {})\n+          const result = testListener.call(testMessage)\n+          expect(result).to.be.ok\n+        })\n+\n+        it('calls the provided callback with true', function (done) {\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(function () {})\n+          testListener.call(testMessage, function (result) {\n+            expect(result).to.be.ok\n+            done()\n+          })\n+        })\n+\n+        it('calls the provided callback after the function returns', function (done) {\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(function () {})\n+          let finished = false\n+          testListener.call(testMessage, function (result) {\n+            expect(finished).to.be.ok\n+            done()\n+          })\n+          finished = true\n+        })\n+\n+        it('handles uncaught errors from the listener callback', function (done) {\n+          const testMessage = {}\n+          const theError = new Error()\n+\n+          const listenerCallback = function (response) {\n+            throw theError\n+          }\n+\n+          this.robot.emit = function (name, err, response) {\n+            expect(name).to.equal('error')\n+            expect(err).to.equal(theError)\n+            expect(response.message).to.equal(testMessage)\n+            done()\n+          }\n+\n+          const testListener = this.createListener(listenerCallback)\n+          testListener.call(testMessage, sinon.spy())\n+        })\n+\n+        it('calls the provided callback with true if there is an error thrown by the listener callback', function (done) {\n+          const testMessage = {}\n+          const theError = new Error()\n+\n+          const listenerCallback = function (response) {\n+            throw theError\n+          }\n+\n+          const testListener = this.createListener(listenerCallback)\n+          testListener.call(testMessage, function (result) {\n+            expect(result).to.be.ok\n+            done()\n+          })\n+        })\n+\n+        it('calls the listener callback with a Response that wraps the Message', function (done) {\n+          const testMessage = {}\n+\n+          const listenerCallback = function (response) {\n+            expect(response.message).to.equal(testMessage)\n+            done()\n+          }\n+\n+          const testListener = this.createListener(listenerCallback)\n+\n+          testListener.call(testMessage, sinon.spy())\n+        })\n+\n+        it('passes through the provided middleware stack', function (testDone) {\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(function () {})\n+          const testMiddleware = {\n+            execute (context, next, done) {\n+              expect(context.listener).to.be.equal(testListener)\n+              expect(context.response).to.be.instanceof(Response)\n+              expect(context.response.message).to.be.equal(testMessage)\n+              expect(next).to.be.a('function')\n+              expect(done).to.be.a('function')\n+              testDone()\n+            }\n+          }\n+\n+          testListener.call(testMessage, testMiddleware, sinon.spy())\n+        })\n+\n+        it('executes the listener callback if middleware succeeds', function (testDone) {\n+          const listenerCallback = sinon.spy()\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(listenerCallback)\n+\n+          testListener.call(testMessage, function (result) {\n+            expect(listenerCallback).to.have.been.called\n+            // Matcher matched, so we true\n+            expect(result).to.be.ok\n+            testDone()\n+          })\n+        })\n+\n+        it('does not execute the listener callback if middleware fails', function (testDone) {\n+          const listenerCallback = sinon.spy()\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(listenerCallback)\n+          const testMiddleware = {\n+            execute (context, next, done) {\n+              // Middleware fails\n+              done()\n+            }\n+          }\n+\n+          testListener.call(testMessage, testMiddleware, function (result) {\n+            expect(listenerCallback).to.not.have.been.called\n+            // Matcher still matched, so we true\n+            expect(result).to.be.ok\n+            testDone()\n+          })\n+        })\n+\n+        it('unwinds the middleware stack if there is an error in the listener callback', function (testDone) {\n+          const listenerCallback = sinon.stub().throws(new Error())\n+          const testMessage = {}\n+          let extraDoneFunc = null\n+\n+          const testListener = this.createListener(listenerCallback)\n+          const testMiddleware = {\n+            execute (context, next, done) {\n+              extraDoneFunc = sinon.spy(done)\n+              next(context, extraDoneFunc)\n+            }\n+          }\n+\n+          testListener.call(testMessage, testMiddleware, function (result) {\n+            // Listener callback was called (and failed)\n+            expect(listenerCallback).to.have.been.called\n+            // Middleware stack was unwound correctly\n+            expect(extraDoneFunc).to.have.been.called\n+            // Matcher still matched, so we true\n+            expect(result).to.be.ok\n+            testDone()\n+          })\n+        })\n+      })\n+\n+      describe('if the matcher returns false', function () {\n+        beforeEach(function () {\n+          this.createListener = function (cb) {\n+            return new Listener(this.robot, sinon.stub().returns(false), cb)\n+          }\n+        })\n+\n+        it('does not execute the listener callback', function (done) {\n+          const listenerCallback = sinon.spy()\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(listenerCallback)\n+          testListener.call(testMessage, function (_) {\n+            expect(listenerCallback).to.not.have.been.called\n+            done()\n+          })\n+        })\n+\n+        it('returns false', function () {\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(function () {})\n+          const result = testListener.call(testMessage)\n+          expect(result).to.not.be.ok\n+        })\n+\n+        it('calls the provided callback with false', function (done) {\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(function () {})\n+          testListener.call(testMessage, function (result) {\n+            expect(result).to.not.be.ok\n+            done()\n+          })\n+        })\n+\n+        it('calls the provided callback after the function returns', function (done) {\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(function () {})\n+          let finished = false\n+          testListener.call(testMessage, function (result) {\n+            expect(finished).to.be.ok\n+            done()\n+          })\n+          finished = true\n+        })\n+\n+        it('does not execute any middleware', function (done) {\n+          const testMessage = {}\n+\n+          const testListener = this.createListener(function () {})\n+          const testMiddleware = {execute: sinon.spy()}\n+\n+          testListener.call(testMessage, result => {\n+            expect(testMiddleware.execute).to.not.have.been.called\n+            done()\n+          })\n+        })\n+      })\n+    })\n+\n+    describe('#constructor', function () {\n+      it('requires a matcher', () => expect(function () {\n+        return new Listener(this.robot, undefined, {}, sinon.spy())\n+      }).to.throw(Error))\n+\n+      it('requires a callback', function () {\n+        // No options\n+        expect(function () {\n+          return new Listener(this.robot, sinon.spy())\n+        }).to.throw(Error)\n+        // With options\n+        expect(function () {\n+          return new Listener(this.robot, sinon.spy(), {})\n+        }).to.throw(Error)\n+      })\n+\n+      it('gracefully handles missing options', function () {\n+        const testMatcher = sinon.spy()\n+        const listenerCallback = sinon.spy()\n+        const testListener = new Listener(this.robot, testMatcher, listenerCallback)\n+        // slightly brittle because we are testing for the default options Object\n+        expect(testListener.options).to.deep.equal({id: null})\n+        expect(testListener.callback).to.be.equal(listenerCallback)\n+      })\n+\n+      it('gracefully handles a missing ID (set to null)', function () {\n+        const testMatcher = sinon.spy()\n+        const listenerCallback = sinon.spy()\n+        const testListener = new Listener(this.robot, testMatcher, {}, listenerCallback)\n+        expect(testListener.options.id).to.be.null\n+      })\n+    })\n+\n+    describe('TextListener', () =>\n+      describe('#matcher', function () {\n+        it('matches TextMessages', function () {\n+          const callback = sinon.spy()\n+          const testMessage = new TextMessage(this.user, 'test')\n+          testMessage.match = sinon.stub().returns(true)\n+          const testRegex = /test/\n+\n+          const testListener = new TextListener(this.robot, testRegex, callback)\n+          const result = testListener.matcher(testMessage)\n+\n+          expect(result).to.be.ok\n+          expect(testMessage.match).to.have.been.calledWith(testRegex)\n+        })\n+\n+        it('does not match EnterMessages', function () {\n+          const callback = sinon.spy()\n+          const testMessage = new EnterMessage(this.user)\n+          testMessage.match = sinon.stub().returns(true)\n+          const testRegex = /test/\n+\n+          const testListener = new TextListener(this.robot, testRegex, callback)\n+          const result = testListener.matcher(testMessage)\n+\n+          expect(result).to.not.be.ok\n+          expect(testMessage.match).to.not.have.been.called\n+        })\n+      })\n+    )\n+  })\n+})", "changes": 379}, {"status": "removed", "deletions": 32, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/message_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/message_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/message_test.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "test/message_test.coffee", "sha": "b6685ec8663e25f14bea05d39cb6425bd93c5945", "additions": 0, "patch": "@@ -1,32 +0,0 @@\n-# Assertions and Stubbing\n-chai = require 'chai'\n-sinon = require 'sinon'\n-chai.use require 'sinon-chai'\n-\n-{ expect } = chai\n-\n-# Hubot classes\n-User = require '../src/user'\n-{ CatchAllMessage, EnterMessage, Message, TextMessage } = require '../src/message'\n-\n-describe 'Message', ->\n-  beforeEach ->\n-    @user = new User\n-      id: 1\n-      name: 'hubottester'\n-      room: '#mocha'\n-\n-  describe 'Unit Tests', ->\n-    describe '#finish', ->\n-      it 'marks the message as done', ->\n-        testMessage = new Message(@user)\n-        expect(testMessage.done).to.not.be.ok\n-        testMessage.finish()\n-        expect(testMessage.done).to.be.ok\n-\n-    describe 'TextMessage', ->\n-      describe '#match', ->\n-        it 'should perform standard regex matching', ->\n-          testMessage = new TextMessage(@user, 'message123')\n-          expect( testMessage.match(/^message123$/) ).to.be.ok\n-          expect( testMessage.match(/^does-not-match$/) ).to.not.be.ok", "changes": 32}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/test/message_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/test/message_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/message_test.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "test/message_test.js", "sha": "23083f77016c60b90b0e1f9b8e75fa632a691d4e", "additions": 46, "patch": "@@ -0,0 +1,46 @@\n+'use strict'\n+\n+/* global describe, beforeEach, it */\n+/* eslint-disable no-unused-expressions */\n+\n+// Assertions and Stubbing\n+const chai = require('chai')\n+chai.use(require('sinon-chai'))\n+\n+const expect = chai.expect\n+\n+// Hubot classes\n+const User = require('../src/user')\n+const Message = require('../src/message').Message\n+const TextMessage = require('../src/message').TextMessage\n+\n+describe('Message', function () {\n+  beforeEach(function () {\n+    this.user = new User({\n+      id: 1,\n+      name: 'hubottester',\n+      room: '#mocha'\n+    })\n+  })\n+\n+  describe('Unit Tests', function () {\n+    describe('#finish', () =>\n+      it('marks the message as done', function () {\n+        const testMessage = new Message(this.user)\n+        expect(testMessage.done).to.not.be.ok\n+        testMessage.finish()\n+        expect(testMessage.done).to.be.ok\n+      })\n+    )\n+\n+    describe('TextMessage', () =>\n+      describe('#match', () =>\n+        it('should perform standard regex matching', function () {\n+          const testMessage = new TextMessage(this.user, 'message123')\n+          expect(testMessage.match(/^message123$/)).to.be.ok\n+          expect(testMessage.match(/^does-not-match$/)).to.not.be.ok\n+        })\n+      )\n+    )\n+  })\n+})", "changes": 46}, {"status": "removed", "deletions": 421, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/middleware_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/middleware_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/middleware_test.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "test/middleware_test.coffee", "sha": "82478a6a4e53934db6e3d0804f76ab2975892957", "additions": 0, "patch": "@@ -1,421 +0,0 @@\n-# Assertions and Stubbing\n-chai = require 'chai'\n-sinon = require 'sinon'\n-chai.use require 'sinon-chai'\n-\n-{ expect } = chai\n-\n-# Hubot classes\n-Robot = require '../src/robot'\n-{ CatchAllMessage, EnterMessage, TextMessage } = require '../src/message'\n-Adapter = require '../src/adapter'\n-Response = require '../src/response'\n-Middleware = require '../src/middleware'\n-\n-# mock `hubot-mock-adapter` module from fixture\n-mockery = require 'mockery'\n-\n-describe 'Middleware', ->\n-  describe 'Unit Tests', ->\n-    beforeEach ->\n-      @robot =\n-        # Stub out event emitting\n-        emit: sinon.spy()\n-\n-      @middleware = new Middleware(@robot)\n-\n-    describe '#execute', ->\n-      it 'executes synchronous middleware', (testDone) ->\n-        testMiddleware = sinon.spy (context, next, done) =>\n-          next(done)\n-\n-        @middleware.register testMiddleware\n-\n-        middlewareFinished = ->\n-          expect(testMiddleware).to.have.been.called\n-          testDone()\n-\n-        @middleware.execute(\n-          {}\n-          (_, done) -> done()\n-          middlewareFinished\n-        )\n-\n-      it 'executes asynchronous middleware', (testDone) ->\n-        testMiddleware = sinon.spy (context, next, done) ->\n-          # Yield to the event loop\n-          process.nextTick ->\n-            next(done)\n-\n-        @middleware.register testMiddleware\n-\n-        middlewareFinished = (context, done) ->\n-          expect(testMiddleware).to.have.been.called\n-          testDone()\n-\n-        @middleware.execute(\n-          {}\n-          (_, done) -> done()\n-          middlewareFinished\n-        )\n-\n-      it 'passes the correct arguments to each middleware', (testDone) ->\n-        testContext = {}\n-        # Pull the Robot in scope for simpler callbacks\n-        testRobot = @robot\n-\n-        testMiddleware = (context, next, done) ->\n-          # Break out of middleware error handling so assertion errors are\n-          # more visible\n-          process.nextTick ->\n-            # Check that variables were passed correctly\n-            expect(context).to.equal(testContext)\n-            next(done)\n-\n-        @middleware.register testMiddleware\n-\n-        @middleware.execute(\n-          testContext\n-          (_, done) -> done()\n-          -> testDone()\n-        )\n-\n-      it 'executes all registered middleware in definition order', (testDone) ->\n-        middlewareExecution = []\n-\n-        testMiddlewareA = (context, next, done) =>\n-          middlewareExecution.push('A')\n-          next(done)\n-\n-        testMiddlewareB = (context, next, done) ->\n-          middlewareExecution.push('B')\n-          next(done)\n-\n-        @middleware.register testMiddlewareA\n-        @middleware.register testMiddlewareB\n-\n-        middlewareFinished = ->\n-          expect(middlewareExecution).to.deep.equal(['A','B'])\n-          testDone()\n-\n-        @middleware.execute(\n-          {}\n-          (_, done) -> done()\n-          middlewareFinished\n-        )\n-\n-      it 'executes the next callback after the function returns when there is no middleware', (testDone) ->\n-        finished = false\n-        @middleware.execute(\n-          {}\n-          ->\n-            expect(finished).to.be.ok\n-            testDone()\n-          ->\n-        )\n-        finished = true\n-\n-      it 'always executes middleware after the function returns', (testDone) ->\n-        finished = false\n-\n-        @middleware.register (context, next, done) ->\n-          expect(finished).to.be.ok\n-          testDone()\n-\n-        @middleware.execute {}, (->), (->)\n-        finished = true\n-\n-      it 'creates a default \"done\" function', (testDone) ->\n-        finished = false\n-\n-        @middleware.register (context, next, done) ->\n-          expect(finished).to.be.ok\n-          testDone()\n-\n-        # we're testing the lack of a third argument here.\n-        @middleware.execute {}, (->)\n-        finished = true\n-\n-      it 'does the right thing with done callbacks', (testDone) ->\n-        # we want to ensure that the 'done' callbacks are nested correctly\n-        # (executed in reverse order of definition)\n-        execution = []\n-\n-        testMiddlewareA = (context, next, done) ->\n-          execution.push 'middlewareA'\n-          next ->\n-            execution.push 'doneA'\n-            done()\n-\n-        testMiddlewareB = (context, next, done) ->\n-          execution.push 'middlewareB'\n-          next ->\n-            execution.push 'doneB'\n-            done()\n-\n-        @middleware.register testMiddlewareA\n-        @middleware.register testMiddlewareB\n-\n-        allDone = ->\n-          expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'doneB', 'doneA'])\n-          testDone()\n-\n-        @middleware.execute(\n-          {}\n-          # Short circuit at the bottom of the middleware stack\n-          (_, done) -> done()\n-          allDone\n-        )\n-\n-      it 'defaults to the latest done callback if none is provided', (testDone) ->\n-        # we want to ensure that the 'done' callbacks are nested correctly\n-        # (executed in reverse order of definition)\n-        execution = []\n-\n-        testMiddlewareA = (context, next, done) ->\n-          execution.push 'middlewareA'\n-          next ->\n-            execution.push 'doneA'\n-            done()\n-\n-        testMiddlewareB = (context, next, done) ->\n-          execution.push 'middlewareB'\n-          next()\n-\n-        @middleware.register testMiddlewareA\n-        @middleware.register testMiddlewareB\n-\n-        allDone = ->\n-          expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'doneA'])\n-          testDone()\n-\n-        @middleware.execute(\n-          {}\n-          # Short circuit at the bottom of the middleware stack\n-          (_, done) -> done()\n-          allDone\n-        )\n-\n-      describe 'error handling', ->\n-        it 'does not execute subsequent middleware after the error is thrown', (testDone) ->\n-          middlewareExecution = []\n-\n-          testMiddlewareA = (context, next, done) ->\n-            middlewareExecution.push('A')\n-            next(done)\n-\n-          testMiddlewareB = (context, next, done) ->\n-            middlewareExecution.push('B')\n-            throw new Error\n-\n-          testMiddlewareC = (context, next, done) ->\n-            middlewareExecution.push('C')\n-            next(done)\n-\n-          @middleware.register testMiddlewareA\n-          @middleware.register testMiddlewareB\n-          @middleware.register testMiddlewareC\n-\n-          middlewareFinished = sinon.spy()\n-          middlewareFailed = () =>\n-            expect(middlewareFinished).to.not.have.been.called\n-            expect(middlewareExecution).to.deep.equal(['A','B'])\n-            testDone()\n-\n-          @middleware.execute(\n-            {}\n-            middlewareFinished\n-            middlewareFailed\n-          )\n-\n-        it 'emits an error event', (testDone) ->\n-          testResponse = {}\n-          theError = new Error\n-\n-          testMiddleware = (context, next, done) ->\n-            throw theError\n-\n-          @middleware.register testMiddleware\n-\n-          @robot.emit = sinon.spy (name, err, response) ->\n-            expect(name).to.equal('error')\n-            expect(err).to.equal(theError)\n-            expect(response).to.equal(testResponse)\n-\n-          middlewareFinished = sinon.spy()\n-          middlewareFailed = () =>\n-            expect(@robot.emit).to.have.been.called\n-            testDone()\n-\n-          @middleware.execute(\n-            {response: testResponse},\n-            middlewareFinished,\n-            middlewareFailed\n-          )\n-\n-        it 'unwinds the middleware stack (calling all done functions)', (testDone) ->\n-          extraDoneFunc = null\n-\n-          testMiddlewareA = (context, next, done) ->\n-            # Goal: make sure that the middleware stack is unwound correctly\n-            extraDoneFunc = sinon.spy done\n-            next extraDoneFunc\n-\n-          testMiddlewareB = (context, next, done) ->\n-            throw new Error\n-\n-          @middleware.register testMiddlewareA\n-          @middleware.register testMiddlewareB\n-\n-          middlewareFinished = sinon.spy()\n-          middlewareFailed = ->\n-            # Sanity check that the error was actually thrown\n-            expect(middlewareFinished).to.not.have.been.called\n-\n-            expect(extraDoneFunc).to.have.been.called\n-            testDone()\n-\n-          @middleware.execute(\n-            {}\n-            middlewareFinished\n-            middlewareFailed\n-          )\n-\n-    describe '#register', ->\n-      it 'adds to the list of middleware', ->\n-        testMiddleware = (context, next, done) ->\n-\n-        @middleware.register testMiddleware\n-\n-        expect(@middleware.stack).to.include(testMiddleware)\n-\n-      it 'validates the arity of middleware', ->\n-        testMiddleware = (context, next, done, extra) ->\n-\n-        expect(=> @middleware.register(testMiddleware)).to.throw(/Incorrect number of arguments/)\n-\n-  # Per the documentation in docs/scripting.md\n-  # Any new fields that are exposed to middleware should be explicitly\n-  # tested for.\n-  describe 'Public Middleware APIs', ->\n-    beforeEach ->\n-      mockery.enable({\n-        warnOnReplace: false,\n-        warnOnUnregistered: false\n-      })\n-      mockery.registerMock 'hubot-mock-adapter', require('./fixtures/mock-adapter')\n-      @robot = new Robot null, 'mock-adapter', yes, 'TestHubot'\n-      @robot.run\n-\n-      # Re-throw AssertionErrors for clearer test failures\n-      @robot.on 'error', (name, err, response) ->\n-        if err?.constructor?.name == \"AssertionError\"\n-          process.nextTick ->\n-            throw err\n-\n-      @user = @robot.brain.userForId '1', {\n-        name: 'hubottester'\n-        room: '#mocha'\n-      }\n-\n-      # Dummy middleware\n-      @middleware = sinon.spy (context, next, done) ->\n-        next(done)\n-\n-      @testMessage = new TextMessage @user, 'message123'\n-      @robot.hear /^message123$/, (response) ->\n-      @testListener = @robot.listeners[0]\n-\n-    afterEach ->\n-      mockery.disable()\n-      @robot.shutdown()\n-\n-    describe 'listener middleware context', ->\n-      beforeEach ->\n-        @robot.listenerMiddleware (context, next, done) =>\n-          @middleware.call @, context, next, done\n-\n-      describe 'listener', ->\n-        it 'is the listener object that matched', (testDone) ->\n-          @robot.receive @testMessage, () =>\n-            expect(@middleware).to.have.been.calledWithMatch(\n-              sinon.match.has('listener',\n-                sinon.match.same(@testListener)) # context\n-              sinon.match.any                    # next\n-              sinon.match.any                    # done\n-            )\n-            testDone()\n-\n-        it 'has options.id (metadata)', (testDone) ->\n-          @robot.receive @testMessage, () =>\n-            expect(@middleware).to.have.been.calledWithMatch(\n-              sinon.match.has('listener',\n-                sinon.match.has('options',\n-                  sinon.match.has('id')))        # context\n-              sinon.match.any                    # next\n-              sinon.match.any                    # done\n-            )\n-            testDone()\n-\n-      describe 'response', ->\n-        it 'is a Response that wraps the message', (testDone) ->\n-          @robot.receive @testMessage, () =>\n-            expect(@middleware).to.have.been.calledWithMatch(\n-              sinon.match.has('response',\n-                sinon.match.instanceOf(Response).and(\n-                  sinon.match.has('message',\n-                    sinon.match.same(@testMessage)))) # context\n-              sinon.match.any                         # next\n-              sinon.match.any                         # done\n-            )\n-            testDone()\n-\n-    describe 'receive middleware context', ->\n-      beforeEach ->\n-        @robot.receiveMiddleware (context, next, done) =>\n-          @middleware.call @, context, next, done\n-\n-      describe 'response', ->\n-        it 'is a match-less Response object', (testDone) ->\n-          @robot.receive @testMessage, () =>\n-            expect(@middleware).to.have.been.calledWithMatch(\n-              sinon.match.has('response',\n-                sinon.match.instanceOf(Response).and(\n-                  sinon.match.has('message',\n-                    sinon.match.same(@testMessage)))) # context\n-              sinon.match.any                         # next\n-              sinon.match.any                         # done\n-            )\n-            testDone()\n-\n-    describe 'next', ->\n-      beforeEach ->\n-        @robot.listenerMiddleware (context, next, done) =>\n-          @middleware.call @, context, next, done\n-\n-      it 'is a function with arity one', (testDone) ->\n-        @robot.receive @testMessage, () =>\n-          expect(@middleware).to.have.been.calledWithMatch(\n-            sinon.match.any             # context\n-            sinon.match.func.and(\n-              sinon.match.has('length',\n-                sinon.match(1)))        # next\n-            sinon.match.any             # done\n-          )\n-          testDone()\n-\n-    describe 'done', ->\n-      beforeEach ->\n-        @robot.listenerMiddleware (context, next, done) =>\n-          @middleware.call @, context, next, done\n-\n-      it 'is a function with arity zero', (testDone) ->\n-        @robot.receive @testMessage, () =>\n-          expect(@middleware).to.have.been.calledWithMatch(\n-            sinon.match.any             # context\n-            sinon.match.any             # next\n-            sinon.match.func.and(\n-              sinon.match.has('length',\n-                sinon.match(0)))        # done\n-          )\n-          testDone()", "changes": 421}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/test/middleware_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/test/middleware_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/middleware_test.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "test/middleware_test.js", "sha": "88045da2cebcf05ace20c499533722a87bc4188e", "additions": 505, "patch": "@@ -0,0 +1,505 @@\n+'use strict'\n+\n+/* global describe, beforeEach, it, afterEach */\n+/* eslint-disable no-unused-expressions */\n+\n+// Assertions and Stubbing\n+const chai = require('chai')\n+const sinon = require('sinon')\n+chai.use(require('sinon-chai'))\n+\n+const expect = chai.expect\n+\n+// Hubot classes\n+const Robot = require('../src/robot')\n+const TextMessage = require('../src/message').TextMessage\n+const Response = require('../src/response')\n+const Middleware = require('../src/middleware')\n+\n+// mock `hubot-mock-adapter` module from fixture\n+const mockery = require('mockery')\n+\n+describe('Middleware', function () {\n+  describe('Unit Tests', function () {\n+    beforeEach(function () {\n+      // Stub out event emitting\n+      this.robot = {emit: sinon.spy()}\n+\n+      this.middleware = new Middleware(this.robot)\n+    })\n+\n+    describe('#execute', function () {\n+      it('executes synchronous middleware', function (testDone) {\n+        const testMiddleware = sinon.spy((context, next, done) => {\n+          next(done)\n+        })\n+\n+        this.middleware.register(testMiddleware)\n+\n+        const middlewareFinished = function () {\n+          expect(testMiddleware).to.have.been.called\n+          testDone()\n+        }\n+\n+        this.middleware.execute(\n+          {},\n+          (_, done) => done(),\n+          middlewareFinished\n+        )\n+      })\n+\n+      it('executes asynchronous middleware', function (testDone) {\n+        const testMiddleware = sinon.spy((context, next, done) =>\n+          // Yield to the event loop\n+          process.nextTick(() => next(done))\n+        )\n+\n+        this.middleware.register(testMiddleware)\n+\n+        const middlewareFinished = function (context, done) {\n+          expect(testMiddleware).to.have.been.called\n+          testDone()\n+        }\n+\n+        this.middleware.execute(\n+          {},\n+          (_, done) => done(),\n+          middlewareFinished\n+        )\n+      })\n+\n+      it('passes the correct arguments to each middleware', function (testDone) {\n+        const testContext = {}\n+        const testMiddleware = (context, next, done) =>\n+          // Break out of middleware error handling so assertion errors are\n+          // more visible\n+          process.nextTick(function () {\n+            // Check that variables were passed correctly\n+            expect(context).to.equal(testContext)\n+            next(done)\n+          })\n+\n+        this.middleware.register(testMiddleware)\n+\n+        this.middleware.execute(\n+          testContext,\n+          (_, done) => done(),\n+          () => testDone())\n+      })\n+\n+      it('executes all registered middleware in definition order', function (testDone) {\n+        const middlewareExecution = []\n+\n+        const testMiddlewareA = (context, next, done) => {\n+          middlewareExecution.push('A')\n+          next(done)\n+        }\n+\n+        const testMiddlewareB = function (context, next, done) {\n+          middlewareExecution.push('B')\n+          next(done)\n+        }\n+\n+        this.middleware.register(testMiddlewareA)\n+        this.middleware.register(testMiddlewareB)\n+\n+        const middlewareFinished = function () {\n+          expect(middlewareExecution).to.deep.equal(['A', 'B'])\n+          testDone()\n+        }\n+\n+        this.middleware.execute(\n+          {},\n+          (_, done) => done(),\n+          middlewareFinished\n+        )\n+      })\n+\n+      it('executes the next callback after the function returns when there is no middleware', function (testDone) {\n+        let finished = false\n+        this.middleware.execute(\n+          {},\n+          function () {\n+            expect(finished).to.be.ok\n+            testDone()\n+          },\n+          function () {}\n+        )\n+        finished = true\n+      })\n+\n+      it('always executes middleware after the function returns', function (testDone) {\n+        let finished = false\n+\n+        this.middleware.register(function (context, next, done) {\n+          expect(finished).to.be.ok\n+          testDone()\n+        })\n+\n+        this.middleware.execute({}, function () {}, function () {})\n+        finished = true\n+      })\n+\n+      it('creates a default \"done\" function', function (testDone) {\n+        let finished = false\n+\n+        this.middleware.register(function (context, next, done) {\n+          expect(finished).to.be.ok\n+          testDone()\n+        })\n+\n+        // we're testing the lack of a third argument here.\n+        this.middleware.execute({}, function () {})\n+        finished = true\n+      })\n+\n+      it('does the right thing with done callbacks', function (testDone) {\n+        // we want to ensure that the 'done' callbacks are nested correctly\n+        // (executed in reverse order of definition)\n+        const execution = []\n+\n+        const testMiddlewareA = function (context, next, done) {\n+          execution.push('middlewareA')\n+          next(function () {\n+            execution.push('doneA')\n+            done()\n+          })\n+        }\n+\n+        const testMiddlewareB = function (context, next, done) {\n+          execution.push('middlewareB')\n+          next(function () {\n+            execution.push('doneB')\n+            done()\n+          })\n+        }\n+\n+        this.middleware.register(testMiddlewareA)\n+        this.middleware.register(testMiddlewareB)\n+\n+        const allDone = function () {\n+          expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'doneB', 'doneA'])\n+          testDone()\n+        }\n+\n+        this.middleware.execute(\n+          {},\n+          // Short circuit at the bottom of the middleware stack\n+          (_, done) => done(),\n+          allDone\n+        )\n+      })\n+\n+      it('defaults to the latest done callback if none is provided', function (testDone) {\n+        // we want to ensure that the 'done' callbacks are nested correctly\n+        // (executed in reverse order of definition)\n+        const execution = []\n+\n+        const testMiddlewareA = function (context, next, done) {\n+          execution.push('middlewareA')\n+          next(function () {\n+            execution.push('doneA')\n+            done()\n+          })\n+        }\n+\n+        const testMiddlewareB = function (context, next, done) {\n+          execution.push('middlewareB')\n+          next()\n+        }\n+\n+        this.middleware.register(testMiddlewareA)\n+        this.middleware.register(testMiddlewareB)\n+\n+        const allDone = function () {\n+          expect(execution).to.deep.equal(['middlewareA', 'middlewareB', 'doneA'])\n+          testDone()\n+        }\n+\n+        this.middleware.execute(\n+          {},\n+          // Short circuit at the bottom of the middleware stack\n+          (_, done) => done(),\n+          allDone\n+        )\n+      })\n+\n+      describe('error handling', function () {\n+        it('does not execute subsequent middleware after the error is thrown', function (testDone) {\n+          const middlewareExecution = []\n+\n+          const testMiddlewareA = function (context, next, done) {\n+            middlewareExecution.push('A')\n+            next(done)\n+          }\n+\n+          const testMiddlewareB = function (context, next, done) {\n+            middlewareExecution.push('B')\n+            throw new Error()\n+          }\n+\n+          const testMiddlewareC = function (context, next, done) {\n+            middlewareExecution.push('C')\n+            next(done)\n+          }\n+\n+          this.middleware.register(testMiddlewareA)\n+          this.middleware.register(testMiddlewareB)\n+          this.middleware.register(testMiddlewareC)\n+\n+          const middlewareFinished = sinon.spy()\n+          const middlewareFailed = () => {\n+            expect(middlewareFinished).to.not.have.been.called\n+            expect(middlewareExecution).to.deep.equal(['A', 'B'])\n+            testDone()\n+          }\n+\n+          this.middleware.execute(\n+            {},\n+            middlewareFinished,\n+            middlewareFailed\n+          )\n+        })\n+\n+        it('emits an error event', function (testDone) {\n+          const testResponse = {}\n+          const theError = new Error()\n+\n+          const testMiddleware = function (context, next, done) {\n+            throw theError\n+          }\n+\n+          this.middleware.register(testMiddleware)\n+\n+          this.robot.emit = sinon.spy(function (name, err, response) {\n+            expect(name).to.equal('error')\n+            expect(err).to.equal(theError)\n+            expect(response).to.equal(testResponse)\n+          })\n+\n+          const middlewareFinished = sinon.spy()\n+          const middlewareFailed = () => {\n+            expect(this.robot.emit).to.have.been.called\n+            testDone()\n+          }\n+\n+          this.middleware.execute(\n+            {response: testResponse},\n+            middlewareFinished,\n+            middlewareFailed\n+          )\n+        })\n+\n+        it('unwinds the middleware stack (calling all done functions)', function (testDone) {\n+          let extraDoneFunc = null\n+\n+          const testMiddlewareA = function (context, next, done) {\n+            // Goal: make sure that the middleware stack is unwound correctly\n+            extraDoneFunc = sinon.spy(done)\n+            next(extraDoneFunc)\n+          }\n+\n+          const testMiddlewareB = function (context, next, done) {\n+            throw new Error()\n+          }\n+\n+          this.middleware.register(testMiddlewareA)\n+          this.middleware.register(testMiddlewareB)\n+\n+          const middlewareFinished = sinon.spy()\n+          const middlewareFailed = function () {\n+            // Sanity check that the error was actually thrown\n+            expect(middlewareFinished).to.not.have.been.called\n+\n+            expect(extraDoneFunc).to.have.been.called\n+            testDone()\n+          }\n+\n+          this.middleware.execute(\n+            {},\n+            middlewareFinished,\n+            middlewareFailed\n+          )\n+        })\n+      })\n+    })\n+\n+    describe('#register', function () {\n+      it('adds to the list of middleware', function () {\n+        const testMiddleware = function (context, next, done) {}\n+\n+        this.middleware.register(testMiddleware)\n+\n+        expect(this.middleware.stack).to.include(testMiddleware)\n+      })\n+\n+      it('validates the arity of middleware', function () {\n+        const testMiddleware = function (context, next, done, extra) {}\n+\n+        expect(() => this.middleware.register(testMiddleware)).to.throw(/Incorrect number of arguments/)\n+      })\n+    })\n+  })\n+\n+  // Per the documentation in docs/scripting.md\n+  // Any new fields that are exposed to middleware should be explicitly\n+  // tested for.\n+  describe('Public Middleware APIs', function () {\n+    beforeEach(function () {\n+      mockery.enable({\n+        warnOnReplace: false,\n+        warnOnUnregistered: false\n+      })\n+      mockery.registerMock('hubot-mock-adapter', require('./fixtures/mock-adapter'))\n+      this.robot = new Robot(null, 'mock-adapter', true, 'TestHubot')\n+      this.robot.run\n+\n+      // Re-throw AssertionErrors for clearer test failures\n+      this.robot.on('error', function (name, err, response) {\n+        if (__guard__(err != null ? err.constructor : undefined, x => x.name) === 'AssertionError') {\n+          process.nextTick(function () {\n+            throw err\n+          })\n+        }\n+      })\n+\n+      this.user = this.robot.brain.userForId('1', {\n+        name: 'hubottester',\n+        room: '#mocha'\n+      })\n+\n+      // Dummy middleware\n+      this.middleware = sinon.spy((context, next, done) => next(done))\n+\n+      this.testMessage = new TextMessage(this.user, 'message123')\n+      this.robot.hear(/^message123$/, function (response) {})\n+      this.testListener = this.robot.listeners[0]\n+    })\n+\n+    afterEach(function () {\n+      mockery.disable()\n+      this.robot.shutdown()\n+    })\n+\n+    describe('listener middleware context', function () {\n+      beforeEach(function () {\n+        this.robot.listenerMiddleware((context, next, done) => {\n+          this.middleware(context, next, done)\n+        })\n+      })\n+\n+      describe('listener', function () {\n+        it('is the listener object that matched', function (testDone) {\n+          this.robot.receive(this.testMessage, () => {\n+            expect(this.middleware).to.have.been.calledWithMatch(\n+              sinon.match.has('listener',\n+                sinon.match.same(this.testListener)), // context\n+              sinon.match.any,                    // next\n+              sinon.match.any                    // done\n+            )\n+            testDone()\n+          })\n+        })\n+\n+        it('has options.id (metadata)', function (testDone) {\n+          this.robot.receive(this.testMessage, () => {\n+            expect(this.middleware).to.have.been.calledWithMatch(\n+              sinon.match.has('listener',\n+                sinon.match.has('options',\n+                  sinon.match.has('id'))),        // context\n+              sinon.match.any,                    // next\n+              sinon.match.any                    // done\n+            )\n+            testDone()\n+          })\n+        })\n+      })\n+\n+      describe('response', () =>\n+        it('is a Response that wraps the message', function (testDone) {\n+          this.robot.receive(this.testMessage, () => {\n+            expect(this.middleware).to.have.been.calledWithMatch(\n+              sinon.match.has('response',\n+                sinon.match.instanceOf(Response).and(\n+                  sinon.match.has('message',\n+                    sinon.match.same(this.testMessage)))), // context\n+              sinon.match.any,                         // next\n+              sinon.match.any                         // done\n+            )\n+            testDone()\n+          })\n+        })\n+      )\n+    })\n+\n+    describe('receive middleware context', function () {\n+      beforeEach(function () {\n+        this.robot.receiveMiddleware((context, next, done) => {\n+          this.middleware(context, next, done)\n+        })\n+      })\n+\n+      describe('response', () =>\n+        it('is a match-less Response object', function (testDone) {\n+          this.robot.receive(this.testMessage, () => {\n+            expect(this.middleware).to.have.been.calledWithMatch(\n+              sinon.match.has('response',\n+                sinon.match.instanceOf(Response).and(\n+                  sinon.match.has('message',\n+                    sinon.match.same(this.testMessage)))), // context\n+              sinon.match.any,                         // next\n+              sinon.match.any                         // done\n+            )\n+            testDone()\n+          })\n+        })\n+      )\n+    })\n+\n+    describe('next', function () {\n+      beforeEach(function () {\n+        this.robot.listenerMiddleware((context, next, done) => {\n+          this.middleware(context, next, done)\n+        })\n+      })\n+\n+      it('is a function with arity one', function (testDone) {\n+        this.robot.receive(this.testMessage, () => {\n+          expect(this.middleware).to.have.been.calledWithMatch(\n+            sinon.match.any,             // context\n+            sinon.match.func.and(\n+              sinon.match.has('length',\n+                sinon.match(1))),        // next\n+            sinon.match.any             // done\n+          )\n+          testDone()\n+        })\n+      })\n+    })\n+\n+    describe('done', function () {\n+      beforeEach(function () {\n+        this.robot.listenerMiddleware((context, next, done) => {\n+          this.middleware(context, next, done)\n+        })\n+      })\n+\n+      it('is a function with arity zero', function (testDone) {\n+        this.robot.receive(this.testMessage, () => {\n+          expect(this.middleware).to.have.been.calledWithMatch(\n+            sinon.match.any,             // context\n+            sinon.match.any,             // next\n+            sinon.match.func.and(\n+              sinon.match.has('length',\n+                sinon.match(0)))        // done\n+          )\n+          testDone()\n+        })\n+      })\n+    })\n+  })\n+})\n+\n+function __guard__ (value, transform) {\n+  (typeof value !== 'undefined' && value !== null) ? transform(value) : undefined\n+}", "changes": 505}, {"status": "removed", "deletions": 844, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "test/robot_test.coffee", "sha": "01b73d6b561ea53f1a627825e7f4d20833415642", "additions": 0, "patch": "@@ -1,844 +0,0 @@\n-# Assertions and Stubbing\n-chai = require 'chai'\n-sinon = require 'sinon'\n-chai.use require 'sinon-chai'\n-\n-{ expect } = chai\n-\n-# Hubot classes\n-Robot = require '../src/robot'\n-{ CatchAllMessage, EnterMessage, LeaveMessage, TextMessage, TopicMessage } = require '../src/message'\n-Adapter = require '../src/adapter'\n-\n-ScopedHttpClient = require 'scoped-http-client'\n-\n-# mock `hubot-mock-adapter` module from fixture\n-mockery = require 'mockery'\n-\n-describe 'Robot', ->\n-  beforeEach ->\n-    mockery.enable({\n-      warnOnReplace: false,\n-      warnOnUnregistered: false\n-    })\n-    mockery.registerMock 'hubot-mock-adapter', require('./fixtures/mock-adapter')\n-    @robot = new Robot null, 'mock-adapter', yes, 'TestHubot'\n-    @robot.alias = 'Hubot'\n-    @robot.run\n-\n-    # Re-throw AssertionErrors for clearer test failures\n-    @robot.on 'error', (name, err, response) ->\n-      return unless err?.constructor?\n-      if err.constructor.name == \"AssertionError\"\n-        process.nextTick ->\n-          throw err\n-\n-    @user = @robot.brain.userForId '1', {\n-      name: 'hubottester'\n-      room: '#mocha'\n-    }\n-\n-  afterEach ->\n-    mockery.disable()\n-    @robot.shutdown()\n-\n-  describe 'Unit Tests', ->\n-    describe '#http', ->\n-      beforeEach ->\n-        url = 'http://localhost'\n-        @httpClient = @robot.http(url)\n-\n-      it 'creates a new ScopedHttpClient', ->\n-        # 'instanceOf' check doesn't work here due to the design of\n-        # ScopedHttpClient\n-        expect(@httpClient).to.have.property('get')\n-        expect(@httpClient).to.have.property('post')\n-\n-      it 'passes options through to the ScopedHttpClient', ->\n-        agent = {}\n-        httpClient = @robot.http('http://localhost', agent: agent)\n-        expect(httpClient.options.agent).to.equal(agent)\n-\n-      it 'sets a sane user agent', ->\n-        expect(@httpClient.options.headers['User-Agent']).to.contain('Hubot')\n-\n-      it 'merges in any global http options', ->\n-        agent = {}\n-        @robot.globalHttpOptions = {agent: agent}\n-        httpClient = @robot.http('http://localhost')\n-        expect(httpClient.options.agent).to.equal(agent)\n-\n-      it 'local options override global http options', ->\n-        agentA = {}\n-        agentB = {}\n-        @robot.globalHttpOptions = {agent: agentA}\n-        httpClient = @robot.http('http://localhost', agent: agentB)\n-        expect(httpClient.options.agent).to.equal(agentB)\n-\n-    describe '#respondPattern', ->\n-      it 'matches messages starting with robot\\'s name', ->\n-        testMessage = @robot.name + 'message123'\n-        testRegex   = /(.*)/\n-\n-        pattern = @robot.respondPattern testRegex\n-        expect(testMessage).to.match(pattern)\n-        match = testMessage.match(pattern)[1]\n-        expect(match).to.equal('message123')\n-\n-      it 'matches messages starting with robot\\'s alias', ->\n-        testMessage = @robot.alias + 'message123'\n-        testRegex   = /(.*)/\n-\n-        pattern = @robot.respondPattern testRegex\n-        expect(testMessage).to.match(pattern)\n-        match = testMessage.match(pattern)[1]\n-        expect(match).to.equal('message123')\n-\n-      it 'does not match unaddressed messages', ->\n-        testMessage = 'message123'\n-        testRegex   = /(.*)/\n-\n-        pattern = @robot.respondPattern testRegex\n-        expect(testMessage).to.not.match(pattern)\n-\n-      it 'matches properly when name is substring of alias', ->\n-        @robot.name  = 'Meg'\n-        @robot.alias = 'Megan'\n-        testMessage1 = @robot.name  + ' message123'\n-        testMessage2 = @robot.alias + ' message123'\n-        testRegex = /(.*)/\n-\n-        pattern = @robot.respondPattern testRegex\n-\n-        expect(testMessage1).to.match(pattern)\n-        match1 = testMessage1.match(pattern)[1]\n-        expect(match1).to.equal('message123')\n-\n-        expect(testMessage2).to.match(pattern)\n-        match2 = testMessage2.match(pattern)[1]\n-        expect(match2).to.equal('message123')\n-\n-      it 'matches properly when alias is substring of name', ->\n-        @robot.name  = 'Megan'\n-        @robot.alias = 'Meg'\n-        testMessage1 = @robot.name  + ' message123'\n-        testMessage2 = @robot.alias + ' message123'\n-        testRegex = /(.*)/\n-\n-        pattern = @robot.respondPattern testRegex\n-\n-        expect(testMessage1).to.match(pattern)\n-        match1 = testMessage1.match(pattern)[1]\n-        expect(match1).to.equal('message123')\n-\n-        expect(testMessage2).to.match(pattern)\n-        match2 = testMessage2.match(pattern)[1]\n-        expect(match2).to.equal('message123')\n-\n-    describe '#listen', ->\n-      it 'registers a new listener directly', ->\n-        expect(@robot.listeners).to.have.length(0)\n-        @robot.listen (->), ->\n-        expect(@robot.listeners).to.have.length(1)\n-\n-    describe '#hear', ->\n-      it 'registers a new listener directly', ->\n-        expect(@robot.listeners).to.have.length(0)\n-        @robot.hear /.*/, ->\n-        expect(@robot.listeners).to.have.length(1)\n-\n-    describe '#respond', ->\n-      it 'registers a new listener using hear', ->\n-        sinon.spy @robot, 'hear'\n-        @robot.respond /.*/, ->\n-        expect(@robot.hear).to.have.been.called\n-\n-    describe '#enter', ->\n-      it 'registers a new listener using listen', ->\n-        sinon.spy @robot, 'listen'\n-        @robot.enter ->\n-        expect(@robot.listen).to.have.been.called\n-\n-    describe '#leave', ->\n-      it 'registers a new listener using listen', ->\n-        sinon.spy @robot, 'listen'\n-        @robot.leave ->\n-        expect(@robot.listen).to.have.been.called\n-\n-    describe '#topic', ->\n-      it 'registers a new listener using listen', ->\n-        sinon.spy @robot, 'listen'\n-        @robot.topic ->\n-        expect(@robot.listen).to.have.been.called\n-\n-    describe '#catchAll', ->\n-      it 'registers a new listener using listen', ->\n-        sinon.spy @robot, 'listen'\n-        @robot.catchAll ->\n-        expect(@robot.listen).to.have.been.called\n-\n-    describe '#receive', ->\n-      it 'calls all registered listeners', (done) ->\n-        # Need to use a real Message so that the CatchAllMessage constructor works\n-        testMessage = new TextMessage(@user, 'message123')\n-\n-        listener =\n-          call: (response, middleware, cb) ->\n-            cb()\n-        sinon.spy(listener, 'call')\n-\n-        @robot.listeners = [\n-          listener\n-          listener\n-          listener\n-          listener\n-        ]\n-\n-        @robot.receive testMessage, ->\n-          # When no listeners match, each listener is called twice: once with\n-          # the original message and once with a CatchAll message\n-          expect(listener.call).to.have.callCount(8)\n-          done()\n-\n-      it 'sends a CatchAllMessage if no listener matches', (done) ->\n-        # Testing for recursion with a new CatchAllMessage that wraps the\n-        # original message\n-\n-        testMessage = new TextMessage(@user, 'message123')\n-        @robot.listeners = []\n-\n-        # Replace @robot.receive so we can catch when the functions recurses\n-        oldReceive = @robot.receive\n-        @robot.receive = (message, cb) ->\n-          expect(message).to.be.instanceof(CatchAllMessage)\n-          expect(message.message).to.be.equal(testMessage)\n-          cb()\n-        sinon.spy(@robot, 'receive')\n-\n-        # Call the original receive method that we want to test\n-        oldReceive.call @robot, testMessage, () =>\n-          expect(@robot.receive).to.have.been.called\n-          done()\n-\n-      it 'does not trigger a CatchAllMessage if a listener matches', (done) ->\n-        testMessage = new TextMessage(@user, 'message123')\n-\n-        matchingListener =\n-          call: (message, middleware, cb) ->\n-            # indicate that the message matched the listener\n-            cb(true)\n-\n-        # Replace @robot.receive so we can catch if the functions recurses\n-        oldReceive = @robot.receive\n-        @robot.receive = sinon.spy()\n-\n-        @robot.listeners = [\n-          matchingListener\n-        ]\n-\n-        # Call the original receive method that we want to test\n-        oldReceive.call @robot, testMessage, done\n-\n-        # Ensure the function did not recurse\n-        expect(@robot.receive).to.not.have.been.called\n-\n-      it 'stops processing if a listener marks the message as done', (done) ->\n-        testMessage = new TextMessage(@user, 'message123')\n-\n-        matchingListener =\n-          call: (message, middleware, cb) ->\n-            message.done = true\n-            # Listener must have matched\n-            cb(true)\n-\n-        listenerSpy =\n-          call: sinon.spy()\n-\n-        @robot.listeners = [\n-          matchingListener\n-          listenerSpy\n-        ]\n-\n-        @robot.receive testMessage, ->\n-          expect(listenerSpy.call).to.not.have.been.called\n-          done()\n-\n-      it 'gracefully handles listener uncaughtExceptions (move on to next listener)', (done) ->\n-        testMessage = {}\n-        theError = new Error()\n-\n-        badListener =\n-          call: ->\n-            throw theError\n-\n-        goodListenerCalled = false\n-        goodListener =\n-          call: (_, middleware, cb) ->\n-            goodListenerCalled = true\n-            cb(true)\n-\n-        @robot.listeners = [\n-          badListener\n-          goodListener\n-        ]\n-\n-        @robot.emit = (name, err, response) ->\n-          expect(name).to.equal('error')\n-          expect(err).to.equal(theError)\n-          expect(response.message).to.equal(testMessage)\n-        sinon.spy(@robot, 'emit')\n-\n-        @robot.receive testMessage, () =>\n-          expect(@robot.emit).to.have.been.called\n-          expect(goodListenerCalled).to.be.ok\n-          done()\n-\n-      it 'executes the callback after the function returns when there are no listeners', (done) ->\n-        testMessage = new TextMessage @user, 'message123'\n-        finished = false\n-        @robot.receive testMessage, ->\n-          expect(finished).to.be.ok\n-          done()\n-        finished = true\n-\n-    describe '#loadFile', ->\n-      beforeEach ->\n-        @sandbox = sinon.sandbox.create()\n-\n-      afterEach ->\n-        @sandbox.restore()\n-\n-      it 'should require the specified file', ->\n-        module = require 'module'\n-\n-        script = sinon.spy (robot) ->\n-        @sandbox.stub(module, '_load').returns(script)\n-        @sandbox.stub @robot, 'parseHelp'\n-\n-        @robot.loadFile('./scripts', 'test-script.coffee')\n-        expect(module._load).to.have.been.calledWith('scripts/test-script')\n-\n-      describe 'proper script', ->\n-        beforeEach ->\n-          module = require 'module'\n-\n-          @script = sinon.spy (robot) ->\n-          @sandbox.stub(module, '_load').returns(@script)\n-          @sandbox.stub @robot, 'parseHelp'\n-\n-        it 'should call the script with the Robot', ->\n-          @robot.loadFile('./scripts', 'test-script.coffee')\n-          expect(@script).to.have.been.calledWith(@robot)\n-\n-        it 'should parse the script documentation', ->\n-          @robot.loadFile('./scripts', 'test-script.coffee')\n-          expect(@robot.parseHelp).to.have.been.calledWith('scripts/test-script.coffee')\n-\n-      describe 'non-Function script', ->\n-        beforeEach ->\n-          module = require 'module'\n-\n-          @script = {}\n-          @sandbox.stub(module, '_load').returns(@script)\n-          @sandbox.stub @robot, 'parseHelp'\n-\n-        it 'logs a warning', ->\n-          sinon.stub @robot.logger, 'warning'\n-          @robot.loadFile('./scripts', 'test-script.coffee')\n-          expect(@robot.logger.warning).to.have.been.called\n-\n-  describe 'Listener Registration', ->\n-    describe '#listen', ->\n-      it 'forwards the matcher, options, and callback to Listener', ->\n-        callback = sinon.spy()\n-        matcher = sinon.spy()\n-        options = {}\n-\n-        @robot.listen(matcher, options, callback)\n-        testListener = @robot.listeners[0]\n-\n-        expect(testListener.matcher).to.equal(matcher)\n-        expect(testListener.callback).to.equal(callback)\n-        expect(testListener.options).to.equal(options)\n-\n-    describe '#hear', ->\n-      it 'matches TextMessages', ->\n-        callback = sinon.spy()\n-        testMessage = new TextMessage(@user, 'message123')\n-        testRegex = /^message123$/\n-\n-        @robot.hear(testRegex, callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.be.ok\n-\n-      it 'does not match EnterMessages', ->\n-        callback = sinon.spy()\n-        testMessage = new EnterMessage(@user)\n-        testRegex = /.*/\n-\n-        @robot.hear(testRegex, callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.not.be.ok\n-\n-    describe '#respond', ->\n-      it 'matches TextMessages addressed to the robot', ->\n-        callback = sinon.spy()\n-        testMessage = new TextMessage(@user, 'TestHubot message123')\n-        testRegex = /message123$/\n-\n-        @robot.respond(testRegex, callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.be.ok\n-\n-      it 'does not match EnterMessages', ->\n-        callback = sinon.spy()\n-        testMessage = new EnterMessage(@user)\n-        testRegex = /.*/\n-\n-        @robot.respond(testRegex, callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.not.be.ok\n-\n-    describe '#enter', ->\n-      it 'matches EnterMessages', ->\n-        callback = sinon.spy()\n-        testMessage = new EnterMessage(@user)\n-\n-        @robot.enter(callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.be.ok\n-\n-      it 'does not match TextMessages', ->\n-        callback = sinon.spy()\n-        testMessage = new TextMessage(@user, 'message123')\n-\n-        @robot.enter(callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.not.be.ok\n-\n-    describe '#leave', ->\n-      it 'matches LeaveMessages', ->\n-        callback = sinon.spy()\n-        testMessage = new LeaveMessage(@user)\n-\n-        @robot.leave(callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.be.ok\n-\n-      it 'does not match TextMessages', ->\n-        callback = sinon.spy()\n-        testMessage = new TextMessage(@user, 'message123')\n-\n-        @robot.leave(callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.not.be.ok\n-\n-    describe '#topic', ->\n-      it 'matches TopicMessages', ->\n-        callback = sinon.spy()\n-        testMessage = new TopicMessage(@user)\n-\n-        @robot.topic(callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.be.ok\n-\n-      it 'does not match TextMessages', ->\n-        callback = sinon.spy()\n-        testMessage = new TextMessage(@user, 'message123')\n-\n-        @robot.topic(callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.not.be.ok\n-\n-    describe '#catchAll', ->\n-      it 'matches CatchAllMessages', ->\n-        callback = sinon.spy()\n-        testMessage = new CatchAllMessage(new TextMessage(@user, 'message123'))\n-\n-        @robot.catchAll(callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.be.ok\n-\n-      it 'does not match TextMessages', ->\n-        callback = sinon.spy()\n-        testMessage = new TextMessage(@user, 'message123')\n-\n-        @robot.catchAll(callback)\n-        testListener = @robot.listeners[0]\n-        result = testListener.matcher(testMessage)\n-\n-        expect(result).to.not.be.ok\n-\n-  describe 'Message Processing', ->\n-    it 'calls a matching listener', (done) ->\n-      testMessage = new TextMessage(@user, 'message123')\n-      @robot.hear /^message123$/, (response) ->\n-        expect(response.message).to.equal(testMessage)\n-        done()\n-      @robot.receive testMessage\n-\n-    it 'calls multiple matching listeners', (done) ->\n-      testMessage = new TextMessage(@user, 'message123')\n-\n-      listenersCalled = 0\n-      listenerCallback = (response) ->\n-        expect(response.message).to.equal(testMessage)\n-        listenersCalled++\n-\n-      @robot.hear /^message123$/, listenerCallback\n-      @robot.hear /^message123$/, listenerCallback\n-\n-      @robot.receive testMessage, ->\n-        expect(listenersCalled).to.equal(2)\n-        done()\n-\n-    it 'calls the catch-all listener if no listeners match', (done) ->\n-      testMessage = new TextMessage(@user, 'message123')\n-\n-      listenerCallback = sinon.spy()\n-      @robot.hear /^no-matches$/, listenerCallback\n-\n-      @robot.catchAll (response) ->\n-        expect(listenerCallback).to.not.have.been.called\n-        expect(response.message).to.equal(testMessage)\n-        done()\n-\n-      @robot.receive testMessage\n-\n-    it 'does not call the catch-all listener if any listener matched', (done) ->\n-      testMessage = new TextMessage(@user, 'message123')\n-\n-      listenerCallback = sinon.spy()\n-      @robot.hear /^message123$/, listenerCallback\n-\n-      catchAllCallback = sinon.spy()\n-      @robot.catchAll catchAllCallback\n-\n-      @robot.receive testMessage, ->\n-        expect(listenerCallback).to.have.been.called.once\n-        expect(catchAllCallback).to.not.have.been.called\n-        done()\n-\n-    it 'stops processing if message.finish() is called synchronously', (done) ->\n-      testMessage = new TextMessage(@user, 'message123')\n-\n-      @robot.hear /^message123$/, (response) ->\n-        response.message.finish()\n-\n-      listenerCallback = sinon.spy()\n-      @robot.hear /^message123$/, listenerCallback\n-\n-      @robot.receive testMessage, ->\n-        expect(listenerCallback).to.not.have.been.called\n-        done()\n-\n-    it 'calls non-TextListener objects', (done) ->\n-      testMessage = new EnterMessage @user\n-\n-      @robot.enter (response) ->\n-        expect(response.message).to.equal(testMessage)\n-        done()\n-\n-      @robot.receive testMessage\n-\n-    it 'gracefully handles listener uncaughtExceptions (move on to next listener)', (done) ->\n-      testMessage = new TextMessage @user, 'message123'\n-      theError = new Error()\n-\n-      @robot.hear /^message123$/, ->\n-        throw theError\n-\n-      goodListenerCalled = false\n-      @robot.hear /^message123$/, ->\n-        goodListenerCalled = true\n-\n-      [badListener,goodListener] = @robot.listeners\n-\n-      @robot.emit = (name, err, response) ->\n-        expect(name).to.equal('error')\n-        expect(err).to.equal(theError)\n-        expect(response.message).to.equal(testMessage)\n-      sinon.spy(@robot, 'emit')\n-\n-      @robot.receive testMessage, () =>\n-        expect(@robot.emit).to.have.been.called\n-        expect(goodListenerCalled).to.be.ok\n-        done()\n-\n-    describe 'Listener Middleware', ->\n-      it 'allows listener callback execution', (testDone) ->\n-        listenerCallback = sinon.spy()\n-        @robot.hear /^message123$/, listenerCallback\n-        @robot.listenerMiddleware (context, next, done) ->\n-          # Allow Listener callback execution\n-          next done\n-\n-        testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, ->\n-          expect(listenerCallback).to.have.been.called\n-          testDone()\n-\n-      it 'can block listener callback execution', (testDone) ->\n-        listenerCallback = sinon.spy()\n-        @robot.hear /^message123$/, listenerCallback\n-        @robot.listenerMiddleware (context, next, done) ->\n-          # Block Listener callback execution\n-          done()\n-\n-        testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, ->\n-          expect(listenerCallback).to.not.have.been.called\n-          testDone()\n-\n-      it 'receives the correct arguments', (testDone) ->\n-        @robot.hear /^message123$/, ->\n-        testListener = @robot.listeners[0]\n-        testMessage = new TextMessage @user, 'message123'\n-\n-        @robot.listenerMiddleware (context, next, done) =>\n-          # Escape middleware error handling for clearer test failures\n-          process.nextTick () =>\n-            expect(context.listener).to.equal(testListener)\n-            expect(context.response.message).to.equal(testMessage)\n-            expect(next).to.be.a('function')\n-            expect(done).to.be.a('function')\n-            testDone()\n-\n-        @robot.receive testMessage\n-\n-      it 'executes middleware in order of definition', (testDone) ->\n-        execution = []\n-\n-        testMiddlewareA = (context, next, done) ->\n-          execution.push 'middlewareA'\n-          next ->\n-            execution.push 'doneA'\n-            done()\n-\n-        testMiddlewareB = (context, next, done) ->\n-          execution.push 'middlewareB'\n-          next ->\n-            execution.push 'doneB'\n-            done()\n-\n-        @robot.listenerMiddleware testMiddlewareA\n-        @robot.listenerMiddleware testMiddlewareB\n-\n-        @robot.hear /^message123$/, ->\n-          execution.push 'listener'\n-\n-        testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, ->\n-          expect(execution).to.deep.equal([\n-            'middlewareA'\n-            'middlewareB'\n-            'listener'\n-            'doneB'\n-            'doneA'\n-          ])\n-          testDone()\n-\n-    describe 'Receive Middleware', ->\n-      it 'fires for all messages, including non-matching ones', (testDone) ->\n-        middlewareSpy = sinon.spy()\n-        listenerCallback = sinon.spy()\n-        @robot.hear /^message123$/, listenerCallback\n-        @robot.receiveMiddleware (context, next, done) ->\n-          middlewareSpy()\n-          next(done)\n-\n-        testMessage = new TextMessage @user, 'not message 123'\n-\n-        @robot.receive testMessage, () ->\n-          expect(listenerCallback).to.not.have.been.called\n-          expect(middlewareSpy).to.have.been.called\n-          testDone()\n-\n-      it 'can block listener execution', (testDone) ->\n-        middlewareSpy = sinon.spy()\n-        listenerCallback = sinon.spy()\n-        @robot.hear /^message123$/, listenerCallback\n-        @robot.receiveMiddleware (context, next, done) ->\n-          # Block Listener callback execution\n-          middlewareSpy()\n-          done()\n-\n-        testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, () ->\n-          expect(listenerCallback).to.not.have.been.called\n-          expect(middlewareSpy).to.have.been.called\n-          testDone()\n-\n-      it 'receives the correct arguments', (testDone) ->\n-        @robot.hear /^message123$/, () ->\n-        testMessage = new TextMessage @user, 'message123'\n-\n-        @robot.receiveMiddleware (context, next, done) ->\n-          # Escape middleware error handling for clearer test failures\n-          expect(context.response.message).to.equal(testMessage)\n-          expect(next).to.be.a('function')\n-          expect(done).to.be.a('function')\n-          testDone()\n-          next(done)\n-\n-        @robot.receive testMessage\n-\n-      it 'executes receive middleware in order of definition', (testDone) ->\n-        execution = []\n-\n-        testMiddlewareA = (context, next, done) ->\n-          execution.push 'middlewareA'\n-          next () ->\n-            execution.push 'doneA'\n-            done()\n-\n-        testMiddlewareB = (context, next, done) ->\n-          execution.push 'middlewareB'\n-          next () ->\n-            execution.push 'doneB'\n-            done()\n-\n-        @robot.receiveMiddleware testMiddlewareA\n-        @robot.receiveMiddleware testMiddlewareB\n-\n-        @robot.hear /^message123$/, () ->\n-          execution.push 'listener'\n-\n-        testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, () ->\n-          expect(execution).to.deep.equal([\n-            'middlewareA'\n-            'middlewareB'\n-            'listener'\n-            'doneB'\n-            'doneA'\n-          ])\n-          testDone()\n-\n-      it 'allows editing the message portion of the given response', (testDone) ->\n-        execution = []\n-\n-        testMiddlewareA = (context, next, done) ->\n-          context.response.message.text = 'foobar'\n-          next()\n-\n-        testMiddlewareB = (context, next, done) ->\n-          # Subsequent middleware should see the modified message\n-          expect(context.response.message.text).to.equal(\"foobar\")\n-          next()\n-\n-        @robot.receiveMiddleware testMiddlewareA\n-        @robot.receiveMiddleware testMiddlewareB\n-\n-        testCallback = sinon.spy()\n-        # We'll never get to this if testMiddlewareA has not modified the message.\n-        @robot.hear /^foobar$/, testCallback\n-\n-        testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, ->\n-          expect(testCallback).to.have.been.called\n-          testDone()\n-\n-    describe 'Response Middleware', ->\n-      it 'executes response middleware in order', (testDone) ->\n-        @robot.adapter.send = sendSpy = sinon.spy()\n-        listenerCallback = sinon.spy()\n-        @robot.hear /^message123$/, (response) ->\n-          response.send \"foobar, sir, foobar.\"\n-\n-        @robot.responseMiddleware (context, next, done) ->\n-          context.strings[0] = context.strings[0].replace(/foobar/g, \"barfoo\")\n-          next()\n-\n-        @robot.responseMiddleware (context, next, done) ->\n-          context.strings[0] = context.strings[0].replace(/barfoo/g, \"replaced bar-foo\")\n-          next()\n-\n-        testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, () ->\n-          expect(sendSpy.getCall(0).args[1]).to.equal('replaced bar-foo, sir, replaced bar-foo.')\n-          testDone()\n-\n-      it 'allows replacing outgoing strings', (testDone) ->\n-        @robot.adapter.send = sendSpy = sinon.spy()\n-        listenerCallback = sinon.spy()\n-        @robot.hear /^message123$/, (response) ->\n-          response.send \"foobar, sir, foobar.\"\n-\n-        @robot.responseMiddleware (context, next, done) ->\n-          context.strings = [\"whatever I want.\"]\n-          next()\n-\n-        testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, () ->\n-          expect(sendSpy.getCall(0).args[1]).to.deep.equal(\"whatever I want.\")\n-          testDone()\n-\n-      it 'marks plaintext as plaintext', (testDone) ->\n-        @robot.adapter.send = sendSpy = sinon.spy()\n-        listenerCallback = sinon.spy()\n-        @robot.hear /^message123$/, (response) ->\n-          response.send \"foobar, sir, foobar.\"\n-        @robot.hear /^message456$/, (response) ->\n-          response.play \"good luck with that\"\n-\n-        method = undefined\n-        plaintext = undefined\n-        @robot.responseMiddleware (context, next, done) ->\n-          method = context.method\n-          plaintext = context.plaintext\n-          next(done)\n-\n-        testMessage = new TextMessage @user, 'message123'\n-\n-        @robot.receive testMessage, () =>\n-          expect(plaintext).to.equal true\n-          expect(method).to.equal \"send\"\n-          testMessage2 = new TextMessage @user, 'message456'\n-          @robot.receive testMessage2, () ->\n-            expect(plaintext).to.equal undefined\n-            expect(method).to.equal \"play\"\n-            testDone()\n-\n-      it 'does not send trailing functions to middleware', (testDone) ->\n-        @robot.adapter.send = sendSpy = sinon.spy()\n-        asserted = false\n-        postSendCallback = ->\n-        @robot.hear /^message123$/, (response) ->\n-          response.send \"foobar, sir, foobar.\", postSendCallback\n-\n-        @robot.responseMiddleware (context, next, done) ->\n-          # We don't send the callback function to middleware, so it's not here.\n-          expect(context.strings).to.deep.equal [\"foobar, sir, foobar.\"]\n-          expect(context.method).to.equal \"send\"\n-          asserted = true\n-          next()\n-\n-        testMessage = new TextMessage @user, 'message123'\n-        @robot.receive testMessage, ->\n-          expect(asserted).to.equal(true)\n-          expect(sendSpy.getCall(0).args[1]).to.equal('foobar, sir, foobar.')\n-          expect(sendSpy.getCall(0).args[2]).to.equal(postSendCallback)\n-          testDone()", "changes": 844}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/test/robot_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/test/robot_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "test/robot_test.js", "sha": "0b720e7f72c4812b1afbc11c4709a402927a4e01", "additions": 998, "patch": "@@ -0,0 +1,998 @@\n+'use strict'\n+\n+/* global describe, beforeEach, it, afterEach */\n+/* eslint-disable no-unused-expressions */\n+\n+// Assertions and Stubbing\n+const chai = require('chai')\n+const sinon = require('sinon')\n+chai.use(require('sinon-chai'))\n+\n+const expect = chai.expect\n+\n+// Hubot classes\n+const Robot = require('../src/robot')\n+const CatchAllMessage = require('../src/message').CatchAllMessage\n+const EnterMessage = require('../src/message').EnterMessage\n+const LeaveMessage = require('../src/message').LeaveMessage\n+const TextMessage = require('../src/message').TextMessage\n+const TopicMessage = require('../src/message').TopicMessage\n+\n+// mock `hubot-mock-adapter` module from fixture\n+const mockery = require('mockery')\n+\n+describe('Robot', function () {\n+  beforeEach(function () {\n+    mockery.enable({\n+      warnOnReplace: false,\n+      warnOnUnregistered: false\n+    })\n+    mockery.registerMock('hubot-mock-adapter', require('./fixtures/mock-adapter'))\n+    this.robot = new Robot(null, 'mock-adapter', true, 'TestHubot')\n+    this.robot.alias = 'Hubot'\n+    this.robot.run()\n+\n+    // Re-throw AssertionErrors for clearer test failures\n+    this.robot.on('error', function (name, err, response) {\n+      if ((err != null ? err.constructor : undefined) == null) { }\n+      if (err.constructor.name === 'AssertionError') {\n+        process.nextTick(function () {\n+          throw err\n+        })\n+      }\n+    })\n+\n+    this.user = this.robot.brain.userForId('1', {\n+      name: 'hubottester',\n+      room: '#mocha'\n+    })\n+  })\n+\n+  afterEach(function () {\n+    mockery.disable()\n+    this.robot.shutdown()\n+  })\n+\n+  describe('Unit Tests', function () {\n+    describe('#http', function () {\n+      beforeEach(function () {\n+        const url = 'http://localhost'\n+        this.httpClient = this.robot.http(url)\n+      })\n+\n+      it('creates a new ScopedHttpClient', function () {\n+        // 'instanceOf' check doesn't work here due to the design of\n+        // ScopedHttpClient\n+        expect(this.httpClient).to.have.property('get')\n+        expect(this.httpClient).to.have.property('post')\n+      })\n+\n+      it('passes options through to the ScopedHttpClient', function () {\n+        const agent = {}\n+        const httpClient = this.robot.http('http://localhost', {agent})\n+        expect(httpClient.options.agent).to.equal(agent)\n+      })\n+\n+      it('sets a sane user agent', function () {\n+        expect(this.httpClient.options.headers['User-Agent']).to.contain('Hubot')\n+      })\n+\n+      it('merges in any global http options', function () {\n+        const agent = {}\n+        this.robot.globalHttpOptions = {agent}\n+        const httpClient = this.robot.http('http://localhost')\n+        expect(httpClient.options.agent).to.equal(agent)\n+      })\n+\n+      it('local options override global http options', function () {\n+        const agentA = {}\n+        const agentB = {}\n+        this.robot.globalHttpOptions = {agent: agentA}\n+        const httpClient = this.robot.http('http://localhost', {agent: agentB})\n+        expect(httpClient.options.agent).to.equal(agentB)\n+      })\n+    })\n+\n+    describe('#respondPattern', function () {\n+      it('matches messages starting with robot\\'s name', function () {\n+        const testMessage = this.robot.name + 'message123'\n+        const testRegex = /(.*)/\n+\n+        const pattern = this.robot.respondPattern(testRegex)\n+        expect(testMessage).to.match(pattern)\n+        const match = testMessage.match(pattern)[1]\n+        expect(match).to.equal('message123')\n+      })\n+\n+      it('matches messages starting with robot\\'s alias', function () {\n+        const testMessage = this.robot.alias + 'message123'\n+        const testRegex = /(.*)/\n+\n+        const pattern = this.robot.respondPattern(testRegex)\n+        expect(testMessage).to.match(pattern)\n+        const match = testMessage.match(pattern)[1]\n+        expect(match).to.equal('message123')\n+      })\n+\n+      it('does not match unaddressed messages', function () {\n+        const testMessage = 'message123'\n+        const testRegex = /(.*)/\n+\n+        const pattern = this.robot.respondPattern(testRegex)\n+        expect(testMessage).to.not.match(pattern)\n+      })\n+\n+      it('matches properly when name is substring of alias', function () {\n+        this.robot.name = 'Meg'\n+        this.robot.alias = 'Megan'\n+        const testMessage1 = this.robot.name + ' message123'\n+        const testMessage2 = this.robot.alias + ' message123'\n+        const testRegex = /(.*)/\n+\n+        const pattern = this.robot.respondPattern(testRegex)\n+\n+        expect(testMessage1).to.match(pattern)\n+        const match1 = testMessage1.match(pattern)[1]\n+        expect(match1).to.equal('message123')\n+\n+        expect(testMessage2).to.match(pattern)\n+        const match2 = testMessage2.match(pattern)[1]\n+        expect(match2).to.equal('message123')\n+      })\n+\n+      it('matches properly when alias is substring of name', function () {\n+        this.robot.name = 'Megan'\n+        this.robot.alias = 'Meg'\n+        const testMessage1 = this.robot.name + ' message123'\n+        const testMessage2 = this.robot.alias + ' message123'\n+        const testRegex = /(.*)/\n+\n+        const pattern = this.robot.respondPattern(testRegex)\n+\n+        expect(testMessage1).to.match(pattern)\n+        const match1 = testMessage1.match(pattern)[1]\n+        expect(match1).to.equal('message123')\n+\n+        expect(testMessage2).to.match(pattern)\n+        const match2 = testMessage2.match(pattern)[1]\n+        expect(match2).to.equal('message123')\n+      })\n+    })\n+\n+    describe('#listen', () =>\n+      it('registers a new listener directly', function () {\n+        expect(this.robot.listeners).to.have.length(0)\n+        this.robot.listen(function () {}, function () {})\n+        expect(this.robot.listeners).to.have.length(1)\n+      })\n+    )\n+\n+    describe('#hear', () =>\n+      it('registers a new listener directly', function () {\n+        expect(this.robot.listeners).to.have.length(0)\n+        this.robot.hear(/.*/, function () {})\n+        expect(this.robot.listeners).to.have.length(1)\n+      })\n+    )\n+\n+    describe('#respond', () =>\n+      it('registers a new listener using hear', function () {\n+        sinon.spy(this.robot, 'hear')\n+        this.robot.respond(/.*/, function () {})\n+        expect(this.robot.hear).to.have.been.called\n+      })\n+    )\n+\n+    describe('#enter', () =>\n+      it('registers a new listener using listen', function () {\n+        sinon.spy(this.robot, 'listen')\n+        this.robot.enter(function () {})\n+        expect(this.robot.listen).to.have.been.called\n+      })\n+    )\n+\n+    describe('#leave', () =>\n+      it('registers a new listener using listen', function () {\n+        sinon.spy(this.robot, 'listen')\n+        this.robot.leave(function () {})\n+        expect(this.robot.listen).to.have.been.called\n+      })\n+    )\n+\n+    describe('#topic', () =>\n+      it('registers a new listener using listen', function () {\n+        sinon.spy(this.robot, 'listen')\n+        this.robot.topic(function () {})\n+        expect(this.robot.listen).to.have.been.called\n+      })\n+    )\n+\n+    describe('#catchAll', () =>\n+      it('registers a new listener using listen', function () {\n+        sinon.spy(this.robot, 'listen')\n+        this.robot.catchAll(function () {})\n+        expect(this.robot.listen).to.have.been.called\n+      })\n+    )\n+\n+    describe('#receive', function () {\n+      it('calls all registered listeners', function (done) {\n+        // Need to use a real Message so that the CatchAllMessage constructor works\n+        const testMessage = new TextMessage(this.user, 'message123')\n+\n+        const listener = {\n+          call (response, middleware, cb) {\n+            cb()\n+          }\n+        }\n+        sinon.spy(listener, 'call')\n+\n+        this.robot.listeners = [\n+          listener,\n+          listener,\n+          listener,\n+          listener\n+        ]\n+\n+        this.robot.receive(testMessage, function () {\n+          // When no listeners match, each listener is called twice: once with\n+          // the original message and once with a CatchAll message\n+          expect(listener.call).to.have.callCount(8)\n+          done()\n+        })\n+      })\n+\n+      it('sends a CatchAllMessage if no listener matches', function (done) {\n+        // Testing for recursion with a new CatchAllMessage that wraps the\n+        // original message\n+\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        this.robot.listeners = []\n+\n+        // Replace @robot.receive so we can catch when the functions recurses\n+        const oldReceive = this.robot.receive\n+        this.robot.receive = function (message, cb) {\n+          expect(message).to.be.instanceof(CatchAllMessage)\n+          expect(message.message).to.be.equal(testMessage)\n+          cb()\n+        }\n+        sinon.spy(this.robot, 'receive')\n+\n+        // Call the original receive method that we want to test\n+        oldReceive.call(this.robot, testMessage, () => {\n+          expect(this.robot.receive).to.have.been.called\n+          done()\n+        })\n+      })\n+\n+      it('does not trigger a CatchAllMessage if a listener matches', function (done) {\n+        const testMessage = new TextMessage(this.user, 'message123')\n+\n+        const matchingListener = {\n+          call (message, middleware, doesMatch) {\n+            // indicate that the message matched the listener\n+            doesMatch(true)\n+          }\n+        }\n+\n+        // Replace @robot.receive so we can catch if the functions recurses\n+        const oldReceive = this.robot.receive\n+        this.robot.receive = sinon.spy()\n+\n+        this.robot.listeners = [\n+          matchingListener\n+        ]\n+\n+        // Call the original receive method that we want to test\n+        oldReceive.call(this.robot, testMessage, done)\n+\n+        // Ensure the function did not recurse\n+        expect(this.robot.receive).to.not.have.been.called\n+      })\n+\n+      it('stops processing if a listener marks the message as done', function (done) {\n+        const testMessage = new TextMessage(this.user, 'message123')\n+\n+        const matchingListener = {\n+          call (message, middleware, doesMatch) {\n+            message.done = true\n+            // Listener must have matched\n+            doesMatch(true)\n+          }\n+        }\n+\n+        const listenerSpy =\n+          {call: sinon.spy()}\n+\n+        this.robot.listeners = [\n+          matchingListener,\n+          listenerSpy\n+        ]\n+\n+        this.robot.receive(testMessage, function () {\n+          expect(listenerSpy.call).to.not.have.been.called\n+          done()\n+        })\n+      })\n+\n+      it('gracefully handles listener uncaughtExceptions (move on to next listener)', function (done) {\n+        const testMessage = {}\n+        const theError = new Error()\n+\n+        const badListener = {\n+          call () {\n+            throw theError\n+          }\n+        }\n+\n+        let goodListenerCalled = false\n+        const goodListener = {\n+          call (_, middleware, doesMatch) {\n+            goodListenerCalled = true\n+            doesMatch(true)\n+          }\n+        }\n+\n+        this.robot.listeners = [\n+          badListener,\n+          goodListener\n+        ]\n+\n+        this.robot.emit = function (name, err, response) {\n+          expect(name).to.equal('error')\n+          expect(err).to.equal(theError)\n+          expect(response.message).to.equal(testMessage)\n+        }\n+        sinon.spy(this.robot, 'emit')\n+\n+        this.robot.receive(testMessage, () => {\n+          expect(this.robot.emit).to.have.been.called\n+          expect(goodListenerCalled).to.be.ok\n+          done()\n+        })\n+      })\n+\n+      it('executes the callback after the function returns when there are no listeners', function (done) {\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        let finished = false\n+        this.robot.receive(testMessage, function () {\n+          expect(finished).to.be.ok\n+          done()\n+        })\n+        finished = true\n+      })\n+    })\n+\n+    describe('#loadFile', function () {\n+      beforeEach(function () {\n+        this.sandbox = sinon.sandbox.create()\n+      })\n+\n+      afterEach(function () {\n+        this.sandbox.restore()\n+      })\n+\n+      it('should require the specified file', function () {\n+        const module = require('module')\n+\n+        const script = sinon.spy(function (robot) {})\n+        this.sandbox.stub(module, '_load').returns(script)\n+        this.sandbox.stub(this.robot, 'parseHelp')\n+\n+        this.robot.loadFile('./scripts', 'test-script.js')\n+        expect(module._load).to.have.been.calledWith('scripts/test-script')\n+      })\n+\n+      describe('proper script', function () {\n+        beforeEach(function () {\n+          const module = require('module')\n+\n+          this.script = sinon.spy(function (robot) {})\n+          this.sandbox.stub(module, '_load').returns(this.script)\n+          this.sandbox.stub(this.robot, 'parseHelp')\n+        })\n+\n+        it('should call the script with the Robot', function () {\n+          this.robot.loadFile('./scripts', 'test-script.js')\n+          expect(this.script).to.have.been.calledWith(this.robot)\n+        })\n+\n+        it('should parse the script documentation', function () {\n+          this.robot.loadFile('./scripts', 'test-script.js')\n+          expect(this.robot.parseHelp).to.have.been.calledWith('scripts/test-script.js')\n+        })\n+      })\n+\n+      describe('non-Function script', function () {\n+        beforeEach(function () {\n+          const module = require('module')\n+\n+          this.script = {}\n+          this.sandbox.stub(module, '_load').returns(this.script)\n+          this.sandbox.stub(this.robot, 'parseHelp')\n+        })\n+\n+        it('logs a warning', function () {\n+          sinon.stub(this.robot.logger, 'warning')\n+          this.robot.loadFile('./scripts', 'test-script.js')\n+          expect(this.robot.logger.warning).to.have.been.called\n+        })\n+      })\n+    })\n+  })\n+\n+  describe('Listener Registration', function () {\n+    describe('#listen', () =>\n+      it('forwards the matcher, options, and callback to Listener', function () {\n+        const callback = sinon.spy()\n+        const matcher = sinon.spy()\n+        const options = {}\n+\n+        this.robot.listen(matcher, options, callback)\n+        const testListener = this.robot.listeners[0]\n+\n+        expect(testListener.matcher).to.equal(matcher)\n+        expect(testListener.callback).to.equal(callback)\n+        expect(testListener.options).to.equal(options)\n+      })\n+    )\n+\n+    describe('#hear', function () {\n+      it('matches TextMessages', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        const testRegex = /^message123$/\n+\n+        this.robot.hear(testRegex, callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+      })\n+\n+      it('does not match EnterMessages', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new EnterMessage(this.user)\n+        const testRegex = /.*/\n+\n+        this.robot.hear(testRegex, callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+      })\n+    })\n+\n+    describe('#respond', function () {\n+      it('matches TextMessages addressed to the robot', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new TextMessage(this.user, 'TestHubot message123')\n+        const testRegex = /message123$/\n+\n+        this.robot.respond(testRegex, callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+      })\n+\n+      it('does not match EnterMessages', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new EnterMessage(this.user)\n+        const testRegex = /.*/\n+\n+        this.robot.respond(testRegex, callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+      })\n+    })\n+\n+    describe('#enter', function () {\n+      it('matches EnterMessages', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new EnterMessage(this.user)\n+\n+        this.robot.enter(callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+      })\n+\n+      it('does not match TextMessages', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new TextMessage(this.user, 'message123')\n+\n+        this.robot.enter(callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+      })\n+    })\n+\n+    describe('#leave', function () {\n+      it('matches LeaveMessages', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new LeaveMessage(this.user)\n+\n+        this.robot.leave(callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+      })\n+\n+      it('does not match TextMessages', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new TextMessage(this.user, 'message123')\n+\n+        this.robot.leave(callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+      })\n+    })\n+\n+    describe('#topic', function () {\n+      it('matches TopicMessages', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new TopicMessage(this.user)\n+\n+        this.robot.topic(callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+      })\n+\n+      it('does not match TextMessages', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new TextMessage(this.user, 'message123')\n+\n+        this.robot.topic(callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+      })\n+    })\n+\n+    describe('#catchAll', function () {\n+      it('matches CatchAllMessages', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new CatchAllMessage(new TextMessage(this.user, 'message123'))\n+\n+        this.robot.catchAll(callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.be.ok\n+      })\n+\n+      it('does not match TextMessages', function () {\n+        const callback = sinon.spy()\n+        const testMessage = new TextMessage(this.user, 'message123')\n+\n+        this.robot.catchAll(callback)\n+        const testListener = this.robot.listeners[0]\n+        const result = testListener.matcher(testMessage)\n+\n+        expect(result).to.not.be.ok\n+      })\n+    })\n+  })\n+\n+  describe('Message Processing', function () {\n+    it('calls a matching listener', function (done) {\n+      const testMessage = new TextMessage(this.user, 'message123')\n+      this.robot.hear(/^message123$/, function (response) {\n+        expect(response.message).to.equal(testMessage)\n+        done()\n+      })\n+      this.robot.receive(testMessage)\n+    })\n+\n+    it('calls multiple matching listeners', function (done) {\n+      const testMessage = new TextMessage(this.user, 'message123')\n+\n+      let listenersCalled = 0\n+      const listenerCallback = function (response) {\n+        expect(response.message).to.equal(testMessage)\n+        listenersCalled++\n+      }\n+\n+      this.robot.hear(/^message123$/, listenerCallback)\n+      this.robot.hear(/^message123$/, listenerCallback)\n+\n+      this.robot.receive(testMessage, function () {\n+        expect(listenersCalled).to.equal(2)\n+        done()\n+      })\n+    })\n+\n+    it('calls the catch-all listener if no listeners match', function (done) {\n+      const testMessage = new TextMessage(this.user, 'message123')\n+\n+      const listenerCallback = sinon.spy()\n+      this.robot.hear(/^no-matches$/, listenerCallback)\n+\n+      this.robot.catchAll(function (response) {\n+        expect(listenerCallback).to.not.have.been.called\n+        expect(response.message).to.equal(testMessage)\n+        done()\n+      })\n+\n+      this.robot.receive(testMessage)\n+    })\n+\n+    it('does not call the catch-all listener if any listener matched', function (done) {\n+      const testMessage = new TextMessage(this.user, 'message123')\n+\n+      const listenerCallback = sinon.spy()\n+      this.robot.hear(/^message123$/, listenerCallback)\n+\n+      const catchAllCallback = sinon.spy()\n+      this.robot.catchAll(catchAllCallback)\n+\n+      this.robot.receive(testMessage, function () {\n+        expect(listenerCallback).to.have.been.called.once\n+        expect(catchAllCallback).to.not.have.been.called\n+        done()\n+      })\n+    })\n+\n+    it('stops processing if message.finish() is called synchronously', function (done) {\n+      const testMessage = new TextMessage(this.user, 'message123')\n+\n+      this.robot.hear(/^message123$/, response => response.message.finish())\n+\n+      const listenerCallback = sinon.spy()\n+      this.robot.hear(/^message123$/, listenerCallback)\n+\n+      this.robot.receive(testMessage, function () {\n+        expect(listenerCallback).to.not.have.been.called\n+        done()\n+      })\n+    })\n+\n+    it('calls non-TextListener objects', function (done) {\n+      const testMessage = new EnterMessage(this.user)\n+\n+      this.robot.enter(function (response) {\n+        expect(response.message).to.equal(testMessage)\n+        done()\n+      })\n+\n+      this.robot.receive(testMessage)\n+    })\n+\n+    it('gracefully handles listener uncaughtExceptions (move on to next listener)', function (done) {\n+      const testMessage = new TextMessage(this.user, 'message123')\n+      const theError = new Error()\n+\n+      this.robot.hear(/^message123$/, function () {\n+        throw theError\n+      })\n+\n+      let goodListenerCalled = false\n+      this.robot.hear(/^message123$/, () => {\n+        goodListenerCalled = true\n+      })\n+\n+      this.robot.emit = function (name, err, response) {\n+        expect(name).to.equal('error')\n+        expect(err).to.equal(theError)\n+        expect(response.message).to.equal(testMessage)\n+      }\n+      sinon.spy(this.robot, 'emit')\n+\n+      this.robot.receive(testMessage, () => {\n+        expect(this.robot.emit).to.have.been.called\n+        expect(goodListenerCalled).to.be.ok\n+        done()\n+      })\n+    })\n+\n+    describe('Listener Middleware', function () {\n+      it('allows listener callback execution', function (testDone) {\n+        const listenerCallback = sinon.spy()\n+        this.robot.hear(/^message123$/, listenerCallback)\n+        this.robot.listenerMiddleware((context, next, done) =>\n+          // Allow Listener callback execution\n+          next(done)\n+        )\n+\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        this.robot.receive(testMessage, function () {\n+          expect(listenerCallback).to.have.been.called\n+          testDone()\n+        })\n+      })\n+\n+      it('can block listener callback execution', function (testDone) {\n+        const listenerCallback = sinon.spy()\n+        this.robot.hear(/^message123$/, listenerCallback)\n+        this.robot.listenerMiddleware((context, next, done) =>\n+          // Block Listener callback execution\n+          done()\n+        )\n+\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        this.robot.receive(testMessage, function () {\n+          expect(listenerCallback).to.not.have.been.called\n+          testDone()\n+        })\n+      })\n+\n+      it('receives the correct arguments', function (testDone) {\n+        this.robot.hear(/^message123$/, function () {})\n+        const testListener = this.robot.listeners[0]\n+        const testMessage = new TextMessage(this.user, 'message123')\n+\n+        this.robot.listenerMiddleware((context, next, done) => {\n+          // Escape middleware error handling for clearer test failures\n+          process.nextTick(() => {\n+            expect(context.listener).to.equal(testListener)\n+            expect(context.response.message).to.equal(testMessage)\n+            expect(next).to.be.a('function')\n+            expect(done).to.be.a('function')\n+            testDone()\n+          })\n+        })\n+\n+        this.robot.receive(testMessage)\n+      })\n+\n+      it('executes middleware in order of definition', function (testDone) {\n+        const execution = []\n+\n+        const testMiddlewareA = function (context, next, done) {\n+          execution.push('middlewareA')\n+          next(function () {\n+            execution.push('doneA')\n+            done()\n+          })\n+        }\n+\n+        const testMiddlewareB = function (context, next, done) {\n+          execution.push('middlewareB')\n+          next(function () {\n+            execution.push('doneB')\n+            done()\n+          })\n+        }\n+\n+        this.robot.listenerMiddleware(testMiddlewareA)\n+        this.robot.listenerMiddleware(testMiddlewareB)\n+\n+        this.robot.hear(/^message123$/, () => execution.push('listener'))\n+\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        this.robot.receive(testMessage, function () {\n+          expect(execution).to.deep.equal([\n+            'middlewareA',\n+            'middlewareB',\n+            'listener',\n+            'doneB',\n+            'doneA'\n+          ])\n+          testDone()\n+        })\n+      })\n+    })\n+\n+    describe('Receive Middleware', function () {\n+      it('fires for all messages, including non-matching ones', function (testDone) {\n+        const middlewareSpy = sinon.spy()\n+        const listenerCallback = sinon.spy()\n+        this.robot.hear(/^message123$/, listenerCallback)\n+        this.robot.receiveMiddleware(function (context, next, done) {\n+          middlewareSpy()\n+          next(done)\n+        })\n+\n+        const testMessage = new TextMessage(this.user, 'not message 123')\n+\n+        this.robot.receive(testMessage, function () {\n+          expect(listenerCallback).to.not.have.been.called\n+          expect(middlewareSpy).to.have.been.called\n+          testDone()\n+        })\n+      })\n+\n+      it('can block listener execution', function (testDone) {\n+        const middlewareSpy = sinon.spy()\n+        const listenerCallback = sinon.spy()\n+        this.robot.hear(/^message123$/, listenerCallback)\n+        this.robot.receiveMiddleware(function (context, next, done) {\n+          // Block Listener callback execution\n+          middlewareSpy()\n+          done()\n+        })\n+\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        this.robot.receive(testMessage, function () {\n+          expect(listenerCallback).to.not.have.been.called\n+          expect(middlewareSpy).to.have.been.called\n+          testDone()\n+        })\n+      })\n+\n+      it('receives the correct arguments', function (testDone) {\n+        this.robot.hear(/^message123$/, function () {})\n+        const testMessage = new TextMessage(this.user, 'message123')\n+\n+        this.robot.receiveMiddleware(function (context, next, done) {\n+          // Escape middleware error handling for clearer test failures\n+          expect(context.response.message).to.equal(testMessage)\n+          expect(next).to.be.a('function')\n+          expect(done).to.be.a('function')\n+          testDone()\n+          next(done)\n+        })\n+\n+        this.robot.receive(testMessage)\n+      })\n+\n+      it('executes receive middleware in order of definition', function (testDone) {\n+        const execution = []\n+\n+        const testMiddlewareA = function (context, next, done) {\n+          execution.push('middlewareA')\n+          next(function () {\n+            execution.push('doneA')\n+            done()\n+          })\n+        }\n+\n+        const testMiddlewareB = function (context, next, done) {\n+          execution.push('middlewareB')\n+          next(function () {\n+            execution.push('doneB')\n+            done()\n+          })\n+        }\n+\n+        this.robot.receiveMiddleware(testMiddlewareA)\n+        this.robot.receiveMiddleware(testMiddlewareB)\n+\n+        this.robot.hear(/^message123$/, () => execution.push('listener'))\n+\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        this.robot.receive(testMessage, function () {\n+          expect(execution).to.deep.equal([\n+            'middlewareA',\n+            'middlewareB',\n+            'listener',\n+            'doneB',\n+            'doneA'\n+          ])\n+          testDone()\n+        })\n+      })\n+\n+      it('allows editing the message portion of the given response', function (testDone) {\n+        const testMiddlewareA = function (context, next, done) {\n+          context.response.message.text = 'foobar'\n+          next()\n+        }\n+\n+        const testMiddlewareB = function (context, next, done) {\n+          // Subsequent middleware should see the modified message\n+          expect(context.response.message.text).to.equal('foobar')\n+          next()\n+        }\n+\n+        this.robot.receiveMiddleware(testMiddlewareA)\n+        this.robot.receiveMiddleware(testMiddlewareB)\n+\n+        const testCallback = sinon.spy()\n+        // We'll never get to this if testMiddlewareA has not modified the message.\n+        this.robot.hear(/^foobar$/, testCallback)\n+\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        this.robot.receive(testMessage, function () {\n+          expect(testCallback).to.have.been.called\n+          testDone()\n+        })\n+      })\n+    })\n+\n+    describe('Response Middleware', function () {\n+      it('executes response middleware in order', function (testDone) {\n+        let sendSpy\n+        this.robot.adapter.send = (sendSpy = sinon.spy())\n+        this.robot.hear(/^message123$/, response => response.send('foobar, sir, foobar.'))\n+\n+        this.robot.responseMiddleware(function (context, next, done) {\n+          context.strings[0] = context.strings[0].replace(/foobar/g, 'barfoo')\n+          next()\n+        })\n+\n+        this.robot.responseMiddleware(function (context, next, done) {\n+          context.strings[0] = context.strings[0].replace(/barfoo/g, 'replaced bar-foo')\n+          next()\n+        })\n+\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        this.robot.receive(testMessage, function () {\n+          expect(sendSpy.getCall(0).args[1]).to.equal('replaced bar-foo, sir, replaced bar-foo.')\n+          testDone()\n+        })\n+      })\n+\n+      it('allows replacing outgoing strings', function (testDone) {\n+        let sendSpy\n+        this.robot.adapter.send = (sendSpy = sinon.spy())\n+        this.robot.hear(/^message123$/, response => response.send('foobar, sir, foobar.'))\n+\n+        this.robot.responseMiddleware(function (context, next, done) {\n+          context.strings = ['whatever I want.']\n+          next()\n+        })\n+\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        this.robot.receive(testMessage, function () {\n+          expect(sendSpy.getCall(0).args[1]).to.deep.equal('whatever I want.')\n+          testDone()\n+        })\n+      })\n+\n+      it('marks plaintext as plaintext', function (testDone) {\n+        let sendSpy = sinon.spy()\n+        this.robot.adapter.send = sendSpy\n+        this.robot.hear(/^message123$/, response => response.send('foobar, sir, foobar.'))\n+        this.robot.hear(/^message456$/, response => response.play('good luck with that'))\n+\n+        let method\n+        let plaintext\n+        this.robot.responseMiddleware(function (context, next, done) {\n+          method = context.method\n+          plaintext = context.plaintext\n+          next(done)\n+        })\n+\n+        const testMessage = new TextMessage(this.user, 'message123')\n+\n+        this.robot.receive(testMessage, () => {\n+          expect(plaintext).to.equal(true)\n+          expect(method).to.equal('send')\n+          const testMessage2 = new TextMessage(this.user, 'message456')\n+          this.robot.receive(testMessage2, function () {\n+            expect(plaintext).to.equal(undefined)\n+            expect(method).to.equal('play')\n+            testDone()\n+          })\n+        })\n+      })\n+\n+      it('does not send trailing functions to middleware', function (testDone) {\n+        let sendSpy\n+        this.robot.adapter.send = (sendSpy = sinon.spy())\n+        let asserted = false\n+        const postSendCallback = function () {}\n+        this.robot.hear(/^message123$/, response => response.send('foobar, sir, foobar.', postSendCallback))\n+\n+        this.robot.responseMiddleware(function (context, next, done) {\n+          // We don't send the callback function to middleware, so it's not here.\n+          expect(context.strings).to.deep.equal(['foobar, sir, foobar.'])\n+          expect(context.method).to.equal('send')\n+          asserted = true\n+          next()\n+        })\n+\n+        const testMessage = new TextMessage(this.user, 'message123')\n+        this.robot.receive(testMessage, function () {\n+          expect(asserted).to.equal(true)\n+          expect(sendSpy.getCall(0).args[1]).to.equal('foobar, sir, foobar.')\n+          expect(sendSpy.getCall(0).args[2]).to.equal(postSendCallback)\n+          testDone()\n+        })\n+      })\n+    })\n+  })\n+})", "changes": 998}, {"status": "removed", "deletions": 20, "raw_url": "https://github.com/hubotio/hubot/raw/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/user_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/846aec66563baf61f1178ac8a6970f0e7a3df6e9/test/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/user_test.coffee?ref=846aec66563baf61f1178ac8a6970f0e7a3df6e9", "filename": "test/user_test.coffee", "sha": "cfe5af02c37aabb5c7727d711818573d20b2f1e1", "additions": 0, "patch": "@@ -1,20 +0,0 @@\n-{expect} = require 'chai'\n-User = require '../src/user'\n-\n-describe 'User', ->\n-  describe 'new', ->\n-    it 'uses id as the default name', ->\n-      user = new User('hubot')\n-\n-      expect(user.name).to.equal('hubot')\n-\n-    it 'sets attributes passed in', ->\n-      user = new User('hubot', foo: 1, bar: 2)\n-\n-      expect(user.foo).to.equal(1)\n-      expect(user.bar).to.equal(2)\n-\n-    it 'uses name attribute when passed in, not id', ->\n-      user = new User('hubot', name: 'tobuh')\n-\n-      expect(user.name).to.equal('tobuh')", "changes": 20}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/9987f073a467a07bbf53f1180bf945c18e58dee7/test/user_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/9987f073a467a07bbf53f1180bf945c18e58dee7/test/user_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/user_test.js?ref=9987f073a467a07bbf53f1180bf945c18e58dee7", "filename": "test/user_test.js", "sha": "cc1f3e03e879145aa6507d1ed44b52eb6be91f65", "additions": 29, "patch": "@@ -0,0 +1,29 @@\n+'use strict'\n+\n+/* global describe, it */\n+\n+const expect = require('chai').expect\n+const User = require('../src/user')\n+\n+describe('User', () =>\n+  describe('new', function () {\n+    it('uses id as the default name', function () {\n+      const user = new User('hubot')\n+\n+      expect(user.name).to.equal('hubot')\n+    })\n+\n+    it('sets attributes passed in', function () {\n+      const user = new User('hubot', {foo: 1, bar: 2})\n+\n+      expect(user.foo).to.equal(1)\n+      expect(user.bar).to.equal(2)\n+    })\n+\n+    it('uses name attribute when passed in, not id', function () {\n+      const user = new User('hubot', {name: 'tobuh'})\n+\n+      expect(user.name).to.equal('tobuh')\n+    })\n+  })\n+)", "changes": 29}], "1348": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=04c7bcd694f2cd3359e43f74fa7dc50c339887e2", "filename": "package.json", "sha": "27a19c429d38b4cf676ff20dab137bdcbc7b303e", "additions": 0, "patch": "@@ -26,7 +26,6 @@\n     \"scoped-http-client\": \"0.11.0\"\n   },\n   \"devDependencies\": {\n-    \"hubot-mock-adapter\": \"^1.0.0\",\n     \"coffee-errors\": \"0.8.6\",\n     \"mocha\": \"^2.1.0\",\n     \"mockery\": \"^1.4.0\",", "changes": 1}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/adapter_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/adapter_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/adapter_test.coffee?ref=04c7bcd694f2cd3359e43f74fa7dc50c339887e2", "filename": "test/adapter_test.coffee", "sha": "30932bd2c22f275fdaf775df84ab90abfea6ea69", "additions": 1, "patch": "@@ -4,7 +4,7 @@ chai.use require 'sinon-chai'\n \n expect = chai.expect\n \n-Adapter = require '../src/adapter.coffee'\n+Adapter = require '../src/adapter'\n \n describe 'Adapter', ->\n   beforeEach ->", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/brain_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/brain_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/brain_test.coffee?ref=04c7bcd694f2cd3359e43f74fa7dc50c339887e2", "filename": "test/brain_test.coffee", "sha": "e02e5f97fd1f4d89375c7c62bc9efcf6d4cc6f6b", "additions": 2, "patch": "@@ -6,8 +6,8 @@ chai.use require 'sinon-chai'\n { expect } = chai\n \n # Hubot classes\n-Brain = require '../src/brain.coffee'\n-User = require '../src/user.coffee'\n+Brain = require '../src/brain'\n+User = require '../src/user'\n \n describe 'Brain', ->\n   beforeEach ->", "changes": 4}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/fixtures/mock-adapter.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/fixtures/mock-adapter.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/fixtures/mock-adapter.coffee?ref=04c7bcd694f2cd3359e43f74fa7dc50c339887e2", "filename": "test/fixtures/mock-adapter.coffee", "sha": "535c81629bcc3dc5a23b39cef0ece616621bceed", "additions": 12, "patch": "@@ -0,0 +1,12 @@\n+Adapter = require('../..').Adapter\n+\n+class MockAdapter extends Adapter\n+  send: (envelope, strings...) -> @emit('send', envelope, strings)\n+  reply: (envelope, strings...) -> @emit('reply', envelope, strings)\n+  topic: (envelope, strings...) -> @emit('topic', envelope, strings)\n+  play: (envelope, strings...) -> @emit('play', envelope, strings)\n+\n+  run: -> @emit('connected')\n+  close: -> @emit('closed')\n+\n+module.exports.use = (robot) -> return new MockAdapter(robot)", "changes": 12}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/listener_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/listener_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/listener_test.coffee?ref=04c7bcd694f2cd3359e43f74fa7dc50c339887e2", "filename": "test/listener_test.coffee", "sha": "3a08b0b9bf518bebfd087641602453a063fd7cf1", "additions": 2, "patch": "@@ -8,8 +8,8 @@ chai.use require 'sinon-chai'\n # Hubot classes\n { CatchAllMessage, EnterMessage, TextMessage } = require '../src/message'\n { Listener, TextListener } = require '../src/listener'\n-Response = require '../src/response.coffee'\n-User = require '../src/user.coffee'\n+Response = require '../src/response'\n+User = require '../src/user'\n \n describe 'Listener', ->\n   beforeEach ->", "changes": 4}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/message_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/message_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/message_test.coffee?ref=04c7bcd694f2cd3359e43f74fa7dc50c339887e2", "filename": "test/message_test.coffee", "sha": "b6685ec8663e25f14bea05d39cb6425bd93c5945", "additions": 1, "patch": "@@ -6,7 +6,7 @@ chai.use require 'sinon-chai'\n { expect } = chai\n \n # Hubot classes\n-User = require '../src/user.coffee'\n+User = require '../src/user'\n { CatchAllMessage, EnterMessage, Message, TextMessage } = require '../src/message'\n \n describe 'Message', ->", "changes": 2}, {"status": "modified", "deletions": 15, "raw_url": "https://github.com/hubotio/hubot/raw/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/middleware_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/middleware_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/middleware_test.coffee?ref=04c7bcd694f2cd3359e43f74fa7dc50c339887e2", "filename": "test/middleware_test.coffee", "sha": "82478a6a4e53934db6e3d0804f76ab2975892957", "additions": 9, "patch": "@@ -5,27 +5,15 @@ chai.use require 'sinon-chai'\n \n { expect } = chai\n \n-mockery = require 'mockery'\n-\n # Hubot classes\n-Robot = require '../src/robot.coffee'\n+Robot = require '../src/robot'\n { CatchAllMessage, EnterMessage, TextMessage } = require '../src/message'\n Adapter = require '../src/adapter'\n Response = require '../src/response'\n Middleware = require '../src/middleware'\n \n-# Preload the Hubot mock adapter but substitute in the latest version of Adapter\n-mockery.enable()\n-mockery.registerAllowable 'hubot-mock-adapter'\n-mockery.registerAllowable 'lodash' # hubot-mock-adapter uses lodash\n-# Force hubot-mock-adapter to use the latest version of Adapter\n-mockery.registerMock 'hubot/src/adapter', Adapter\n-# Load the mock adapter into the cache\n-require 'hubot-mock-adapter'\n-# We're done with mockery\n-mockery.deregisterMock 'hubot/src/adapter'\n-mockery.disable()\n-\n+# mock `hubot-mock-adapter` module from fixture\n+mockery = require 'mockery'\n \n describe 'Middleware', ->\n   describe 'Unit Tests', ->\n@@ -311,6 +299,11 @@ describe 'Middleware', ->\n   # tested for.\n   describe 'Public Middleware APIs', ->\n     beforeEach ->\n+      mockery.enable({\n+        warnOnReplace: false,\n+        warnOnUnregistered: false\n+      })\n+      mockery.registerMock 'hubot-mock-adapter', require('./fixtures/mock-adapter')\n       @robot = new Robot null, 'mock-adapter', yes, 'TestHubot'\n       @robot.run\n \n@@ -334,6 +327,7 @@ describe 'Middleware', ->\n       @testListener = @robot.listeners[0]\n \n     afterEach ->\n+      mockery.disable()\n       @robot.shutdown()\n \n     describe 'listener middleware context', ->", "changes": 24}, {"status": "modified", "deletions": 16, "raw_url": "https://github.com/hubotio/hubot/raw/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/robot_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/robot_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.coffee?ref=04c7bcd694f2cd3359e43f74fa7dc50c339887e2", "filename": "test/robot_test.coffee", "sha": "01b73d6b561ea53f1a627825e7f4d20833415642", "additions": 10, "patch": "@@ -5,30 +5,23 @@ chai.use require 'sinon-chai'\n \n { expect } = chai\n \n-mockery = require 'mockery'\n-\n # Hubot classes\n-Robot = require '../src/robot.coffee'\n+Robot = require '../src/robot'\n { CatchAllMessage, EnterMessage, LeaveMessage, TextMessage, TopicMessage } = require '../src/message'\n Adapter = require '../src/adapter'\n \n ScopedHttpClient = require 'scoped-http-client'\n \n-# Preload the Hubot mock adapter but substitute in the latest version of Adapter\n-mockery.enable()\n-mockery.registerAllowable 'hubot-mock-adapter'\n-mockery.registerAllowable 'lodash' # hubot-mock-adapter uses lodash\n-# Force hubot-mock-adapter to use the latest version of Adapter\n-mockery.registerMock 'hubot/src/adapter', Adapter\n-# Load the mock adapter into the cache\n-require 'hubot-mock-adapter'\n-# We're done with mockery\n-mockery.deregisterMock 'hubot/src/adapter'\n-mockery.disable()\n-\n+# mock `hubot-mock-adapter` module from fixture\n+mockery = require 'mockery'\n \n describe 'Robot', ->\n   beforeEach ->\n+    mockery.enable({\n+      warnOnReplace: false,\n+      warnOnUnregistered: false\n+    })\n+    mockery.registerMock 'hubot-mock-adapter', require('./fixtures/mock-adapter')\n     @robot = new Robot null, 'mock-adapter', yes, 'TestHubot'\n     @robot.alias = 'Hubot'\n     @robot.run\n@@ -46,7 +39,8 @@ describe 'Robot', ->\n     }\n \n   afterEach ->\n-   @robot.shutdown()\n+    mockery.disable()\n+    @robot.shutdown()\n \n   describe 'Unit Tests', ->\n     describe '#http', ->", "changes": 26}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/user_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/04c7bcd694f2cd3359e43f74fa7dc50c339887e2/test/user_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/user_test.coffee?ref=04c7bcd694f2cd3359e43f74fa7dc50c339887e2", "filename": "test/user_test.coffee", "sha": "cfe5af02c37aabb5c7727d711818573d20b2f1e1", "additions": 1, "patch": "@@ -1,5 +1,5 @@\n {expect} = require 'chai'\n-User = require '../src/user.coffee'\n+User = require '../src/user'\n \n describe 'User', ->\n   describe 'new', ->", "changes": 2}], "1349": [{"status": "modified", "deletions": 12, "raw_url": "https://github.com/hubotio/hubot/raw/f50d1a94facd0c18c9023eb8275902a7c7cc233a/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/f50d1a94facd0c18c9023eb8275902a7c7cc233a/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=f50d1a94facd0c18c9023eb8275902a7c7cc233a", "filename": "CONTRIBUTING.md", "sha": "da0309e004f825938d98769e8952b6b2bf68ba1d", "additions": 2, "patch": "@@ -21,7 +21,7 @@ accept, pull requests within a few days. We may suggest some changes or improvem\n \n Some things that will increase the chance that your pull request is accepted:\n \n-* Use CoffeeScript [idioms](http://arcturo.github.io/library/coffeescript/04_idioms.html) and [style guide](https://github.com/polarmobile/coffeescript-style-guide)\n+* Make sure the tests pass\n * Update the documentation: code comments, example code, guides. Basically,\n   update everything affected by your contribution.\n * Include any information that would be relevant to reproducing bugs, use cases for new features, etc.\n@@ -32,16 +32,6 @@ Some things that will increase the chance that your pull request is accepted:\n * Make pull requests against a feature branch,\n * Don't update the version in `package.json`, as the maintainers will manage that in a follow-up PR to release\n \n-Syntax:\n-\n-  * Two spaces, no tabs.\n-  * No trailing whitespace. Blank lines should not have any space.\n-  * Prefer `and` and `or` over `&&` and `||`\n-  * Prefer single quotes over double quotes unless interpolating strings.\n-  * `MyClass.myMethod(my_arg)` not `myMethod( my_arg )` or `myMethod my_arg`.\n-  * `a = b` and not `a=b`.\n-  * Follow the conventions you see used in the source already.\n-\n # Stale issue and pull request policy\n \n Issues and pull requests have a shelf life and sometimes they are no longer relevant. All issues and pull requests that have not had any activity for 90 days will be marked as `stale`. Simply leave a comment with information about why it may still be relevant to keep it open. If no activity occurs in the next 7 days, it will be automatically closed.\n@@ -50,7 +40,7 @@ The goal of this process is to keep the list of open issues and pull requests fo\n \n # Releasing\n \n-This section is for maintainers of hubot. Here's the current process for releasing:\n+This section is for maintainers of Hubot. Here's the current process for releasing:\n \n * review unreleased changes since last release on https://github.com/github/hubot/commits/master\n * determine what version to release as:", "changes": 14}], "1350": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e09133b264d0e9dcfd15c2f63ab4e2e1daac0911/.gitignore", "blob_url": "https://github.com/hubotio/hubot/blob/e09133b264d0e9dcfd15c2f63ab4e2e1daac0911/.gitignore", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.gitignore?ref=e09133b264d0e9dcfd15c2f63ab4e2e1daac0911", "filename": ".gitignore", "sha": "de7149dd641a369f8c22f2b8bc1a7e8129c0ed93", "additions": 3, "patch": "@@ -1,3 +1,6 @@\n node_modules\n .hubot_history\n .node-version\n+.nyc_output/\n+npm-debug.log\n+coverage/", "changes": 3}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e09133b264d0e9dcfd15c2f63ab4e2e1daac0911/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/e09133b264d0e9dcfd15c2f63ab4e2e1daac0911/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=e09133b264d0e9dcfd15c2f63ab4e2e1daac0911", "filename": ".travis.yml", "sha": "17c09627cbff3f657c194c91f611131adb58e79c", "additions": 1, "patch": "@@ -6,3 +6,4 @@ node_js:\n notifications:\n   email: false\n sudo: false\n+after_success: npm run coverage", "changes": 1}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e09133b264d0e9dcfd15c2f63ab4e2e1daac0911/README.md", "blob_url": "https://github.com/hubotio/hubot/blob/e09133b264d0e9dcfd15c2f63ab4e2e1daac0911/README.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/README.md?ref=e09133b264d0e9dcfd15c2f63ab4e2e1daac0911", "filename": "README.md", "sha": "4b4951982a3a66cde28fdf7ed2c954b26f6ef85d", "additions": 2, "patch": "@@ -1,3 +1,5 @@\n+[![Build Status](https://travis-ci.org/espy/hubot.svg?branch=master)](https://travis-ci.org/espy/hubot) [![Coverage Status](https://coveralls.io/repos/github/espy/hubot/badge.svg?branch=master)](https://coveralls.io/github/espy/hubot?branch=master)\n+\n # Hubot\n \n Hubot is a framework to build chat bots, modeled after GitHub's Campfire bot of the same name, hubot.", "changes": 2}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/e09133b264d0e9dcfd15c2f63ab4e2e1daac0911/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/e09133b264d0e9dcfd15c2f63ab4e2e1daac0911/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=e09133b264d0e9dcfd15c2f63ab4e2e1daac0911", "filename": "package.json", "sha": "9c6e1924a56d39ea856e9471b02a16e1e1c37785", "additions": 7, "patch": "@@ -26,12 +26,14 @@\n     \"scoped-http-client\": \"0.11.0\"\n   },\n   \"devDependencies\": {\n+    \"chai\": \"~2.1.0\",\n+    \"coveralls\": \"^2.13.1\",\n     \"mocha\": \"^2.1.0\",\n     \"mockery\": \"^1.4.0\",\n-    \"sinon-chai\": \"^2.8.0\",\n+    \"nyc\": \"^11.0.2\",\n     \"sinon\": \"~1.17.0\",\n-    \"standard\": \"^10.0.2\",\n-    \"chai\": \"~2.1.0\"\n+    \"sinon-chai\": \"^2.8.0\",\n+    \"standard\": \"^10.0.2\"\n   },\n   \"engines\": {\n     \"node\": \">= 0.8.x\",\n@@ -44,7 +46,8 @@\n   \"scripts\": {\n     \"start\": \"bin/hubot\",\n     \"pretest\": \"standard\",\n-    \"test\": \"mocha\",\n+    \"test\": \"nyc --reporter=html --reporter=text mocha\",\n+    \"coverage\": \"nyc report --reporter=text-lcov | coveralls\",\n     \"test:smoke\": \"node src/**/*.js\"\n   }\n }", "changes": 11}], "1352": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/7b9c4129b91c72242b89858f59ed8ce67747be2c/src/robot.js", "blob_url": "https://github.com/hubotio/hubot/blob/7b9c4129b91c72242b89858f59ed8ce67747be2c/src/robot.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.js?ref=7b9c4129b91c72242b89858f59ed8ce67747be2c", "filename": "src/robot.js", "sha": "15434f62e01b6b63dc31cacf947d67e54864bc41", "additions": 4, "patch": "@@ -516,8 +516,10 @@ class Robot {\n   // Returns nothing.\n   parseHelp (path) {\n     const scriptDocumentation = {}\n-    const body = fs.readFileSync(path, 'utf-8')\n-    const lines = body.split('\\n')\n+    const body = fs.readFileSync(require.resolve(path), 'utf-8')\n+\n+    const useStrictHeaderRegex = /^[\"']use strict['\"];?\\s+/\n+    const lines = body.replace(useStrictHeaderRegex, '').split('\\n')\n       .reduce(toHeaderCommentBlock, {lines: [], isHeader: true}).lines\n       .filter(Boolean) // remove empty lines\n     let currentSection = null", "changes": 6}], "1353": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/47deb30dc0267ffa08557b24b3042141fa220839/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/47deb30dc0267ffa08557b24b3042141fa220839/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=47deb30dc0267ffa08557b24b3042141fa220839", "filename": "docs/scripting.md", "sha": "5cf92c773c6f371401ff5ecee2e180a28e6962a0", "additions": 3, "patch": "@@ -297,6 +297,9 @@ The match function must return a truthy value if the listener callback should be\n module.exports = (robot) ->\n   robot.listen(\n     (message) -> # Match function\n+      # only match messages with text (ie ignore enter and other events)\n+      return unless message.text\n+\n       # Occassionally respond to things that Steve says\n       message.user.name is \"Steve\" and Math.random() > 0.8\n     (response) -> # Standard listener callback", "changes": 3}], "1357": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fb275084af9566a74a934b1f6d1d2b25ff232c86/src/robot.js", "blob_url": "https://github.com/hubotio/hubot/blob/fb275084af9566a74a934b1f6d1d2b25ff232c86/src/robot.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.js?ref=fb275084af9566a74a934b1f6d1d2b25ff232c86", "filename": "src/robot.js", "sha": "36d266a175cc788c3f1490ef15c854f17f627f65", "additions": 5, "patch": "@@ -349,6 +349,11 @@ class Robot {\n     const ext = path.extname(filename)\n     const full = path.join(filepath, path.basename(filename, ext))\n \n+    // see https://github.com/hubotio/hubot/issues/1355\n+    if (!require.extensions[ext]) { // eslint-disable-line\n+      return\n+    }\n+\n     try {\n       const script = require(full)\n ", "changes": 5}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/fb275084af9566a74a934b1f6d1d2b25ff232c86/test/robot_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/fb275084af9566a74a934b1f6d1d2b25ff232c86/test/robot_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.js?ref=fb275084af9566a74a934b1f6d1d2b25ff232c86", "filename": "test/robot_test.js", "sha": "3b2c3a4fae66b6b12ad3392f367aa3ce07d3511e", "additions": 15, "patch": "@@ -418,6 +418,21 @@ describe('Robot', function () {\n           expect(this.robot.logger.warning).to.have.been.called\n         })\n       })\n+\n+      describe('unsupported file extension', function () {\n+        beforeEach(function () {\n+          const module = require('module')\n+\n+          this.script = sinon.spy(function (robot) {})\n+          this.sandbox.stub(module, '_load').returns(this.script)\n+          this.sandbox.stub(this.robot, 'parseHelp')\n+        })\n+\n+        it('should not be loaded by the Robot', function () {\n+          this.robot.loadFile('./scripts', 'unsupported.yml')\n+          expect(this.script).to.not.have.been.calledWith(this.robot)\n+        })\n+      })\n     })\n   })\n ", "changes": 15}], "1358": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/2a46ab0aa85401684fc1433f0eea948d1edfb151/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/2a46ab0aa85401684fc1433f0eea948d1edfb151/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=2a46ab0aa85401684fc1433f0eea948d1edfb151", "filename": "package.json", "sha": "0004b3f64502ff504a5fb5a01709d8fe542085e0", "additions": 2, "patch": "@@ -36,8 +36,8 @@\n     \"standard\": \"^10.0.2\"\n   },\n   \"engines\": {\n-    \"node\": \">= 0.8.x\",\n-    \"npm\": \">= 1.1.x\"\n+    \"node\": \">4\",\n+    \"npm\": \">2\"\n   },\n   \"main\": \"./index\",\n   \"bin\": {", "changes": 4}], "1359": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/e744f624881ab05450deeabacdf98018d249b43d/es2015.js", "blob_url": "https://github.com/hubotio/hubot/blob/e744f624881ab05450deeabacdf98018d249b43d/es2015.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/es2015.js?ref=e744f624881ab05450deeabacdf98018d249b43d", "filename": "es2015.js", "sha": "af706962c3ddddd752da31e07acc92296aa8e683", "additions": 1, "patch": "@@ -24,6 +24,6 @@ module.exports = {\n   CatchAllMessage: Message.CatchAllMessage,\n \n   loadBot (adapterPath, adapterName, enableHttpd, botName, botAlias) {\n-    return new Robot(adapterPath, adapterName, enableHttpd, botName, botAlias)\n+    return new module.exports.Robot(adapterPath, adapterName, enableHttpd, botName, botAlias)\n   }\n }", "changes": 2}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/e744f624881ab05450deeabacdf98018d249b43d/test/es2015_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/e744f624881ab05450deeabacdf98018d249b43d/test/es2015_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/es2015_test.js?ref=e744f624881ab05450deeabacdf98018d249b43d", "filename": "test/es2015_test.js", "sha": "ba690a4c4ace694c68eefba29e4657b42af65997", "additions": 199, "patch": "@@ -0,0 +1,199 @@\n+'use strict'\n+\n+/* global describe, it */\n+/* eslint-disable no-unused-expressions */\n+\n+// Assertions and Stubbing\n+const chai = require('chai')\n+const sinon = require('sinon')\n+chai.use(require('sinon-chai'))\n+const mockery = require('mockery')\n+\n+const expect = chai.expect\n+\n+// Hubot classes\n+const Hubot = require('../es2015')\n+const User = Hubot.User\n+const Brain = Hubot.Brain\n+const Robot = Hubot.Robot\n+const Adapter = Hubot.Adapter\n+const Response = Hubot.Response\n+const Listener = Hubot.Listener\n+const TextListener = Hubot.TextListener\n+const Message = Hubot.Message\n+const TextMessage = Hubot.TextMessage\n+const EnterMessage = Hubot.EnterMessage\n+const LeaveMessage = Hubot.LeaveMessage\n+const TopicMessage = Hubot.TopicMessage\n+const CatchAllMessage = Hubot.CatchAllMessage\n+const loadBot = Hubot.loadBot\n+\n+describe('hubot/es2015', function () {\n+  it('exports User class', function () {\n+    class MyUser extends User {}\n+    const user = new MyUser('id123', {foo: 'bar'})\n+\n+    expect(user).to.be.an.instanceof(User)\n+    expect(user.id).to.equal('id123')\n+    expect(user.foo).to.equal('bar')\n+  })\n+\n+  it('exports Brain class', function () {\n+    class MyBrain extends Brain {}\n+    const robotMock = {\n+      on: sinon.spy()\n+    }\n+    const brain = new MyBrain(robotMock)\n+\n+    expect(brain).to.be.an.instanceof(Brain)\n+    expect(robotMock.on).to.have.been.called\n+\n+    brain.set('foo', 'bar')\n+    expect(brain.get('foo')).to.equal('bar')\n+  })\n+\n+  it('exports Robot class', function () {\n+    mockery.enable({\n+      warnOnReplace: false,\n+      warnOnUnregistered: false\n+    })\n+    mockery.registerMock('hubot-mock-adapter', require('./fixtures/mock-adapter'))\n+\n+    class MyRobot extends Robot {}\n+    const robot = new MyRobot(null, 'mock-adapter', false, 'TestHubot')\n+\n+    expect(robot).to.be.an.instanceof(Robot)\n+    expect(robot.name).to.equal('TestHubot')\n+\n+    mockery.disable()\n+  })\n+\n+  it('exports Adapter class', function () {\n+    class MyAdapter extends Adapter {}\n+    const adapter = new MyAdapter('myrobot')\n+\n+    expect(adapter).to.be.an.instanceof(Adapter)\n+    expect(adapter.robot).to.equal('myrobot')\n+  })\n+\n+  it('exports Response class', function () {\n+    class MyResponse extends Response {}\n+    const robotMock = 'robotMock'\n+    const messageMock = {\n+      room: 'room',\n+      user: 'user'\n+    }\n+    const matchMock = 'matchMock'\n+    const response = new MyResponse(robotMock, messageMock, matchMock)\n+\n+    expect(response).to.be.an.instanceof(Response)\n+    expect(response.message).to.equal(messageMock)\n+    expect(response.match).to.equal(matchMock)\n+  })\n+\n+  it('exports Listener class', function () {\n+    class MyListener extends Listener {}\n+    const robotMock = 'robotMock'\n+    const matcherMock = 'matchMock'\n+    const callback = sinon.spy()\n+    const listener = new MyListener(robotMock, matcherMock, callback)\n+\n+    expect(listener).to.be.an.instanceof(Listener)\n+    expect(listener.robot).to.equal(robotMock)\n+    expect(listener.matcher).to.equal(matcherMock)\n+    expect(listener.options).to.deep.include({\n+      id: null\n+    })\n+    expect(listener.callback).to.equal(callback)\n+  })\n+\n+  it('exports TextListener class', function () {\n+    class MyTextListener extends TextListener {}\n+    const robotMock = 'robotMock'\n+    const regex = /regex/\n+    const callback = sinon.spy()\n+    const textListener = new MyTextListener(robotMock, regex, callback)\n+\n+    expect(textListener).to.be.an.instanceof(TextListener)\n+    expect(textListener.regex).to.equal(regex)\n+  })\n+\n+  it('exports Message class', function () {\n+    class MyMessage extends Message {}\n+    const userMock = {\n+      room: 'room'\n+    }\n+    const message = new MyMessage(userMock)\n+\n+    expect(message).to.be.an.instanceof(Message)\n+    expect(message.user).to.equal(userMock)\n+  })\n+\n+  it('exports TextMessage class', function () {\n+    class MyTextMessage extends TextMessage {}\n+    const userMock = {\n+      room: 'room'\n+    }\n+    const textMessage = new MyTextMessage(userMock, 'bla blah')\n+\n+    expect(textMessage).to.be.an.instanceof(TextMessage)\n+    expect(textMessage).to.be.an.instanceof(Message)\n+    expect(textMessage.text).to.equal('bla blah')\n+  })\n+\n+  it('exports EnterMessage class', function () {\n+    class MyEnterMessage extends EnterMessage {}\n+    const userMock = {\n+      room: 'room'\n+    }\n+    const enterMessage = new MyEnterMessage(userMock)\n+\n+    expect(enterMessage).to.be.an.instanceof(EnterMessage)\n+    expect(enterMessage).to.be.an.instanceof(Message)\n+  })\n+\n+  it('exports LeaveMessage class', function () {\n+    class MyLeaveMessage extends LeaveMessage {}\n+    const userMock = {\n+      room: 'room'\n+    }\n+    const leaveMessage = new MyLeaveMessage(userMock)\n+\n+    expect(leaveMessage).to.be.an.instanceof(LeaveMessage)\n+    expect(leaveMessage).to.be.an.instanceof(Message)\n+  })\n+\n+  it('exports TopicMessage class', function () {\n+    class MyTopicMessage extends TopicMessage {}\n+    const userMock = {\n+      room: 'room'\n+    }\n+    const topicMessage = new MyTopicMessage(userMock)\n+\n+    expect(topicMessage).to.be.an.instanceof(TopicMessage)\n+    expect(topicMessage).to.be.an.instanceof(Message)\n+  })\n+\n+  it('exports CatchAllMessage class', function () {\n+    class MyCatchAllMessage extends CatchAllMessage {}\n+    const messageMock = {\n+      user: {\n+        room: 'room'\n+      }\n+    }\n+    const catchAllMessage = new MyCatchAllMessage(messageMock)\n+\n+    expect(catchAllMessage).to.be.an.instanceof(CatchAllMessage)\n+    expect(catchAllMessage).to.be.an.instanceof(Message)\n+    expect(catchAllMessage.message).to.equal(messageMock)\n+    expect(catchAllMessage.user).to.equal(messageMock.user)\n+  })\n+\n+  it('exports loadBot function', function () {\n+    sinon.stub(Hubot, 'Robot')\n+\n+    expect(loadBot).to.be.a('function')\n+    Hubot.loadBot('adapterPath', 'adapterName', 'enableHttpd', 'botName', 'botAlias')\n+    expect(Hubot.Robot).to.be.called.calledWith('adapterPath', 'adapterName', 'enableHttpd', 'botName', 'botAlias')\n+  })\n+})", "changes": 199}], "1360": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4d4bd7f3e00666acad31e940ebe0dcb2487bb783/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/4d4bd7f3e00666acad31e940ebe0dcb2487bb783/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=4d4bd7f3e00666acad31e940ebe0dcb2487bb783", "filename": ".travis.yml", "sha": "ec3c2f5ba7a8eb5a8e3cee7fba0b1e96adad7d3b", "additions": 5, "patch": "@@ -6,4 +6,9 @@ node_js:\n notifications:\n   email: false\n sudo: false\n+addons:\n+  apt:\n+    packages:\n+    - expect\n+before_script: bin/e2e-test.sh\n after_success: npm run coverage", "changes": 5}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/4d4bd7f3e00666acad31e940ebe0dcb2487bb783/bin/e2e-test.sh", "blob_url": "https://github.com/hubotio/hubot/blob/4d4bd7f3e00666acad31e940ebe0dcb2487bb783/bin/e2e-test.sh", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/e2e-test.sh?ref=4d4bd7f3e00666acad31e940ebe0dcb2487bb783", "filename": "bin/e2e-test.sh", "sha": "5906821d07cda1d75c1c399772aa19f0fbd781f5", "additions": 47, "patch": "@@ -0,0 +1,47 @@\n+#!/bin/bash\n+HUBOT_FOLDER=$(pwd)\n+TEMP_ROOT=$(mktemp -d)\n+\n+echo \"$ pushd $TEMP_ROOT\"\n+pushd $TEMP_ROOT\n+trap \"{ CODE=$?; popd; rm -rf $TEMP_ROOT; exit $CODE; }\" EXIT\n+\n+## https://hubot.github.com/docs/\n+\n+echo \"$ npm install -g yo generator-hubot\"\n+npm install -g yo generator-hubot\n+\n+## simulate pressing enter for each generator question to accept defaults\n+## https://stackoverflow.com/a/6264618/206879\n+echo \"$ yo hubot --defaults\"\n+yo hubot --defaults\n+\n+## use hubot from last commit\n+echo \"$ npm install $HUBOT_FOLDER\"\n+npm install $HUBOT_FOLDER\n+\n+# npm install /path/to/hubot will create a symlink in npm 5+ (http://blog.npmjs.org/post/161081169345/v500).\n+# As the require calls for app-specific scripts happen inside hubot, we have to\n+# set NODE_PATH to the app\u2019s node_modules path so they can be found\n+echo \"$ NODE_PATH=$HUBOT_FOLDER/node_modules:$TEMP_ROOT/node_modules\"\n+export NODE_PATH=$NODE_PATH/$HUBOT_FOLDER/node_modules:$TEMP_ROOT/node_modules\n+\n+## start\n+expect <<EOL\n+  set timeout 10\n+\n+  spawn bin/hubot --name e2etest\n+\n+  # workaround for current hubot which does not show prompt until pressed enter\n+  # so we simulate it once 'INFO hubot-redis-brain: Using default redis on localhost:6379' appears\n+  expect \"localhost:6379\"\n+  send \"\\r\"\n+\n+  expect \"e2etest> \"\n+\n+  send \"e2etest ping\\r\"\n+  expect {\n+    \"PONG\" {}\n+    timeout {exit 1}\n+  }\n+EOL", "changes": 47}], "1361": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/18b44bec9ecc69d7f5ad117c6db597973accc403/.travis.yml", "blob_url": "https://github.com/hubotio/hubot/blob/18b44bec9ecc69d7f5ad117c6db597973accc403/.travis.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.travis.yml?ref=18b44bec9ecc69d7f5ad117c6db597973accc403", "filename": ".travis.yml", "sha": "c0023e2ce61f9960ced1b7784b84ff08a0330841", "additions": 9, "patch": "@@ -10,5 +10,12 @@ addons:\n   apt:\n     packages:\n     - expect\n-before_script: bin/e2e-test.sh\n-after_success: npm run coverage\n+before_script:\n+  - npm prune\n+  - bin/e2e-test.sh\n+after_success:\n+  - npm run coverage\n+  - npm run semantic-release\n+branches:\n+  except:\n+    - /^v\\d+\\.\\d+\\.\\d+$/", "changes": 11}, {"status": "removed", "deletions": 574, "raw_url": "https://github.com/hubotio/hubot/raw/e744f624881ab05450deeabacdf98018d249b43d/CHANGELOG.md", "blob_url": "https://github.com/hubotio/hubot/blob/e744f624881ab05450deeabacdf98018d249b43d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CHANGELOG.md?ref=e744f624881ab05450deeabacdf98018d249b43d", "filename": "CHANGELOG.md", "sha": "46c7f0d245fabfc38eb3a3dd65975fabc7cc865e", "additions": 0, "patch": "@@ -1,574 +0,0 @@\n-## [v3.0.0](https://github.com/github/hubot/tree/master) (wip)\n-[Full Changelog](https://github.com/github/hubot/compare/v2.19.0...master)\n-\n-### Breaking Changes\n-\n-- node@0.10 and node@0.12 are no longer supported\n-- Deep requires like `require('hubot/src/adapter')` are no longer supported, use `require('hubot').Adapter` instead.\n-- `Middleware.ticker()` has been removed. Use `process.nextTick()` instead.\n-\n-### Features\n-\n-- We now export es2015 `class` declarations of all Hubot classes at `require('hubot/es2015')`\n-\n-## [v2.19.0](https://github.com/github/hubot/tree/v2.19.0) (2016-05-0-6)\n-[Full Changelog](https://github.com/github/hubot/compare/v2.18.0...v2.19.0)\n-\n-**Implemented enhancements:**\n-\n-- Print warning for loading deprecated hubot-scripts.json [\\#970](https://github.com/github/hubot/pull/970) ([bkeepers](https://github.com/bkeepers) and [technicalpickles](https://github.com/technicalpickles)\n-\n-**Merged pull requests:**\n-\n-- Add link to Facebook Messenger Platform adapter [\\#1166](https://github.com/github/hubot/pull/1166) ([MrSaints](https://github.com/MrSaints))\n-- Add Hubot-Wechat to the adapter-list. [\\#1147](https://github.com/github/hubot/pull/1147) ([KasperDeng](https://github.com/KasperDeng))\n-- Fix broken links in docs [\\#1147](https://github.com/github/hubot/pull/1148) ([akameco](https://github.com/akameco))\n-\n-## [v2.18.0](https://github.com/github/hubot/tree/v2.18.0) (2016-01-19)\n-[Full Changelog](https://github.com/github/hubot/compare/v2.17.0...v2.18.0)\n-\n-**Implemented enhancements:**\n-\n-- Only coerce ids that are all digits into integers [\\#1052](https://github.com/github/hubot/pull/1052) ([technicalpickles](https://github.com/technicalpickles))\n-\n-\n-**Closed issues:**\n-\n-- Allow for non-integer user id in the shell adapter. [\\#1117](https://github.com/github/hubot/issues/1117)\n-- Markdown syntax in docs/adapters.md preventing update of hubot.github.com [\\#1100](https://github.com/github/hubot/issues/1100)\n-- Possible Error in Docs [\\#1096](https://github.com/github/hubot/issues/1096)\n-- Propose adding Hubot-Mattermost to list of Hubot adapters [\\#1089](https://github.com/github/hubot/issues/1089)\n-- bug\\(hubot@2.17.0\\): adapters don't run script [\\#1086](https://github.com/github/hubot/issues/1086)\n-- Depressing Pug Picture [\\#1084](https://github.com/github/hubot/issues/1084)\n-- Hubot - robot.http get method returns null body & res.  Suspecting hubot timing out [\\#1080](https://github.com/github/hubot/issues/1080)\n-- Steam + Hubot [\\#1076](https://github.com/github/hubot/issues/1076)\n-- Hubot won't start on Heroku because of node modules [\\#1071](https://github.com/github/hubot/issues/1071)\n-- Documentation 404 [\\#1064](https://github.com/github/hubot/issues/1064)\n-- Can't make HTTP requests [\\#1060](https://github.com/github/hubot/issues/1060)\n-- Define and document testing patterns for scripts [\\#985](https://github.com/github/hubot/issues/985)\n-\n-**Merged pull requests:**\n-\n-- Mattermost adapter [\\#1120](https://github.com/github/hubot/pull/1120) ([technicalpickles](https://github.com/technicalpickles))\n-- Upgrade express to v3.21.2 [\\#1119](https://github.com/github/hubot/pull/1119) ([sgerrand](https://github.com/sgerrand))\n-- Fixed link to getting started [\\#1116](https://github.com/github/hubot/pull/1116) ([jackmawer](https://github.com/jackmawer))\n-- Fix http and https documentation [\\#1114](https://github.com/github/hubot/pull/1114) ([technicalpickles](https://github.com/technicalpickles))\n-- \\[shell\\] don't color hubot responses green, to be more visible on light backgrounds [\\#1111](https://github.com/github/hubot/pull/1111) ([technicalpickles](https://github.com/technicalpickles))\n-- Determine adapterPath in robot.coffee, rather than bin/hubot [\\#1109](https://github.com/github/hubot/pull/1109) ([technicalpickles](https://github.com/technicalpickl\n-es))\n-- Updated copyright to 2016 [\\#1103](https://github.com/github/hubot/pull/1103) ([aqnouch](https://github.com/aqnouch))\n-- Update docs to reflect external scripts brain location [\\#1101](https://github.com/github/hubot/pull/1101) ([cycomachead](https://github.com/cycomachead))\n-- Added Twilio IP Messaging adapter to the list. [\\#1099](https://github.com/github/hubot/pull/1099) ([philnash](https://github.com/philnash))\n-- Add Skyweb to a list of adapters [\\#1097](https://github.com/github/hubot/pull/1097) ([EllisV](https://github.com/EllisV))\n-- Instructions for deploying hubot to IBM Bluemix [\\#1095](https://github.com/github/hubot/pull/1095) ([kauffecup](https://github.com/kauffecup))\n-- Adding documentation for testing Hubot scripts [\\#1094](https://github.com/github/hubot/pull/1094) ([mdelagrange](https://github.com/mdelagrange))\n-- Proxy instructions: typo + foolproof [\\#1092](https://github.com/github/hubot/pull/1092) ([jbick](https://github.com/jbick))\n-- Optionally use setImmediate instead of nextTick in middleware [\\#1081](https://github.com/github/hubot/pull/1081) ([bhuga](https://github.com/bhuga))\n-\n-[v2.17.0](https://github.com/github/hubot/tree/v2.17.0)\n-========\n-\n-[Full Changelog](https://github.com/github/hubot/compare/v2.16.0...v2.17.0)\n-\n-**Merged pull requests:**\n-\n-- Add node v5 to travis [\\#1077](https://github.com/github/hubot/pull/1077) ([@scboucher](https://github.com/scboucher))\n-- Only loadScripts once [\\#1069](https://github.com/github/hubot/pull/1069) ([@technicalpickles](https://github.com/technicalpickles))\n-- Response middleware [\\#1021](https://github.com/github/hubot/pull/1021) ([@bhuga](https://github.com/bhuga))\n-- Debug listener options [\\#1074](https://github.com/github/hubot/pull/1074) ([@msabramo](https://github.com/msabramo))\n-- Add Node 4.2 to travis [\\#1068](https://github.com/github/hubot/pull/1068) ([@scboucher](https://github.com/scboucher))\n-- Clarify that a room token might be expected [\\#1012](https://github.com/github/hubot/pull/1012) ([@alininja](https://github.com/alininja))\n-- Fix link to heroku docs [\\#1049](https://github.com/github/hubot/pull/1049) ([@doque](https://github.com/doque))\n-- Doc tweaks [\\#1042](https://github.com/github/hubot/pull/1042) ([@xuoe](https://github.com/xuoe))\n-- Update Azure documentation [\\#1041](https://github.com/github/hubot/pull/1041) ([@davidkassa](https://github.com/davidkassa))\n-- Update slack adapter doc link [\\#1039](https://github.com/github/hubot/pull/1039) ([@danielcompton](https://github.com/danielcompton))\n-- Doc tweaks [\\#1038](https://github.com/github/hubot/pull/1038) ([@bhuga](https://github.com/bhuga))\n-- Test tweaks [\\#1037](https://github.com/github/hubot/pull/1037) ([@michaelansel](https://github.com/michaelansel))\n-\n-[v2.16.0](https://github.com/github/hubot/tree/v2.16.0)\n-========\n-\n-[Full Changelog](https://github.com/github/hubot/compare/v2.15.0...v2.16.0)\n-\n-**Merged pull requests:**\n-\n-- Update docs on keepalive support [\\#1033](https://github.com/github/hubot/pull/1033) ([@bkeepers](https://github.com/bkeepers))\n-- Cleanup tests [\\#1032](https://github.com/github/hubot/pull/1032) ([@michaelansel](https://github.com/michaelansel))\n-- Add coffee-errors to test scaffolding [\\#1020](https://github.com/github/hubot/pull/1020) ([@bhuga](https://github.com/bhuga))\n-- Receive middleware [\\#1019](https://github.com/github/hubot/pull/1019) ([bhuga](https://github.com/bhuga))\n-- Pass alias in Robot constructor. Fixes issue \\#1002. [\\#1003](https://github.com/github/hubot/pull/1003) ([@sdimkov](https://github.com/sdimkov))\n-- Add Robot.listen [\\#986](https://github.com/github/hubot/pull/986) ([@michaelansel](https://github.com/michaelansel))\n-\n-v2.15.0\n-=======\n-\n-* Document another middleware pattern https://github.com/github/hubot/pull/1017\n-* Make Robot.respondPattern a public method https://github.com/github/hubot/pull/1011\n-* Make \"done\" argument optional for middleware https://github.com/github/hubot/pull/1028\n-\n-v2.14.0\n-=======\n-\n-* Lots of documentation tweaks and new adapters\n-* Added a code of conduct https://github.com/github/hubot/pull/1005\n-* Add Listener Middleware https://github.com/github/hubot/pull/803\n-\n-v2.13.2\n-=======\n-\n-* Minor documentation updates\n-* Add Robot.respondPattern private to improve testability https://github.com/github/hubot/pull/975\n-* Ignore .node-version so it isn't included in releases https://github.com/github/hubot/pull/980\n-\n-v2.13.1\n-=======\n-\n-* Fix documentation when running `hubot -c` to suggest correct usage of generator https://github.com/github/hubot/pull/938\n-* Fix respond listeners matching when robot alias is a substring of robot name https://github.com/github/hubot/pull/927\n-* Update bin/hubot to log a warning if called with non-existent options https://github.com/github/hubot/pull/931\n-\n-v2.13.0\n-=======\n-\n-* Fix some website links\n-* Link to Freenode channel (#hubot)\n-* Fix license in package.json\n-* Various documentation updates\n-* More automated tests\n-* Add support for global http options (see https://github.com/github/hubot/blob/master/docs/patterns.md#forwarding-all-http-requests-through-a-proxy for details)\n-* Add support for listener metadata (see https://github.com/github/hubot/blob/master/docs/scripting.md#listener-metadata) for details\n-* Document using npm search for finding scripts\n-\n-v2.12.0\n-=======\n-\n-* Update scripting documentation to ref to `res` instead of `msg`, since it's a `Response` object\n-* Update scoped-http-client from 0.10.0 to 0.10.3\n-* Fix deprecation warnings from connect at startup\n-\n-v2.11.4\n-=======\n-\n-* Fix shell adapter parsing history on node 0.8 (ie don't include newlines)\n-\n-v2.11.3\n-=======\n-\n-* Fix issues around shell adapter throwing errors when there isn't a .hubot_history file\n-\n-v2.11.2\n-=======\n-\n-* Add support for namespaced alternative environment variables for controlling the port and address express binds to (EXPRESS_PORT and EXPRESS_BIND_ADDRESS).\n-\n-v2.11.1\n-=======\n-\n-* Automated testing\n-* Cleanup uncaughtException handlers, to avoid node warning about a memory leak during tests\n-\n-v2.11.0\n-=======\n-\n-* Update scripting.md script package sample\n-* Include Message class in exported module (ie require 'hubot')\n-* Support custom options when calling `robot.http` that are passed onto the scoped-http-client\n-* Update scoped-http-client dependency to 0.10.0\n-* Fix error when loading a script that doesn't export a function; log a warning instead\n-\n-v2.10.0\n-=======\n-\n-* Add support to shell adapter for customizing the user with HUBOT_SHELL_USER_ID and HUBOT_SHELL_USER_NAME\n-* Add history support to shell adapter, so it remembers commands previously used\n-\n-v2.9.3\n-======\n-\n-* Allow `robot.respond` to work when there is preceding whitespace\n-* Update `robot.parseHelp` to be synchronous, so it's easier to test\n-* Reduce Heroku ping interval from 20 minutes to 5 minutes to keep hubot from going unavailable\n-* Make sure`robot.pingIntervalId` is kept after setting up Heroku ping  interval\n-\n-v2.9.2\n-======\n-\n-* Update express dependency to a version isn't affected by [CVE-2014-7191](http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-7191)\n-   * More specifically, a version of express that depends on connect that depends on qs that isn't vulnerable\n-\n-v2.9.1\n-======\n-\n-* Improve instructions for using new yeoman generator when calling `hubot --create`\n-\n-v2.9.0\n-======\n-\n-* Deprecate `hubot --create` in favor of new yeoman generator\n-\n-v2.8.3\n-======\n-\n-* Fix error when trying to find userForName, when name is incorrectly set as an integer\n-\n-v2.8.2\n-======\n-\n-* Fix error logging when not using any error handlers\n-\n-v2.8.1\n-======\n-\n-* Include link to https://github.com/hubot-scripts in addition to hubot-scripts repo\n-* Remove auth.coffee. https://github.com/hubot-scripts/hubot-auth is recommended instead\n-\n-v2.8.0\n-======\n-\n-* Add support for `hubot --config-check` to verify hubot will load based on how it's configured\n-* Include `script/` directory for convenient one-liners for common tasks of developing github/hubot\n-* Fixes to default `image me` and `help`\n-* Updated documentation about external scripts\n-* Add better debug output when receiving text messages\n-\n-v2.7.5\n-======\n-\n-* Fix Campfire adapter to specify a User-Agent\n-\n-v2.7.4\n-======\n-\n-* Update Campfire adapter to specify a User-Agent\n-\n-v2.7.3\n-======\n-\n-* Updated list of adapters in documentation\n-* Document script load order\n-* Support any file extension for script that node supports\n-\n-v2.7.2\n-======\n-\n-* Expose the robot adapter name as `robot.adapterName`.\n-\n-v2.7.1\n-======\n-\n-* Update error handling API to pass along `msg` object in more cases - technicalpickles\n-\n-\n-v2.7.0\n-======\n-\n-* Support binding to a specific IP address - smerrill\n-* Add error handling API - technicalpickles\n-* Remove math.coffee since it uses a now-removed Google service - technicalpickles\n-* MOAR MUSTACHES - cannikin\n-\n-v2.6.5\n-======\n-\n-* Fix new bot template to get the latest version of the bot - technicalpickles\n-\n-v2.6.4\n-======\n-\n-* Fix documentation for setting up Redis on Heroku - thiagopnts\n-* Document script load ordering - balbeko\n-* Fix extra space in help messages - vanetix\n-* Parse 'Authors' section in script documentation - spajus\n-* Differentiate the different types of Campfire errors - simonsj\n-* Consistently load files across platform - technicalpickles\n-* Fix topic handler to be able to access the text of its body - wingrunr21\n-\n-v2.6.3\n-======\n-\n-* Fix issues with disabling the HTTP server - balbeko\n-* Add usersWithRole to auth.coffee - jhubert\n-\n-v2.6.2\n-======\n-\n-* Destructure TopicMessage in robot.coffee to fix a bug - tombell\n-* Update math.coffee to respond to calculator - bartolsthoorn\n-\n-v2.6.1\n-======\n-\n-* Show robot.alias in help commands if defined - technicalpickles\n-* Epic documentation update - technicalpickels\n-* Remove tweet.coffee from generated hubot-scripts.json since it has a npm dependency - tombell\n-* Don't load roles.coffee if using auth.coffee - tombell\n-* Make sure to clear interval for pinging Heroku URL - tombell\n-* Fix deprecation warning in youtube.coffee - timclipsham\n-* Fix youtube results bug - timclipsham\n-\n-v2.6.0\n-======\n-\n-* Clear ping timeout when shutting down - tombell\n-* Don't load roles.coffee if using auth.coffee - tombell\n-* Removed tweet.coffee from default hubot-scripts - tombell\n-* Removed Response#http deprecation warning - tombell\n-* Updated version range for hubot and hubot-scripts - tombell\n-\n-v2.5.5\n-======\n-\n-* Fix an issue with the version being out of sync with the version specified in\n-  the generated package.json\n-\n-v2.5.4\n-======\n-\n-* Add the ability for hubot to lock/unlock rooms in Campfire\n-\n-v2.5.3\n-======\n-* Fix race condition in brain loading\n-* Fixup translate scripts for spaces in languages\n-\n-v2.5.2\n-======\n-\n-* Parse help from external script package scripts - aaronj1335\n-* Remove bad script header from pugme - maxgoedjen\n-* Fix exception when sending multiple messages - aroben\n-* Add 'maths' to math me regex - jacksonhull\n-\n-v2.5.1\n-======\n-\n-* Add the auth script as a default script - tombell\n-* Updated @userForId uses for deprecation - kch\n-* Fix hubot respond bug - shiwano\n-* Default user-agent for HTTP requests - aroben\n-* Fix copying executable files - brntbeer\n-* Fix issues with mkdirDashP - Ronald Evers\n-\n-v2.5.0\n-======\n-\n-* Add the ability to listen for topic changes - wingrunr21 and tombell\n-* Register default HTTP routes with robot.name - kashyapp\n-* Swap connect out for express - creatorr\n-* Brain has become more key-value store-like - creatorr\n-* Google Image script improvements - kyleslattery\n-* Help script fixes - Abraham\n-* Add deprecation messages to functions - tombell\n-\n-v2.4.8\n-======\n-\n-* Exit on startup for a variety of critical failures.\n-\n-v2.3.4\n-======\n-\n-* Add 'examples' and 'urls' to list of known documentation sections\n-* Improve mustache results - marsam in #341\n-\n-v2.3.3\n-======\n-\n-* Fix help parsing of javascript iles - ferlores in #322\n-* Roles will correctly semicolon-delimit the list of roles if one (or more) roles contain a comma. - futuraprime in #327\n-* Updated translations of supported languages as of 20120801 - sopel in #328\n-* Escape brackets in html view of help - tombell, technicalpickles\n-* More coffee-like translate.coffee - elmoeleven in #336\n-* Fixed reference to when npm was included w/ node - technicalpickles in #347\n-* Backwards-compatible help parsing, and tracking all documentation instead of just commands - technicalpickles\n-\n-v2.3.2\n-======\n-* New route `/hubot/help` to display command help - tombell\n-* Role script fix - ferlores\n-* Store connect server - tombell\n-\n-v2.3.0\n-======\n-* Extracted remaining classes into their own files - tombell\n-\n-**Note** this is a breaking change for adapters. Adapters are going to want to\n-use the following code snippet for requiring classes from hubot.\n-\n-    {Adapter,Robot} = require 'hubot'\n-\n-* Update the formatting of documentation comments at the top of scripts - technicalpickles\n-* Update the parsing of the documentation comments - tombell\n-\n-v2.2.0\n-======\n-* Fixed keep alive ping, requires `HEROKU_URL` - tombell and jimeh\n-* Updated dependency versions - tombell and jimeh\n-\n-v2.1.4\n-======\n-* Hubot now keeps himself alive due to Heroku's web processes shutting down when idle - tombell\n-* Hubot's image search is now defaulted to safe search - kylev\n-* Hubot now emits a 'connected' event when he connects to the chosen adapter - sbryant\n-\n-* Fix the roles.coffee not to respond to empty names - christierney\n-\n-v2.1.3 - The Heat Stroke Release\n-================================\n-* Hubot now has a web interface and supports connect middleware, examples in httpd.coffee - atmos / tombell\n-\n-    module.exports = (robot) ->\n-      robot.router.get \"/hubot/version\", (req, res) ->\n-        res.end robot.version\n-\n-* Add a catchAll callback that handles responses that match nothing else - titanous / ejfinnerman\n-\n-    module.exports = (robot) ->\n-      robot.catchAll (msg) ->\n-        router.get \"/hubot/version\", (req, res) ->\n-\n-v2.1.2\n-======\n-* Update behaviour of finishing further execution of listeners\n-* Scripts are now loaded in the following order\n-  * Scripts defined in `./hubot-scripts.json` are loaded in order\n-  * Scripts are loaded alphabetically from `/scripts`\n-\n-v2.1.1\n-======\n-* The hwhoops release, finish/done behavior is handled elsewhere\n-\n-v2.1.0\n-======\n-* Introduce Response.finish() to indicate that a message should not be passed on to any other listeners\n-* Scripts are evaluated in the following order\n-  * `./scripts` is loaded alphabetically\n-  * The contents of `./hubot-scripts.json` is loaded in order\n-\n-    module.exports = (robot) ->\n-      robot.respond /\\s*yo\\s*\\\\?/i, (msg) ->\n-        msg.reply \"Yo!\"\n-        msg.finish()\n-\n-v2.0.7\n-======\n-* Update topic and logger scoping fixups - Horace Ko\n-* Don't exit the process if listening to a room is denied\n-\n-v2.0.6\n-======\n-* Don't kill all username looks if some users don't have name attribute\n-\n-v2.0.5\n-======\n-* All adapters have been removed except for shell and campfire\n-* Better win32 compatability\n-* Campfire reconnects on streaming errors on a per-room basis\n-\n-v2.0.0\n-======\n-* Major adapter overhaul, they're now external - Tom Bell\n-* Shell adapter now functions like a REPL - Tom Bell\n-* Improved logging using log.js - Tom Bell\n-* Search help commands - Gabriel Horner\n-* Improvements to roles.coffee - Daniel Schauenberg\n-\n-Upgrading\n----------\n-If you are not using the Campfire or Shell adapters please be aware before\n-upgrading that adapters have been moved out of the code of hubot and you should\n-install the hubot adapters from npm when people make them available. Until your\n-adapter is available you may wish to remain on v1.1.11.\n-\n-v1.1.11\n-=======\n-* support self-signed SSL certs for IRC - Ville Lautanala <lautis@gmail.com>\n-* twilio adapter fixups - Tom Bell\n-* XMPP adapter fixups - Patrik Votocek <patrik@votocek.cz>\n-* Everyone gets a pug - Jon Maddox <jon@jonmaddox.com>\n-* Accept contact list requests - Arlo Carreon <arlo.carreon@gmail.com>\n-* Google talk whitelisting support - pescuma <pescuma@chaordicsystems.com>\n-\n-v1.1.10\n-=======\n-* Fix optparse problems on certain linuxes\n-* IRC adapter fixups for users - Andrew Nordman <cadwallion@gmail.com>\n-* Bump npm irc depedency - BrokenEnso <ericday96@gmail.com>\n-* accept invites on IRC - Dingding Ye <yedingding@gmail.com>\n-* Support talkerapp style @replies - Charles Barbier <unixcharles@gmail.com>\n-* Set hubot's google talk status properly - Matt McCormick <mbmccormick@gmail.com>\n-\n-v1.1.9\n-======\n-* Add a google talk adapter - Arlo Carreon <arlo.carreon@gmail.com>\n-\n-v1.1.8\n-======\n-* Fix a bug in robot.respond that allowed regexes to be constructed that\n-  could be triggered without prefixing with the robot's name - atmos\n-* Fixup rarely triggered response stuff that uses an undefined variable\n-\n-v1.1.7\n-======\n-* Fix username issues where campfire names weren't updated - atmos\n-* Allow help files to parse from raw js - Jason Ford <jason@jason-ford.com>\n-* Talkerapp bug fix ups - Charles Barbier <unixcharles@gmail.com>, Magnus Bergmark <magnus.bergmark@gmail.com>\n-* Preserve ordering in campfire message sending - Sean Cribbs <sean@basho.com>\n-* Flowdock adapter - Arttu Tervo <arttu.tervo@nodeta.fi>\n-\n-\n-v1.1.5\n-======\n-* Add a talkerapp adapter - Victor Castell <victorcoder@gmail.com>\n-* Add a twitter adapter - Mathilde Lemee <mathilde.lemee@yahoo.fr>\n-* Emit a loaded event in mergeData - codec <codec@fnord.cx>\n-\n-v1.1.2\n-======\n-* Fix the optparse npm install anomaly\n-\n-v1.1.1\n-======\n-* Fix campfire adapter getting duplicate messages - atmos\n-\n-v1.1.0\n-======\n-\n-* Explicity errors for misconfigured campfire setup - Damien Mathieu <damien.mathieu@shazino.com>\n-* Support '-v' as a CLI opt to display version - Damien Mathieu <damien.mathieu@shazino.com>\n-* Tons of fixups to the hipchat adapter - Codafoo <cesar@webzense.net>, Assaf Arkin <assaf@labnotes.org>\n-* Various IRC adapter fixups - Mark Paschal <markpasc@markpasc.org>, Jesse Szwedko\n-* Enter/Leave events for adapters - Brian Donovan <me@brian-donovan.com>\n-* XMPP adapter fixups - codec <codec@fnord.cx>,\n-* Break out persistence layer to make it easier to have multiple backends - technoweenie\n-* Various refactorings/cleanups - Tom Bell <tomb@tombell.org.uk>\n-* translation script enhancements - OiNutter <willmckenzie@oinutter.co.uk>\n-* XMPP user persistence fixups - Andy Fowler <andy@andyfowler.com>\n-\n-Upgrading\n----------\n-If you're using the redis persistence you're going to need to enable\n-'redis-brain.coffee' in your hubot-scripts.json file.  It was moved\n-there and the brain now supports events allowing you to use any\n-persistence backend you want.\n-\n-v1.0.5\n-======\n-\n-* Remove infinite loop script to keep things alive - atmos\n-\n-v1.0.4\n-======\n-\n-* HipChat adapter support - Assaf Arkin <assaf@labnotes.org>\n-* XMPP adapter support - Andy Fowler <andy@andyfowler.com>\n-* Twilio adapter fixups - Jesse Newland <jesse@jnewland.com>\n-* Fixup hubot-scripts.json template examples - Mike Skalnik <mike.skalnik@gmail.com>\n-\n-v1.0.3\n-======\n-\n-* Fix IRC adapter replies - Scott Moak <scott.moak@gmail.com>\n-* Ensure people are running node 0.4.x - Corey Donohoe <atmos@atmos.org>\n-* Doc fixups - Aitor Garc\u00eda Rey <aitor@linkingpaths.com>\n-* Twilio adapter support - Tom Bell <tomb@tombell.org.uk>", "changes": 574}, {"status": "modified", "deletions": 16, "raw_url": "https://github.com/hubotio/hubot/raw/18b44bec9ecc69d7f5ad117c6db597973accc403/CONTRIBUTING.md", "blob_url": "https://github.com/hubotio/hubot/blob/18b44bec9ecc69d7f5ad117c6db597973accc403/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/CONTRIBUTING.md?ref=18b44bec9ecc69d7f5ad117c6db597973accc403", "filename": "CONTRIBUTING.md", "sha": "e9e12dd38134e53c3942a8da4fa0dbd078207c02", "additions": 21, "patch": "@@ -30,26 +30,31 @@ Some things that will increase the chance that your pull request is accepted:\n   * If the change does break compatibility, how can it be updated to become backwards compatible, while directing users to the new way of doing things?\n * Your commits are associated with your GitHub user: https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/\n * Make pull requests against a feature branch,\n-* Don't update the version in `package.json`, as the maintainers will manage that in a follow-up PR to release\n+* Follow our commit message conventions:\n+  * use imperative, present tense: \u201cchange\u201d not \u201cchanged\u201d nor \u201cchanges\u201d\n+  * Commit test files with `test: \u2026` or `test(scope): \u2026` prefix.\n+  * Commit bug fixes with `fix: \u2026` or `fix(scope): \u2026` prefix\n+  * Commit features with `feat: \u2026` or `feat(scope): \u2026` prefix\n+  * Commit breaking changes by adding `BREAKING CHANGE:` in the commit body.\n+    The commit subject does not matter. A commit can have multiple `BREAKING CHANGE:`\n+    sections\n+  * Commit changes to `package.json`, `.gitignore` and other meta files with\n+  `chore(filenamewithout.ext): \u2026`\n+  * Commit changes to README files or comments with `docs(README): \u2026`\n+  * Cody style changes with `style: standard`\n+  * see [Angular\u2019s Commit Message Conventions](https://gist.github.com/stephenparish/9941e89d80e2bc58a153)\n+    for a full list of recommendations.\n \n # Stale issue and pull request policy\n \n Issues and pull requests have a shelf life and sometimes they are no longer relevant. All issues and pull requests that have not had any activity for 90 days will be marked as `stale`. Simply leave a comment with information about why it may still be relevant to keep it open. If no activity occurs in the next 7 days, it will be automatically closed.\n \n The goal of this process is to keep the list of open issues and pull requests focused on work that is actionable and important for the maintainers and the community.\n \n-# Releasing\n-\n-This section is for maintainers of Hubot. Here's the current process for releasing:\n-\n-* review unreleased changes since last release on https://github.com/github/hubot/commits/master\n-* determine what version to release as:\n-  * bug or documentation fix? patch release\n-  * new functionality that is backwards compatible? minor version\n-  * breaking change? major release, but think about if it can be fixed to be a minor release instead\n-* create a `release-vX.X.X` branch to release from\n-* update `package.json`'s `version`\n-* summarize changes in `CHANGELOG.md` (see https://github.com/github/hubot/blob/master/CHANGELOG.md#v2120 for an example)\n-* create a pull request, and cc pull requests included in this release, as well as their contributors (see https://github.com/github/hubot/pull/887 as an example)\n-* merge pull request\n-* checkout master branch, and run `script/release`\n+# Pull Request Reviews & releasing\n+\n+Releasing `hubot` is fully automated using [semantic-release](https://github.com/semantic-release/semantic-release). Once merged into the `master` branch, `semantic-release` will automatically release a new version based on the commit messages of the pull request. For it to work correctly, make sure that the correct commit message conventions have been used. The ones relevant are\n+\n+* `fix: \u2026` will bump the fix version, e.g. 1.2.3 \u2192 1.2.4\n+* `feat: \u2026` will bump the feature version, e.g. 1.2.3 \u2192 1.3.0\n+* `BREAKING CHANGE: \u2026` in the commit body will bump the breaking change version, e.g. 1.2.3 \u2192 2.0.0", "changes": 37}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/18b44bec9ecc69d7f5ad117c6db597973accc403/bin/e2e-test.sh", "blob_url": "https://github.com/hubotio/hubot/blob/18b44bec9ecc69d7f5ad117c6db597973accc403/bin/e2e-test.sh", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/e2e-test.sh?ref=18b44bec9ecc69d7f5ad117c6db597973accc403", "filename": "bin/e2e-test.sh", "sha": "e5e975b7f35ed27e1d8023a45d185199d1279e52", "additions": 1, "patch": "@@ -28,7 +28,7 @@ export NODE_PATH=$NODE_PATH/$HUBOT_FOLDER/node_modules:$TEMP_ROOT/node_modules\n \n ## start\n expect <<EOL\n-  set timeout 10\n+  set timeout 30\n \n   spawn bin/hubot --name e2etest\n ", "changes": 2}, {"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/18b44bec9ecc69d7f5ad117c6db597973accc403/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/18b44bec9ecc69d7f5ad117c6db597973accc403/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=18b44bec9ecc69d7f5ad117c6db597973accc403", "filename": "package.json", "sha": "0c308e343d660dd1ee6838a1cd8939a17a95aaba", "additions": 9, "patch": "@@ -1,6 +1,9 @@\n {\n   \"name\": \"hubot\",\n-  \"version\": \"2.19.0\",\n+  \"version\": \"0.0.0-development\",\n+  \"publishconfig\": {\n+    \"tag\": \"next\"\n+  },\n   \"author\": \"hubot\",\n   \"keywords\": [\n     \"github\",\n@@ -12,7 +15,7 @@\n   \"license\": \"MIT\",\n   \"repository\": {\n     \"type\": \"git\",\n-    \"url\": \"https://github.com/github/hubot.git\"\n+    \"url\": \"https://github.com/hubotio/hubot.git\"\n   },\n   \"dependencies\": {\n     \"async\": \">=0.1.0 <1.0.0\",\n@@ -33,7 +36,8 @@\n     \"nyc\": \"^11.0.2\",\n     \"sinon\": \"~1.17.0\",\n     \"sinon-chai\": \"^2.8.0\",\n-    \"standard\": \"^10.0.2\"\n+    \"standard\": \"^10.0.2\",\n+    \"semantic-release\": \"^6.3.6\"\n   },\n   \"engines\": {\n     \"node\": \">4\",\n@@ -48,6 +52,7 @@\n     \"pretest\": \"standard\",\n     \"test\": \"nyc --reporter=html --reporter=text mocha\",\n     \"coverage\": \"nyc report --reporter=text-lcov | coveralls\",\n-    \"test:smoke\": \"node src/**/*.js\"\n+    \"test:smoke\": \"node src/**/*.js\",\n+    \"semantic-release\": \"semantic-release pre && npm publish && semantic-release post\"\n   }\n }", "changes": 13}], "1364": [{"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/beb8dca55cd75605513d4cd135547141083dc078/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/beb8dca55cd75605513d4cd135547141083dc078/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=beb8dca55cd75605513d4cd135547141083dc078", "filename": "package.json", "sha": "4643c9dca5fb625751eae6ecdd9b01344c509784", "additions": 2, "patch": "@@ -40,8 +40,8 @@\n     \"semantic-release\": \"^6.3.6\"\n   },\n   \"engines\": {\n-    \"node\": \">4\",\n-    \"npm\": \">2\"\n+    \"node\": \"> 4.0.0\",\n+    \"npm\": \"> 2.0.0\"\n   },\n   \"main\": \"./index\",\n   \"bin\": {", "changes": 4}], "1366": [{"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/096cf356a8f347c732516d73646ac8873f76631b/bin/hubot.js", "blob_url": "https://github.com/hubotio/hubot/blob/096cf356a8f347c732516d73646ac8873f76631b/bin/hubot.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/bin/hubot.js?ref=096cf356a8f347c732516d73646ac8873f76631b", "filename": "bin/hubot.js", "sha": "516be4967fb6a3ddd62918067658683a00ebd765", "additions": 3, "patch": "@@ -23,7 +23,7 @@ const options = {\n   adapter: process.env.HUBOT_ADAPTER || 'shell',\n   alias: process.env.HUBOT_ALIAS || false,\n   create: process.env.HUBOT_CREATE || false,\n-  enableHttpd: process.env.HUBOT_HTTPD || true,\n+  httpd: process.env.HUBOT_HTTPD || true,\n   scripts: process.env.HUBOT_SCRIPTS || [],\n   name: process.env.HUBOT_NAME || 'Hubot',\n   path: process.env.HUBOT_PATH || '.',\n@@ -43,7 +43,7 @@ Parser.on('create', function (opt, value) {\n })\n \n Parser.on('disable-httpd', opt => {\n-  options.enableHttpd = false\n+  options.httpd = false\n })\n \n Parser.on('help', function (opt, value) {\n@@ -94,7 +94,7 @@ if (options.create) {\n   process.exit(1)\n }\n \n-const robot = Hubot.loadBot(undefined, options.adapter, options.enableHttpd, options.name, options.alias)\n+const robot = Hubot.Robot(options)\n \n if (options.version) {\n   console.log(robot.version)", "changes": 6}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/096cf356a8f347c732516d73646ac8873f76631b/es2015.js", "blob_url": "https://github.com/hubotio/hubot/blob/096cf356a8f347c732516d73646ac8873f76631b/es2015.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/es2015.js?ref=096cf356a8f347c732516d73646ac8873f76631b", "filename": "es2015.js", "sha": "41c4d8c0f02eadef39ab4745bcf0dba438209732", "additions": 5, "patch": "@@ -1,5 +1,7 @@\n 'use strict'\n \n+const deprecate = require('depd')('hubot')\n+\n const User = require('./src/user')\n const Brain = require('./src/brain')\n const Robot = require('./src/robot')\n@@ -24,6 +26,8 @@ module.exports = {\n   CatchAllMessage: Message.CatchAllMessage,\n \n   loadBot (adapterPath, adapterName, enableHttpd, botName, botAlias) {\n-    return new module.exports.Robot(adapterPath, adapterName, enableHttpd, botName, botAlias)\n+    deprecate('use Hubot.Robot constructor directly instead of Hubot.loadBot')\n+\n+    return new module.exports.Robot({adapter: adapterName, httpd: enableHttpd, name: botName, alias: botAlias})\n   }\n }", "changes": 6}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/096cf356a8f347c732516d73646ac8873f76631b/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/096cf356a8f347c732516d73646ac8873f76631b/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=096cf356a8f347c732516d73646ac8873f76631b", "filename": "package.json", "sha": "62cb82430adca78932162313e4e5dd360b6835cc", "additions": 1, "patch": "@@ -23,6 +23,7 @@\n     \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n     \"connect-multiparty\": \"^1.2.5\",\n+    \"depd\": \"^1.1.0\",\n     \"express\": \"^3.21.2\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",", "changes": 1}, {"status": "modified", "deletions": 15, "raw_url": "https://github.com/hubotio/hubot/raw/096cf356a8f347c732516d73646ac8873f76631b/src/robot.js", "blob_url": "https://github.com/hubotio/hubot/blob/096cf356a8f347c732516d73646ac8873f76631b/src/robot.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.js?ref=096cf356a8f347c732516d73646ac8873f76631b", "filename": "src/robot.js", "sha": "c7434e4a4dc1ce0e72717e5ba04bfa3c07985edf", "additions": 29, "patch": "@@ -7,6 +7,7 @@ const path = require('path')\n const async = require('async')\n const Log = require('log')\n const HttpClient = require('scoped-http-client')\n+const deprecate = require('depd')('hubot')\n \n const Brain = require('./brain')\n const Response = require('./response')\n@@ -21,23 +22,36 @@ class Robot {\n   // Robots receive messages from a chat source (Campfire, irc, etc), and\n   // dispatch them to matching listeners.\n   //\n-  // adapterPath -  A String of the path to built-in adapters (defaults to src/adapters)\n-  // adapter     - A String of the adapter name.\n-  // httpd       - A Boolean whether to enable the HTTP daemon.\n-  // name        - A String of the robot name, defaults to Hubot.\n-  constructor (adapterPath, adapter, httpd, name, alias) {\n-    if (name == null) {\n-      name = 'Hubot'\n+  // @param {Object} options - parameters for building Robot\n+  // @param {String} options.adapterPath -  A String of the path to built-in adapters (defaults to src/adapters)\n+  // @param {String} options.adapter     - A String of the adapter name.\n+  // @param {String} options.httpd       - A Boolean whether to enable the HTTP daemon.\n+  // @param {String} options.name        - A String of the robot name, defaults to Hubot.\n+  constructor (options) {\n+    if (arguments.length > 1) {\n+      options = {\n+        adapterPath: arguments[0],\n+        adapter: arguments[1],\n+        httpd: arguments[2],\n+        name: arguments[3],\n+        alias: arguments[4]\n+      }\n+\n+      deprecate('Robot constructed with multiple arguments, construct with one object argument instead')\n+    }\n+\n+    if (options.name == null) {\n+      options.name = 'Hubot'\n     }\n-    if (alias == null) {\n-      alias = false\n+    if (options.alias == null) {\n+      options.alias = false\n     }\n-    this.adapterPath = path.join(__dirname, 'adapters')\n+    this.adapterPath = options.adapterPath || path.join(__dirname, 'adapters')\n \n-    this.name = name\n+    this.name = options.name\n     this.events = new EventEmitter()\n     this.brain = new Brain(this)\n-    this.alias = alias\n+    this.alias = options.alias\n     this.adapter = null\n     this.Response = Response\n     this.commands = []\n@@ -52,15 +66,15 @@ class Robot {\n     this.globalHttpOptions = {}\n \n     this.parseVersion()\n-    if (httpd) {\n+    if (options.httpd) {\n       this.setupExpress()\n     } else {\n       this.setupNullRouter()\n     }\n \n-    this.loadAdapter(adapter)\n+    this.loadAdapter(options.adapter)\n \n-    this.adapterName = adapter\n+    this.adapterName = options.adapter\n     this.errorHandlers = []\n \n     this.on('error', (err, res) => {", "changes": 44}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/096cf356a8f347c732516d73646ac8873f76631b/test/es2015_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/096cf356a8f347c732516d73646ac8873f76631b/test/es2015_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/es2015_test.js?ref=096cf356a8f347c732516d73646ac8873f76631b", "filename": "test/es2015_test.js", "sha": "46e62ac72f51fd24104063cdd58b8542c008a918", "additions": 1, "patch": "@@ -194,6 +194,6 @@ describe('hubot/es2015', function () {\n \n     expect(loadBot).to.be.a('function')\n     Hubot.loadBot('adapterPath', 'adapterName', 'enableHttpd', 'botName', 'botAlias')\n-    expect(Hubot.Robot).to.be.called.calledWith('adapterPath', 'adapterName', 'enableHttpd', 'botName', 'botAlias')\n+    expect(Hubot.Robot).to.be.called.calledWith({adapter: 'adapterName', httpd: 'enableHttpd', name: 'botName', alias: 'botAlias'})\n   })\n })", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/096cf356a8f347c732516d73646ac8873f76631b/test/middleware_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/096cf356a8f347c732516d73646ac8873f76631b/test/middleware_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/middleware_test.js?ref=096cf356a8f347c732516d73646ac8873f76631b", "filename": "test/middleware_test.js", "sha": "3f1b07e3c77177695c3d704340b058642eeb5db5", "additions": 1, "patch": "@@ -351,7 +351,7 @@ describe('Middleware', function () {\n         warnOnUnregistered: false\n       })\n       mockery.registerMock('hubot-mock-adapter', require('./fixtures/mock-adapter'))\n-      this.robot = new Robot(null, 'mock-adapter', true, 'TestHubot')\n+      this.robot = new Robot({adapter: 'mock-adapter', httpd: false, name: 'TestHubot'})\n       this.robot.run\n \n       // Re-throw AssertionErrors for clearer test failures", "changes": 2}, {"status": "modified", "deletions": 2, "raw_url": "https://github.com/hubotio/hubot/raw/096cf356a8f347c732516d73646ac8873f76631b/test/robot_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/096cf356a8f347c732516d73646ac8873f76631b/test/robot_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.js?ref=096cf356a8f347c732516d73646ac8873f76631b", "filename": "test/robot_test.js", "sha": "7fb95ee9204c0bdf993d6c604d34e18896acb05c", "additions": 24, "patch": "@@ -28,8 +28,7 @@ describe('Robot', function () {\n       warnOnUnregistered: false\n     })\n     mockery.registerMock('hubot-mock-adapter', require('./fixtures/mock-adapter'))\n-    this.robot = new Robot(null, 'mock-adapter', true, 'TestHubot')\n-    this.robot.alias = 'Hubot'\n+    this.robot = new Robot({adapter: 'mock-adapter', httpd: false, name: 'TestHubot', alias: 'Hubot'})\n     this.robot.run()\n \n     // Re-throw AssertionErrors for clearer test failures\n@@ -1011,3 +1010,26 @@ describe('Robot', function () {\n     })\n   })\n })\n+\n+describe('Robot deprecated constructor', function () {\n+  beforeEach(function () {\n+    mockery.enable({\n+      warnOnReplace: false,\n+      warnOnUnregistered: false\n+    })\n+    mockery.registerMock('hubot-mock-adapter', require('./fixtures/mock-adapter'))\n+  })\n+\n+  afterEach(function () {\n+    mockery.disable()\n+    this.robot.shutdown()\n+  })\n+\n+  it('works but is deprecated', function () {\n+    this.robot = new Robot(null, 'mock-adapter', false, 'TestHubot', 'Hubot')\n+    expect(this.robot.adapterName).to.equal('mock-adapter')\n+    // TODO test that false got passed in? that value isn't set, instead it determines if null route setup or not\n+    expect(this.robot.name).to.equal('TestHubot')\n+    expect(this.robot.alias).to.equal('Hubot')\n+  })\n+})", "changes": 26}], "1367": [{"status": "modified", "deletions": 45, "raw_url": "https://github.com/hubotio/hubot/raw/a48576e293e3cc1546b3e880e811b994c3fa7d45/src/robot.js", "blob_url": "https://github.com/hubotio/hubot/blob/a48576e293e3cc1546b3e880e811b994c3fa7d45/src/robot.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.js?ref=a48576e293e3cc1546b3e880e811b994c3fa7d45", "filename": "src/robot.js", "sha": "88ab3ba19f2f4334013fb3582ca20df8aa3f08d8", "additions": 33, "patch": "@@ -18,9 +18,8 @@ const HUBOT_DEFAULT_ADAPTERS = ['campfire', 'shell']\n const HUBOT_DOCUMENTATION_SECTIONS = ['description', 'dependencies', 'configuration', 'commands', 'notes', 'author', 'authors', 'examples', 'tags', 'urls']\n \n class Robot {\n-  // Robots receive messages from a chat source (Campfire, irc, etc), and\n-  // dispatch them to matching listeners.\n-  //\n+  // Robots receive messages from a chat source (Campfire, irc, etc), and dispatch them to matching listeners.\n+  \n   // adapterPath -  A String of the path to built-in adapters (defaults to src/adapters)\n   // adapter     - A String of the adapter name.\n   // httpd       - A Boolean whether to enable the HTTP daemon.\n@@ -72,51 +71,45 @@ class Robot {\n     process.on('uncaughtException', this.onUncaughtException)\n   }\n \n-  // Public: Adds a custom Listener with the provided matcher, options, and\n-  // callback\n-  //\n+  // Public: Adds a custom Listener with the provided matcher, options, and callback\n+\n   // matcher  - A Function that determines whether to call the callback.\n-  //            Expected to return a truthy value if the callback should be\n-  //            executed.\n-  // options  - An Object of additional parameters keyed on extension name\n-  //            (optional).\n-  // callback - A Function that is called with a Response object if the\n-  //            matcher function returns true.\n+  //            Expected to return a truthy value if the callback should be executed.\n+  // options  - An Object of additional parameters keyed on extension name (optional).\n+  // callback - A Function that is called with a Response object if the matcher function returns true.\n   //\n   // Returns nothing.\n   listen (matcher, options, callback) {\n     this.listeners.push(new Listener.Listener(this, matcher, options, callback))\n   }\n \n-  // Public: Adds a Listener that attempts to match incoming messages based on\n-  // a Regex.\n+  // Public: Adds a Listener that attempts to match incoming messages based on a Regex.\n   //\n   // regex    - A Regex that determines if the callback should be called.\n-  // options  - An Object of additional parameters keyed on extension name\n-  //            (optional).\n+  // options  - An Object of additional parameters keyed on extension name (optional).\n   // callback - A Function that is called with a Response object.\n   //\n   // Returns nothing.\n   hear (regex, options, callback) {\n     this.listeners.push(new Listener.TextListener(this, regex, options, callback))\n   }\n \n-  // Public: Adds a Listener that attempts to match incoming messages directed\n-  // at the robot based on a Regex. All regexes treat patterns like they begin\n-  // with a '^'\n+  /* \n+    Public: Adds a Listener that attempts to match incoming messages directed\n+    at the robot based on a Regex. All regexes treat patterns like they begin\n+    with a '^'\n+  */\n   //\n   // regex    - A Regex that determines if the callback should be called.\n-  // options  - An Object of additional parameters keyed on extension name\n-  //            (optional).\n+  // options  - An Object of additional parameters keyed on extension name (optional).\n   // callback - A Function that is called with a Response object.\n   //\n   // Returns nothing.\n   respond (regex, options, callback) {\n     this.hear(this.respondPattern(regex), options, callback)\n   }\n \n-  // Public: Build a regular expression that matches messages addressed\n-  // directly to the robot\n+  // Public: Build a regular expression that matches messages addressed directly to the robot\n   //\n   // regex - A RegExp for the message part that follows the robot's name/alias\n   //\n@@ -151,8 +144,7 @@ class Robot {\n \n   // Public: Adds a Listener that triggers when anyone enters the room.\n   //\n-  // options  - An Object of additional parameters keyed on extension name\n-  //            (optional).\n+  // options  - An Object of additional parameters keyed on extension name (optional).\n   // callback - A Function that is called with a Response object.\n   //\n   // Returns nothing.\n@@ -162,8 +154,7 @@ class Robot {\n \n   // Public: Adds a Listener that triggers when anyone leaves the room.\n   //\n-  // options  - An Object of additional parameters keyed on extension name\n-  //            (optional).\n+  // options  - An Object of additional parameters keyed on extension name (optional).\n   // callback - A Function that is called with a Response object.\n   //\n   // Returns nothing.\n@@ -173,17 +164,15 @@ class Robot {\n \n   // Public: Adds a Listener that triggers when anyone changes the topic.\n   //\n-  // options  - An Object of additional parameters keyed on extension name\n-  //            (optional).\n+  // options  - An Object of additional parameters keyed on extension name (optional).\n   // callback - A Function that is called with a Response object.\n   //\n   // Returns nothing.\n   topic (options, callback) {\n     this.listen(msg => msg instanceof Message.TopicMessage, options, callback)\n   }\n \n-  // Public: Adds an error handler when an uncaught exception or user emitted\n-  // error event occurs.\n+  // Public: Adds an error handler when an uncaught exception or user emitted error event occurs.\n   //\n   // callback - A Function that is called with the error object.\n   //\n@@ -192,8 +181,7 @@ class Robot {\n     this.errorHandlers.push(callback)\n   }\n \n-  // Calls and passes any registered error handlers for unhandled exceptions or\n-  // user emitted error events.\n+  // Calls and passes any registered error handlers for unhandled exceptions or user emitted error events.\n   //\n   // err - An Error object.\n   // res - An optional Response object that generated the error\n@@ -232,24 +220,24 @@ class Robot {\n     })\n   }\n \n-  // Public: Registers new middleware for execution after matching but before\n-  // Listener callbacks\n-  //\n-  // middleware - A function that determines whether or not a given matching\n-  //              Listener should be executed. The function is called with\n-  //              (context, next, done). If execution should\n-  //              continue (next middleware, Listener callback), the middleware\n-  //              should call the 'next' function with 'done' as an argument.\n-  //              If not, the middleware should call the 'done' function with\n-  //              no arguments.\n+  // Public: Registers new middleware for execution after matching but before listener callbacks\n   //\n+  // middleware:\n+    /*            \n+                  A function that determines whether or not a given matching\n+                  Listener should be executed. The function is called with\n+                  (context, next, done). If execution should\n+                  continue (next middleware, Listener callback), the middleware\n+                  should call the 'next' function with 'done' as an argument.\n+                  If not, the middleware should call the 'done' function with\n+                  no arguments.\n+    */\n   // Returns nothing.\n   listenerMiddleware (middleware) {\n     this.middleware.listener.register(middleware)\n   }\n \n-  // Public: Registers new middleware for execution as a response to any\n-  // message is being sent.\n+  // Public: Registers new middleware for execution as a response to any message is being sent.\n   //\n   // middleware - A function that examines an outgoing message and can modify\n   //              it or prevent its sending. The function is called with", "changes": 78}], "1370": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d92385e5c20d2e462ba084f05b2361fad3c317ff/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/d92385e5c20d2e462ba084f05b2361fad3c317ff/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=d92385e5c20d2e462ba084f05b2361fad3c317ff", "filename": "docs/scripting.md", "sha": "cba4658ea77b556ad50421274316e373c7877f57", "additions": 4, "patch": "@@ -702,6 +702,10 @@ Every middleware receives the same API signature of `context`, `next`, and\n `done`. Different kinds of middleware may receive different information in the\n `context` object. For more details, see the API for each type of middleware.\n \n+Middleware execution returns a promise that resolves with the final `context`\n+when the middleware stack completes. If the middleware stack throws an error,\n+the promise will be rejected with the error and `context` at that point.\n+\n ### Error Handling\n \n For synchronous middleware (never yields to the event loop), hubot will automatically catch errors and emit an an `error` event, just like in standard listeners. Hubot will also automatically call the most recent `done` callback to unwind the middleware stack. Asynchronous middleware should catch its own exceptions, emit an `error` event, and call `done`. Any uncaught exceptions will interrupt all execution of middleware completion callbacks.", "changes": 4}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d92385e5c20d2e462ba084f05b2361fad3c317ff/package.json", "blob_url": "https://github.com/hubotio/hubot/blob/d92385e5c20d2e462ba084f05b2361fad3c317ff/package.json", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/package.json?ref=d92385e5c20d2e462ba084f05b2361fad3c317ff", "filename": "package.json", "sha": "572156825f10e3468b530e46c4ea969243017c55", "additions": 1, "patch": "@@ -20,6 +20,7 @@\n     \"cline\": \"^0.8.2\",\n     \"coffee-script\": \"1.6.3\",\n     \"connect-multiparty\": \"^1.2.5\",\n+    \"es6-promise\": \"^4.1.0\",\n     \"express\": \"^3.21.2\",\n     \"log\": \"1.4.0\",\n     \"optparse\": \"1.0.4\",", "changes": 1}, {"status": "modified", "deletions": 22, "raw_url": "https://github.com/hubotio/hubot/raw/d92385e5c20d2e462ba084f05b2361fad3c317ff/src/middleware.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d92385e5c20d2e462ba084f05b2361fad3c317ff/src/middleware.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/middleware.coffee?ref=d92385e5c20d2e462ba084f05b2361fad3c317ff", "filename": "src/middleware.coffee", "sha": "c97b7bdccb11afb03b4d0418a37119e127093fae", "additions": 35, "patch": "@@ -1,4 +1,5 @@\n async = require 'async'\n+require('es6-promise').polyfill()\n \n class Middleware\n   # We use this recursively, and using nextTick recursively is deprecated in node 0.10.\n@@ -21,32 +22,44 @@ class Middleware\n   # done() - Initial (final) completion callback. May be wrapped by\n   #     executed middleware.\n   #\n-  # Returns nothing\n+  # Returns promise - resolves with context when middleware completes\n   # Returns before executing any middleware\n   execute: (context, next, done) ->\n-    done ?= ->\n-    # Execute a single piece of middleware and update the completion callback\n-    # (each piece of middleware can wrap the 'done' callback with additional\n-    # logic).\n-    executeSingleMiddleware = (doneFunc, middlewareFunc, cb) =>\n-      # Match the async.reduce interface\n-      nextFunc = (newDoneFunc) -> cb(null, newDoneFunc or doneFunc)\n-      # Catch errors in synchronous middleware\n-      try\n-        middlewareFunc.call(undefined, context, nextFunc, doneFunc)\n-      catch err\n-        # Maintaining the existing error interface (Response object)\n-        @robot.emit('error', err, context.response)\n-        # Forcibly fail the middleware and stop executing deeper\n-        doneFunc()\n \n-    # Executed when the middleware stack is finished\n-    allDone = (_, finalDoneFunc) -> next(context, finalDoneFunc)\n+    new Promise (resolve, reject) =>\n \n-    # Execute each piece of middleware, collecting the latest 'done' callback\n-    # at each step.\n-    process.nextTick =>\n-      async.reduce(@stack, done, executeSingleMiddleware, allDone)\n+      done ?= ->\n+        \n+      # Allow each middleware to resolve the promise early if it calls done()\n+      pieceDone = ->\n+        done()\n+        resolve context\n+        \n+      # Execute a single piece of middleware and update the completion callback\n+      # (each piece of middleware can wrap the 'done' callback with additional\n+      # logic).\n+      executeSingleMiddleware = (doneFunc, middlewareFunc, cb) =>\n+        # Match the async.reduce interface\n+        nextFunc = (newDoneFunc) -> cb(null, newDoneFunc or doneFunc)\n+        # Catch errors in synchronous middleware\n+        try\n+          middlewareFunc.call(undefined, context, nextFunc, doneFunc)\n+        catch err\n+          # Maintaining the existing error interface (Response object)\n+          @robot.emit('error', err, context.response)\n+          # Forcibly fail the middleware and stop executing deeper\n+          doneFunc()\n+          reject err, context\n+        \n+      # Executed when the middleware stack is finished\n+      allDone = (_, finalDoneFunc) ->\n+        next context, finalDoneFunc\n+        resolve context\n+      \n+      # Execute each piece of middleware, collecting the latest 'done' callback\n+      # at each step.\n+      process.nextTick =>\n+        async.reduce(@stack, pieceDone, executeSingleMiddleware, allDone)\n \n   # Public: Registers new middleware\n   #", "changes": 57}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d92385e5c20d2e462ba084f05b2361fad3c317ff/src/response.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d92385e5c20d2e462ba084f05b2361fad3c317ff/src/response.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/response.coffee?ref=d92385e5c20d2e462ba084f05b2361fad3c317ff", "filename": "src/response.coffee", "sha": "1e0b64c054955ba88efdb3293e335587f5aa320b", "additions": 1, "patch": "@@ -62,7 +62,7 @@ class Response\n   # strings - One or more strings to be posted. The order of these strings\n   #           should be kept intact.\n   #\n-  # Returns nothing\n+  # Returns promise - resolves with context when middleware completes\n   locked: (strings...) ->\n     @runWithMiddleware(\"locked\", { plaintext: true }, strings...)\n ", "changes": 2}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/d92385e5c20d2e462ba084f05b2361fad3c317ff/src/robot.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d92385e5c20d2e462ba084f05b2361fad3c317ff/src/robot.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.coffee?ref=d92385e5c20d2e462ba084f05b2361fad3c317ff", "filename": "src/robot.coffee", "sha": "c7f6d969833f2ac7b807252d9309e9567fbfafdf", "additions": 1, "patch": "@@ -289,7 +289,7 @@ class Robot\n   #\n   # cb - Optional callback that is called when message processing is complete\n   #\n-  # Returns nothing.\n+  # Returns promise - resolves with context when middleware completes\n   # Returns before executing callback\n   receive: (message, cb) ->\n     # When everything is finished (down the middleware stack and back up),", "changes": 2}, {"status": "modified", "deletions": 3, "raw_url": "https://github.com/hubotio/hubot/raw/d92385e5c20d2e462ba084f05b2361fad3c317ff/test/middleware_test.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d92385e5c20d2e462ba084f05b2361fad3c317ff/test/middleware_test.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/middleware_test.coffee?ref=d92385e5c20d2e462ba084f05b2361fad3c317ff", "filename": "test/middleware_test.coffee", "sha": "93fa70b8109c446c0c1f1e3375c637dd21691ec6", "additions": 61, "patch": "@@ -208,6 +208,64 @@ describe 'Middleware', ->\n           allDone\n         )\n \n+      it 'returns a promise that resolves when async middleware stack is complete', (testDone) ->\n+        \n+        testMiddlewareA = (context, next, done) ->\n+          setTimeout ->\n+            context.A = 'done'\n+            next(done)\n+          , 50\n+\n+        testMiddlewareB = (context, next, done) ->\n+          setTimeout ->\n+            context.B = 'done'\n+            next(done)\n+          , 50\n+\n+        @middleware.register testMiddlewareA\n+        @middleware.register testMiddlewareB\n+\n+        middlewareFinished = ->\n+\n+        middlewarePromise = @middleware.execute(\n+          {}\n+          (_, done) -> done()\n+          middlewareFinished\n+        )\n+        \n+        middlewarePromise.then (finalContext) ->\n+          expect(finalContext).to.eql A: 'done', B: 'done'\n+          testDone()\n+      \n+      it 'promise resolves when middleware completes early, with context at that point', (testDone) ->\n+        \n+        testMiddlewareA = (context, next, done) ->\n+          setTimeout ->\n+            context.A = 'done'\n+            done()\n+          , 50\n+        \n+        testMiddlewareB = (context, next, done) ->\n+          setTimeout ->\n+            context.B = 'done'\n+            next(done)\n+          , 50\n+        \n+        @middleware.register testMiddlewareA\n+        @middleware.register testMiddlewareB\n+\n+        middlewareFinished = ->\n+\n+        middlewarePromise = @middleware.execute(\n+          {}\n+          (_, done) -> done()\n+          middlewareFinished\n+        )\n+        \n+        middlewarePromise.then (finalContext) ->\n+          expect(finalContext).to.eql A: 'done'\n+          testDone()\n+\n       describe 'error handling', ->\n         it 'does not execute subsequent middleware after the error is thrown', (testDone) ->\n           middlewareExecution = []\n@@ -238,7 +296,7 @@ describe 'Middleware', ->\n             {}\n             middlewareFinished\n             middlewareFailed\n-          )\n+          ).catch (reason) -> # supress warning re unhandled promise rejection\n \n         it 'emits an error event', (testDone) ->\n           testResponse = {}\n@@ -263,7 +321,7 @@ describe 'Middleware', ->\n             {response: testResponse},\n             middlewareFinished,\n             middlewareFailed\n-          )\n+          ).catch (reason) -> # supress warning re unhandled promise rejection\n \n         it 'unwinds the middleware stack (calling all done functions)', (testDone) ->\n           extraDoneFunc = null\n@@ -291,7 +349,7 @@ describe 'Middleware', ->\n             {}\n             middlewareFinished\n             middlewareFailed\n-          )\n+          ).catch (reason) -> # supress warning re unhandled promise rejection\n \n     describe '#register', ->\n       it 'adds to the list of middleware', ->", "changes": 64}], "1372": [{"status": "modified", "deletions": 59, "raw_url": "https://github.com/hubotio/hubot/raw/0c3ec03be90bcc1b35fc041f2e2403f06ffc66ad/docs/deploying/bluemix.md", "blob_url": "https://github.com/hubotio/hubot/blob/0c3ec03be90bcc1b35fc041f2e2403f06ffc66ad/docs/deploying/bluemix.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/bluemix.md?ref=0c3ec03be90bcc1b35fc041f2e2403f06ffc66ad", "filename": "docs/deploying/bluemix.md", "sha": "1e10909dfe5167a58588b3045a45e3196af40951", "additions": 58, "patch": "@@ -11,34 +11,39 @@ to deploy so you can use it beyond just your local machine.\n [Cloud Foundry](https://www.cloudfoundry.org/), so we'll be using the `cf cli`\n throughout these examples.\n \n-Unlike Heroku, the free tier on Bluemix supports 24/7 uptime, so you don't need\n-to go through the hassle of setting up something like\n-[hubot-heroku-keepalive](https://github.com/hubot-scripts/hubot-heroku-keepalive).\n+Hubot was originally very closely coupled to Heroku, so there are a couple of\n+things to clean up first that we don't need or that might get in the way on\n+another platform:\n+* remove `Procfile` as we'll create the `manifest.yml` that Bluemix needs in a\n+ moment\n+* remove the `hubot-heroku-keepalive` line from `external_scripts.json` and also\n+ remove the related npm module (it causes errors on other platforms):\n \n-You will need to install the\n-[Cloud Foundry CLI](https://github.com/cloudfoundry/cli/releases), and create a\n-[Bluemix Account](http://bluemix.net).\n+  npm uninstall --save hubot-heroku-keepalive\n \n-First we need to define a `manifest.yml` file in the root directory (and delete\n-the generated `procfile`). The contents of the manifest at the bare minimum\n-should look like:\n+In preparation for working with Bluemix, install the [Cloud Foundry\n+CLI](https://github.com/cloudfoundry/cli/releases), and create a [Bluemix\n+Account](http://bluemix.net).\n+\n+First we need to define a `manifest.yml` file in the root directory. The\n+contents of the manifest at the bare minimum should look like:\n \n ```yml\n applications:\n-- buildpack: https://github.com/jthomas/nodejs-v4-buildpack.git\n+- name: myVeryOwnHubot\n   command: ./bin/hubot --adapter slack\n-  path: .\n   instances: 1\n-  memory: 256M\n+  memory: 512M\n ```\n \n-In this example, we're using the slack adapter (as shown by the start command).\n-Of course, the start command can be whatever you need to start your specific\n-hubot. You can optionally set a `host`, and `name`, and much more, or you can\n-set those up through the Bluemix GUI in the dashboard. For thorough\n-documentation on what the `manifest.yml` file does and how it used and how to\n-configure your own, see\n-[these docs](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html).\n+In this example, we're using the slack adapter, if you choose slack as your\n+adapter when creating a hubot this will work, otherwise add the `hubot-slack`\n+module to your `package.json`.  **Change the name of your hubot in the\n+`manifest.yml` file** because otherwise your application will clash with someone\n+else's who already deployed an app called this!  There are many more useful\n+things you can change about your hubot using the manifest file, so check out\n+[these docs](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html)\n+for more information.\n \n You then need to connect your hubot project to Bluemix:\n \n@@ -48,60 +53,38 @@ $ cf api https://api.ng.bluemix.net\n $ cf login\n ```\n \n-This will prompt you with your login credentials. Then to deploy your hubot, all\n-you need to do is:\n+Note that the `cf api` command changes per Bluemix region so to deploy somewhere\n+other than \"US South\", replace this api as appropriate.  The `cf login` command\n+will prompt you with your login credentials.\n+\n+Next, we need to set up our environment variables, but we need to create the app\n+first.  It won't work properly without the environment variables it needs, so\n+we'll first of all use the `--no-start` flag to deploy but not attempt to start\n+it.\n \n ```sh\n-$ cf push NAME_OF_YOUR_HUBOT_APP\n+$ cf push NAME_OF_YOUR_HUBOT_APP --no-start\n ```\n \n-Note: if you do not specify a `name` and `host` in your manifest, you will have\n-needed to create a `Node.js` Cloudfoundry app in the Bluemix dashboard. You then\n-use the name that of that app in your `cf push` command. For very thorough\n-documentation on deploying a Node.js app to Bluemix, please\n-[read here](https://www.ng.bluemix.net/docs/starters/nodejs/index.html), for\n-very thorough documentation of the command line interface, please\n-[read here](https://www.ng.bluemix.net/docs/cli/reference/cfcommands/index.html).\n-\n-Finally you will need to add the environment variables to the website to make\n-sure it runs properly. You can either do it through the GUI (under your app's\n-dashboard) or you can use the command line, as follows (example is showing slack\n-as an adapter):\n+Now the app exists, we can set its environment variables.  To access slack,\n+you'll need a slack token from the \"Apps and Integrations\" page; it's visible\n+when you go to create a slackbot.  Copy that token and set it as an environment\n+variable called `HUBOT_SLACK_TOKEN`, like this:\n \n ```sh\n $ cf set-env NAME_OF_YOUR_HUBOT_APP HUBOT_SLACK_TOKEN TOKEN_VALUE\n ```\n \n-### Usage With Git\n-\n-It is not mandatory to use Bluemix with git, but Bluemix supports delivery\n-pipelines that can be tied to Github, Github Enterprise, or a private JazzHub\n-repo.\n-\n-Inside your new hubot directory, make sure you've created a git repository,\n-and that your work is committed:\n-\n-```sh\n-$ git init\n-$ git add .\n-$ git commit -m \"Initial commit\"\n-```\n+If you have other environment variables to set, such as configuring the\n+`REDIS_URL` for `hubot-redis-brain`, this is a good time to do that.\n \n-Then [create a GitHub repository](https://help.github.com/articles/create-a-repo/)\n-for your hubot. This is where Bluemix will pull your code from instead of\n-needing to deploy directly from your dev machine to Bluemix.\n+Finally, we're ready to go!  Deploy \"for real\" this time:\n \n ```sh\n-$ git remote add origin _your GitHub repo_\n-$ git push -u origin master\n+$ cf push NAME_OF_YOUR_HUBOT_APP\n ```\n \n-Once you have your GitHub repo, navigate to your project dashboard, and click\n-\"add git\" (in the upper right hand corner). This will guide you through the\n-process of using either your Github account, or setting up a JazzHub account.\n-You can then add any permutations of test/build/deploy stages into your\n-pipeline. For thorough documentation on that, see\n-[here](https://www.ng.bluemix.net/docs/#services/DeliveryPipeline/index.html#getstartwithCD).\n+You should see your bot connect to slack!\n \n ### Further Reading\n \n@@ -110,3 +93,19 @@ pipeline. For thorough documentation on that, see\n   - [Setting up your manifest](https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html)\n   - [Understanding the CF CLI](https://www.ng.bluemix.net/docs/cli/reference/cfcommands/index.html)\n   - [Setting up a Build Pipleline in Bluemix](https://www.ng.bluemix.net/docs/#services/DeliveryPipeline/index.html#getstartwithCD)\n+\n+### Troubleshooting\n+\n+**Bot doesn't connect**\n+\n+Check your logs for more information using the command `cf logs YOUR_APP_NAME\n+--recent`.  If you have NodeJS installed locally, you can also try running the\n+bot on your local machine to inspect any output: simply do `bin/hubot` from the\n+top level of the project.\n+\n+**Bot crashes repeatedly**\n+\n+It is sometimes necessary to to assign more memory to your hubot, depending\n+which plugins you are using (if your app crashes with error 137, try increasing\n+the memory limit).\n+", "changes": 117}, {"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/0c3ec03be90bcc1b35fc041f2e2403f06ffc66ad/docs/index.md", "blob_url": "https://github.com/hubotio/hubot/blob/0c3ec03be90bcc1b35fc041f2e2403f06ffc66ad/docs/index.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/index.md?ref=0c3ec03be90bcc1b35fc041f2e2403f06ffc66ad", "filename": "docs/index.md", "sha": "1a9f60972d1c774dd25018e81ac4b61398f0767b", "additions": 3, "patch": "@@ -119,8 +119,10 @@ You can deploy hubot to Heroku, which is the officially supported method.\n Additionally you are able to deploy hubot to a UNIX-like system or Windows.\n Please note the support for deploying to Windows isn't officially supported.\n \n+* [Deploying Hubot onto Azure](./deploying/azure.md)\n+* [Deploying Hubot onto Bluemix](./deploying/bluemix.md)\n * [Deploying Hubot onto Heroku](./deploying/heroku.md)\n-* [Deploying Hubot onto UNIX](./deploying/unix.md)\n+* [Deploying Hubot onto Unix](./deploying/unix.md)\n * [Deploying Hubot onto Windows](./deploying/windows.md)\n \n ## Patterns", "changes": 4}], "1378": [{"status": "modified", "deletions": 4, "raw_url": "https://github.com/hubotio/hubot/raw/d8c96dba2d67f34d5f976fc64c839dcab08cded3/src/robot.js", "blob_url": "https://github.com/hubotio/hubot/blob/d8c96dba2d67f34d5f976fc64c839dcab08cded3/src/robot.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.js?ref=d8c96dba2d67f34d5f976fc64c839dcab08cded3", "filename": "src/robot.js", "sha": "de227c5bd84535eac7f89e99d445b0e6090e212c", "additions": 7, "patch": "@@ -3,6 +3,7 @@\n const EventEmitter = require('events').EventEmitter\n const fs = require('fs')\n const path = require('path')\n+require('coffee-script') // registers extension for legacy script loading\n \n const async = require('async')\n const Log = require('log')\n@@ -348,9 +349,11 @@ class Robot {\n   loadFile (filepath, filename) {\n     const ext = path.extname(filename)\n     const full = path.join(filepath, path.basename(filename, ext))\n+    const accepted = ['.js', '.coffee']\n \n     // see https://github.com/hubotio/hubot/issues/1355\n-    if (!require.extensions[ext]) { // eslint-disable-line\n+    if (accepted.indexOf(ext) === -1) {\n+      this.logger.warning(`${filename} uses unsupported extension, only ${accepted.join(', ')} are accepted`)\n       return\n     }\n \n@@ -554,7 +557,7 @@ class Robot {\n     }\n \n     if (currentSection === null) {\n-      this.logger.info(`${path} is using deprecated documentation syntax`)\n+      this.logger.info(`${path} is missing documentation or using an unrecognised documentation syntax`)\n       scriptDocumentation.commands = []\n       for (let i = 0, line, cleanedLine; i < lines.length; i++) {\n         line = lines[i]\n@@ -730,11 +733,11 @@ function toHeaderCommentBlock (block, currentLine) {\n }\n \n function isCommentLine (line) {\n-  return /^(#|\\/\\/)/.test(line)\n+  return /^\\s*(#|\\/\\/|\\/?\\*)/.test(line)\n }\n \n function removeCommentPrefix (line) {\n-  return line.replace(/^[#/]+\\s*/, '')\n+  return line.replace(/^\\s*[#/*]+\\s*/, '')\n }\n \n function extend (obj/* , ...sources */) {", "changes": 11}, {"status": "modified", "deletions": 10, "raw_url": "https://github.com/hubotio/hubot/raw/d8c96dba2d67f34d5f976fc64c839dcab08cded3/test/robot_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/d8c96dba2d67f34d5f976fc64c839dcab08cded3/test/robot_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.js?ref=d8c96dba2d67f34d5f976fc64c839dcab08cded3", "filename": "test/robot_test.js", "sha": "10abc036523ac7434a5668770613b77ddef94265", "additions": 66, "patch": "@@ -20,6 +20,7 @@ const TopicMessage = require('../src/message').TopicMessage\n \n // mock `hubot-mock-adapter` module from fixture\n const mockery = require('mockery')\n+const path = require('path')\n \n describe('Robot', function () {\n   beforeEach(function () {\n@@ -383,23 +384,73 @@ describe('Robot', function () {\n         expect(module._load).to.have.been.calledWith('scripts/test-script')\n       })\n \n-      describe('proper script', function () {\n+      describe('proper script (js)', function () {\n+        let script\n+\n         beforeEach(function () {\n-          const module = require('module')\n+          script = {\n+            path: path.resolve('./test/scripts'),\n+            file: 'test-script.js',\n+            full: path.resolve('./test/scripts/test-script.js')\n+          }\n+          script.required = require(script.full)\n+          this.sandbox.stub(require('module'), '_load').returns(script.required)\n+          sinon.spy(this.robot, 'parseHelp')\n+        })\n+        afterEach(function () {\n+          this.robot.parseHelp.restore()\n+        })\n \n-          this.script = sinon.spy(function (robot) {})\n-          this.sandbox.stub(module, '_load').returns(this.script)\n-          this.sandbox.stub(this.robot, 'parseHelp')\n+        it('should call the script with the Robot', function () {\n+          this.robot.loadFile(script.path, script.file)\n+          expect(script.required).to.have.been.calledWith(this.robot)\n+        })\n+\n+        it('should parse the script documentation', function () {\n+          this.robot.loadFile(script.path, script.file)\n+          expect(this.robot.parseHelp).to.have.been.calledWith(script.full)\n+        })\n+\n+        it('passes the commands in script comment documentation', function () {\n+          this.robot.loadFile(script.path, script.file)\n+          expect(this.robot.commands).to.eql([\n+            'hubot <ping> - replies @user pong'\n+          ])\n+        })\n+      })\n+\n+      describe('proper script (coffee)', function () {\n+        let script\n+\n+        beforeEach(function () {\n+          script = {\n+            path: path.resolve('./test/scripts'),\n+            file: 'test-script.coffee',\n+            full: path.resolve('./test/scripts/test-script.coffee')\n+          }\n+          script.required = require(script.full)\n+          this.sandbox.stub(require('module'), '_load').returns(script.required)\n+          sinon.spy(this.robot, 'parseHelp')\n+        })\n+        afterEach(function () {\n+          this.robot.parseHelp.restore()\n         })\n \n         it('should call the script with the Robot', function () {\n-          this.robot.loadFile('./scripts', 'test-script.js')\n-          expect(this.script).to.have.been.calledWith(this.robot)\n+          this.robot.loadFile(script.path, script.file)\n+          expect(script.required).to.have.been.calledWith(this.robot)\n         })\n \n         it('should parse the script documentation', function () {\n-          this.robot.loadFile('./scripts', 'test-script.js')\n-          expect(this.robot.parseHelp).to.have.been.calledWith('scripts/test-script.js')\n+          this.robot.loadFile(script.path, script.file)\n+          expect(this.robot.parseHelp).to.have.been.calledWith(script.full)\n+        })\n+\n+        it('passes the commands in script comment documentation', function () {\n+          this.robot.loadFile(script.path, script.file)\n+          expect(this.robot.commands).to.eql([\n+            'hubot <ping> - replies @user pong'\n+          ])\n         })\n       })\n \n@@ -425,13 +476,18 @@ describe('Robot', function () {\n \n           this.script = sinon.spy(function (robot) {})\n           this.sandbox.stub(module, '_load').returns(this.script)\n-          this.sandbox.stub(this.robot, 'parseHelp')\n+          this.sandbox.stub(this.robot.logger, 'warning')\n         })\n \n         it('should not be loaded by the Robot', function () {\n           this.robot.loadFile('./scripts', 'unsupported.yml')\n           expect(this.script).to.not.have.been.calledWith(this.robot)\n         })\n+\n+        it('logs a warning', function () {\n+          this.robot.loadFile('./scripts', 'unsupported.yml')\n+          expect(this.robot.logger.warning).to.have.been.called\n+        })\n       })\n     })\n   })", "changes": 76}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d8c96dba2d67f34d5f976fc64c839dcab08cded3/test/scripts/test-script.coffee", "blob_url": "https://github.com/hubotio/hubot/blob/d8c96dba2d67f34d5f976fc64c839dcab08cded3/test/scripts/test-script.coffee", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/scripts/test-script.coffee?ref=d8c96dba2d67f34d5f976fc64c839dcab08cded3", "filename": "test/scripts/test-script.coffee", "sha": "3b10d090e7998ebc3f33dad0a95a55f745d79615", "additions": 10, "patch": "@@ -0,0 +1,10 @@\n+# Description:\n+# Says pong when you say ping\n+#\n+# Commands:\n+# hubot <ping> - replies @user pong\n+#\n+sinon = require 'sinon'\n+module.exports = sinon.spy (robot) ->\n+  robot.respond /ping/i, (res) ->\n+    res.reply 'pong'", "changes": 10}, {"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d8c96dba2d67f34d5f976fc64c839dcab08cded3/test/scripts/test-script.js", "blob_url": "https://github.com/hubotio/hubot/blob/d8c96dba2d67f34d5f976fc64c839dcab08cded3/test/scripts/test-script.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/scripts/test-script.js?ref=d8c96dba2d67f34d5f976fc64c839dcab08cded3", "filename": "test/scripts/test-script.js", "sha": "04f06adbcb876484141bc50fda42da31c0c014b0", "additions": 16, "patch": "@@ -0,0 +1,16 @@\n+/**\n+ * Description:\n+ * Says pong when you say ping\n+ *\n+ * Commands:\n+ * hubot <ping> - replies @user pong\n+ *\n+ * Notes:\n+ * Sinon spies on exported function for unit tests\n+ */\n+const sinon = require('sinon')\n+module.exports = sinon.spy(function (robot) {\n+  robot.respond(/ping/i, function (res) {\n+    res.reply('pong')\n+  })\n+})", "changes": 16}], "1381": [{"status": "modified", "deletions": 6, "raw_url": "https://github.com/hubotio/hubot/raw/7891ee24520d3e5895c38a7624f3585c56cd8cf1/docs/deploying/azure.md", "blob_url": "https://github.com/hubotio/hubot/blob/7891ee24520d3e5895c38a7624f3585c56cd8cf1/docs/deploying/azure.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/azure.md?ref=7891ee24520d3e5895c38a7624f3585c56cd8cf1", "filename": "docs/deploying/azure.md", "sha": "ddaf0dd655e59981c0c7bffc57f264c1370a8c86", "additions": 7, "patch": "@@ -55,19 +55,18 @@ Commit your changes in git and push to GitHub and Azure will automatically pick\n     % git commit -m \"Add Azure settings for hubot\"\n     % git push\n \n-Azure offers a marketplace where you can use the default heroku-redis-brain using Redis Cloud provided by Redis Labs. Alternatively, to add an Azure storage brain, you will need to create an Azure storage account and account key. Then you can do the following in your base hubot directory.\n+Azure offers a marketplace where you can use the default heroku-redis-brain using Redis Cloud provided by Redis Labs. Alternatively, to add an [Azure blob storage brain](https://github.com/coryallegory/hubot-azure-brain), you will need to create an Azure storage account. Then you can do the following in your base hubot directory.\n \n-    % npm install hubot-azure-scripts --save\n+    % npm install hubot-azure-brain --save\n \n Then add the following line in `external-scripts.json` in the list with the other external scripts\n \n-    \"hubot-azure-scripts/brain/storage-blob-brain\"\n+    \"hubot-azure-brain\"\n \n-Finally, add two more environment variables to your website. You can do this either via the GUI or the following PowerShell commands.\n+Finally, add one more environment variables to your website. You can do this either via the GUI or the following PowerShell commands.\n \n     % $settings = New-Object Hashtable\n-    % $settings[\"HUBOT_BRAIN_AZURE_STORAGE_ACCOUNT\"] = \"your Azure storage account\"\n-    % $settings[\"HUBOT_BRAIN_AZURE_STORAGE_ACCESS_KEY\"] = \"your Azure storage account key\"\n+    % $settings[\"HUBOT_BRAIN_AZURE_CONNSTRING\"] = \"your Azure blob storage connection string\"\n     % Set-AzureWebsite -AppSettings $settings mynewhubot\n \n Now any scripts that require a brain will function. You should look up other scripts or write your own by looking at the [documentation](../scripting.md). All of the normal scripts for hubot are compatible with hosting hubot on Azure.\n@@ -76,6 +75,8 @@ Now any scripts that require a brain will function. You should look up other scr\n \n Due to Azure being Windows-based, you may run into path length problems. To overcome this issue you can set the environment variable `IN_PLACE_DEPLOYMENT` to `1` and use [custom deployment scripts to take advantage of NPM3](https://github.com/felixrieseberg/azure-npm3) and flat module installation.\n \n+If you have your instance of hubot deploying directly from source control to Azure, it will perform various bootstrapping tasks along with calling `npm install` via kudu. Now that Azure supports npm5, this process generates a package-lock.json file which may result in some of your packages failing to install remotely. You can edit `deploy.cmd` to include `--no-package-lock` as part of the \"Step 3\" install command.\n+\n If using the free tier of Azure, you can also add a post-deployment step to ping the server on startup by setting the environment variable `POST_DEPLOYMENT_ACTION` with a script (relative to the src dir) such as `startup.sh`\n \n An example of a startup script:", "changes": 13}], "1390": [{"status": "modified", "deletions": 5, "raw_url": "https://github.com/hubotio/hubot/raw/d1546feedf8fc13a33fc675a44b1384d9aaff210/src/robot.js", "blob_url": "https://github.com/hubotio/hubot/blob/d1546feedf8fc13a33fc675a44b1384d9aaff210/src/robot.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/src/robot.js?ref=d1546feedf8fc13a33fc675a44b1384d9aaff210", "filename": "src/robot.js", "sha": "de7e779040f79c16953b9a73375bd9645368424b", "additions": 5, "patch": "@@ -579,7 +579,7 @@ class Robot {\n   send (envelope/* , ...strings */) {\n     const strings = [].slice.call(arguments, 1)\n \n-    this.adapter.send.apply(this, [envelope].concat(strings))\n+    this.adapter.send.apply(this.adapter, [envelope].concat(strings))\n   }\n \n   // Public: A helper reply function which delegates to the adapter's reply\n@@ -592,7 +592,7 @@ class Robot {\n   reply (envelope/* , ...strings */) {\n     const strings = [].slice.call(arguments, 1)\n \n-    this.adapter.reply.apply(this, [envelope].concat(strings))\n+    this.adapter.reply.apply(this.adapter, [envelope].concat(strings))\n   }\n \n   // Public: A helper send function to message a room that the robot is in.\n@@ -605,7 +605,7 @@ class Robot {\n     const strings = [].slice.call(arguments, 1)\n     const envelope = { room }\n \n-    this.adapter.send.apply(this, [envelope].concat(strings))\n+    this.adapter.send.apply(this.adapter, [envelope].concat(strings))\n   }\n \n   // Public: A wrapper around the EventEmitter API to make usage\n@@ -619,7 +619,7 @@ class Robot {\n   on (event/* , ...args */) {\n     const args = [].slice.call(arguments, 1)\n \n-    this.events.on.apply(this, [event].concat(args))\n+    this.events.on.apply(this.events, [event].concat(args))\n   }\n \n   // Public: A wrapper around the EventEmitter API to make usage\n@@ -632,7 +632,7 @@ class Robot {\n   emit (event/* , ...args */) {\n     const args = [].slice.call(arguments, 1)\n \n-    this.events.emit.apply(this, [event].concat(args))\n+    this.events.emit.apply(this.events, [event].concat(args))\n   }\n \n   // Public: Kick off the event loop for the adapter", "changes": 10}, {"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/d1546feedf8fc13a33fc675a44b1384d9aaff210/test/robot_test.js", "blob_url": "https://github.com/hubotio/hubot/blob/d1546feedf8fc13a33fc675a44b1384d9aaff210/test/robot_test.js", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/test/robot_test.js?ref=d1546feedf8fc13a33fc675a44b1384d9aaff210", "filename": "test/robot_test.js", "sha": "32be67f00c08451eed4f551d22b81b47d4b51b86", "additions": 55, "patch": "@@ -434,6 +434,61 @@ describe('Robot', function () {\n         })\n       })\n     })\n+\n+    describe('#send', function () {\n+      beforeEach(function () {\n+        sinon.spy(this.robot.adapter, 'send')\n+      })\n+\n+      it('delegates to adapter \"send\" with proper context', function () {\n+        this.robot.send({}, 'test message')\n+        expect(this.robot.adapter.send).to.have.been.calledOn(this.robot.adapter)\n+      })\n+    })\n+\n+    describe('#reply', function () {\n+      beforeEach(function () {\n+        sinon.spy(this.robot.adapter, 'reply')\n+      })\n+\n+      it('delegates to adapter \"reply\" with proper context', function () {\n+        this.robot.reply({}, 'test message')\n+        expect(this.robot.adapter.reply).to.have.been.calledOn(this.robot.adapter)\n+      })\n+    })\n+\n+    describe('#messageRoom', function () {\n+      beforeEach(function () {\n+        sinon.spy(this.robot.adapter, 'send')\n+      })\n+\n+      it('delegates to adapter \"send\" with proper context', function () {\n+        this.robot.messageRoom('testRoom', 'messageRoom test')\n+        expect(this.robot.adapter.send).to.have.been.calledOn(this.robot.adapter)\n+      })\n+    })\n+\n+    describe('#on', function () {\n+      beforeEach(function () {\n+        sinon.spy(this.robot.events, 'on')\n+      })\n+\n+      it('delegates to events \"on\" with proper context', function () {\n+        this.robot.on('event', function () {})\n+        expect(this.robot.events.on).to.have.been.calledOn(this.robot.events)\n+      })\n+    })\n+\n+    describe('#emit', function () {\n+      beforeEach(function () {\n+        sinon.spy(this.robot.events, 'emit')\n+      })\n+\n+      it('delegates to events \"emit\" with proper context', function () {\n+        this.robot.emit('event', function () {})\n+        expect(this.robot.events.emit).to.have.been.calledOn(this.robot.events)\n+      })\n+    })\n   })\n \n   describe('Listener Registration', function () {", "changes": 55}], "1391": [{"status": "modified", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/7c0fd4d2e8e8d329dde760c9904ecd7dccd60177/docs/deploying/heroku.md", "blob_url": "https://github.com/hubotio/hubot/blob/7c0fd4d2e8e8d329dde760c9904ecd7dccd60177/docs/deploying/heroku.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/deploying/heroku.md?ref=7c0fd4d2e8e8d329dde760c9904ecd7dccd60177", "filename": "docs/deploying/heroku.md", "sha": "f096991d1387a991705f5704986ac88c40912d36", "additions": 2, "patch": "@@ -61,4 +61,6 @@ Some scripts needs Redis to work, Heroku offers an addon called [Redis Cloud](ht\n \n     % heroku addons:create rediscloud\n \n+Note: the free redis plans don't offer any persistence so your hubot will lose all the information when it goes to sleep.\n+\n Free dynos on Heroku will [sleep after 30 minutes of inactivity](https://devcenter.heroku.com/articles/dyno-sleeping). That means your hubot would leave the chat room and only rejoin when it does get traffic. This is extremely inconvenient since most interaction is done through chat, and hubot has to be online and in the room to respond to messages. To get around this, you can use the [hubot-heroku-keepalive](https://github.com/hubot-scripts/hubot-heroku-keepalive) script, which will keep your free dyno alive for up to 18 hours/day. If you never want Hubot to sleep, you will need to [upgrade to Heroku's hobby plan](https://www.heroku.com/pricing).", "changes": 2}], "1395": [{"status": "modified", "deletions": 1, "raw_url": "https://github.com/hubotio/hubot/raw/28a428da6b4cedb1aa7fda01c91d8ca0aa11293a/docs/scripting.md", "blob_url": "https://github.com/hubotio/hubot/blob/28a428da6b4cedb1aa7fda01c91d8ca0aa11293a/docs/scripting.md", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/docs/scripting.md?ref=28a428da6b4cedb1aa7fda01c91d8ca0aa11293a", "filename": "docs/scripting.md", "sha": "ce1b5dbbe287a5d4a6df192f3fe18daeea70b549", "additions": 1, "patch": "@@ -918,7 +918,7 @@ describe 'example script', ->\n \n **sample output**\n ```bash\n-% mocha --compilers \"coffee:coffee-script/register\" test/*.coffee\n+% mocha --require coffee-script/register test/*.coffee\n \n \n   example script", "changes": 2}], "1396": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/48a5fb6f5130f337eca639d393f5299296b590ff/.editorconfig", "blob_url": "https://github.com/hubotio/hubot/blob/48a5fb6f5130f337eca639d393f5299296b590ff/.editorconfig", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/.editorconfig?ref=48a5fb6f5130f337eca639d393f5299296b590ff", "filename": ".editorconfig", "sha": "dd7325ec119f56694a83a552e6a4dc0a733fddd7", "additions": 14, "patch": "@@ -0,0 +1,14 @@\n+# EditorConfig is awesome: http://EditorConfig.org\n+\n+# Top-most EditorConfig file\n+root = true\n+\n+# Match and apply these rules for all file\n+# types you open in your code editor\n+[*]\n+# Unix-style newlines\n+end_of_line = lf\n+insert_final_newline = true\n+indent_style = space\n+indent_size = 2\n+trim_trailing_whitespace = true", "changes": 14}], "1415": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/f1fcd5ebb347539f5c408be8417242cc40f9761e/_config.yml", "blob_url": "https://github.com/hubotio/hubot/blob/f1fcd5ebb347539f5c408be8417242cc40f9761e/_config.yml", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/_config.yml?ref=f1fcd5ebb347539f5c408be8417242cc40f9761e", "filename": "_config.yml", "sha": "b84971359435a0abab28bcc56d7b0ce2f0f9911f", "additions": 1, "patch": "@@ -0,0 +1 @@\n+theme: jekyll-theme-leap-day\n\\ No newline at end of file", "changes": 1}], "1418": [{"status": "added", "deletions": 0, "raw_url": "https://github.com/hubotio/hubot/raw/c665c9c75ef71fa8d571d419d790ba1697fb3da5/Cloud", "blob_url": "https://github.com/hubotio/hubot/blob/c665c9c75ef71fa8d571d419d790ba1697fb3da5/Cloud", "contents_url": "https://api.github.com/repos/hubotio/hubot/contents/Cloud?ref=c665c9c75ef71fa8d571d419d790ba1697fb3da5", "filename": "Cloud", "sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "additions": 1, "patch": "@@ -0,0 +1 @@\n+", "changes": 1}]}