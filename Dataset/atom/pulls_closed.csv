pull_request,number_of_commits,number_of_comments,number_of_reviews,user_type,user_login,closed_at,number_of_additions,number_of_deletions,number_of_files_changed,number_of_days,message,number_of_characters,second_line_is_blank,language,number_of_test_files
16547,1,2,0,Externals,DJ967,2018-01-12 21:18:22,0,0,0,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Verification Process

<!--

What process did you follow to verify that your change has the desired effects?

- How did you verify that all new functionality works as expected?
- How did you verify that all changed functionality works as expected?
- How did you verify that the change has not introduced any regressions?

Describe the actions you performed (e.g., buttons you clicked, text you typed, commands you ran, etc.), and describe the results you observed.

-->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1699,True,en,0
16535,0,1,0,Externals,Rufelo,2018-01-11 05:18:40,,,,0,,0,False,en,0
16534,0,1,0,Externals,Rufelo,2018-01-11 05:17:31,,,,0,,0,False,en,0
16372,25,1,0,Externals,devjdg,2017-12-13 17:13:12,143,99,8,0,,0,False,en,0
16370,24,0,0,Externals,xuxiaoxin,2017-12-13 15:21:51,0,0,0,0,"### Package is too big for onetwo editor

",44,True,en,2
16365,1,1,0,Externals,forkme7,2017-12-13 01:59:41,20,0,1,0,"Released under CC0.

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1234,True,en,0
16351,0,1,0,Externals,Rufelo,2017-12-09 03:07:41,,,,0,,0,False,en,0
16309,1,2,0,Externals,peterparkers,2017-12-01 22:08:44,7,6,1,0,"put brackets to if else statements for improve to coding standard

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1280,True,en,0
16298,4,1,0,Externals,dangdinhduong,2017-11-29 19:06:42,3,3,2,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
16257,1,3,0,Externals,isoeugenol,2017-11-22 00:36:42,2,2,1,0,"- ctrl-shift-p and ctrl-p exist only macOS keymap
- i think example is same all platforms

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->
dot-atom keymap.cson example is only exist macOS 
i think example should work all platforms.
### Benefits

<!-- What benefits will be realized by the code change? -->
if someone use example keymaps they work all platfroms
### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1452,False,en,0
16254,1,3,0,Externals,fjwldap,2017-11-21 14:55:46,1,0,1,0,"### Description of the Change

I add comment to atom/src/atom-environment.coffee in line 566.
Most of them has comment of the function. For example, like in line 562, ""# Extended: Returns a {Boolean} that is `true` if the current window is maximized."" 
But function 'maximizeWindow()' doesn't have a comment about it.
So I add the comment.

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

It will be little bit more helpful to understand with comment. 
<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

It will be little bit more helpful to understand with comment. 

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

it is just comment...
<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1013,True,en,0
16231,1,1,0,Externals,ParrishJ89,2017-11-18 08:56:09,3,3,2,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
16160,7,1,0,Externals,nilanjan-cse,2017-11-11 21:24:40,125,90,5,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
16154,1,1,0,Externals,BL4CKvGHOST,2017-11-10 17:04:37,0,0,0,0,It appears that you have an unnecessary comma in a compound subject. Consider removing it,89,False,en,0
16127,2,4,1,Externals,itsmichaelwang,2017-11-08 08:56:30,3,2,1,0,"### Description of the Change
We have a modal with elements (1) text box, (2) text box, (3) cancel button, and (4) clone button, respectively, from the top-left to the bottom-right.
<img width=""608"" alt=""screen shot 2017-11-08 at 12 43 16 am"" src=""https://user-images.githubusercontent.com/6532060/32539885-c2282eba-c41f-11e7-841f-891925c8eb27.png"">

For this modal element, the tabIndexes are -1, -1, 3, 4, respectively. This causes the tabbing order to be (1) > (3) > (4) or (2) > (3) > (4), and then looping forever between (3) and (4), because tabIndex=-1 signifies to skip tabbing for that element. It would appear the root cause is the tabIndex for those elements is hardcoded to be -1. We should probably change that.

Instead, allow a tabIndex to be inferred from the constructor. Now the modal has tabIndexes of 1, 2, 3, 4, as it was intended to be, from the atom github repo.

But now there is a new issue. We can only tab from (1) > (2), but never to (3) or (4). I have tried to understand why this is happening, but I can't come to a conclusion after playing around with the values, nor do I understand how to debug tabbing better than the trial and error approach I have now. Seems like something that's probably better for another ticket, because the tabIndexes are correct now.

### Alternate Designs
Maybe instead of inferring tabIndex from `this.props.element.tabIndex` in line 173, we should instead have some kind of explicit field to specify it, like `this.props.tabIndex`. I would not be opposed to that. Of course, then we need to do some more refactoring work to make tabIndex work for all objects that create this modal. It's a tradeoff between time investment and tech debt.

Also, I'm not sure if this would break other things. Seems like a pretty broad change.

### Why Should This Be In Core?
The core issue here is that the tabIndex is being overwritten in `text-editor-component.js` from a hardcoded value. Even if another package (in this case, the Github package) specifies a tabIndex, it will be squashed by what's hardcoded, and that seems wrong.

### Benefits
You can tab through your text boxes now.

### Possible Drawbacks
You can't tab through your buttons now. I think you also can't use the escape button to exit out of a modal, but you couldn't do that anyways unless the focus was on the ""Cancel"" button, so the problems are linked.

I think the tabbing thing is actually a separate issue, and this PR just solves the tabIndex being squashed by a hardcoded value.

### Applicable Issues
#16004 
",2565,False,en,0
16041,1,1,0,Externals,bs34,2017-10-31 10:29:32,1,1,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
16027,33,1,0,Externals,Rohith-hacker,2017-10-30 13:42:07,364,140,18,0,"### Requirements
need few icon changes for macOS and linux

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change
the option to customise the icons of the atom in macOS are to be added so that we can change the icons in the options as per our taste
<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs
this is the version I love to use and this version has my requirements
<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?
because everyone need a personalised and customised text editing experience
<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1533,False,en,0
16026,1,1,0,Externals,Rohith-hacker,2017-10-30 13:34:56,0,0,3,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
16016,2,2,0,Externals,Ingramz,2017-10-27 20:22:19,10,10,7,0,"CoffeeScript is switching from `coffee-script` to `coffeescript` as the primary module for various reasons.

Refs https://github.com/atom/atom/pull/13731#issuecomment-340002601

cc @nathansobo 
",199,True,en,0
16012,1,0,0,Internals,jbjonesjr,2017-10-27 15:44:44,2,0,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

ADded a new config

### Alternate Designs

Coulda switched CI

- [ ] here's a task

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",772,True,en,0
15996,13,3,1,Internals,damieng,2017-10-25 22:09:29,1141,874,8,0,"A more thorough attempt to fix #14909.

Decisions made:

1. Split file/io out from Config class in order to theoretically make testing simpler and allow in the future one of the processes to have changes marshaled across without going to file system. Unfortunately existing tests are more integration tests than unit tests so may need to merge classes back together.

2. Lockfile dependency. Linux doesn't have exclusive locking so we have to use a lock file. This seemed the most popular library.

3. Capture changes and replay them. Borrowed from existing Config class pendingoperations but changed it from function call capture to text so that they could be replayed over process boundaries in the future.

4. Load before save. If the file was locked it's because another process was saving. If we don't reload there's a chance changes will be lost depending on whether we got to handling the file change notification or not yet.

5. Manual debounce & retry. Removed existing debounce code because I need to re-fire the event if an error occurs during save (such as not getting the lock file or some other IO error).

6. Lock file recovery. After 8 attempts if the lock file is still there it might be left over from a crash or something. Rather than silently fail we present an error message with both a 'Retry' button and a 'Force' button - the latter will forcefully remove the lock file so we can continue.

7. Async io. We're trying to move away from sync blocking operations in general and now with extra logic in here it made sense to go async with callbacks.

Issues remaining:

1. What to do when file is locked and we're trying to save on exit?
2. What to do when load fails for any reason and it was requested by file change notification?
3. Current specs for config.cson are not unit tests but integration tests - e.g. setting a value and making sure it saves to disk.  Looks like a big effort to split them out. Alternative is to merge configstorage back into config class.",2011,True,en,0
15969,250,1,0,Externals,RAHUL9545416,2017-10-23 11:27:43,111104,41074,674,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,1
15960,49,1,0,Externals,ChristianFaris2000,2017-10-22 00:44:58,188,66,21,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15917,1,1,0,Externals,KPsychO,2017-10-17 18:00:43,0,0,0,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15864,20,1,0,Externals,Azmuuuu,2017-10-11 03:17:19,47132,48,12,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15812,1,2,0,Externals,NuttasitBoonwat,2017-10-04 11:09:34,3,10,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15810,1,1,0,Externals,NuttasitBoonwat,2017-10-04 09:33:23,1,5,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15796,1,0,0,Externals,NuttasitBoonwat,2017-10-03 12:53:16,4,10,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15794,1,1,0,Externals,the-j0k3r,2017-10-03 08:54:24,0,0,0,0,"
same as https://github.com/atom/atom/pull/15769 but backport  for 1.21 branch

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Upgrading to the latest 1.6 patch to get the RCE fix: https://electron.atom.io/blog/2017/09/27/chromium-rce-vulnerability-fix

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

Leave RCE vulnerability in

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

It patches an known exploit.

fixes #13885

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

It patches a known exploit.

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

Hackers may have to look elsewhere.

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

https://electron.atom.io/blog/2017/09/27/chromium-rce-vulnerability-fix

<!-- Enter any applicable Issues here -->
",1646,False,en,0
15788,2,0,0,Externals,AryanJ-NYC,2017-10-02 05:43:57,0,0,0,0,"### Description of the Change

* Use _.deepClone() instead of local deepClone() in `config.coffee`
* Use underscore in class variable names in `color.js`",156,True,en,0
15784,55,1,0,Externals,pramod-b-s,2017-10-01 05:30:27,1481,309,22,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15782,2,0,0,Externals,AryanJ-NYC,2017-09-30 19:36:59,0,0,0,0,"### Description of the Change
Use `_.deepClone()` instead of local `deepClone()` in config.coffee and fix getters and setters in `Color.`",138,False,en,0
15725,2,0,0,Externals,hazzalove,2017-09-23 12:30:10,9,5,3,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15721,3,0,0,Externals,Yulgana33,2017-09-22 13:42:26,3,3,2,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15704,18,1,0,Externals,mohanuppaluri,2017-09-21 00:55:53,137,71,5,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15702,29,7,4,Internals,BinaryMuse,2017-09-20 20:19:32,124,69,8,0,"Continuation of https://github.com/atom/atom/pull/14456 by @Xapphire13 including changes from https://github.com/atom/atom/pull/15415

Closes https://github.com/atom/atom/pull/14456
Closes https://github.com/atom/atom/pull/15415",231,True,en,0
15653,1,1,0,Externals,keangkai,2017-09-14 14:19:44,19,19,1,0,"for easy to read

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1231,True,en,0
15637,1,1,0,Externals,keangkai,2017-09-13 13:35:02,1,0,1,0,"if have comment will easy to read.but i think this code good

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1275,True,en,0
15617,1,2,0,Externals,andrew-aladev,2017-09-11 22:06:52,5,0,1,0,Please do not hide such important issues from users. Give them a chance to make backup of their settings. #14909 ,113,False,en,0
15598,1,2,0,Externals,50Wliu,2017-09-09 18:12:36,7,1,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

For unknown reasons, `path.normalize` will add a period to the end of a standalone drive letter when normalizing it.  This results in a path such as `C:.`, which, while accepted in Windows Explorer, is treated as `.` by other programs such as Powershell and `path.basename`.  This PR manually fixes the path normalization when the path is _only_ a drive letter on Windows.

### Alternate Designs

Ideally, this should be fixed upstream in Node.

### Why Should This Be In Core?

Because this is a part of the fundamental `atom.project.setPaths` API.

### Benefits

Tree View, with a few additional fixes, should function correctly when being set to a root drive path.

### Possible Drawbacks

None?

### Applicable Issues

Refs #903",1047,True,en,0
15575,2,0,0,Externals,Ingramz,2017-09-07 08:50:21,1,1,1,0,,0,False,en,0
15564,1,2,0,Externals,xtaraim,2017-09-06 19:14:03,5,5,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15562,1,1,0,Externals,satyamramawat,2017-09-06 17:55:13,4,0,1,0,"Edited Document for mac user, to run ATOM after mac from folder.

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1279,True,en,0
15556,1,1,1,Externals,leroix,2017-09-06 04:13:14,21,18,1,0,"The version of node that the snapshot tool uses doesn't support es7 features, so I've attempted to remove async/await from `dg-package-async-deactivate`. This should work, but I haven't tested.",193,False,en,0
15514,2,11,0,Externals,richardsimko,2017-08-31 10:07:15,6,0,2,0,"### Description of the Change

Fix #13909. It seems there have been fixes for saving window state previously however these only save on `blur`, and `beforeUnload`. None of these are triggered if you immediately close the window.

### Alternate Designs

None

### Why Should This Be In Core?

It's a bug fix.

### Benefits

The bug is fixed.

### Possible Drawbacks

None

### Applicable Issues

#13909",423,True,en,0
15510,2,3,0,Externals,HebaruSan,2017-08-31 00:02:53,14,8,2,0,"- Wire up the focus handler unconditionally
- Add new `core.gitRepositoryRefreshOnWindowFocus` setting
- Check `core.gitRepositoryRefreshOnWindowFocus` in focus handler
- Remove `refreshOnWindowFocus` param since it was unused
- Document the `project` and `config` params

### Description of the Change

If the user has one or more projects in the tree view with Git repositories, Atom freezes for a few seconds each time the window gains focus. The editor spends this time re-indexing Git data for all of those projects in the foreground. This makes Atom feel sluggish and unresponsive, and disrupts work flow when the user is likely to be ready to blaze ahead with an active task.

See #9544 for full discussion of the issue.

After this change, the default behavior is to no longer do this re-indexing work on window focus. A new settings checkbox can be used to enable the old behavior:

![image](https://user-images.githubusercontent.com/1559108/29900065-d6f52a24-8db4-11e7-9b7b-398a5d375f8b.png)

### Alternate Designs

The old code had an unused Boolean parameter controlling whether the focus handler would be wired up. We could have passed the new setting as the value of that parameter. I decided that wasn't desirable because the changes could not take effect immediately when the user changed the setting. To respond to user setting changes on the fly, we need to wire up the event unconditionally and check the setting's current value when it fires. Since the old parameter would conflict with the new setting, it is removed.

### Why Should This Be In Core?

Fixes an issue with Core.

### Benefits

- Improved responsiveness when multitasking Atom with other applications
- Multiple users on #9544 reported quitting Atom or almost quitting due to this issue, so possible improvement in user outreach and retention
- Multiple users on #9544 resorted to risky workarounds (deleting or renaming a project's .git folder, deactivating core packages, avoiding the use of project folders), so possible improvement in general stability if those workarounds are no longer needed

### Possible Drawbacks

The old code does not document why this behavior existed, so we do not know the exact rationale for it or what might be lost by removing it. I speculate that it is to account for the possibility that the user might make changes affecting one of Atom's currently open Git repositories in an external application, which would then need to be reflected in Atom. However, this behavior imposes a serious usability penalty for all Git users, and users who do not need it have no recourse to eliminate this penalty. Furthermore, it is not a robust solution to that potential problem, as it is possible to modify a Git repo without switching focus away from Atom (for example, via a scheduled task or a remote login from another computer).

To mitigate the possibility of new issues, the problematic code is not simply removed. Rather, a setting is created so that users who need the old behavior and are willing to tolerate its drawbacks can enable it with a checkbox in the Core settings.

### Applicable Issues

- Fixes #9544 ",3170,False,en,0
15450,0,4,0,Externals,yoginth,2017-08-26 06:49:16,,,,0,,0,False,en,0
15445,70,1,0,Internals,lee-dohm,2017-08-25 21:08:14,1470,532,13,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,1
15444,69,0,0,Externals,siddharthghugharwal,2017-08-25 17:55:05,1470,532,13,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,1
15435,250,0,0,Externals,fjsm20,2017-08-24 14:50:10,53954,33765,632,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,1
15412,1,0,0,Internals,BinaryMuse,2017-08-22 21:58:27,1,1,1,0,"v0.4.2...v0.5.0-0

* [atom/github#924 - More PR timeline events](https://github.com/atom/github/pull/924)
* [atom/github#1084 - Show PR build statuses](https://github.com/atom/github/pull/1084)",196,True,en,0
15403,1,0,0,Externals,IngTatianaLopez,2017-08-22 01:14:40,1,0,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15365,250,0,0,Externals,Boshusya,2017-08-17 12:26:41,29592,24894,341,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,3
15353,250,0,0,Externals,samtoubia,2017-08-17 05:00:08,8567,10111,243,0,,0,False,en,3
15352,250,0,0,Externals,samtoubia,2017-08-17 04:52:50,16104,18009,205,0,,0,False,en,5
15316,1,1,0,Internals,smashwilson,2017-08-15 16:19:36,1,5,1,0,/cc @iolsen ,12,False,de,0
15271,51,0,0,Externals,Dhruvadityamittal,2017-08-12 10:43:37,327,151,15,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,1
15235,7,0,0,Internals,smashwilson,2017-08-10 13:16:07,27,102,3,0,Run a fake AppVeyor build with the new matrix scheme :notes:,60,False,en,0
15218,5,4,0,Internals,smashwilson,2017-08-09 18:28:53,15,3,3,0,"Let's do some in-CI debugging to see where our snapshot auxiliary data (notable, the Less compile cache) is getting dropped.",124,False,en,0
15193,14,9,1,Externals,probonopd,2017-08-08 20:21:37,112,1,3,0,"Someone from the atom team please see below, solve the remaining issue and then merge this once it builds ""green"".

This PR, when merged, will compile this application on [Travis CI](https://travis-ci.org/) upon each `git push`, and upload an [AppImage](http://appimage.org/).

It tries to mirror 1:1 what the debian pipeline is doing, using the same binaries. So __this should _not_ add additional burden to the Atom team__. It is merely a self-mounting filesystem image. Think of it as putting the contents of the deb into a self-mounting ISO.

Providing an [AppImage](http://appimage.org/) would have, among others, these advantages:
- Applications packaged as an AppImage can run on many distributions (including Ubuntu, Fedora, openSUSE, CentOS, elementaryOS, Linux Mint, and others)
- One app = one file = super simple for users: just download one AppImage file, [make it executable](http://discourse.appimage.org/t/how-to-make-an-appimage-executable/80), and run
- No unpacking or installation necessary
- No root needed
- No system libraries changed
- Works out of the box, no installation of runtimes needed
- Optional desktop integration with `appimaged`
- Optional binary delta updates, e.g., for continuous builds (only download the binary diff) using AppImageUpdate
- Can optionally GPG2-sign your AppImages (inside the file)
- Works on Live ISOs
- Can use the same AppImages when dual-booting multiple distributions

[Here is an overview](https://github.com/probonopd/AppImageKit/wiki/AppImages) of projects that are already distributing upstream-provided, official AppImages.

__I need help on the following issue:__  What translates the lowercase `--create-debian-package` to make `if (argv.createDebianPackage)` in `script/build` trigger? I _think_ I have added and am calling `--create-appimage` but I am currently getting

> Skipping creating AppImage. Specify the --create-appimage option to create it.

Any help greatly appreciated.

AppImage developers are on #AppImage on irc.freenode.net.",2039,True,en,0
15160,1,1,0,Externals,segevfiner,2017-08-03 23:27:30,12,1,2,0,"### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

When you try to save a new file (Save an item without a uri), the save as dialog will open in a default OS dependent directory. For example, on Windows it opens in the working directory. But if you have a project open, it makes more sense to open it in the project root folder.

### Benefits

When you save a new file, the save as dialog will start in the project folder.

### Possible Drawbacks

I think that if you pass a `defaultPath` to `dialog.showSaveDialog` than it takes precedence over the OS remembering the last directory used in the dialog.

### Applicable Issues

Fixes #14732
",1042,True,en,0
15139,1,0,0,Internals,ungb,2017-08-01 22:28:09,0,0,0,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
15133,1,1,0,Externals,mrnonz,2017-07-31 09:53:26,3,0,3,0,This card is related to issue #3212,35,False,en,0
15132,34,0,0,Externals,listentodella,2017-07-31 08:29:10,251,167,12,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,1
15077,1,4,0,Externals,the0neyouseek,2017-07-22 19:05:06,0,0,0,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->
Allow to set the vibrancy of the browserWindow with the setVibrancy method.

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->
/

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->
Allow to use vibrancy in themes

### Benefits

<!-- What benefits will be realized by the code change? -->
See above

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->
none

### Applicable Issues

<!-- Enter any applicable Issues here -->
See #14162 ",1352,True,en,0
15066,1,1,0,Externals,daxlab,2017-07-20 18:20:58,3,13,1,0,"Fixes: https://github.com/atom/atom/issues/13980

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change
Use `_.deepClone` instead of self implementation

",397,True,en,0
15045,1,1,0,Externals,karljang,2017-07-18 02:48:27,25,1,1,0,"### Description of the Change

On killing a buffered process, this patch ensures that all of its child processes are killed first.

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

It might be possible to do the same thing at the client side of BufferedProcess, but BufferedProcess is already doing it on Windows platform as you can see in BufferedProcess.killOnWindows(). That's the reason why I added killOnNix() to BufferedProcess.
<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

BufferedProcess is already doing the same thing on Windows platform, therefore it'll be better to have the same functionality on *nix platforms
<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

We don't have to use Terminal or Task Manager to check if a grand-child process is still running or not.
<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

Whenever Atom calls BufferedProcess.kill(), it'll spawn 'pkill' to kill all possible child processes.  But, anyway, Atom already do the same thing by running 'wmic' :)
<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

It fixes #7252 : Problem with killing children processes 

<!-- Enter any applicable Issues here -->",1786,True,en,0
15040,4,0,0,Externals,joy1305,2017-07-17 09:38:12,0,0,0,0,add init soft warp,18,False,en,2
15035,1,0,0,Externals,Aaron09,2017-07-16 20:58:01,21,13,1,0,"### Description of the Change:
-- Added comments in the form of docstrings to title-bar.js for improved readability
-- Refactored if/else to ternary operator for improved readability

### Alternate Designs
-- Improved internal documentation in the form of docstrings is the current best practice for code commenting
-- Ternary operators improve the conciseness of the code instead of clunky if/else statements when
there is little internal functionality in the if/else statement

### Why Should This Be In Core?
-- It will improve the readability and thus maintainability for the code for the future

### Benefits
-- It will aid future developers for Atom by improving the readability of the code for title-bar.js

### Possible Drawbacks
-- None

### Applicable Issues
-- None
",797,False,en,0
15027,1,1,0,Externals,jackHedaya,2017-07-14 18:11:04,0,0,0,0,"I believe it is better because it keeps some of the signature Atom green, used the logo, and is more elegant.

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1324,True,en,0
15007,3,4,0,Internals,damieng,2017-07-13 00:39:06,11,5,3,0,"Want to see what's going on with regards to npm/nvm as the script and the current behavior don't match (former installs latest npm 5.2, latter uses 3.10.5)

**Do not merge this**",180,True,en,0
14944,1,4,0,Internals,as-cii,2017-07-03 09:32:15,1,1,1,0,"Fixes #14911.

Back in #13880 we revisited our approach to handling input events, greatly improving support for the [accented character menu](https://support.apple.com/en-us/HT201586) on macOS along the way. In that process, we also rewrote the logic for dealing with IME events, which caused in-progress IME input to be replaced with the last typed character while the IME panel was open:

![wrong-behavior](https://user-images.githubusercontent.com/14314532/27643959-0f04396e-5c55-11e7-838c-ac15ef580fbe.gif)

With this pull-request we will now show every character that has been pressed and, only at the end, replace the entire stream of character with the selected IME alternative:

![kapture 2017-07-03 at 11 28 24](https://user-images.githubusercontent.com/482957/27786774-d8cc11f0-5fe2-11e7-8b7e-3fcbe8323f62.gif)",828,True,en,0
14914,4,0,0,Externals,yubaoquan,2017-06-28 16:36:56,195,146,9,0,"
### Description of the Change

Convert 4 files from coffee to javascript.
And format another js file.

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

This is just a translate, no additional functions added.

### Benefits

Maybe all the coffee files should be rewirite in js.

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",583,False,en,0
14887,12,1,0,Externals,pkdaw,2017-06-25 05:52:33,23,12,6,0,Hi i'm new at Atom but unable to find this apps in my desktop. Each time i need to open with .exe file.,103,False,en,1
14884,2,2,0,Internals,kuychaco,2017-06-24 00:19:25,14,7,2,0,"This PR ensures that we return the correct boolean value from `Pane.prototype.destroyItem` when the `force` parameter is `true` or the item should not prompt to save. 

Without this, logic such as the following 
```
const destroyed = await pane.destroyItem(item); // returns the value of `item.destroy && item.destroy()` which can be undefined or null
if (!destroyed) {
  pane.activateItem(item); // called on an item that has been destroyed
}
```
... produces an uncaught error error ...
```
Uncaught (in promise) Error: Adding a pane item with URI '/some/path/to/item' that has already been destroyed
```

/cc @maxbrunsfeld for relevant change made in https://github.com/atom/atom/commit/dc320181fc852f3174411e107bfd2a02f2c504ad#diff-1a7d1dda35d8e7ed3ad35b9a9fd2f134L615

NOTE: Fix needs to be cherry-picked to beta on the `1.9-releases` branch in order for [`atom/github` CI](https://ci.appveyor.com/project/Atom/github/branch/master/job/igsd6yot0wjimv48/tests) to pass",988,True,en,0
14870,1,1,0,Externals,jamesjpk123,2017-06-22 03:14:37,0,0,0,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

I commented out the ""Dependancy Status"" in the README.md, because in current time, the dependency status hosted on https://david-dm.org/atom/atom, is giving a 502 Bad Gateway error. I chose to comment out, and not delete because the website could be fixed in the near future.

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->
No other alternatives were considered, as a search in ""Issues"" of ""Error 502"" takes nothing up. An alternative to this choice would be to delete the code, but that would stop the potential for a fix when the website does get fixed.

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->
This functionality is not affecting ATOM directly (to my knowledge) and only affects the GitHub repository for ATOM, so this question does not apply.

### Benefits

<!-- What benefits will be realized by the code change? -->
Will fix a temporary error, causing less confusion, and more polish, for visitors looking at the repository.

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->
If the code was changed into a comment, and the website was fixed, the fix would not be realized and would have to be manually checked.

### Applicable Issues

<!-- Enter any applicable Issues here -->
",2121,True,en,0
14854,2,1,0,Externals,ghost,2017-06-20 21:15:09,0,0,0,0,"### Description of the Change

I changed the [README.md](README.md) file so 32 bit users can be able to know they can use Atom. I know this isn't your repository, but it works :)

And I changed the [.python-version](.python-version) so it has the Python 2 _and_ the Python 3 versions listed, for all the Python developers out there. 

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

I think the [README.md](README.md) was OK... but the Webupd8 Team repository is more... vast for the 32 bit Ubuntu users out there. And the [.python-version](.python-version) file was only for the Python 2 developers (which Python 2 is old anyways), and I helped by adding the Python 3 version as well.

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

I think it should be in core because it helps the 32 bit Ubuntu users and it'll also help the Python 3 developers.

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

32 bit Ubuntu users and Python 3 developers will be able to use Atom!

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

Webupd8 Team's repository is unofficial, and the code hasn't been checked by me. But, you can check it out [HERE](https://launchpad.net/~webupd8team/+archive/ubuntu/atom)

And I have no idea what programming language .python-version is, or if it's a programming language at all. I did my best, but if you see anything bad just tell me. 

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",2096,True,en,0
14844,5,7,0,Externals,lgeiger,2017-06-20 10:52:15,34,8,2,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Since #13880 the height of a block decorations doesn't get recalculated anymore if the content changes. This brings back the behavior of Atom 1.18. For more information on how to reproduce and GIFs see #14836

### Alternate Designs

I considered adding mutation observers to `decoration-manager` but this way we have a finer control over which decoration to schedule for remeasurment.

### Why Should This Be In Core?

This fixes a :bug: 😄 

### Benefits

This makes block decoration rendering consistent with the way it was in Atom 1.18

### Possible Drawbacks

I don't know how performance critical multiple `MutationObserver`'s are.

### Applicable Issues

Fixes #14836

/cc: @nathansobo @as-cii
",1020,True,en,0
14720,6,6,0,Externals,UziTech,2017-06-05 22:38:51,83,9,2,0,"### Description of the Change

Right now `atom.commands.dispatch` returns true/false to tell whether a dispatched command exists.

This would return an array of information for the executed commands including the `currentTarget`, `dispatchEvent`, and return value of the command.

This will allow the dispatcher to view the information for each listener of the command. 

### Alternate Designs

I was going to return a `Promise` with `Promise.all()` but I thought this would be better for a couple reasons.

 - `Promise.all()` will reject if only 1 `Promise` fails and the rest of the listeners info will be lost.
 - `Promise.all()` will only let us get the return value of each listener.

To keep backwards compatibility I return false if there are no matches. We could change that in the future.

### Why Should This Be In Core?

This requires changes to the command registry in core.

### Benefits

- Ability to get a return value from a command.
- Ability to tell when an async command actually finishes.
- Ability to dispatch commands in series.

### Possible Drawbacks

none

### Applicable Issues

#13195
",1146,True,en,0
14713,1,0,0,Externals,joy1305,2017-06-04 10:14:00,0,0,0,0,,0,False,en,2
14700,16,1,0,Externals,paulcbetts,2017-06-01 21:17:06,30,5,6,0,"(Ignore me, solely for build speed benchmarking purposes)",57,False,en,0
14691,3,2,0,Externals,CoolAppsDev,2017-06-01 04:18:26,150,4,3,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
14513,1,1,0,Externals,adammertzenich,2017-05-19 17:05:44,1,1,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
14456,18,14,2,Externals,Xapphire13,2017-05-17 18:01:59,119,69,9,0,"### Description of the Change
This PR addresses [#9544](https://github.com/atom/atom/issues/9544). The issue here is that upon gaining focus, Atom spins off a new task to update the repository status. Profiling Atom during this time shows that there is a lengthy (~ 2 seconds on my machine, longer on others') delay on the rendering thread due to the `child_process.fork()`. This PR changes it so that ~~each repository has its own~~ **there is a single** long running task that receives a message upon needing to update repo status. This moves the overhead of the `child_process.fork()` into a single hit ~~per repo~~ (I am experiencing zero noticeable delay upon focus now).

### Alternate Designs
~~An alternate design would be to have a single task that handled messages for _all_ repositories. I didn't go this route as I didn't want to change the method signatures in the areas I touched. If we did it at the workspace level, we would need to allow for passing in a reference to the task. And potentially add a few `.destroy()` methods to the layer that housed the task. I figure that it would be rare to have a number of repositories open at any given time that would cause negative effects due to the number of helper tasks alive.~~

**I managed to implement the alternate design without making a change to the API**

### Why Should This Be In Core?
This fixes an issue within core itself.

### Benefits
Usability of Atom is increased as you spend less time per day waiting on a blocked rendering thread.

### Possible Drawbacks
~~If you have a high number of repos open on Atom, you will have a high number of child processes.~~

**n/a**

### Applicable Issues
n/a
",1695,False,en,0
14421,1,1,0,Externals,Positive07,2017-05-15 23:54:45,2,2,1,0,"### Description of the Change
Two outdated packages (dedent and atom-select-list) were upgraded a minor release (from 0.6.0 to 0.7.0 and from 0.1.0 to 0.2.0 respectively)

### Why Should This Be In Core? / Benefits

Tries to decrease the number of outdated dependencies in Atom. 

### Possible Drawbacks

Needs to pass CI to see if there are no regressions

#### ⚠️ NOTE
I will also try to remove the color dependency since it's unused throughout this repository. I want to first see if this commit passes the necessary tests before trying that out 
",567,False,en,0
14405,1,1,0,Externals,iamadarshkumar,2017-05-13 06:28:58,6,0,1,0,"Debian Linux (Ubuntu) installation alternative using terminal.

### Requirements

*Ubuntu 14.04 and above

### Description of the Change

<!--

Updated readme.md for direct Atom installation via terminal using 3 command lines.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Another alternative for installation. -->

### Benefits

<!-- Easy installation via a terminal. -->

### Possible Drawbacks

<!-- No drawbacks -->

### Applicable Issues

<!-- No issues -->
",615,True,en,0
14355,1,3,0,Externals,NicolasHov,2017-05-04 16:27:47,1,1,1,0," Fix **SyntaxError** while building v1.16.0 release on Ubuntu 17.04 i686 with `./script/build --create-debian-package`

```
~/atom/script/lib/code-sign-on-mac.js:13
  let certPath = process.env.ATOM_MAC_CODE_SIGNING_CERT_PATH;
    ^^^

    SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode
```

Thank's to @yvan-sraka for it's helpful debug!",408,True,en,0
14313,1,1,0,Externals,flexiondotorg,2017-04-27 09:34:47,8,0,1,0,"Atom is now published in the Snap store, this pull request add instructions for installing the snap. Atom is currently in the beta channel but when it's promoted to stable I will file a another pull request to update the documentation.",235,False,en,0
14262,2,5,0,Externals,nikselite,2017-04-19 23:02:56,0,0,0,0,"### Description of the Change

The documentation for Linux and Windows says that you need to use `Ctrl+Alt+F` key binding to fold arbitrary sections of your code or text. However, in `linux.cson` and `win32.cson` declared a
`Ctrl-Alt-Shift-[` key binding, which leads to incorrect processing of keystroke and the appearance of duplicates. `Ctrl-Alt-Shift-[` key binding processed as `Ctrl-Alt-{` key binding which is already declared to fold everything.

| Before         | After          |
| :------------: | :------------: |
|![before](https://cloud.githubusercontent.com/assets/11644685/25205281/67330be6-256a-11e7-83f5-a20c071cae60.png)|![after](https://cloud.githubusercontent.com/assets/11644685/25205394/fb55e816-256a-11e7-8290-98bd8eedf54d.png)|

### Alternate Designs

None.

### Why Should This Be In Core?

Bug fixes.

### Benefits

Correct folding key bindings.

### Possible Drawbacks

None.

### Applicable Issues

#14023

### See Also

http://flight-manual.atom.io/using-atom/sections/folding/",1039,True,en,0
14247,1,1,0,Internals,smashwilson,2017-04-18 14:29:43,0,1,1,0,"Looks like a `debugger` statement slipped in to master as part of cc6e127e.

Fixes #14244.",92,True,en,0
14243,10,6,0,Externals,shanept,2017-04-18 06:16:17,140,6,5,0,"### Description of the Change

The change allows the editor to open local files based on a URL handler. This functionality is common in other editors, such as sublime and emacs

### Alternate Designs

No alternates. Some people have suggested using the 'atom:' scheme, however that is already in use for packages. WizardOfOgz has made a [script](https://github.com/WizardOfOgz/atom-handler) to act like a wrapper around atom, essentially translating a URI scheme to a file and passing it to atom.

Some notable discussions requesting such a feature:
https://discuss.atom.io/t/atom-protocol-handler/13336
Also see issue #2037 

### Why Should This Be In Core?

This can not be implemented in a package as it is, by design, core behaviour.

### Benefits

This shall allow files to be opened by URL. 

### Possible Drawbacks

None.

### Applicable Issues

In my personal use-case, I will be using the PHP Whoops package to handle exceptions in web-development. It will present me with a page with a URL to the file/line/column which I can then click and it will open it straight in the atom editor at the exact point at which the error occured.

### Still to be done
 * [x] Register atm handler with windows - **UNTESTED**
 
* [x] Register atm handler with OSX
",1290,True,en,1
14117,1,2,0,Externals,cs150bf,2017-04-03 13:18:19,1,1,1,0,"…b.com/atom/atom/issues/13978

First argument to dialog.showSaveDialog() needs to be a BrowserWindow

https://github.com/electron/electron/blob/master/docs/api/dialog.md
https://github.com/electron/electron/blob/master/lib/browser/api/dialog.js

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

This should fix some regression introduced by commit https://github.com/atom/atom/commit/c6cae5b8fdfea982084b068a0b38a7c988c52f51 related to `showSaveDialog` causing things such ""Save As"", ""Save as HTML"" to not work properly (default filename ""Untitled"" and default path missing when it should be autofilled with more ""reasonable"" ones--e.g. original filename and path). 

This commit fixes the erroneous usage in [`src/main-process/atom-window.coffee#L268`](https://github.com/atom/atom/blob/c6cae5b8fdfea982084b068a0b38a7c988c52f51/src/main-process/atom-window.coffee#L268) introduced in commit https://github.com/atom/atom/commit/c6cae5b8fdfea982084b068a0b38a7c988c52f51
```coffeescript
dialog.showSaveDialog(this, params)
```

Here, `this` refers to an instance of AtomWindow, when the function `dialog.showSaveDialog` requires the first argument to be a BrowserWindow [`electron/lib/browser/api/dialog.js#L24`](https://github.com/electron/electron/blob/master/lib/browser/api/dialog.js#L24). 

So I believe the fix is simply 
```coffeescript
dialog.showSaveDialog(@browserWindow, params)
```

This is consistent with with the function binding usage in [`src/main-process/atom-window.coffee#L86@c6cae5b`](https://github.com/atom/atom/blob/c6cae5b8fdfea982084b068a0b38a7c988c52f51/src/main-process/atom-window.coffee#L86) and with the **old** working function `showSaveDialog` in [`src/application-delegate.coffee#L158`](https://github.com/atom/atom/blob/ae9d949ee4e199d1884bed89083196fa375bbd34/src/application-delegate.coffee#L158)

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

N/A
<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

Bug fix.
<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

Fixes bug (and see applicable issues)
<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

I cannot think of any at this moment.
<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

- https://github.com/atom/atom/issues/14109
- https://github.com/atom/atom/issues/13978",3158,True,en,0
14078,28,0,0,Externals,RidhimaMohindra,2017-03-28 05:20:37,1862,151,19,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
14047,1,0,0,Externals,sanketh95,2017-03-23 04:29:00,7,1,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change
A more standard solution would be to use the nodejs-legacy package
in ubuntu/debian environments. Updated the linux docs with this information
and the installation instructions for it.

### Alternate Designs

N/A

### Why Should This Be In Core?

N/A

### Benefits

N/A

### Possible Drawbacks

N/A

### Applicable Issues

N/A
",643,True,en,0
14016,1,2,3,Internals,damieng,2017-03-16 19:18:24,10,14,2,0,"The debug module used by babel tends to throw stuff onto stderr and stdout when it feels like it.

This is a problem on Windows when Atom is launched from the UI and it doesn't have these attached - writing to them causes errors.

We previously had another fix in but it was quite dependent on the internals of Babel and broke. Hopefully this one lasts longer.",364,True,en,0
14014,1,1,0,Internals,nathansobo,2017-03-16 02:23:37,1,1,1,0,"This PR tests the text-buffer 11.4.0-0 prerelease before publishing it.

Refs https://github.com/atom/text-buffer/pull/223",124,True,en,0
13998,1,0,0,Externals,VIVEKLUCKY249,2017-03-13 17:32:55,0,0,0,0,"New Pull request

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1231,True,en,0
13997,1,0,0,Externals,VIVEKLUCKY249,2017-03-13 17:25:50,0,0,0,0,"New Pull request

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1231,True,en,0
13994,1,0,0,Externals,VIVEKLUCKY249,2017-03-13 14:40:58,0,0,0,0,"New Pull request

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1231,True,en,0
13936,1,1,0,Externals,proggga,2017-03-05 18:59:14,0,0,0,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
13934,1,4,0,Externals,imagentleman,2017-03-05 16:29:43,0,0,0,0,"### Description of the Change

If we get a textmate theme (e.g. https://raw.githubusercontent.com/JetBrains/colorSchemeTool/master/tmThemes/Monokai.tmTheme).

And try to convert it to an atom theme using apm as shown in the docs:
http://flight-manual.atom.io/hacking-atom/sections/converting-from-textmate/

The resulting theme (if we chose it as the current syntax theme on settings) will display a deprecation warning about two class selectors:

> Starting from Atom v1.13.0, the contents of atom-text-editor elements are no longer encapsulated within a shadow DOM boundary. This means you should stop using :host and ::shadow pseudo-selectors, and prepend all your syntax selectors with syntax--. To prevent breakage with existing style sheets, Atom will automatically upgrade the following selectors:
> 
> atom-text-editor .search-results .marker .region => atom-text-editor .search-results .syntax--marker .region
> atom-text-editor .search-results .marker.current-result .region => atom-text-editor .search-results .syntax--marker.current-result .region
> Automatic translation of selectors will be removed in a few release cycles to minimize startup time. Please, make sure to upgrade the above selectors as soon as possible.

#### Screenshot of the deprecation message
![deprecation-screenshot](https://cloud.githubusercontent.com/assets/2272928/23588842/6b95c996-0191-11e7-8ae4-39089d9dbd91.png)

If we look at the base template theme on apm, it's using the `.marker` selector (https://github.com/atom/apm/blob/master/templates/theme/styles/base.less#L54) and when the shadow rules were removed from apm, `.marker` was not prepended with `.syntax--` (https://github.com/atom/apm/pull/615/files).

So, assuming that apm is actually converting the themes correctly, my guess is that `marker` is not a deprecated selector and should be excluded from the warning messages.

Note: Based this pr on https://github.com/atom/atom/commit/abef1f25f9101183c7b73eaaf22ea872dd815c3a

### Alternate Designs

None.

### Why Should This Be In Core?

All themes that are automatically converted with the official atom ""way"" (using apm) are currently displaying deprecation warnings and also triggering some unnecessary automatic selector translations.

### Benefits

See previous item.

### Possible Drawbacks

I personally don't know much about the internals of atom. So, the `marked` selector could possibly be deprecated and the solution could lie elsewhere (e.g. on apm).

I also didn't test this fix at all locally (i didn't find instructions on how to run atom from source, etc). Just traced the deprecation warning message on the source code to this line https://github.com/atom/atom/blob/master/src/style-manager.js#L302, which in turn seem to depend on this other one https://github.com/atom/atom/blob/master/src/style-manager.js#L275 and from the deprecation message, the only class on the selector that i found blacklisted was `marker`.

### Applicable Issues

None that i could find both here and on the apm repo.
",3063,True,en,0
13921,2,6,0,Externals,probonopd,2017-03-02 22:04:28,0,0,0,0,"### Requirements

* Linux 64-bit machine

### Description of the Change

This PR, when merged, will compile this application on [Travis CI](https://travis-ci.org/) upon each `git push`, and upload an [AppImage](http://appimage.org/) to a temporary download URL on transfer.sh (available for 14 days). The download URL is toward the end of each Travis CI build log of each build. __Please note:__ Instead of storing AppImage builds temporarily for 14 days each on transfer.sh, you could use GitHub Releases to store the binaries permanently. In this case, delete [this line](https://github.com/atom/atom/pull/13921/files#diff-354f30a63fb0907d4ad57269548329e3R33) from the `.travis.yml` file.

### Alternate Designs

* Flatpak: Requires the setup of Flatpak and a runtime first, need to use the command line. Does not work out-of-the-box on most distributions but Fedora. Does not run on Live CDs.
* Snap: Canonical centric solution, Requires the setup of Snap and a runtime first, does not work out-of-the-box on most distributions but Ubuntu.

### Why Should This Be In Core?

Linux should be a first-class desktop for Atom, and using Atom on Linux should be as easy as on Windows and macOS.

### Benefits

Providing an [AppImage](http://appimage.org/) would have, among others, these advantages:
- Works for most Linux distributions (including Ubuntu, Fedora, openSUSE, CentOS, elementaryOS, Linux Mint, and others)
- One app = one file = super simple for users: just download one AppImage file, [make it executable](http://discourse.appimage.org/t/how-to-make-an-appimage-executable/80), and run
- No unpacking or installation necessary
- No root needed
- No system libraries changed
- Just one format for all major distributions
- Works out of the box, no installation of runtimes needed
- Optional desktop integration with `appimaged`
- Optional binary delta updates, e.g., for continuous builds (only download the binary diff) using AppImageUpdate
- Can optionally GPG2-sign your AppImages (inside the file)

[Here is an overview](https://github.com/probonopd/AppImageKit/wiki/AppImages) of projects that are already distributing upstream-provided, official AppImages.

### Possible Drawbacks

None. Providing an AppImage could be done in addition to providing other types of Linux packages and/or bundles.

### Applicable Issues

* https://github.com/atom/atom/issues/13118: Feature request: Provide an AppImage for Atom Stable and Atom Beta releases
* https://github.com/atom/atom/issues/4980: Add portable version for Linux
* https://github.com/atom/atom/issues/11000: Building Atom Beta releases so they can be installed simultaneously, on the same machine, to stable releases
* https://github.com/atom/atom/issues/4330: Installing atom without sudo privileges
* https://github.com/atom/atom/issues/2956: Add Linux software repositories for app update support 
* https://github.com/atom/atom/issues/11837: Flatpak release support
* https://github.com/atom/atom/issues/13298: Please provide a snap package",3058,True,en,0
13835,1,2,0,Internals,ungb,2017-02-16 23:01:27,0,0,0,0,"
### Description of the Change
Added logic from @progkix to support builds for 32bit linux.

### Alternate Designs

N/A
### Why Should This Be In Core?

Build scripts are in core.

### Benefits

allows people to build on 32bit linux.

### Possible Drawbacks

None so far. Will test this change before merging
### Applicable Issues

https://github.com/atom/atom/issues/13788#issuecomment-279019713
/cc @progkix",430,False,en,0
13833,1,2,0,Internals,maxbrunsfeld,2017-02-16 20:13:16,45,249,10,0,"⚠️  Not sure if we should do this ⚠️ 

Since we introduced the `DOMElementPool`, Chrome has [made some improvements](https://chromium.googlesource.com/chromium/src/+/master/third_party/WebKit/Source/platform/heap/BlinkGCAPIReference.md) to its garbage collection of DOM nodes. With those improvements, storing DOM elements in an object pool does not provide the same performance benefits that it once did. This PR removes the `DOMElementPool` and replaces its usages with simple calls to `document.createElement` and `HTMLElement.remove`.

#### Results

I compared the experiences of scrolling for 4 seconds straight in a large file with syntax highlighting (`text-editor-component-spec.js`) before and after removing the element pool. I could discern a difference in the average frame rate or its variance from the timelines.

Looking at the statistics though, it looks like the CPU stays idle for a slightly higher percent of the time **with** the `DOMElementPool`. And as you would expect, the memory usage is slightly more stable with the pool.

**With element pool**

![before](https://cloud.githubusercontent.com/assets/326587/23038221/176df5a6-f43e-11e6-9388-f07ba1ef1f77.png)

**Without element pool**

![after](https://cloud.githubusercontent.com/assets/326587/23038229/1e8ccf9c-f43e-11e6-9a7d-e498bc24ca5c.png)

#### Conclusion

Overall, the pool does improve performance very slightly (maybe imperceptibly).

@nathansobo @as-cii @kuychaco In a way, the element pool is still a good idea, but if we keep it, we need to understand that bug that we saw in the line number rendering. What do you think?
",1641,True,en,0
13803,1,1,0,Externals,okonomiyaki3000,2017-02-13 09:01:35,1,1,1,0,"It seems this was set to the wrong location for apm.

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change
Change the path to apm in apm.sh

### Alternate Designs
None

### Why Should This Be In Core?
Because apm does not work if the path is wrong.

### Benefits
APM will work.

### Possible Drawbacks
None

### Applicable Issues
None",591,True,en,0
13783,1,2,0,Externals,richardtin,2017-02-10 03:02:57,0,0,0,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->
Correct `apm` path for Windows platform

### Alternate Designs

N/A

### Why Should This Be In Core?

N/A

### Benefits

Make `apm` command can work in Git Bash of Windows version.

### Possible Drawbacks

N/A

### Applicable Issues

N/A",956,True,en,0
13746,5,2,0,Externals,UziTech,2017-02-05 07:03:06,197,1,2,0,"### Description of the Change

This will add a `remove` method to `atom.contextMenu` to counter the `add` method

With this method one will be able to remove items from the context menu by specifying a selector(s) and label(s)

### Why Should This Be In Core?

Because the only alternative is to override a global object `atom.contextMenu`

### Benefits

This will finally give the ability to remove items that clutter the context menus from packages.
Similar to the benefits of disabling keybindings that packages automatically add

### Possible Drawbacks

None that I can think of.

### Applicable Issues

#9429
#7739",641,True,en,0
13745,33,0,0,Externals,scooterman751,2017-02-05 01:16:00,139,82,16,0,"Atom should include a feature in which it also includes classes and ids ( that are already named ) in autocomplete. This would be useful for me using CSS since I am a beginner to coding. Thanks! 

![image](https://cloud.githubusercontent.com/assets/22735586/22622878/ade46d44-eb15-11e6-8953-5f233015bd42.png)
![image](https://cloud.githubusercontent.com/assets/22735586/22622886/da197918-eb15-11e6-9697-d4938c2d560a.png)
",425,True,en,0
13735,33,0,0,Externals,graphfxorl,2017-02-03 14:25:51,139,82,16,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
13700,1,0,0,Externals,pelegit,2017-01-26 08:33:11,0,0,0,0,adding new file to  atom ,25,False,en,0
13676,55,0,0,Externals,Rawatzin,2017-01-22 13:14:44,1481,309,22,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1211,True,en,0
13634,1,20,0,Externals,ryanpcmcquen,2017-01-16 14:43:53,0,0,0,0,"https://imgult.github.io

Signed-off-by: Ryan P.C. McQuen <ryanpcmcquen@member.fsf.org>


### Description of the Change

All images were losslessly optimized with [imgult](https://github.com/ryanpcmcquen/image-ultimator).

Compare the original size:
`355` KB => https://github.com/atom/atom/blob/master/resources/app-icons/beta/png/1024.png

![before_imgult](https://cloud.githubusercontent.com/assets/772937/21987123/0a01024a-dbb7-11e6-93a2-7861d2c42439.png)


To the _imgulted_ size:
`131` KB => https://github.com/ryanpcmcquen/atom/blob/master/resources/app-icons/beta/png/1024.png

![after_imgult](https://cloud.githubusercontent.com/assets/772937/21987129/10292d14-dbb7-11e6-883a-2330576cd5d7.png)


### Why Should This Be In Core?

It's part of the core.

### Benefits

Less disk space used for images that look identical!

### Possible Drawbacks

None are obvious.",902,True,en,0
13629,52,1,0,Externals,biesmard,2017-01-15 18:40:30,766,2124,37,0,"
[git-lfs-darwin-386-1.5.5.tar.gz](https://github.com/atom/atom/files/706798/git-lfs-darwin-386-1.5.5.tar.gz)

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1325,False,en,0
13613,2,2,0,Externals,hron,2017-01-13 19:25:23,29,5,4,0,"### Description of the Change

Currently atom creates two buffers for the same file if passed paths use difference case for disk drive letter, e.g. `d:\file.txt` and `D:\file.txt`

This change ensures that the absolute path always has disk drive letter in uppercase. 

### Alternate Designs

The other place where this fix could be applied is [findBufferForPath](https://github.com/atom/atom/blob/master/src/project.coffee#L331) function. However the used function [resolvePath](https://github.com/atom/atom/blob/master/src/project.coffee#L229) already has some path normalization code, so I think this is the best fit.

Actually Windows interpreters `file.txt` and `File.txt` as the same file. Maybe it makes sense to extend this patch and make Atom to do the same on this operation system, but I'm not sure because it can be file system specific. Any suggestions are welcome!

### Why Should This Be In Core?

I believe the current behavior of the editor is wrong for Windows users, so it makes no sense to create a plugin to fix that.

### Benefits

The main benefit I would like to get is the ability to click on parsed backtrace in my terminal emulation app (ConEmu). Right now it works, but atom opens second buffer for the same file because it doesn't normalize disk drive letter.

### Possible Drawbacks

The possible drawback is some broken tests, but I've checked that and it seems everything works.

### Applicable Issues

Here is the related issue #8221. It's not exactly about my problem, but it's very near.
",1549,True,en,0
13574,1,1,0,Externals,foxmean,2017-01-09 16:31:25,7,0,1,0,Just add installing of Arch Linux and Parabola GNU/Linux-libre.,63,False,en,0
13536,1,5,0,Internals,ungb,2017-01-04 01:30:22,1,1,1,0,"### Requirements

Tested on Centos.  the logic before tried to use || for or, but seems to return false for redhat distros, changed statement based on doc here: https://fedoraproject.org/wiki/Packaging:DistTag.  I am new to the build script logic.  @as-cii  @iolsen  can you take a look?  It's working for me on a clean install of centos on VM. 

/cc @philwyett-hemi since I'm modifying the logic that was merged.


### Description of the Change

Change logic in if statement for require for redhat distro.

### Alternate Designs

N/A

### Why Should This Be In Core?

This is currently breaking for Centos and Redhat users.

### Benefits

Fixes issue with installing on centos and redhat.



### Possible Drawbacks

N/A, after the last change this is already broken.

see comments in https://github.com/atom/atom/pull/13421

### Applicable Issues

https://github.com/atom/atom/issues/13417",923,True,en,0
13520,1,1,0,Externals,ecbrodie,2016-12-30 13:38:16,0,0,0,0,"### Description of the Change

I changed the Github Issues Template so that the numbered list uses repeating `1.` instead of incrementing numeric values.

### Alternate Designs

The current numbering scheme could still be used, but ... see *Benefits* for why I prefer not.

### Why Should This Be In Core?

This is the code repo that this specific Issues Template is used for.

### Benefits

I found that it is much easier to edit a numbered list in any Markdown document that uses repeating numbering instead of incremental numbers that represent the actual numbering that is rendered. It is much easier to add and remove any list element if repeated numbering is used. I only have to focus on the element's content and not the position that it appears in the list. Otherwise, I would have to also manually edit the numbers for any element that appears after the added/removed element. The numbering applied in the raw Markdown is ignored by the HTML renderer anyway, since it will be converted to HTML `<ol><li>`.

### Possible Drawbacks

The repeated numbering may be confusing for those less familiar with Markdown than if reading the raw Markdown code with incremental numbering. However, I would argue that the learning curve to understand how repeated numbering will be rendered is quite minimal. Markdown has become a universal documentation standard in the software world anyways.

### Applicable Issues

None that I am aware of.

### Other Notes

PRs similar to this one could potentially be applied to other projects under the **Atom** organization, such as [settings-view](https://github.com/atom/settings-view/blob/master/ISSUE_TEMPLATE.md) and [tree-view](https://github.com/atom/tree-view/blob/master/ISSUE_TEMPLATE.md).
",1763,True,en,0
13468,2,1,0,Externals,pedro-c,2016-12-18 21:35:27,5,0,5,0,"This feature allows the user to quickly add the current date to the editor buffer by pressing 'ctrl-alt-d' :
![1](https://cloud.githubusercontent.com/assets/9059178/21296709/dd45580e-c569-11e6-9da9-31da61f3ebf2.PNG)
",218,False,en,0
13467,1,0,0,Externals,pedro-c,2016-12-18 20:31:19,4,0,4,0,"This feature allows the user to quickly add the current date to the editor buffer by pressing 'ctrl-alt-d' :
![1](https://cloud.githubusercontent.com/assets/9059178/21296303/b86d39c4-c560-11e6-82d6-81f80366a345.PNG)
",218,False,en,0
13447,1,2,1,Externals,CodeMan99,2016-12-14 15:04:55,6,4,2,0,"This change is a _work in progess_.

Used twice successfully with v1.12.6 and v1.12.7, linux only.

Sparked from #13240 & #13389.",133,True,en,0
13438,1,1,0,Externals,50Wliu,2016-12-13 21:26:15,1,1,1,0,"This would be helpful for atom/settings-view#893.  Everything except `loadTime` and `activationTime` are available in the package's metadata, which is pretty much what the Settings View exclusively deals with.  This would prevent an extra call to `atom.packages.getLoadedPackage(name)` when we already have the rest of the package data available.  Unsure if this is a breaking change/if any packages are relying on this (why?).",427,False,en,0
13408,1,4,0,Externals,MoritzKn,2016-12-08 20:31:09,1,1,1,0,"This will fix a bug when executing `editor:toggle-line-comments` in a file with a grammar without comments (or without a `commentStartString`), for example plain text.

Before this update i got this exception:
```
TypeError: Cannot read property 'split' of undefined
    at Function.module.exports.Range.fromText (/usr/lib/atom/node_modules/text-buffer/lib/range.js:47:19)
    at TextBuffer.module.exports.TextBuffer.setTextInRange (/usr/lib/atom/node_modules/text-buffer/lib/text-buffer.js:608:24)
    at TextBuffer.module.exports.TextBuffer.insert (/usr/lib/atom/node_modules/text-buffer/lib/text-buffer.js:627:19)
    at LanguageMode.module.exports.LanguageMode.toggleLineCommentsForBufferRows (/usr/lib/atom/src/language-mode.js:98:22)
    at TextEditor.module.exports.TextEditor.toggleLineCommentsForBufferRows (/usr/lib/atom/src/text-editor.js:3570:32)
    at Selection.module.exports.Selection.toggleLineComments (/usr/lib/atom/src/selection.js:684:67)
    at /usr/lib/atom/src/text-editor.js:1405:26
    at /usr/lib/atom/src/text-editor.js:1107:28
    at TextBuffer.module.exports.TextBuffer.transact (/usr/lib/atom/node_modules/text-buffer/lib/text-buffer.js:866:18)
    at TextEditor.module.exports.TextEditor.transact (/usr/lib/atom/src/text-editor.js:1524:26)
    at /usr/lib/atom/src/text-editor.js:1101:24
    at TextEditor.module.exports.TextEditor.mergeSelections (/usr/lib/atom/src/text-editor.js:2498:43)
    at TextEditor.module.exports.TextEditor.mergeIntersectingSelections (/usr/lib/atom/src/text-editor.js:2464:35)
    at TextEditor.module.exports.TextEditor.mutateSelectedText (/usr/lib/atom/src/text-editor.js:1099:19)
    at TextEditor.module.exports.TextEditor.toggleLineCommentsInSelection (/usr/lib/atom/src/text-editor.js:1404:19)
    at TextEditor.editor:toggle-line-comments (/usr/lib/atom/src/register-default-commands.js:612:21)
    at /usr/lib/atom/src/register-default-commands.js:663:34
    at TextBuffer.module.exports.TextBuffer.transact (/usr/lib/atom/node_modules/text-buffer/lib/text-buffer.js:866:18)
    at TextEditor.module.exports.TextEditor.transact (/usr/lib/atom/src/text-editor.js:1524:26)
    at atom-text-editor.newCommandListeners.(anonymous function) (/usr/lib/atom/src/register-default-commands.js:662:22)
    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/usr/lib/atom/src/command-registry.js:259:29)
    at /usr/lib/atom/src/command-registry.js:3:59
    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/usr/lib/atom/node_modules/atom-keymap/lib/keymap-manager.js:587:16)
    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/usr/lib/atom/node_modules/atom-keymap/lib/keymap-manager.js:382:22)
    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeyEvent (/usr/lib/atom/src/window-event-handler.js:106:36)
    at HTMLDocument.<anonymous> (/usr/lib/atom/src/window-event-handler.js:3:59)
```

Atom linked the exception with the issue #6831, but I don't think this issue is related.",3053,True,en,0
13398,1,4,0,Externals,vjeux,2016-12-06 16:47:25,12,1,1,0,"Electron has an issue where displaying the context menu pauses the rendering loop. https://github.com/electron/electron/issues/1854

One unfortunate side effect is that when you right click on an element, the dom mutations to highlight the element have not been flushed yet which makes for a very bad user experience https://github.com/atom/atom/issues/2991

In order to solve this issue, we would like to flush the mutations and only then display the menu. Unfortunately, electron doesn't have APIs for that.

Things I have tried:
1) Electron has `browserWindow.webContents.invalidate()` and `.on('paint' -> ...)` but it only works with offscreen rendering which     atom doesn't use.
2) `.capturePage(-> ...)` takes a screenshot of the page and I hoped it     would do a flush first but it inconsistently displays the highlight     so it won't work.
3) `Using setTimeout((-> ...), 16)` works many times but not always
4) `requestAnimationFrame(-> ...)` should be what we want but unfortunately     it doesn't always show the highlights :(

What I found worked was to nest three `requestAnimationFrame`, it works all the time even when my machine is busy. This is not a 100% solution but I think that it's okay to assume that if the highlight hasn't been updated in three frames then you should probably try and optimize your code. 3 frames is 50ms and that delay isn't noticeable.

Note: the proper way to solve this that was mentioned in the issue is to open the menu from the main process but this is already what atom does and it's still an issue.

Before:
![](http://g.recordit.co/DruDVLJoN9.gif)

After:
![](http://g.recordit.co/PxBnwNt5yy.gif)

Released under CC0",1693,True,en,0
13388,1,1,0,Externals,VIVEKLUCKY249,2016-12-05 18:58:16,0,0,0,0,Update repository fork for completeness and latest,50,False,en,0
13344,1,0,0,Externals,drewcassidy,2016-11-28 07:35:30,0,0,0,0,This is confusing for users of High-DPI screens,47,False,en,0
13293,1,6,3,Externals,mattdangerw,2016-11-21 22:22:45,248,0,6,0,"This PR adds support for building a [flatpak](http://flatpak.org/) for atom. See the feature request issue https://github.com/atom/atom/issues/11837

First time contributing, so please let me know if there is anything else I should do to get this in ship shape. I did not see any tests for other packaging scripts (e.g. create-debian-package.js) so I did not add any here.

A broader conversation should probably happen around how the library dependencies for the app are included. The build script here will try to download an electron ""base application"" which contains things like gtk and libnotify which are needed by any electron app.

This base app can grow with new dependencies of the electron project and contain bug fixes specific to electron. It allows anyone shipping an electron flatpak to avoid library quirks on different linux distributions. It does need to be hosted somewhere though.

For now, the flatpak recipe for building the electron base app is here
https://github.com/endlessm/electron-flatpak-base-app
and my company [endless computers](https://endlessm.com/) is hosting a compiled version of the base app on s3 here
https://s3-us-west-2.amazonaws.com/electron-flatpak.endlessm.com/electron-base-app-master.flatpakref

If there is interest, it would be fantastic if atom/electron project could be the official home of the electron base app going forward. We'd be happy to transfer the github repository and help with setting up a place to host the compiled version of the electron base application. Please ping me to discuss further. I can open a follow up issue in the electron repository if that is best.

On a related note, have started work on some [node tools for building electron flatpaks](https://www.npmjs.com/~endlessm), and have a few [other](https://github.com/mattdangerw/webtorrent-desktop/tree/flatpak) [app](https://github.com/mattdangerw/brave-browser-laptop/tree/flatpak) [ports](https://github.com/mattdangerw/Ghost-Desktop/tree/flatpak) in progress.

#### Building
Requires [flatpak > `0.6.13` installed](http://flatpak.org/getting.html). Then just
```
./script/build --create-flatpak
```

#### Testing
Install the flatpak and run it with
```
flatpak install --user --bundle out/atom-x86_64.flatpak
flatpak run io.atom.Atom
```",2300,True,en,0
13283,1,3,0,Externals,GabMus,2016-11-21 09:09:17,1,1,1,0,,0,False,en,0
13274,32,0,0,Externals,ycai2,2016-11-20 01:19:56,159,134,12,0,"Moved ""Fold all"" menu entry to above the ""Unfold all"" and the separator. ",73,False,en,0
13245,1,1,0,Internals,damieng,2016-11-16 18:49:56,1,1,1,0,Brings in Node 6.5.0 which solves #13104 ,41,False,en,0
13180,1,0,0,Externals,andrewwoz,2016-11-10 13:20:38,0,0,0,0,,0,False,en,0
13162,55,0,0,Externals,lakhera2014,2016-11-08 17:39:52,1481,309,22,0,,0,False,en,0
13119,6,12,9,Externals,SahilC,2016-10-31 20:14:48,4,1,1,0,,0,False,en,0
13117,1,0,0,Externals,vgupta001,2016-10-31 16:07:17,4,4,1,0,Changes made,12,False,en,0
13113,18,2,2,Externals,mnquintana,2016-10-31 03:14:18,443,304,26,0,"Continuing on from https://github.com/atom/atom/pull/13065, this PR rewrites a bunch of small files as JS. 🤘 

👀 @atom/feedback ",136,True,en,0
13112,20,0,0,Externals,riedlem,2016-10-31 03:04:52,45,19,6,0,,0,False,en,0
13111,1,0,0,Externals,vilnitskiy,2016-10-31 00:45:13,0,0,0,0,,0,False,en,0
13094,20,0,0,Externals,clewellEDU,2016-10-28 17:03:33,45,19,6,0,,0,False,en,0
13091,1,0,0,Externals,mattdangerw,2016-10-28 07:54:24,176,0,3,0,,0,False,en,0
13087,4,14,1,Internals,BinaryMuse,2016-10-27 18:13:22,27,5,2,0,"Currently, the Atom transpilation story, via the compile cache, is as follows:
- All TypeScript (`.ts`) files are compiled with the TypeScript compiler.
- All CoffeeScript (`.coffee`) files are compiled with the CoffeeScript compiler.
- JavaScript (`.js`) files are compiled with the Babel compiler _if_ they start with `/** @babel */`, `""use babel""`, `'use babel'`, or `/* @flow */`. Atom currently uses Babel 5 to transpile JS, and sets some explicit options in `static/babelrc.json`.

In addition, the `ThemeManager` uses `LessCompileCache` to compile Less (`.less`) files to CSS.

In an ideal world, individual packages would have more control over how exactly their source is transpiled before being run in Atom. A best case scenario would be that a package author can specify _exactly_ how we should transform their source. At a minimum, packages should be able to pick-and-choose which JavaScript transformations are applied to them by specifying their own options in a local `.babelrc` and including any additional Babel plugins as appropriate.

To start with, I'm updating Babel to version 6 while attempting to keep the resulting JavaScript as similar to the Babel 5 version as possible, to avoid breaking existing packages.
- [x] Update to Babel 6
  - [ ] Include appropriate plugins to mimic Babel 5 behavior
- [ ] Figure out backward-compat opt-out story (e.g. pragma)
- [ ] Figure out local customizations (including ones with package-specific options, like Relay schema location)
- [ ] Other stuff

/cc @atom/core @nathansobo 
",1542,False,en,0
13086,7,1,0,Internals,maxbrunsfeld,2016-10-27 18:12:00,33,2,8,0,"Depends on https://github.com/atom/text-buffer/pull/177

This adds a dependency on rust at build time.
",103,True,en,0
13083,1,0,0,Externals,mukulkhandelwal,2016-10-27 08:47:38,3,3,1,0,,0,False,en,0
13075,1,0,0,Externals,iyakimavets,2016-10-26 09:19:36,6,6,1,0,,0,False,en,0
13063,11,0,0,Externals,brittanym3578,2016-10-25 02:21:01,38,12,5,0,,0,False,en,0
13050,9,0,0,Externals,sam0s,2016-10-22 14:11:50,32,8,3,0,,0,False,en,0
13047,1,5,0,Externals,seusher,2016-10-22 05:29:54,13,7,1,0,"Adds a fix to only duplicate a line once, no matter how many selections exist on the same line. The selections are set correctly on the duplicated line.
![anim](https://cloud.githubusercontent.com/assets/416212/19617150/e1b120bc-97dd-11e6-8a75-3ba4d4c7fc2e.gif)

Fixes https://github.com/atom/atom/issues/12927",313,False,en,0
13045,8,0,0,Externals,thaisdemoura,2016-10-21 17:07:00,61,121,9,0,,0,False,en,0
13036,2,0,0,Externals,hahaveryfun,2016-10-20 18:15:37,810,3,14,0,,0,False,en,0
13006,1,0,0,Externals,jokosu10,2016-10-17 03:39:55,5,5,1,0,,0,False,en,0
13002,1,4,0,Externals,danielbayley,2016-10-16 21:13:56,2,0,1,0,,0,False,en,0
12995,250,0,0,Externals,jasonjyu,2016-10-16 01:42:20,27380,14548,520,0,,0,False,en,1
12989,1,1,0,Externals,tadityar,2016-10-14 17:12:58,7,0,2,0,"Hello! This is my first time contributing to atom, this PR fixes issue #12744 .

Resulting Behavior
![fixed](https://cloud.githubusercontent.com/assets/7445868/19396189/5510af92-9274-11e6-8251-cb30b7edf06e.gif)
",211,True,en,0
12979,1,0,4,Externals,liuderchi,2016-10-14 06:48:35,9,8,1,0,"1. Related issue is [#12978](https://github.com/atom/atom/issues/12978)
2. changes:
   - parse args first then checks module dependencies to avoid slow response for `script/build --help`
   - add args alias `-h` for `--help`

Closes https://github.com/atom/atom/issues/12978
",275,False,en,0
12970,4,0,0,Externals,lin31504,2016-10-13 14:37:57,30,7,2,0,"I think that the new version is better
",39,True,en,0
12962,1,0,0,Externals,ghost,2016-10-12 20:06:40,0,0,0,0,,0,False,en,0
12943,2,0,0,Internals,iolsen,2016-10-11 20:18:42,38,1,2,0,"testing...
",11,True,en,0
12939,49,0,0,Internals,missinformed,2016-10-11 17:51:37,188,66,21,0,"please ignore
",14,True,en,0
12936,49,0,0,Externals,navickas12,2016-10-11 15:52:22,188,66,21,0,,0,False,en,0
12934,1,0,1,Internals,damieng,2016-10-11 06:09:13,12,10,2,0,"This prevents the normalize function being called over and over again during sorting of menu items by caching it on its own reusable property (normalizedLabel)
",160,True,en,0
12926,1,5,0,Externals,stereobooster,2016-10-10 11:05:46,6,1,1,0,"This PR is replacement for https://github.com/atom/atom/pull/6075. But this is not Production Ready yet. Created it to discuss.

Closes https://github.com/atom/atom/issues/6070
Closes https://github.com/atom/atom/pull/6075
Depends on https://github.com/atom/tabs/pull/386
### Testcase
1. Open Atom (without params)
2. Type some text in untitled buffer
3. Create new buffer (Cmd+N)
4. Close first buffer without switching to it

Expected behaviour:
1. Switch to first tab
2. Shows Prompt whether you want to save or not

Current behaviour
1. Shows Prompt whether you want to save or not
### Technical details

<img width=""1181"" alt=""graph3"" src=""https://cloud.githubusercontent.com/assets/179534/19308223/38631c20-9087-11e6-84ab-232190497414.png"">

As of now all actions after click on close icon happens synchronously - control not returned to browser, so it has no ability to do paint. Solution make reflow actions in asynchronous way so browser would be able to do paints.

As example we can do something like (`tab-bar-view.coffee`):

``` coffeescript
 onClick: (event) ->
    return unless matches(event.target, "".tab .close-icon"")

    tab = closest(event.target, '.tab')
    @setActiveTab(tab) if tab.item.isModified?()
    setImmediate => @pane.destroyItem(tab.item)
    false
```

which will allow browser to do paints

<img width=""565"" alt=""graph4"" src=""https://cloud.githubusercontent.com/assets/179534/19308847/5d07b204-908a-11e6-9180-a9867802df63.png"">
",1465,True,en,0
12912,1,6,0,Externals,lukecaputo,2016-10-08 01:23:38,1,1,1,0,"Add a comma.
",13,True,en,0
12894,1,0,0,Externals,siddharthkhandelwal,2016-10-06 17:11:28,3,3,1,0,,0,False,en,0
12893,1,0,0,Externals,aayushitanwar,2016-10-06 17:05:41,3,3,1,0,,0,False,en,0
12886,1,0,0,Externals,stevotennis,2016-10-06 06:08:31,14,13,2,0,"… Win/Linux. Addresses some of #4057
",39,True,en,0
12871,1,1,0,Externals,ambrosiora,2016-10-04 14:54:24,1,0,1,0,"Update Documentation about color
",33,True,en,0
12869,11,0,0,Externals,go4st,2016-10-04 12:39:07,1656,792,18,0,"I just want a t-shirt! Thanks !
",32,True,en,0
12868,1,0,0,Externals,Salzhaltig,2016-10-04 10:25:40,44,0,1,0,,0,False,en,0
12863,250,0,0,Externals,davidgiraldo77,2016-10-04 01:37:39,26570,14281,486,0,"'left': 'core:move-left'
    'right': 'core:move-right'
    'ctrl-alt-r': 'window:reload'
-  'ctrl-shift-i': 'window:toggle-dev-tools'
  'ctrl-alt-p': 'window:run-package-specs'
  'ctrl-shift-o': 'application:open-folder'
  'ctrl-alt-o': 'application:add-project-folder'
",271,False,de,1
12856,8,1,0,Externals,ChamathAri,2016-10-03 03:14:13,61,121,9,0,,0,False,en,0
12855,18,0,0,Externals,nikiking,2016-10-02 23:32:09,51,51,13,0,,0,False,en,0
12851,2,0,0,Externals,jakobamster,2016-10-02 13:40:17,206,378,11,0,,0,False,en,0
12843,1,0,0,Externals,yuxiangdai,2016-10-01 20:29:44,1,1,1,0,,0,False,en,0
12839,48,1,0,Externals,b-orlov,2016-10-01 10:40:11,233,282,77,0,,0,False,en,2
12838,1,2,0,Externals,hamzahsarwari,2016-10-01 08:28:21,7,0,1,0,,0,False,en,0
12837,1,0,0,Externals,Trollodeboy,2016-10-01 07:17:10,1,1,1,0,"Bugg
",5,True,en,0
12836,1,0,0,Externals,Tom-the-Cat,2016-09-30 23:53:13,0,0,0,0,"Update
",7,True,en,0
12833,250,0,0,Externals,JangaNA,2016-09-30 21:24:12,12391,17532,358,0,"This is a pull request
",23,True,en,6
12829,8,0,0,Externals,viemmsakh,2016-09-30 16:01:23,61,121,9,0,,0,False,en,0
12827,8,0,0,Externals,malexanderboyd,2016-09-30 13:53:45,61,121,9,0,,0,False,en,0
12818,1,0,0,Externals,amadorfreedompop,2016-09-29 16:38:33,1,1,1,0,,0,False,en,0
12812,49,0,0,Externals,Remitar,2016-09-28 18:37:35,724,542,32,0,,0,False,en,0
12810,1,0,0,Externals,Hoogs88,2016-09-28 16:10:50,3,0,1,0,,0,False,en,0
12809,28,0,0,Externals,majicaster2,2016-09-28 15:24:07,138,963,22,0,,0,False,en,0
12808,49,0,0,Externals,stdfr33,2016-09-28 15:00:49,188,66,21,0,,0,False,en,0
12807,28,0,0,Externals,stdfr33,2016-09-28 15:00:18,138,963,22,0,,0,False,en,0
12806,8,1,0,Externals,stdfr33,2016-09-28 14:54:27,61,121,9,0,,0,False,en,0
12801,1,2,0,Externals,JurgensSmit,2016-09-28 06:07:40,16,1,2,0,,0,False,en,0
12799,18,0,0,Externals,sinmaker,2016-09-28 03:12:11,51,51,13,0,,0,False,en,0
12798,2,0,0,Externals,bizarrejelly5,2016-09-28 02:08:33,206,378,11,0,,0,False,en,0
12786,2,2,0,Externals,ahmetemir,2016-09-26 19:13:10,8,0,2,0,"For  #12744.
",13,True,en,0
12768,1,3,0,Externals,stpdenis,2016-09-24 23:04:34,4,1,1,0,"Really small UX improvement for toggleLineCommentsInSelection: after commenting/uncommenting text, cursor will move down, so you can continue commenting the following line.

Inspired by PyCharm
",194,True,en,0
12767,18,14,0,Internals,simurai,2016-09-24 08:38:51,79,8,5,0,"This PR is similar to https://github.com/atom/atom/pull/10208 (Hide title bar on OS X) and contiues from https://github.com/atom/atom/pull/11790. It replaces the current ""Use Custom Title Bar"" checkbox with a ""Title Bar"" dropdown. It has the following options:
- `native` (default)
- `custom` adapts to themes
- `hidden` **New**! Only the traffic lights are shown

![screen shot 2016-10-15 at 7 40 34 pm](https://cloud.githubusercontent.com/assets/378023/19409487/51d840c4-930f-11e6-98e8-6cefd0a21df2.png)
### Native

![screen shot 2016-10-15 at 7 34 06 pm](https://cloud.githubusercontent.com/assets/378023/19409427/64c5ac04-930e-11e6-8dda-ed7775214bde.png)
### Custom

![screen shot 2016-10-15 at 7 32 23 pm](https://cloud.githubusercontent.com/assets/378023/19409431/746936c6-930e-11e6-9408-3d80e4806ee8.png)
### Hidden (new)

![title-bar-custom](https://cloud.githubusercontent.com/assets/378023/18807178/79a7a210-827b-11e6-8f96-6b2a9bf28b02.png)
## Benefits:

Be able to hide the title bar leaves more room for the editor and looks less cluttered. Also a package like the tool-bar could use the title bar's place instead.

![title-bar-custom 2](https://cloud.githubusercontent.com/assets/378023/18807177/79a71afc-827b-11e6-8bc9-68ec69338e59.png)
## Concerns:

When the tree-view is hidden, a vertical bar is shown to make sure the traffic lights don't overlap anything and that there is an area where the window can be dragged.

![screen shot 2016-10-25 at 7 08 22 pm](https://cloud.githubusercontent.com/assets/378023/19682048/d01f77a2-9ae6-11e6-8ec1-b9d51e64bf84.png)
## Affected packages:
- [ ] tool-bar (nothing major, but could still use some tweaks like centering the icons when it's on the left and tree-view is hidden.

/cc @brumm 
",1745,False,en,0
12765,1,1,0,Externals,TriforceOfKirby,2016-09-23 20:05:31,0,0,0,0,"The Atom package is available on Arch Linux in the official repositories for both [32-bit](https://www.archlinux.org/packages/community/i686/atom/) and [64-bit](https://www.archlinux.org/packages/community/x86_64/atom/).
",221,True,en,0
12734,1,3,0,Externals,felixangell,2016-09-20 23:22:09,0,0,0,0,"I was checking out the contributing document and noticed the JS style guide link is dead. I figured the second best thing would be the JS styleguide in the document itself?
",173,True,en,0
12715,2,1,0,Externals,zacharyrankin,2016-09-18 05:20:08,15,1,1,0,"Currently in Atom when you do a ""Save As"" (or save a new file) it will have a default name of ""Untitled"".

Sublime had a feature that would take the first 50 characters of your file and make that the default file name when using ""Save As"".  I loved this feature because when I was creating new files I would tend to start them with something that could be a useful file name.

This is still a work in progress, but I wanted to get the conversation started.

I am trying to find if there is a good way to do some kind of a hook so that the default ""Save As"" file name could be configured via a package.

I don't think it is possible right now but I might have missed something.  This is my first stab at implementing a feature in Atom. Any help would be appreciated.

Here is an example:

![](https://media.giphy.com/media/3o7TKsxO1p8iWGeJws/giphy.gif)
",852,True,en,0
12670,1,0,0,Externals,ghost,2016-09-12 12:32:05,0,0,0,0,"Update at #12671.
",18,True,en,0
12669,1,1,0,Externals,gutierri,2016-09-12 11:08:57,0,0,0,0,,0,False,en,0
12605,1,0,1,Internals,markostar,2016-09-05 10:07:49,0,0,0,0,,0,False,en,0
12593,1,0,0,Externals,batrashubham,2016-09-02 20:44:40,0,0,0,0,"Update from original
",21,True,en,0
12573,1,6,0,Externals,lgeiger,2016-09-01 01:04:57,15,8,4,0,"This will shorten the directory path displayed in the title bar
PR:
<img width=""270"" alt=""bildschirmfoto 2016-09-01 um 02 14 06"" src=""https://cloud.githubusercontent.com/assets/13285808/18151613/bc5bb666-6ff0-11e6-9bd1-f5ebece7a21f.png"">
Master:
<img width=""398"" alt=""bildschirmfoto 2016-09-01 um 02 23 43"" src=""https://cloud.githubusercontent.com/assets/13285808/18151614/bc5bd3ee-6ff0-11e6-935d-fc1e24d66cb7.png"">
",416,False,en,0
12564,1,1,0,Externals,hansonw,2016-08-31 17:42:44,1,1,1,0,"Includes proper syntax highlighting for C++11 string literals.

Apologies if you guys prefer to batch the language bumps all at once - just wanted to make sure this didn't slip under the radar.

cc @50Wliu 
",207,True,en,0
12542,2,1,0,Externals,msafi,2016-08-29 00:32:09,0,0,0,0,,0,False,en,0
12535,1,1,0,Externals,santagada,2016-08-27 08:21:41,2,1,1,0,"support xonsh (http://xon.sh/).
",32,True,en,0
12514,1,2,0,Externals,Rabi007,2016-08-25 11:09:26,1,1,1,0,"updated some words.
",20,True,en,0
12505,1,1,0,Externals,Jdesk,2016-08-23 21:33:04,12,11,1,0,"add gitter badge and merge
",27,True,en,0
12486,1,6,0,Externals,yuanwhy,2016-08-20 04:50:16,10,2,1,0,"Fix bug https://github.com/atom/atom/issues/11361

1、On macOS,  the sate is not saved when the last window is removed because the progress is running, so ""removeWindow"" function must be updated to :

> `@saveState(false) unless window.isSpec`

2、We must load paths from '.atom/storage/application.json' for the first window  when the application is running and no window, especially on macOS
",396,True,en,0
12482,1,1,1,Externals,lgeiger,2016-08-19 20:23:35,2,2,2,0,"Closes #9739.
",14,True,en,0
12415,1,0,0,Externals,VIVEKLUCKY249,2016-08-13 20:11:53,0,0,0,0,"Update with base
",17,True,en,0
12395,1,1,1,Internals,nathansobo,2016-08-11 16:51:26,6,2,1,0,"We symlink the compile cache from the original ATOM_HOME to ensure window startup is still performant, but avoid anything else leaking across tests.

/cc @maxbrunsfeld 
",169,True,en,0
12373,3,2,4,Externals,50Wliu,2016-08-09 14:04:03,18,28,1,0,"Despite the instructions saying that all the commands assumed the usage of Bash, it was actually the other way around - all commands used cmd syntax.  Other than clarifying that, I've also simplified/streamlined some of the sections.

There is one unfortunate ""bug"" introduced by these changes: whichever language package is being used by Linguist to highlight `cmd` blocks doesn't differentiate between when `dir` is being used as a command or as an argument.

``` cmd
script\build --install-dir
```

compared to

``` cmd
dir
```

/cc @damieng 
",546,True,en,0
12285,1,1,0,Externals,Ingramz,2016-08-02 13:18:36,2,2,1,0,"I am getting `Uncaught TypeError: Cannot read property 'value' of null` at the isRegistered function.

see https://github.com/fresc81/node-winreg/blob/master/lib/registry.js#L649

cc @damieng 
",193,True,en,0
12235,250,2,0,Internals,maxbrunsfeld,2016-07-26 00:56:55,17569,9,300,0,"⚠️  This may be a terrible idea ⚠️ 

This adds `apm` (with all of its history) into this repo, under the `apm` directory. The idea is that `apm` should just be a part of Atom, rather than its own node module that needs to _find_ Atom on your hard drive in order to work properly.

/cc @nathansobo
",305,True,en,13
12231,1,1,0,Internals,as-cii,2016-07-25 16:40:59,0,55,1,0,"After #12207, we are going to switch atom/atom to use CircleCI. The web hook remains in-place for existing pull-requests, but from now on we won't be building new PRs on Travis.
",178,True,en,0
12212,1,13,2,Externals,crazymykl,2016-07-22 04:25:00,190,18,12,0,"Fixes #4590
",12,True,en,0
12196,3,33,0,Externals,uhop,2016-07-19 19:51:46,1,0,1,0,"`ATOM_HOME` is `undefined`, which breaks Atom on startup (at least on Mac). Interesting that it is `undefined` even when I explicitly set this variable in `.bashrc`.

The patch is a one-liner for simplicity:
- It checks, if `ATOM_HOME` is falsy. If it is:
  - It checks if `HOME` is truthy. If it is:
    - It sets `ATOM_HOME` to `path.join(HOME, '.atom')`.
  - Otherwise it sets it to an empty string.

The description above dwarves the code.

I don't know what caused the problem, because I saw it before intermittently, but recently I updated node to 6.3.0, and Mac to 10.11.6. The combined change made the problem persistent.

Before debugging the code I tried to reinstall Atom 1.8.0, and 1.9.0-beta0 &mdash; both fail the same way (`undefined` is passed to `path.join()`).
",780,True,en,0
12189,1,19,2,Externals,Ingramz,2016-07-18 07:49:36,67,132,29,0,"Let's see how well this goes. :pray: 

I was reading some text-editor related code and was mildly frustrated to find some unused variables. I added [coffeescope](https://github.com/za-creature/coffeescope) for coffeelint and started manually excluding global classes and variables until it found the following unused variables/undefined references.

~~There are still unused variables in `try ... catch unusedVariable` statements, but these cannot be cleaned up as it requires a more up to date version of coffeescript dependency in grunt or the code won't transpile.~~ Updated coffeescript.

If ~~we do have a more recent version of coffeescript, grunt and~~ a false positive regarding `for x,y of z` in coffeescope#7 has been fixed ~~(which in programming speak is _never_)~~, it might be worthwhile adding coffeescope permanently to find code like this.

Update 30.08.2016: There is still some configuration overhead with the coffeescope, as there are certain things that are defined in helpers and elsewhere, which would have to be whitelisted manually.
",1058,True,en,1
12179,1,1,0,Internals,maxbrunsfeld,2016-07-15 21:23:26,54,2120,8,0,,0,False,en,0
12178,29,0,0,Internals,maxbrunsfeld,2016-07-15 21:22:59,191,3082,29,0,,0,False,en,0
12176,5,5,1,Externals,thomasjo,2016-07-15 15:54:24,6,7,3,0,"Bumps packages that have dependencies on graceful-fs to versions that uses graceful-fs v4 or higher. 

This is **necessary** for Node.js v6 support.

TODO:
- [x] Bump fstream.
- [x] Open PRs against [less-cache](https://github.com/atom/less-cache) — https://github.com/atom/less-cache/pull/10
  - [x] Bump less-cache once PRs have shipped.
- [ ] Fix regression during the `prebuild-less` task. See https://github.com/atom/atom/pull/12176#issuecomment-240339043
",463,True,en,0
12170,29,1,0,Internals,as-cii,2016-07-14 14:52:07,31,28,9,0,"Refs: #11897 
",14,True,en,0
12165,1,0,0,Externals,hungrygeek,2016-07-13 18:22:06,1,1,1,0,"fix issue #12073, the '-n' option is not needed here. Since with or without this option, atom opens up a directory in new window and a file in a new tab, given that atom is already opened. And removing the '-n' option fix the issue #12073.
",240,True,en,0
12145,1,2,0,Externals,pkgdemon,2016-07-12 01:29:47,0,0,0,0,"These packages now exist as node012, and npm012.
",49,True,en,0
12118,3,1,0,Externals,cgarvis,2016-07-07 20:20:44,2,0,1,0,"Because there is no way to represent an added feature.
",55,True,en,0
12117,1,4,0,Externals,kylesimmonds,2016-07-07 19:10:21,0,0,0,0,"See discussion in atom#7159
",28,True,it,0
12098,1,18,0,Externals,YemSalat,2016-07-05 03:23:53,6,6,3,0,"This addresses the unexpected `ctrl+backspace` behaviour: https://github.com/atom/atom/issues/3362

Changes the default `ctrl + backspace/del` (`alt + backspace/del` on osx) behaviour from deleting to the end of word to deleting to the word boundaries.
This makes atom behave similar to all other editors and fixes an issue that has been bothering a lot of people for a while (check the link above)
",399,True,en,0
12064,1,0,0,Externals,AshPriya,2016-06-28 16:49:37,119,0,7,0,,0,False,en,0
12038,1,1,0,Externals,fusion809,2016-06-24 04:17:27,0,0,0,0,"Hi,

In this pull request I added a SUSE section, I also improved the accuracy of the Linux section titles (as these instructions should work on derivative distributions too), specifically:
- Debian Linux (Ubuntu) &rarr; Debian / Ubuntu / Linux Mint / derivatives thereof
- Red Hat Linux (Fedora) &rarr; CentOS / Fedora / Red Hat Enterprise Linux / derivatives thereof

Thanks for your time,
Brenton
",400,True,en,0
12035,0,0,0,Internals,damieng,2016-06-23 06:21:45,0,0,0,0,"This is not necessarily or desirable on Windows or Linux (but is required by Crashpad on the Mac).

It adds to the spurious output noise on the command line aalthough is not the only cause (removing verbose messages for crash_service and also not starting crash reporter if we're just going to quit anyway is a good idea)
",322,True,en,0
12034,1,1,0,Externals,ghost,2016-06-23 04:34:42,0,0,0,0,"src coffee main atom
",21,True,en,0
12009,1,6,2,Externals,michaelgmcd,2016-06-20 15:11:44,1,0,1,0,,0,False,en,0
12006,1,3,0,Externals,rahatarmanahmed,2016-06-19 22:39:50,9,8,2,0,"When the -a flag is used, atom replaces env of the existing window. Since this existing window doesn't rerun `init-application-window.coffee`, the $NODE_PATH env variable becomes unset. This commit moves setting $NODE_PATH earlier in the window creation process so that it gets set regardless. This fixes the [issue](https://github.com/atom/fuzzy-finder/issues/205) where fuzzy-finder's indexing task cannot find the 'atom' module because the $NODE_PATH becomes unset.
",469,True,en,0
11993,2,0,0,Internals,damieng,2016-06-16 15:22:35,43,36,2,0,"Moving travis to only building and testing on node 4.x
",55,True,en,0
11973,1,2,0,Externals,Gawdl3y,2016-06-13 17:32:11,0,0,0,0,,0,False,en,0
11949,1,1,0,Externals,igor-dyatlov,2016-06-09 22:25:51,0,0,0,0,,0,False,en,0
11913,1,1,0,Internals,BinaryMuse,2016-06-06 18:33:57,1,0,1,0,"/cc @damieng for 👀 
",23,True,pl,0
11882,16,0,0,Externals,SadeghHayeri,2016-06-02 15:52:28,0,0,0,0,,0,False,en,0
11858,2,3,0,Internals,simurai,2016-05-28 00:33:47,334,642,20,0,"⚠️  This is in parallel to #11839 + 11875. Don't merge all PRs, only pick one. ⚠️ 

This moves Bootstrap (and some core components) to a separate package. 

Refs: #6351, #8237 
### Stays in core `atom/atom/static`:
- [x] Octicons
- [x] Normalize
- [x] Scaffolding
- [x] Cursors
- [x] Panels
- [x] Panes
- [x] Syntax
- [x] `text-editor-light`
- [x] `workspace-view`
### Moved + merged into the [atom/ui](https://github.com/atom/ui) package:
- [x] Tooltips
- [x] Buttons + Button Groups
- [x] Lists
- [x] Code
- [x] Nav
- [x] Scaffolding
- [x] Utilities
- [x] Alerts
- [x] Tables
- [x] Forms
- [x] Type
- [x] Normalize
- [x] Clean up some un-used styles. Like IE hacks etc.
### Removed:
- 🔥  grid
- 🔥  input-groups
- 🔥  labels
- 🔥  thumbnails
- 🔥  close
## Motivation

Currently we load Bootstrap and then try to override it in core. Moving some of it into its own package allows more control and adjustments can be made directly. Also, making changes in a separate package feels less intimidating and can easier be rolled back in `package.json`.
## Concerns

What happens if you disable the UI package?

![ui](https://cloud.githubusercontent.com/assets/378023/15624689/ea3cc9c0-24c9-11e6-97cc-2e03d430279e.gif)

Because the main layout styles are still in core and themes override a lot of the components, it doesn't look too broken. Just a few things seem off or un-styled. For the tree-view or nav in the settings, we could remove the list styles in those packages to make a bit more robust. Being able to disable the UI package might inspire the community to create their own version or add additional components.

Some styles got removed, so there is a chance that something might look unstyled or off. Packages bundled with Atom should be fine, but it's hard to predict if community packages rely on any of the removed styles. Maybe in the Beta phase we can catch some regressions.

@atom/design @atom/core
",1934,True,en,0
11839,24,1,0,Internals,simurai,2016-05-25 10:50:28,3457,130,22,0,"⚠️  This is in parallel to #11858 + 11875. Don't merge all PRs, only pick one. ⚠️ 

This moves most of the Bootstrap styles into Core. The styles are based on Bootstrap `3.3.6`. It probably will be the last Bootstrap version that supports Less.

Refs: #6351, #8237 
### Moved + merged into Core
- [x] Tooltips
- [x] Buttons + Button Groups
- [x] Lists
- [x] Code
- [x] Nav
- [x] Scaffolding
- [x] Utilities
- [x] Alerts
- [x] Tables
- [x] Forms
- [x] Type
- [x] Normalize
- [x] Clean up some un-used styles. Like IE hacks etc.
### Removed
- 🔥  grid
- 🔥  input-groups
- 🔥  labels
- 🔥  thumbnails
- 🔥  close
## Risks

Since some styles got removed, there is a chance that something might look unstyled or off. Packages bundled with Atom should be fine, but it's hard to predict if community packages rely on any of the removed styles.

/cc @atom/design @atom/feedback 
",890,True,en,0
11823,1,1,0,Externals,ruthgrace,2016-05-23 21:46:52,1,1,1,0,"… available
",14,True,fr,0
11781,1,2,0,Internals,simurai,2016-05-18 01:35:17,1,0,1,0,"⚠️  Don't merge. ⚠️ 

Usually CI fails when I try to make a PR. Not sure why. So this is just to test it again, by only adding an extra line.
",150,True,en,0
11718,1,0,0,Externals,lope,2016-05-09 07:30:53,0,0,0,0,"This should not need explanation, but incase you're wondering or want to discuss...

https://github.com/atom/atom/issues/11717

It makes no sense to have 'ctrl-x': core:cut AND 'shift-DELETE': 'core:cut'.
There is no button bound to 'editor:delete-line' which is an extremely commonly needed action in programming.
core:cut is a very poor replacement for delete-line, because it overwrites the clipboard which may have something useful in it, with something that's useless and the user is trying to discard.

Thus 'shift-delete': 'editor:delete-line' should be the default keybinding in my opinion.
",599,True,en,0
11704,1,0,0,Externals,esubocz,2016-05-06 03:43:00,147,81366,675,0,,0,False,en,0
11695,1,1,0,Externals,50Wliu,2016-05-05 02:20:00,1,1,1,0,"autocomplete-css specs are testing scopes that changed with the bump to 0.50.0.  Will merge once I fix those specs and the build goes :green_heart:.
",149,True,en,0
11649,2,1,0,Internals,as-cii,2016-04-29 15:05:27,0,3,1,0,"This pull-request is a test to try out the recently-enabled caching feature in Travis CI.
",90,True,en,0
11640,7,0,10,Internals,joshaber,2016-04-28 15:19:34,19,15,4,0,"Part of https://github.com/atom/atom/issues/10979.

Remove `TextEditor`s dependency on the global workspace.
",109,True,en,0
11631,1,1,0,Externals,50Wliu,2016-04-27 20:58:41,1,1,1,0,"The update to 0.3.1 to 0.3.2 contains two changes:
- Fixes an issue where we were using an outdated version of `prettyjson` that wanted a Node version lower than or equal to 0.11.0, and so would print a warning during every `script/build`
- Fixes an issue where using a proxy would fail to download the Github release ~~(should fix #11525)~~
",342,False,en,0
11629,1,1,0,Internals,joshaber,2016-04-27 17:14:30,1,1,1,0,"This reverts commit 3b204d404f4cb6216bedc0afa9c4035f8245e4a8.

It seems to be causing build failures on Travis and our internal CI.
",132,True,en,0
11613,6,1,0,Internals,joshaber,2016-04-26 16:56:50,26,27,4,0,"_:warning: Dependent on https://github.com/atom/atom/pull/11604 :warning:_

This is step 4 as laid out by @nathansobo in https://github.com/atom/atom/issues/10979.

Remove `TextEditor`s dependency on `Project`.
",211,True,en,0
11550,1,2,0,Externals,BrainCrumbz,2016-04-20 22:00:11,0,0,0,0,"Aim: to be able to invoke only linting from command line, as opposed to the whole (long) build process. With this, one can call `npm run lint` from project root directory.
",172,True,en,0
11539,1,6,0,Externals,rahatarmanahmed,2016-04-20 09:40:32,4,0,1,0,"In cases where the last line of a file is very long and the user clicks below that line to seek to the end of the last line, it can take a very long time due to calculating the position of every single column. See #10769 for a test case.

This commit checks the special case of clicking below the buffer and returns the position without going into the whole calculation loop. I'm not super familiar with how the internals of Atom work, and I assumed going through all this calculation to find the very last cursor position was needed due to surrogate pairs or something. But it seems that's not the case as the last column position can be found by just summing the row's textNode lengths, so short circuiting that logic brings a perf win.

This stops freezing for clicking below long lines, but doesn't solve the whole perf problem with seeking long lines. If you were to scroll to the end of a long line and click somewhere close to the end, it will still hang. Perhaps you could calculate the position backwards if the click position is in the latter half of the long line? Either way, that's a discussion for another issue/PR.

As far as tests go, I'm not really sure how you run the line-yardstick specs? Running `script/test` had a lot of failures on master for other specs. I don't think any new specs for line-yardstick is required since it already covers testing clicking below the buffer.

Resolves #10769
",1415,True,en,0
11537,4,4,0,Internals,BinaryMuse,2016-04-20 02:06:49,164,0,2,0,"This PR implements four new methods on `Project` to create files, create directories, and watch for the creation of both:
- `Project::createFile(path)`
- `Project::createDirectory(path)`
- `Project::onDidCreateFile(callback)`
- `Project::onDidCreateDirectory(callback)`

Currently packages (like `tree-view`) manually call out to the filesystem APIs to create files, and other packages aren't notified of such changes. This leads to bugs like https://github.com/atom/fuzzy-finder/issues/175. By centralizing file and directory creation and adding notification hooks, packages can be notified any time a `Project`'s file structure changes.

/cc @nathansobo @atom/core 
",668,False,en,0
11401,1,9,0,Externals,SEAPUNK,2016-04-08 00:11:08,0,0,0,0,"This should add support for 32-bit Linux systems (nodegit 0.12.2 now has prebuilt binaries for it)

(I don't have a 32-bit Linux system with me right now to test this, unfortunately, but I know that the 32-bit binary exists, as I was able to manually download it and make sure it was a 32-bit binary)

Related: #10819
",318,True,en,0
11354,1,0,0,Externals,chriscasola,2016-04-03 00:50:27,11,1,2,0,"A paragraph should be able to start with a line containing only spaces.
This was the behavior prior to fe5b1b70e8b0b85a3d7fa2a06fee625aca3e70ca

This change in behavior is causing a unit test to fail in the atom/vim-mode project.
",230,False,en,0
11337,3,3,0,Externals,joefitzgerald,2016-04-01 03:21:34,29,1,3,0,"This PR more robustly handles the environment in atom-window and the browser window. It:
- Allows an environment to persist when Atom is completely exited and then re-launched, by serializing the environment and restoring it along with the window (""Should process.env be serialized and reused when re-opening an existing project?"" from #4126)
- Allows multiple invocations of `FOO=blah atom .` and `FOO=bleh atom .` to result in an updated environment for an existing window (""Should process.env be updated if atom is invoked from the shell for the same directory multiple times?"" from #4126)
- Extends #11054
- Partially fixes  #4126

**Note:** This fix is recommended for cherry picking into the beta channel once merged, as it fixes issues present in the 1.7.x beta.

/cc @lee-dohm 
",786,False,en,0
11326,2,6,0,Internals,as-cii,2016-03-31 10:23:51,4,1,1,0,"Fixes #8850.

There seems to be an issue with how Chromium handles the input data for the `setZoomLevelLimits` API: I suspect there's some kind of guard clause that ignores that function call whenever the `min` and the `max` level limits are the same.

As a stopgap measure, I have changed the max limit to be slightly larger than the minimum so that the configuration gets enforced by Chromium without actually allowing the user to zoom.

/cc: @zcbenz for :eyes: on the electron side.
/cc: @atom/core 
",503,True,en,0
11310,1,3,0,Externals,coliff,2016-03-30 08:13:53,1,1,1,0,"https link to nodejs.org (saves a HTTP redirect)
",49,True,en,0
11297,3,1,0,Internals,nathansobo,2016-03-28 22:54:16,42,16,3,0,"I'm opening this PR so it will build on AppVeyor. Pay no attention, unless, of course, you're interested.
",106,True,en,0
11262,1,11,0,Externals,iivvoo,2016-03-24 16:08:49,2,1,1,0,"I'm not sure if this is the correct solution and if it has any side effects. I suspect that the mouse button 2 action on linux can be detected as a mini-drag, causing onMouseUp to be invoked twice. 

Issue: https://github.com/atom/atom/issues/8648#issuecomment-200905442
",271,True,en,0
11187,11,3,0,Internals,joshaber,2016-03-17 17:41:47,14,2,1,0,"Fixes #8068.

So this is an interesting one.

We want to ensure the cursor is visible after we show a panel. The tricky bit is that we have to do this _after_ the text editor’s been laid out to include the new panel.

@atom/core I’d love to get some thoughts on how we can accomplish this in a way that doesn't make me sad inside.
",335,True,en,0
11161,1,1,0,Externals,leobasilio,2016-03-14 16:34:42,0,0,0,0,"As reported on issue #10623, this config isn't effective or at least doesn't work as it sounds it should. This is due to the state persistence feature, which is unaware of this setting, restoring the editor to its last state on every startup. I agree with @ExClouds (the guy who opened the issue), when he says

> i expect the editor to open blank.. No open tabs, no open projects..

My strategy was to prevent state saving/loading when the setting is on. This is my first contribution to atom and I'm not that familiar with the code. I did what I thought would be the least intrusive changes.
",594,True,en,0
11144,1,6,0,Externals,drewmnoel,2016-03-12 23:10:16,1,1,1,0,"Update electron to the latest upstream. Supersedes PR #10983.
",62,True,en,0
11097,1,2,0,Externals,andlrc,2016-03-08 12:20:13,0,0,0,0,"Node cannot figure out to resolve atom.js while running though cygwin:

```
$ atom --wait .
module.js:340
    throw err;
          ^
Error: Cannot find module 'C:\cygdrive\c...'
```

But if we change current working directory to `$directory` then node will be able to resolve atom.js
",284,True,en,0
11096,1,1,0,Externals,alex-teren,2016-03-08 12:05:05,4,4,1,0,,0,False,en,0
11085,6,5,0,Externals,colelawrence,2016-03-07 04:42:18,0,0,0,0,"This is a very common feature for most IDEs, I've used the same identifier as CodeMirror's option in this case `showCursorWhenSelecting`.

This is a very small fix for something that cannot be addressed with a plugin AFAIK, thank you.

![image](https://cloud.githubusercontent.com/assets/2925395/13560995/ad524bf2-e3ec-11e5-80b8-4ad86564c48a.png)
",347,True,en,0
11084,33,0,0,Externals,a780201,2016-03-06 19:59:55,424,246,17,0,,0,False,en,0
11083,1,0,0,Externals,a780201,2016-03-06 19:03:26,1,1,1,0,"Fixes #2513

I'm not entirely sure why, but for some reason we're getting into an
feedback cycle when the scrollLeft position changes in certain cases. In
theory, this shouldn't happen because reassigning the same value
shouldn't emit a change event. But since we're about to end-of-life the
jQuery editor, I'd like to try fixing it this way for now.
",351,True,en,0
11070,2,8,0,Externals,dirk-thomas,2016-03-05 06:47:54,0,0,0,0,"Follow up of #9948. Storing the list of disabled package names in a deterministic order.
",89,True,en,0
11068,1,1,0,Externals,RodrigoEspinosa,2016-03-05 00:29:26,377,377,3,0,"According to the [Atom's CoffeeScript Styleguide](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#coffeescript-styleguide):

> Avoid spaces inside the curly-braces of hash literals.
",191,True,en,0
11041,1,2,0,Internals,lee-dohm,2016-03-03 03:25:55,1,1,1,0,"According to @zcbenz, this will prevent crashes on Linux.
",58,True,en,0
11039,7,3,0,Internals,simurai,2016-03-03 01:58:58,80,0,2,0,"This adds the checkbox styles from the [settings-view](https://github.com/atom/settings-view/blob/master/styles/settings-view.less#L113-L179) to core. Some packages might wanna [use them](https://github.com/atom/settings-view/issues/740) too. Also could be used for the [About](https://github.com/atom/about/pull/12) package.

![screen shot 2016-03-03 at 10 40 20 am](https://cloud.githubusercontent.com/assets/378023/13481868/5cb48416-e12c-11e5-9d6c-bf6a4f225eb0.png)
## Questions
1. **Selector**? Currently uses `.checkbox[type=""checkbox""]`, which means you need to use an `<input type=""checkbox"" class=""checkbox"">` to get the styling. Alternatives:
   1. `input[type=""checkbox""]`: Then the class is not needed, but it would make it harder to use a custom checkbox. One day we might wanna add a ""toggle switch"" that also uses `<input type=""checkbox"">`.
   2. `.checkbox`: Some packages might already use that name in other ways (e.g. settings-view uses it as the wrapper for a checkbox). So a little more risky.
2. **Color**? Currently uses `@background-color-success`. Which is green in most themes. Alternative:
   1. Use `@background-color-info` which is blue in most themes. Would follow OS X default convention, but feel a bit uncanny if you have it set to OS X's grey theme.
## Todo
- [x] Add checkbox styles
- [x] Add `indeterminate` state
## Todo after merge
- Use in `settings-view`
- Use in `about`
",1411,True,en,0
11032,2,1,0,Externals,jrkoenig,2016-03-02 19:50:12,27,10,3,0,"Saves and restores application state using the stateKey rather than initialPaths themselves. This avoids having Atom ""open"" these initialPaths, instead using the deserialized project to restore these paths.

Replaces #10628, see #11023

spec/integration/startup-spec.coffee should have a spec for this, but I couldn't get the tests to run.
",340,True,en,0
11026,3,1,0,Externals,zakrid,2016-03-02 02:47:25,0,0,0,0,,0,False,en,0
11024,1,4,0,Externals,zakrid,2016-03-02 02:23:13,0,0,0,0,,0,False,en,0
11023,3,5,0,Internals,nathansobo,2016-03-02 01:23:45,27,16,5,0,"Closes #10628 

To test this:
- Open Atom with 2 directories.
- Delete one of the directories and reload Atom.
- Atom should be opened with only one directory.
",160,True,en,0
10997,1,1,0,Externals,oclbdk,2016-02-28 17:12:45,0,0,0,0,"https://github.com/atom/atom/issues/10996
",42,True,en,0
10983,3,26,0,Externals,drewmnoel,2016-02-26 17:33:38,3,3,3,0,"Pulls in a fix for freetype2 on some systems
",45,True,en,0
10951,1,5,0,Externals,tomByrer,2016-02-24 15:50:36,1,1,1,0,"In stable, click on a file in the tree, Atom opens a new file tab.
In beta, by default, clicking on the file opens over the active tab sometimes.
Switching `allowPendingPaneItems: default: false` returns behavior to expected from v1.5.x.
ref #10762

Not sure if [these lines](https://github.com/atom/atom/blob/ae26e6c8ca284bb2858c65074c8d1d64564d1593/src/workspace.coffee#L417-L418) need to be changed.
",403,False,en,0
10950,2,3,0,Externals,joefitzgerald,2016-02-24 15:18:43,6,7,2,0,"This PR:
- [x] Fixes a syntax error regarding `ELSE`
- [x] Fixes an issue associated with a space being a component of the path to atom.cmd or atom.exe
- [ ] Ensures that --wait exits correctly when used
## 
- Fixes #10934 

/cc @raelyard 
",240,False,en,0
10891,3,6,1,Internals,maxbrunsfeld,2016-02-18 19:17:28,115,70,7,0,,0,False,en,0
10881,1,9,0,Externals,wiggzz,2016-02-18 07:55:12,77,1,4,0,"Works with https://github.com/atom/first-mate/pull/67 to prevent hangs on opening files with extremely long lines. Should fix many of the issues in https://github.com/atom/atom/issues/979.
",189,True,en,0
10856,2,12,0,Externals,dirk-thomas,2016-02-17 07:25:32,0,0,0,0,"This PR is trying to address #9879.

~~The first commit simply changes the semantic of `project.resolvePath()` to return a non-realpath. Since this might break the callers expectation I will try to keep the semantic of existing API on-top as outlined in https://github.com/atom/atom/issues/9879#issuecomment-162253183 as necessary.~~ See newer comment for current behavior.
",374,True,en,0
10823,5,1,0,Externals,philharpoon,2016-02-15 11:11:36,33,90,5,0,,0,False,en,0
10817,1,1,0,Externals,arnav-gudibande,2016-02-14 17:31:09,0,0,0,0,"Changed the atom/link to Atom Documentation
",44,True,en,0
10680,2,7,0,Externals,Aakash1312,2016-02-04 10:24:22,15,0,1,0,"Fixes #10603 

Now command palette is automatically resized when global window size is very small. 
",100,True,en,0
10676,1,1,0,Externals,thedaniel,2016-02-04 02:40:23,1,1,1,0,,0,False,en,0
10652,1,1,0,Internals,lee-dohm,2016-02-02 05:53:44,35,13,1,0,,0,False,en,0
10628,1,1,0,Externals,jrkoenig,2016-01-31 07:51:50,11,18,2,0,"If project folders no longer exist or are not mounted, then Atom would open them as buffers, which are empty because the corresponding file did not exist (and if it did, it would be a directory, which would make little sense). This threads the right state through the startup sequence so that `initialPaths`, which actually are project roots, are restored correctly.
",367,True,en,0
10610,3,1,0,Internals,as-cii,2016-01-28 12:04:45,42,1,2,0,"Before this PR, we could catch edits to the buffer (or the editor) only on a per-change basis (e.g. `onDidChange` or `onDidInsertText`), thus preventing packages to schedule work at the beginning or at the end of a multi-cursor change.

This PR adds `onWillMutateSelectedText` and `onDidMutateSelectedText` on `TextEditor`, which will respectively trigger at the beginning and at the end of a `mutateSelectedText` operation.

@nathansobo @maxbrunsfeld @kuychaco: although similar, these new APIs serve a different purpose than the `TextBuffer.prototype.setTextsInBufferRanges` API (and the possible associated events) we have talked about, as they're meant to catch only user-triggered changes to the editor and they're much higher level, as they won't provide information about the changes (adding such information would indeed be tricky, as selections could do an arbitrary number of changes to the underlying buffer, and it would require a much more invasive refactoring).

On the other hand, adding these is super cheap and provides an entry point for coarse-grained batching operations. What do you think? I am planning to use them in autocomplete-plus (a PR is on the way to that repo which will show how it'd work).
",1223,True,en,0
10570,2,2,1,Externals,wvanlint,2016-01-25 08:21:18,0,0,0,0,"Hi,

I've been looking into making working with folds a bit smoother to fix #8023.

The functionality in this PR:
- Allows the end of the fold line on the screen to represent the end of the fold in the buffer. This makes us able to delete up until the boundaries of folds.
- More conservative fold expansion: only expand a fold when necessary.
- More conservative deletion: removed some cases where the entire fold would be deleted.

Let me know what you think!
I'm pretty new to CoffeeScript so any comments are welcome!

A demo:
![demo](https://cloud.githubusercontent.com/assets/2732330/12545551/30d26450-c2f8-11e5-802c-ae81477985bd.gif)
",641,True,en,0
10526,2,1,0,Externals,jrkoenig,2016-01-20 23:51:21,22,4,2,0,"Open dialog now defaults to the same directory as the open file, or the user's home directory if there is no file active (such as when viewing the Settings page). This is the convention for gedit and other text editors on Linux. Because of the render/browser process split, this requires async messages to get the path over. The alternative is passing this data when calling application:open, but this requires more extensive changes.

Note: this change is only for linux but it could easily be expanded to other platforms assuming the dialog module works the same way.

Fixes at least #6762
",592,True,en,0
10484,2,3,0,Externals,bolinfest,2016-01-19 00:13:59,17,7,2,0,"Fixes #10483.
",14,True,en,0
10451,1,1,0,Externals,afandria,2016-01-15 23:40:37,3,3,1,0,"This is an attempt to use the active pane and active item to determine the default path when opening a file (on all platforms).

Note: Not tested yet. See #6762 for the discussion around this bug/feature.
",205,True,en,0
10424,1,2,0,Externals,viatsko,2016-01-15 00:36:23,0,0,0,0,"Let's say, we have default git provider and packages for hg and git.
First of all, setPaths is being called earlier then consumer, that
means that default git provider will already be there.
Second, we are checking for @repositories.length when adding new
provider, but if default git provider is already there, we're in
trouble, because another git provider simply won't be initialized.
Third, if we'll leave that condition there and fix something else,
again, after consuming hg, we'll have setPaths called with default
git adapter :( This kinda complicates stuff on first load / plugin
enable-disable on fly, but I don't feel that this is a big issue.
",655,False,en,0
10390,1,4,0,Externals,EarthSchlange,2016-01-12 07:21:28,12,9,1,0,"I added a few additions for Linux based on how to install git.
",63,True,en,0
10367,4,4,2,Externals,chfritz,2016-01-11 03:54:37,56,11,1,0,"Previously the logic lacked handling of multiple matches of the
increase/decrease regexs, so things like the following javascript
would not be handled correctly (the last line would be indented).

``` js
if (test) {
  foo({a:1
  })};
var t = ""this should be at indentation 0"";
```

Fixed that.

Also revisited the logic regarding decreaseIndent and
decreaseNextIndent. It did not seem very logical that decreaseIndent
did _not_ correspond to increaseIndent: decreaseIndent regarded the
current line whereas increaseIndent regarded the next line (just like
decreaseNextIndent). For that reason I renamed decreaseIndent to
decreaseThisIndent and decreaseNextIndent to decreaseIndent. This way
we also avoid a whole lot of issues related to the concept of
decreaseNextIndent, because most of the language packages I looked at
have not yet adopted it but the semantics of decreaseIndent had
changed. So now the semantics of decreaseIndent is back to what it was
and decreaseThisIndent is the new concept.

Also now using the tokenized line to determine whether a in-/decrease
pattern appears within a quoted string (and ignoring it in that case),
rather than requiring regexes for checking whether or not the
occurrence is within a quoted string or not -- the examples I saw for
that were wrong, too (e.g., things like `/} [^""] /` are non-sense,
because things like `} var x = ""hey""` are perfectly fine). One really
needs to reason about balanced quotation to get it right, and the
tokenizer already does that for us, so let's use it rather than
reinventing the wheel. The decrease/increase regexes can now be much
simpler in the language packages.
",1645,False,en,0
10364,5,1,0,Externals,svanharmelen,2016-01-10 22:12:56,62,43,6,0,"This version fixes #10272
",26,True,en,0
10363,1,2,0,Externals,svanharmelen,2016-01-10 21:36:57,1,1,1,0,"This version fixes #10272
",26,True,en,0
10355,4,0,0,Externals,ericdai,2016-01-10 09:18:08,61,42,6,0,"who can port atom on android platform ?
",40,True,en,0
10333,1,1,0,Externals,50Wliu,2016-01-08 03:05:44,1,1,1,0,"This PR will fix #9584 and #9454 on 1.3.3.
",43,True,en,0
10292,1,1,0,Internals,as-cii,2016-01-05 18:45:58,40,5,2,0,"Superseded #10282.
Fixes #10047. 
Fixes #10015. 

/cc: @nathansobo 
",68,False,en,0
10282,1,2,0,Internals,as-cii,2016-01-05 11:50:46,40,5,2,0,"Fixes #10047.
Fixes #10015.

Although I am not able to reproduce the problem reported in the above issues, with this PR we're introducing a more flexible way of loading the blob store, which now doesn't crash Atom if any of the files is corrupted.

This seems like a reasonable default to have and, in the meantime, we can keep an eye on what triggers this particular edge case. I don't think it's a race condition caused by Atom, as we're already using a lock file to prevent such scenarios, but I could be overlooking something here.

/cc: @maxbrunsfeld @nathansobo @atom/feedback 
",584,False,en,0
10265,4,4,6,Externals,wampiedriessen,2016-01-03 23:56:06,0,0,0,0,"This needs some reviewing, for I am just a regular arch user. Not a guru of sorts :)
",85,True,en,0
10208,8,60,0,Externals,paulcbetts,2015-12-29 02:16:17,3,2,3,0,"This PR is mostly to get folx excited, because my CSS-fu is far too poor to make it actually work - on OS X, remove the Title Bar to fit in with other Yosemite apps - based on @simurai's design at https://discuss.atom.io/t/hide-system-window-title-bar/14578/8:

![](https://slack-imgs.com/?url=http%3A%2F%2Fcl.ly%2F430s3e1C3Y0o%2Fpanes.less__Userspaulcodeatomatom_2015-12-28_18-03-00.png&width=400&height=236)

In safe mode:

![](https://slack-imgs.com/?url=http%3A%2F%2Fcl.ly%2F2l2J3r3e3Q3H%2Fpanes.less__Userspaulcodeatomatom_2015-12-28_18-01-46.png&width=400&height=244)
## TODO:
- [x] Set title-bar-style on the window
- [x] Ensure window is draggable in the parts that it should be (window background, top-left corner), but buttons are still clickable
- [x] Solve weird race condition in CSS where padding doesn't apply when tree view is collapsed / recreated
- [x] Solve how to make tabs indented to the right a bit when left panes are collapsed
- [ ] Figure out a way to make tabs draggable
- [ ] Special case OS X 10.7/10.8, where this API isn't supported

Closes https://github.com/atom/atom/issues/4599
",1113,True,en,0
10200,250,0,0,Externals,WelcometomyblogJoebravo,2015-12-28 11:25:52,2004,1043,93,0,"Regulating Code
",16,True,en,1
10171,18,8,8,Internals,kuychaco,2015-12-23 22:08:03,150,9,4,0,"Work in progress, just starting a conversation here. 

See corresponding pull requests for tree-view and tabs packages:
- [tree-view #681](https://github.com/atom/tree-view/pull/681)
- [tabs #244](https://github.com/atom/tabs/pull/244)

Still need to write more tests and clean out tabs package to remove unnecessary code. 

Also, considering refactoring to move pending item logic to the Text Editor. This seems to be the better approach and can be found here #10178.

![ku-pending-pane-items](https://cloud.githubusercontent.com/assets/7910250/11986220/f75f2bac-a981-11e5-843e-5ea03253764a.gif)
",597,True,en,0
10122,2,1,0,Externals,paradoxxxzero,2015-12-18 17:08:38,61,12,2,0,"Invisible non breaking space breaking code is driving me nuts so this is a really naive implementation of showing non breaking space with show invisible.

![screenshot from 2015-12-18 18-02-01](https://cloud.githubusercontent.com/assets/271144/11902426/05851d1e-a5b2-11e5-909b-dfb6319b1de5.png)

References: #8080 #9483 
",322,True,en,0
10085,8,5,10,Externals,raelyard,2015-12-16 13:45:49,287,5,4,0,"This modifies the registry to include Atom in the context menu for the same file extensions for which it appears in the Open With context menu list in Finder on OS X.
#4893
",173,False,en,0
10078,1,2,0,Externals,bengotow,2015-12-15 20:24:38,12,0,1,0,"(Related: https://github.com/atom/electron/issues/2484)

In Atom 1.3.1, navigator.language is always set to ""English"" on Mac OS X, even if the user is using another language. This is particularly troublesome because English isn't even an appropriate value for that field. (It should be something like `en-US`). This PR is a copy of a change we made to nylas/N1 to fix this issue. It turns out the empty `.lproj` directories inside Electron must be copied for language detection to work in Chromium.
",499,True,en,0
10055,1,2,0,Externals,NKMR6194,2015-12-14 17:34:35,2,0,1,0,"The bug is mixed in that commit : 9e59ab1e45ed4cbb00a6ed0408ce76572d5ab32b

ref:
[atom/src/browser/auto-update-manager.coffee](https://github.com/atom/atom/blob/c90aabed923c49d2b0d5e9d601d806de41b98c6f/src/browser/auto-update-manager.coffee#L65)
f989ed65e1ffd684b338867d964c5de62e83eab3
atom/release-notes#39
#9682
",315,True,en,0
10035,1,8,0,Externals,abe33,2015-12-12 18:11:56,17,0,2,0,"This is an attempt to fix the issues after a package update by clearing the `require.cache` object of all the paths related to the package.
",140,True,en,0
10034,3,11,2,Externals,Areadrill,2015-12-12 16:49:27,75,15,3,0,"When using the _pane:close_ command, if there're more than one unsaved items open in the pane, the save prompt will now display two additional buttons as seen in the GIF below:

![newbehavior](https://cloud.githubusercontent.com/assets/9729792/11762937/65e86b6a-a0ef-11e5-8174-53c158f8bff6.gif)

This also fixes an issue where using pane:close when only one pane exists makes atom prompt to save an unsaved item twice, as you can see below. The issue was verified on Windows, Mac and Linux.

<img src=""https://i.gyazo.com/0694bf20634c29959f4abcd2806c0f1a.gif"" >

 This was due to @promptToSaveItem being called twice in different methods in the case of there only being one pane. 

Also, thank you to @joaomnb for contributing to this new functionality. 
",755,True,en,0
10029,1,1,0,Externals,puls,2015-12-11 21:12:11,16,7,3,0,"I just tried to check out and build the repository, and apparently I'm the only weirdo who has tried to do this in a folder with spaces or other special characters in its name in a year and a half?
",198,True,en,0
10010,1,2,0,Externals,CentricStorm,2015-12-11 01:52:04,0,0,0,0,"Visible screen row calculations should use getScreenLineCount so that correct values are found when text is wrapped or folded.
",127,True,en,0
9926,3,0,0,Externals,g33z,2015-12-03 07:31:53,45,5,6,0,,0,False,en,0
9910,1,3,0,Externals,thedaniel,2015-12-02 14:20:45,11,1,2,0,"fixes #9899 - Adding a relative path seems to do ambiguous and incorrect
things. On my system, it attempts to add `/`, on the linked issue it
seems relative to something else. This change rejects relative paths. 

We could try to resolve paths, but relative to what? If there's only one path in the project, we could try relative to that, but if there are multiple, it becomes totally ambiguous.

cc @atom/feedback 
",416,False,en,0
9853,1,2,0,Externals,gzzhanghao,2015-11-28 08:12:33,3,0,1,0,"This fix the issue #9806 [Small issue with scroll position]. Since the scrollTop is always 0 when the element is `display: none`, we need to update the visibility of the element before we update the scrollTop.
",210,True,en,0
9843,1,2,0,Externals,g23-aw,2015-11-27 01:17:30,213,0,1,0,"Remove 'null' from alert messages if the item that is being printed is 'null'
This is the original message when the element is 'null':

![messageoriginal](https://cloud.githubusercontent.com/assets/5561632/11432410/c1970c8a-9462-11e5-90c9-b6537980c7ab.png)
This is the message now:

![message](https://cloud.githubusercontent.com/assets/5561632/11432348/3744f2d2-9461-11e5-97b0-7345039dde2d.png)
",396,False,en,0
9763,4,4,0,Externals,dranzerashi,2015-11-23 16:33:23,28,1,2,0,"Issue #7662
",12,True,en,0
9746,1,5,0,Externals,fscherwi,2015-11-22 13:56:08,32,32,1,0,"For a better Overview!
",23,True,en,0
9723,1,9,0,Externals,DouweM,2015-11-20 20:37:00,20,0,1,0,"![drag-and-drop](https://cloud.githubusercontent.com/assets/159434/11311198/8d3ed712-8fce-11e5-8487-019a42feedfb.gif)

The GIF is a little misleading, since it appears that the path is inserted at the location where the drag item is dropped. In reality, it's always inserted at the cursor location, where no cursor is visible while the text editor is out of focus.

I'll gladly add tests, but I would like some feedback on the functionality first.
",448,True,en,0
9721,1,1,0,Externals,g23-aw,2015-11-20 19:07:52,2,1,1,0,"Implement fix for issue #9147. Valid tab lengths are any number between 1 and 100.

![tablength](https://cloud.githubusercontent.com/assets/5561632/11309131/e5904ab6-8f76-11e5-8fc9-7ca744aa7a98.png)
",199,True,en,0
9689,3,1,0,Externals,philschatz,2015-11-18 23:45:03,0,0,0,0,"This checks if the code changed by building a glob of all the minified code (& JSON files) in this repo and compares it to a generated glob of the previous commit.

Comments, local variable renames, and lint fixes should not start an entire build. But changing package versions should.

Hopefully Travis won't :sweat: over this PR too much :smile: 

**Side note:** I was not sure where to install `uglify` since it seems `build/package.json` is too late.

You can test it out locally:
1. check out this branch
2. make a code change or add a comment and commit
3. run `script/cibuild-when-code-changed`
4. See if it says ""Just a documentation change. No need to run tests!""

If this approach seems promising I can get the rest of the ""kinks"" out:
- [ ] switch to using `node` instead of shell scripts
- [x] include JSON/CSON/scripts/spec tests in the glob
- [x] build babel files
- [ ] generate a checksum instead of using `diff`
# Console Output

```
$ script/cibuild-when-code-changed
DID_CODE_CHANGE: CASE 1: This is the continuous-integration/travis-ci/pr case
DID_CODE_CHANGE: Building slug for this commit
DID_CODE_CHANGE: END_COMMIT=c1002e587ead0c237feb75963c0427c765c3a1e7
DID_CODE_CHANGE: Building slug for the previous commit (to compare against)
DID_CODE_CHANGE: START_COMMIT=cad74060855aa37c5de528d6f03761ac74170103
DID_CODE_CHANGE: Comparing slugs
DID_CODE_CHANGE: Just a documentation change. No need to run tests
The command ""script/cibuild-when-code-changed"" exited with 0.
```
",1493,True,en,0
9688,1,3,0,Internals,joshaber,2015-11-18 23:42:41,22,0,2,0,"Give github-cloud.s3.amazonaws.com a pass. Fixes #9658.

We’ll use an exception for now until we can get an updated certificate in place.

After this lands I’ll cherry-pick it to `beta`.
",191,True,en,0
9592,1,1,0,Externals,fscherwi,2015-11-14 16:49:03,1,1,1,0,"Upgrade semver to newest version!

It only has small changes and no significant API changes!

But it has an new license, from BSD to ISC!

See: [changes](https://github.com/npm/node-semver/compare/v4.3.3...v5.0.3)
",214,True,en,0
9483,1,0,2,Externals,cakecatz,2015-11-07 14:41:14,2,1,1,0,"Fixes #8080 

<img width=""448"" alt=""screen_shot_2015-11-07_at_11_38_18_pm"" src=""https://cloud.githubusercontent.com/assets/6136383/11015639/ed9e9974-85a8-11e5-80cd-2f69cb75aef0.png"">
",183,True,en,0
9469,11,5,1,Externals,thedaniel,2015-11-06 17:16:52,394,0,4,0,"After implementing almost everything else in #9213, I ran into some
sporadic spec failures that I was having trouble reasoning about. This
is an attempt to start over with the class _beginning_ with the
functionality that went flaky, to better understand how it is tested
and whether it was being broken by an interaction with something else
in the new implementation, broken intrinsically, or had buggy tests.

This may supersede the other PR, or it may not. Let’s see what we learn.

Also, the spec is written in es6 and not coffee in this branch, and I do plan to take Nathan’s advice and update it to use async/await rather than the jasmine queue.

cc @joshaber
",670,False,en,0
9462,4,6,0,Internals,joshaber,2015-11-05 21:44:13,2,2,1,0,"Fixes #9339.

A diff of the libgit2 changes: https://github.com/libgit2/libgit2/compare/21e7015ca3425e396c2b7cc03ac67e297a646c91...db1edf91e9ba9e82e6534c445008703766b5a6da
",172,True,en,0
9461,106,1,0,Internals,joshaber,2015-11-05 21:34:25,1027,428,28,0,"Fixes #9339.

A diff of the libgit2 changes: https://github.com/libgit2/libgit2/compare/21e7015ca3425e396c2b7cc03ac67e297a646c91...db1edf91e9ba9e82e6534c445008703766b5a6da
",172,True,en,1
9460,2,4,0,Internals,joshaber,2015-11-05 20:37:46,1,1,1,0,"Fixes #9339.
",13,True,en,0
9449,13,12,0,Externals,Michael-Thibault,2015-11-05 04:14:34,0,0,0,0,"I've created file icons in the ICNS format for use in on OS X, as well as updating the atom-Info.plist file's icon paths. These icons cover every file type that was listed in the Info.plist.

Edit: Here's a preview of some of the icons, as they appear full-size:

![Full Size Icons](http://i.imgur.com/sD03Hkj.png)

Here's how they appear in a list or in column view:

![32x32 and smaller](http://i.imgur.com/ycfCPBy.png)

Note that for other platforms, it is possible to easily convert these from ICNS to ICO or other formats by extracting the PNGs using [IConvert Icons](https://iconverticons.com/online/#).

For anyone wondering, [here's the PSD on Dropbox](https://www.dropbox.com/s/z521d6bby4izrgo/Fortran.psd?dl=0) for the Fortran 1024x1024 image. It can easily be used to add other file extensions/formats in future.

One other note: I followed the TextMate 2 icons' general style, preferring all-caps when possible, but switching to camelcase whenever it's a part of the language's name (e.g. BibTeX or OCaml).
",1019,True,en,0
9443,10,1,6,Externals,raelyard,2015-11-04 23:48:49,41,20,3,0,"Similar to portable mode for Windows and Linux, but the relative path for the portable .atom home directory has a deeper nesting.
",130,True,en,0
9425,1,3,0,Externals,Calvein,2015-11-04 02:29:51,0,0,0,0,,0,False,en,0
9391,1,0,0,Externals,michael-k,2015-11-02 08:37:16,1,1,1,0,"The previous command checked out a alpha or beta release, as this is the latest release nearly all the time.  With this commit checkouts are limited to tags containing neither `alpha` nor `beta`.
",196,True,en,0
9380,107,0,0,Externals,DiogoVazC,2015-11-01 15:02:05,285,1,13,0,"Added Diagram Activity to Resources and to the report.
",55,True,en,0
9367,67,0,0,Externals,jasonjyu,2015-10-31 01:22:24,317,207,10,0,"Update readme
",14,True,en,0
9366,1,1,0,Externals,RobertoNovelo,2015-10-31 01:06:18,22,0,1,0,,0,False,en,0
9365,1,0,0,Externals,RobertoNovelo,2015-10-31 00:28:26,23,0,1,0,"Suggested to speed up a bug determination process
",50,True,en,0
9362,1,2,0,Externals,ssorallen,2015-10-30 21:04:01,0,0,0,0,"The native `focus` call is the bulk of the time spent in response to
an active item change event. By debouncing the event and always focusing
asynchronously (async is the default for `debounce` callbacks), tab
changing is more responsive because the 'tabs' package typically updates
its UI only after the native `focus` call completes.

For the crazy perf test of pressing and holding next/previous tab
(ctrl-tab on OS X), many unnecessary `focus` calls are avoided because
of debouncing.
",489,False,en,0
9358,1,0,0,Externals,joel-delong,2015-10-30 18:41:54,1,1,1,0,,0,False,en,0
9324,3,0,0,Externals,whyhellobradley,2015-10-28 19:48:31,4,10,3,0,,0,False,en,0
9309,1,7,0,Externals,ssorallen,2015-10-27 18:31:00,0,0,0,0,"Functionality like focusing the newly active text editor lives in the
`Pane` class and needs access to the async `didStop` callback. Move the
functionality into `Pane` and keep the same API for `PaneContainer` by
adding a new subscription similar to its `observeActiveItem`
subscription.

Throttle the async version of `didChangeActiveItem` because debouncing
can lead to a UI that is significantly out-of-date compared with the
state expected by the user. For example, pressing and holding ctrl-tab
(next tab) would keep the event debounced for the duration of the
keypress. Throttling the event ensures most callbacks are still async
but are able to update the UI periodically if events are happening
quickly.
",712,False,en,0
9307,2,0,0,Externals,Level140,2015-10-27 18:24:53,8,3,2,0,,0,False,en,0
9265,35,13,0,Internals,as-cii,2015-10-23 16:55:57,8640,103,40,0,"This is an experimental branch which makes use of the [v8 snapshot feature](http://www.hashseed.net/2015/03/improving-v8s-performance-using.html) to preload some of the files Atom requires on startup.

:warning: Please, note that this is far from being finished and could potentially never be: I aim to constantly update this PR's description with what I find out, along with the performance savings that snapshotting brings us, but we could experience some limitation that will force us to ditch this technique. :warning:
### Why snapshotting?

If we look closely at the startup profile, we will soon notice that most of the time is spent in requiring files. This is somewhat a downside of using an interpreted language: everything from loading files into memory to executing them must happen at runtime.

With snapshotting, however, we're allowed to take a snapshot of the heap and make it available to the V8 context without actually running any code at runtime. Indeed, we can exploit this to load files during our build pipeline (i.e. `script/build`) and simply refer to the already required modules when Atom is executed.

We _think_ this could bring a decent speedup in our startup phase, which on my machine currently takes `1.0s`-`1.2s`.
### How does snapshotting works?

Electron provides a `mksnapshot` utility that allows to take a javascript file and turn it into a blob ready to be loaded in memory. After generating it, loading it is just a matter of copying it inside the Electron.framework directory:

``` bash
$ cp snapshot_blob.bin /Applications/Atom.app/Contents/Frameworks/Electron\ Framework.framework/Resources/snapshot_blob.bin
```

The capabilities that the _snapshot phase_ provides, though, are somewhat limited. Unfortunately, we won't have access to many of the handy facilities that we're allowed to use in a normal Electron application. For example:
1. Node;
2. Functions such as `Object::toString` (or anything else defined in v8 `js_natives`);
3. Native modules;

This means we have to change many (here I should say ""most"") of our files to be arranged in order to overcome the above limitations (e.g. by deferring `require`s of native modules).
### What's currently in this PR

I have managed to load the entire `text-buffer` library and to use it within Atom. I plan to go on with other expensive require paths, such as `src/project` and `src/config`.

I am still a bit unsure on how to proceed exactly, but before automating the generation of `snapshot.js`, I'd prefer to carefully include source files so that I can patch external libraries without actually opening PRs on the other repos. This is because I'd like to understand what are the realistic savings that this technique could allow us before delving into all the other details that concern building, etc.
### What's missing

Here I'll include what this PR would need in order to be :ship:ped. I do not expect to follow any of this point in a particular order, but they will serve as a good TODO list (also in case anyone wants to help out with this).
- [ ] Generate `snapshot.js` automatically. (right now I have manually included the source files)
- [ ] Change all the core source files so that they can be required in the snapshot.
- [ ] Change all the libraries source files so that they can be required in the snapshot.
- [ ] Include benchmarks to demonstrate the potential of snapshotting.
- [ ] Investigate how debugging changes when having functions already loaded in memory. (can we use source maps here somehow?)

Any kind of feedback here would be super appreciated. Thanks! :bow: 

/cc: @nathansobo @maxbrunsfeld @atom/feedback
",3636,True,en,0
9262,1,1,0,Externals,codingbelief,2015-10-23 05:56:29,1,1,1,0,"This PR is to make atom ignores git repository which has .atomignore in the working directory.
Atom will consume 90%+ I/O usage and get sick , when open folders which belong to a huge git repository. Maybe we can have chance to ignore huge git repository.

![image](https://cloud.githubusercontent.com/assets/5790649/10685514/ab882270-798d-11e5-8ef2-6e6b618f9957.png)
",368,False,en,0
9259,61,3,0,Externals,raelyard,2015-10-22 22:39:15,336,136,21,0,"Using load settings in window instead of repeating the logic for determining the location of home
",98,True,en,0
9241,1,0,2,Externals,joefitzgerald,2015-10-21 15:46:17,9,9,5,0,,0,False,en,0
9229,3,1,0,Externals,raelyard,2015-10-20 17:51:20,31,6,3,0,"This is an enhancement to Portable Mode PR #8442 to provide a command line parameter for Atom to automatically set up a Portable Mode directory (a .atom directory as a sibling to the directory containing the Atom executable).

This uses -p and --set-portable
as a straw-man example of what would be the desired parameter.

This copies the .atom home from the default location to the portable location, assuming someone who has been using Atom and wants to go portable would want to take with them what they have already installed/configured.  This may or may not be a good assumption.
",585,True,en,0
9219,23,3,0,Internals,maxbrunsfeld,2015-10-20 00:19:47,2744,2157,14,0,"Refs https://github.com/atom/atom/issues/9208

:warning: WIP :warning:
",71,True,en,0
9214,3,0,0,Externals,RosiersRobin,2015-10-19 15:49:36,115,32,4,0,,0,False,en,0
9206,92,0,0,Externals,ivoadf,2015-10-18 21:13:30,285,0,8,0,,0,False,en,0
9200,73,0,0,Externals,ivoadf,2015-10-18 12:02:45,211,0,8,0,,0,False,en,0
9195,1,1,0,Externals,bolinfest,2015-10-17 19:42:15,7,0,1,0,"I tested this using the new custom testrunner feature introduced in
https://github.com/atom/atom/pull/8968. My testrunner function was defined as follows:

``` js
'use babel';

module.exports = function({testPaths, buildAtomEnvironment, logFile, headless, legacyTestRunner}) {
  global.atom = buildAtomEnvironment();
};
```

Without this change, `buildAtomEnvironment()` threw a bunch of exceptions.
",400,False,en,0
9193,67,0,0,Externals,ivoadf,2015-10-17 17:35:13,179,0,8,0,,0,False,en,0
9183,250,0,0,Externals,ziegfrid,2015-10-16 23:46:49,18912,23220,320,0,,0,False,en,2
9093,2,0,0,Externals,thanhrossi,2015-10-08 23:17:04,171,3,2,0,"Support multi cursor ?
",23,True,en,0
9073,1,4,0,Externals,Aakash1312,2015-10-07 18:20:05,1,1,1,0,"There was a bug in moving lines down. 
The bug can be reproduced in the following steps:
- Make a text file with last line blank
- Select the entire row of third last line
- Try moving down. It won't move

![output](https://cloud.githubusercontent.com/assets/10784031/10346678/f98a38b0-6d4d-11e5-817b-91391134443b.gif)
",319,False,en,0
9070,1,10,15,Externals,billybonks,2015-10-07 14:35:31,0,0,0,0,"Currently if you want to create a new file type eg:
- writes and reads over ssh
- writes and reads to a remote server
- writes and reads via ftp

This functionality can be elegantly achieved by:
-inheriting from File from pathwatcher and over-riding read/write methods and nativeEvent Listeners.
-making a few minor changes to an extended text-buffer.

The only way of providing saveAs functionality is by overriding the `activePane`. or shim `atom.showSaveDialogSync`, both are quite large changes to the atom for such a small requirement.
",541,False,en,0
9058,79,0,0,Externals,bsh314,2015-10-06 10:58:33,1465,1281,71,0,,0,False,en,2
9052,1,4,0,Externals,fscherwi,2015-10-05 18:42:16,10,10,1,0,,0,False,en,0
9042,3,28,4,Externals,jordanbtucker,2015-10-04 10:22:39,39,7,3,0,"A new Core Setting: **Restore Previous  Windows On Start**

Enabled by default, so it's backward compatible.

Fixes #6605
",122,True,en,0
9037,30,0,0,Externals,GDuarteL,2015-10-03 18:39:32,21,0,1,0,,0,False,en,0
9026,1,2,0,Externals,EasyHard,2015-10-02 15:49:24,44,11,2,0,"This commit is addressing issue #6627. By recording interval
timer's next invoking time, the callback of `fakeSetInterval`
now will be invoked multiple by `advanceClock()`
",172,False,en,0
9023,1,1,0,Externals,EasyHard,2015-10-02 08:37:41,70,0,6,0,"This PR tries to address [issue 7345](https://github.com/atom/atom/issues/7345)

This method is intended to replace TextEditor.getLongTitle
and gives a better tab title when there are multiple opened
files have identical file name. It will returns 
`<unique-parent-directory>/.../<filename>`  when opened files
have identical file name. With this PR and updating `atom/tabs`
multiple files with identical name will look like this.

![image](https://cloud.githubusercontent.com/assets/1419012/10242420/44e2fe52-6923-11e5-85af-d96e1f5a6e0d.png)
",543,True,en,0
9011,206,0,0,Externals,pronichenk,2015-09-30 18:10:05,2456,1354,66,0,,0,False,en,0
9002,10,0,0,Externals,GDuarteL,2015-09-30 08:51:57,5,0,1,0,"Removed .txt files and added first .md test file
",49,True,en,0
9001,3,0,0,Externals,ivoadf,2015-09-30 08:35:38,0,0,1,0,"Removing test file
",19,True,en,0
9000,8,0,0,Externals,GDuarteL,2015-09-30 08:32:40,3,0,3,0,"Git learned, deleting ESOF branch
",34,True,en,0
8999,250,1,0,Externals,KSXGitHub,2015-09-30 06:07:35,3941,16768,155,0,"Dear Atom's developers,
Notepad++ editor has a feature called ""Run"" which run system command directly in the editor, I can assign a keystroke to each command, it makes conveniences.
I see no reason why Atom doesn't supports this.
So, please support this.
",255,False,en,0
8992,3,4,0,Externals,boogoobus,2015-09-29 15:28:55,0,0,0,0,"README汉化完成
",19,True,zh,0
8966,7,7,0,Externals,fscherwi,2015-09-27 18:02:42,7,7,1,0,"| package | current | upgraded | status | age |
| :-: | :-: | :-: | :-: | :-: |
| async | 0.2.6 |  | :arrow_left: | 31 months :heavy_exclamation_mark: |
| coffee-script | 1.8.0 |  | :arrow_left: | 13 months |
| color | ^0.7.3 | ^10.0.1 | :arrow_up: | 12 months |
| fstream | 0.1.24 | 1.0.8 | :arrow_up: | 26 months :heavy_exclamation_mark: |
| semver | ^4.3.3 | ^5.0.3 | :arrow_up: | 4 months |
| service-hub | ^0.6.2 | ^0.7.0 | :arrow_up: | 3 months |
| stacktrace-parser | 0.1.1 | 1.1.3 | :arrow_up: | 20 months :heavy_exclamation_mark: |
| temp | 0.8.1 | 0.8.3 | :arrow_up: | 14 months |
| typescript-simple | 1.0.0 | 2.0.0 | :arrow_up: | 7 months |
",653,False,en,0
8929,3,1,1,Externals,darwin,2015-09-24 18:14:03,18,6,2,0,"Additionally I have also:
- added logging when detected invalid dimensions
- changed logic for determining width and height after recovery from invalid dimensions

Original implementation was not symmetric. And I believe Math.min was a mistake. Original intent probably was to use Math.max instead.
It didn't guard against case of generating invalid width if screen.getPrimaryDisplay().workAreaSize returned 0 or some negative value.
And it was clamping width for displays wider than 1024 which makes little sense.

New implementation makes sure width is at least 1024 and height is at least 512 after reset.

Fixes #7555
Fixes #8909
",634,False,en,0
8923,1,6,0,Externals,g2p,2015-09-24 10:58:24,1,1,1,0,"runas 2 doesn't build with a recent node.js

Closes #8922
Closes #8508
",71,True,en,0
8917,9,15,14,Externals,bolinfest,2015-09-24 05:38:23,249,65,6,0,"On a high level, I would like to be able to use an alternative test runner for running tests in Atom. (Currently, [Atom uses Jasmine 1.3 for its test runner](https://atom.io/docs/latest/hacking-atom-writing-specs).) Atom already does a lot of great work to set up the test environment and to enable the test runner to run in-process, on par with other JavaScript in Atom. 

Previously, `spec-bootstrap.coffee` loaded `jasmine-helper.coffee`, which in turn loaded `vendor/jasmine`, `jasmine-tagged`, and `spec-helper.coffee` via `spec-suite.coffee` (which installs a bunch of properties on the globals `jasmine` and `window`, loading `jasmine-json` and `vendor/jasmine-jquery`, to boot!). The net effect of `spec-bootstrap.coffee` was to set up a bunch of helpers for Jasmine, register some Jasmine reporters, and run `jasmine.Env.execute()`.

With this change, the only requirement to be a ""test runner"" is to be a function that takes a hash of options and synchronously returns an object with an `execute()` method. This is much simpler. It also makes it possible to introduce a test runner that is completely independent from Jasmine.

The default implementation maintains the old behavior: `jasmine-helper.coffee` has become `jasmine-helper.js`. Where it used to export a `runSpecSuite()` function that could load an arbitrary file (which was always `spec-suite.coffee`, in practice) and then create a new `jasmine.Env` and `execute()` it, now `jasmine-helper.js` exports `runSpecSuite()` with its defaults baked in and it returns the `jasmine.Env` without executing it. Now it is up to `spec-bootstrap.coffee` to decide whether to load `jasmine-helper.coffee` or some other file and to invoke the `execute()` method on the resulting object that it creates.

Here is an example of an alternative/trivial implementation of a custom test runner that satisfies the contract:

``` js
'use babel';
/* @flow */

type TestRunnerOptions = {
  logFile: ?string,
};

type TestRunner = {
  execute(): void,
};

export default function createTestRunner({logFile}: TestRunnerOptions): TestRunner {
  return {
    execute() {
      atom.exit(0);
    },
  };
}
```

This PR introduces a new flag for the Atom executable, `--test-runner-bootstrap`, that makes it possible to specify the source of the alternative test runner. For example, if the above were defined at `/path/to/test-runner/bootstrap.js`, then it could be used as a test runner as follows:

```
atom --dev --test --test-runner-bootstrap /path/to/test-runner/bootstrap.js --spec-directory $PWD/spec
```

Part of the work of this PR was defining the types for the Jasmine object model to clarify the contracts in `jasmine-helper.js`. As Atom's test runner is an amalgam of Jasmine packages (`jasmine`, `jasmine-json`, `jasmine-node`, `jasmine-tagged`, and `jasmine-focused`), this was no easy task. These definitions appear at the top of `jasmine-helper.js` (formerly `jasmine-helper.coffee`). Writing this file in JavaScript makes it possible to do this using Flow types.

Originally, I tried to implement this PR by making a ""test runner"" an object that satisfied the contract of `jasmine.Env`. In practice, this turned out to be too difficult because so many libraries were adding expando properties onto `jasmine` that it made it too hard to get a full picture of the API that was required of Jasmine. For example, I was getting failures because `failure-tree.coffee` was looking for (as far as I could tell) undocumented properties on `jasmine.Spec` objects. Note that `failure-tree.coffee` comes from @kevinsawicki's fork of `jasmine-node` (https://github.com/kevinsawicki/jasmine-node.git), making it tough to trace through. As such, trying to create a `jasmine.Reporter` that met the needs of Atom's built-in `TerminalReporter` and `AtomReporter` objects seemed too difficult. Admittedly, this means that a custom test runner will not be able to take advantage of the default UI that is provided for Atom tests, but for now, I think this is OK.

Note that in `jasmine-helper.js`, I did not hoist inline `require()` calls as `import` statements because at least one of them has important side-effects, so it was unclear as to what was safe to move. I did my best to match Atom's JavaScript style, so I did not use semicolons, put spaces between `function` and `()`, etc.

Although `jasmine-helper.js` does not come close to Flow checking cleanly (Flow can't understand the
CoffeeScript files when tracing through a `require()` statement), I added an initial `.flowconfig`
file anyway so that basic features like click-to-symbol work in Nuclide. This also makes it possible
for Flow to report intelligent things about intra-file contracts.
",4697,True,en,0
8906,1,16,3,Internals,izuzak,2015-09-23 15:04:24,44,0,1,0,"This is an attempt to close https://github.com/atom/atom/issues/3650 and close https://github.com/atom/atom/issues/6538.

Sorry for the wall of text below, I think it will be helpful in understanding the confusion and figuring out what the expected behavior is. @benogle (since you commented on https://github.com/atom/atom/issues/3650) @maxbrunsfeld @nathansobo -- I'd love to hear your advice here. Also /cc @atom/feedback for extra :eyes:.

My plan is to split the work around this problem into several steps (within this PR):
- [ ] Describe the problem and write specs to help us understand the expected behavior
- [ ] Update the API documentation to explain the behavior of methods and the supported options
- [ ] Fix the incorrect behavior for all affected methods

This text below if about the first task -- describing the problem and adding specs to confirm expected behavior.

https://github.com/atom/atom/issues/3650 and https://github.com/atom/atom/issues/6538 bring up a problem with how `Cursor.getCurrentWordBufferRange` works in some cases. For text like `atom-+electron`, here are results for different positions of the cursor and different values of the `includeNonWordCharacters` option:

| Cursor position | `includeNonWordCharacters = true` | `includeNonWordCharacters = false` |
| --- | --- | --- |
| <code>at&#124;om&#8209;+electron</code> | `atom` | `atom` |
| <code>atom&#8209;&#124;+electron</code> | `-+` | _nothing_ |
| <code>atom&#8209;+&#124;electron</code> | `-+electron` | `electron` |

The problem with the above is the inconsistency of behavior, lack of specs, and unclear documentation:
- When the cursor is between a word character and a non-word character (<code>atom&#8209;+&#124;electron</code>) and `includeNonWordCharacters = true`, then both the word characters and the non word characters are grouped into a single word (`-+electron`), but only those groups next to the cursor (notice that `atom` wasn't grouped into that).
- When the cursor is between two word characters (or two non-word characters) and `includeNonWordCharacters = true`, then only word characters or only non-word characters are grouped into a single word.
- The [documentation](https://github.com/atom/atom/blob/e1fb376a084f463c4f1e641cb89803dc3095f9b2/src/cursor.coffee#L616-L617) for the `includeNonWordCharacters` option is unclear -- it says: ""A Boolean indicating whether to include non-word characters in the regex."" But it's not clear if that means that the regex then groups both word and non-word characters into a single word, or that the regex groups non-word characters into words, but not together with word characters. The name of the option implies the former, but the behavior _mostly_ implies the latter.
- There are no specs around these methods which would indicate expected behavior, as far as I can tell.

My _guess_ is that the intended meaning of the `includeNonWordCharacters` option is ""should non-word characters be grouped together into a word (but never together with word characters)"". In other words, the `-+electron` result from table above should not happen since it contains both word and non-word characters, and would be considered a bug. Instead, the result should have been `electron` since that's the word next to the cursor (we favor words consisting of word characters, not words consisting of non-word characters).

Based on this guess -- I added specs in this PR to cover the cases shown in the table, and the only spec which fails is the one for `-+electron`:

```
TextEditor
  cursor
    .getCurrentWordBufferRange()
      when cursor is between a word character and non-word character
        when includeNonWordCharacters is true
          it returns the word next to the cursor, defined with word characters
            Expected { start : { row : 0, column : 4 }, end : { row : 0, column : 14 } } to equal [ [ 0, 6 ], [ 0, 14 ] ].
```

The reason why this problem happens lies in how the `Cursor.getCurrentWordBufferRange` methods works. That method scans to the left and to the right [to find the edge of words](https://github.com/atom/atom/blob/e1fb376a084f463c4f1e641cb89803dc3095f9b2/src/cursor.coffee#L551). However, it doesn't check if the cursor is between a word and a non-word character. That's relevant because if `includeNonWordCharacters` is `true` -- the method will group word and non-word characters together by joining the left and right part together. Some other methods in the `Cursor` class have the same problem (for example, [`getBeginningOfCurrentWordBufferPosition`](https://github.com/atom/atom/blob/e1fb376a084f463c4f1e641cb89803dc3095f9b2/src/cursor.coffee#L476) and [`getEndOfCurrentWordBufferPosition`](https://github.com/atom/atom/blob/e1fb376a084f463c4f1e641cb89803dc3095f9b2/src/cursor.coffee#L506) which `getCurrentWordBufferRange` uses for scanning) -- they don't check if the cursor is between a word and non-word character.

Interestingly, this check is made as a part of one other public method -- in [Selection.selectWord](https://github.com/atom/atom/blob/abf6d40cc4e3462a38fe2ce041d222d369e44147/src/selection.coffee#L315). Notice how this method uses `Cursor.isBetweenWordAndNonWord()` first, and modifies behavior based on that. I believe that logic should be in `Cursor` methods. In other words, `Cursor` methods should check if the cursor is between a word and non-word character and handle the situation when `includeNonWordCharacters` is `true`.

I'm not 100% sure about this, so definitely want to hear if this sounds good to everyone.
",5542,True,en,0
8865,3,1,0,Externals,hirk7788,2015-09-19 23:18:54,26,55,6,0,,0,False,en,0
8857,1,4,0,Externals,paulcbetts,2015-09-19 06:51:47,2,2,1,0,"Fixes #7374
",12,True,en,0
8843,1,6,0,Externals,kenju,2015-09-18 15:13:44,20,0,1,0,"# What
- Suggestion for writing `branch-name` section in `CONTRIBUTING.md`
- What I wrote is just for the first draft, and should be reviewed and improved
# Why
- With the more contributor is getting joined with this community, there are a bunch of branch name
  without any under coherence
# How
- I strongly believe that beginning with Github Username is easy to find and at the same time recognizable
- As for the latter part (topic categories and branch name style), I would like to hear more contributor's opinions
",520,False,en,0
8821,1,5,0,Externals,faustinoaq,2015-09-17 11:10:41,0,0,0,0,"I'm using Kubuntu 15.04 and Atom 1.0.11
I just added one line `margin-left: 1px` because when I use atom with half screen I can see the icons cutted.

![Screenshot](http://i.imgur.com/DOgHHjA.png)
![Margin](http://i.imgur.com/Ql1XzA5.png)
",239,False,en,0
8817,5,5,4,Externals,mnquintana,2015-09-17 00:58:59,16,7,4,0,"Refs https://github.com/atom/atom/pull/8778, https://github.com/atom/one-light-ui/pull/38, https://github.com/atom/one-dark-ui/pull/98

This PR fixes a few oversights from my last pass at this by properly overriding Bootstrap's default font styles for tooltips, and providing a new `'system'` fallback for `@font-family`. Omitting `@font-family` from bundled themes was breaking the build before, because these fallback variables weren't being loaded for bundled themes (and only bundled themes) for some reason. 

Now theme authors should be able to either omit `@font-family` or set `@font-family` to `'system'` to leverage OS default fonts.

/cc @atom/feedback 
",665,True,en,0
8810,1,1,0,Externals,svanharmelen,2015-09-16 13:13:21,1,1,1,0,,0,False,en,0
8780,16,17,9,Externals,BrainCrumbz,2015-09-14 09:19:03,0,0,0,0,"### Features

This PR aims at addressing some issues (see e.g. #5901 ) about Atom integration in Windows shell context menu (i.e., the _right click_ menu in Explorer). In particular, with those changes:
1. user will be able to disable Atom commands in context menu by acting on Atom settings, without resorting to manually editing the registry. Of course s/he can also enable it back again
2. when Atom is updated, again user will not have to re-edit the registry (nor settings) because Atom will ""remember"" that items were disabled and keep them like that.
### Implementation
1. Windows Registry operations needed to be invoked by more than one place, so they have been extracted from `squirrel-update.coffee` and moved to a new `WinRegistry` module in `win-registry.coffee`.
2. Because registry operations need ChildProcess.spawn functionalities, those have been extract from  `squirrel-update.coffee` as well and moved to a new `Spawner` in `spawner.coffee`.
3. A new checkbox <-> boolean setting has been added to the core settings pane in `config-schema.coffee`.
4. The new setting is monitored by a dedicated module, `WinContextMenuSettings` in `win-context-menu-settings.coffee`. When setting changes, that is responsible for updating the registry by invoking `WinRegistry`
5. `atom.coffee` creates an instance of that monitor, and dispose that when it's time to
6. `WinContextMenuSettings` monitor got its own specs
7. Some `squirrel-update-spec.coffee` specs, related to ignoring errors, where actually a test on spawning functionality, so they have been moved to a new `spawner-spec.coffee`
8. Specs for the shell context menu integration upon update found place in `squirrel-update-spec.coffee`
9. In `squirrel-update-spec.coffee` then there was a repetition on how to invoke a callback, and that has been factored 
",1827,True,en,0
8749,1,2,0,Externals,BrainCrumbz,2015-09-10 23:35:42,0,0,0,0,,0,False,en,0
8744,3,5,0,Externals,BrainCrumbz,2015-09-10 16:21:04,0,0,0,0,"This is a work-in-progress. When running _apm test_ (apart from a load of messages coming from other unrelated files) in the end it reports 3 failures, all related to _squirrel-update-spec.coffee_:

```
Windows squirrel updates
  it ignores errors spawning Squirrel
    Error: EBUSY
      at Object.<anonymous> (/my/path/atom/spec/squirrel-update-spec.coffee:30:54)
      at spawnUpdate (/my/path/atom/src/browser/squirrel-update.coffee:25:11)
      at createShortcuts (/my/path/atom/src/browser/squirrel-update.coffee:90:3)
      at Object.exports.handleStartupEvent (/my/path/atom/src/browser/squirrel-update.coffee:131:7)
      at [object Object].<anonymous> (/my/path/atom/spec/squirrel-update-spec.coffee:33:27)
  it quits the app on all squirrel events
    timeout: timed out after 5000 msec waiting for something to happen
  it keeps the desktop shortcut deleted on updates if it was previously deleted after install
    timeout: timed out after 5000 msec waiting for something to happen

Finished in 288.948 seconds
1838 tests, 6583 assertions, 3 failures, 0 skipped
```

I'd just like to stress that at the moment we're running this on a Mac, so not sure if those tests strictly depend on platform. Of course we'll move on a Win machine as soon as we grab one, next week probably. 
",1291,True,en,0
8703,2,2,0,Externals,Ingramz,2015-09-07 18:40:38,0,0,0,0,"Fixes #8701  

If scopeStarts contains the end element we encounter from tags, we should pop it directly from scopeStarts instead of pushing it to scopeEnds. If the top element wasn't the same (or it didn't exist), we add scopeStarts element back and push the tag to scopeEnds just like we used to.

Also I am interested in knowing if there is a safe way to peek the top of stack without popping.
",397,True,en,0
8700,1,9,0,Internals,as-cii,2015-09-07 12:38:49,0,1,1,0,"This is part of our ongoing effort to cut down rendering times.

Apparently, our indent-guides have a modest impact on Layout. Currently, they are styled with `display: inline-block` so that they have the same height of line nodes. This produces the effect of a contiguous vertical line:

![screen shot 2015-09-07 at 14 21 42](https://cloud.githubusercontent.com/assets/482957/9716625/e2fdfa22-556b-11e5-93cf-7401d0a130fc.png)

My assumption is that, when rendering text runs, Chrome has to take a slightly different route to lay out inline blocks, thereby slowing down reflows.

As a result, if we use `display: inline` for indent guides as well, **Layout** decreases from `3.2ms – 3.5ms` to `2.0ms – 2.5ms` for a full reflow. This, however, has the consequence of showing indent guides as the following:

![screen shot 2015-09-07 at 14 25 59](https://cloud.githubusercontent.com/assets/482957/9716677/630db856-556c-11e5-9dc6-ab0363208af5.png)

I have worked with @simurai to find a performant replacement which didn't alter the UI, but we had no luck in our investigation. We might probably render indent guides _outside_ the line, but I am not sure it's really worth it, especially since users may be okay with the slowdown and still keep the contiguous line effect with a simple change in their stylesheet:

``` less
atom-text-editor::shadow .indent-guide {
  display: inline-block;
}
```

What do you think? :thought_balloon:

Thanks!

/cc: @nathansobo @atom/feedback 
",1478,True,en,0
8697,1,12,0,Externals,paulcbetts,2015-09-07 05:16:57,2,1,1,0,"I'm trying to use [Polymer](https://polymer-project.org) in an Atom plugin, but the CSP policy blocks inline scripts in [HTML imports](http://www.html5rocks.com/en/tutorials/webcomponents/imports/), which is core to how Polymer works. I'm not sure that this actually protects against any actual security boundary in Atom/Electron's security model (which isn't equivalent to the web)
",383,True,en,0
8692,3,12,0,Externals,lierdakil,2015-09-06 17:59:54,13,2,2,0,"This is a first attempt at solving #8313. Actually triggering activation hooks is deferred until all packages that could be activated, are.

Note that there was a little oversight at line 409/411, due to which `did-activate-initial-packages` was emitted late if there were packages with activation hooks, I had to fix that as well.

Not entirely sure on how should I go about adding specs for this. Any advice is welcome.
",422,True,en,0
8690,1,10,0,Externals,kaitoy,2015-09-06 17:27:50,4,0,1,0,"I created an atom package [disturb-me](https://atom.io/packages/disturb-me) which adds an image randomly moving in the atom window by an `img` tag.
When I specify a gif image located in the package using atom protocol (e.g. `atom://disturb-me/assets/atom/white/atom_die.gif`), the package set the `src` of the `img` tag to it and then the image is shown. But the gif animation is run only when the image is loaded for the first time.
It seems this is because the image was cached. So, to avoid such caching, I want to add a query string with a random value to the url. (e.g. `atom://disturb-me/assets/atom/white/atom_die.gif?time=1441559906660`)
I locally tested the random query method with this change I'm pull-requesting and confirmed the caching issue was solved.
",768,False,en,0
8644,1,1,0,Externals,fscherwi,2015-09-02 22:08:39,0,0,0,0,"Remove ""atomShellVersion"" in package.json.

Whats about ""ElectronVersion""?
",75,True,en,0
8641,2,0,0,Internals,nathansobo,2015-09-02 17:16:50,10,64,4,0,"Refs #8506

This is causing issues when undoing after splitting the editors. This is because the cursor of the second editor isn't visible in the snapshots prior to undo and is getting destroyed, leaving us with zero cursors. We're going to need to re-release once this is merged.
",281,True,en,0
8640,1,7,0,Externals,vjeux,2015-09-02 16:02:22,2,5,1,0,"Editors like Sublime and Code do not highlight the entire line when doing a multi-line selection, instead they stop after the last character on that line.

I wanted to implement the same thing on Atom. The way I did it is very hacky and not production ready but it gets the job done. Right now, if you highlight 5 lines, the first and last lines are their own ""tile"" and all the remaining ones are grouped into a single rectangular tile. Since we want to have each line with a different width, I forced the tile size to 1 and removed the logic that makes it expand all the way.

I'd really like this feature to be in atom, let me know how I can refactor the code to make it shippable. Thanks

Different editors (top left: sublime, bottom left: code, top right: atom):
<img width=""856"" alt=""screen shot 2015-09-01 at 12 36 01 pm"" src=""https://cloud.githubusercontent.com/assets/197597/9636605/35881db4-5151-11e5-9827-b81e784e5e78.png"">

Before:
<img width=""519"" alt=""screen shot 2015-09-01 at 5 33 00 pm"" src=""https://cloud.githubusercontent.com/assets/197597/9636627/4b90e5be-5151-11e5-827f-94e420397f78.png"">

After:
<img width=""516"" alt=""screen shot 2015-09-01 at 5 32 29 pm"" src=""https://cloud.githubusercontent.com/assets/197597/9636630/50dd3ad6-5151-11e5-9584-673bfcca1e01.png"">
",1284,True,en,0
8622,1,0,0,Externals,aranajhonny,2015-09-01 16:26:30,0,0,0,0,"Fixed link for instructions for Node.js debian, ubuntu and fedora. It is not something remarkable for us , but it is better to be specific
",139,True,en,0
8618,1,0,0,Externals,ryanpcmcquen,2015-09-01 13:41:36,0,0,0,0,,0,False,en,0
8615,2,5,0,Externals,n-riesco,2015-09-01 10:49:35,3,3,2,0,"The installation script `script/grub install --install-dir $INSTALL_DIR`
is broken on linux machines if `$INSTALL_DIR/bin` happens to be a
symlinked folder.

This PR fixes the installation task `build/tasks/install-task.coffee`
and the launching script `atom.sh` to allow for symlinked folders.
",295,False,en,0
8583,1,3,1,Externals,darwin,2015-08-30 21:47:05,19,11,2,0,"I wanted to bundle some fonts to my package as described here: https://atom.io/docs/v0.186.0/creating-a-package#bundle-external-resources.

It didn't work and after diving into Atom's sources I realised that the problem is translation of urls to file-system paths. In my case urls contained extra url parameters, e.g. `atom://plastic-clojurescript/fonts/eot/hack-regularoblique-webfont.eot?v=2.010`

I have modified the code to strip parts after question mark or hash from urls. That was a quick fix.

Possible future improvement could be using some robust library for proper url parsing.
",589,True,en,0
8578,1,2,4,Externals,jacekkopecky,2015-08-29 23:32:41,54,10,5,0,"Fixes #8383.
This is a first attempt, and I can't say I'm confident that it's done right. I'll add some comments in the patch.
Any comments and suggestions on this one will be welcome.
",185,False,en,0
8557,1,3,0,Externals,SantanMaddi,2015-08-28 18:51:00,1,1,1,0,"Activate the last tab on pane on cmd / ctrl + 9 shortcut

Closes #6609
",71,True,en,0
8556,3,2,0,Externals,50Wliu,2015-08-28 16:11:26,9,9,4,0,"Hopefully I got all of them :smile:.

This change allows for the scope change in atom/language-javascript#206 to pass on master.
",129,True,en,0
8542,1,4,0,Externals,shoelzle,2015-08-27 18:13:56,0,0,0,0,"Packages for openSUSE updated
",30,True,en,0
8519,1,0,0,Externals,fscherwi,2015-08-26 14:23:00,0,0,0,0,,0,False,en,0
8515,1,1,0,Externals,florianb,2015-08-26 09:49:52,0,0,0,0,"Fixed pre-1.0-API-call in the documentation-example of the GitRepository-class, to fit the actual implementation of Project.
",125,True,en,0
8514,1,15,0,Externals,jeremyramin,2015-08-26 07:14:27,12,0,3,0,"The editor settings now include an option to remove the trailing whitespace before an inserted newline. This option is disabled by default in order to prevent the sudden change of the editor's indent functionality.

![screen shot 2015-08-25 at 11 50 39 pm](https://cloud.githubusercontent.com/assets/3977054/9487177/229b0e82-4b84-11e5-99a4-7813ad5a7604.png)
### In Action

![remove-trailing-whitespace](https://cloud.githubusercontent.com/assets/3977054/9487486/d3d941ee-4b86-11e5-9e99-be5675a1b0a2.gif)
The boxes signify lines where there was a leftover indent after a newline command. Once enabling remove trailing whitespace, new lines have their indents set to nothing. Lines with anything besides whitespace will not be effected. The newline will continue to have it's indent.
### Note

This should be pretty easy to write a spec for if it is approved as a good change. This closes #7828.
",894,True,en,0
8513,1,7,0,Externals,jeremyramin,2015-08-26 01:53:04,17,0,5,0,"New option in the file menu to create a new tab for the current active pane item. Only works if the active item is a TextEditor object. The new item is then set as the active item. newViewForActiveTextEditor() returns the new TextEditor or 'undefined' if the active pane item is not a TextEditor. This closes atom/atom#8409.
### Preview

![new-view-for-file](https://cloud.githubusercontent.com/assets/3977054/9483900/03921fbe-4b5a-11e5-8028-36abe230691e.gif)
### Note

No spec for this yet, because I am not sure which spec this should belong to. Might want to change the command name from `application:new-view-for-file` to something else. I was not sure if it should be 'application' or 'pane' in the command.
",713,False,en,0
8483,1,3,0,Externals,charleswhchan,2015-08-23 04:53:14,2,2,2,0,"Partially fix to address the lack of download progress by adding ellipses to the ""Downlading Update"" message.

Solution suggested by @Ivoz in https://github.com/atom/atom/issues/8038#issuecomment-127039291.
",207,True,en,0
8456,1,5,0,Internals,as-cii,2015-08-20 14:13:12,14,129,5,0,"While working on character measurement, I stumbled upon `mouseWheelScreenRow` and tried to reason a bit about it.

The reason why it exists is to let the browser continue firing `mousewheel` events even when the original line goes off-screen. Using this approach, instead of deleting it as we would do for other lines, we keep it around in the DOM until scrolling finishes.

This PR attempts to change that by forcing the browser to fire `mousewheel` events on the parent element. To achieve this, I made use of the following CSS:

``` css
.lines {
  * {
    pointer-events: none;
  }
}
```

This will prevent any kind of mouse interaction with `.lines` and `.line-numbers` descendants and therefore I am not sure about the implications of this solution. Fold icons in the gutter stopped working, but everything else seems to work nicely. I guess the question is: can we find a way to make `.lines` or `.line-numbers` the target of `mouse wheel` events?

This was a pretty quick fix to demonstrate the idea so I just opened a PR but we can easily discard it if it's unfeasible.

/cc: @nathansobo @maxbrunsfeld @atom/feedback 
",1126,True,en,0
8403,5,3,1,Externals,dsandstrom,2015-08-16 22:20:09,8,3,1,0,"I added the EOL symbol as an option for the word regex.  This will be used in atom/vim-mode#581.  Let me know if tests should be added.
",136,True,en,0
8396,1,1,0,Externals,theuves,2015-08-15 17:06:42,0,0,0,0,,0,False,en,0
8296,1,3,2,Externals,fusion809,2015-08-10 08:33:11,0,0,0,0,"Adding Mageia instructions (based on [#8283](https://github.com/atom/atom/issues/8283)). Adding extra troubleshooting information. 
",132,True,en,0
8243,1,8,2,Externals,bolinfest,2015-08-06 03:17:35,9,1,2,0,"The implementation of `Marker::destroy()` is:

``` coffee
  destroy: ->
    @bufferMarker.destroy()
    @disposables.dispose()
```

so if `marker.disposables.dispose()` is called instead of `marker.destroy()`, then `marker.bufferMarker.destroy()` does not get called. As best I can tell, `marker.bufferMarker` is a `Marker` returned by a call to `TextBuffer::getMarker(id)` that happens in `DisplayBuffer`.

However, `TextBuffer::getMarker(id)` returns this type of `Marker`:

https://github.com/atom/text-buffer/blob/master/src/marker.coffee

which is distinct from the `Marker` associated with the `DisplayBuffer`:

https://github.com/atom/atom/blob/master/src/marker.coffee

which is a little confusing.

By failing to call `marker.bufferMarker.destroy()`, callbacks registered via `onDidDestroy()` on the `Marker` from the `text-buffer` package will not get called.

Incidentally, there is also this line in the constructor of `Marker`, but that does not seem to help us here:

``` coffee
@disposables.add @bufferMarker.onDidDestroy => @destroyed()
```

I verified that the associated unit test fails without this change and succeeds when the change is added.
",1164,True,en,0
8228,4,3,0,Externals,t9md,2015-08-05 09:46:15,107,2,2,0,"Currently,  splitRight, Left, Up, Down don't sync scrollRatio of original editor.
Since copyActiveItem: is true by default, I want newPane scrolled to same ratio of original item if item was instance of TextEditor.
- activate: false won't activate newPane
- syncScrollRatio: true sync original scrollRatio on split.

Why I added `activate` option is I want split pane without activation, in Vim it split without activation(and of course sync scrollRatio).

Currently spec was not finished. I couldn't getHeight() of editor, its always say 0, I need help to fix this.
",567,False,en,0
8188,5,7,7,Externals,fscherwi,2015-08-01 07:44:22,0,0,0,0,"Improved build instructions on Windows, OS X and FreeBSD!
",58,True,en,0
8186,17,6,0,Externals,Abdillah,2015-08-01 07:15:05,52,5,2,0,"This solved the issue (partly), discussed on #3719.

I create new config item to specify tabType used by default. But, it clearly conflicting with softTabs config item. I didn't remove it, even I think it's safe to be removed, is it?

![tabtype](https://cloud.githubusercontent.com/assets/3030950/9020987/b09ebef4-3856-11e5-89c1-b1e21a36f02b.gif)
",347,True,en,0
8093,8,8,9,Externals,stanier,2015-07-27 15:42:06,118,3,2,0,"Temporary(?) solution to #2956 while better solution is discussed.
",67,True,en,0
8019,10,2,0,Externals,bolinfest,2015-07-22 05:12:36,52,16,8,0,"@jssln @nathansobo I just want to make sure this wasn't deliberately omitted.
",78,True,en,0
7999,1,0,1,Externals,joefitzgerald,2015-07-21 06:39:50,0,0,0,0,"- Ensure that activate and deactivate are no-ops
- Rationalize package type, retain legacy getType
- This should be merged with https://github.com/atom/apm/pull/385
",165,False,en,0
7968,1,2,0,Externals,ryanpcmcquen,2015-07-19 15:29:43,0,0,0,0,,0,False,en,0
7960,1,1,0,Externals,oggy,2015-07-19 06:42:52,29,21,1,0,"The former is used in the tests in generated packages.
",55,True,en,0
7945,61,5,5,Internals,as-cii,2015-07-17 12:47:34,657,300,8,0,"This PR is intended to supersede #6083. Please, note that it’s still a :construction_worker: _work in progress_ :construction_worker: and, as a result, there are still some minor hiccups and a few performance regressions, which I am going to expound later in this description.
#### Background

Have a look at #6055 to get a sense of why we want to do this. @nathansobo did a great job at explaining the drawbacks of the current approach and how we could possibly solve them, so I strongly recommend to read that issue in depth.
#### Solution: `<iframe>`

The idea with the approach proposed in this PR is to have an independent context where we can arbitrarily build a bunch of DOM nodes exclusively for measuring purposes. We employed an `<iframe>` for this, so that a reflow in the measurement context does not affect the main document and viceversa.

To accomplish this we have introduced `LinesYardstick` (naming is hard :sweat_smile:), an abstraction whose purpose is to hide the complexity of dealing with the measurement context housekeeping. The API is simple:
- `buildDomNodesForScreenRows`
- `leftPixelPositionForScreenPosition`

We need to explicitly have two separate steps, as otherwise we’d end up continously changing the DOM and reading from it, thus causing extra reflows.
#### The Measurement Context

The context, as stated previously, is an `<iframe>` that replicates some of the functionalities featured on the fully fledged document, namely:
- Has a bunch of line nodes
- Includes a custom `<style>` element which contains font-size information
- Includes `<atom-styles>` which, in turn, contains the syntax theme

You can think of it as a skinny replica of the larger document, where line characters occupy the exact same space and are, therefore, measurable. It’s extremely important for this context to be independent, as we will use it in `TextEditorPresenter` as well as in `DisplayBuffer` (in the future).
#### Performance

**Side note**: this section is a collection of personal thoughts and may not be accurate or necessarily _correct_. However, it will hopefully serve as a starting point for further optimizations and discussions.

We have encountered several performance regressions along the way, especially for performance sensitive scenarios such as scrolling. Keep in mind that for such _intensive_ activities we need to respect the 16ms budget.

As of today, the steps we perform are the following:
1. Right before updating (i.e. at the beginning of `TextEditorPresenter#getState`), we build the DOM nodes for a bunch of screen rows we know we are going to measure:
   - All the rows that will be rendered on screen after the update (to make sure decorations, cursors, etc. will be able to measure stuff).
   - The longest row (to calculate the maximum width of the open document).
   - The last cursor row (to calculate the hidden input position).
2. As we update things (`@updateDecorations`, `@updateCursors`), we call `@pixelPositionForScreenPosition` which, in turn, will query `LinesYardstick` for positions. The first time this method is called, a `Recalculate Style` and a `Layout` will be triggered.

These are the two main operations and you can see how they perform on a quite heavy scrolling session (profiler disabled to avoid performance overhead):

![screen shot 2015-07-17 at 11 59 41](https://cloud.githubusercontent.com/assets/482957/8744934/5ed3ee00-2c7b-11e5-8e9a-accb2552ba9e.png)

And, if we zoom in one of those spikes:

![screen shot 2015-07-17 at 12 01 21](https://cloud.githubusercontent.com/assets/482957/8744964/90306546-2c7b-11e5-8a9c-d65e38a71eff.png)

The first half of the picture is the illustration of the aforementioned steps:
1. Building HTML: `1.33ms`
2. Parsing HTML: `1.28ms`
3. Recalculate Style: `0.839ms`
4. Layout: `1.408ms`

The whole frame took `20ms`; measuring the first half via Chrome (Shift+Click) reported `6ms`.

Now the question is: what could we improve? There are a couple of possibilities:
1. Build the same HTML for the lines in the context as well as for the lines in the real document. This way we can avoid reparsing the lines twice, although cloning the nodes still takes some time. Not sure if this is really useful.
2. Build skinnier lines for the measurement context. Ideally, we should avoid as much nesting as possible and, reducing the scopes complexity by building only those ones needed for styling, could improve that. It's also true that it would complicate things a bit (involves dealing with CSS rules, etc.). (eb8a1c0)
3. Be smarter about updates. Instead of including every possible line, we build and layout only those lines needed for position-based updates. The drawback here is that, when e.g. we have decoration for each visible row, this optimization is useless. This means I want to make sure to speedup the current process instead of relying on not having certain rows. Anyway, this improvement has a positive impact on `Layout`, `Recalculate Style` and HTML manipulation. To get a sense of what this could look like, here's a relevant snippet:
   
   ``` coffee
   getMeasurableScreenRows: ->
     measurableRows = new Set
   
     @addOverlaysRowsToSet(measurableRows)
     @addCursorsRowsToSet(measurableRows)
     @addDecorationsRowsToSet(measurableRows)
   
     if lastCursorRange = @model.getLastCursor()?.getScreenRange()
       measurableRows.add(lastCursorRange.start.row)
       measurableRows.add(lastCursorRange.end.row)
   
     if longestScreenRow = @model.getLongestScreenRow()
       measurableRows.add(longestScreenRow)
   
     measurableRows
   ```
4. Cut non-syntax CSS from styles. Removing `<atom-styles>` does not yield huge speedups, so I am not sure it's the first thing we want to improve. Still an improvement I’d like to make, though. (2257688)
5. Reduce layout times by trying to modify the measurement context without affecting the whole document. If we manage to always change the DOM in a way that affects only smaller layout boundaries, we may be able to halve reflow times. (28405e09afe097a8f40f90cb2166a47619c8feef)

I believe a combination of 2), 3), 4) and 5) could be interesting. HTML creation (and parsing) and `Layout` are the expensive operations right now and I am thinking to ways in which we could speed them up. I am still kinda making some research but I feel we could reach decent performance if we put some more effort on this. I'll investigate other potential speedups in the meantime. @nathansobo: what do you think?
#### Conclusion

If you have read everything so far, I extremely appreciate your attention. I feel like there are many ways to solve this problem, none of which is guaranteed to be the right one, thus I wanted to include as much of my knowledge as possible so that you and the future me can try things out based on it. :pray:

Any feedback would be much appreciated! :bow: Thanks!
",6879,False,en,0
7933,1,5,4,Externals,fb55,2015-07-16 15:27:15,0,0,0,0,"Fixes #7171

OSX allows applications to be in focus without an active window, which leads to some unexpected behavior.
",119,True,en,0
7932,1,2,0,Externals,ryanpcmcquen,2015-07-16 14:28:58,0,0,0,0,,0,False,en,0
7905,1,4,0,Externals,jimmydo,2015-07-15 09:35:21,0,0,0,0,"These `alt`-less variants are commonly available in Mac OS X apps --
such as Sublime Text 3, TextMate 2, and Xcode.

Related pull request to change a conflicting `ctrl-backspace` keybinding:
https://github.com/atom/bracket-matcher/pull/154
",240,False,en,0
7878,2,6,0,Externals,rameshvarun,2015-07-13 21:31:53,0,0,0,0,":memo: I noticed that the `PackageManager::activatePackage` function is used frequently in specs for packages (ex: [1](https://github.com/lee-dohm/indentation-indicator/blob/master/spec/indentation-indicator-spec.coffee#L12) [2](https://github.com/atom/tree-view/blob/17fb96308437ac63d2cb16da9d787cd20740a418/spec/tree-view-spec.coffee#L30) [3](https://github.com/atom/find-and-replace/blob/8e357b79e590ddc8b952aa78f77dbb3200a38967/spec/select-next-spec.coffee#L18)), however is undocumented in the [API docs](https://atom.io/docs/api/v1.0.2/PackageManager).

This PR adds a new section `Activating and deactivating packages` to the `PackageManager` docs, with documentation for the `activatePackage` and `deactivatePackage` functions.
",736,True,en,0
7871,1,3,0,Externals,kantorkel,2015-07-13 14:44:19,0,0,0,0,"Metrics. A package that reports usage information to Google Analytics. A hackable text editor for the 21st century should be free as in freedom.
",145,True,en,0
7825,1,3,0,Externals,chinakids,2015-07-10 06:27:31,4,4,1,0,"`...`It turned into a `…`  ，It will result in failure of language packs, although we have to repair, but I believe this is a bug~

This change in all *.cson,I hope you can confirm that the problem is an update or bug
",221,True,en,0
7752,1,2,0,Externals,spongecattle,2015-07-07 07:08:28,0,0,0,0,"To just upgrade the as-odd-tiles apm
",37,True,en,0
7713,1,0,0,Externals,einarmagnus,2015-07-05 01:45:47,139,17,2,0,"This probably needs testing on mac where users are prompted for credentials when saving files they don't have permissions for.

Refs #7708
",139,True,en,0
7712,1,1,0,Externals,einarmagnus,2015-07-05 01:25:27,139,17,2,0,"This probably needs testing on mac where users are prompted for credentials when saving files they don't have permissions for.
",127,True,en,0
7702,3,5,0,Externals,Sticksman,2015-07-04 02:25:49,46,0,2,0,"Logs ascii art from a file and into the dev console.
Couldn't find an icon that actually made sense.
fix #1490
",111,False,en,0
7698,16,14,5,Externals,mnquintana,2015-07-03 18:13:33,82,22,6,0,"Refs https://github.com/atom/settings-view/issues/531

This implements something @simurai and I have been throwing around for awhile now – it removes all Atom core usage of `cursor: pointer` in favor of `cursor: default`. As @jerone put it in https://github.com/atom/settings-view/issues/531:

> Showing the cursor as a ""hand"" when hovering over things in the UI is a very ""web"" oriented convention.

This will go a long way, I think, toward making Atom feel less like a """"""website"""""" running in a semi-headless Chrome, and far more like a native app with a custom UI. :smile: 

_Note: This won't affect the styling of any components that explicitly declare another `cursor` type._

> But how will I know I can click on a thing? How will I know if a thing can be interacted with?

Here's how various OSes and desktop shells handle this:
- **OS X**: Occasionally a hover state, often a thing that looks like a button, but usually no way of knowing other than by clicking on it.
- **Windows**: Hover states.
- **GNOME 3**: Hover states.
- **Ubuntu Unity**: Hover states.

I think the safest bet here is to give actionable elements appropriate hover states as a replacement for `cursor: pointer`.

Although this is quite a sweeping change, it doesn't _entirely_ do away with `cursor: pointer` – the pointer should still be used when an element actually is an external link (whether it's an `a` element or not). Ideally this will be combined with https://github.com/atom/status-bar/issues/89 eventually.

TODO:
- [x] What do we do about actionable text? Right now it'll have a standard link-like underline hover state, but without `cursor: pointer`.
- [x] ~~We could be more extreme and add an `!important` flag to really discourage use of `cursor: pointer` – thoughts?~~
- [ ] Ensure that no other Bootstrap classes need overrides
- [ ] Add `.link-external` class example to styleguide
- [ ] Add `.link-internal` class example to styleguide
- [ ] Add `.text-selectable` class example to styleguide
- [x] Remove all remaining uses of `cursor: pointer` from settings-view (https://github.com/atom/settings-view/pull/575)
- [ ] Ensure that all actionable status bar tiles have hover states
  - [ ] Update status bar tile hover states to look less like links (background highlight maybe?)
- [ ] Communicate this change well so package authors can adapt if need be
  - [ ] Also encourage package authors to use `cursor: default` + hover state for actionable elements in their packages over `cursor: pointer`

/cc @atom/feedback 
",2527,True,en,0
7593,4,2,0,Internals,as-cii,2015-06-30 14:13:18,21,15,3,0,"At CodeConf, we had a quick chat with a Chromium team member about how we could improve the rendering layer in Atom.

It turned out that Chromium is heavily optimized for non-absolutely positioned elements and, as a result, we may want to avoid using them for our lines nodes.

The main change we had to make in this PR was to ensure that lines were correctly sorted when inserting them in the DOM, so that the browser could properly figure out how to lay things out. I ended up employing a naive insertion sort algorithm which, although not super efficient, does its job and is pretty fast anyway given the small amount of lines.

Using the timeline, however, I couldn’t notice any major speedup:

| Before | After |
| --- | --- |
| ![screen shot 2015-06-30 at 15 31 12](https://cloud.githubusercontent.com/assets/482957/8432661/ae9c3c22-1f41-11e5-91e0-ac53c7c76541.png) | ![screen shot 2015-06-30 at 15 30 20](https://cloud.githubusercontent.com/assets/482957/8432659/ac801940-1f41-11e5-9bc5-a41517a9071a.png) |

It is subtle, but I can kinda feel it is a bit faster, hence it is likely that the Chrome timeline is not the right tool for the job and `about:traces` could tell a different story. 

@nathansobo: what’s your take on this? Should we go for this route? My opinion is that we may just continue using the absolute coordinates mechanism, as the benefits of this approach do not seem to be extremely evident. 

Thanks! :bow: 
",1440,True,en,0
7525,2,5,1,Externals,Njanderson,2015-06-29 03:51:45,0,0,0,0,"![image](https://cloud.githubusercontent.com/assets/8346437/8400766/cb195214-1dd8-11e5-9efd-ecfb7092061c.png)

First contribution to any open source project. Hoping that this solves the issue, which is issue #7339 about auto updating,
",235,True,en,0
7434,1,3,0,Externals,rjattrill,2015-06-26 04:13:41,3,1,1,0,"Make Alt-F work natively - to open file menu - as per standard behaviour on Windows platform.

Refer issue #474
",112,True,en,0
7427,1,7,0,Externals,fusion809,2015-06-26 00:32:04,0,0,0,0,"Adding some techniques for installing Atom that have worked for me on 32 bit Linux distros. All the techniques on this page that I've been able to try on 32-bit systems, at least, have failed, hence why I am proposing these changes.
",233,True,en,0
7354,2,6,2,Externals,liuxiong332,2015-06-21 05:26:25,14,0,4,0,"This PR add commands `pane:shrink` and `pane:enlarge` to make it enable resize the panes with keyboard.

The following is the keymap binding:

| Command name | Default key binding | Comment |
| --- | :-: | --- |
| `pane:enlarge` | `cmd-alt-=` | enlarge the current pane by 10% |
| `panes:shrink` | `cmd-alt--` | shrink the current pane by 10% |

Closes https://github.com/atom/atom/issues/7332
",394,True,en,0
7309,1,4,0,Externals,basarat,2015-06-17 00:12:34,2,2,1,0,"Reverts atom/atom#7179 

Tree view uses `ew-resize` as shown here : https://github.com/atom/tree-view/blob/f0530bca9217ef6c2bb9fc63d815c9d153d2c898/styles/tree-view.less#L58

`row-resize` and `col-resize` don't work on windows (for whatever reason). 

Screenshots : https://github.com/atom/atom/pull/7179#commitcomment-11715003 
",329,True,en,0
7280,3,7,0,Externals,lpommers,2015-06-15 08:30:02,61,3,3,0,"Closes https://github.com/atom/atom/issues/7059
Related to https://github.com/atom/markdown-preview/issues/99

Add ability to call `atom.workspace.open()` with `up` / `down` split properties.
",192,False,en,0
7182,1,3,0,Externals,verrazanof,2015-06-09 12:16:05,1,0,1,0,"Some one have both python2 and python3 in archlinux will have some problem, there python will links to python3, so they should `ln -s /usr/bin/python2 /usr/bin/python` before building atom.
",190,True,en,0
7144,1,3,0,Externals,jssln,2015-06-07 02:21:30,0,0,0,0,"This PR exposes the `screenPositionForPixelPosition` method currently on the `TextEditor` model. We expose this method on the view instead of the model because it should only be called when the editor is on screen.
",215,True,en,0
7078,1,1,0,Externals,mnquintana,2015-06-03 12:14:04,1,1,1,0,"This ensures that preview tabs work for all files, not just files that open `TextEditor`s.
",91,True,en,0
7072,1,2,0,Externals,thedaniel,2015-06-03 00:02:37,38,0,1,0,"This is intended for simulating key input in specs. Its implementation is based on a spec 
helper from vim-mode: 
https://github.com/atom/vim-mode/blob/7926ffd777c71763597a045a3f79f670ffef025e/spec/spec-helper.coffee#L47-L64

cc @nathansobo @orderedlist @maxbrunsfeld 
",269,False,en,0
7060,16,4,4,Internals,nathansobo,2015-06-02 08:50:02,411,67,18,0,":rotating_light: Work In Progress :rotating_light:

Loading a 3.7MB file created by concatenating jQuery to itself multiple times:

![async-load](https://cloud.githubusercontent.com/assets/1789/7931652/b7a75e18-0912-11e5-884c-cb314ae6b089.gif)

Constructing the initial set of `TokenizedLine`s hangs the UI thread for large files. This PR performs this work in a background task for files above a certain size to avoid the pause, indicating progress with a progress bar. To integrate smoothly with existing packages, we open a `TextEditorLoader` item to display progress until the editor is fully loaded, then replace it with the editor afterward. This ensures that no packages attempt to interact with an editor in a partially loaded state.
## Remaining Issues
### Can't change grammars

We currently use tokenized lines to store horizontal spatial information such as hard tabs, paired unicode characters, soft-wrap indents, etc. This is in addition to their primary purpose of representing syntactic scopes. This entanglement makes it awkward to change the grammar once the file is loaded, because doing so replaces all the tokenized lines with the same placeholder lines we're constructing in the background to clear all the styling, then starts tokenizing again from the beginning. However, this takes a lot of time for a large file. Once the editor is loaded, I don't want to put it back in ""background loading"" mode because that implies a lot of complexity. Ideally I'd like to store the horizontal spatial information outside of the tokenized lines, so styling could be cleared without throwing away all this computation.
### Can't change tab length, invisibles, etc

Again, these require recomputing the tokenized lines from scratch. Invisibles can be dealt with by separating them out into a second rendering phase once our position calculation is more decoupled from the content of the model. Tab lengths are not so easy. We may be able to use our existing metadata about tab locations to update the lengths more efficiently in a synchronous way (without having to scan every token). Or we may want to just disable the ability to change it over a certain size. Or we may need to bite the bullet and figure out how to put the editor back in ""background loading"" mode after all. I'd like to put that off though.
### Long pauses before / after progress bar

The initial pause is due to loading the entire buffer in the background task before beginning processing. I just did this as a first pass implementation and will fix it before merging this. The second pause is autocomplete-plus populating its symbol table. We may want to disable it for now for files above a certain size, then work on optimizing this.
## Tasks
- [x] Display progress bar for loading in background
- [ ] Disallow operations that require recomputation of tokenized lines
- [ ] Optimize background task by computing results in a streaming fashion
- [ ] Do something about autocomplete plus

I may want to push tokenization to a background task in a different PR. That would allow us to at least select an initial grammar for large files instead of the null grammar as is currently the case on this PR. But I think loading huge files without highlighting is enough of an improvement to do that in a second pass.
",3292,True,en,0
7024,2,1,2,Externals,prio101,2015-05-30 04:19:07,0,0,0,0,"This source build doesn't create any launcher icon . So we have to manually add it .
",85,True,en,0
6986,1,4,0,Externals,bolinfest,2015-05-28 04:55:12,18,3,2,0,"By default, `atom.workspace.scan()` scans everything in `atom.project.getDirectories()`.
This introduces the option to restrict `scan()` to a specific set of `Directory` objects.

This will be useful for excluding special root `Directory` objects (such as those created
via a custom `DirectoryProvider`) from calls to `scan()`, if appropriate.

Because I was in the neighborhood, I also made some small documentation fixes:
- Documented the previously undocumented `onPathsSearched` option.
- Clarified that the returned `Promise` has a `cancel()` method.
",556,False,en,0
6976,1,0,0,Internals,maxbrunsfeld,2015-05-27 17:17:21,11,1,2,0,"Fixes #6969.
Refs #6813.
",25,False,fr,0
6957,1,1,0,Externals,bolinfest,2015-05-26 22:44:49,1,1,1,0,"Third-party Atom packages may want to use the exact same version of Babel
that Atom uses to transpile Babel files automatically. Specifying the version
as a range makes this hard to do.
",186,False,en,0
6946,1,3,0,Externals,akonwi,2015-05-26 00:20:59,0,0,0,0,"Putting instances of null in the `@repositories` array can be misleading for packages that want to use `atom.project.getRepositories().length` to know how many repos there actually are instead of how many potential repositories there could be. Right now, I'm filtering the array for non-null values each time I call it.
",320,True,en,0
6881,2,1,3,Internals,nathansobo,2015-05-21 00:25:16,61,20,1,0,":racehorse: Transforming the tokens and text for display when constructing a tokenized line is a bottleneck when opening large files. Above a certain threshold it needs to be made asynchronous, but this PR has some quick wins for the synchronous path by avoiding a bunch of allocation and unnecessary concatenation.
",316,True,en,0
6877,27,19,0,Internals,kevinsawicki,2015-05-20 21:44:40,84,26,11,0,"Updates the build to use electron 0.26 and gets Atom running on Chrome 42
- [ ] Test on Mac
- [ ] Test on Linux
- [ ] Test on Windows

Closes https://github.com/atom/atom/pull/6505
",181,False,en,0
6872,1,1,0,Externals,thekingofpython,2015-05-20 18:55:26,1,0,1,0,,0,False,en,1
6866,1,0,0,Externals,yodebu,2015-05-20 14:23:37,0,0,0,0,"help
",5,True,en,0
6843,1,5,0,Externals,oclbdk,2015-05-18 16:16:30,0,0,0,0,"This will allow 3rd parties to start creating packages to allow users to perform actions by clicking on text.

Note the BSD-3-Clause license and patent grants.
",160,True,en,0
6781,1,5,0,Externals,svanharmelen,2015-05-14 08:45:41,1,3,2,0,"Currently these hard coded restrictions prevent some very valid use cases (will add a before and after screencasts at the bottom) and limit the possibilities to implement correct indentation. As far as I’ve tested with it, I did not
find any negative and/or unexpected behaviour with the restrictions removed, but of course I did not test with all possible languages Atom supports.

If it turns out there is a language that does have negative effects from this change, I would argue that the correct place to fix that is in the specific language package by altering the increaseIndentPattern and/or (more likely) the decreaseIndentPattern, instead of relying on these hard coded restrictions.

Before:
![before](https://cloud.githubusercontent.com/assets/4171547/7628544/db28e958-fa24-11e4-9599-126bd61ef749.gif)
As you can see here the bracket isn't indented correctly when moving it to the next line. The decreaseIndentPattern is correct as it does increase when removing and typing in the bracket again on the same line.

After:
![after](https://cloud.githubusercontent.com/assets/4171547/7628620/df8dfb5e-fa25-11e4-9056-b58b4aee31fa.gif)
After removing the hard coded restrictions, the bracket is indented as expected.
",1225,False,en,0
6778,1,1,0,Externals,andrewrothman,2015-05-14 04:40:58,2,0,1,0,"This pull request adds the recent files list to the Atom dock icon's menu on Mac OS.

![screen shot 2015-05-13 at 9 37 23 pm](https://cloud.githubusercontent.com/assets/742678/7626165/7d4f455a-f9b8-11e4-90c2-2b3ab95e7f00.png)

Electron's API supposedly also supports Windows, so theoretically this patch should also work on that platform, but I'm not able to test it.

No change will be visible on Linux.

Unfortunately I attempted to add a Clear Recent Documents dock menu item using the Electron API, but I wasn't able to make that work. Maybe someone else has some guidance on that or can implement it themselves.
",617,True,en,0
6775,1,2,0,Externals,paulcbetts,2015-05-13 23:33:38,1,0,1,0,,0,False,en,0
6744,1,2,0,Externals,Azure-Agst,2015-05-11 21:52:54,0,0,0,0,,0,False,en,0
6688,1,3,1,Externals,dantaex,2015-05-07 18:23:21,2,2,1,0,"'ctrl-shift-up': 'editor:move-line-up'
'ctrl-shift-down': 'editor:move-line-down'
For some reason this is default for OSX but not for Linux, while Sublime's default configuration for this keymap in Linux and Windows is indeed moving the line up or down
",253,False,en,0
6686,1,2,0,Externals,dantaex,2015-05-07 18:15:59,2,2,1,0,"  'ctrl-shift-up': 'editor:move-line-up'
  'ctrl-shift-down': 'editor:move-line-down'
For some reason this is default for OSX but not for Linux, while Sublime's default configuration for this keymap in Linux and Windows is indeed moving the line up or down
",257,False,en,0
6673,8,12,1,Externals,mnquintana,2015-05-06 21:34:19,36,0,2,0,"Fixes #4084 

The spec is failing but it really shouldn't be... it looks like it's because `DisplayBuffer::getVisibleRowRange` seems to always return `[0, 0]` when running specs, which `TextEditorElement::getLast/FirstVisibleScreenRow()` makes use of. @nathansobo any idea what might be going on there?

/cc @atom/feedback 
",324,True,en,0
6659,1,3,0,Externals,jgebhardt,2015-05-05 23:57:36,1,1,1,0,"This makes [React addons](https://facebook.github.io/react/docs/addons.html) available on `atom.React.addons`.

Without this change, developers using `React.addons` either need to pull in a completely different React build that includes addons (bad), or use addons from another react module (also bad, because the module may have diverged from `atom.React`).
",359,True,en,0
6648,7,12,0,Externals,mnquintana,2015-05-04 23:34:20,60,0,3,0,"This adds the method `::isCursorOnScreen()` to `TextEditorElement`, which makes it a lot easier to determine whether or not a cursor is visible on screen without having to do the rows comparison yourself. This is especially handy for testing, but could certainly have other uses for package authors.

/cc @atom/feedback @nathansobo
",332,True,en,0
6574,7,0,0,Externals,jlord,2015-04-29 23:57:14,26,1,4,0,"This adds a dependency and replicates the way npm handles 'shortcut' repository urls in package.json, turning them into urls. 

Closes atom/settings-view#387
",158,True,en,0
6505,3,2,0,Externals,tomoya,2015-04-24 06:57:12,34,34,15,0,"Replace to electron from atom-shell

![2015-04-24 15 53 36](https://cloud.githubusercontent.com/assets/18009/7314136/3ff31d7e-ea9c-11e4-996d-864d254aac76.png)
",159,True,en,0
6489,6,4,0,Externals,brettle,2015-04-23 08:43:29,0,0,0,0,"`app.saveState()` was being called after the window was closed, resulting in no state being saved.
",99,True,en,0
6438,1,9,0,Externals,Jonahss,2015-04-20 02:31:47,20,20,8,0,"The one thing I can't understand is why the built app is called Electron.app instead of Atom.app. Help?
",104,True,en,0
6425,4,7,0,Externals,saschanaz,2015-04-17 16:41:28,108,20,3,0,"Fixing #1783. Both Soft Wrap and Soft Wrap At Preferred Line Length works.

PS: Well, I just found there's another pull request which seems to have similar purpose. I don't know... Hmm.
",186,True,en,0
6419,3,8,0,Externals,jessegrosjean,2015-04-17 14:41:37,192,1,7,0,"Currently Atom has panel layers for top/left/right/bottom and modal. I think it would also be useful to have a 'popover' panel layer. This would be an absolutely positioned layer above all other window content (except modal panel layer). Panels are absolute positioned within it. Benefits include:
1. A standard place (using existing panel API) for inserting overlay elements. Now it seems the common practice is for packages to insert popover UI arbitrarily into the DOM.
2. Support more use cases then TextEditor 'overlay' decorations, because the popover panel layer would allow popovers anywhere in the Atom window, not just within a text editor. This layer might also be a place to solve https://github.com/atom/atom/issues/5469.
3. Optionally implement popover layout logic once instead of having each package implement it badly once. Popover layout logic is somewhat complex since generally popovers want to be positioned relative to an existing element while also not being clipped by screen edges.

This pull request is a minimal start. It defines the popover layer and API for adding panels. But it doesn't perform any positioning logic. Assuming people like this idea I would also like to add positioning options and logic with the basic goal being:
1. Uses should be able to position panel at arbitrary position on screen
2. Or users should be able to position panel relative to an existing element on screen similar to Cocoa's [NSPopover](https://developer.apple.com/library/mac/documentation/AppKit/Reference/NSPopover_Class/index.html#//apple_ref/occ/instm/NSPopover/showRelativeToRect:ofView:preferredEdge:).

Thoughts?
",1636,False,en,0
6386,3,14,5,Externals,Seidr,2015-04-15 12:58:03,20,2,2,0,"I started looking into this when a colleague mentioned the lack of exclusion when searching files in Atom. I'm not sure whether or not what I've done is the _correct_ way of doing it, but from what I can see it is working.

Any search paths that a prefixed with either the tilde or exclamation mark character will be excluded from the scan, with the excluded paths as a prefix (although it appears to work using the glob syntax, as well).

Referencing issue atom/find-and-replace#149
",484,True,en,0
6379,2,2,6,Externals,furious,2015-04-14 20:36:44,0,0,0,0,"I like portable apps, but I don't wanna create an env. variable in every computer I plug my USB drive. So I did this to solve my (or everyone's?) problem.
",155,True,en,0
6346,1,14,0,Externals,MicahZoltu,2015-04-12 18:20:23,0,0,0,0,"Fixes https://github.com/atom/atom/issues/6345.

This doesn't address the migration issue where a user may be upgrading from a previous version of ATOM and have files currently stored in `~/.atom`.  How this is resolved is a much bigger design decision than I am qualified to make so I will leave it up to the Atom maintainers.

My 2 cents is that migration occurs on first-run after an upgrade.  It is unclear to me if Atom has mechanisms in place to make this easy or not.  Alternatively, every run of atom could check to see if there are files in the old location and if so, migrate them.
",592,True,en,0
6269,1,0,0,Externals,jlord,2015-04-06 18:03:41,1,1,1,0,"Use the latest version `settings-view` which includes changes to better remove buttons. 
",89,True,en,0
6245,1,27,2,Externals,jussi-kalliokoski,2015-04-03 21:35:42,30,1,3,0,"Introduces a config entry called packagesWithKeymapsDisabled that allows users to disable specific packages' keymaps.

![atom-disable-keymaps-for-packages](https://cloud.githubusercontent.com/assets/547186/6989279/685b23f0-da62-11e4-8038-6e74e4299f2c.gif)
",256,True,en,0
6099,5,15,1,Internals,maxbrunsfeld,2015-03-25 18:43:11,191,217,15,0,"#### Motivation

Currently, any npm modules we work on (e.g. `text-document`) need to use jasmine 1.3 so we can run specs in Atom, which is really useful for debugging. Without Atom's monkey-patched `waitsFor`, Jasmine 1.3 is basically unusable for testing async code (it only supports polling, no callbacks). Rather than have `text-document` and other libraries vendor atom/atom's customized version of jasmine 1.3, we should just use jasmine 2.
#### Changes

This allows packages and npm-modules to opt-in to using Jasmine-2.0 for the `application:run-package-specs` command in Atom. Packages opt in by adding `atom-jasmine: ""^2.0.0""` to the `engines` object in their `package.json`.

Currently, when using Jasmine 2, `spec-helper` is not loaded. I think it would be nice to eventually stop using the miscellaneous global functions defined in that file. Some of them (e.g. the non-standard `jasmine.advanceClock`) duplicate functionality that is built into jasmine.

I am thinking that some community members might be interested in upgrading individual package's test suites to use Jasmine-2.0. We could make `good-first` issues for doing that in various packages.
- [x] Make the `AtomReporter` support the jasmine 2 reporter API
- [x] Make sure `fit`, `fdescribe` et al work w/ jasmine 2
- [x] Make sure `apm test` works w/ jasmine 2
#### Questions
- [ ] This PR also removes the `application:run-all-specs` command. It doesn't seem like that command is used anymore, and it would have been difficult to preserve it while adding support for Jasmine-2.0 in the 
  AtomReporter. Also, it would be very difficult to support that command's functionality if individual packages started to migrate to Jasmine-2.0.
- [ ] Is the `engines.atom-jasmine` the right way to do this?

/cc @atom/core @atom/non-github-maintainers I'm not sure if it's overly aggressive to get rid of `run-all-specs` command. What do you think?

Refs #5393.
",1928,True,en,0
6087,1,2,0,Externals,rossPatton,2015-03-25 02:18:06,0,0,0,0,"`apm test` -> `npm test`

no contribution too small?
",53,True,it,0
6086,4,27,4,Externals,ghost,2015-03-25 00:51:27,0,0,0,0,"This is better behavior for alt-del/backspace operations, is less ""greedy"" and doesn't eat up excess characters.
Also set default key mappings to these, feel free to trash my changes to keymaps/darwin.cson. Though I do feel this should be default behavior, personally.
",269,False,en,0
6084,7,0,0,Externals,jlord,2015-03-24 23:22:57,1,1,1,0,"Use the latest version of `status-bar` which adds the deprecation call on the legacy provided service. :zap: :zap: :zap: 
",122,True,en,0
6083,67,23,8,Internals,as-cii,2015-03-24 20:26:09,317,207,10,0,"Fixes #6055 

This is still a work in progress: code is messy and specs are not passing yet. ~~With this PR we basically wrap every character with a span so that we're able to measure it. This helps to calculate the real character's width on screen: whenever this is not possible, however, the current solution falls back to `@defaultCharWidth`.~~

We have split the `TextEditorPresenter` and the `TextEditorComponent` updates in two phases: pre-measure and post-measure. The former should calculate anything related to lines, whereas the latter  performs updates which need to be based on lines measurement.
- [x] Write new specs to consolidate this behavior
- [x] Make existing specs pass
- [x] Remove references to scoped char width
- [x] Scrolling into an unmeasured line with decorations (or cursors) has issues (since we don't measure such lines on scroll anymore and updating them doesn't require any user action)
",921,True,en,0
6075,1,15,1,Externals,mathiasvr,2015-03-23 21:25:47,0,0,0,0,"This should fix #6070
",22,True,en,0
6071,1,1,0,Externals,mathiasvr,2015-03-23 17:50:44,0,0,0,0,"To make previewable pane items part of the atom core as discussed in #3683 and https://github.com/atom/tree-view/issues/3, I added this pull request to help speed up the process.

I added a `previewItem` property similar to the `activePane` property, which allows for simple implementation in the tree-view and tabs packages.

I know this is not a high priority for atom right now, but if this is helpful I can add specs and post my tree-view and tabs implementation as well?

Suggestions are very welcome! :smiley: 
",517,True,en,0
6062,1,2,0,Externals,ypresto,2015-03-22 13:16:13,1,1,1,0,"I feel atom is very laggy while typing fast or key repeat (than vim :) ).
Especially lag on repeating j/k caret move is huge, freezes for seconds.

With time profiler, I found continuous keydown events block main thread for >10sec (!).

![2015-03-22 21 03 57](https://cloud.githubusercontent.com/assets/400558/6769259/482ce42c-d0d7-11e4-8915-66825d458791.png)

![2015-03-22 21 05 36](https://cloud.githubusercontent.com/assets/400558/6769260/49c7114a-d0d7-11e4-9495-2faeb35e8170.png)

This happens even if vim-mode is disabled.

It is significant because I use [Karabiner](https://pqrs.org/osx/karabiner/index.html.en) to make key repeat even faster than maximum speed of OS X preferences.

This PR increases rendering rate by deferring keydown event handling until next setTimeout dispatch.
This enables to refresh screen before handling next key event.
Lag on fast typing in insert mode is reduced too.

Left: before, right: after!

![atom-key-typing-speed-720p](https://cloud.githubusercontent.com/assets/400558/6769489/08a94b06-d0e1-11e4-9918-09a3fcf02103.gif)

(I'm wondering that there is so much idle time after releasing key and before main thread is released. See below.)

![2015-03-22 21 08 37](https://cloud.githubusercontent.com/assets/400558/6769269/d6cf159c-d0d7-11e4-91d6-4fa546bc26b9.png)
",1305,False,en,0
6050,1,11,1,Externals,seansay,2015-03-20 16:32:10,11,3,2,0,"Fixes https://github.com/atom/atom/issues/5963 , seems there shoud be using `\S`. 
But I'm not be able to run the test locally, please review
",142,False,en,0
6042,1,3,0,Internals,as-cii,2015-03-19 20:39:09,2,2,1,0,"...which were caused by the recent soft-wrap hanging indent change. The random
mutation editor was not calling `softWrapAt` appropriately. In facts, it was not
passing `hangingIndent` as a parameter, which means it was treated as `null`:
when summed to `totalIndentationSpaces` the result was always `NaN`, thus
exhibiting strange behaviors.

@nathansobo: sorry about this issue :disappointed: I have managed to reproduce it on master as well, though, and I'd say we can safely bring back the reverted branch into master :+1:  

This brings up another important question, which I am not sure I know the answer of: how could we can reduce the coupling between the random text editor and our real production code?
",712,False,en,0
5972,1,3,0,Externals,olmokramer,2015-03-15 11:32:35,0,0,0,0,"Listen to `core:cancel` on `atom-workspace`. When triggered dismiss notifications.
",83,True,en,0
5931,8,9,2,Internals,as-cii,2015-03-11 11:19:53,80,60,3,0,"This partially addresses #5882, read on to understand why it doesn't fully solve it.
### Benchmark

_Benchmark performed using the `test-multiple-lines.js` file found on the aforementioned issue with soft-wrap disabled._
#### Steps
- Select all
- Hit Cmd+J (`core:join-lines`)
#### Before :chart_with_downwards_trend:

![screen shot 2015-03-11 at 11 35 04](https://cloud.githubusercontent.com/assets/482957/6594583/db8b0fbc-c7e2-11e4-8717-4e416c763957.png)
#### After :chart_with_upwards_trend:

![screen shot 2015-03-11 at 11 36 12](https://cloud.githubusercontent.com/assets/482957/6594610/fcec7222-c7e2-11e4-93ed-2311d4cb2d59.png)

On my machine this is almost 3x faster :racehorse: :racehorse: :racehorse: 
### Considerations

Most of the time was spent in autoscrolling (which is something we can do at the end of `joinLines`) and in updating the UI (some operations were not batched). Now time is spent mostly on scanning tokens, which is something that needs to be addressed in another layer (see #979).

![screen shot 2015-03-11 at 11 46 33](https://cloud.githubusercontent.com/assets/482957/6594782/866d817a-c7e4-11e4-9d4c-0a5464c8551f.png)

The situation is dramatically different for soft-wrapped lines. For this particular scenario, in facts, there's a significant amount of throwaway computation involved. When multiple lines are joined together, the operation does not happen atomically but causes `DisplayBuffer` to continuously update the first screen line as more and more lines are joined into the first one. This is quite cheap when soft wrapping is off, but it becomes very expensive when we turn it on:

![screen shot 2015-03-11 at 12 02 40](https://cloud.githubusercontent.com/assets/482957/6595024/8ffc8432-c7e6-11e4-976c-0cf6665e5e90.png)

:fearful:
- One solution could be to make `updateScreenLines` smarter, and reuse previous screen lines as a starting point for updates. However, that would involve a radical change in how we tokenize lines and I feel like this is an improvement that we should make at a lower layer, e.g. while addressing #979 
- Another way to tackle this would be to start batching `DisplayBuffer#handleTokenizedBufferChange` on `TextEditor#transact`. On one hand I find this quite smart, but on the other hand there's a lot of event-handling involved (e.g. markers) and I am afraid this change could break many things. Based on my first trials, I would say it will. @nathansobo: batching, batching everywhere :scream: :smile: 
- Alternatively, all those methods like `Selection#joinLines` could directly operate on the buffer, as if an external program performs the action, and `DisplayBuffer` sees only the final result. This is similar to the solution provided above, but addresses the issue from a different perspective, probably breaking abstraction.

Personally, I feel like the second solution provides quite a lot of benefits without breaking abstractions or changing how we deal with tokenized line. What do you think? 
",2978,False,en,0
5923,1,1,0,Externals,gutierri,2015-03-10 18:50:37,0,0,0,0,"An alternative to Chocolatey
",29,True,en,0
5910,4,5,0,Externals,liuxiong332,2015-03-09 14:02:35,119,4,5,0,"- invalidate document's drop event to prevent the browser's default behavior that open the file URL.
- this commit fix bug #4049. Every pane element will listen `drop` event to make drop action take in this pane view, therefore the drop files will open in the correct split view.
",280,False,en,0
5895,1,3,0,Externals,basarat,2015-03-07 22:35:54,1,1,1,0,"But worth mentioning that you need an explicit install. Refs https://github.com/atom/atom/issues/5888
",102,True,en,0
5893,1,1,0,Externals,ghost,2015-03-07 22:27:02,0,0,0,0,"Clean code. 
",13,True,en,0
5844,1,12,0,Externals,russlescai,2015-03-04 23:41:54,30,0,2,0,"Fixes #3709.

Adds configuration item to enable or disable folding.

This includes disabling the Folding menu item.
",116,True,en,0
5830,1,1,0,Externals,bolinfest,2015-03-03 23:00:07,49,5,3,0,,0,False,en,0
5813,4,5,1,Externals,bolinfest,2015-03-03 07:32:08,55,12,2,0,"Previously, the challenge in restoring a root folder created by a `DirectoryProvider`
was that the `DirectoryProvider` that created the root folder during the previous
session may not be available when the `Project` is restored via deserialization.

This adds a new method to the `DirectoryProvider` API named `getHostPackage()`
(it also bumps the version of `atom.directory-provider` from 0.1.0 to 0.2.0).
A `DirectoryProvider` must return the name of the Atom package that provided it
or `null`. (Surprisingly, it is not possible to get this information programmatically
today, though ServiceHub could potentially be expanded to provide this. However,
it would only work for providers statically declared in `package.json`, but not for
those that are registered dynamically, so it might not be worth it.)

When a `Directory` is created via a `DirectoryProvider`, the correspoding Atom
package via `DirectoryProvider::getHostPackage()` is recorded as part of the `Project`
so it can be serialized along with the `Project`'s paths.

This way, when `Project` is deserialized, paths that have a corresponding ""host package""
can be filtered from ones that do not. Paths without a corresponding host package will
be loaded normally. Those with a host package will have their package activated so
the `DirectoryProvider` can be restored, which will hopefully be able to recreate the
root folder from the previous session.

When a new `DirectoryProvider` is registered, the `Project` checks to see whether
there were any paths from the previous session that correspond to its host package.
If so, each path is fed to the provider's async `directoryForURI` method. Assuming it
returns a `Promise` that returns a non-null value, the path will be added to the
`Project` via `atom.project.addPath()`. This allows the provider to do any async I/O
or network communication it needs to do to recreate the `Directory` (which it should
cache) before its synchronous `directoryForURISync()` method is invoked as a side-effect
of `atom.project.addPath()`. Assuming the provider caches the path->`Directory` mapping
during the async invocation, it can return it immediately as part of the sync invocation.
",2188,False,en,0
5812,1,6,15,Externals,benogle,2015-03-03 02:41:39,51,1,3,0,"This will add an `Workspace::onWillOpen` event to allow fixing https://github.com/atom/welcome/issues/26. Usage would look something like this

``` coffee
# Suppress the opening of the initial empty buffer
atom.workspace.onWillOpen ({uri, options, cancel}) ->
  cancel() if options.isInitialEmptyBuffer
```

Refs https://github.com/atom/welcome/issues/26

How do you guys feel about this approach?
",398,True,en,0
5755,2,0,0,Externals,jlord,2015-02-26 01:24:13,1,1,1,0,"Use the latest version of `status-bar` with the new Services API versioning. 

To go out with 0.185.0. The packages consuming this new version of `status-bar` will go out with 0.186.0
",184,True,en,0
5729,1,16,0,Externals,thedaniel,2015-02-25 01:30:24,4,0,1,0,"cc @atom/core 

In my heart I just want to say that ""+1 comments will be deleted"" but that's a strong hand. Let's start with a kind suggestion.
",144,True,en,0
5701,1,6,0,Externals,sedabull,2015-02-23 22:14:08,0,0,0,0,"Issue #5602 is that packages that are `apm link --dev`ed are undefined and unusable in a normal `atom` session. While reading through the `PackageManager` source today, I noticed that the path `~/.atom/dev/packages` is only added to the package search path when in `devMode`. This tiny fix should resolve that issue.
",317,True,en,0
5659,11,1,2,Externals,batjko,2015-02-20 22:31:39,9,8,1,0,,0,False,en,0
5658,1,10,9,Externals,driskell,2015-02-20 21:20:03,158,15,6,0,"This is a proposal for fixing #5642 and I'd welcome feedback on if this is the right approach or not?

The problem, is copying pasting PHPDoc code at an indented level, with hard tabs on, loses the asterisk alignment:

![example](https://cloud.githubusercontent.com/assets/939815/6273202/41e81dbe-b865-11e4-8ea5-a5354bdbb50c.gif)

**Root Cause**

Seems inside Atom, in the case of encountering soft tabs in a hard tab file... it can return a _floating point_ indentation level, such as 1.5 in this instance (tab+half-tab). When rebuilding the indentation (it calls setIndentationForBufferRow for each line), this calls @buildIndentString with 1.5 which gets converted to integer: 1. ALL leading whitespace is then replaced by this new indentation - so we lose the space that aligns the asterisk.

The tests seem to point to floating point indentation levels being allowed. Yet I can find nowhere where it is useful. Most places just Math.ceil(). And with hard tabs it doesn't even make sense.

This patch attempts to remove all the floating points (it leaves the Math.ceil calls - they're harmless and can be cleaned later if this turns out the right approach.). It then has a function for ""modifying"" whitespace to change its indentation level, while paying attention to straggling spacing like that in the PHPDoc comments in the image above. It also adds a couple API for handling indentation changes that can be used elsewhere.

Only thing I'm not too happy with is the overlap between my ""setIndentLevelForRow"" and the existing ""setIndentationForBufferRow"" - I'm sure mine follows correct naming convention but existing doesn't. It is the existing one that is called when pasting though.
",1692,True,en,0
5598,3,2,0,Externals,a-moses,2015-02-17 22:58:53,0,0,0,0,"Add friendly  depend for  debian (testing/unstable versions)  and ubuntu 14.04TLS 
",83,True,en,0
5561,1,3,0,Externals,silvenon,2015-02-14 21:12:37,1,1,1,0,,0,False,en,0
5531,1,4,0,Externals,bolinfest,2015-02-12 21:16:43,46,24,2,0,,0,False,en,0
5499,4,4,0,Externals,jessegrosjean,2015-02-11 15:56:55,0,0,0,0,"This exports the pathwatcher File and Directory classes through require('atom').

I think this makes sense since those classes are already publicly documented as part of the [Atom platform API](https://atom.io/docs/api/v0.178.0/Atom), but currently there's no way for a package to require and instantiate them. The alternative is to add the pathwatcher module to my own package, but this seems redundant since File and Directory are already documented as part of the Atom platform.
",482,True,en,0
5494,2,1,0,Externals,bolinfest,2015-02-11 05:42:44,164,11,3,0,"This changes `getPaths()` to be an async method that iterates over the `RepositoryProvider`
objects registered via `atom.repository-provider` and asks each one to try to create a `Repository`
for the `Directory` that corresponds to the path. This uses the async `repositoryForDirectory()` API
instead of the `createRepositorySync()` API that was used before.

Currently, `getPaths()` maps a path to a `Directory` asynchronously via the following basic logic:

```
Promise.resolve(new Directory(path))
```

But in a follow up diff, I'll introduce the `DirectoryProvider` described in
https://github.com/atom/atom/pull/5428, so it will be possible to register a custom handler
to map special paths, such as `ftp://`.

This builds on https://github.com/atom/atom/pull/5491.
",771,False,en,0
5449,4,9,2,Externals,Nadrieril,2015-02-08 14:35:36,0,0,0,0,"Displays vim-like relative line numbers in gutter, with option to show true current line number instead of zero on current line
https://github.com/atom/atom/issues/1612
",169,False,en,0
5445,250,6,1,Externals,h0dgep0dge,2015-02-07 06:19:19,22,2,4,0,"This is less of a serious pull request, and more a prompt for discussion. I've written a proof of concept that disables automatic changing of indent based on a setting on the preferences screen.
",195,True,en,0
5436,3,1,1,Externals,mattberkowitz,2015-02-06 15:13:54,0,0,0,0,"Per advice of @thomasjo in https://github.com/atom/atom/pull/5429#issuecomment-73186684, added the following to config.coffee documentation to help other users:
#### External Config Schemas

If you would like to store your schema in an external file and require it, you must require it prior to setting the `config` value in `module.exports`:

```
ConfigSchema = require('./configuration.coffee')
module.exports =
  config: ConfigSchema
```

not:

```
module.exports =
  config: require('./configuration.coffee')
```
",517,False,en,0
5432,4,5,3,Internals,as-cii,2015-02-06 10:57:41,0,0,0,0,"Closes #5301 

/cc: @benogle 
",30,True,de,0
5429,1,2,0,Externals,mattberkowitz,2015-02-06 03:26:20,0,0,0,0,"I have an object config value like (taken from my config rewrite for https://github.com/mattberkowitz/autoclose-html/tree/new-config):

```
    neverClose:
        type: 'object'
        properties:
            elements:
                title: 'Never Close Elements'
                description: 'Comma delimited list of elements to never close'
                type: 'array'
                default: ['br', 'hr', 'img', 'input', 'link', 'meta', 'area', 'base', 'col', 'command', 'embed', 'keygen', 'param', 'source', 'track', 'wbr']
            makeSelfClosing:
                title: 'Make Never Close Elements Self-Closing'
                description: 'Closes elements with "" />"" (ie <br> becomes <br />)'
                type: 'boolean'
                default: true
```

If I change the default value for one of the properties, such that my entry in config.cson looks like:

```
  ""autoclose-html"":
    neverClose:
      makeSelfClosing: false
```

The other property wont show up in the plugins config panel, thus not allowing the user to set a value for it. This is due to the fact that `_.defaults()` does not do deep merging

This change loops over the defaultValues keys, and recursively sets to `getRawValue` for each key's path.
",1242,True,en,0
5428,2,3,0,Externals,bolinfest,2015-02-06 01:52:07,64,22,2,0,"With this change, `Project` registers as a consumer of `""atom.repository-provider""`.
When `atom.project.setPaths()` is called, if a path does not have a `GitRepository`
associated with it, it will see if any of the providers of `""atom.repository-provider""`
can produce an appropriate repository object.

I have a test package with a dummy implementation of `HgRepository` and the following
stanza in its `package.json`:

```
  ""providedServices"": {
    ""atom.repository-provider"": {
      ""versions"": {
        ""0.0.1"": ""createHgRepositoryProvider""
      }
    }
  },
```

I verified that my provider was considered for a path with an Hg repo and that my
`HgRepository` was created and assigned to the `ProjectRoot` that was constructed.
",738,False,en,0
5425,1,3,0,Externals,bolinfest,2015-02-05 23:03:40,48,22,2,0,"Introduce ProjectRoot.

Today, Project has three methods that return parallel arrays:

```
getPaths()
getDirectories()
getRepositories()
```

Instead, there should be one type, `ProjectRoot`, that encapsulates
all of this information. Then these three methods can be replaced
with one method:

```
getProjectRoots()
```

This commit introduces the `ProjectRoot` type and the `getProjectRoots()`
method. The other three methods are now defined in terms of `getProjectRoots()`.

Note that there are two outstanding methods on `Project` that assume a single
root that seem out of place:

```
relativize(fullPath)
contains(pathToCheck)
```
",636,True,en,0
5413,1,6,0,Externals,sedabull,2015-02-05 04:48:51,0,0,0,0,"This PR come coupled with two questions for the core team. The first is `CommandRegistry::onWillDispatch` is undocumented, so does that mean it is either not a part of the public API, or soon to be deprecated? If so then please ignore this proposal. The second question, assuming this method is meant to be public, is doesn't it make sense to have a matching `::onDidDispatch`? I have a particular use case for this event. I'm currently writing a terminal emulator for Atom, and in it I'm defining a special `atom` builtin. It is essentially a small wrapper around `atom.commands.dispatch` that allows a user to send commands directly to atom via the command line. It works great, except that after the command has executed, my input element loses focus. This hook would allow me to do something like:

``` coffeescript
atom.commands.onDidDispatch -> document.querySelector('#quantum-shell-input').focus()
```

to return focus to my package after the command has executed.
",973,True,en,0
5393,10,9,0,Internals,as-cii,2015-02-04 09:54:42,0,0,0,0,"Partly related to #5354 I decided to investigate how difficult could it have been to upgrade Jasmine to 2.1.1.

:warning: **Please note that this is an experimental branch and there are a bunch of features that do not work yet (including some specs which do not pass due to Jasmine breaking changes)** :warning: 
### What doesn't work
- [ ] `TerminalReporter`. I excluded it for the time being and I am using Jasmine's `ConsoleReporter` 'cause it seems to provide almost all functionalities. On the other hand it seems like `apm test` doesn't exit (even when specs have finished) and I suppose it may be related to this; 
- [ ] `TimeReporter`. 2.0 introduced a new way of creating custom reporters and this has to be adapted as well.
- [ ] Old async specs. I provided some examples (e.g. upgrading some specs) about how Jasmine 2 is supposed to work with asynchronous tests. You can find more information [here](https://github.com/jasmine/jasmine/issues/526).
- [ ] Old custom matchers. The syntax has changed for those as well. I updated `vendor/jasmine-jquery.js` to allow some of the matchers to be compatible with the new specification, but there are still a bunch of them which aren't ported yet;
- [ ] Old spies expectation. Many expectation have changed since 1.3 and now need to be upgraded (`andCallThrough` vs. `and.callThrough`)
- [ ] `setIncludedTags`. This should filter out some specs as far as I understand, but Jasmine doesn't seem to provide an alternative. Needs further investigation. 
- [ ] `waits(0)`. This served as a way of yielding to the UI thread. `waits` method does not exist anymore, and therefore we need to find another solution.
- [ ] `setSpecField`. `currentRunner()` method has been deprecated, thus we need to find another solution. I wonder if this is still needed, therefore it would be great if you could provide some feedback :pray:
- [ ] Suspicious Jasmine initialization. I am not 100% sure the solution below is the best practice to load Jasmine, but I couldn't find any other feasible initialization strategy. Needs investigation but it should be straightforward.
  
  ``` coffee
  Jasmine = require ""jasmine""
  window.jasmine = (new Jasmine).jasmine
  
  {ConsoleReporter} = require ""jasmine""
  ```
- [ ] Running test via UI. For now I have only used `apm test` to run tests, but we need to make sure that `AtomReporter` works fine as well.

I am sure I left out many other things which are not evident to me (it's my first contribution to Atom, as you may already know), therefore please feel free to leave a comment wherever you find something suspicious so that I can update incrementally this main post to keep track of what's missing.
### Discussion

As @thedaniel mentioned on #5354 one of the main concerns of upgrading is to keep package specs working. Quoting his statement:

> All community package specs are written to 1.3 so there would need to be some kind of mechanism to allow a package to opt-in to 2.0 and run 1.3 by default

A possible solution may be to have two separate suites:
- A jasmine 2 bootstrap, which loads all the specs that are known to be compatible (package owners may tag such specs somehow, maybe a filename suffix or a subdirectory could be sufficient);
- A jasmine 1.3 bootstrap (the default one), which will load any other spec;

I am still not sure how difficult could it be to make this approach work, but I hope we can discuss about it :smile:

---

I couldn't tackle this all on my own, especially because I cannot contribute to Atom full-time and this is my first contribution. On the other hand I hope this Pull Request can be a good starting point for us to go on and :shipit: !
",3668,True,en,0
5364,1,1,2,Externals,JoeUX,2015-02-02 23:32:15,1,1,1,0,"I just added a sentence in the first paragraph: ""You can write a package in Javascript or CoffeeScript.""

This doesn't seem to be declared anywhere. We can apparently write packages in JS but the word 'Javascript' is nowhere in the doc. index.coffee would presumably imply to readers that packages are written in CoffeeScript, but this should be stated explicitly, and early. (And the JS option will be hugely important to many.)
",430,True,en,0
5339,0,15,2,Externals,eestrada,2015-02-01 05:41:45,0,0,0,0,":penguin: This completes a missing feature of pull request #5336 which in turn references issue #5331. Basically, the new version of the atom.desktop file from pull request #5336 allows the desktop environment to scan its icon path for the ""atom"" icon. This is great! The only catch is the icons weren't actually being placed in that path yet. This pull request solves that issue. :smile:

As an added bonus, this pull request replaces a hardcoded path in the atom.spec.in file that pointed to the default build location (""/tmp/atom-build""). This would break if someone builds to a non-standard location and tries to build an RPM from it. Now, regardless of where the initial build is done, the RPM build should work.
",718,True,en,0
5336,1,2,0,Externals,edgard,2015-01-31 17:07:00,0,0,0,0,"This makes Atom a better desktop citizen relocating to where the usual install
directory is (like on the debian package) and also fix the icon using absolute
paths, breaking icon-themes.

Fixes #5331
",200,False,en,0
5227,1,9,1,Internals,maxbrunsfeld,2015-01-22 22:58:17,60,44,1,0,"This way we can do `grunt run-specs:markdown-preview` to debug a single package's specs on CI.
",95,True,en,0
5176,3,1,0,Internals,kevinsawicki,2015-01-20 23:15:08,22,9,4,0,"Previously core was on space-pen 3.8 which meant it wasn't getting deduped across packages and so we were shipping 28 versions of it in the app.

This also upgrades Atom to jQuery 2.1.3 via https://github.com/atom/space-pen/pull/63
",232,True,en,0
5150,1,3,0,Externals,braver,2015-01-19 20:39:21,0,0,0,0,"It's not really a bug, but I think the `max-height: 200px` is a bit arbitrary.  On small screens it may be too much, on large screens perhaps you could show some more. I think it would make sense to use the `vh` unit here.

PS. Ran into this when debugging a little layout issue in autocomplete-plus. https://github.com/atom-community/autocomplete-plus/issues/194
",364,True,en,0
5067,1,2,0,Externals,dmnd,2015-01-14 23:53:33,3,3,1,0,"See also alexcorre/git-blame#56

Note: I didn't check for other instances of this refactoring error
",100,True,en,0
5047,1,8,0,Internals,simurai,2015-01-14 04:43:02,1,1,2,0,"**Update II** We could wait with this since it might get fixed in Atom Shell: https://github.com/atom/atom-shell/issues/863

**Update**: It now only adds a `32px` icon, see https://github.com/atom/atom/pull/5047#issuecomment-69874810

This PR adds icons as `png` in multiple resolutions. See https://github.com/atom/atom/issues/4811#issuecomment-69702057

I tested it locally on Windows 8.1. Not by making a new build, but just adding it manually. It seemed to work, but I only have a non hi-res screen. So not sure if it will pick up the 1.5x or 2x version for higher DPIs.
",575,True,en,0
4898,3,8,0,Externals,hakatashi,2015-01-07 17:40:12,42,8,4,0,"I need this fixed and I tried to fix it.

This also changes the behavior of TokenizedLine.isComment(), which is not documented in API docs and I believe this is not harmful... It now treats empty lines inside a block comment (not a single-line comment) as a comment. Thanks.

Fix #4140
",286,True,en,0
4831,56,0,0,Externals,grobe0ba,2015-01-02 20:47:46,0,0,0,0,"Added information concerning bash and setting CC and CXX on FreebSD to docs/build-instructions/freebsd.md
Added 'Highly Experimental' sub-bullet to README.md underneath FreeBSD
",177,False,en,0
4781,1,1,0,Externals,ultramiraculous,2014-12-27 21:27:37,3,0,1,0,"Attempt to fix #4780.  

The event listener solution is probably hacky.  I mostly don't quite know when the DisplayBuffer is fully ""initialized""/has a height, width, etc.  As of right now if I attempt to call @scrollToCursorPosition() in TextEditor's constructor (at say line 105), the DisplayBuffer has no size information when it gets to scrollToScreenRange() and no scrolling occurs.
",387,True,en,0
4733,1,1,0,Externals,dsandstrom,2014-12-22 05:50:02,29,0,2,0,"This is a feature I miss from another text editor.
1. When the selection is only on one line, `ctrl-shift-d` duplicates the text to the right
2. When the selection takes up more than one line, `ctrl-shift-d` duplicates text down

Right now you have `editor.duplicateLines()` to accomplish 2.  But, I would like to add support for 1.  I added a function `editor.duplicateSelections()` instead of adding to the current function because I wanted to get feedback and get something working.
",486,False,en,0
4731,1,3,0,Externals,NerdDiffer,2014-12-21 20:20:40,0,0,0,0,"for manjaro (based on arch linux), I was getting this error after building & install atom: `/usr/local/share/atom/atom: error while loading shared libraries: libgconf-2.so.4: cannot open shared object file: No such file or directory`

after running `sudo pacman -S gconf`, i could open atom. hope this is of use to others.
",323,True,en,0
4624,1,5,0,Externals,oclbdk,2014-12-15 19:48:49,0,0,0,0,"The project API currently only supports Git. This diff makes it possible for 3rd-party packages to add support for other version control systems, addressing issue https://github.com/atom/atom/issues/4138.

Here's an example of a preliminary package that adds support for Mercurial: https://github.com/oclbdk/vcs-hg

Here's a demo of it in action:

![vcs-hg demo](http://i.imgur.com/3vOhrml.gif)
",395,True,en,0
4602,1,8,0,Externals,ardeshirj,2014-12-13 21:46:22,1,0,1,0,"In Ubuntu, the default theme is dark gray, so it is a nice match for the Atom dark default theme. However, in gnome-3 the default theme is white and it kind of contradicts with Atom dark theme. Here is how it looks:

![atom-white-theme](https://cloud.githubusercontent.com/assets/6003742/5467932/69d1b3c4-857c-11e4-936a-d217355b8061.png)

Since atom-shell is now supporting [dark theme in gtk3+](https://github.com/atom/atom-shell/blob/master/docs/api/browser-window.md#class-browserwindow) I thought it would be nice to have the dark theme by default, however there is an open issue [#765](https://github.com/atom/atom-shell/issues/765) in atom-shell where the menu bar will still be white while the top bar is black. Here is how it looks:

![atom-gnome-dark-1](https://cloud.githubusercontent.com/assets/6003742/5425488/d428c002-82cd-11e4-930e-1688794001ba.png)

I am going to leave this here so we can review it, and once the issue is resolved, you may want to merge it.

Thank you.
",986,True,en,0
4597,1,21,0,Externals,neojski,2014-12-13 13:28:51,1,1,1,0,"Fixes issue #4596.

There was already Math.ceil so no need for +1.

Example:
If
  height = 2.5, line height = 1
then
  heightInLines is 3 and not 4
",148,True,en,0
4567,5,5,0,Internals,nathansobo,2014-12-12 03:45:01,573,374,12,0,"This may be able to supplant #4558.

/cc @maxbrunsfeld: I got the get/set API looking good.
### Problems with Config API

The Config API still has some awkwardness leftover from when scoped settings were merged in. It would be nice to make the API more coherent considering the expanded role of settings.
- We're using a private method, `::addScopedSettings` in packages. We need a public equivalent. The main difference is that `::addScopedSettings` takes a `source` argument. The `source` is used to distinguish between user settings and package settings internally, so it's important.
- Methods related to defaults don't make sense in the presence of scoped settings. The methods `::isDefault`, `::restoreDefault`, and `::getDefault` don't actually deal with true _default_ values from the schemas. Instead they consider a value ""default"" if its source isn't the user's `config.cson`
### Proposed Solution

We can eliminate `::addScopedSettings` and the methods that deal with defaults from the API. Instead, we replace them with the ability to talk about the _source_ of a given setting when getting and setting it. Then the settings view can make decisions based on the source being the user's `config.cson`, rather than exposing a murky conception of ""default"" in settings.

We propose to replace the following methods:
- getDefault
- isDefault
- restoreDefault
- addScopedSettings

With these new signatures for get and set
- set(keyPath, value, [{scopeSelector, source}])
- get(keyPath, [{scope, sources, excludeSources}])

Plus the new `unset` method... which can be used to remove a single key path or all key paths from a given scope.
- unset([keyPath], [{source}])

If we need to know if a value is assigned in the user's settings, we specify the desired _source_ in our getter. If we get no value back, we can assume we're using some other value (maybe a schema default, mabye from a package). If we want to determine the non-user-assigned value, we exclude it as a source when getting the setting.
### Steps
- [x] Store global settings in the scoped property store under `*` so they're associated with a source
- [ ] Refactor the scoped-property-store to allow mutating values without always adding new entries to the cascade (atom/scoped-property-store#8).
- [ ] Bugfix: Ensure the most recently assigned setting is honored when there is a specificity tie.
",2372,True,en,0
4558,6,3,5,Internals,maxbrunsfeld,2014-12-11 19:33:10,120,85,7,0,":warning: WIP :warning:
- [ ] Eliminate disposable returned from `Config::set`
- [ ] Associate all settings with a source regardless of whether or not they are scoped
- [ ] Add a `Config::unsetFromSource` public method to remove settings from a given source
- [ ] Add `sources` option to `Config::get`
- [ ] Add `excludeSources` option to `Config::get`
- [ ] Use actual user settings path as the user settings source
- [ ] Add `Config::unset` to remove a setting from the user-config source
- [ ] Add `Config::unsetFromSource` to remove all settings or one setting from a given source
- [ ] Deprecate `is/get/restoreDefault` methods and replace with `get` and `set` plus `source` options

Previously, the private method `::addScopedSettings` was used to associate config settings with a source other than the user's config file. It bypassed schema validation.

This is being driven out by changes made in atom/snippets#86; to fix deprecation warnings required calling private methods on Config.
",995,False,en,0
4554,2,1,0,Internals,nathansobo,2014-12-11 17:52:52,96,27,5,0,"Refs #4518

This includes grouping of comment strings, indent patterns, and fold patterns so we always retrieve them from the same scope.
- [x] group comment strings under `editor.comment`
- [x] group indent strings under `editor.indent`
- [ ] group fold patterns under `editor.fold`
",284,True,en,0
4458,2,2,0,Internals,kevinsawicki,2014-12-09 00:54:46,4,0,1,0,"https://github.com/blog/1935-see-results-from-all-pull-request-status-checks

Using this PR to enable the status to display for the Linux and Windows builds.
",158,True,en,0
4452,2,2,0,Externals,KamranMackey,2014-12-08 18:23:02,0,0,0,0,,0,False,en,0
4440,2,1,0,Internals,lee-dohm,2014-12-07 20:42:03,99,1,2,0,"Fixes #4438
",12,True,en,0
4429,11,2,0,Externals,dsandstrom,2014-12-07 00:16:33,374,0,5,0,"Fixes #1982 and an alternative to #3961. Also, hopefully can used with atom/vim-mode#377.

I can't figure out how to go left on the first line when there is only white space, see cursor.moveToSubwordBoundary(), /^[\t ]*$/ isn't working.

I haven't added keymaps yet. But maybe:

``` cson
'.platform-linux .editor, .platform-win32 .editor':
  'alt-left': 'editor:move-to-previous-subword-boundary'
  'alt-right': 'editor:move-to-next-subword-boundary'
  'alt-shift-left': 'editor:select-to-previous-subword-boundary'
  'alt-shift-right': 'editor:select-to-next-subword-boundary'
  'alt-backspace': 'editor:delete-to-beginning-of-subword'
  'alt-k': 'editor:delete-to-end-of-subword'

'.platform-darwin .editor':
  'ctrl-alt-left': 'editor:move-to-previous-subword-boundary'
  'ctrl-alt-right': 'editor:move-to-next-subword-boundary'
  'ctrl-alt-shift-left': 'editor:select-to-previous-subword-boundary'
  'ctrl-alt-shift-right': 'editor:select-to-next-subword-boundary'
  'ctrl-alt-backspace': 'editor:delete-to-beginning-of-subword'
  'ctrl-alt-k': 'editor:delete-to-end-of-subword'
```

I would not mind if both were the same, though (`ctrl-alt`).  But Sublime uses just `alt` on Linux/Win, I'm not sure about Mac.
",1216,True,en,0
4367,6,4,0,Externals,dsandstrom,2014-12-02 05:17:58,0,0,0,0,"Fixes #1982 and an alternative to #3961. Also, hopefully can used with atom/vim-mode#377.

I haven't added keymaps yet. But maybe:

``` cson
'.platform-linux .editor, .platform-win32 .editor':
  'alt-left': 'editor:move-to-previous-subword-boundary'
  'alt-right': 'editor:move-to-next-subword-boundary'
  'alt-shift-left': 'editor:select-to-previous-subword-boundary'
  'alt-shift-right': 'editor:select-to-next-subword-boundary'
  'alt-backspace': 'editor:delete-to-beginning-of-subword'
  'alt-k': 'editor:delete-to-end-of-subword'

'.platform-darwin .editor':
  'ctrl-alt-left': 'editor:move-to-previous-subword-boundary'
  'ctrl-alt-right': 'editor:move-to-next-subword-boundary'
  'ctrl-alt-shift-left': 'editor:select-to-previous-subword-boundary'
  'ctrl-alt-shift-right': 'editor:select-to-next-subword-boundary'
  'ctrl-alt-backspace': 'editor:delete-to-beginning-of-subword'
  'ctrl-alt-k': 'editor:delete-to-end-of-subword'
```

Sorry for changing most lines in text-editor-spec.coffee. I had to add a separate fixtures file for better tests. If there is a better way than wrapping everything in a describe block, than let me know. I could make a separate file, but that's probably not what you want.

Also, I can't figure out how to go left on the first line when there is only white space, see cursor.moveToSubwordBoundary(), /^[\t ]*$/ isn't working.
",1366,True,en,0
4353,10,5,0,Internals,nathansobo,2014-12-01 00:49:03,387,381,38,0,"## To Do:
- [x] Get build green
- [ ] Decide on open questions
- [x] Fix documentation
## Concerns About Current View Registry

Originally, the view registry had three main responsibilities:
- A centralized place to register view providers, which describe how element constructors associate with model constructors.
- A factory that can create a view for a given model based on the above providers.
- A 1:1 mapping from models to views that persists for the lifetime of each model.

After working with the system and talking with @maxbrunsfeld, I'm very concerned about the pitfalls associated with maintaining a _global_ 1:1 mapping between models and views. Currently, the only way to create a new view with providers is via `atom.views.getView`, which returns an existing view if one already exists. If a user called this method thinking they were creating a new view, but one already existed, they could potentially move the existing DOM node from its previous location on the DOM. Beyond that: are we confident enough that we'll want a 1:1 correspondence between models and views _everywhere_ that we want to force those semantics globally if anyone wants to use our factory?
## Proposed Changes

In response to these concerns, this PR separates the view _factory_ functionality from the view _registry_ functionality, meaning you can use the factory to create a view without buying into the 1:1 map. The factory remains global at `atom.views` and has two methods, `::createView` and `::addViewProvider`. The _registry_ is moved inside of WorkspaceElement and is proxied via `WorkspaceElement::getView`.

If a user wants to get a reference to a particular model's existing view _in the workspace_, then they should call `::getView` on the workspace element. If they want to create a _new view_, then they can use `.createView` on the global factory. This radically reduces the amount of global state we're tracking, making `atom.views` a more reasonable global service. It also discourages people from referencing the view from the model layer since `::getView` can only be accessed if you already have a reference to the view layer.
## Open Questions
### Accessing the Workspace Element?

Prior to this PR, it was possible to get a reference to the workspace element with `atom.views.getView(atom.workspace)`. It wasn't a particularly attractive incantation, but at least it was possible. There's now no longer any way to get access to the workspace element short of direct DOM querying:

``` coffee
workpaceElement = document.querySelector('atom-workspace')
```

It actually reads clearer than accessing it via `atom.views`, but it still feels awkward for some reason to have to pull this off the DOM with a query. One idea is that we could add a `document.workspace` property as a shorthand for querying the selector. We could even automatically create the workspace element when that property is referenced for the first time in specs.

It seems very much inline with existing shorthand properties such as `document.body` and `document.head`, and since the user would be going through `document` it would emphasize that you are entering DOM territory when you call this. The downside is that we would be adding a non-standard property to the `document` object.

Another option is `atom.workspaceElement`. Or we just force people to query for it.
### Clarify The Global Name?

I kinda want to change `atom.views` to `atom.viewFactory`. That will add yet more deprecation warnings for APIs that we've made public as part of the 1.0 freeze effort, but I think long-term clarity could be worth the short-term incremental pain.
",3632,False,en,0
4350,6,3,4,Externals,me6iaton,2014-11-30 20:11:36,0,0,0,0,"If an .atom folder is present within the installation directory it will be used.
#2939,  #3320

next steps:
- add --portable flag to build script
- update https://github.com/atom/atom/blob/master/src/config.coffee#L700, copy from dot-atom to portable folder, when folder missing. Mayby add to core settings portable flag when atom build? 

how you look at it?
",360,False,en,0
4349,37,4,0,Externals,dsandstrom,2014-11-30 03:00:58,0,0,0,0,"Fixes #1982 and an alternative to #3961.  Also, hopefully can used with https://github.com/atom/vim-mode/issues/377.

I haven't added keymaps yet.  But maybe:

``` cson
'.platform-linux .editor, .platform-win32 .editor':
  'alt-left': 'editor:move-to-previous-subword-boundary'
  'alt-right': 'editor:move-to-next-subword-boundary'
  'alt-shift-left': 'editor:select-to-previous-subword-boundary'
  'alt-shift-right': 'editor:select-to-next-subword-boundary'
  'alt-backspace': 'editor:delete-to-beginning-of-subword'
  'alt-k': 'editor:delete-to-end-of-subword'

'.platform-darwin .editor':
  'ctrl-alt-left': 'editor:move-to-previous-subword-boundary'
  'ctrl-alt-right': 'editor:move-to-next-subword-boundary'
  'ctrl-alt-shift-left': 'editor:select-to-previous-subword-boundary'
  'ctrl-alt-shift-right': 'editor:select-to-next-subword-boundary'
  'ctrl-alt-backspace': 'editor:delete-to-beginning-of-subword'
  'ctrl-alt-k': 'editor:delete-to-end-of-subword'
```

Sorry for changing most lines in _text-editor-spec.coffee_.  I had to add a separate fixtures file for better tests.  If there is a better way than wrapping everything in a describe block, than let me know.  I could make a separate file, but that's probably not what you want.

Also, I can't figure out how to go left on the first line when there is only white space, see `cursor.moveToSubwordBoundary()`,  `/^[\t ]*$/` isn't working.
",1404,True,en,0
4345,1,3,0,Externals,ghost,2014-11-29 06:09:13,0,0,0,0,":memo: It said `fit` where it should have said `it`.
",53,True,en,0
4273,3,5,0,Externals,yongkangchen,2014-11-21 09:22:10,10,6,2,0,"cause first of require 'react-atom-fork' cost about 80ms
",57,True,en,0
4269,1,8,1,Externals,yongkangchen,2014-11-21 03:12:35,7,3,1,0,"as discuss at https://discuss.atom.io/t/why-is-atom-so-slow/11376/47?u=yongkangchen
By delay load and active packages, user could see window and menu faster.
Cause I usually wait window shown and click menu to open.
",216,False,en,0
4253,1,3,0,Externals,sadikovi,2014-11-20 04:55:16,0,0,0,0,"Updating atom repo
",19,True,en,0
4153,22,10,1,Internals,kevinsawicki,2014-11-11 22:57:52,110,53,8,0,"### Overview
- [x] Inject all theme config settings as less variables when loading theme stylesheets
- [x] Don't load stylesheets until after the config has been activated for a theme
- [x] Make `activate` method in package main optional. Since themes will most likely only set a `config` object in their package main, requiring them all to have a no-op `activate: ->` seemed ugly. Also `deactivate` was already optional so this makes it consistent with that.
",460,False,en,0
4117,3,3,0,Externals,ardeshirj,2014-11-09 03:05:18,34,0,4,0,"In Chrome Linux and the Gnome environment (at least Gnome 3), `ctrl-shift-pagedown` and `ctrl-shift-pageup` are shortcuts to reorder tabs.
Here is the Chrome example:
![chrome-tabs](https://cloud.githubusercontent.com/assets/6003742/4966247/a300e9cc-67b7-11e4-96df-7b6f3cfdd8ed.gif)

Anytime I get back to Atom I tried to reorder some tabs just like with Chrome, but it was missing this shortcut. I thought it would be nice to have it. Here is how it looks:
![atom](https://cloud.githubusercontent.com/assets/6003742/4966259/67bf84a8-67b8-11e4-91c4-c21e056d2fd9.gif)

You may have noticed that Chrome has a nice animation, which I didn't try to implement, but if you would like to have it then let me know what are your thoughts on that so maybe I can start working on it.

Thank you
",784,False,en,0
4098,4,9,3,Externals,eddieantonio,2014-11-07 20:14:49,157,1,5,0,"I've started writing documentation for the goodies that `spec-helper.coffee` adds to all Atom specs. This addresses my comment in #3399.

@benogle, I've finally had time to work on this, but I just started so it's not ready to merge. I added specs for the custom matchers, as they prove to be useful in documenting the matchers, much like Jasmine documents [its own matchers](http://jasmine.github.io/1.3/introduction.html#section-Included_Matchers).

Let me know if I'm on the right track with regards to organization and style. I'll be pushing some more commits soon.
",570,True,en,0
4089,1,4,0,Externals,postcasio,2014-11-07 11:04:13,1,2,1,0,"No need to go through the view to get the editor instance.
",59,True,en,0
4088,3,0,1,Externals,liuxiong332,2014-11-07 10:23:23,0,0,0,0,":lipstick: add ProcessLaunchDetector class to process multiple execution of atom process. extract the code of creation of client and server from AtomApplication into the new class ProcessLaunchDetector to make code cleaner.

remote the unnecessary invocation 'flattenMenuItems'
",278,True,en,0
4042,23,1,1,Internals,nathansobo,2014-11-04 00:55:45,58,943,15,0,"This PR removes the following views from core and makes them available in the [atom-space-pen-views](https://github.com/atom/atom-space-pen-views) library on npm.
- TextEditorView
- ScrollView
- SelectListView

These views are now based on a new version of SpacePen that uses custom elements to provide attach/detach hooks instead of relying on patches to jQuery DOM manipulation in atom/atom, which will be going away. They should be able to be used pretty much exactly as the old views were, except that simulated DOM attachment won't trigger attach hooks.

For the time being we need to continue to export a version of these views that behaves exactly the same, including a [bunch of Atom-specific extensions](https://github.com/atom/atom/blob/master/src/space-pen-extensions.coffee) to SpacePen and jQuery that don't really belong in the extracted libraries. I've solved the problem by injecting Atom's extended version of SpacePen/jQuery into the prototype of these views when they are imported. I also needed to enable the jQuery-style attach hooks (rather than custom-element-based hooks) for the exported views.
### Tasks
- [x] Extract views from core
- [x] Extract CSS from core
- [ ] Get specs passing
- [ ] Document changes to SpacePen
- [ ] Write a readme for atom-space-pen-views npm
",1297,False,en,0
3988,1,1,0,Externals,austenmc,2014-10-29 00:03:30,3,0,1,0,"It's pretty confusing to open Atom and follow the Getting Started guide but have nothing happen when you press cmd-t. Add some text to the Getting Started doc to help out these poor souls.

See https://github.com/atom/fuzzy-finder/issues/38
",241,True,en,0
3984,10,1,0,Internals,nathansobo,2014-10-28 22:48:35,350,120,12,0,"As we explored the overall API for creating views in packages (#3752), we realized that it's awkward to have two different mechanisms for subscribing to command events and native events in packages. It would be nice to use the same pattern to subscribe to things like `core:cancel` and `click`. Currently click handlers need to be registered with `addEventListener`.

We've decided to expand the role of the command registry, renaming it to the event registry and using it to register event handlers for both native and custom events. This will ensure a consistent event subscription experience for package authors:
## Tasks
- [x] Expand jQuery on/trigger retrofit to cover all event types
  - [ ] Ensure vim mode specs still pass
- [ ] Honor `::bubbles` property for native events
- [ ] Allow event capture in addition to bubbling
- [ ] Retrofit addEventListener to add events to event registry
- [ ] Rename to `EventRegistry`
- [ ] Assign to `atom.events` and deprecate `atom.commands`
",988,True,en,0
3979,5,1,0,Externals,benogle,2014-10-28 01:04:42,76,1,7,0,"### TODO
- [x] Move the ViewRegistry to `atom.views`
- [x] Add HTMLRequire
- [x] Add the polymer stuff to core
- [x] Publish `elmer` https://github.com/atom/elmer
- [x] Put the template system through the ringer. Does it do all we need / want? https://github.com/benogle/template-explore
- [ ] Move templating stuff out of atom and into its own file
- [ ] Add a couple global template filters (pluralize, classList)
- [x] Document `ViewRegistry` 
- [ ] Document `HTMLRequire` 

Closes #3977 
Closes #3752 
",506,False,en,0
3961,1,6,0,Externals,ccoenen,2014-10-25 12:46:08,0,0,0,0,"I'm using undescores regularly in ruby, where you would usually write them like `SOME_MADE_UP_CONSTANT = true`, jumping between words in that variable works nicer (for me, that is) when i can navigate the individual words.
",223,True,en,0
3865,1,0,0,Externals,marceljar,2014-10-16 22:30:08,2,1,1,0,"There seems to be issues capturing them when they are programmatically
dispatched via dispatchEvent. This was causing problems for the vim-mode
specs. This event belongs among the native events that aren’t treated
as commands anyway.
",236,False,en,0
3863,15,3,2,Externals,garethbjohnson,2014-10-16 20:59:34,0,0,0,0,"When following this tutorial, I had some problems in the ""Add a Key Binding"" section:
1. It told me to put `atom-text-editor` on the first line, which does not work. However, using `.workspace` works, so I have changed the tutorial to say this instead.
2. It told me in a paragraph to enter `ctrl-alt-a`, but the example text read `cmd-alt-a` instead. Further, some people reported problems with the `alt` key when using international keyboards (atom/atom-keymap#35). Thus, I changed the key binding to `ctrl-i`.
3. It told me that deleting the existing key binding will leave me with a two-line file, which is not true because of the default comments at the top of the file. I therefore changed the wording slightly.
",718,False,en,0
3840,1,3,0,Externals,zigal,2014-10-15 16:07:15,48,0,1,0,"please read head note! this is an InstallerScript for Windows written in Inno. This is very simple, and its easier for beginners to installer and smaller than ZIP package. I have also an executable for the latest release which I can drop also if you want.
",256,True,en,0
3813,1,0,0,Externals,benogle,2014-10-13 20:28:28,57,11,1,0,"Complicated and lots of corners. Putting this here for reference. Not going to merge it.
",89,True,en,0
3800,1,1,1,Externals,er1x,2014-10-12 09:43:08,0,0,0,0,,0,False,en,0
3748,3,7,0,Externals,russlescai,2014-10-07 23:36:03,39,0,4,0,"(This replaces previous PR #3740).

Allows the disabling of Code Folding. This attempts to solve Issue #3709.

This PR adds a config to check if folding is disabled.

Tasks:
- [x] Disable Code Folding in Gutter if config item is set to be disabled (and unfold all when disabled to show all code)
- [x] Add place to configure if folding is enabled or not - this can be added to users' config file (added to config-schema)
- [x] Ensure no other places enable folding...
- [x] Disable/hide Folding menu if config item is set to be disabled
- [ ] Add scoped configuration
- [ ] Add specs
",584,True,en,0
3740,14,6,0,Externals,russlescai,2014-10-07 05:03:23,22,3,5,0,"Allows the disabling of Code Folding. This attempts to solve Issue #3709.

This PR adds a config to check if folding is disabled.

Tasks:
- [x] Disable Code Folding in Gutter if config item is set to be disabled
- [ ] Disable/hide Folding menu if config item is set to be disabled
- [x] Add place to configure if folding is enabled or not - this can be added to users' config file.
- [ ] Add scoped configuration
- [ ] Ensure no other places enable folding...
",460,True,en,0
3739,1,2,2,Externals,targeter21,2014-10-07 04:46:04,11,5,1,0,,0,False,en,0
3669,42,0,0,Externals,Owner-,2014-09-30 19:38:15,0,0,0,0,,0,False,en,0
3668,1,5,0,Externals,Owner-,2014-09-30 19:32:10,0,0,0,0,"I would like to update the cj-testing branch for this repo.
",60,True,en,0
3576,1,5,0,Externals,jhasse,2014-09-18 16:46:54,10,0,1,0,"This adds installation instructions for installing atom on Linux. It advises the use of [Nix](https://nixos.org/nix), which has the advantages that it doesn't require root and works on every Linux distribution. (The [Nix atom pkg](https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/editors/atom/default.nix) should be updated sometime though)

It also mentions the .deb file on the release page.

What do you think?
",428,True,en,0
3562,1,9,0,Externals,cjlux,2014-09-17 12:49:09,0,0,0,0,"Link to a binary distribution of Atom for Ubuntu 14.04.
",56,True,en,0
3556,2,1,0,Externals,targeter21,2014-09-17 01:42:28,9,5,1,0,"Fix cursor so clicking the below the last line of text puts the cursor at the end of the last line.
",100,True,en,0
3541,1,0,0,Externals,cjlux,2014-09-15 15:33:59,0,0,0,0,"Installing Atom binary distribution for Linux Ubuntu.
",54,True,en,0
3488,1,3,0,Externals,alandarev,2014-09-07 16:18:13,1,1,1,0,"This pull request adds application Atom into category ""Development"" on Linux desktops.

This behavior is familiar with most Text editors and IDE's aiming software developers on Linux desktops.

Category ""Development"" is part of freedesktop standards: http://standards.freedesktop.org/menu-spec/latest/apa.html
",310,True,en,0
3475,22,7,6,Externals,russlescai,2014-09-06 09:09:04,119,92,8,0,"This pull request adjusts font size by using Ctrl key and the mouse scroll wheel.

This behaviour is familiar and native across most editors/IDEs.

I have previously created a package to implement this functionality (https://atom.io/packages/wheel-zoom), and it was commented that it could be introduced into the core (https://discuss.atom.io/t/use-ctrl-mouse-wheel-to-increase-decrease-text-size/11916).

First pull request, please be nice. :smile: 
",451,True,en,0
3434,42,3,0,Externals,gwulfs,2014-09-01 22:10:48,0,0,0,0,"""first it **_check**_ to make sure that you have both pip and python""

should be checks.
",89,True,en,0
3419,1,1,0,Externals,rteobaldo,2014-08-28 21:02:03,1,0,1,0,"To smooth blink off/on
",23,True,en,0
3417,1,7,0,Externals,robertmiles3,2014-08-28 18:21:21,0,0,0,0,"When opening a folder path, it seems logical that the tree view should always show since the usual next step would be to open a file within that folder. Showing it automatically saves a step of manually toggling the tree view open. Atom already auto-showed the tree view when opening a folder path in a new window, but it wasn't when opening a folder path in an existing window.

![show-tree-view](https://cloud.githubusercontent.com/assets/944302/4080588/fc77024a-2edf-11e4-8c5d-4f80c7f156b7.gif)
",498,True,en,0
3378,18,4,0,Internals,nathansobo,2014-08-25 21:51:38,391,125,7,0,"## Abstract

We have many situations where we need to subscribe to streams of events, such as discrete events like `did-insert-text`, properties with values that change over time, and collections with contents that change over time. The concept of _observables_ unifies all these callback-oriented patterns in a single compositional framework. The [RxJS](https://github.com/Reactive-Extensions/RxJS) library provides a mature and full-featured implementation of the observables concept, and I'd like to try using it in workspace. If it works well, we can consider using it for our events across the board.
## Tasks
- [ ] Benchmark to make sure overhead is acceptable in simple use cases
- [ ] :wrench: Replace workspace events with `::onX` methods that return observables
- [ ] :wrench: Replace workspace behaviors with `::observeX` that return observables
- [ ] Replace workspace `::eachX` methods with `::observeX` methods
## Description
### Events

We currently implement events via emissary's `Emitter` mixin. In the following example, we use `::on` to subscribe to all changes and `::once` to subscribe to the next change. Both methods return subscriptions which can be disposed with

``` coffee
subscription = editor.on 'text-did-change', -> # ...
subscription = editor.once 'text-did-change', -> # ...
```

Subscribing to events with strings is fragile and difficult to document, shim, and deprecate. We've discussed changing the API to use methods instead, such as `::onTextDidChange`, but there were concerns about losing `::once`. Returning an Rx observable gives us the ability to use `::once` semantics and also ton more.

Our `::on*` methods can be overloaded, so they subscribe if passed a callback and return an observable if no callback is passed.

``` coffee
# If a callback is passed, subscribe as normal
subscription = editor.onTextDidChange -> # ...

# If no callback is passed, return an observable
observable = editor.onTextDidChange()

# You can subscribe to observables
subscription = observable.subscribe -> # ...

# But you can also apply operators, such as `::take`.
# This is equivalent to `::once` from the example above.
subscription = observable.take(1).subscribe -> # ...

# You can also apply other operators, such as `::throttle`
# Here we will not handle text changes more often than once per 500ms
subscription = editor.onTextDidChange().throttle(500).subscribe -> # ...
```
### Properties That Change

In addition to events, we also need to track values that change over time. Observables are a great tool for this as well, and could replace `emissary` behaviors. For any model property `foo`, we could have an `observeFoo` method along with `getFoo` and `setFoo`. This would return an observable based on the current value of the property. Whenever someone subscribed, the `onNext` callback would be called immediately with the current value, then again whenever the value changed.

``` coffee
# Just like with `::on*` methods, `::observe*` can be passed a callback.
subscription = pane.observeActiveItem -> # ...

# Observe methods return an observable when called without a callback.
observable = pane.observeActiveItem()
subscription = observable.subscribe -> # ...

# If you only want changes and not the current value, skip it
# This is similar to passing `callNow: false` to config.observe,
# and could replace it
subscription = pane.observeActiveItem().skip(1).subscribe(@onActiveItemChanged)
```

Compositional operators can also be used to derive more advanced behaviors, such as `PaneContainer::observeActivePaneItem`, which will be based on the active item of the active pane.

``` coffee
class Workspace
  observeActivePaneItem: ->
    @observeActivePane().selectSwitch (activePane) ->
      activePane.observeActiveItem()
```
### Collections That Change

In addition to properties that change, we also deal with collections that change, such as the current panes, pane items, text editors, etc. These can also be modeled as observables. In the following example, `::observePanes` returns an observable that yields every current and future pane to observers.

``` coffee
# Can be called with a callback to subscribe immediately
subscription = atom.workspace.observePanes -> # ...

# When called without a callback, returns an observable
subscription = atom.workspace.observePanes().subscribe -> # ...
```

Again, the compositional nature of observables allows us to easily build derived collections, such as a collection based on all pane items.

``` coffee
class Workspace
  observePaneItems: ->
    @observePanes().flatMap (pane) -> pane.observeItems()
```

Such a method could filter on optional type selectors, allowing you to observe only a certain subset of panes.

``` coffee
class Workspace
  observeTextEditors: ->
    @observePaneItems('.text, .source')

  # The filter step would probably go in Pane::observeItems, but this
  # illustrates the concept.
  observePaneItems: (selector) ->
    @observePanes().flatMap (pane) ->
      pane.observeItems().filter (item) ->
        item.getTypeDescriptor?().matches(selector)
```
### Conclusion

RxJS provides a rich, seemingly mature library for working with streaming data in a compositional manner. We can utilize it in the following scenarios:
- For events, by adding `::onFoo` methods that return an observable when they aren't passed a callback.
- For changing properties and collections, by adding `::observeFoo` methods that return observables that invoke subscribers with current and future values.

It seems worth exploring as a robust solution to event handling in Atom that can slot in next to simpler approaches.
",5631,True,en,0
3373,8,0,0,Externals,kraffslol,2014-08-25 11:01:06,92,69,7,0,,0,False,en,0
3327,1,8,0,Externals,Zren,2014-08-18 23:38:34,11,3,3,0,"Keep the old variables for backwards compatibility, but store the `Date.now()` timestamps in `[variable]Start` `[variable]End` for measured durations.

Adds:
- `atom.getLoadSettings().shellLoadTimeStart`
- `atom.getLoadSettings().shellLoadTimeEnd`
- `atom.loadTimeStart`
- `atom.loadTimeEnd`
- `Package.loadTimeStart`
- `Package.loadTimeEnd`
- `Package.activateTimeStart`
- `Package.activateTimeEnd`

With this I was able to generate a timeline graph that you might be interested in seeing.

![](http://i.imgur.com/2XRpfe5.png)

It confirmed what I suspected (that shellLoadTime + windowLoadTime != totalLoadTime).

There's still the overhead of actually getting to `src/browser/main.js` to map out though.
",707,True,en,0
3320,2,4,0,Externals,ghost,2014-08-18 17:13:25,0,0,0,0,"If an .atom folder is present within the installation directory it will be used.
https://github.com/atom/atom/issues/2939
",122,False,en,0
3312,3,5,0,Internals,smashwilson,2014-08-17 23:26:23,45,27,2,0,"I've added :penguin: Linux support for `script/grunt test`... and _now_ I see that #2273 does the same thing! Whoops. I'll push this out anyway, I've made some different decisions and it might be interesting to pick and choose from each.

There are currently a small number of failures, which I've pasted into [a gist](https://gist.github.com/smashwilson/700a0e7368b85c450ec8). Attempting to build packages in parallel adds a few more.

Here are my system specs:

```
smash@winter ~/code/atom (linux-tests %=) $ uname -a
Linux winter 3.11.0-12-generic #19-Ubuntu SMP Wed Oct 9 16:20:46 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
smash@winter ~/code/atom (linux-tests %=) $ cat /etc/lsb-release 
DISTRIB_ID=LinuxMint
DISTRIB_RELEASE=16
DISTRIB_CODENAME=petra
DISTRIB_DESCRIPTION=""Linux Mint 16 Petra""
smash@winter ~/code/atom (linux-tests %=) $ cat /etc/os-release 
NAME=""Ubuntu""
VERSION=""13.10, Saucy Salamander""
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=""Ubuntu 13.10""
VERSION_ID=""13.10""
HOME_URL=""http://www.ubuntu.com/""
SUPPORT_URL=""http://help.ubuntu.com/""
BUG_REPORT_URL=""http://bugs.launchpad.net/ubuntu/""
```
",1108,True,en,0
3291,1,5,0,Externals,couchand,2014-08-15 18:55:37,3,1,1,0,"They weren't already in there and the build was failing because of it.  Adding them fixed it.
",94,True,en,0
3285,2,4,0,Externals,enedil,2014-08-15 13:09:29,0,0,0,0,"Atom has been packaged for several distributions, hence I'm adding info about this.
",84,True,en,0
3266,1,3,0,Externals,tolmasky,2014-08-14 00:32:53,4,1,1,0,"On OS X, if you command click the title of a window that's associated with a document, you get a menu where each item is a parent of its path. (You can try this in Pages, Finder, Sublime, even Safari). This is currently missing in Atom. The fix is pretty straightforward, just call setRepresentedFilename (which is implemented to do nothing on other platforms in atom-shell).

![title-bar-menu](https://cloud.githubusercontent.com/assets/23753/3914633/7abea85c-234a-11e4-8baa-97228ab50c5a.gif)

Reviewed by @tolmasky.
",518,True,en,0
3253,4,2,1,Externals,jhutchins,2014-08-13 14:35:47,31,0,1,0,"Closes #3216
",13,True,en,0
3232,1,1,0,Externals,pselibas,2014-08-12 07:55:49,0,0,0,0,"Fix for issue #2921 and #2527
",30,True,en,0
3183,2,4,0,Externals,dmnd,2014-08-05 08:18:06,11,0,2,0,"Fix #2909.

Test Plan:
- Edited a file. Ran `editor:checkout-head-revision` and it reverted.
- Edited a file, saved it, then edited again. Running
  `editor:checkout-head-revision` reverts the lot.
- Ran undo afterwards and the edits come back, so that still works.
",266,True,en,0
3167,1,2,0,Externals,johnamiahford,2014-08-03 16:32:44,3,0,1,0,,0,False,en,0
3154,42,18,0,Internals,nathansobo,2014-08-01 22:48:45,1597,425,12,0,"## To Do
- [x] Give tiles opaque backgrounds
- [x] Support mouse-wheel velocity scrolling over tiles
- [ ] Cursors
- [ ] Highlight decorations
- [ ] Support line decoration options
- [ ] Change batching strategy
  - [ ] Try to get scrolling smoother
  - [ ] Support < 16ms response time for typing and cursor movement
- [ ] Foldable indicators in gutter, computed in `TokenizedBuffer`
- [ ] Fix the component specs (much of the heavy lifting is in the presenter now)
- [ ] Fix overlayer shims
- [ ] Figure out what to do about the underlayer
## Underlayer Deprecation

Opaque tiles improve performance, but they destroy the previous ability to attach absolutely-positioned elements to the underlayer and have things just work. Based on [this search](https://github.com/search?utf8=%E2%9C%93&q=editorView+underlayer&type=Code&ref=searchresults), the following packages access the `.underlayer` outlet on the editor. Checkboxes are for adding the necessary APIs and creating issues/PRs on the package repositories:

Could use highlight decorations instead:
- [x] https://github.com/richrace/highlight-selected (https://github.com/richrace/highlight-selected/issues/17)
- [ ] https://github.com/mlitbk/column-overflow
- [ ] https://github.com/yujinakayama/atom-lint
- [ ] https://github.com/atom/bracket-matcher
- [ ] https://github.com/atom/spell-check

Could use highlight decorations if we allowed arbitrary style assignment:
- [ ] https://github.com/wonnage/highlight-css-color

Could potentially use highlight decorations if we added a `fullHeight` and `fullWidth` option:
- [ ] https://github.com/tony612/highlight-column
- [ ] https://github.com/jtanner/crosshairs
- [x] https://github.com/richrace/highlight-line (https://github.com/richrace/highlight-line/issues/23)

Could attach to the overlayer instead:
- [ ] https://github.com/Problematic/omni-ruler
- [ ] https://github.com/atom/wrap-guide

Extend the old editor in unsupported ways that probably don't work with the new editor:
- https://github.com/anson0370/scroll-past-end
- https://github.com/mlitbk/center-screen
## Background

I'll explain more as this develops, but I'm experimenting with a new rendering strategy for the editor that's yielding promising results on Chromium 36. I've tried this before and closed it, but things are going better on this newer rendering engine and a bit more maturity in the `EditorComponent` code. The current rendering strategy exhibits some pretty serious performance regression on Chromium 36, so some kind of optimization work is something of a blocker for shipping it.

Here's a look at the composited layer borders in orange.

![screenshot 2014-08-01 16 41 27](https://cloud.githubusercontent.com/assets/1789/3785952/031bacd6-19cd-11e4-960e-7b884a7b48e2.png)

Here's a promising timeline of scrolling around at moderate speed, showing we're meeting most of our frame times with room to spare at 60 FPS.

![screenshot 2014-08-01 10 12 18](https://cloud.githubusercontent.com/assets/1789/3785973/9825c032-19cd-11e4-93eb-569adbab0239.png)

I'm also pretty close clearing 13ms frame times for cursor movement (which is what I have my key repeat rate set at so it's important to me) with a different strategy for requesting frames. I wish I could supply `requestAnimationFrame` with my desired frame time for a given request. For now I'm hoping a synchronous rendering strategy for certain operations will suffice.

You never really know until it's fully implemented, but this is promising. The gutter is disabled because it's not yet tiled, and the cursors and highlight decorations (responsible for selections, among other things) haven't been fully implemented yet. But I'm feeling pretty good.
",3701,False,en,0
3142,3,17,15,Externals,benogle,2014-07-31 20:43:10,112,0,1,0,"This is super in-progress. A lot of this information is sort of tribal knowledge, but I wanted to get it in out in the open and us on the same page.

This should give us somewhere to look when we're like ""how should I name that method/event?"", or ""how do I doc a method that takes a callback that takes an options hash.""
",321,True,en,0
3089,3,26,0,Externals,ParkerK,2014-07-25 16:45:15,0,0,3,0,"Yosemite has a much flatter look to it, and all of the default Mac apps have had their icons changed. I updated the Atom icon to fit in with these theme a little better. Any feedback would be appreciated :)

Old: ![atom](https://cloud.githubusercontent.com/assets/464971/3705051/b566c906-141a-11e4-96ea-44397c3e610f.png)
New: ![f2b4523d650ae78d-64x64](https://cloud.githubusercontent.com/assets/464971/3705035/8215410e-141a-11e4-91bb-2c7ffa7c8982.png)
",452,True,en,0
3080,1,1,0,Externals,dmnd,2014-07-25 06:33:07,2,1,1,0,"Changes `split-selection-into-lines` to work the same way as Sublime Text.

Fixes #1704.

Test Plan:
- Ran `script/build`
- Opened a new instance of Atom
- Selected some lines via the gutter
- Executed `split-selection-into-lines`
- Saw one selection for each line that was visually highlighted
- Selected some lines with the mouse, including a partial one at the end
- Executed `split-selection-into-lines`
- Saw one selection for each line that was visually highlighted
",472,True,en,0
3079,2,2,0,Externals,benogle,2014-07-25 00:42:25,14,3,1,0,"@nathansobo This doesnt really work. It only works if we measure all the characters in the line all the time.  Even then, though, there are cases it's off a little bit. Ugh. If you have any suggestions, glad to hear them, but thinking i'll just wontfix #3054 and have them use `px`.
",283,True,en,0
3050,1,12,0,Externals,dsandstrom,2014-07-23 05:54:20,0,0,0,0,"I choose `alt-t`, but can change to whatever if people want something different.  Sublime 2 uses `ctrl-t`, but that is already used and `ctrl-shift-t` is already pretty crowded.
",178,True,en,0
3048,1,2,0,Externals,MasseGuillaume,2014-07-23 03:18:12,0,0,0,0,,0,False,en,0
3027,2,5,0,Externals,czaks,2014-07-21 19:45:30,31,5,2,0,"CC: #2272 #2244

My implementation follows the traditional X11 behaviour as closely as possible:
1. The main clipboard (Ctrl+C, Ctrl+V) is a different one than the second one (select, middle-click) which I'm implementing here. That means, by copying to one, the second one is left intact.
2. When pasting, the text cursor goes to a position under the mouse, then the second clipboard data are pasted (ie. it ignores and overwrites the previous cursor position and selection).
3. When copying, text is copied to the second clipboard only if I select the text with a mouse (not with a keyboard, not if the text is selected with some kind of automatic behaviour). This also includes double-click and triple-click selection.
4. When I deselect the text (this is why I check the length), the second keyboard is left intact.
5. The second clipboard should work between applications.
6. The paste should take place on mousedown, not on mouseup.
",938,True,en,0
3016,1,2,0,Externals,bedna-KU,2014-07-20 15:45:01,1,1,1,0,"script/grunt mkdeb # Generates a .deb package at $TMPDIR/atom-build

Need sudo.

sudo script/grunt mkdeb # Generates a .deb package at $TMPDIR/atom-build
",154,True,en,0
2986,3,13,0,Externals,thedaniel,2014-07-15 22:44:41,24,1,2,0,"fixes #863 

Sets this behavior as the default.
",48,True,en,0
2960,1,3,0,Externals,netroby,2014-07-14 06:44:29,0,0,0,0,"Need sudo as root to make deb . 
Tested on ubuntu 14.04
",56,False,en,0
2918,1,0,0,Externals,atom-bot,2014-07-10 22:38:22,17,8,1,0,"test
",5,True,en,0
2917,4,4,0,Internals,probablycorey,2014-07-10 22:31:40,39,5,5,0,"GNU Make requires the use of hard tabs, but our current setup doesn't allow grammars to specify tab styles. This PR will allow grammars to specify 'requiresHardTabs' which will override any other softTab preference.

**BUT**

I'm wondering if this approach is too shortsighted. I like what @jtkiley recommends in https://github.com/atom/settings-view/issues/122#issuecomment-44845687. But that will clash with the grammar approach I took here.

Started because of https://github.com/atom/language-make/issues/3 and https://github.com/atom/language-make/pull/8/files
",566,True,en,0
2905,1,10,0,Externals,richizo,2014-07-10 15:16:15,0,0,0,0,"Running ""script/grunt mkdeb"" require administrator privileges, so it's need to add the sudo command before the original command.
",129,True,en,0
2900,1,2,0,Externals,denieler,2014-07-10 08:58:46,4,2,2,0,"Please, make like in Sublime Text that when you are cloding editor all files and tabs on which you work are saving somewhere and when you open editor again - it open last tabs. Thank you!
",188,True,en,0
2894,1,3,5,Externals,benogle,2014-07-09 23:50:00,2,4,1,0,"- Open a file with long lines
- Soft wrap 
- Hit end at the beginning of a long line

It moves to the end of the buffer line. Super frustrating. 

So the select to the end/beginning, and delete to end/beginning both use screen lines, but this uses buffer lines.

This pull removes the beginning / end of screenlines commands and moves the canonical commands to use screen lines. 
",380,False,en,0
2863,5,4,2,Externals,yongkangchen,2014-07-08 17:51:15,18,5,3,0,,0,False,en,0
2836,1,8,0,Externals,mervekaya,2014-07-06 23:41:12,1,1,1,0,,0,False,en,0
2834,1,3,0,Externals,cihadturhan,2014-07-06 00:55:20,1,1,1,0,"`.editor .cursor` doesn't override default border color so `!important` is needed (or more specific rule)
",106,True,en,0
2830,1,6,0,Externals,Azeirah,2014-07-05 00:44:18,0,0,0,0,"> This is not the fault of this package, it's the `.btn-toolbar` that's doing something weird, even when the tree-view is not visible.
> 
> For example, see the atom styleguide here, it does it too.
> ![onpaste 20140705-012253](https://cloud.githubusercontent.com/assets/4040870/3485306/41d828e8-03d2-11e4-8238-d56abde42181.png)
> 
> Edit: I tried this in my `stylesheet.less`, it works ok, except that any line but the first has a margin-left of `@component-padding/2`. I have not found a way to get around this issue, it's a little bit better at least.

```
@import 'ui-variables';

.btn-toolbar > * {
    margin-bottom: @component-padding/2;
}
```

> ![onpaste 20140705-015349](https://cloud.githubusercontent.com/assets/4040870/3485367/7c925946-03d6-11e4-82d3-e648ce405034.png)
> 
> The issue actually lies at [`atom/static/buttons.less@.btn-toolbar`](https://github.com/atom/atom/blob/master/static/buttons.less#L66), adding the margin-bottom there would fix half of the problem, it's a little better, but not perfect yet.
> 
> Edit: Fixed it, instead of using `margin-left`, use margin right for all `.btn`'s and `.btn-group`'s.
> 
> It looks like this:
> 
> ![onpaste 20140705-023826](https://cloud.githubusercontent.com/assets/4040870/3485439/b9a5b822-03dc-11e4-968b-2df5d015c555.png)

[Original answer here](https://github.com/atom/settings-view/issues/145#issuecomment-48074219)
",1389,False,en,0
2803,6,4,0,Externals,damccull,2014-07-02 18:50:02,0,0,0,0,"More detailed documentation on how to build on windows 8.1 with msysgit. One issue I've found with this is that the package manager doesn't download packages right because of git not being on the path. I'll update as I figure it out.

If anyone knows how to specify the location of git binaries without having it on the path, please let me know.
",346,True,en,0
2795,5,2,0,Externals,damccull,2014-07-02 02:11:14,0,0,0,0,"This might work on previous versions of windows, but I've only tested it with windows 8.1. It works fine. I wrote up a document explaining how to build with the steps I took.
",175,True,en,0
2759,1,2,0,Externals,battlemidget,2014-06-27 16:05:32,10,0,1,0,"I wasn't sure the best place to put this since there isn't an 'installing' document. Maybe this is better suited elsewhere or in a new file, please let me know.
",161,True,en,0
2722,1,1,0,Externals,nshtg,2014-06-23 21:05:13,0,0,0,0,"![gifrecord_2014-06-23_230105](https://cloud.githubusercontent.com/assets/5219415/3363937/ac3e74c4-fb19-11e3-8499-0781b5c94ae2.gif)

I choose a tab length of 7 (I use 2 in production, I promise!) to show how nicely it aligns now. I'm not sure if there are other occurrences this behaviour needs to be fixed so I added no specs yet.

:octocat:
",343,True,en,0
2711,12,1,0,Internals,nathansobo,2014-06-21 21:55:47,377,348,8,0,":rotating_light: Very WIP :rotating_light:
- [x] highlight decorations
- [ ] line number decorations
- [ ] line decorations
- [ ] preserve target of mousewheel events
- [ ] fold markers
- [ ] fix specs

In #2704, I attempted to make the lines the full width of the editor at all times. As soon as I did this, I started getting really bad jitter when scrolling, especially when using the discrete Nvidia graphics card on my Retina MBP.

So last night I thought I'd try a new approach. I'd tried it briefly before but now I'm coming to the situation with more knowledge and I no longer have a concern about opaque backgrounds for subpixel anti-aliasing, which didn't work anyway. I asked myself: what's the lightest possible load we can put on the graphics processor while still having it scroll our lines for us.

The issue with the approach on master is that we represent the lines as one giant layer, then paint into this layer as it is scrolling. I have no idea how it works internally so I'm working from conjecture, but it seems like having a really big layer would put more pressure on the GPU. So what if instead we break the lines and line numbers into many small layers or tiles, like the iPhone does when scrolling web pages. Then each of these layers can be controlled independently on the GPU, and we just keep creating more as they are needed when we scroll.

It's actually working better than anything I've tried so far. The tile sizes for the gutter and the lines can be tuned independently to strike a balance between having a small number of layers and not having the layers get too big. I played with the sizes a bit to find the current settings, but we could potentially tune more carefully.

![tiling](https://cloud.githubusercontent.com/assets/1789/3350087/b1a4bf36-f98e-11e3-8bc6-4c802d5d4695.gif)

This is going to require some rethinking of highlights and clever shimming for underlayer and overlayer views, but I think it's doable. And I think we need to do it, because the jitter caused by making the lines full width is really quite intolerable. As an added bonus, I think this approach lets us use React components for lines and line numbers with acceptable overhead because we can halt the updates at the level of their groupings to prevent excessive diffing. It's kinda cool that the same structure that's kind to the GPU is also kind to React. Maybe not a coincidence.
",2399,False,en,0
2704,2,4,0,Internals,nathansobo,2014-06-21 03:02:27,54,12,4,0,"This PR is in progress, and aims to fix #2701.
",47,True,en,0
2650,1,1,0,Externals,chalamarc,2014-06-18 17:32:16,5,5,1,0,,0,False,en,0
2628,1,1,1,Externals,dhabyx,2014-06-16 19:47:54,0,0,0,0,"Adding **BUILD_DIR** environment variable to **tmpDir**, necessary in package generation for Slackware and others distros who need maintain an specified build directory.
",170,True,en,0
2612,1,1,0,Externals,adnelson,2014-06-15 05:43:40,16,0,4,0,"Hey guys, I wanted to add the ability to delete to the end of the line, but not cut (i.e. not modify the clipboard). This is the behavior that `Ctrl-K` has in Sublime Text, and what I'm used to.

~~these changes did not work for me~~ They work now! So consider this a legit pull req :)
",286,True,en,0
2610,1,2,0,Externals,felixrabe,2014-06-14 21:09:43,6,6,3,0,,0,False,en,0
2569,7,12,4,Externals,philschatz,2014-06-10 03:31:12,0,0,0,0,"Simple tweak now that the Gutter API landed!

Screenshot:
![image](https://cloud.githubusercontent.com/assets/253202/3225392/a4b2f92a-f04f-11e3-8ab3-51cfc999641a.png)
",167,True,en,0
2556,4,13,0,Externals,nshtg,2014-06-08 09:31:01,0,0,0,0,"I needed to implement this for another project and thought it might come in handy for other people aswell. If you like the idea I can add specs.

![gifrecord_2014-06-08_112859](https://cloud.githubusercontent.com/assets/5219415/3210912/6d56ce0e-eeef-11e3-9ad5-e1c76720c069.gif)
#### Example:

``` coffee
{$, $$, SelectMultipleListView} = require 'atom'

module.exports =
class TestMultipleListView extends SelectMultipleListView

  initialize: ->
    super
    @addClass 'overlay from-top'
    @parseData()

  parseData: ->
    items = [
      {id: 1, human: true, male: 'not'}
      {id: 2, human: false, male: 'not'}
      {id: 3, human: true, male: 'yes'}
    ]

    @setItems items
    atom.workspaceView.append this
    @focusFilterEditor()

  viewForItem: ({id, human, male}) ->
    $$ ->
      @li ""#{id}, #{human}, #{male}""

  completed: (items) ->
    str = ''
    str += ""[#{id}, #{human}, #{male}]\n"" for {id, human, male} in items
    atom.confirm
      message: 'You selected:'
      detailedMessage: str
    @cancel()
```
",1036,True,en,0
2554,1,7,0,Externals,ethers,2014-06-08 05:21:23,15,0,1,0,"Document the problem (http://stackoverflow.com/questions/21155922/error-installing-node-gyp-on-ubuntu) and suggest a solution (use a Python version manager eg pyenv)
",166,True,en,0
2509,1,3,0,Externals,philschatz,2014-06-05 03:55:52,0,0,0,0,"This adds a clickable fold icon in the gutter of the react editor; refs #1984 and #2423.

This also simplifies the `GutterComponent`. I did not notice performance differences after following the benchmark instructions in https://github.com/atom/atom/pull/2325#issuecomment-43952215 (but I may have misread).

If the `GutterComponent` changes are not acceptable I can resubmit without them.

Screenshot:

![image](https://cloud.githubusercontent.com/assets/253202/3183215/08a7f0fa-ec65-11e3-91de-209509dc4a6e.png)
",513,True,en,0
2475,2,6,0,Externals,klorenz,2014-06-01 05:28:19,11,0,1,0,"Enables grammar developers to inject scope names on a higher level.
This would enable grammars for like restructured text and markdodwn
to insert correct scopenames for constructs like:

```
    Headline
    ========
```

Usually it would be tokenized as

``` json
   [ [ value: ""Headline"", scopes: [ 'text.restructuredtext', 'meta.paragraph.restructuredtext' ],
    [ value: ""========"", scopes: [""text.restructuredtext"", ""meta.paragraph.restructuredtext"", ""markup.heading.restructuredtext"", ""punctuation.definition.heading.restructuredtext""]  ]
```

Having the opportunity to look at tokenization on a multiline-base, you can insert ""markup.heading.restructuredtext"" at
headlines marked as paragraphs.
",703,False,en,0
2464,3,1,0,Externals,benogle,2014-05-31 00:28:08,33,5,4,0,"This is very very much a WIP / experiment. 

This is all it does right now. I have git diff displaying another gutter. 

![screen shot 2014-05-30 at 5 24 25 pm](https://cloud.githubusercontent.com/assets/69169/3137683/00bef802-e85a-11e3-904b-da47b44f9fc2.png)

This is what my git-diff looks like.

``` coffee
{$, GutterComponent} = require 'atom'

module.exports =
class ReactGitDiffView
  constructor: (@editorView) ->
    editorView.registerComponent (options) ->
      GutterComponent $.extend {ref: 'gitGutter'}, options
```

The idea is that git diff will use it's own gutter component. minimap could use this mechanism, the fold + bookmarks icon, and any other gutter decorations could use one as well. 

@probablycorey check it. @nathansobo, I'm probably crazy.
",770,True,en,0
2458,1,2,0,Externals,jhonmike,2014-05-30 19:40:22,0,0,0,0,,0,False,en,0
2434,1,1,4,Externals,envygeeks,2014-05-29 06:36:18,0,0,0,0,,0,False,en,0
2426,5,17,6,Externals,avdg,2014-05-28 11:47:54,217,17,3,0,,0,False,en,0
2411,1,18,0,Externals,jingchan,2014-05-27 05:31:51,2,0,1,0,"Fixes #863
",11,True,en,0
2401,1,5,0,Externals,abe33,2014-05-26 10:38:29,1,0,1,0,"I got this error randomly when closing tabs. The `bracket-matcher` package still try to update after the tab destruction, calling `isFoldedAtCursorRow` on an editor that no longer have a cursor.

```
Uncaught TypeError: Cannot call method 'getScreenRow' of undefined /Applications/Atom.app/Contents/Resources/app/src/editor.js:1311
module.exports.Editor.getCursorScreenRow /Applications/Atom.app/Contents/Resources/app/src/editor.js:1311
module.exports.Editor.isFoldedAtCursorRow /Applications/Atom.app/Contents/Resources/app/src/editor.js:819
module.exports.BracketMatcherView.updateMatch /Applications/Atom.app/Contents/Resources/app/node_modules/bracket-matcher/lib/bracket-matcher-view…:138
(anonymous function) /Applications/Atom.app/Contents/Resources/app/node_modules/bracket-matcher/lib/bracket-matcher-view…:123
(anonymous function) /Applications/Atom.app/Contents/Resources/app/node_modules/emissary/lib/emitter.js:133
module.exports.Emitter.emit /Applications/Atom.app/Contents/Resources/app/node_modules/emissary/lib/emitter.js:132
(anonymous function) /Applications/Atom.app/Contents/Resources/app/src/cursor.js:62
(anonymous function) /Applications/Atom.app/Contents/Resources/app/node_modules/emissary/lib/emitter.js:133
module.exports.Emitter.emit /Applications/Atom.app/Contents/Resources/app/node_modules/emissary/lib/emitter.js:132
module.exports.DisplayBufferMarker.destroyed /Applications/Atom.app/Contents/Resources/app/src/display-buffer-marker.js:170
(anonymous function) /Applications/Atom.app/Contents/Resources/app/src/display-buffer-marker.js:37
(anonymous function) /Applications/Atom.app/Contents/Resources/app/node_modules/emissary/lib/emitter.js:133
module.exports.Emitter.emit /Applications/Atom.app/Contents/Resources/app/node_modules/emissary/lib/emitter.js:132
module.exports.Marker.destroy /Applications/Atom.app/Contents/Resources/app/node_modules/text-buffer/lib/marker.js:291
module.exports.DisplayBufferMarker.destroy /Applications/Atom.app/Contents/Resources/app/src/display-buffer-marker.js:149
module.exports.Selection.destroy /Applications/Atom.app/Contents/Resources/app/src/selection.js:49
module.exports.Editor.destroyed /Applications/Atom.app/Contents/Resources/app/src/editor.js:205
module.exports.Model.destroy /Applications/Atom.app/Contents/Resources/app/node_modules/theorist/lib/model.js:218
module.exports.EditorView.beforeRemove /Applications/Atom.app/Contents/Resources/app/src/editor-view.js:1422
jQuery.cleanData /Applications/Atom.app/Contents/Resources/app/node_modules/space-pen/lib/space-pen.js:395
jQuery.cleanData /Applications/Atom.app/Contents/Resources/app/src/space-pen-extensions.js:24
jQuery.fn.extend.remove /Applications/Atom.app/Contents/Resources/app/node_modules/space-pen/vendor/jquery.js:5494
module.exports.EditorView.remove /Applications/Atom.app/Contents/Resources/app/src/editor-view.js:1413
module.exports.PaneView.onItemRemoved /Applications/Atom.app/Contents/Resources/app/src/pane-view.js:321
(anonymous function) /Applications/Atom.app/Contents/Resources/app/src/pane-view.js:3
(anonymous function) /Applications/Atom.app/Contents/Resources/app/node_modules/emissary/lib/emitter.js:133
module.exports.Emitter.emit /Applications/Atom.app/Contents/Resources/app/node_modules/emissary/lib/emitter.js:132
module.exports.Pane.removeItem /Applications/Atom.app/Contents/Resources/app/src/pane.js:227
module.exports.Pane.destroyItem /Applications/Atom.app/Contents/Resources/app/src/pane.js:260
module.exports.Pane.destroyActiveItem /Applications/Atom.app/Contents/Resources/app/src/pane.js:252
module.exports.Workspace.destroyActivePaneItem /Applications/Atom.app/Contents/Resources/app/src/workspace.js:296
_results.push._this.(anonymous function) /Applications/Atom.app/Contents/Resources/app/node_modules/delegato/lib/delegator.js:67
(anonymous function) /Applications/Atom.app/Contents/Resources/app/src/workspace-view.js:299
jQuery.event.dispatch /Applications/Atom.app/Contents/Resources/app/node_modules/space-pen/vendor/jquery.js:4676
elemData.handle /Applications/Atom.app/Contents/Resources/app/node_modules/space-pen/vendor/jquery.js:4360
module.exports.KeymapManager.dispatchCommandEvent /Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:395
module.exports.KeymapManager.handleKeyboardEvent /Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:176
(anonymous function) /Applications/Atom.app/Contents/Resources/app/src/window-event-handler.js:90
jQuery.event.dispatch /Applications/Atom.app/Contents/Resources/app/node_modules/space-pen/vendor/jquery.js:4676
elemData.handle
```

This patch forces the `isFoldedAtCursorRow` method to return false if there's no cursor available.
",4760,True,en,0
2398,2,3,0,Externals,knightzero,2014-05-25 19:24:04,19,0,1,0,"Re added troubleshooting Visual Studio installed to a non-standard
location.
",77,False,en,0
2396,1,2,0,Externals,thomasjo,2014-05-25 07:14:59,0,0,0,0,"Incorrect usage of `atom.workspace.getEditorViews()` fixed with `atom.workspaceView.getEditorViews()`.

As a side note, this example should ideally be moved to the `Editor` class and changed to

``` coffeescript
for editor in atom.workspace.getEditors()
  console.log(editor.getPath())
```

given the nature of the example, lest we change the `console.log` statement to something else that doesn't rely on `Editor` as opposed to `EditorView`.
",443,True,en,0
2388,1,4,0,Externals,nebulousdog,2014-05-24 03:08:32,2,0,1,0,"Only to fix the `cursor: text` value in editor when using scrollbars.

Sorry if is already addressed elsewhere. :) very bottom of the list of proposed changes, haha. First day downloaded, very excited.

Was originally going to only put with `.editor .vertical-scrollbar` but saw that the editor's horizontal uses the default horizontal scrollbar also used in file viewer.

Cheers,
Tom
",385,True,en,0
2384,1,5,0,Externals,phaedryx,2014-05-23 22:00:05,1,0,1,0,"so that I could get script/build to run
",40,True,en,0
2382,2,8,0,Externals,SeriousM,2014-05-23 19:52:58,4,0,1,0,"I'm using Win7 x64 with the git-bash with version 1.9.2.msysgit.0.
For some reason I can't build the package because it can't find the https helpers.
I found [this atom issue](https://github.com/atom/atom/issues/2206#issuecomment-43443805) which helped me a lot and I thought I need to add this information in the build readme.

Here is my error log for reference. 

```
 (master) /c/OWN/SCM-Store/GitHub/atom/atom$ script/build

Installing modules ✗

> atom@0.99.0 preinstall C:\OWN\SCM-Store\GitHub\atom\atom
> node -e 'process.exit(0)'


npm ERR! git fetch -a origin (https://github.com/atom/bootstrap.git) fatal: Unable to find remote helper for 'https'
npm ERR! Error: Command failed: fatal: Unable to find remote helper for 'https'
npm ERR!
npm ERR!     at ChildProcess.exithandler (child_process.js:637:15)
npm ERR!     at ChildProcess.EventEmitter.emit (events.js:98:17)
npm ERR!     at maybeClose (child_process.js:743:16)
npm ERR!     at Process.ChildProcess._handle.onexit (child_process.js:810:5)
npm ERR! If you need help, you may report this *entire* log,
npm ERR! including the npm and node versions, at:
npm ERR!     <http://github.com/npm/npm/issues>

npm ERR! System Windows_NT 6.1.7601
npm ERR! command ""C:\\OWN\\SCM-Store\\GitHub\\atom\\atom\\apm\\node_modules\\atom-package-manager\\bin\\node.exe"" ""C:\\OWN\\SCM-Store\\GitHub\\atom\\atom\\apm\\node_modules\\atom-package-manager\\node_modules\\npm\\bin\\npm-cli.js"" ""--globalconfig"" ""C:\\OWN\\SCM-Store\\GitHub\\atom\\atom\\apm\\node_modules\\atom-package-manager\\.apmrc"" ""--userconfig"" ""C:\\Users\\root\\.atom\\.apmrc"" ""install"" ""--target=0.11.10"" ""--arch=ia32"" ""--quiet"" ""--msvs_version=2010""
npm ERR! cwd C:\OWN\SCM-Store\GitHub\atom\atom
npm ERR! node -v v0.10.26
npm ERR! npm -v 1.4.4
npm ERR! code 128
npm
 (master) /c/OWN/SCM-Store/GitHub/atom/atom$
```
",1835,False,en,0
2381,4,1,0,Externals,Noah-Huppert,2014-05-23 19:49:09,0,0,0,0,"The links in docs/README.md were relative links(ex: ""../foo.html""). I made them absolute links(ex: ""http://www.foo.com/foo.html"") so they link correctly from Github, Atom.io, and the documentation viewer.
",205,True,en,0
2379,1,1,0,Externals,nticaric,2014-05-23 14:18:23,2,2,1,0,"The build works currently only with node 32-bit version. It's also worth noting
that the shell needs to be run as an administrator or else runas errors
are thrown.
",164,False,en,0
2369,3,4,0,Externals,Noah-Huppert,2014-05-23 01:47:53,0,0,0,0,"The majority of links in docs/README.md are broken. I marked these broken links with a  
~~Strike Through~~  
I do not know where the correct links are so I hope someone who does sees this.
",190,False,en,0
2361,2,5,0,Externals,jabr,2014-05-22 19:27:12,17,3,5,0,"Most editors allow you to select pages of text using shift+pageup/down. This PR adds that command and keybindings.
",115,True,en,0
2351,1,28,0,Externals,jrsconfitto,2014-05-22 13:51:49,5,1,1,0,"#### the (not a big deal) problem

Previous to 0b5b741db4d5b03d6b97cc217ae2c40df892fa62 i was building atom on Win32 fine. The other day i fetched new commits from atom and my builds wouldn't work anymore :cry:

```
H:\src\atom [master]> .\script\build
You must have Python 2.7 installed at 'C:\Python27\'
```

i thought i broke something. i commented out that check and everything built fine because i do have python on my machine and its installed location on my path.
## EDIT: See this much more better restatement of the problem

See [this comment](https://github.com/atom/atom/pull/2351#issuecomment-44435957) for a better statement of the problem.
#### i propose

This PR adds a check for Python27 on the path on win32 machines and if it isn't, `script/build` says:

> You must have Python 2.7 in your path

My initial solution is just to tell win32 builders that Python should be on the path. It may not be the best way, but it seems like a step forward to me. That seems like a reasonable thing to ask someone trying to build this :smile:. i wish i knew about a `which python`-like solution for node.
#### history and previous discussions

i'm conscious of [this conversation](https://github.com/atom/atom/commit/0b5b741db4d5b03d6b97cc217ae2c40df892fa62#diff-be3d85f44f8c9d04e5ce9becabab892b) and [this one](https://github.com/atom/atom/commit/f30c56c237dd157e0a12e21e86c832ec393a03d6#diff-be3d85f44f8c9d04e5ce9becabab892b), both mentioning that Python isn't installed on the path by default, so i'm aware that this isn't a perfect solution or may not be what you're looking for (the idea has already been floated for what i've done).

If this isn't the way to go about it, maybe we can :hammer: that out here?
#### A brief aside

This isn't a big deal for me, and i could be wrong, so i'll quote Mr. Paul Betts's [comment](https://github.com/atom/atom/commit/0b5b741db4d5b03d6b97cc217ae2c40df892fa62#commitcomment-6336933) out of context:

> If you don't have a C: drive, you're smart enough to figure out what to patch, :-1: to considering this

This isn't hard for me to patch on my own. i'm :cool: with just doing that.

_For much personal improvement's sake_: Next time i'm just going to install python in the default directory!
",2242,True,en,0
2348,1,3,0,Externals,valix,2014-05-22 10:17:07,0,0,0,0,"Add Instructions for install Atom via ppa in Ubuntu 14.04
",58,True,en,0
2342,1,3,0,Externals,mitchelldm,2014-05-21 23:58:50,0,0,0,0,,0,False,en,0
2340,1,6,0,Externals,rafaelsierra,2014-05-21 22:35:32,0,0,0,0,"Just added a note regarding the missing ""node"" command on Ubuntu 14.04, which can be solved with the `nodejs-legacy` package
",125,True,en,0
2325,5,17,0,Internals,nathansobo,2014-05-21 04:08:29,218,266,3,0,"This PR switches back to React components for lines and line numbers. There is a ~14% performance penalty at larger scroll sizes, but the code is a lot easier to reason about. I would love input from @petehunt or another member of the React team regarding improving the performance.

As you can see below, the overhead appears to be significant over the current manual DOM manipulation approach. The first part of the timeline is an accelerating scroll in two different versions of the editor, the first full react from this PR, the second with manual DOM manipulation from master. Note the larger amount of yellow JS time in the first timeline.
",646,True,en,0
2322,1,8,0,Externals,holocronweaver,2014-05-20 20:54:16,0,0,0,0,"Use `sudo script/grunt mkdeb` since it copies files within /tmp.
",65,True,en,0
2316,1,1,0,Externals,mnpenner,2014-05-20 15:45:48,2,2,1,0,"These commands also require sudo permissions
",45,True,en,0
2304,1,8,0,Externals,matthewwithanm,2014-05-19 19:53:58,2,2,1,0,,0,False,en,0
2283,1,3,1,Externals,arandilopez,2014-05-17 21:54:56,0,0,0,0,"I saw that ctrl+/ doesn work in my Atom in linux (Elementary OS Luna). The Key Bindeng Resolver shown me an ctrl+shift+/ press when trying to toggle comment.. So I propuse this update un te linux Key Binding cson.
",214,True,en,0
2273,3,5,0,Externals,skardach,2014-05-17 00:35:21,65,31,5,0,"I've noticed that the `test` grunt task failed to run on linux completely, hence no spec could be run. I've refactored the tasks a bit to allow running all test cases on a linux machine (tested on Linux Mint 16 x64). 
Another thing is the usage of `--log-file=ci.log` flag that smells to me like CI (haven't looked any deeper) and I thought that it would be a waste to enable it only on windows, so I have changed it to a separate switch to `test` task. I'm not sure it that's the best way to do it (maybe a command line option would be better?) but I wanted to make this change compatible with other behavior so that all scripts that are already using it won't break.
",669,False,en,0
2272,1,10,3,Externals,pritambaral,2014-05-16 20:42:36,0,0,0,0,"fixes #2244
",12,True,en,0
2267,1,2,0,Externals,HorizonShadow,2014-05-16 14:59:21,4,0,1,0,"For whatever reason, this error always pops up for me when building, and simply re-running the build completes the build fine.
",127,True,en,0
2261,3,13,6,Externals,pritambaral,2014-05-16 11:06:35,0,0,0,0,"From feedesktop.org:

$XDG_CONFIG_HOME defines the base directory relative to which user specific configuration files should be stored. If $XDG_CONFIG_HOME is either not set or empty, a default equal to $HOME/.config should be used.

Source: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
",313,True,en,0
2253,1,0,0,Externals,itsnauman,2014-05-15 14:20:38,0,0,0,0,"Changes From Main
",18,True,en,0
2235,1,0,0,Externals,hgasdvkajs,2014-05-14 19:04:19,6,6,1,0,,0,False,en,0
2226,2,6,0,Externals,noxer,2014-05-14 14:33:59,0,0,0,0,"Added the solutions of two problems I ran into to the linux build instructions.
",80,True,en,0
2225,1,9,0,Externals,a-m-s,2014-05-14 14:14:09,25,13,2,0,"This fixes issue #1845, at least for hard tabs.

I'm not sure what the proper behaviour for soft tabs should be, but this ought to leave them as before.
",153,True,en,0
2212,2,8,4,Externals,pritambaral,2014-05-13 21:48:10,0,0,0,0,,0,False,en,0
2205,9,30,4,Externals,dcunited08,2014-05-13 11:53:53,32,0,4,0,"This replicates Sublime Text's semi-transient editor.  It the user enables Preview Mode in settings (disabled by default) they can then quickly open files with a new open closing the last one unless they edit or save the file.  Then the editor leaves preview mode and is permeant in the workspace until the user closes the tab.  Please let me know anything I'm missing.
",370,True,en,0
2182,1,1,0,Externals,gabsoftware,2014-05-12 09:47:44,0,0,0,0,"Python: won't work with current 3.4.x, should use 2.7.x for the runas module to work.
",86,True,en,0
2150,3,3,0,Externals,alfredxing,2014-05-10 17:24:10,12,0,2,0,"First steps for issue/feature #964. This provides basic alignment and styling for creating centered overlays.

To create a centered overlay, use the `centered` class instead of the `from-top` class, and call `centerOverlay()` after attaching to the workspace:

``` coffeescript
initialize: ->
  ...  
  @addClass('command-palette overlay centered')
  atom.workspaceView.command 'command-palette:toggle', => @toggle()

...

attach: ->
  ...
  atom.workspaceView.append(this)
  @centerOverlay()
  @focusFilterEditor()
```
",520,True,en,0
2148,2,4,1,Internals,smashwilson,2014-05-10 15:08:44,10,1,1,0,"Give the development-mode package path its own variable and accessor from `PackageManager`. My ulterior motive here is to make a follow-on PR against package-generator, to put generated packages into `.atom/dev/packages` instead of `.atom/packages` by default.
",261,True,en,0
2131,1,5,0,Externals,DojoGeekRA,2014-05-09 21:31:14,0,0,0,0,"Add solution to troubleshoot list when the user gets the error message ""/usr/bin/env: node: No such file or directory"" on ""sudo script/grunt install"" making a link from the node PATH/bin to /usr/bin/node
",204,True,en,0
2119,1,6,0,Externals,execjosh,2014-05-09 11:12:42,22,1,2,0,"The block cursor does not completely cover characters that are wider than a non-breaking space (the width is set at one single ""&nbsp;""), such as CJK characters.

This change updates the `CursorView` with the character under the cursor whenever it moves (i.e., ""`cursor:moved`"").

(from atom/vim-mode#187)
-  CJK Character
  -  Before: ![image](https://f.cloud.github.com/assets/189989/2460955/d4844204-af71-11e3-9a48-da85b2474e39.png)
  -  After: ![image](https://f.cloud.github.com/assets/189989/2460996/390aa7fe-af72-11e3-9ac4-3ffe93523c3e.png)
-  Tab
  -  Before: ![image](https://f.cloud.github.com/assets/189989/2461189/6e0b44ca-af74-11e3-8f77-5a3db21c7dcc.png)
  -  After: ![image](https://f.cloud.github.com/assets/189989/2461183/56305ce6-af74-11e3-985a-ddc437efae2a.png)

I still have to figure out how to write the specs for this, though...
",851,True,en,0
2115,1,0,0,Externals,strobemute,2014-05-09 06:17:20,0,0,0,0,"Merge
",6,True,en,0
2104,2,5,0,Externals,kelunik,2014-05-08 21:12:43,0,0,0,0,"Added install and uninstall scripts for easier upgrade and improved `README.md`.
",81,True,en,0
2096,7,4,0,Internals,probablycorey,2014-05-08 18:45:45,15,38,3,0,":game_die: Very work in progress :game_die: 
",45,True,en,0
2085,1,2,0,Externals,mizchi,2014-05-08 12:24:13,0,5,1,0,"They are required but not used.
",32,True,en,0
2064,1,3,0,Externals,DeltaKilo,2014-05-08 01:33:19,0,0,0,0,"On Ubuntu 14.04(may be on other releases too) build fails if system gyp installed.
Also Atom depends on libudev.so.0 while only libudev.so.1 exists on Ubuntu 14.04.
",165,False,en,0
2058,6,2,0,Externals,igxactly,2014-05-07 23:19:25,41,3,2,0,"changed comment AND cp to mv

fixing mkdeb cannot be run properly after run once.
and also added script to check the number of parameters

also added some information about debian packaging
",190,True,en,0
2008,1,4,0,Externals,vially,2014-05-07 06:21:07,0,0,0,0,,0,False,en,0
1994,1,7,0,Externals,JoeDailey,2014-05-07 03:26:25,0,0,0,0,"added necessary ""sudo"" requirement on npm python configuration command.
",72,True,en,0
1985,1,13,0,Externals,dsine-de,2014-05-07 00:25:39,0,0,0,0,,0,False,en,0
1983,1,2,0,Externals,batista,2014-05-06 23:49:30,0,1,1,0,"Should fix #1945
Weird, but removing the keymap assignment of `ctrl-v` to `core:paste` stops the duplication of the paste.

It doesn't seem to break anything else other than the mention to `ctrl-v` in the edit menu disappears.
",227,False,en,0
1980,1,2,0,Externals,csabiftw,2014-05-06 22:36:28,14,0,1,0,"this seems like a common error, probably worth noting to make the installation smoother.
",89,True,en,0
1962,1,10,0,Externals,IonicaBizau,2014-05-06 19:06:15,0,0,0,0,,0,False,en,0
1960,1,3,0,Externals,IonicaBizau,2014-05-06 18:52:55,0,0,0,0,"``` sh
$ npm config set python /usr/bin/python2 -g
npm ERR! Error: EACCES, mkdir '/usr/etc'
npm ERR!  { [Error: EACCES, mkdir '/usr/etc'] errno: 3, code: 'EACCES', path: '/usr/etc' }
npm ERR! 
npm ERR! Please try running this command again as root/Administrator.

npm ERR! System Linux 3.13.0-24-generic
npm ERR! command ""/usr/bin/node"" ""/usr/bin/npm"" ""config"" ""set"" ""python"" ""/usr/bin/python2"" ""-g""
npm ERR! cwd /home/ionicabizau/Documents
npm ERR! node -v v0.10.28
npm ERR! npm -v 1.4.9
npm ERR! path /usr/etc
npm ERR! code EACCES
npm ERR! errno 3
npm ERR! stack Error: EACCES, mkdir '/usr/etc'
npm ERR! 
npm ERR! Additional logging details can be found in:
npm ERR!     /home/ionicabizau/Documents/npm-debug.log
npm ERR! not ok code 0
```

Added `sudo`.
",757,False,en,0
1953,1,4,0,Externals,IonicaBizau,2014-05-06 18:21:37,0,0,0,0,,0,False,en,0
1944,1,2,0,Externals,qJake,2014-05-06 17:36:16,0,0,0,0,"Well that's embarassing ... there was a typo in the markdown in my PR. This fixes that.
",88,True,en,0
1899,38,0,0,Internals,probablycorey,2014-04-23 22:44:59,6038,5,22,0,,0,False,en,0
1768,15,14,3,Internals,Caged,2014-03-18 23:16:13,158,140,5,0,"This is a working fix for #354.   A couple of questions:
- There's already a `lineHeight` variable that's used pretty liberally in `editorView` so I named this `editorLineHeight` which feels a bit redundant.  Any suggestions here?
- Should this be set by default in `config.cson`.  

In an ideal world, setting `line-height` on `.editor` in `style.css` should work, but I'm not sure how complex a fix for that would be.  The [fragment](https://github.com/atom/atom/blob/explicit-line-height/src/editor-view.coffee#L890) doesn't inherit `line-height` from `.editor`.

/cc @probablycorey @kevinsawicki 
",601,False,en,0
1734,1,0,0,Internals,probablycorey,2014-03-09 05:15:09,2,2,1,0,"I'm jotting this down so I remember it. A user [reported](http://discuss.atom.io/t/symbolic-link-directory-git-highlight-issue-and-other-issue-on-atom-shell-command/3324) there were some git highlighting issues when a symlinked directory was opened via the cli. Using `pwd -P` instead of `pwd` fixes this problem because it resolves the `executed-from` argument.

A possible better solution would be to use fs.readlink from main.coffee or atom-application.coffee.
",464,True,en,0
1616,1,1,0,Externals,thedaniel,2014-02-28 06:02:20,1,1,1,0,"Not sure if there's a package.json specific identifier to use, there's nothing listed in teh SPDX license identifier list (because those are all open licenses)
",160,True,en,0
1584,1,1,0,Internals,probablycorey,2014-02-25 22:35:22,0,8,2,0,":warning: work in progress :warning:

We probably shouldn't ship with the atom bot token
",89,True,en,0
1570,4,1,1,Internals,probablycorey,2014-02-21 22:38:13,42,38,2,0,"Closes #1560
",13,True,en,0
1546,3,0,2,Internals,kevinsawicki,2014-02-14 22:05:25,9,0,1,0,,0,False,en,0
1482,5,11,2,Internals,nathansobo,2014-01-26 01:54:37,203,34,3,0,"I'm trying to get the skeleton in place for a comprehensive and overarching structure for our documentation. I'm thinking the docs will have three major sections that cross link with each other:
- **User's Manual:** This covers things a user might be interested in even if they don't want to script.
- **Developer's Manual:** This will be a high-level overview of various subsystems and concepts in Atom that's a bit higher level than the API docs. It's still fundamentally a reference.
- **Tutorials:** Take the key concepts from the developer's manual, break them into concrete examples, and sequence them in an easy-to-follow way. I'm thinking these can be based around explaining how to build one or more of our core packages.
- **API Reference:** This is the docs generated from our source comments.

I'd like to create empty files for any documentation we have missing, maybe just with the headings in place. Then we can gradually add detail to the sketch.
",963,False,en,0
1481,1,3,0,Internals,BinaryMuse,2014-01-25 19:57:49,0,0,0,0,"It appears that you cannot specify custom key bindings for items that appear in the application menu. I ran into the following issue while working on atom/tree-view#34; do the following to reproduce:
1. Clone [BinaryMuse/tree-view](https://github.com/BinaryMuse/tree-view) into `~/.atom/dev/packages/tree-view` and switch to the `bt-copy-paths` branch.
2. Fire up Atom with `atom -d` and, with a file open and focus in the editor, press `ctrl-C`. Notice that the path of the file has been copied into the clipboard by `editor:copy-path`.
3. Focus the tree view and select a different entry without changing the open file. With the tree view focused, press `ctrl-C`. Notice that the clipboard still contains the path to the currently open file, even though the `bkt-copy-paths` branch specifies that `ctrl-C` for `.tree-view` should execute `tree-view:copy-full-path`.

This happens because `ApplicationMenu` determines the specific command to execute when the menu item is clicked, without consulting the keymap specificity rules; this seems necessary for commands that are handled by `AtomApplication`.

This pull request introduces a change that sends the _keystroke_ to `WindowEventHandler`, instead of the command, in the case where `AtomApplication` does not handle the command itself.

Specs pass and things appear to work, but I'm not sure of the wider repercussions of this change, and would love to get some eyes on it. For one thing, since menu commands may now trigger different commands based on specificity, there may be a disconnect between what the menu item says and what it actually does. (This is okay for my example, where `ctrl-C` is bound to ""Copy Path"" in the menu, which makes sense in the new tree view context, but a user could easily rebind commands so that they no longer make sense--but maybe we don't care.)
",1837,False,en,0
1436,1,2,2,Internals,nathansobo,2014-01-17 04:54:52,6,2,2,0,"This is an experiment that uses some harmony proxy magic to defer all require I/O until the moment the required modules are actually used. Harmony proxies have some instability when combined with so-called ""irregular objects"" such as arrays and Date objects, but 99% of the time the objects returned by `require` are not irregular. If it ends up being stable it may be worth it because it cuts our load time without bothering users much.

![screen shot 2014-01-16 at 9 51 09 pm](https://f.cloud.github.com/assets/1789/1937841/7816857c-7f33-11e3-94a4-fc04ba50506a.png)
",568,True,en,0
1414,3,0,0,Internals,nathansobo,2014-01-14 21:56:33,83,66,10,0,"This is based on PR #1411

PR #1379 used a hacky `::_view` property on the models to store the corresponding view. This PR generalizes an approach already used in panes to store the association between views and models using a WeakMap. It makes it easy to create and map a view to any underlying model, and will also be useful in creating a panel abstraction on workspace.
",373,True,en,0
1409,2,4,0,Internals,kevinsawicki,2014-01-13 17:28:51,2,1,2,0,"Deduplicate the `node_modules` folder to save some space

Refs #1376 
",70,True,en,0
1317,1,24,0,Internals,probablycorey,2013-12-16 17:58:52,17,0,1,0,"`activation events` are used to speed up window load time, slow packages aren't immediately loaded until a keybinding is pressed. But larger packages that take > 0.5 seconds to load (like [find and replace](https://github.com/atom/find-and-replace/issues/99) become unresponsive for a brief period of time. This could be fixed by ensuring every packages loads quickly, but this isn't realistic because packages created by other people will be out of our control. Another approach would be to intercept all events during package loading and then re-trigger the events after the package is loaded, but this will still feel sluggish and tightly couple the event code to jQuery.

This prototype pr works like this. If a package has activation events it will load as before, but Atom will also sequentially load these packages each tick. This activates all packages without having a noticeable effect on window load time. The worst case scenario is for a brief time (800ms i this case) the behavior in issue atom/find-and-replace#99 will still occur.

Here is the output of the logs

```
Window load time: 1500ms /Users/corey/github/atom/src/window-bootstrap.coffee:23
Delayed activation of to-the-hubs /Users/corey/github/atom/src/atom-package.coffee:53
Delayed activation of symbols-view /Users/corey/github/atom/src/atom-package.coffee:53
Delayed activation of package-generator /Users/corey/github/atom/src/atom-package.coffee:53
Delayed activation of markdown-preview /Users/corey/github/atom/src/atom-package.coffee:53
Delayed activation of go-to-line /Users/corey/github/atom/src/atom-package.coffee:53
Delayed activation of github-sign-in /Users/corey/github/atom/src/atom-package.coffee:53
Delayed activation of gists /Users/corey/github/atom/src/atom-package.coffee:53
Delayed activation of find-and-replace /Users/corey/github/atom/src/atom-package.coffee:53
Delayed activation of command-palette /Users/corey/github/atom/src/atom-package.coffee:53
Delayed activation of autocomplete /Users/corey/github/atom/src/atom-package.coffee:53
Delayed activation of autoflow /Users/corey/github/atom/src/atom-package.coffee:53
Total delayed activation time: 800.917ms 
```
",2171,True,en,0
1291,4,9,4,Internals,kevinsawicki,2013-12-11 20:37:04,11,0,1,0,"Several keybindings are currently unusable since Mac OS X maps them to multi-keystroke accents.

Such as:
- `alt-n` followed by an `a` types an `ã`
- `alt-e` followed by an `e` types an `é`.

This is useful if you are typing these characters but also makes the `alt-e` and `alt-n` keybindings unusable in a keymap since they generate the same key event `alt-å` and you can't distinguish between two in code. Type `alt-n` in the editor with the keybindings-resolver open to see for yourself.

One possible fix for this is to set type `password` on the hidden input since these characters can't be typed into password fields in this manner and so the key events go back to ""normal"" and `alt-e` and `alt-n` can now be used again in keymaps.

This PR adds a preference `editor.enableI18nSupport` that toggles the hidden input between `text` and `password`.

Other ideas/approaches are welcome, this is just an initial stab at it after @benburkert reported not being able to use `alt-n` in his keymaps file.
",1006,True,en,0
1275,23,3,0,Internals,kevinsawicki,2013-12-10 00:10:00,116,16,8,0,":no_good: Not ready :no_good: 
",31,True,en,0
1198,2,2,0,Internals,zcbenz,2013-12-04 15:20:57,2,2,2,0,,0,False,en,0
1156,5,12,0,Externals,paulcbetts,2013-11-22 23:36:16,27866,0,211,0,"This is the top-level PR for getting an automated installer into Atom. To avoid gigantic PRs the plan is to separate this into a few parts:
## TODO:
- [ ] `PostSetup.exe`, which will handle both decompressing the `resources` folder after Setup completes, as well as compressing `resources` during the build so we don't have to have two separate EXEs (Separate PR)
- [ ] Build script to operate on `atom-build` to create the release (Separate PR)
- [ ] Documentation for the build process and how setup / updates work (started in `docs/installer-notes-win32.md`)
",562,False,en,0
1120,6,15,3,Internals,mcolyer,2013-11-15 01:43:47,23,0,2,0,"In order to keep things under the 260 character path limit on windows we can use `npm dedupe`. 

However there are a couple of issues with this:
- It [doesn't currently work on windows](https://github.com/isaacs/npm/pull/4140)
- It only moves dependencies up the tree if there are duplicates and one of the packages that is causing issues is browserify (but coffeelint is the only package which uses it). 
  - I've worked around that here by moving browserify up the tree manually.
- It's marked as ""experimental"", which makes me somewhat nervous.

@paulcbetts you want to pull this branch and then run `grunt build` and see if the installer chokes on anything (it shouldn't and we should now be able to install to `C:\Program Files\Atom`.
",740,True,en,0
1108,1,3,0,Internals,mcolyer,2013-11-11 19:23:48,7,2,1,0,"This is a temporary step so that we can create a working install executable on windows (currently test fixtures in some development packages have longer paths than windows allows).
",181,True,en,0
1101,106,1,2,Internals,nathansobo,2013-11-08 03:47:37,1352,2738,38,0,":roller_coaster: This isn't ready. :roller_coaster: 

This is a continuation of the ideas in PR #920 (Telepanes), but on top of telepath-next. I'll be closing that PR in favor of this one. The goal is to rework the backbone of Atom's interface (root view, panes, panels) in the following ways:
- Separate views from models
- Use the telepath.Model superclass to implement models
- Use reactive and relational approaches heavily to get things tight and declarative

![hydrogen-peroxide-potassium-iodide](https://f.cloud.github.com/assets/1789/1498208/a82ca504-4827-11e3-8300-9ea4d29a8de6.gif)
",592,True,en,0
1058,2,3,0,Internals,mcolyer,2013-10-31 00:19:16,3,0,3,0,"Kills path watching functionality for now, until we get #1045 working. 

Useful for not having atom crash right away. I'll make it conditional soon.
",149,True,en,0
1018,6,12,0,Internals,gjtorikian,2013-10-21 21:38:35,1,0,1,0,"This is just something for your consideration; I finished the [branch-selector](https://github.com/atom/branch-selector) package a while back. Might be nice to add into core but I won't be :broken_heart: if it isn't.

Fixes #302.

I don't like the placement of the `SelectList` dialog, but if you look at other ""status bar select lists"" (_e.g._ the grammar selector), this is the only place you can put it. It'd be nice to be able to style it like a twipsy, giving it an anchor and a location.

/cc @kevinsawicki @mattgraham 

![screen shot 2013-10-21 at 2 34 55 pm](https://f.cloud.github.com/assets/64050/1376674/f0d65594-3a98-11e3-8c21-8764a765dd83.png)
",657,True,en,0
963,2,13,0,Externals,paulcbetts,2013-10-14 19:18:21,15,0,1,0,"This PR gets script/bootstrap running on Windows. Here's how far we've got so far:

``` sh
C:\atom\atom [bootstrap-on-win32]> .\script\bootstrap.ps1

> atom-package-manager@0.7.0 prepublish C:\atom\atom\vendor\apm
> grunt clean lint coffee

Running ""clean"" task

Running ""coffeelint:src"" (coffeelint) task
>> 21 files lint free.

Running ""coffeelint:test"" (coffeelint) task
>> 2 files lint free.

Running ""coffee:glob_to_multiple"" (coffee) task
File lib/apm-cli.js created.
File lib/apm.js created.
File lib/cleaner.js created.
File lib/command.js created.
File lib/config.js created.
File lib/couch/app.js created.
File lib/developer.js created.
File lib/fetcher.js created.
File lib/fs.js created.
File lib/init.js created.
File lib/installer.js created.
File lib/link-lister.js created.
File lib/linker.js created.
File lib/lister.js created.
File lib/publisher.js created.
File lib/rebuilder.js created.
File lib/test.js created.
File lib/tree.js created.
File lib/uninstaller.js created.
File lib/unlinker.js created.
File lib/updater.js created.

Done, without errors.
atom-package-manager@0.7.0 node_modules\atom-package-manager
├── colors@0.6.2
├── temp@0.5.1
├── semver@1.1.4
├── wordwrap@0.0.2
├── async@0.2.9
├── mkdirp@0.3.5
├── wrench@1.5.1
├── underscore@1.4.4
├── optimist@0.4.0
├── rimraf@2.1.4 (graceful-fs@1.2.3)
├── season@0.9.0 (coffee-script@1.6.3)
├── npmconf@0.0.24 (inherits@1.0.0, once@1.1.1, osenv@0.0.3, ini@1.1.0, nopt@2.1.2, config-chain@1.1.8)
├── request@2.21.0 (aws-sign@0.3.0, json-stringify-safe@4.0.0, qs@0.6.5, forever-agent@0.5.0, tunnel-agent@0.3.0, oauth-
sign@0.3.0, cookie-jar@0.3.0, mime@1.2.11, node-uuid@1.4.1, http-signature@0.9.11, hawk@0.13.1, form-data@0.0.8)
├── node-gyp@0.10.10 (osenv@0.0.3, which@1.0.5, graceful-fs@2.0.1, nopt@2.1.2, semver@2.1.0, glob@3.2.6, fstream@0.1.24,
 npmlog@0.0.4, minimatch@0.2.12, tar@0.1.18)
└── npm@1.3.9
Installing node@0.10.18 ✓
Installing modules ✗

> atom@31.0.0 preinstall C:\atom\atom
> true
```
## TODO
- [ ] Start hacking into apm to figure out what's failing
- [ ] Create shim Windows versions of modules we're pulling in if needed
",2218,True,en,0
958,1,6,0,Externals,benogle,2013-10-11 22:29:09,1,1,1,0,,0,False,en,0
944,1,2,0,Internals,mcolyer,2013-10-09 20:53:56,1,1,1,0,"This is just a clean up piece which allows tree-view tests to be run independently from the rest of the Atom's test suite.

See atom/tree-view@2af39e9ed26af6874c451bcc80defafd7750f357
",184,True,en,0
930,1,1,0,Internals,gjtorikian,2013-10-05 21:07:59,1,1,1,0,,0,False,en,0
920,10,4,0,Internals,nathansobo,2013-10-02 21:55:18,2007,1799,12,0,"# Telepanes

I'm redesigning the panes system as a self-contained demonstration of a number of ideas I have for improving the experience of working with Telepath and working with models and views. First, I'll summarize the problems I'm hoping to address, then move on to discuss my solutions as manifested in the redesign of the panes system. Some of what's expressed here is aspirational, but most of it works now. I'd like to get _everything_ working by the time I get to San Francisco on Monday night, then discuss it further in person.
## Problems

Here are the problems I've been concerned about, in rough order of importance:
- **The relationship between model objects and their underlying Telepath documents is full of accidental complexity and boilerplate.**
  Every model class needs to implement `::serialize`, `::deserialize`, and `::getState`. Model implementors also need to manually read, write, and observe every replicated property in the underlying document. Existing models currently have extremely similar code repeating all of these tasks.
- **Reliance on global variables makes replication extremely difficult to test.**
  The nature of testing means both copies of a replicated component exist in the same global JavaScript context, but if the component relies on global variables in that context it becomes very difficult to simulate the production situation of the components actually being in different contexts. We currently employ a test-only Environment object to repeatedly swap globals in replicates specs, and it's pretty awkward.
- **Structural updates, where an object is removed from the document only to be reattached elsewhere, are difficult to express in a replicated setting.**
  One example of this is pane splitting. When we split a pane vertically for the first time, we need to replace the pane being split with a _horizontal pane axis_ containing the original pane along with a new pane. Panes can retain arbitrary resources. For example, a pane that contains an editor causes that editor's buffer to be kept resident in a list of active buffers, so that all editors for a given file can share the same buffer state. But when an editor is removed, we want to remove its buffer from the list of active buffers if no other editors are retaining it. But we _don't_ want to release the buffer when splitting, because we're only removing the pane temporarily and intend to add it back to the document before yielding the UI thread. We currently express this in terms of reference counts and transactions, but especially in the context of replication, the code has been awkward and difficult to reason about.
- **Because of JavaScript's single-threaded environment, we need to use asynchronous APIs in an ever-increasing amount of our code, which makes control flow more awkward and difficult to reason about.**
  In a pre-Node environment, we made a pragmatic decision to largely ignore the sync/async issue and make everything synchronous. The wisdom of that past choice can be debated, but it's clear now that anything that performs IO must provide an asynchronous API as the default if we want to be performant. This reduces the utility of synchronous flow control constructs like loops and conditionals, and pushes us more toward callback-oriented programming. It's not the end of the world, but it doesn't scale very well as complexity increases.
- **There's too much logic in our view code.** From the beginning, I favored an absolute minimalist approach and advocated that view framework code be kept to a minimum, which led to us baking a lot of logic into our views. The panes system is a poster-child for the downsides of that approach. Entangling the DOM's concerns into the core behavior of our components is easy for simple components, but scales terribly with complexity. It makes code significantly more difficult to reason about due to worrying about DOM concerns such as attachment in addition to application behavior, and worse, it makes tests way slower than they should be, which slows development.
## Goals for addressing these problems

The goal of this pull request is to address the above problems in the following ways:
- **Make it simple and easy to write replicated models objects.**
- **Encapsulate the state of the system, while retaining as much of the convenience of global variables as possible.**
- **Make it possible to manipulate structural relationships without removing objects from the document and reinserting them elsewhere.**
- **Provide reactive abstractions that enable us to write _structured_ asynchronous code.**
- **Provide a clean, boiler-plate-free mechanism for binding views to view models.**

In addition, this PR has the following meta-goals:
- **Approachable power.**
  Telepath must support programming styles that are familiar to most programmers. All abstractions must fit naturally into an imperative, document-oriented worldview, and present minimal conceptual overhead until people are ready to use them.
- **""Have it your way.""""**
  Users will still have to write data into the document for it to be replicated or persisted, but you won't be _forced_ to use the model-based convenience facilities. They can continue to relate to Telepath as a raw document store, leveraging hooks on an a la carte basis.
## Implementation
### A Model Superclass

Telepath now exports a `Model` class, which users can subclass to easily create a document-backed model object. They can use the `.property` and `.properties` class method to declare replicated properties and provide them default values, and the model class will automatically define dynamic properties on their class's prototype. Under the hood, everything will be automatically read from and written to a `state` document that is wrapped by the model instance.

``` coffee
{Model} = require 'telepath'

module.exports =
class Pane extends Model
  @properties
    activeItemId: null
    items: []

# I can assign replicated properties when constructing a model
pane = new Pane(items: [item1, item2], activeItemId: item2.id)

# I can read and write replicated properties without calling getters/setters:
expect(pane.items).toEqual [item1, item2]
pane.activeItemId = item1.id
```

This isn't implemented yet, but I'd like to easily declare replication and persistence on a property-specific basis:

``` coffee
class MyClass
  @property 'transientProperty', persist: false, replicate: false
  @property 'persistentProperty', persist: true, replicate: false
```
### Automatic (De)serialization

If you insert a `telepath.Model` subclass into a document (or any instance that conforms to a small interface), the object's underlying state document will automatically be inserted instead. Similarly, when any map with a `modelClassName` key is inserted into the document, the correct model class will automatically be instantiated for it if a model class with that name has been registered on the parent document. When you read the child document at a replica or after deserializing, you'll get its corresponding model class instance instead.

``` coffee
# Assuming 2 replicated documents doc1 and doc2
doc1.registerModelClass(Pane)
doc2.registerModelClass(Pane)

doc1.get('paneContainer.children').push(new Pane(items: [item1, item2]))

# replicates to doc 2...
pane = doc2.get('paneContainer.children.0')
expect(pane.constructor.name).toBe ""Pane""
expect(pane.items).toEqual [item1, item2]
```
### Scoped Property Resolution

We use global properties in Atom to provide convenient services, such as the `project` global, which can be used to open editors for various resources under the project and the `syntax` global, which can be used to select grammars. But as discussed above, the globals are causing problems when we want to test replication between two environments, because it makes it impossible to express component logic in a self-contained way.

Dependency-injection is a popular alternative to accessing services via globals, but dependency injection seems like an awkward cultural fit for JavaScript. It feels heavy and I'd be a bit sheepish about asking people to build all their objects via some container like they're writing a Spring application.

However, we're already asking users to interact with a global Telepath document if they want to hook into replication or persistence for their objects. We might as well throw in a form of dependency injection as part of the deal.

The mechanism resolves around the `::getResolved` and `::setResolved` methods, which are available on every Telepath document. When you call `::getResolved` with a property name, Telepath will search for a property with that name, starting at the receiver and moving upward toward the root of the document. `::setResolved` does the same thing, but allows you to assign a new value to the first object with the given key.

This makes it easy to have a world in which objects in two different document replicas each can make reference to their own specific ""global"" properties while still keeping both replicas self-contained.

The `telepath.Model` superclass provides a `Model.resolved` class method for declaring auto-resolved properties. Putting it all together, it enables this mechanism for `PaneContainer` to maintain a single active pane. Each pane will resolve the `activePaneId` property to the containing PaneContainer, allowing panes to make themselves active or check if they are active.

``` coffee
class PaneContainer
  @properties
    activePaneId: null
    children: []

class Pane
  @resolve 'activePaneId'

  isActive: ->
    @activePaneId is @id

  makeActive: ->
    @activePaneId = @id
```

This might not happen in this PR, but I'm envisioning Atom only having a single global, `atom`, which will be the root of a Telepath document that encompasses the entire state of the application. Any other globals will hang off the `atom` global, meaning objects in the document can always resolve them.

``` coffee
atom = Document.create() # create a root document
syntax = atom.set('syntax', new SyntaxGlobal) # assign a global property
workspace = atom.set('workspace', new Workspace) # create a child document

# once attached the child document can resolve properties on the root
workspace.resolve('syntax') is syntax # => true
```

If people don't want to use the resolution facilities, they can always reference things via the `atom` global:

``` coffee
class RebelObject
  constructor: ->
    @grammar = atom.syntax.selectGrammar('james-dean.coffee')
```
### Atomic Move Operations

As mentioned above, we need to be able to express structural changes to the document without explicitly removing subdocuments only to add them back somewhere else. The best solution I can come up with is atomic move operations. At the time of writing, this PR currently uses derived collections (discussed below) as a substitute for `move`, but I'm working on adding the move operation and changing that.

Replicated arrays and maps will both provide a `::move` method, which works as follows:

``` coffee
# Assuming pane1 and pane2 are both in the document, this moves the second item
# of pane1 to become the third item of pane2:
pane1.items.move(1, pane2.items, 2)

# You can also call ::move with an actual array element instead of an index:
item2 = pane1.items.get(1)
pane1.items.move(item2, pane2.items, 2)

# It also works for maps. This moves the value at key 'foo' in map1 to the 'bar'
# key in map2:
value = map1.get('foo')
map1.move('foo', map2, 'bar')
```

Atomic move operations should make it possible to split panes without creating detachment/removal ambiguity when a pane is replaced with an axis and vice versa.

``` coffee
class PaneAxis extends Model
  @properties
    orientation: 'horizontal'
    children: []

class Pane
  split: (side, orientation, items) ->
    # If needed, replace ourselves with a correctly-oriented container
    unless @getContainer().orientation is orientation
      newContainer = @parent.insertAfter(this, new PaneContainer({isRoot: false, orientation}))
      @parent.move(this, newContainer.children, 0)

    index = @parent.indexOf(this)
    index++ if side is 'after'
    @parent.insert(index, new Pane({items}))

  # our parent is an array, its parent is our container
  getContainer: -> @parent.parent
```
### Reactive Programming with Signals and Conditions

As discussed above, moving to asynchronous APIs makes traditional flow-control constructs less useful. But I'm beginning to think the non-blocking constraint is a blessing in disguise, in that it's going to push us to program reactively. For example, say we have a vertical pane axis that contains two panes, then one of its panes is destroyed. In this case, there's no longer a reason for the vertical pane axis to exist, and it should remove itself with its last pane, then destroy itself. The `Model` superclass includes a `.condition` class method that allows us to write this kind of behavior in a reactive style:

``` coffee
class PaneAxis
  properties:
    orientation: null
    children: []

  @condition
    when: @children.$length.becomesLessThan(2)
    call: 'reparentLastChild'

  @condition
    when: @children.$length.becomes(0)
    call: 'destroy'

  reparentLastChild: ->
    @children.move(@children.getLast(), @parent, @parent.indexOf(this))
```

The first condition says that when the length of the axis's children drops below two, it should reparent its last child. In the `reparentLastChild` method, the axis simply moves its last child to just before itself in the array that contains the axis. This causes the number of children to drop to 0, which triggers the second condition, destroying the axis. We could have just called `destroy` in `reparentLastChild`, but the condition is more decoupled. Regardless of _how_ the length of children reaches 0, we always destroy the axis when it occurs.

The `when` key in condition declarations expects a function that returns a **signal**, which represents a stream of events. A signal is a special kind of event emitter that can emit `'value'`, `'completed'`, and `'error'` events. Conditions will execute their action only when their signal emits a truthy value.

In this case, the signal is derived from a **behavior** (`@children.$length`). A behavior is a special kind of signal that always has a _present value_. When you subscribe to `'value'` on a behavior, your handler will be called immediately with the current value, and then called again whenever the behavior's value changes. In this case, the `becomesLessThan` method transforms the `$length` behavior into a signal that will emit `true` only when the behavior's value drops below 2.

Any emissary event emitter can return a signal based on events with a given name via the `::signal` method. Behaviors can be created based on an event name and an initial value. For example, the `$length` behavior for a replicated array is defined as follows:

``` coffee
@prototypePropertyAccessor, get: ->
  @behavior('length-changed', @getLength())
```

That means its initial value is based on `@getLength()`, and its value will change based on the `'length-changed'` event being emitted on the array.

Signals and behaviors are compositional. For example, `::becomesLessThan` could be defined in terms of `::becomes`, which accepts an arbitrary predicate.

``` coffee
class Signal
  becomesLessThan: (targetValue) ->
    @becomes (value) -> value < targetValue
```

`::becomes` can in turn be defined as in terms of more primitive methods:

``` coffee
class Signal
  becomes: (predicate) ->
    @map (value) -> !!predicate(value)
    .distinctUntilChanged()
    .changes()
```

That says we should convert the behavior to a behavior based on the result of the predicate for the underlying behavior's current value. Then we only emit events if we're changing from true or false and vice versa (no repeated values). Then, in case `becomes` was called on a behavior, we convert it into a signal of just the changes (not the current value) with `changes`.

Behaviors and signals are a work in progress, and are an extension to the [Emissary](https://github.com/atom/emissary) library which already contains our custom Emitter and Subscriber mixins. I opted to extend Emissary rather than use RxJS or Bacon.js because I don't like the hot-vs-cold signal distinction and wanted really clean integration with our subscriber and event-emitter patterns. This is core infrastructure, so I want to control it and incrementally develop it to suit our needs. I don't think fleshing it out will represent a major cost in the grand scheme.
### Derived Collections

Signals and behaviors give us structured abstractions for deriving streams of time-varying scalar values, but Telepath also offers tools for deriving _collections_ that change over time. The `Model` superclass offers `relatesToMany` and `relatesToOne` methods for associating derived collections with model instances. In this case, we're using `relatesToMany` combined with the `selectMany` method to maintain an up-to-date collection of all panes on the `PaneContainer`:

``` coffee
class PaneContainer
  @properties
    children: []
    activePaneId: null

  @relatesToMany 'panes', ->
    @children.selectMany (child) -> child.panes

class PaneAxis
  @properties
    orientation: null
    children: []

  @relatesToMany 'panes', ->
    @children.selectMany (child) -> child.panes

class Pane
  attached: ->
    @panes = [this]
```

`selectMany` is a lot like `flatMap`. It maps a function that returns collections over all the elements in `@children`, then flattens the result into a single collection. The difference between `selectMany` and `flatMap` is that `selectMany` returns a _derived_ collection, meaning it will always be kept up to date as elements are added/removed in the underlying arrays. Derived collections have convenient methods like `onEach`, which executes a callback for all current and future panes:

``` coffee
paneContainer.panes.onEach (pane) -> pane.addHeader(new TabStrip(pane))
```

Derives collections can be composed. Here, `relatesToOne` is used to define a singleton derived collection for the active pane:

```
class PaneContainer
  @properties
    children: []
    activePaneId: null

  @relatesToMany 'panes', ->
    @children.selectMany (child) -> child.panes

  @relatesToOne 'activePane', ->
    @panes.where(id: @$activePaneId)
```

The `activePane` is derived from the `panes` collection. We pass the `where` operator a behavior based on the `activePaneId`. Whenever the active pane id changes, the collection will update automatically and change the value of `activePane`. The `.hasOne` declaration automatically defines `$activePane`, a behavior based on the current active pane.
## View <-> Model Binding

To be continued...
",18797,True,en,0
899,3,9,0,Internals,probablycorey,2013-09-27 23:40:45,1,1,1,0,"![spec suite](https://f.cloud.github.com/assets/596/1230172/a8900146-27cd-11e3-8c3c-92915deab65b.jpg)

Do you hate error messages like this as much as I do? TELL ME WHICH FILE HAS AN UNMATCHED ] COFFEESCRIPT!

This annoyed other people did too and it is fixed in the [unreleased CoffeeScript code](https://github.com/jashkenas/coffee-script/commit/67fd84fc1d679a0f9ce5dc95356f98bed7087edc). So now syntax errors look like this:

![spec suite-1](https://f.cloud.github.com/assets/596/1230178/faac2e64-27cd-11e3-914d-9717db3c1d1f.jpg)
",533,True,en,0
891,11,3,8,Internals,kevinsawicki,2013-09-27 15:39:09,55,37,11,0,"It appears that each opened editor is never gc'ed.
### Steps to reproduce
1. Open Atom with no editors open
2. Open `vendor/jquery.js`
3. Close the editor
4. Run `gc()`
5. Look at heap usage
6. Repeat
### Before

![screen shot 2013-09-27 at 8 37 21 am](https://f.cloud.github.com/assets/671378/1227038/debcf7da-278a-11e3-8bc6-77a8d036368e.png)
",344,False,en,0
882,2,0,0,Internals,nathansobo,2013-09-25 18:47:42,17,20,3,0,"This version of telepath provides telepath.Model, document-based property resolution, and relational operators. Nothing much has changed yet except for the serialization of the window state, but this upgrade begins a process that will eventually eliminate all manual (de)serialization and manual management of telepath state documents.
",336,True,en,0
859,1,4,0,Internals,jasonrudolph,2013-09-18 14:47:12,1,1,1,0,"Upgrade to [to-the-hubs v0.2.0](https://github.com/atom/to-the-hubs/releases/tag/v0.2.0), which includes the [history command](https://github.com/atom/to-the-hubs/pull/3) that @kevinsawicki added, as well as a few minor tweaks.
",228,True,en,0
849,5,2,0,Externals,benogle,2013-09-17 00:19:17,44,13,2,0,"- Use the -G option in nak (depends on gjtorikian/nak#29)
- Add more info to the output
",88,False,en,0
789,2,11,0,Internals,nathansobo,2013-09-04 13:19:16,9,7,4,0,"**This may never get merged**, but I'm putting it out there as something to think about should we decide to transition back to thinking about some of our packages as ""tightly coupled"" to Atom core for a while.

@kevinsawicki and I had a good talk last night that makes me doubt whether we need to do this. Here's the situation:

Our ability to version packages independently of atom core basically hinges on the stability of our core API. If we're able to make backward-compatible changes to core, then there's no imperative to commit repairs to broken packages in lock-step with our core changes, because nothing will break. This will have to be our approach when we launch private alpha, because otherwise we'll break other people's packages in addition to our own. Core API stability will be a high priority.

However, for the next two months we're going to make one last push to fix any outstanding issues with the design of our API. We may or may not be able to preserve backward compatibility for all packages during this transition. If it's easy to preserve, then I'm inclined to do so. But my top priority is getting the design in good shape as quickly as possible, so if backward compatibility is getting in the way, submoduling some or all of our core packages again _temporarily_ may be a good option. In this final push to improve the API before giving this to people, its stability is a low priority.

I'm going to attempt the MVVM refactoring in a way that maximizes backward compatibility and make a small number of non-backward compatible changes directly on master. Depending on our experience in the coming weeks, we may discover we don't need to submodule. On the other hand, I think it could be expedient as a temporary measure while things are in massive flux. I promise to stop breaking the world when we release, but the world isn't how I want it yet.
",1875,True,en,0
749,1,2,0,Internals,nathansobo,2013-08-23 03:51:29,105,0,1,0,"We've had some deep discussion on #747 :airplane: about the conventions we want to adopt for documenting our source code. On the one hand, we want to provide rich, browsable documentation for the consumers of our APIs. This is clearly critical to the success of our community. On the other hand, we we want the experience of _working_ with documented source code to be as smooth and lightweight as possible and keep our source files looking sexy.

So far, the discussion has been about the full fidelity of TomDoc vs. the compactness and lower maintenance burden of less a less formal approach. After pondering this for a while, I think that by innovating on our documentation format we can satisfy all of these concerns. With this PR, I'd like to start a conversation about what that format might look like.

While it's true that TomDoc is a standard of sorts, I don't think it's meeting our needs well. My main criticism is that it feels very bulky, and it's causing our source files to feel extremely cluttered. We need a format that's simple for simple methods–on the order of a single line–but that also scales smoothly to five, ten, or even more lines as the need for documentation increases. I think this proposal can provide that.
",1243,True,en,0
717,5,0,0,Internals,probablycorey,2013-08-16 21:38:22,251,163,13,0,"Ignore.

This branch became garbage, `git fsck` let me fix it locally but I still needed to push it to another branch.
",119,True,en,0
707,3,0,0,Externals,tnm,2013-08-14 02:16:35,18,9,1,0,"cc @github/atom 
",17,True,en,0
701,1,3,0,Externals,benogle,2013-08-13 01:57:22,13,0,2,0,"Packages should specify the styles for each theme they care to support. I'm sure you guys have talked about how you might want to do this. This is a simple way.

It just adds a class of the theme name to the body element. 

So in my package, I can specify a 

```
.atom-dark-ui {
   .my-plugin-junk {...}
}
```

We could also encourage that they are broken up into stylesheets named by the theme. But of course, a package author could just put this theme specific stuff into their global stylesheet. 

An alternative is selectively loading stylesheets with the same name as the theme from the package's `stylesheet` directory (I remember a section in the docs talking about this with a 'not implemented' tag). I haven't looked too deeply into the pkg manager yet to know how difficult it might be.

Thoughts?
",809,True,en,0
651,3,5,1,Internals,gjtorikian,2013-07-21 09:04:00,92,0,4,0,"I'm working on creating an Emmet plugin for Atom.

Most of what needs to be done is overriding Emmet functionality to work with Atom's API. Most of the interactions with Emmet expect character index positions in a document. Basically, this necessitates translating `[row, column]` positions into the index position.

I'd like to add the `indexForBufferPosition and`bufferPositionForIndex` to translate between the two positions. You can see it [used here](https://github.com/atom/emmet/blob/1e274e258956ed67a14f059e1186405ef78194ab/lib/editor-proxy.coffee#L107-L116).

Ideally I would prefer this to go right into `Point`, but the whole point is that it depends on `@buffer` to know how to calculate previous line lengths. 
",724,True,en,0
643,3,1,0,Externals,benogle,2013-07-19 00:33:05,37,0,4,0,"There was a `editor:move-to-first-character-of-line` but no corresponding `editor:select-to-first-character-of-line` command. This adds the select command.
",156,True,en,0
641,1,14,0,Internals,mcolyer,2013-07-18 23:48:06,19,0,2,0,"This now makes sure that new users can install packages (as if the directory is missing, packages won't install).

@probablycorey @nathansobo feedback appreciated.
",164,True,en,0
619,41,0,0,Internals,kevinsawicki,2013-07-09 16:42:49,467,100,32,0,"Initial work towards seeing what other Atom people are online, what they are working on, and hosting/joining pairing sessions with them.

:negative_squared_cross_mark: not ready :negative_squared_cross_mark: 
- [x] Add buddy list view
- [x] Use Pusher for broadcasting repositories and branches for each window
- [ ] Start/stop hosting session from buddy list
- [ ] See who is in your session
- [ ] Invite someone
- [ ] Join button from buddy list
- [ ] See states, able to pair, pairing, unable.
",497,True,en,0
612,107,0,0,Internals,kevinsawicki,2013-07-02 21:28:38,1366,1880,82,0,,0,False,en,0
582,22,2,0,Internals,kevinsawicki,2013-06-10 23:01:51,272,56,14,0,":no_entry: Not ready :no_entry:
- [x] Browse your Gists
- [x] Open files from your Gists
",89,False,en,0
490,70,5,0,Internals,nathansobo,2013-04-10 01:14:31,992,72,44,0,":rotating_light: Work in Progress :rotating_light:

Getting nicer, now that I can utilize bootstrap styles for the forms / nav:

![Screen Shot 2013-04-17 at 2 04 57 PM](https://f.cloud.github.com/assets/1789/393527/d8e19e44-a79a-11e2-8166-7a0728d20f54.png)
## To Do
- [x] List available packages and allow them to be disabled with checkboxes
- [x] List available themes and allow them to be dragged into an enabled themes list
- [ ] List editor for the ignored names array
- [ ] UI to customize the invisible characters
- [x] Improve the layout
- [ ] Make a light / dark theme for config
- [ ] Add a button to open the `~/.atom` directory
- [ ] Editor for the user stylesheet
- [ ] Keymaps editor
## Description

Now, when you press `meta-,`, instead of just loading your `.atom` directory we will load a custom configuration interface. It will contain various panels, some added by the core system and others added by packages that have `activateConfig` methods in their main modules. The forms read/write to/from the `config` global, and other windows detect the user's `config.cson` changing and reload the config automatically.

There's the beginnings of a rudimentary bindings system for form fields. You can give a form field a `name` and a `type` attribute that binds it to a config field. So an input element with a name of `editor.fontFamily` will automatically display and update that key path in the config.

It's also worth noting that it took a bit of trickery to get the form fields working properly. This may be of interest to @jbarnette, who ran into similar issues. There's a custom `native!` binding that you can assign in they keymap. If any element ever matches that binding, we will immediately abort processing in the keymap and let the browser handle the keypress as normal. I applied this binding to input elemetns that don't have the class of `hidden-input` for the arrow keys, tab, backspace, etc to allow them to function as normal. It just seems like overkill to always use editors instead of form fields. For simple interfaces, a form seems fine to me. And it will blend in better with select menus, etc.
",2134,True,en,0
472,2,1,0,Internals,zcbenz,2013-04-03 15:46:13,36,6,3,0,"For #310

![136500364282258](https://f.cloud.github.com/assets/639601/334525/5e29ddea-9c75-11e2-86f8-aa2f367f3dec.gif)
",119,True,en,0
467,11,4,0,Internals,gjtorikian,2013-04-01 01:06:14,103,1,8,0,"I wanted to keep learning about the extension creation process; I thought a git diff tool might be nice to add to the core packages. Diffs are done between whatever is committed in `HEAD` versus whatever is currently on disk.

![Screen Shot 2013-03-31 at 5 48 43 PM](https://f.cloud.github.com/assets/64050/322638/775b299c-9a66-11e2-96f3-6e4f7403a6e7.png)

This is still very much a work in progress, mostly around UX and how the changes should be represented. I need a little help on panel-splitting and editor creating. Unlike `MarkdownPreview`, I don't think this diff should split into its own window, and should instead act as an ""overlay"" for the current file.  Ideally I'd love to mimic GitHub's own diff view with two gutters, one for the original lines and another for the changed.
",791,True,en,0
462,1,3,0,Internals,mutle,2013-03-28 16:18:14,76,7,4,0,"Column/box selection. Basically this creates a selection per line to allow editing on multiple lines at the same time.

In the specs it works, however when actually using it, once it goes over two or three lines of selections the editor gets really slow, so probably I'm doing something wrong or not quite right.
",313,True,en,0
457,8,7,0,Internals,zcbenz,2013-03-27 12:54:55,145,420,12,0,"- [x] Remove pathWatcher in native code and use node's fs module instead
- [x] Make sure fs.watch work correctly
- [x] Make sure all fs watchers are released when reloading
",173,False,en,0
455,1,1,0,Internals,mutle,2013-03-26 16:53:40,7,1,1,0,"I think calling select-line n times would cause it to select the next n lines, however it looks like it only selects the current line. I looked into solving this but I don't yet fully understand how selections work internally.

I included a failing test in the pull request. Let me know if this is a bug or how select-line should behave.
",338,True,en,0
447,7,2,0,Internals,mutle,2013-03-22 22:54:49,380,0,11,0,"I have a few ideas for other packages, and most require some form of custom UI.

To make it easier for plugin authors to build a UI and not have to start from scratch, this will provide a simple API for creating Dialogs.
",221,True,en,0
438,5,1,0,Internals,zcbenz,2013-03-21 15:03:37,441,122,9,0,"Some features such as reload current window, are hard-coded in `OnKeyEvent`, I moved them into menubar so when you press corresponding shortcuts you can see visual feedbacks on menubar.

![Screen Shot 2013-03-21 at 10 54 31 PM](https://f.cloud.github.com/assets/639601/286231/4cc4d5ac-9237-11e2-8d05-7aba16239804.png)
![Screen Shot 2013-03-21 at 10 54 42 PM](https://f.cloud.github.com/assets/639601/286232/51128460-9237-11e2-9f66-47cb67f911d3.png)
![3](https://f.cloud.github.com/assets/639601/286212/f2e7a2f8-9236-11e2-9c32-b59cfa6471c9.png)
",544,True,en,0
425,2,2,0,Internals,jbarnette,2013-03-16 05:28:15,124,33,33,0,"This isn't necessarily the interface we'll want in the end, but all I care about right now is taking a stab at removing the `project` global.

This prints deprecation warnings every time `window.project` is get or set directly. There are some spec failures I don't totally understand. Extra hands here would be very, very welcome.
",331,True,en,0
423,1,6,0,Internals,gjtorikian,2013-03-15 20:51:14,83,4,3,0,"I'm really interested in improving the search experience. Much of my behavior, whether I'm in an unfamiliar codebase or just trying to mass-update some content, revolve around search. I'd love Atom to duplicate, at a minimum, the capabilities found in other editors.

In this PR, I've got an extraordinarily basic set of functionality working: non-RegExp searches, case sensitive searches, and whole word searches. What I'm most concerned about is validating whether I'm comprehending how search works. Here's what I'm observing:
1. Search latches onto the command panel, which uses Sam syntaxes
2. When you fire off a search, you call the command interpreter, which  takes a look at _commands.pegjs_ to determine what it is you want to do
3. After realizing you want to search, a new `RegexAddress` is constructed, and executed

My confusion comes from how to correctly pass along options to `RegexAddress` in a sane manner. The way I'm doing it right now is kind of ugly: after clicking a button in the command-panel, [global options are set in `RegexAddress`](https://github.com/github/atom/blob/8fbef8e598ea37ea277089cc1fad2fb0f7bfea48/src/packages/command-panel/lib/command-panel-view.coffee#L149-L150). Every time a search is executed, [those options are read](https://github.com/github/atom/blob/8fbef8e598ea37ea277089cc1fad2fb0f7bfea48/src/packages/command-panel/lib/commands/regex-address.coffee#L20-L25). 

I feel like there's a better way to do this.

Pending items:
- [ ] Implement a sane way to inject options into search
- [ ] Get proper Octicons for search options (file an issue to get these added?)
- [ ] Add CSS for `active` and `hover` states
- [ ] Add tooltips (is it possible to use non-native tooltips?)
- [ ] Write tests

P.S. I have so many other concerns about the Sam syntax--like, should a user that hits `Ctrl-F` be able to delete the starting `/` or `Xx/`? Should there be a ""reset"" button? Should there be more UI options for choices like `,x/` or replacing content? I really have a soft spot for Plan 9 (though I'm more familiar with Acme :smirk_cat:); I just think every function accessible to the keyboard-typing crowd should be there for the mouse-clicking crowd.
",2198,True,en,0
420,3,1,0,Internals,mutle,2013-03-15 13:13:43,1,1,1,0,"Continuing #355.
",17,True,en,0
419,92,13,0,Internals,mutle,2013-03-15 13:12:19,2072,23,19,0,"Continuing #325.
",17,True,en,0
418,107,1,0,Internals,mutle,2013-03-15 13:11:27,1544,1,24,0,"Continuing #234.
",17,True,en,0
410,14,2,0,Internals,jbarnette,2013-03-13 01:39:16,12,20,3,0,"This isn't quite ready. `FuzzyFinderView` is changed to deal in absolute paths except when actually rendering, which makes it a lot easier to deal with things like edit sessions on files outside the project root.

Before this change, choosing a file outside the project root from the buffer list would raise an exception.

The path display for stuff that's not in the project needs to be a bit better: Right now I'm just blindly calling `project.relativize` on everything instead of checking to see if the path is actually under the project root.

/cc @defunkt
",561,True,en,0
406,4,12,0,Internals,gjtorikian,2013-03-12 18:18:09,4,3,2,0,"Picking up on an idea from _way back_ [in Janauary](https://github.com/github/atom/issues/129).

Personally, I believe mucking around with node-gyp and compiling native entities should be kept to a minimum. Especially when coming up with a cross-platform application, cross-platform features need to be respected. 

Among other things, `ag` doesn't really work too well on Windows. I would like to suggest switching to [`nak`](https://github.com/gjtorikian/nak) if possible.
### Advantages
- Cross platform (you got Node, you got `nak`)
- Streams results. This is key, I think. Think of how search results populate in through Sublime Text. `ag` (and currently, Atom) just dump a blob of search results. That's a wonky UX.
- Search results are _in order_. Whereas `ag` returns results like this:  
      `./vendor/themes/Zenburnesque.tmTheme`  
      `./vendor/underscore.js`  
  `nak` knows that you should search and list your current dir, before advancing alphabetically through the subdirs.
### Disadvantages

Over the last few weeks, `ag` got faster. I shaved 500ms off of `nak` in comparison searches, but it's still about four times slower. Here are some numbers:
- Searching for the word ""silver"" in all of atom (13300 files) 
  - `ag`: 0.240 seconds
  - `nak`: 1.516 seconds
- Searching for the word ""function"" in all of atom (13300 files) 
  - `ag`: 0.602 seconds
  - `nak`: 1.989s seconds
- Searching for the letter ""v"" in my dev dir (69329 files) 
  - `ag`: 10.42 seconds
  - `nak`: 13.37 seconds

Can `nak` be faster? Actually, yes. Since `console.log` is blocking, every time I stream back  a chunk of results I'm holding up the processing. If I drop the streaming results I can improve the speed a little more, but I kind of prefer the stream.
### Other search-y stuff

`ag` and `nak` both allow for whole word matching, case-sensitivity, non-regexps, _e.t.c._. Atom needs to figure out a way to do these things.

Also, `nak` supports find _and replace_ in files. You can also filter on the file level, _e.g._, `--ignore *.js` excludes JS files, `--include *.less` only checks LESS files. 
#### More ?!

`nak` can also be used to populate the fuzzy-file list. It takes around 300ms to get all the files in the Atom dir. Unfortunately, that's not in this PR, because I couldn't get it to work properly.
",2316,True,en,0
383,90,3,0,Internals,kevinsawicki,2013-03-07 18:47:31,755,35066,199,0,":rotating_light: Not ready to be merged :rotating_light: 

The main goal of this branch is to switch to [cefode](https://github.com/zcbenz/cefode) and pull out native code already in Atom into npms.
# Phase 1
- [x] Pull out [ctags npm](https://github.com/atom/node-ctags)
- [x] Put out [oniguruma npm](https://github.com/atom/node-oniguruma)
- [x] Pull out [git npm](https://github.com/atom/node-git)
- [x] Remove internal ChildProcess and use node's instead
- [x] Migrate `fs` to use node's APIs instead of `$native`
- [x] Use underscore node module
- [x] Use coffee-script node module
- [x] Use d3 node module
- [x] Rename atom's `fs` to `fs-utils`
- [x] Extend node's `require` to support the coffee cache
- [ ] Migrate heavy IO web worker tasks to use async IO instead
# Phase 2
- [ ] Move cefode-\* repositories to Atom organization
- [ ] Don't worry about supporting multi-threading
- [ ] Put all modifications from upstream on a `cefode` branch that's rebased on top of `master`, with nice explanatory commit messages. There should be a clear separation of upstream code and changes.
- [ ] Upgrade to node 0.10
",1118,True,en,0
373,1,4,0,Internals,gjtorikian,2013-03-07 09:07:40,84,5,3,0,"I'm really interested in improving the search experience. Much of my behavior, whether I'm in an unfamiliar codebase or just trying to mass-update some content, revolve around search. I'd love Atom to duplicate, at a minimum, the capabilities found in other editors.

In this PR, I've got an extraordinarily basic set of functionality working: non-RegExp searches, case sensitive searches, and whole word searches. What I'm most concerned about is validating whether I'm comprehending how search works. Here's what I'm observing:
1. Search latches onto the command panel, which uses Sam syntaxes
2. When you fire off a search, you call the command interpreter, which  takes a look at _commands.pegjs_ to determine what it is you want to do
3. After realizing you want to search, a new `RegexAddress` is constructed, and executed

My confusion comes from how to correctly pass along options to `RegexAddress` in a sane manner. The way I'm doing it right now is kind of ugly: after clicking a button in the command-panel, [global options are set in `RegexAddress`](https://github.com/github/atom/blob/8fbef8e598ea37ea277089cc1fad2fb0f7bfea48/src/packages/command-panel/lib/command-panel-view.coffee#L149-L150). Every time a search is executed, [those options are read](https://github.com/github/atom/blob/8fbef8e598ea37ea277089cc1fad2fb0f7bfea48/src/packages/command-panel/lib/commands/regex-address.coffee#L20-L25). 

I feel like there's a better way to do this.

Pending items:
- [ ] Implement a sane way to inject options into search
- [ ] Get proper Octicons for search options (file an issue to get these added?)
- [ ] Add CSS for `active` and `hover` states
- [ ] Add tooltips (is it possible to use non-native tooltips?)
- [ ] Write tests

P.S. I have so many other concerns about the Sam syntax--like, should a user that hits `Ctrl-F` be able to delete the starting `/` or `Xx/`? Should there be a ""reset"" button? Should there be more UI options for choices like `,x/` or replacing content? I really have a soft spot for Plan 9 (though I'm more familiar with Acme :smirk_cat:); I just think every function accessible to the keyboard-typing crowd should be there for the mouse-clicking crowd.
",2198,True,en,0
358,2,4,0,Internals,Caged,2013-03-05 20:53:21,21,2,4,0,"Adds visual indication that you're running in dev mode.  

![Screen Shot 2013-03-05 at 12 51 20 PM](https://f.cloud.github.com/assets/25/224500/8b453b86-85d6-11e2-9ce5-f143e0110ed7.png)

Fix for #350 
/cc @kevinsawicki 
",220,True,en,0
355,1,2,0,Internals,mutle,2013-03-05 19:02:52,1,1,1,0,"Currently clicking an item in the tree view doesn't focus the editor, which can be confusing.
",94,True,en,0
332,1,3,0,Externals,cameronmcefee,2013-03-01 02:08:29,1,1,1,0,"Changes the shortcut in the documentation from `ctrl-|` which doesn't work, to `ctrl-shift-|`
",94,True,en,0
325,78,10,1,Internals,mutle,2013-02-28 14:48:47,1932,23,18,0,"WIP: Terminal emulator inside Atom
",35,True,en,0
319,2,1,0,Externals,aroben,2013-02-27 23:54:47,41,4,2,0,"We'll switch back to the new server once it's ready to go.
",59,True,en,0
294,1,2,0,Externals,aroben,2013-02-21 00:22:48,2,1,4,0,"I haven't actually tried building this. Hopefully it works.
### To do
- [ ] Build `libcef_dll_wrapper.a` from source and delete the checked-in copies.
",151,False,en,0
289,1,5,0,Internals,mutle,2013-02-20 14:27:16,10,0,2,0,"When resizing the tree view it does not update the background, leaving a grey shape in the newly created window area:

![Screen Shot 2013-02-20 at 3 25 58 PM](https://f.cloud.github.com/assets/829/176103/82cc075e-7b69-11e2-95c8-066d7fa6ac8d.png)
",246,True,en,0
234,62,14,10,Internals,mutle,2013-02-05 16:33:12,1152,0,17,0,"Package that provides vim-style modes and familiar keybindings

This is my first atom package so I'm hoping for some suggestions on how to improve this.
",153,True,en,0
171,148,0,0,Internals,kevinsawicki,2013-01-25 02:08:32,7727,3677,606,0,"work hard, web hard
",20,True,en,0
157,7,4,0,Internals,gjtorikian,2013-01-23 01:18:39,16,2,2,0,"I tried very hard to make them swank like Sublime.

I was also a bit disappointed, it seems that the fake-webkit-wrapper doesn't allow for dragging of tabs. After adding `draggable=true` I couldn't get the tabs to rearrange. Any ideas?

When we truly get theme support we'll also need to consider matching colors of tabs with the overall theme of the editor.
",359,True,en,0
145,5,1,0,Internals,jonrohan,2013-01-18 06:00:13,133,14719,46,0,"I really wanted to move the stylesheets out of `src/` and into it's own theme. ""Atom - Dark""

The reason being, having the style easily findable will facilitate users creating their own theme more quickly.
- [ ] Fix specs
- [ ] Gonna Migrate @Caged's theme here also
- [ ] Create Atom - Light

@Caged @nathansobo @probablycorey @kevinsawicki 
",343,True,en,0
144,1,1,0,Externals,derekgr,2013-01-18 02:36:36,7,2,3,0,"On OS X I generally expect in a document editor that command-shift-S gives me a ""Save As"" dialog; I couldn't find an existing binding that would let you save the contents of a buffer with an existing path under a new path.

The cmd-shift-S keybinding was already set to `window:save-all`, so please reject this pull if you want to keep it that way. It was just a little surprising to me as a mostly-Mac user.
",409,True,en,0
142,1,1,0,Externals,adelcambre,2013-01-18 00:19:14,21,0,5,0,,0,False,en,0
141,29,1,2,Externals,derekgr,2013-01-17 23:42:50,165,16,15,0,"Vim has a nice feature where you can try to find matching tags under the current cursor (`ctrl-]`) or try to find something filename-like under the cursor, then open that file (`gf`).

I wanted to do something for Atom during my hack day time and thought it might be interesting to add a ""fuzzy find things under my cursor"" command, defaulting to looking for files. If there's a single match, the file just opens, and if there are multiple matches, you get an open fuzzy finder with the text under your cursor pre-populated.
",525,True,en,0
131,3,8,0,Externals,wfarr,2013-01-16 23:32:54,67,0,8,0,"WIP
- [ ] specs
- [ ] proof of concept ruby test package using this base

This extension should act as a base to ""extend"" for other compilation extensions.
The idea is inspired by the Emacs compile-mode and similar utilities.

Example theoretical usage:

```
Compile = require('compile')

module.exports =
class RubyTest extends Compile
  compileCommand: ->
    'bin/rspec'

# maybe some automated binding to the same key regular Compile would use?
```

Maybe this should just be a library in the stdlib?

Kinda want to hear thoughts on this approach.
",552,False,en,0
123,12,1,0,Internals,nathansobo,2013-01-09 19:22:44,310,226,15,0,"This PR loads snippets out of packages and TextMate bundles, and it also takes some further steps toward making the snippets system TextMate-compatible by supporting nested snippet tab stops. There are still some missing features and incompatibilities with TextMate snippets, which I intend to address after the `0.1` release:
- There are unknown bugs with tab stop jumping in the coffeescript class snippet (and maybe others)
- Complex TextMate scope selectors involving `|` and `-` are not translated correctly to CSS
- When nested tab stops are destroyed, undo does not restore them cleanly
- TextMate variables / shell interpolation doesn't work (this might not be something we do anytime soon)
",699,False,en,1
109,1,5,0,Internals,mutle,2012-12-18 16:41:59,235,10,6,0,"Currently this only sets up the Application menu to look more like a regular Mac app by providing About, Preferences and Hide. I also plan on adding menu shortcuts for commonly used functions.
",193,True,en,0
100,56,8,27,Internals,probablycorey,2012-12-05 22:36:35,1110,3248,144,0,"An experiment to port Atom's WebKit backend from CEF to node-webkit. If this works we will have node.js as a first-class citizen in WebKit's V8 engine. This will remove the need for much of our native code and allow us to use npm modules.
",239,True,en,0
92,1,1,0,Externals,wfarr,2012-11-02 13:33:26,66,0,4,0,"WIP

Marks all trailing whitespace by highlighting it red.
",59,True,en,0
70,1,10,0,Internals,Caged,2012-10-12 00:53:07,94,8,1,0,"Adds the common ""Hide"" menu items, mapped to their standard shortcuts.

![](http://cl.ly/image/440T0Q1o2s1q/content)
",117,True,en,0
62,14,9,0,Internals,kevinsawicki,2012-10-09 03:33:59,110,62,6,0,"### What changed
- Add `native.traverseTree` that can optionally not recurse into sub-directories.
- Execute `onFile` and `onDirectory` callback functions for current path in C++ instead of JavaScript.
- Use [fst_open](http://www.kernel.org/doc/man-pages/online/pages/man3/fts.3.html) to walk tree
- Relativize returned paths in C++ instead of JavaScript
- Remove need to call`native.isFile()` and `native.isDirectory()` on each entry by using the information provided by the current `FTSENT`.
### Results
#### Current times

github/atom: `12359 paths took 529ms`
github/github: `45117 paths took 2120ms`
#### New times

github/atom: `12359 paths took 146ms`
github/github: `45117 paths took 541ms`
",699,False,en,0
60,1,1,0,Externals,wfarr,2012-10-06 18:38:43,16,0,1,0,"WIP

Can totally support whatever, seems to work well for me.

Needs tests still.
",82,True,en,0
57,13,2,0,Internals,nathansobo,2012-10-04 22:24:44,207,203,16,0,"All of our extension events are prefixed by the extension name, like `tree-view:toggle`. This branch  prefixes core atom events similarly. I think this will help organize the events and make the system more comprehensible. The prefix scheme is basically describing what piece of the system is intended to receive the event.

There are 3 new prefixes:
- `core:` This is for all events that have universal meaning, like moving, selecting, copying, pasting, etc. These could be interpreted by the editor, but also extensions.
- `editor:` This is for events that only make sense in the context of the editor.
- `root-view:` A handful of events, like switching panes or changing the font size, are handled mainly by the root view.
",726,True,en,0
56,11,7,2,Internals,kevinsawicki,2012-10-04 00:52:56,210,12,10,0,"### Goal

Make it easier to write extensions that only operate on editors and do not contribute any UI such as commands that alter the currently selected text.

There are two initial command extensions for upper-casing and lower-casing the selected text included in this PR.
### Example

A simple command extension to remove vowels from the selected text.  The parent class, `EditorCommand`, handles registering the keymaps in all current and future editors and calls the `execute` method defined.  `EditorCommand` provides a helper to alter the current selection with some replacement text.

``` coffeescript
class VowelRemover extends EditorCommand
  @getKeymaps: (editor) ->
     'meta-V': 'devowel'

  @execute: (editor, event) ->
    @replaceSelectedText editor, (text) ->
      text.replace(/[aeiouy]/gi, '')
```
",819,True,en,0
52,1,8,0,Externals,wfarr,2012-09-30 06:27:49,1537,0,26,0,"We use Puppet extensively and there's no sense in everyone working on
Boxen or our production server config all setting this up module
independently.
",150,False,en,0
38,31,2,0,Internals,kevinsawicki,2012-09-13 23:36:46,348,335,34,0,,0,False,en,0
34,1,2,0,Internals,defunkt,2012-08-15 01:00:23,1,0,1,0,"Apple's docs:
http://is.gd/sbeE2d

Pull Request: master
",56,False,en,0
32,8,1,0,Internals,kevinsawicki,2012-08-03 21:39:26,44,10,7,0,"### The Problem

Native scrollbars on most Linux distros look terrible.
### The Solution

Override the scrollbars using a Linux-specific stylesheet.

This required adding a native `getPlatform()` method that is stored as the `platform` property on the window object that is used to require a stylesheet with the current platform name.
#### Before

![](http://img.skitch.com/20120803-qncdnp8bfnw1a4wg7844i67da1.png)
#### After

![](http://img.skitch.com/20120803-k8hxwy6d88cj2yei52qc3e1r5b.png)
",494,True,en,0
19,5,1,0,Internals,probablycorey,2012-06-12 21:03:07,107,147,4,0,"### We don't want Atom to lose changes, obvs.

This code keeps track of a buffer's modification state. If you try and close an edit session and the buffer has modifications, it prompts you to save. If you try to reload Atom, and a modified buffer exists, it gives you the opportunity to cancel.
",295,True,en,0
10,25,2,0,Internals,nathansobo,2012-05-30 18:29:18,321,67,20,0,"This is still in progress...

We're going to adapt Ace's fold modes initially, because they support so many languages.
",119,True,en,0
