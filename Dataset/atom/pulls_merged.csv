pull_request,number_of_commits,number_of_comments,number_of_reviews,user_type,user_login,merged_at,number_of_additions,number_of_deletions,number_of_files_changed,number_of_days,message,number_of_characters,second_line_is_blank,language,number_of_test_files
16570,1,0,0,Externals,UziTech,2018-01-16T05:37:47Z,3,3,1,0,"### Description of the Change


Update documentation to point to {GitRepository} instead of {Repository}

",111,True,en,0
16548,1,0,0,Externals,MoritzKn,2018-01-13T01:02:47Z,7,0,1,0,"This is a follow up of #15498

### Description of the Change

Adds a comment that links to the relevant specification for a function.

### Alternate Designs

None

### Why Should This Be In Core?

The documented function is in core

### Benefits

Future changes are more likely to be in line with the spec too

### Possible Drawbacks

None

### Verification Process

None

### Applicable Issues

None
",430,True,en,0
16546,3,2,0,Internals,as-cii,2018-01-15T09:08:26Z,17,19,6,2,"### Description of the Change

Previously, we would assign dock elements a minimum width/height of 2 pixels so that we could detect when the mouse approached the edge of a hidden dock in order to show the chevron buttons. This, however, was causing confusion for users, who expected that extra space to be clickable in order to scroll editors located in the center dock.

With this pull request we will instead register a global `mousemove` event on the window right when attaching the workspace element to the DOM (the event handler is debounced, so this shouldn't have any performance consequence). Then, when the mouse moves, we will programmatically detect when it approaches to the edge of a dock and show the chevron button accordingly. This allows us to remove the `min-width` property from the dock container element, which eliminates the confusing behavior described above.

### Alternate Designs

None.

### Possible Drawbacks

This pull request registers a global mouse move event handler and it could be problematic if we did a lot of work inside of it. However, this handler is debounced and runs only after 100ms since the mouse has stopped moving.

### Verification Process

See https://github.com/atom/atom/issues/14803.

### Applicable Issues

Fixes https://github.com/atom/atom/issues/14803

/cc: @simurai @maxbrunsfeld @matthewwithanm for your previous work on docks.",1408,True,en,0
16542,1,8,6,Internals,daviwil,2018-01-12T21:52:47Z,76,9,2,1,"### Description of the Change

This change fixes #13829 which reports that the `softWrapped` setting of an untitled TextEditor is lost when the buffer is saved to a file.  This is caused by logic that updates TextEditor settings when the buffer's language mode changes.

The fix is to mark some editor settings as ""preserved"" so that they do not get change when switching between two language modes that do not have a different value for those preserved settings.

### Alternate Designs

@maxbrunsfeld and I looked into this together and tried to make TextBuffer not use `NullLanguageMode` as the default but instead a `text.plain` mode to avoid the apparent language mode change that caused the user's original issue.  It turned out that this solution would affect setting changes when going from an untitled buffer to a saved text buffer, so it wasn't sufficiently general.  This seemingly small change also had a pretty big impact on existing tests so it seemed too risky as a fix for such a narrow use case.

### Benefits

This solution allows us to easily mark a subsection of `TextEditor` settings to be preserved when the buffer's language mode changes.  This will cause less user confusion while still allowing buffers to have other relevant settings to be updated to reflect the new mode.

### Possible Drawbacks

The current algorithm for checking value changes is not as efficient as it could be.  I was about to try to change `TextEditorRegistry.textEditorParamsForScope` to use chained underscore collection methods but I didn't want to disrupt the current design any more before getting some feedback.

### Verification Process

Verified using @lee-dohm's excellent verification steps in his comment below.

### Applicable Issues

#13829 
",1778,True,en,0
16533,9,4,2,Internals,jasonrudolph,2018-01-11T15:40:56Z,9,3,1,0,"### Motivation

We'd like to add support for a ""dev"" release channel (in addition to the beta and stable release channels). The dev channel would represent the latest successful build on the master branch.

The primary goal is to make it easy to run a package's CI suite against the current Atom master branch to detect potential issues early, as opposed to only discovering issues after master branch is promoted to the next beta release. For example, if teletype's CI suite periodically ran teletype's tests against an Atom dev channel, it would have automatically exposed the issue in https://github.com/atom/teletype/issues/300, instead of us having to manually discover that issue. üòÖ 

### Making it happen

For macOS on Circle CI, and rpm and debian on Travis CI, we're already producing the necessary build artifacts to support a dev channel.

For Windows on AppVeyor, the installer task produces the build artifacts that we need ([x64 example](https://ci.appveyor.com/project/Atom/atom/build/9355/job/g0vwhhtj59nv283q/artifacts), [x86 example](https://ci.appveyor.com/project/Atom/atom/build/9355/job/wypnj96kr308iioo/artifacts)). As of https://github.com/atom/atom/pull/15208, we only run the installer task on release branches (e.g., `1.23-releases`). We skip the installer task on all other branches, including master. As a result, our builds on the master branch don't provide the necessary artifacts for a dev channel (e.g., [x64 example](https://ci.appveyor.com/project/Atom/atom/build/9371/job/egys9532ba9c59x3/artifacts), [x86 example](https://ci.appveyor.com/project/Atom/atom/build/9371/job/egys9532ba9c59x3/artifacts)).

In addition to running the installer task on release branches, **this pull request aims to update the AppVeyor build to also run the installer task on the master branch.**
",1828,True,en,0
16530,2,0,0,Internals,as-cii,2018-01-10T13:33:25Z,25,11,2,0,"### Description of the Change

This pull request fixes a race condition in the `attemptRestoreProjectStateForPaths` function that could cause a file to be opened more than once within the same workspace pane.

In particular, when opening some file into an empty window, Atom tries to recover the state for the project containing the file (if there is one). However, we were previously not waiting until the `AtomEnvironment`'s state had been fully deserialized before trying to load the requested file into the workspace. If the same file also existed in the serialized representation of the workspace, it could end up being opened twice.

With this pull request we will now wait until the environment has been fully deserialized before honoring the user's request of loading new files into an empty window.

### Alternate Designs

None.

### Benefits

Other than fixing https://github.com/atom/atom/issues/16364, these changes also improve tests, which now verify more thoroughly the behavior of `attemptRestoreProjectStateForPaths`.

### Possible Drawbacks

None.

### Verification Process

See reproduction steps in https://github.com/atom/atom/issues/16364.

### Applicable Issues

Fixes https://github.com/atom/atom/issues/16364",1259,True,en,0
16524,2,0,0,Internals,maxbrunsfeld,2018-01-10T05:29:56Z,9,14,2,0,"Fixes #16517

This PR fixes two performance problems we've observed when [the new `core.useTreeSitterParsers` feature flag](https://github.com/atom/atom/pull/16299) is enabled.

1. https://github.com/atom/atom/issues/16517. For certain types of syntax errors, the parser would accidentally try thousands of different error recoveries due to a gap in Tree-sitter's logic for limiting the effort spent on error recovery. I've addressed that gap in https://github.com/tree-sitter/tree-sitter/commit/dafa897021b12a23bb55042c6ef3748f5e807b37.

2. When editing large files, the `TreeSitterHighlightIterator.seek` method spent a lot of time iterating through long lists of syntax nodes looking for the node that contains a given character index in the document. In https://github.com/tree-sitter/tree-sitter/pull/123, I've added a new native API for quickly finding that node: `ASTNode.firstChildForIndex`.

There are still bugs and performance issues when using the new parsing system which I plan to address next month, but these two were particularly egregious.
  ",1069,True,en,0
16521,3,2,2,Internals,damieng,2018-01-09T21:34:42Z,22,24,2,0,We should remove the protocol handler if never is set however the electron unregister does not appear to work so blow away the registry key instead.  This is only possible on Windows.,183,False,en,0
16518,1,0,0,Internals,as-cii,2018-01-09T17:10:13Z,38,4,2,0,"üçê'd with @nathansobo 

### Description of the Change

This pull request updates the ""add selection below/above"" command to only create new selections if they will not be contained within an existing selection.

### Benefits

Other than improving the performance of the above commands, this fixes https://github.com/atom/atom/issues/14622 by preventing the need to merge redundant intersecting selections, which was causing selections to be reversed when adding selections above.

### Alternate Designs

* Change the behavior of `mergeIntersectingSelections` to be smarter about the directionality of the resulting merged selections. However, those selections never needed to exist in the first place so we decided to ignore this path.
* Change `TextEditor.addSelectionForBufferRange` to re-use selections when the supplied range is contained by an existing selection. We decided to not go with this approach because of the risk of breaking public APIs.

### Possible Drawbacks

Unclear.

### Verification Process

See the reproduction steps at https://github.com/atom/atom/issues/14622.

### Applicable Issues

Fixes https://github.com/atom/atom/issues/14622.",1187,True,en,0
16515,2,0,0,Internals,as-cii,2018-01-09T15:28:02Z,6,3,1,0,"Refs: https://github.com/atom/atom/pull/16511

This fixes a bug that was causing text to be covered up by selections due to the highlights container being rendered above the editor tiles.

| Before                                                                                                        | After                                                                                                        |
|---------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------|
| ![before](https://user-images.githubusercontent.com/482957/34721486-3163a256-f543-11e7-97ce-7f1d15e010d1.gif) | ![after](https://user-images.githubusercontent.com/482957/34721487-3180121a-f543-11e7-8b0f-8ce59894c8e5.gif) |

I have tested that this pull-request doesn't re-introduce the issue fixed in https://github.com/atom/atom/pull/16511.

/cc: @nathansobo ",1011,True,en,0
16513,1,0,0,Internals,BinaryMuse,2018-01-09T01:37:46Z,15,3,1,0,"/cc @damieng, @niik, @Haacked, @ptoomey3, @groundwater ",55,False,pl,0
16512,3,0,0,Internals,nathansobo,2018-01-09T13:08:45Z,1,1,1,0,This PR is just to test our build against the changes in https://github.com/atom/text-buffer/pull/284.,102,False,en,0
16511,2,0,0,Internals,nathansobo,2018-01-08T23:15:07Z,5,5,3,0,"### Description of the Change

This PR moves the highlights container inside of the lines for compatibility with themes that add padding or margin to the lines container. This was partially dealt with in #15317 by moving the cursors container, but the highlights container needs to move as well.

### Alternate Designs

We could fix all the themes to also style the highlights container, but that's a tall order.

### Benefits

Things should line up correctly.

### Possible Drawbacks

I originally rendered these outside of the lines container in the rendering rewrite because they are of a completely different type than the lines tiles, and it felt strange to have lines be a heterogenous collection. But it's not worth breaking themes.

### Verification Process

Load the no-caffeine-syntax theme and verify that the misalignment of highlights (such as selections) described in #15829 is no longer present.

### Applicable Issues

Fixes #15829

/cc @as-cii ",985,True,en,0
16500,1,0,0,Internals,maxbrunsfeld,2018-01-06T01:16:13Z,354,293,2,0,Preparation for https://github.com/atom/atom/pull/16497,55,False,en,0
16497,4,0,0,Internals,maxbrunsfeld,2018-01-06T03:59:04Z,185,38,5,0,"### Motivation

The `--wait` flag allows Atom to block until you are finished editing a file. Unfortunately, the way it is currently implemented, it simply opens a new Atom window and blocks until that entire *window* is closed. This means that opening a file with `atom --wait` is currently much slower than with `atom`, because the latter command can reuse an existing Atom window.

### Solution

This PR changes the behavior of `atom --wait` so that it doesn't necessarily open a new window. It now uses the same criteria for selecting a window that the `atom` command normally uses, and can be freely combined with any other flag. Examples:

* `--wait --new-window` - reproduce the *old* behavior of `--wait`
* `--wait file1 file2` add multiple files to the current window and block until they are all closed
* `--wait --add some-folder` - add a project folder to the current window and block until this project folder is removed
* `--wait some-file some-folder`

No matter how it is combined with other flags and arguments, `atom --wait` will block until all of the specified paths have been closed.

### Result

Once this change ships, you might consider putting this line to your `~/.bash_profile`:

```sh
export GIT_EDITOR='atom --wait'
```

![rebase](https://user-images.githubusercontent.com/326587/34635311-9123ee8e-f242-11e7-9ebc-b8f3b75388d1.gif)


Fixes https://github.com/atom/atom/issues/1433
Depends on https://github.com/atom/atom/pull/16500
  
  ",1494,True,en,1
16495,9,0,0,Internals,maxbrunsfeld,2018-01-05T22:25:52Z,2141,1542,9,0,This is in preparation for fixing https://github.com/atom/atom/issues/1433,74,False,en,1
16493,2,1,0,Internals,lee-dohm,2018-01-08T03:26:40Z,20,0,2,3,"### Description of the Change

`package-lock.json` files are generated by the build on certain configurations. When they are, they can sometimes create strange, hard-to-diagnose errors that prevent successive builds. This change deletes the `package-lock.json` files (that we don't use for Atom) before building so that people who aren't consistently building Atom don't get confused.

### Alternate Designs

Considered actually using the `package-lock.json` files but we're not ready to do that yet.

### Why Should This Be In Core?

Because that's where builds happen.

### Benefits

Easier build experience for everyone :tada:

### Possible Drawbacks

We'll have to rip this out if/when we decide to use `package-lock.json` files.

### Applicable Issues

None known?
",793,True,en,0
16492,5,3,1,Internals,jasonrudolph,2018-01-05T14:51:02Z,22,4,3,0,"Fixes #16004

Supersedes #16127

---

This pull request builds on @itsmichaelwang's changes in #16127 and attempts to resolve the [possible drawbacks noted in that pull request](https://github.com/atom/atom/pull/16127#issue-151324878). (Please see #16127 for background on the overall approach.)

@itsmichaelwang: Thank you for getting this started! :bow:

### Demo

The demo below illustrates:

- <kbd>tab</kbd> to focus next element
- <kbd>shift</kbd>+<kbd>tab</kbd> to focus previous element
- <kbd>escape</kbd> to dismiss modal

![demo](https://user-images.githubusercontent.com/2988/34582512-12b2b7fa-f162-11e7-933f-3fda6ed282d6.gif)

### TODO

- [x] Allow tab navigation from one `atom-text-editor` element to another ordered by tabIndex
- [x] Allow tab navigation from an `atom-text-editor` element to another element ordered by tabIndex
- [x] Get sanity check from maintainers regarding unintended side effects this change might have
- [x] Add a test for specifying a custom tab index on an `atom-text-editor` element
- [x] Document and execute [verification process](https://github.com/atom/atom/pull/16484)

### Verification Process

- [x] Verify that you can tab through text fields and buttons in `github:clone` dialog. (See demo gif.)
- [x] Verify that you can still tab through fields in the find-and-replace dialog.
- [x] Verify that <kbd>tab</kbd> still inserts a tab (or spaces, depending on your preferences) when editing a buffer
- [x] When a line is selected in a buffer, verify that <kbd>tab</kbd> still indents the line and that <kbd>shift</kbd>+<kbd>tab</kbd> still outdents the line.
",1642,True,en,0
16491,1,1,0,Externals,tobiasvl,2018-01-04T18:46:26Z,1,1,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Correct the typo ""defaut"" to the correct ""default"" in the atom:// URI protocol handler popup

### Alternate Designs

None

### Why Should This Be In Core?

A prominent typo should not be one of the first things a new Atom user sees

### Benefits

Not having a typo in a prominent popup

### Possible Drawbacks

None

### Applicable Issues

None",659,True,en,0
16484,2,1,0,Internals,jasonrudolph,2018-01-05T14:29:51Z,14,0,1,1,"### Motivation

**As a contributor**, I often find it useful to explain the steps that I've taken to attempt to verify the results of my changes. For example, see the ""Test Plan"" section in https://github.com/atom/atom/pull/15183 and https://github.com/atom/teletype-server/pull/36#issuecomment-345392976. This serves two purposes:

1. It forces me to consider the scenarios that deserve to be tested. In writing out a test plan, I often think of things that I hadn't previously considered, and this sometimes reveals other cases to address before shipping.
2. It gives maintainers an opportunity to spot additional manual verification that is warranted. (As a contributor, my test plan is often a way of asking, ""What else should I be testing that I don't know about? Please tell me. :pray:"")

**As a maintainer**, I often want to know what steps a contributor has taken to manually verify the results of their changes. This helps me understand the level of rigor that they've already applied, and it can serve as a guide for how much scrutiny is warranted prior to merging their contribution.

### Description of the Change

With the motivation above in mind, this pull request adds a ""Verification Process"" section to `PULL_REQUEST_TEMPLATE.md`, prompting contributors to describe the approach they used to verify that the change has the desired effects.

---

/cc @lee-dohm @50Wliu @ungb @iolsen @as-cii @nathansobo since we've previously talked about adding something like this to the pull request template

  ",1532,True,en,0
16473,1,0,0,Internals,lee-dohm,2018-01-01T18:15:43Z,9,9,1,0,"### Description of the Change

Update the README to point people to the new docs locations.

### Alternate Designs

None considered.

### Why Should This Be In Core?

The README is already in core.

### Benefits

People won't have to click a link to a doc that says ""click here to go to the Flight Manual"".

### Possible Drawbacks

Still can't get rid of the directory altogether because people may have bookmarks or something.

### Applicable Issues

N/A",477,True,en,0
16469,1,0,0,Externals,m1guelpf,2018-01-05T14:31:09Z,1,1,1,4,"TO DO:

- [x] Wait to the next year (100% done, depends on timezone)
- [x] Merge!

:octocat:",97,True,en,0
16458,2,1,0,Externals,mortenpi,2017-12-28T18:14:37Z,12,3,1,0,"An updated version of #15081 which was reverted in #16456.

The changes relative to the original PR, based on the discussion following https://github.com/atom/atom/pull/15081#issuecomment-354180722, are:

* The name of the socket file is now just `atom-#{atomInstanceDigest}.sock` with explicit version info removed. This way the socket file name will have a fixed length and should always fit within the limit.
* Atom version and platform architecture information goes into the digest.
* The digest is now the first 12 characters of the `base64` encoded hash (using the [URL and Filename Safe Alphabet](https://tools.ietf.org/html/rfc4648#section-5), so besides numbers and letters the digest may also contain `-_=`).

I cherry picked the original commit and added the updates as a separate commit. The PR should probably be squashed when merging.

cc @maxbrunsfeld ",877,True,en,0
16456,1,0,0,Internals,maxbrunsfeld,2017-12-27T21:35:47Z,3,9,1,0,Reverts atom/atom#15081 because of [a bug](https://github.com/atom/atom/pull/15081#issuecomment-354180722) that it introduced on mac and linux.,143,False,en,0
16455,4,6,0,Externals,fordhurley,2017-12-27T22:43:41Z,15,0,2,0,"This restores the behavior from when `TextEditor` was written in Coffeescript and extended the `Model` class.

### Description of the Change

With this change, editors opened after restoring the window state will get assigned IDs starting from `max(editor IDs) + 1`.

### Alternate Designs

An alternative could be to select the lowest available unique ID. This would require a more complicated ID generator, but is certainly possible if a more dense ID space is desirable. 

### Why Should This Be In Core?

Assuming that editor IDs are supposed to be unique, this is a bug in core.

### Benefits

Packages that look up editor instances by ID will be able to resolve to the correct editor.

### Possible Drawbacks

I'm not aware of any drawbacks.

### Applicable Issues

Fixes #16454.",809,True,en,0
16451,1,0,0,Internals,lee-dohm,2017-12-26T19:50:55Z,1,283,1,0,"### Description of the Change

Redirect people to the permanent home of the apm and update API documentation in the Atom Flight Manual.

### Alternate Designs

Leaving them here would mean that people would continue to have a hard time finding them. We don't really have any other place to put documentation other than the Flight Manual.

### Why Should This Be In Core?

This is technically removing something from core.

### Benefits

Makes the documentation easier to find and formatted in a more standard way.

### Possible Drawbacks

People might be upset that we moved them even though there's a link to the new documentation.

### Applicable Issues

N/A
",684,True,en,0
16444,2,0,0,Externals,him2him2,2017-12-31T00:36:56Z,7,7,4,4,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change
URLs updated to use HTTPS protocol where appropriate to improve security and privacy.
<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits
Improved security and privacy.
<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->",1324,True,en,0
16441,1,1,0,Externals,malept,2017-12-24T21:29:08Z,1,1,1,0,"### Description of the Change

Remove trailing whitespace from text editor API docs so the linter is happy (and thus the tests pass üòÑ)",139,True,en,0
16421,1,1,3,Internals,daviwil,2017-12-21T19:31:49Z,2,18,1,0,"### Description of the Change

This change updates README.md to point to the new Linux installation instructions in the Flight Manual instead of giving instructions inline.  This change is necessary now that we've added official package repositories for .deb and .rpm based distributions.

### Alternate Designs

Would certainly appreciate any ideas for improvement to the wording.  Seemed better to point the reader to the Flight Manual so that there's one canonical location for Linux package installation instructions.

### Why Should This Be In Core?

Installation docs are core!

### Benefits

Better docs for a better Linux install/update experience.

### Possible Drawbacks

N/A

### Applicable Issues

#2956
",739,True,en,0
16414,1,0,0,Internals,simurai,2017-12-21T02:13:19Z,3,2,1,0,"### Description of the Change

This PR increase the `1px` wide hover affordance to open docks to `2px`.

### Why Should This Be In Core?

Docks are part of core

### Benefits

It allows opening the right dock on Windows when maximized and scaled to 150%. See https://github.com/atom/atom/issues/15728

### Possible Drawbacks

Themes might have to adjust docks toggle button's position for the extra pixel.

![screen shot 2017-12-20 at 7 52 19 pm](https://user-images.githubusercontent.com/378023/34204122-e9ca516a-e5c0-11e7-9ad6-a97cf5127fd3.png)

### Applicable Issues

Fixes https://github.com/atom/atom/issues/15728
",640,True,en,0
16397,1,1,0,Externals,segevfiner,2017-12-17T16:04:25Z,2,1,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Initialize `ProtocolHandlerInstaller` after initializing Config. Config is initialized synchronously, so it should be OK to simply reorder them. Without this `ProtocolHandlerInstaller` fails to read the config value on `initialize` which causes the notification to be shown each time on Atom startup even if you select 'never'.

This allows it to correctly read `core.uriHandlerRegistration` and avoids popping the notification even if set to 'never'.

### Alternate Designs

N/A

### Why Should This Be In Core?

Fixes a bug.

### Benefits

Fixes a bug.

### Possible Drawbacks

Code formatting?

### Applicable Issues

Fixes #16201

cc @damieng @BinaryMuse ",978,True,en,0
16375,2,1,0,Internals,damieng,2017-12-13T21:48:24Z,5,0,1,0,"Newer travis Linux build images have dropped Python 2.x 

node-gyp requires this to build Atom so builds are now failing.",123,True,en,0
16354,11,0,0,Externals,50Wliu,2017-12-11T14:12:09Z,11,11,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

This unifies all atom-select-list dependencies to 0.7.0, which includes performance improvements and UX enhancements (over 0.1.0).  This will also allow us to start deduping atom-select-list again.

### Alternate Designs

None.

### Why Should This Be In Core?

Because these are all core packages.

### Benefits

Less space needed for install due to deduping as well as performance improvements.

### Possible Drawbacks

None.

### Applicable Issues

None.",772,True,en,0
16352,1,0,0,Externals,leroix,2017-12-09T04:11:19Z,1,1,1,0,:arrow_up: git-utils@5.2.0,26,False,en,0
16341,2,1,0,Externals,GilTeixeira,2017-12-07T19:53:14Z,12,12,2,0,"### Description of the Change

Use default theme (One Dark) instead of first theme (Atom Dark) in safe mode, when a custom theme is used in regular mode. When loading the themes, the first theme in the stack would be Atom Dark, with this is change, the top theme will be One Dark.

### Alternate Designs

None.

### Why Should This Be In Core?

Fix Issue [#16196](https://github.com/atom/atom/issues/16196).

### Benefits

Atom's default theme is a much better theme, and has been recently updated (Aug 26 2017) unlike the Atom Dark that had no updates in years (Aug 28, 2014).

### Possible Drawbacks

None.

### Applicable Issues

Fixes #16196",667,True,en,0
16338,3,0,0,Externals,50Wliu,2017-12-07T13:36:43Z,3,3,1,0,Result of `coffee update.coffee` for all three.,47,False,en,0
16337,6,0,0,Externals,50Wliu,2017-12-07T13:37:07Z,6,6,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Most of these changes are really minor.  The only one that is important is the language-php bump.  The PHP grammar is now split up into two files: `html.cson` and `php.cson`.  The HTML grammar acts as a wrapper around the language-html grammar and serves to inject the actual PHP grammar, contained in `php.cson`.  This should make including language-php much easier.",662,True,en,0
16336,1,0,0,Internals,simurai,2017-12-07T08:28:56Z,9,9,1,0,"### Description of the Change

This updates various themes. Better do it with a PR.
",87,True,en,0
16328,2,4,0,Externals,50Wliu,2017-12-21T17:18:42Z,126,58,2,15,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

* When right-clicking when more than one cursor is present or if there is a non-empty selection, the cursor should not be moved to retain proper context
* When middle-clicking, the cursor should always be moved (same behavior as on master)

### Alternate Designs

None.

### Why Should This Be In Core?

This is a regression fix for #16324.

### Benefits

More native right-click handling.

### Possible Drawbacks

Potentially more cases that I didn't think of.

### Applicable Issues

Fixes #16324

/cc @Ingramz",830,True,en,0
16322,5,0,0,Externals,50Wliu,2017-12-21T17:20:06Z,21,11,2,16,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

My previous attempt to prevent specs from modifying the recent project history (#16255) worked for the most part but had some edge cases that I'm attempting to fix in this PR.  Specifically, #16255 only spied on `atom.history.saveState`.  If a different HistoryManager was instantiated, it would be able to save history state and globally modify the recent project history.  I found this to occur in at least two specs: a Workspace spec that was creating a new AtomEnvironment (and hence associated HistoryManager) and HistoryManager specs that used its own HistoryManager instance.  To prevent _any_ HistoryManagers from modifying project history, spec-helper now spies on the HistoryManager _prototype_ rather than a specific instance.  That means all instances of HistoryManager will now have saveState spied on.  However, since some HistoryManager specs explicitly test saveState, for those tests I temporarily unspy saveState and instead spy on the underlying state store.  My previous ""fix"" for HistoryManager was to spy on `atom.applicationDelegate.didChangeHistoryManager`, which is responsible for broadcasting project history changes to other Atom windows.  This was a faulty implementation because while the project history would appear to be conserved, the state store would still be updated with the incorrect project history data.  Therefore as soon as you opened another window the recent projects menu would again be incorrect.

### Test Plan
* Run some specs in the dedicated spec window and then close it.  Ensure that other non-spec windows have their project history maintained, even after opening a new window.
* Run all Workspace specs.  Ensure that other non-spec windows have their project history maintained, even after opening a new window.
* Run all HistoryManager specs.  Ensure that other non-spec windows have their project history maintained, even after opening a new window.

### Alternate Designs

None.

### Why Should This Be In Core?

The legacy spec helper is in core.

### Benefits

No specs should be able to modify project history unless you explicitly unspy `saveState`.

### Possible Drawbacks

None.

### Applicable Issues

#16255",2493,True,en,0
16319,1,2,0,Externals,leroix,2017-12-04T22:26:12Z,1,2,1,0,fix https://github.com/atom/atom/issues/16193,45,False,en,0
16306,2,0,0,Internals,maxbrunsfeld,2017-12-01T18:47:52Z,28,10,2,0,"This fixes a regression introduced in https://github.com/atom/atom/pull/16087 where if you created and opened an editor like this:

```js
const buffer = new TextBuffer()
const editor = new TextEditor({buffer})
await atom.workspace.open(editor)
```

the editor's buffer would never have a *language mode* assigned to it.

/cc @as-cii - üé©  for finding this bug",371,True,en,0
16299,51,13,2,Internals,maxbrunsfeld,2018-01-08T01:24:32Z,1837,80,21,39,"### Overview

This pull request adds a new config setting to Atom: `core.useTreeSitterParsers`, which defaults to `false`. If you set that setting to `true`, when editing files written in certain languages, Atom will use a new parsing system called [Tree-sitter](https://github.com/tree-sitter/tree-sitter) to provide improved syntax highlighting and code folding.

### Syntax Highlighting Improvements

Using the syntax trees provided by Tree-sitter, we can produce syntax highlighting that is more consistent and specific than before. Different kinds of *names* in your code like types, functions, properties/fields,  and local variables should be grouped by color in a more consistent way.

The new syntax highlighting uses the same CSS classes as the old system, so you should be able to continue using your current themes without disruption.

### Code Folding Improvements

Currently, Atom's code folding is based on indentation: in a fold, lines with greater indentation are hidden. This usually gives good results, but it is unintuitive in some cases. Now, by basing the code folding on the *syntax tree* provided by Tree-sitter, we can fold code in an intuitive way regardless of its indentation.

<details>

<summary>Example</summary>

Code like this:

```c
int add(int left,
        int right) {
  return left + right;
}
``` 

would previously fold like this:

```c
int add(int a‚Ä¶
```

Now, we are able to fold it like this:

```c
int add(int left,
        int right) {‚Ä¶}
```

or, if you choose to fold the first *two* lines:

```c
int add(‚Ä¶) {‚Ä¶}
```

</details>

### New Editing Commands

This PR adds two new text editing commands: `editor:select-larger-syntax-node` and `editor:select-smaller-syntax-node`. These commands can be used to quickly select syntactically meaningful units of code: 

<details>

<summary>Example</summary>

![extend-selection-2](https://user-images.githubusercontent.com/326587/33463560-0e43a57e-d5f3-11e7-8de1-40552ca5a367.gif)

</details>

<details>

<summary>Multi-Cursor Example</summary>

![extend-selection-3](https://user-images.githubusercontent.com/326587/33463595-50bc1756-d5f3-11e7-86a5-5b1a5c1e474b.gif)

</details>


### Supported Languages

Initially, the following languages will be supported:

* [x] JavaScript (https://github.com/atom/language-javascript/pull/546)
* [x] TypeScript (https://github.com/atom/language-typescript/pull/14)
* [x] Python (https://github.com/atom/language-python/pull/220)
* [x] C (https://github.com/atom/language-c/pull/257)
* [x] C++ (https://github.com/atom/language-c/pull/257)
* [x] Go (https://github.com/atom/language-go/pull/146)
* [x] Bash (https://github.com/atom/language-shellscript/pull/93)

### Next Steps

The new parsing system is disabled by default because there are some known bugs and it needs more testing before we roll it out to all Atom users. After this PR lands, I'll be focused on fixing bugs in the new parsing system and the existing grammars so that soon, we can enable the new parsing system by default.",3109,True,en,0
16297,2,0,0,Internals,maxbrunsfeld,2017-11-29T20:26:03Z,113,8,1,0,This simple refactor will make it easier to add functionality to `GrammarRegistry` that is not related to TextMate grammars.,124,False,en,0
16295,8,4,0,Externals,xfontes42,2018-01-06T01:01:16Z,15,1,2,37,"## Description of the Change
### The Issue
Atom window state is not being saved. This means that after closing and reopening Atom, the window size is not the same it was before closing. However, blurring the window saves its dimensions.

### Requirements
![](https://i.imgur.com/dBA4iWH.png)

### Source code files
The window dimensions are being saved (_.atomEnvironment.storeWindowDimensions()_) on _handleWindowBlur()_ and _handleWindowBeforeunload()_ functions in [atom/src/window-event-handler.js](https://github.com/atom/atom/blob/master/src/window-event-handler.js). However, there should be an event handler function responsible for handling window resizing. If that event handler existed, then it would save the window dimensions every time they were modified.

### Design of the fix
<img align=""right"" src=""https://i.imgur.com/K3Q7fhz.png"">
AtomEnvironment is a class used to deal with packages, themes, menus and the window. This class contains the functions to save and get the current window dimensions.
 
WindowEventHandler is the class containing all the handlers for the window. The handlers worth checking for this issue are _handleWindowBlur()_ and _handleWindowBeforeUnload()_. These are the handlers where the window dimensions are saved. 

In the diagram above we colored the function that we added in green. This function is a handler that activates whenever the user changes the window dimensions. 

### Fix source code
We first created the new event handler by adding this line of code:
```
this.addEventListener(this.window, 'resize', this.handleWindowResize)
```

Then, we had to bind the handler:
```
this.handleWindowResize = this.handleWindowResize.bind(this)
```

Finally inside the handler, we placed the function that saves the window dimensions, like this:
```
handleWindowResize () {
    this.atomEnvironment.storeWindowDimensions()
  }
```

With this fix, we make sure that the window dimensions are always saved whenever the window is resized.

## Alternate Designs

We considered using setInterval to routinely call the function that stores the window dimensions but this method was discarded as it wasn't event driven and slightly lowered atom's performance.

<!-- Explain what other alternates were considered and why the proposed version was selected -->

## Why Should This Be In Core?

People expect atom to save the window size everytime they resize it so that when they open atom the previously saved size is restored.

## Benefits

Explained above.

## Possible Drawbacks

No relevant drawbacks.

## Applicable Issues
[Window close does not trigger save window state #13909](https://github.com/atom/atom/issues/13909)
<!-- Enter any applicable Issues here -->
",2764,False,en,0
16294,6,17,8,Internals,kuychaco,2017-12-06T18:49:46Z,69,8,5,7,"This PR allows for the use of a `readonly` attribute which disables the input for text editor elements: 

```<atom-text-editor readonly />```

The read-only state is stored on the `TextEditor` model. As of now this state merely prevents text from being input into the editor. Future considerations include using the state to determine modified status, preventing saving, etc.

/cc @maxbrunsfeld @damieng for üí≠s",419,True,en,0
16290,1,0,0,Internals,maxbrunsfeld,2017-11-29T01:43:15Z,1187,1194,12,0,This renames `TokenizedBuffer` to `TextMateLanguageMode` in preparation for the addition of a `TreeSitterLanguageMode` class.,125,False,en,0
16282,10,13,0,Externals,leroix,2018-01-03T23:19:20Z,211,440,9,36,"‚òùÔ∏è 

Fixes #15696
Fixes #15737",37,True,zh,0
16256,3,0,0,Externals,50Wliu,2017-12-04T21:18:08Z,20,13,1,12,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Two enhancements and one bugfix.
* Formats `at it (path.js:1:2)` to simply `at path.js:1:2`
* Speeds up line parsing by updating `firstJasmineLinePattern` to match when the line starts with `at jasmine.` and ends with a Jasmine filepath
* Only replaces forward slashes with backslashes on Windows when `file:///` is present on the same line

Also changed the `for...of` loop to `lines.map`.

### Alternate Designs

None.

### Why Should This Be In Core?

Unfortunately, this is in core and not a separate module :/.

### Benefits

Better stacktrace reporting :sparkles:

### Possible Drawbacks

If the stacktrace line starts with anything we're trying to replace it _will_ get replaced.  In addition, there is a possibility that stacktraces are reported differently on macOS and Linux.  I doubt that however.

### Applicable Issues

Fixes #14053, a regression caused by my previous stacktrace formatting PR.",1227,True,en,0
16255,1,0,0,Externals,50Wliu,2017-11-21T21:32:31Z,9,3,3,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Previously, whenever running specs your recent project history would get :fire:d and completely replaced with whatever paths the tests you're running decided to open.  So most of the time my recent projects history would end up with only one entry, `C:\Users\user\Documents\GitHub\last-package-that-I-tested\spec\fixtures`.  Not very useful.  This change basically nulls out the relevant history-saving methods when running specs to avoid that.

### Alternate Designs

Change HistoryManager itself to prevent state storage when specs are running.  This seriously impedes the ability to test it, however.

### Why Should This Be In Core?

Changed the core spec helper file.

### Benefits

A more useful history menu for those who run specs frequently.

### Possible Drawbacks

None?

### Applicable Issues

None.",1126,True,en,0
16245,7,4,0,Externals,50Wliu,2018-01-09T23:56:19Z,76,44,5,50,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Very similar in nature to #16229.  The description in that PR essentially applies to this one as well.
![async-save-dialog](https://user-images.githubusercontent.com/2766036/33034922-a8779e24-ce29-11e7-9f71-0fb4a22a7b37.gif)

**Important note**: This PR also removes the undocumented `atom.showSaveDialog` and `atom.showSaveDialogSync` methods.  Due to a lack of free space on my laptop, I am currently unable to search to see how many packages use it.  If someone could help me out with that it would be helpful to know if they should be added back and deprecated or removed outright.

Depends on https://github.com/atom/markdown-preview/pull/521",947,True,en,0
16230,2,4,0,Externals,U8NWXD,2017-11-20T21:48:27Z,92,92,1,2,"### Description of the Change

Update links in CONTRIBUTING.md to issue searches which work when not logged in to GitHub.

### Alternate Designs

The alternative would be to leave the links as they are, which could hinder user interaction.

### Why Should This Be In Core?

The affected documentation is in Core.

### Benefits

The links will now work for users who are not logged in to GitHub.

### Possible Drawbacks

None.

### Applicable Issues

None.",477,True,en,0
16229,22,2,3,Externals,50Wliu,2018-01-09T22:19:52Z,260,198,11,52,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

This change is a bit more involved than making ContextMenu async.  `dialog.showMessageBox` accepts an optional callback as a third argument that, when supplied, makes the resulting message box non-blocking.  Instead of giving the result as a return value, the response is passed to the callback.  As such, always passing the callback (even when it didn't exist) would have been a backwards-compatible change.  To make Atom support both sync and async versions, I have updated `atom.confirm` to also accept an optional callback that determines whether or not to use the async version.  I also noticed while doing this that Atom's implementation was not fully in line with Electron's implementation and was limited in its functionality, and so the async version corrects this by passing all options directly to Electron.  Hopefully in Atom 2.0 we can make async the only supported version.  In the meantime, I've updated all of atom/atom's uses of `atom.confirm` to use the async API and updated the documentation to prefer the async version.

### Alternate Designs

The callbackiness is quite messy, especially when we used to return something based on the response value.  Anywhere where that occurred I had to pseudo-promisify the dialog and then await the resulting promise.  Would it therefore make more sense to directly promisify the async version of `dialog.showMessageBox`?

### Why Should This Be In Core?

`atom.applicationDelegate.confirm` is implemented in core.

### Benefits

Improved UX when a message box appears.  See, for example, snow continuing to fall even when a message box appears:
![async-message-box](https://user-images.githubusercontent.com/2766036/32996023-80f9cd06-cd7d-11e7-9eae-9035e80a8ad6.gif)

### Possible Drawbacks

Unlike making the context menu async, this is an opt-in change.  Package authors will have to update their code to support the async message dialog.  As such, there is a possibility that people will create issues on atom/atom asking why certain message boxes are async while others aren't.  Furthermore, as discussed above, using the callback is much less clean than simply blocking and waiting for a return value.

### Applicable Issues

None.",2512,True,en,1
16227,1,0,0,Externals,50Wliu,2017-11-17T22:11:08Z,2,3,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Uses the native `Array.isArray` function in application-delegate, because that's what underscore-plus does anyway.

### Alternate Designs

None.

### Why Should This Be In Core?

Code cleanup.

### Benefits

:art:

### Possible Drawbacks

None.

### Applicable Issues

None.",589,True,en,0
16223,1,0,0,Externals,U8NWXD,2017-11-17T09:28:29Z,1,1,1,0,"### Description of the Change

Fix link in `YAML` to correctly point to https://github.com/atom/language-yaml instead of https://github/atom/language-yaml.

### Alternate Designs

The alternative would be to leave the link broken, which would hinder user interaction.

### Why Should This Be In Core?

The affected documentation is in Core.

### Benefits

Improved user interaction with working links.

### Possible Drawbacks

None.

### Applicable Issues

None.
",486,True,en,0
16221,1,0,0,Externals,U8NWXD,2017-11-17T09:28:03Z,1,1,1,0,"### Description of the Change
Change HTTP link to HTTPS in docs/contributing-to-packages.md since the linked-to site supports SSL/TLS
### Alternate Designs
The alternative would be leaving the link as HTTP. This leaves users less secure while having only marginal user experience benefits.
### Why Should This Be In Core?
The documentation changed is in Core.
### Benefits
Makes user interaction more secure by default.
### Possible Drawbacks
Marginal potential for devices not supporting SSL/TLS and marginal performance hits when accessing the link.
### Applicable Issues
Similar to issue #16167 and PR #16173",622,False,en,0
16215,2,0,0,Internals,BinaryMuse,2017-11-17T17:46:15Z,9,2,1,0,"The URI query string should specify line and column numbers as a user would, starting at 1, while the Atom API starts at 0.

/cc @RobinDaugherty

Resolves https://github.com/charliesome/better_errors/pull/356#issuecomment-345074604",235,True,en,0
16199,2,2,7,Internals,maxbrunsfeld,2017-11-29T19:45:39Z,1107,848,2,13,,0,False,en,0
16197,3,1,0,Externals,U8NWXD,2017-11-15T20:43:27Z,3,3,3,0,"### Description of the Change
Change HTTP links to HTTPS in /docs/build-instructions/ since the linked-to sites support SSL/TLS
### Alternate Designs
The alternative would be leaving the links as HTTP ones. This leaves users less secure while having only marginal userexperience benefits.
### Why Should This Be In Core?
The documentation changed is in Core.
### Benefits
Makes user interaction more secure by default.
### Possible Drawbacks
Marginal potential for devices not supporting SSL/TLS and marginal performance hits when accessing the links.
### Applicable Issues
Similar to issue #16167 and PR #16173",622,False,en,0
16192,4,3,0,Externals,50Wliu,2017-11-17T19:19:50Z,389,390,3,2,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Makes the context menu async, which is important for perceived performance and UX.  No longer will _everything_ freeze when opening a context menu.  Here's a gif of snowfall!
![async-context-menu](https://user-images.githubusercontent.com/2766036/32832505-ff273e8c-c9fb-11e7-97e6-e32df786f998.gif)

### Alternate Designs

None.

### Why Should This Be In Core?

Context menu handling occurs in the main process.

### Benefits

Context menus no longer block the renderer process until they are closed.

### Possible Drawbacks

Per https://github.com/electron/electron/issues/9441 it is not possible to detect when the context menu is closed.  Atom currently does not track context menu state so I think this compromise is fine.

### Applicable Issues

Supersedes and closes #13398
Fixes #2991
Refs #13617, though it looks like right-click isn't properly focusing the tab so more investigation will be needed.",1225,True,en,0
16191,6,0,0,Internals,BinaryMuse,2017-11-15T17:42:16Z,22,4,2,0,Fixing up merge conflict in https://github.com/atom/atom/pull/15415,67,False,en,0
16190,1,1,0,Externals,U8NWXD,2017-11-15T09:49:49Z,19,19,1,0,"### Description of the Change

Change HTTP links to HTTPS in CONTRIBUTING.md since the linked-to sites support SSL/TLS

### Alternate Designs

The alternative would be leaving the links as HTTP ones. This leaves users less secure while having only marginal user experience benefits.

### Why Should This Be In Core?

The documentation changed is in Core.

### Benefits

Makes user interaction more secure by default.

### Possible Drawbacks

Marginal potential for devices not supporting SSL/TLS and marginal performance hits when accessing the links.

### Applicable Issues

Similar to issue #16167 and PR #16173
",637,True,en,0
16186,2,0,0,Internals,nathansobo,2017-11-15T15:19:15Z,42,56,3,0,"This PR reverts a previous attempt in #16092 which was a bit too aggressive. It auto-scrolled at the model level after various folds. This PR tries a more conservative approach that simply auto-scrolls after fold *commands*. Auto-scrolling seems most intuitive when executed from the keyboard via a command.

Thanks @maxbrunsfeld for the early feedback. üíØ ",361,True,en,0
16180,1,0,0,Externals,U8NWXD,2017-11-13T23:49:32Z,2,2,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Change HTTP links to HTTPS in SUPPORT.md since the linked-to sites support SSL/TLS

### Alternate Designs

The alternative would be leaving the links as HTTP ones. This leaves users less secure while having only marginal user experience benefits.

### Why Should This Be In Core?

The documentation changed is in Core.

### Benefits

Makes user interaction more secure by default.

### Possible Drawbacks

Marginal potential for devices not supporting SSL/TLS and marginal performance hits when accessing the links.

### Applicable Issues

<!-- Enter any applicable Issues here -->
Similar to issue #16167 and PR #16173",935,True,en,0
16174,1,0,0,Internals,smashwilson,2017-11-13T15:47:58Z,2,4,1,0,"If `app1Window2` finishes loading before `app1Window1`, the temporary directories will be serialized in the opposite order than the test is asserting. Await them one at a time, instead, to ensure that they launch in the correct order.

Fixes #16118.",251,True,en,1
16173,1,0,0,Externals,dungeonmaster18,2017-11-13T13:58:39Z,3,3,1,0,fixed issue #16167 ,19,False,en,0
16150,2,0,0,Internals,lee-dohm,2017-11-09T19:35:23Z,11,253,5,0,"### Description of the Change

Part of the effort to consolidate all documentation in the [Atom Flight Manual](http://flight-manual.atom.io). This relocates relevant documentation into the new [Hacking on Atom Core](http://flight-manual.atom.io/hacking-atom/sections/hacking-on-atom-core/) Flight Manual section.

### Alternate Designs

None considered.

### Why Should This Be In Core?

This is actually removing something from atom/atom.

### Benefits

Helps to consolidate documentation into one location.

### Possible Drawbacks

People who have existing links will need to click one more link to go to the new location.

### Applicable Issues

Applies to https://github.com/atom/flight-manual.atom.io/issues/382",738,True,en,0
16144,2,5,0,Internals,jasonrudolph,2017-11-09T16:05:48Z,9,3,2,0,"### Background

In #15972, I converted the `TooltipManager` class from CoffeeScript to JavaScript using [`decaffeinate`](https://github.com/decaffeinate/decaffeinate):

As part of that conversion (7b76ee3f2593e48ab86fca7e1c602332b4bc8cf7), this line of CoffeeScript:

https://github.com/atom/atom/blob/db960763cfceaaac6a17aaa100a7ea849faabeb6/src/tooltip-manager.coffee#L111

Became this line of JavaScript:

https://github.com/atom/atom/blob/7b76ee3f2593e48ab86fca7e1c602332b4bc8cf7/src/tooltip-manager.js#L127

That change led to the regression described in https://github.com/atom/atom/issues/16135.

A [`for...of` loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) requires that the given object implement the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol). As @UziTech points out in https://github.com/atom/atom/issues/16135#issuecomment-342928215, jQuery objects gained support for the iterable protocol in jQuery 2.2.0, but earlier versions didn't support it. Since many Atom packages use space-pen for their views, and since [space-pen uses jQuery 2.1.4](https://github.com/atom/atom/issues/16135#issuecomment-342928215), the change in #15972 introduced a regression impacting those packages.

### Proposed solution

To address the regression, this PR does two things:

1. fb74992454f9cfa1027523a3448036e07fc67f20 enhances the existing test that exercises the handling of jQuery objects in `TooltipManager.add`. By using a fake jQuery object that [more closely matches a real jQuery object](https://github.com/atom/atom/issues/16135#issuecomment-342923149), the test fails with the same error seen in #16135: https://circleci.com/gh/atom/atom/6007
2. 0e82b8bb42ed9ca4a6a12497ffd0622fff0d45e8 replaces the `for...of` loop with a traditional `for` loop, and that fixes the test failure and resolves the bug.

### Proposed test plan

In addition to ensuring that the test suite is passing, I used the following steps to manually verify that this change fixes the bug:

- [x] Install the platform-ide-terminal package and verify that I can reproduce the bug in Atom beta 1.23 (https://github.com/platformio/platformio-atom-ide-terminal/issues/403)
- [x] With this branch checked out locally, open Atom in dev mode and verify that:
    - [x] I don't get the error seen in https://github.com/platformio/platformio-atom-ide-terminal/issues/403
    - [x] I can see the tooltips for the icons that platform-ide-terminal adds to the status bar

If there's any additional verification that would be helpful here, please let me know.

",2689,True,en,0
16141,3,0,0,Internals,maxbrunsfeld,2017-11-09T06:33:01Z,1341,1189,3,0,,0,False,en,0
16140,2,0,0,Internals,maxbrunsfeld,2017-11-08T22:40:32Z,113,84,3,0,"Refs https://github.com/atom/atom/issues/16126
Depends on https://github.com/atom/superstring/pull/43

I have also updated some subword movement methods on `TextEditor` to use `TextBuffer.findAllInRangeSync` instead of `scanInRange`, for consistency and so that the existing tests will now catch the errors you were seeing @t9md.",332,False,en,0
16119,2,0,0,Internals,maxbrunsfeld,2017-11-07T02:47:19Z,789,711,2,0,"Also, use `async` and `await` instead of `waitsForPromise` and `runs`.",70,False,en,0
16114,3,22,0,Externals,Ben3eeE,2017-11-14T13:45:49Z,32,32,2,7,"In Atom 1.19 we changed the scroll handler to use deltaX and deltaY instead of wheelDeltaX/wheelDeltaY. wheelDelta is larger so this caused the scrolling speed to slow down. This change in speed was especially noticeable on Linux.

Fixes https://github.com/atom/atom/issues/15567

# Test plan

* Scrolling on macOS with a mouse
  * [x]  Scroll in every direction
  * [x]  Scroll in every direction while holding shift
* Scrolling on macOS with a touchpad
  * [x]  Scroll in every direction
  * [x]  Scroll in every direction while holding shift
  * [x]  Slightly scroll down/up, ensuring that for small values of `wheelDeltaY * scrollSensitivity` we still honor the scrolling.
  * [x]  Slightly scroll left/right, ensuring that for small values of `wheelDeltaX * scrollSensitivity` we still honor the scrolling.
* Scrolling on Windows with a mouse
  * [x]  Scroll in every direction
  * [x]  Scroll in every direction while holding shift
* Scrolling on Windows with a touchpad
  * [ ]  Scroll in every direction
  * [ ]  Scroll in every direction while holding shift
  * [ ]  Slightly scroll down/up, ensuring that for small values of `wheelDeltaY * scrollSensitivity` we still honor the scrolling.
  * [ ]  Slightly scroll left/right, ensuring that for small values of `wheelDeltaX * scrollSensitivity` we still honor the scrolling.
* Scrolling on Linux with a mouse
  * [X] Scroll in every direction
  * [X]  Scroll in every direction while holding shift
* Scrolling on Linux with a touchpad
  * [x] Scroll in every direction
  * [x]  Scroll in every direction while holding shift
  * [x]  Slightly scroll down/up, ensuring that for small values of `wheelDeltaY * scrollSensitivity` we still honor the scrolling.
  * [x]  Slightly scroll left/right, ensuring that for small values of `wheelDeltaX * scrollSensitivity` we still honor the scrolling.


/cc: @nathansobo @as-cii ",1909,True,en,0
16111,2,0,0,Internals,maxbrunsfeld,2017-11-06T19:18:53Z,393,371,2,0,Fixes flaky tests e.g. https://circleci.com/gh/atom/atom/5974,61,False,en,0
16092,1,1,0,Internals,nathansobo,2017-11-07T18:33:23Z,45,9,2,4,"When folding or unfolding large blocks, it is possible to move the cursor off screen. Whenever this happens it is annoying and confusing, so this PR changes all code paths that create or destroy folds to autoscroll to the cursor position afterwards.

There were several different fold/unfold code paths, so I decided to weave simple autoscroll assertions into the existing tests.",381,True,en,0
16091,2,0,0,Internals,jasonrudolph,2017-11-07T13:13:00Z,240,218,4,3,"This change converts text-utils to JavaScript with [standard style](https://standardjs.com).

### TODO

- [x] Decaffeinate `src/text-utils.coffee` and ensure that all tests still pass (208e3293f3c2456f9e43a219cf719e59d675c8ca)
- [x] Decaffeinate `spec/text-utils-spec.coffee` and ensure that the tests still pass (3a42785678621eedb45870c5f6b24d30ffd1cf10)",360,True,en,0
16090,2,0,0,Internals,jasonrudolph,2017-11-06T14:25:10Z,122,93,4,3,"This change converts `TokenIterator` to JavaScript with [standard style](https://standardjs.com).

### TODO

- [x] Decaffeinate `src/token-iterator.coffee` and ensure that all tests still pass (1ee1c6c30e60428a2727ecdd9679b48ccc7ab247)
- [x] Decaffeinate `spec/token-iterator-spec.coffee` and ensure that the tests still pass (7b5837afb896294ce4600a06a4ac212e1c8613f2)
",375,True,en,0
16087,53,18,0,Internals,maxbrunsfeld,2017-11-28T21:49:01Z,1134,1095,28,25,"Depends on https://github.com/atom/text-buffer/pull/260

This is a continuation of work started in https://github.com/atom/atom/pull/15713, with the overall goal of allowing Atom to use parsing systems other than TextMate grammars.

### One Language Per Buffer

The main user-facing change introduced in this PR is that language modes (previously called `TokenizedBuffers`) now belong to a `TextBuffer`, not an individual `TextEditor`. This means that if have you have a file open in 3 different tabs, the file will only be parsed once instead of 3 times for the purpose of syntax highlighting. It also means that when you select a language for the file using the [grammar selector](https://github.com/atom/grammar-selector), your choice will apply in *all* 3 places.

### TextEditor API Changes

Previously, the way to configure an editor's language was to assign to the editor a TextMate `Grammar`, and the editor would internally construct a `TokenizedBuffer` which would use the `first-mate` APIs to parse the buffer.

Now, the `TextEditor` class is no longer responsible for constructing its parser directly; it relies on the buffer having a *language mode* which provides information about syntax highlighting, folding, commenting, and suggested indentation.

This means that the `.getGrammar` and `.setGrammar` methods don't really make sense any more, and neither does the `grammar` parameter to the `TextEditor` constructor. These APIs will continue to work for backwards-compatibility, but will be deprecated at some point.

### Other API Changes

Other language-related APIs like `TextEditorRegistry.setGrammarOverride` were designed around the TextMate concept of *scope names* - strings like `source.js` that are intended to fit into TextMate's scope selector system. Though scope selectors will continue to be a concept in Atom, we will no longer assume that these selectors use the TextMate-style naming conventions. Where possible, I'd like to start referring to these strings as *language ids*, not scope names.

Since TextEditors no longer construct their own language modes, I've moved this functionality into the existing `GrammarRegistry` object exposed as `atom.grammars`. It is implemented in the following methods:

* `atom.grammars.assignLanguageMode(buffer, languageId)` - Assign the buffer a language mode that uses the language with the given id. For textmate grammars, we use the `scopeName` (e.g. `source.js`) as an ID. Tree-sitter grammars will have different looking ids (probably just `javascript`, `go`, etc).

* `atom.grammars.autoAssignLanguageMode(buffer)` - Assign the buffer a language mode that uses the most appropriate language, based on the buffer's file extension and content.

* `atom.grammars.maintainLanguageMode(buffer)` - Assign the buffer a language mode and continue to *update* the language mode as additional language packages are loaded, or the buffer's file path changes.

The `TextEditorRegistry` is no longer responsible for anything to do with grammars. The grammar-related methods will continue to work but they will be deprecated sometime soon.

### Remaining Tasks

* [x] Rename `TokenizedBuffer` to `TextMateLanguageMode` (I'm going to do this in a separate PR to keep this PR's diff more readable).
* [x] Track visibility correctly when a language mode is used by multiple editors

### Next Steps

It should now be possible to integrate [Tree-sitter](https://github.com/tree-sitter/tree-sitter) parsers into Atom just by changing the `GrammarRegistry` and the `PackageManager`. The core editor no longer assumes anything about how its parser works. Once this is merged, I will begin doing this.",3694,True,en,1
16086,1,0,0,Externals,leroix,2017-11-03T12:21:23Z,8,4,1,0,fix https://github.com/atom/atom/issues/16077 for 1.22,54,False,en,0
16085,1,0,0,Externals,leroix,2017-11-03T12:21:16Z,8,4,1,0,fix https://github.com/atom/atom/issues/16077 for 1.21,54,False,en,0
16083,1,8,0,Externals,leroix,2017-11-02T22:33:10Z,11,10,1,0,"fix https://github.com/atom/atom/issues/16077

In the `OverlayComponent` resize observer, we're judging whether the element resized by comparing the `contentRect` with the result of a call to `getBoundingClientRect()` [here](https://github.com/atom/atom/blob/master/src/text-editor-component.js#L4235). The dimensions reported by these two methods aren't always the same[[1]](https://wicg.github.io/ResizeObserver/)[[2]](https://medium.com/dev-channel/after-mutationobserver-performanceobserver-and-intersectionobserver-we-have-another-observer-for-2c541bcb531b). This results in a resize observer loop while the overlay decorations are present:

![screen shot 2017-11-02 at 3 17 47 pm](https://user-images.githubusercontent.com/520209/32351127-01271cbc-bfe2-11e7-82cc-42c156472289.png)

![screen shot 2017-11-02 at 3 18 18 pm](https://user-images.githubusercontent.com/520209/32351132-05bc3e06-bfe2-11e7-9807-e34039059c13.png)

In this fix, we store the previous `contentRect` as reported in the `ResizeObserver` callback as state on the `OverlayComponent`. That way in subsequent calls of the `ResizeObserver` callback, we're comparing `contentRect`'s to `contentRect`'s.

@DavidLGoldberg thanks for reporting this bug and the work to help reproduce it on various builds!

/cc @nathansobo ",1303,True,en,0
16080,1,0,0,Externals,hansonw,2017-11-03T01:31:00Z,38,2,2,0,"### Description of the Change

Atom has supported custom directory providers for quite a long time - the main use case being remote directories, e.g. in Nuclide (https://github.com/facebook/nuclide). The recent addition of file watchers causes several uncaught rejections when a remote directory is added, as it attempts to resolve remote URIs to create a file watcher.

To piggyback on the existing custom directory provider setup, we'll additionally allow custom directories to provide a `onDidChangeFiles` listener (with the same signature as `Project::onDidChangeFiles`) to override the default file watcher.

### Alternate Designs

Another possibility is to suppress file watching for non-local URIs, but this approach allows for greater extensibility as well as real remote file watching if we wanted it. This also opens the interesting option of having the default `Directory` class in `pathwatcher` implement `onDidChangeFiles`, allowing the file watching code to move out of this repo.

### Why Should This Be In Core?

There's no other way for a user-land package to override the file watching APIs.

### Benefits

Improved compatibility with custom directory providers (in particular remote directories).

### Possible Drawbacks

It's unclear how to better document this functionality. It seems that custom directory providers are generally underdocumented though?
",1397,True,en,0
16076,3,0,0,Internals,maxbrunsfeld,2017-11-02T17:40:05Z,1134,968,4,0,,0,False,en,0
16075,1,2,0,Internals,nathansobo,2017-11-02T20:41:40Z,7,3,2,0,"In #15776, we accidentally stopped passing an option to the `Cursor.wordRegExp` method that caused us to prefer word characters when selecting words at a boundary between word and non-word characters.

This is only on master so glad we caught it before the next release.

/cc @maxbrunsfeld 
",296,True,en,0
16074,6,7,2,Externals,UziTech,2017-12-08T22:20:33Z,34,0,2,36,"### Description of the Change

make `atom.notifications.clear()` public and emit a `did-clear-notifications` event

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

NotificationsManager would need to emit the event

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

Could let notifications packages know when to clear the notifications log

<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

none

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

https://github.com/atom/notifications/pull/164#issuecomment-341341995

<!-- Enter any applicable Issues here -->
",1247,True,en,0
16073,1,0,0,Internals,jasonrudolph,2017-11-04T12:29:12Z,503,437,2,1,This change converts `spec/theme-manager-spec.coffee` to JavaScript with [standard style](https://standardjs.com).,114,False,en,0
16067,1,1,0,Externals,royGil,2017-11-01T23:45:06Z,0,1,1,0,"Hey, just noticed that ""Project"" has already been declared on line 36",69,False,en,0
16066,6,0,0,Internals,maxbrunsfeld,2017-11-02T05:25:44Z,11253,9947,7,0,This converts the TextEditor class and its spec from CoffeeScript to JavaScript. The spec now uses `async` and `await` instead of jasmine's `waitsFor` and `runs` functions.,172,False,en,0
16065,1,2,0,Internals,nathansobo,2017-11-01T23:19:04Z,1,1,1,0,"Fixes #15966

In #16017, I upgraded the `nsfw` dependency to `@atom/nsfw` (a temporary fork), but unfortunately I forgot to change the `require` call to `@atom/nsfw` in `path-watcher.js` ü§¶‚Äç‚ôÇÔ∏è . This means the fix didn't actually go out and we must have been requiring some other version of `nsfw` somehow. Not sure which one üò¨ .",342,True,en,0
16064,1,3,0,Internals,nathansobo,2017-11-01T21:43:16Z,6,2,2,0,"Fixes #16063

Follows up on #16060 by including `Shift` in the modifiers that are exempt from terminating a drag operation.

/cc @50Wliu @as-cii ",149,True,en,0
16060,1,0,0,Internals,nathansobo,2017-11-01T16:15:47Z,18,5,2,0,"Fixes #16059

This preserves the ability to add selections via ctrl- or cmd-click.

/cc @as-cii @Ben3eeE",108,True,en,0
16058,2,0,0,Externals,50Wliu,2017-11-01T14:22:27Z,2,4,2,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

* Preserve whitespace in failure messages.  Prevents the following from happening:
![collapsed-whitespace](https://user-images.githubusercontent.com/2766036/32275841-05b651c4-bf0d-11e7-960d-9e7cb8effdbd.png)
* Do not modify menus.  Prevents Atom's menus from changing into just A -> B.

### Alternate Designs

I'm unsure whether to use `pre-wrap` or `pre`.  Since `pre-wrap` appears to be the more conservative option, I'm going to stick with that until there's a spec that is easier to read with `pre`.

### Why Should This Be In Core?

Take a wild guess.

### Benefits

Less frustration when running specs.

### Possible Drawbacks

N/A

### Applicable Issues

N/A",982,True,en,0
16047,1,0,0,Internals,nathansobo,2017-10-31T20:59:41Z,17,5,1,0,"Fixes #16046

When the user is typing in the editor, we prevent the insertion of all characters into the hidden input except spaces. If we prevent the default action of space insertion, then the spacebar is interpreted by the browser as a request by the user to page down, so we have to insert it. Unfortunately, if the input is off screen, inserting a space causes the browser to attempt to scroll it into view. Since we implement our own scrolling, this causes content to become hidden.

This PR forces the scrollTop and scrollLeft of the scroll container back to 0 after typing a space in the editor. Often this will do nothing, but sometimes it will correct for the browser's auto-scroll behavior which we didn't want in the first place.",745,True,en,0
16031,3,0,0,Internals,maxbrunsfeld,2017-10-31T17:09:39Z,25,6,3,0,Depends on https://github.com/atom/text-buffer/pull/274,55,False,en,0
16025,2,0,3,Internals,jasonrudolph,2017-11-01T12:50:52Z,401,322,2,1,This change converts `src/theme-manager.coffee` to JavaScript with [standard style](https://standardjs.com).,108,False,en,0
16022,1,0,0,Externals,50Wliu,2017-10-29T21:46:46Z,1,1,1,0,"First time updating an npm package.  Hopefully this works! ü§û

* Add `onDidRemoveGrammar` callback",102,True,en,0
16018,1,0,0,Internals,jasonrudolph,2017-10-31T11:40:52Z,55,37,2,2,"This change converts `src/theme-package.coffee` to JavaScript with [standard style](https://standardjs.com).
",110,True,en,0
16017,2,0,0,Internals,nathansobo,2017-10-28T20:52:57Z,1,1,1,0,"Fixes https://github.com/atom/atom/issues/15966

This PR switches to a new fork of `nsfw` that incorporates the changes made in https://github.com/Axosoft/nsfw/pull/41 to avoid endless loops when constructing watch trees for directories containing recursive symbolic links on Linux. We can switch back to the main `nsfw` if that PR gets merged.

/cc @ungb @Ben3eeE in case you want to test this out on projects recursive symbolic links in Linux. A good way to test would be to just add a recursive link inside the `atom/atom` repo.",535,True,en,0
16008,1,0,0,Externals,leroix,2017-10-26T22:23:05Z,15,5,1,0,"I've been noticing these warnings:
![screen shot 2017-10-26 at 3 25 53 pm](https://user-images.githubusercontent.com/520209/32078083-de98e812-ba62-11e7-9077-ebf7bb0510dd.png)

This function gets called a whole heck of a lot, so I'm worried about the optimizer bailing here. ",277,False,en,0
16006,3,0,0,Internals,maxbrunsfeld,2017-10-26T21:57:37Z,2,2,1,0,See https://github.com/atom/text-buffer/pull/273,48,False,en,0
15999,3,0,0,Externals,50Wliu,2017-10-26T14:05:24Z,3,3,1,0,,0,False,en,0
15994,3,0,0,Internals,maxbrunsfeld,2017-10-25T22:55:02Z,1,1,1,0,See https://github.com/atom/text-buffer/pull/270,48,False,en,0
15993,3,3,0,Internals,nathansobo,2017-10-25T22:36:37Z,15,8,5,0,"Fixes https://github.com/atom/atom/issues/15565
Depends on https://github.com/atom/text-buffer/pull/272

Previously, whenever we changed the range of a selection, we destroyed all *intersecting* folds. This caused us to destroy even folds that the selection completely contained, which was a counter-intuitive behavior.

This PR upgrades to a new version of `text-buffer` containing a new `destroyFoldsContainingBufferPositions` method that takes an array of positions and destroys any folds containing one of these positions (exclusive of its endpoints). I also use the new method on some other code paths that only need to destroy folds intersecting individual points rather than ranges.",694,False,en,0
15990,1,0,0,Internals,nathansobo,2017-10-25T18:57:17Z,1,1,1,0,"References https://github.com/atom/spell-check/issues/223, but it won't fix it until this PR is hotfixed to stable.

This prevents package specs that don't have a fixtures directory from attempting to read files out of a non-existent directory inside the ASAR bundle, which causes ENOTDIR errors in superstring.

If the spec does not have a parent folder containing a fixtures directory, we now set the default project path to `os.tmpdir()`.",445,True,en,0
15989,18,0,0,Externals,50Wliu,2017-10-25T17:32:53Z,26,26,2,0,"Quite a lot of minor changes this time around.

* **Fix Coffeescript methods wrapped in parentheses**
* Add CSS font-display property
* Support deeply nested Go accessors and channels in variable declarations
* **Fix HTML snippets and XML tag**
* Remove Hyperlink as a selectable grammar
* Add punctuation tokens for `@` in decorations and fix generic Java arrays
* Make internal JS grammars unselectable, allow spreads to precede await, and allow `package` as a method name
* **Better Less mixin support**
* Add support for Handlebars multiline comments
* Add `.theme` as a PHP filetype, **tokenize namespaces preceding scope resolution operators, fix infinite injection loop, and add support for ternaries**
* **Revert Python indentation updates**, update snippets, add indentation patterns for async definitions, and support lowercase hex characters
* Fix Ruby variables ending in `do` and recognize multiline regexes
* **Fix SCSS tag names and property names getting mixed up** and fix Sass snippets
* Support unquoted Shell herestrings and Greek prompt symbols
* Remove TODO as a selectable grammar
* Add `.ksy` as a YAML filetype",1152,True,en,0
15981,8,0,0,Internals,jasonrudolph,2017-10-26T12:48:56Z,253,213,2,1,"This change converts `spec/tooltip-manager-spec.coffee` to JavaScript with [standard style](https://standardjs.com).

---

/xref https://github.com/atom/atom/pull/15972, which converts `src/tooltip-manager.coffee` to JavaScript",231,True,en,0
15977,3,0,0,Internals,maxbrunsfeld,2017-10-24T23:03:22Z,420,403,6,0,"Depends on https://github.com/atom/text-buffer/pull/260
Continues work started in https://github.com/atom/atom/pull/15713

As part of this, I have changed `toggleLineCommentsForBufferRows` to *not* require `oniguruma`. Going forward `TokenizedBuffer` (which will later be renamed to `TextMateLanguageMode` or something) will be the only component of Atom that relies on `oniguruma`.",385,False,en,0
15976,3,1,0,Internals,nathansobo,2017-10-24T02:21:38Z,44,8,11,0,"This PR adds a command to paste without performing any reformatting, regardless of the source of the copied text or the settings for the current file. The following transformations are suppressed:

* **Line ending normalization**. All instances of `\r\n` and `\n` in the pasted text will be preserved regardless of the line endings in the file.
* **Auto-indent** There is a global ""auto-indent on paste"" setting that can also be assigned per-language, but this command is a way to momentarily bypass that setting.
* **Relative indent level adjustment** By default, we attempt to keep the relative indent level of all lines consistent with the copied text. Sometimes people don't want that.

![screen shot 2017-10-23 at 5 16 51 pm](https://user-images.githubusercontent.com/1789/31917683-03a691e4-b816-11e7-9ace-05e477e86f21.png)

Relevant to recent discussion in #1407",876,True,en,0
15974,1,0,0,Internals,maxbrunsfeld,2017-10-23T18:12:52Z,22,2,2,0,Fixes https://github.com/atom/atom/issues/15923,47,False,en,0
15972,7,0,0,Internals,jasonrudolph,2017-10-25T14:09:42Z,199,176,2,1,"This change converts `TooltipManager` to JavaScript with [standard style](https://standardjs.com).
",100,True,en,0
15968,1,0,0,Externals,Ingramz,2017-10-23T07:54:09Z,1,1,1,0,"Possibly a copying mistake.

https://github.com/atom/atom/blob/43ec5193ffaffbee84ead4917fa678b9f823e76f/src/text-editor.coffee#L3136-L3143",140,True,en,0
15958,7,0,0,Internals,jasonrudolph,2017-10-24T12:41:33Z,465,364,4,2,"This change converts `ViewRegistry` to JavaScript with [standard style](https://standardjs.com).

### TODO

- [x] Decaffeinate `src/view-registry.coffee` and ensure that all tests still pass (https://github.com/atom/atom/compare/1975e37e317d2502f9b53f37e1869578f878b4aa...dfd1332a016a8af542d2a4f75a14f40341e533db)
- [x] Decaffeinate `spec/view-registry-spec.coffee` and ensure that the tests still pass (https://github.com/atom/atom/compare/dfd1332a016a8af542d2a4f75a14f40341e533db...01e7faa988761581392f134ebc64d9c1793b321c)
",532,True,en,0
15954,3,1,7,Externals,leroix,2017-10-23T23:05:57Z,65,35,2,3,"We took care of an unnecessary loop that was occurring when an overlay was present in https://github.com/atom/atom/pull/15894. However, resizes of the overlay were still taking longer than needed because they were invoking `.updateSync` on the text editor component. In this PR, we take the approach of only updating the dimensions of the overlay element and invoking a render on just the overlay component when a resize occurs. The amount of time spent in the overlay observer callback is greatly reduced which means less time spent scripting on keystrokes. This is important because any scripting that occurs as a result of a new keystroke needs to finish well ahead of the next keystroke to avoid holding up its handling.

![overlay_resizing](https://user-images.githubusercontent.com/520209/31834546-898bdc0c-b58b-11e7-959a-5ba0ef22b33a.png)

In the above image, the time spent in the resize observer callback is reduced from 2.36ms to 0.32ms, and the time to handle this frame goes from 11.75ms down to 9.10ms.

/cc @nathansobo ",1039,True,en,0
15948,3,2,0,Externals,Fank,2017-10-31T08:29:09Z,1,1,1,10,"related to #15939 

@50Wliu Next try, because teste are green in https://github.com/atom/language-perl/commits/master",119,True,en,0
15947,1,0,0,Internals,jasonrudolph,2017-10-23T12:39:32Z,228,209,2,2,This pull request converts `spec/window-event-handler-spec.coffee` to JavaScript with [standard style](https://standardjs.com).,127,False,en,0
15945,1,1,0,Externals,50Wliu,2017-10-22T10:04:28Z,6,16,1,2,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

There's a couple of common packages that need to be excluded from the snapshot.  Rather than listing each instance (since they may or may not be deduped), match using `endsWith`.

### Alternate Designs

None.

### Why Should This Be In Core?

Already is.

### Benefits

Less code maintenance if a package is un-deduped or a new dependency of that package is added in a different module.  Also fixes an intermittent build issue for me where an additional fs-extra shows up in github/node_modules/nsfw/node_modules/fs-extra.

### Possible Drawbacks

None.

### Applicable Issues

None.

/cc @as-cii just wanted to make sure this is safe to do.",958,True,en,0
15939,1,5,0,Externals,Fank,2017-10-19T15:13:15Z,1,1,1,0,"This change include 2 large PRs which will improve perl language a lot.
- https://github.com/atom/language-perl/pull/89
- https://github.com/atom/language-perl/pull/90",169,False,en,0
15938,1,0,0,Internals,jasonrudolph,2017-10-23T12:38:52Z,253,189,2,3,This pull request converts `src/window-event-handler.coffee` to JavaScript with [standard style](https://standardjs.com).,121,False,en,0
15936,7,0,0,Internals,jasonrudolph,2017-10-20T12:18:00Z,927,802,2,1,This pull request converts the `spec/project-spec.coffee` to JavaScript with [standard style](https://standardjs.com).,118,False,en,0
15935,17,7,2,Internals,BinaryMuse,2017-11-03T01:40:00Z,146,43,7,15,"Atom core should include URI handlers for extremely common tasks, like opening files. This PR implements any such handlers. üí≠ s for other useful handlers are welcome.

- [x] Open file (with optional line and column numbers) ‚Äî¬†`atom://core/open/file?filename=urlEncodedFileName&line=n&column=n`

Todo

- [x] Address https://github.com/charliesome/better_errors/pull/356

Closes #2037 ",397,True,en,1
15918,1,1,0,Externals,FalkF,2017-10-17T18:32:05Z,1,1,1,0,"### Description of the Change

Just a text change, VCS (VersionControlSystem) already includes ""system"" :)
""Files and directories ignored by the current project's VCS system will be ignored by some packages, ...""
",217,True,en,0
15916,1,8,0,Internals,as-cii,2017-10-18T09:38:53Z,15,8,2,0,"Refs: https://github.com/atom/atom/pull/15407

Previously, we prevented users from dragging the selection further when the buffer was about to change. This was problematic because any change in the buffer, even one that was performed ""automatically"" by a package, would cancel the dragging action and result in a confusing experience for the user. On the other hand, we want to prevent users from accidentally selecting text when they perform an edit (see #15217, #15405).

This pull-request addresses both concerns by canceling the dragging as soon as the user interacts with the keyboard, instead of canceling the dragging when the buffer is about to change. One downside of this approach is that it changes the behavior of pressing a key that does not result in a buffer change, e.g. <kbd>Shift</kbd>, <kbd>Right-Arrow</kbd>, etc. In fact, pressing one of those keys will now prevent users from dragging the selection further. This seems like an acceptable tradeoff, but we are open to revisiting it in case it introduces pain in some other area of the system.

üçê'd with @jasonrudolph 

/cc: @nathansobo @Ben3eeE @ungb ",1133,True,en,0
15906,1,1,0,Externals,Ben3eeE,2017-10-16T19:15:16Z,1,53,1,0,"### Description of the Change

The documentation in the flight-manual is the same as this and the flight-manual is the preferred place to have documentation in. This changes the documentation to just be a link to the flight-manual.

/cc: @laurmurclar This answers your question about preferred location for documentation üôÇ 

### Benefits

Not duplicating documentation but leave the old document in place in case there are links or bookmarks to it.",459,True,en,0
15904,1,2,1,Externals,laurmurclar,2017-10-16T19:03:17Z,3,11,1,0,"### Description of the Change

The Flight Manual contains more accurate instructions for local development on official Atom packages. This change links to these instructions rather than duplicating them in the repo.

### Benefits

We won't have to try keep both versions of the instructions in sync. I was caught out by this (as you can see in https://github.com/atom/bracket-matcher/issues/306) so I'm changing it for future contributors üòä
",451,True,en,0
15898,14,1,5,Internals,jasonrudolph,2017-10-17T01:23:15Z,705,565,2,1,This change converts the `Project` class to JavaScript with [standard style](https://standardjs.com).,101,False,en,0
15894,1,6,0,Externals,leroix,2017-10-16T19:31:52Z,2,2,1,1,"When an overlay is present, we are comparing the dimensions of the overlay's child with the dimensions of `atom-overlay`. If they are different, we disconnect the resize observer, call the `.didResize` callback, and observe `atom-overlay` once more on the next tick. In autocomplete-plus (possibly others), the child of the overlay never matches the dimensions of the overlay, and the resize observer callback gets triggered on every tick as long as the suggestion list is present.

This bug is particularly noticeable when a large file like text-editor-component.js is opened and completely folded. Here are timelines before and after this fix when a suggestion list for the same prefix at the same editor position is opened:

before
![screen shot 2017-10-14 at 6 59 32 pm](https://user-images.githubusercontent.com/520209/31580701-edaf6df0-b114-11e7-8156-820a18593186.png)

after
![screen shot 2017-10-14 at 6 55 19 pm](https://user-images.githubusercontent.com/520209/31580706-10b0b80e-b115-11e7-9393-1a8b43f23796.png)

Here's a zoomed in shot of the timeline before the fix:
![screen shot 2017-10-14 at 7 00 09 pm](https://user-images.githubusercontent.com/520209/31580702-f153f426-b114-11e7-95a6-662aba98515e.png)


",1235,True,en,0
15882,2,0,0,Externals,leroix,2017-10-13T15:37:54Z,205,178,2,0,‚òïÔ∏è ,7,False,zh,0
15865,1,0,0,Internals,as-cii,2017-10-11T14:16:21Z,19,0,2,0,"Fixes https://github.com/atom/atom/issues/15756

Previously, when markers were destroyed inside of a `marker.onDidChange` handler that was registered *before* decorating the marker, we would attempt to remove block decorations from the `LineTopIndex` twice: once when destroying the marker, and once when receiving the marker change event.

This was a little counterintuitive at first, because we were already disposing the change event handler associated with the marker upon its destruction. However, we would still receive a marker change event because the marker was getting destroyed *while* notifying its change event subscribers.

With this pull-request we will gracefully handle that situation by remembering that the marker became invalid during its destruction, so that when the change event is finally triggered, it will simply be ignored because the marker validity will not change.

/cc: @nathansobo @Ben3eeE ",930,True,en,0
15840,1,0,0,Internals,lee-dohm,2017-10-07T20:05:17Z,8,8,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Stale bot was posting comments that looked wonky:

<img width=""886"" alt=""screen shot 2017-10-07 at 1 01 15 pm"" src=""https://user-images.githubusercontent.com/1038121/31311356-af7f1c34-ab5f-11e7-9087-9e988741e602.png"">

This should fix it so that they look the way they were intended to look.

### Alternate Designs

Another possibility is to use the literal scalar syntax `|` in the place of `>`:

```
markComment: |
  Thanks for your contribution!
   
  This issue has been automatically marked as stale because it has not had recent activity. Because the Atom team treats their issues [as their backlog](https://en.wikipedia.org/wiki/Scrum_(software_development)#Product_backlog), stale issues are closed. 

  If you would like this issue to remain open:
   
  1. Verify that you can still reproduce the issue in the latest version of Atom
  1. Comment that the issue is still reproducible and include:
      * What version of Atom you reproduced the issue on
      * What OS and version you reproduced the issue on
      * What steps you followed to reproduce the issue
   
  Issues that are labeled as triaged will not be automatically marked as stale.
```

but that means the second paragraph would have to be one long line and that makes the file less readable, I think.

### Why Should This Be In Core?

It already is.

### Benefits

No more wonky looking Stale bot comments.

### Possible Drawbacks

None that I can think of.

### Applicable Issues

N/A
",1801,True,en,0
15838,1,0,0,Internals,jasonrudolph,2017-10-10T11:14:04Z,171,130,2,2,"This change converts `GrammarRegistry` to JavaScript with [standard style](https://standardjs.com).
",101,True,en,0
15834,2,0,0,Internals,jasonrudolph,2017-10-07T19:12:39Z,185,151,4,1,"This change converts `GutterContainer` to JavaScript with [standard style](https://standardjs.com).

### TODO

- [x] Decaffeinate `src/gutter-container.coffee` and ensure that all tests still pass (440316b45cbb583990842c991d6385c67de1a352)
- [x] Decaffeinate `spec/gutter-container-spec.coffee` and ensure that the tests still pass (d546037863bd8cdc02a008bcaeed76c4cfe3b4f5)
",381,True,en,0
15833,1,7,0,Internals,as-cii,2017-10-06T20:55:40Z,18,18,1,0,"Fixes #15783 

Previously, if the user opened the IME menu while input was disabled, we would create a composition checkpoint without reverting to it after the composition ended. When enabling input again, the first keystroke would cause any buffer change that occurred between the IME composition and the keystroke to be reverted.

With this commit we will always revert and delete the composition checkpoint as soon as the composition ends, regardless of whether the input is enabled or not.

@t9md @ungb @Ben3eeE: since we're touching the IME code path, could you help me test this doesn't introduce any weird regression? Thanks! üôá 

/cc: @nathansobo ",665,True,en,0
15828,1,4,0,Internals,nathansobo,2017-10-05T23:55:08Z,1,0,1,0,"Updating the soft wrap column could cause us to compute different values for derived dimensions, so any dimensions that were cached *in the process* of updating the soft wrap column need to be cleared.

This fixes a randomized test failure found be @Ben3eeE.

/cc @Ben3eeE @as-cii",284,True,en,0
15823,2,1,0,Internals,jasonrudolph,2017-10-06T13:35:12Z,189,165,4,0,"This change converts `Gutter` to JavaScript with [standard style](https://standardjs.com).

### TODO

- [x] Decaffeinate `src/gutter.coffee` and ensure that all tests still pass (785ade897ecda6a73d87b9a95b6e3f83aaf97eb7)
- [x] Decaffeinate `spec/gutter-spec.coffee` and ensure that the tests still pass (51df9a308a9da909ddd04d0b2ffa50c69fe7fcf7)
",352,True,en,0
15821,8,1,2,Internals,as-cii,2017-10-05T19:04:18Z,47039,6,6,0,"Fixes #15761

It is possible for the approximate screen line count to exceed the actual number of lines. This may happen if there are many soft-wraps and the display layer hasn't indexed the entire contents of the buffer. 

In that circumstance, if a user attempts to scroll to a position that does not exist, we are unable to clip it correctly in `setScrollTop` because the line count approximation is also wrong. Therefore, after populating the spatial index in `updateSyncBeforeMeasuringContent`, we will make sure that the approximate screen line count did not change. If it did, we need to clear the derived dimensions cache (which contains, for example, the rendered row range) because it could contain incorrect values.

/cc: @nathansobo @Ben3eeE @ungb @rsese",772,True,en,0
15800,1,1,0,Internals,nathansobo,2017-10-03T19:22:15Z,45,6,2,0,"Closes #15761
Closes #15549
Refs #15263

Due to the fact that the soft-wrapping boundary can change due to a variety of different factors (scrollbars appearing or disappearing, font size changes, editor dimensions changing, etc), we decided to detect changes in the soft-wrap boundary at the start of every frame before proceeding with any other rendering.

This works fine in principle, but prior to this PR it was causing us to write inconsistent values for the `firstRenderedScreenRow` to the per-frame derived dimensions cache in certain edge cases, causing rendering bugs downstream. This could occur when folding caused a document that was scrolled down partially to no longer be tall enough to scroll. This would cause the following unfortunate series of events:

* We would detect the scrollbar becoming invisible due to the shrinking of the content height below the editor height and update the soft-wrap width in [`updateModelSoftWrapColumn`](https://github.com/atom/atom/blob/3a3c58e04e37f3fe653d742134a0067bc8adb8dc/src/text-editor-component.js#L2099).
* Updating the soft wrap boundary would [*reset* the display layer](https://github.com/atom/atom/blob/3a3c58e04e37f3fe653d742134a0067bc8adb8dc/src/text-editor-component.js#L2104), causing it to recompute itself in the background.
* We would then then immediately compute the soft wrap boundary [a second time](https://github.com/atom/atom/blob/3a3c58e04e37f3fe653d742134a0067bc8adb8dc/src/text-editor-component.js#L2106). We always compute the soft wrap boundary twice because the initial change in the soft wrap boundary could change scroll bar visibility, which causes the soft wrap boundary to change again. Unfortunately, we were computing the soft wrap boundary *without* forcing a synchronous update for the visible row range of the display layer, and thus not accounting for the presence of the fold and assuming the scrollbar was visible again.
* In the process of computing the soft wrap boundary a second time, we were caching the incorrect values for the first rendered row in `derivedDimensionsCache`.
* Immediately following the update of the soft wrap boundary, we would [populate the display layer for visible row range](https://github.com/atom/atom/blob/3a3c58e04e37f3fe653d742134a0067bc8adb8dc/src/text-editor-component.js#L365), causing all future derived dimensions to be based on a correctly populated display layer. This would cause a mix of derived values cached against two different versions of the display layer, leading to inconsistent rendering state.

The solution in this PR is to

* Compute the first rendered row prior to resetting the display layer.
* After resetting the display layer, immediately force it to synchronously populate itself for the visible row range before making any additional computations.

These two steps ensure that the `derivedDimensionsCache` is never populated with inconsistent values. I'm hopeful that this issue was also the source of measurement exceptions in #15263, though we'll have to wait to be sure since we never have reproduced them.

Huge props to @ben3eee and @ungb for their help tracking down this edge case. Thanks so much.


",3190,False,en,0
15799,2,0,0,Internals,maxbrunsfeld,2017-10-03T18:46:54Z,22,12,2,0,"Fixes a regression introduced in https://github.com/atom/atom/pull/15713.

When toggling comments on whitespace-only lines, we need to preserve the indentation level.

/cc @jasonrudolph ",190,True,en,0
15798,1,0,0,Internals,maxbrunsfeld,2017-10-03T19:36:44Z,51,32,3,0,"Refs https://github.com/atom/atom/issues/15791

Normally we don't prompt to save editors when reloading or closing a window. But if an editor's contents have changed on disk, then we would need to save the editor to avoid data loss.

I'm not positive that this is the best solution, but it seems reasonable to let you know that if you don't save, you'll lose your changes. Ultimately, we need a little more UI to surface the fact that the editor has changed on disk.",470,True,en,0
15785,1,1,0,Externals,arnavb,2017-10-02T16:37:54Z,3,15,1,0,"Used the ternary operator to shorten the last three methods in color.js

### Description of the Change

This was a small refactoring to shorten the last three methods in the color class.

### Alternate Designs

N/A

### Why Should This Be In Core?

N/A

### Benefits

It doesn't sacrifice clarity, but just reduces unnecessary sizeof code.

### Possible Drawbacks

Possibly readability, although that shouldn't be too big an issue.

### Applicable Issues

None
",486,True,en,0
15777,1,3,0,Externals,matthewwithanm,2017-09-29T22:30:32Z,1,1,1,0,"This listener is added with `{capture: true}`, which means it'll only be removed if `removeEventListener()` is passed `{capture: true}` too. Without that (as it is currently), the listener is never removed and each mouseup event ends up triggering the handler one more time than the last. Eventually, this leads to slowdown. üòû",329,False,en,0
15776,6,0,2,Internals,maxbrunsfeld,2017-10-01T17:18:07Z,754,660,3,1,"@leroix and I noticed this when doing some profiling https://github.com/atom/autocomplete-plus/pull/886.

Uses https://github.com/atom/superstring/pull/35",156,True,en,0
15775,3,3,8,Externals,Ben3eeE,2017-10-05T16:36:48Z,13,2,1,5,"This is a first draft including what I would like to add to the bot message after reading feedback.

/cc: @lee-dohm @rsese for üí≠s about the wording and contents.",166,True,en,0
15770,3,0,0,Internals,maxbrunsfeld,2017-09-29T00:23:48Z,1339,1410,2,0,"This fixes a flaky test: https://ci.appveyor.com/project/Atom/atom/build/7624/job/gsbcqdb2a8298xop

I also took this opportunity to convert the package manager spec to JavaScript and use `async` and `await` instead of `waitsFor`.",231,True,en,0
15769,1,6,0,Internals,iolsen,2017-10-03T17:44:01Z,1,1,1,4,"Upgrading to the latest 1.6 patch to get the RCE fix: https://electron.atom.io/blog/2017/09/27/chromium-rce-vulnerability-fix

Fixes https://github.com/atom/atom/issues/13885",176,True,en,0
15768,1,1,0,Externals,Ben3eeE,2017-09-28T23:28:29Z,1,1,1,0,/cc: @ungb This branch will fix the Slovak issues,49,False,en,0
15760,1,3,0,Externals,thomasjo,2017-09-30T05:58:40Z,0,0,3,2,"### Description of the Change
Something changed in macOS 10.13 High Sierra that affects how our application icons render. Simply regenerating the `.icns` files based on the PNG master files using `iconutil` fixes the issue. I am however not able to verify if they still look as intended on macOS 10.12 (and older).

### Alternate Designs
Will have to ship separate icon set for macOS 10.13 if this does not work as intended on older releases of macOS.

### Why Should This Be In Core?
Icon resources reside in this repo.

### Benefits
Application icons look like they should ‚Äî not washed out.

### Possible Drawbacks
Might break icons on macOS versions older than 10.13.

### Applicable Issues
Fixes #15410
",726,False,en,0
15759,2,0,0,Internals,maxbrunsfeld,2017-09-27T22:37:34Z,2,2,1,0,"Refs https://github.com/atom/text-buffer/pull/263
Refs https://github.com/atom/autosave/pull/84

This avoids unnecessarily saving files as soon as they are opened when autosave is enabled, while still keeping the changes that fix https://github.com/atom/autosave/issues/67.",276,False,en,0
15750,11,1,0,Internals,maxbrunsfeld,2017-09-27T22:05:30Z,713,633,8,0,"Fixes https://github.com/atom/atom/issues/9544
Depends on https://github.com/atom/git-utils/pull/80",100,False,en,0
15740,1,0,0,Internals,smashwilson,2017-09-25T14:44:30Z,1,1,1,0,"The deactivationResult returned from a package's `deactivate()` method was having its `then` property compared to the string `""function""` rather than its _type_ being compared to `""function""`. As a result, async package deactivation functions were not returning the correct Promise from `PackageManager.deactivatePackage()`.

Quick fix :zap:",343,True,en,0
15729,5,5,0,Externals,50Wliu,2017-10-02T08:15:15Z,4,4,1,8,"first-mate is now more in line with the original TextMate implementation.

* [x] https://github.com/asciidoctor/atom-language-asciidoc/pull/185
* [x] https://github.com/nwhetsell/language-csound/pull/3
* [ ] https://github.com/paxromana96/language-frege/pull/1
* [x] https://github.com/aegypius/language-gentoo/pull/5
* [x] https://github.com/atom-haskell/language-haskell/pull/110
* [x] https://github.com/burodepeper/language-markdown/pull/193
* [x] https://github.com/tggreene/language-pixie/pull/1
* [x] https://github.com/hellerve/language-zepto/pull/1",566,True,en,0
15713,19,1,0,Internals,maxbrunsfeld,2017-09-25T17:37:23Z,2283,2036,13,3,"Refs https://github.com/atom/text-buffer/pull/260

This is the first in a series of PRs to make Atom's syntax related features more flexible.

Currently, code related to auto-indentation and code folding is mostly implemented in a private class called `LanguageMode`, which is constructed with a `TextEditor` instance, and implements most of its functionality by directly manipulating the editor.

This PR removes the `LanguageMode` class and reimplements its functionality in the existing `TokenizedBuffer` class, in a way that does *not* need to manipulate the editor directly. For example, instead of performing folds directly, the `TokenizedBuffer` exposes several pure methods for determining which buffer ranges should be folded.

I converted the `TokenizedBuffer` and its test to JS. For the tests that were previously in `language-mode-spec.coffee`, I have either moved them into `tokenized-buffer-spec.js` or moved them into a new test file - `text-editor-test.js`. I created that new file because I had already converted these tests to JS before realizing that some of them were really about `TextEditor` and not `TokenizedBuffer`, and I didn't want to convert the entirety of `text-editor.coffee` to JS yet. Since the file is so large, we may want to do the conversion gradually.

/cc @nathansobo ",1318,True,en,0
15712,4,0,0,Externals,50Wliu,2017-09-21T19:45:40Z,4,4,2,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

* Fix improper tokenization of script and style tags (where the tags themselves would have embedded scopes)
* Recognize XML namespaces
* Improve attribute tokenization
* Improve entity tokenization
* Add `text/ractive` to list of types that will be tokenized as HTML when in a script tag
* Remove useless `meta.tag.any.html`
* Add unique scopes for the `class` attribute

Other commits are mostly working around the `meta.tag.any.html` removal.",747,True,en,0
15692,5,3,0,Externals,UziTech,2017-09-28T18:51:13Z,55,0,2,8,"
### Description of the Change

Change a pane elements `.dataset.activeItemPath` and `.dataset.activeItemName` when the path changes.

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs



<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

needs to change the core pane-element

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

```javascript
atom.workspace.getActivePane().element.dataset.activeItemPath
```
will be more reliable.


<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

none

<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

#15691 

<!-- Enter any applicable Issues here -->
",1231,False,en,0
15683,1,6,0,Externals,dreiss,2017-09-19T03:04:03Z,11,1,1,0,"### Requirements

* All new code requires tests to ensure against regressions

I would love some guidance on how to write an automated test for this.

### Description of the Change

Some Atom extensions (like Nuclide) have functionality that can only be
triggered by open-url events, which only work on Mac OS.  With this
change, `atom://` URLs can be passed on the command-line, and they will
opened with the normal openUrl method on all platforms.

This change doesn't set Atom up as the default handler for atom:// urls.
That will require some platform-specific changes.


### Alternate Designs

I considered making a separate option for passing urls (--open-url), but this seems more convenient.

### Why Should This Be In Core?

Very simple change.  Brings the ""open-url"" interface to all platforms.

### Benefits

Windows and Linux users can easily simulate ""open-url"" events.

### Possible Drawbacks

Can't use the atom command line to open a file whose name starts with `atom://`, though you can still use `./atom://foo` or just `atom:/foo`.",1080,True,en,0
15681,21,3,0,Internals,smashwilson,2017-09-20T18:21:05Z,250,38,7,2,"When deserializing a serialized `Project` state that references one or more root directories that no longer exist, show an error notification.

When deserializing an _unmodified_ buffer that is no longer accessible for any reason, silently skip that buffer.

When deserializing a _modified_ buffer that is no longer accessible, deserialize the buffer. Eventually we might want to decorate the editor with a banner warning that the underlying file no longer exists.

Fixes #13325.",485,True,en,0
15678,6,0,0,Internals,jasonrudolph,2017-09-19T12:27:09Z,464,386,8,1,"This change converts `Notification` and `NotificationManager` to JavaScript with [standard style](https://standardjs.com).

### TODO

- [x] Decaffeinate `src/notification.coffee` and ensure that all tests still pass (3fb699fa227a5ad57bc40437fb888af7878f802a)
- [x] Decaffeinate `src/notification-manager.coffee` and ensure that all tests still pass (3e21dd69231a4b47aab0f1ed82c630df0e9e01ad)
- [x] Decaffeinate `spec/notification-spec.coffee` and `spec/notification-manager-spec.coffee`  and ensure that the tests still pass (45c3770293287cdcbd5e566c0d3a7644288c90a5 and 0054e3f796acccf04058643bb2f573d2b76b7264)
",620,True,en,0
15669,1,1,0,Externals,BenRussert,2017-09-16T20:43:24Z,1,1,1,0,"### Description of the Change

The docs currently say `Cursor` instead of `cursor`, just a quick fix there.

As discussed with @50Wliu on slack",147,True,en,0
15656,1,0,0,Internals,smashwilson,2017-09-15T01:58:28Z,3,2,1,0,"season 6.0.0's `CSON.writeFileSync` method didn't have a third ""options"" argument, so if this code is executed with an old version of season, it will _always_ unconditionally wipe the config. This can happen if, for example, you open Atom in developer mode after doing a `git pull` in your Atom directory but before running a `script/build` to update the dependencies.

/cc @BinaryMuse @damieng @kuychaco ",407,True,en,0
15654,2,0,0,Internals,BinaryMuse,2017-09-14T23:39:04Z,1,1,1,0,"v0.5.1...master

* [atom/github#1158 - Fix freezing when dragging pane/dock items](https://github.com/atom/github/pull/1158)
* [atom/github#1159 - Throw error when pane is not found for dock item only if it exists and is not destroyed](https://github.com/atom/github/pull/1159)
* [atom/github#1165 - Check for deep equality of selected items after update](https://github.com/atom/github/pull/1165)
* [atom/github#1167 - Add text clipping for 'Create Repo' button](https://github.com/atom/github/pull/1167)
* [atom/github#1171 - Properly destroy status bar items when unmounting StatusBar component](https://github.com/atom/github/pull/1171)
* [atom/github#1153 - Handle repositories that are very large and/or that exist in home or root directories](https://github.com/atom/github/pull/1153)

I expect the last one to fix the crashing issues.",851,True,en,0
15652,1,0,0,Internals,jasonrudolph,2017-09-14T13:39:33Z,1,1,1,0,Upgrade to autocomplete-plus v2.35.10 to take advantage of https://github.com/atom/autocomplete-plus/pull/887.,110,False,en,0
15649,1,0,0,Externals,Ben3eeE,2017-09-14T12:36:48Z,1,1,1,0,"@ungb @50Wliu Opening this as a PR instead of just committing to master

Changes:

* Add an option to highlight matching bracket in the gutter
* Ability to recognize self closing tags added back again after being reverted due to a performance regression
* Fixed a bug where bracket-matcher did not skip over tag attributes when selecting inside tags

https://github.com/atom/bracket-matcher/compare/v0.87.3...v0.88.0",424,True,en,0
15643,6,0,0,Internals,maxbrunsfeld,2017-09-19T18:21:54Z,1742,1422,6,5,This is a follow-up to #15627. I realized that this should fix the autosave issues introduced in 1.19 without requiring any changes to the `autosave` package.,158,False,en,0
15638,5,0,0,Internals,smashwilson,2017-09-13T20:15:35Z,186,64,4,0,"Backport the Config changes from #15440 to stable to deal with the race conditions #14909.

This will require some additional work because the `watchPath` API wasn't introduced until 1.21, so I'll need to backport the stat-polling logic from nsfw.

/cc @kuychaco who did most of the original PR
/cc @ungb @rsese @iolsen for visibility into progress on this",361,True,en,0
15627,5,0,0,Internals,maxbrunsfeld,2017-09-13T20:02:52Z,35,20,5,0,/cc @ungb @Ben3eeE - This will allow the `autosave` package to delay items closing until they have finished saving.,115,False,en,0
15623,2,0,0,Internals,maxbrunsfeld,2017-09-12T19:26:40Z,1,1,1,0,"Depends on https://github.com/atom/text-buffer/pull/253
Refs https://github.com/atom/autosave/issues/80
Refs https://github.com/prettier/prettier-atom/issues/264",163,False,en,0
15618,1,0,0,Externals,t9md,2017-09-12T08:30:20Z,1,1,1,0,"### Description of the Change

`@softWrapped` appears TWICE where it should be ONCE in object params field extraction.
See line 160 also have `@softWrapped`.


### Alternate Designs

NO

### Why Should This Be In Core?

Just bug

### Benefits

clean

### Possible Drawbacks

no

### Applicable Issues

no
",330,True,en,0
15613,1,1,0,Internals,maxbrunsfeld,2017-09-11T17:30:35Z,2,1,1,0,"Fixes this error on Circle: https://circleci.com/gh/atom/atom/5167

/cc @as-cii @iolsen",89,True,en,0
15606,1,0,0,Internals,lee-dohm,2017-09-10T21:17:16Z,3,1,1,0,"### Description of the Change

Make the `atom.getReleaseChannel` function public.

### Alternate Designs

The related functions such as `atom.getVersion` and `atom.isReleasedVersion` are already public, so I didn't believe that this should be any different.

### Why Should This Be In Core?

It already is.

### Benefits

People won't roll their own.

### Possible Drawbacks

Package authors may be more encouraged to make conditional code based on the release channel.

### Applicable Issues

N/A
",521,True,en,0
15603,33,1,0,Externals,jsoref,2017-09-10T16:29:39Z,66,66,22,0,"### Description of the Change

Spelling fixes

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->
None of the misspellings appeared particularly intentional.

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->
Misspellings hurt project health.

### Benefits

<!-- What benefits will be realized by the code change? -->
It's easier to use healthier projects, and there are fewer errors when people try to write code with the expected spelling (which doesn't match the used misspelling).

### Possible Drawbacks

It's possible that a misspelling is intentional, or that it's an APIand thus is hard to change (JavaScript and stylesheet are the only likely candidates in this series).",839,True,en,0
15588,2,0,0,Internals,jasonrudolph,2017-09-08T12:20:39Z,1,1,1,0,"Adds symbols-view support for Jasmine functions in JavaScript (https://github.com/atom/symbols-view/pull/227).

Specifically, symbols-view gains the ability to identify the following items as functions:

- `describe` blocks
- `it` blocks
- focused `it` blocks (e.g., `fit`, `ffit`, `fffit`, etc.)
- focused `describe` blocks (e.g., `fdescribe`, `ffdescribe`, `fffdescribe`, etc.)
- disabled `it` blocks (i.e., `xit`)
- disabled `describe` blocks (i.e., `xdescribe`)

",478,True,en,0
15583,1,0,0,Internals,as-cii,2017-09-07T16:43:06Z,22,1,2,0,"Fixes #15582

In https://github.com/atom/atom/pull/15503 we mistakenly assumed `marker.isValid` accounted only for the validity of the marker. However, that method returns `false` also for markers that are valid but have been destroyed. As a result, the editor component was mistakenly not removing block decorations associated with such markers.

With this pull-request we will rely on the local `wasValid` variable instead. If its value is `true`, it means that the block decoration has been accounted for in the `lineTopIndex` and must, as a result, be cleaned up in case the marker or the decoration gets destroyed.

/cc: @nathansobo @Ben3eeE @lgeiger @rsese @ungb",674,True,en,0
15580,1,1,0,Internals,as-cii,2017-09-07T14:39:17Z,45,27,2,0,"Fixes #15552

This prevents the dummy scrollbars from resetting their position to `0` when the editor element is moved elsewhere in the DOM (e.g. when splitting a pane item).

/cc: @nathansobo @50Wliu @Ben3eeE @rsese @ungb",226,True,en,0
15577,1,1,0,Externals,Ingramz,2017-09-07T13:06:43Z,1,1,1,0,"![span_before](https://user-images.githubusercontent.com/1017132/30161542-b192eb74-93d9-11e7-8848-dcd87247d3da.png)

At first I believed that [these span elements were redundant](https://github.com/atom/atom/blob/master/src/text-editor-component.js#L3883-L3884), however after discussion with @as-cii it came out that it is being used for [measuring the total length of the line](https://github.com/atom/atom/blob/a53958e00742b24aa0ebf47e264c46094c5c6c9b/src/text-editor-component.js#L2195), so they cannot be removed after all. Strangely, setting `this.element` as the `openScopeNode` did not introduce any regressions, which might need to be looked into, but it works for now, so I doubt there will be any progress made in that regard.

Still the main reason why I even started investigating this was due to the class name of these elements being suspicious (`""null""`), which happens because null value is converted to string. Defaulting to empty string fixes this and brings it in line with rest of the surrounding code.",1027,True,en,0
15566,1,0,0,Externals,50Wliu,2017-09-06T20:16:09Z,2,2,1,0,"It's https://atom.io/docs/api/v1.19.6/TextEditor, not https://atom.io/docs/api/v1.19.6/Editor :wink:",100,False,en,0
15557,3,0,2,Internals,as-cii,2017-09-06T17:11:12Z,20,2,2,0,"Previously, we used to verify the snapshot script by running it in a new, empty context (similar to the one that `mksnapshot` creates when generating the startup blob).

However, this context was being created using the Node version that `script/build` was executed with. Such version may not match the Node version shipped with Electron, and could thus cause the build script to report ""false negatives"" when verifying the snapshot script. For instance, running `script/build` with Node 4 would cause it to throw an error when encountering keywords like `async`/`await`, even if they're 100% supported in Electron 1.6.9.

With this pull-request we are changing the snapshot verification code to use the Node version bundled in Electron in order to avoid the aforementioned mismatches.

@damieng @leroix: I believe this will fix the errors you were encountering on #15554.

/cc: @atom/maintainers",904,True,en,0
15554,11,1,3,Internals,damieng,2017-09-09T17:57:25Z,201,100,12,3,,0,False,en,0
15551,3,0,0,Externals,50Wliu,2017-09-05T17:30:01Z,2,2,1,0,"Introduces a very large overhaul of the language-coffee-script grammar, bringing it up-to-date with language-javascript.

language-html contains a temporary spec fix.",168,True,en,0
15550,1,3,0,Internals,as-cii,2017-09-06T09:11:16Z,30,3,2,0,"Fixes https://github.com/atom/atom/issues/15441

Previously, when trying to use block decorations on non-empty markers, Atom could sometimes throw an error if such markers ended or started at a position that was not currently rendered.

In fact, even if we already restricted the decoration query to markers that intersected the visible row range, markers that were only partially visible would still be considered for rendering. If, depending on the `reversed` property, we decided to render the tail or head of the marker in question and this was outside the viewport, Atom would throw the aforementioned exception.

This pull-request addresses the above issue by explicitly ignoring block decorations that are located on rows that are not yet rendered.

/cc: @nathansobo @Ben3eeE @rsese @ungb",803,True,en,0
15546,1,5,0,Internals,as-cii,2017-09-06T09:12:15Z,28,15,2,0,"Fixes https://github.com/atom/atom/issues/15489

Previously, we used to scroll the editor on behalf of the user when clicking near the edges. This behavior was being perceived as jarring, because it would move up/down the line the user was trying to click:

![kapture 2017-09-05 at 15 23 22](https://user-images.githubusercontent.com/482957/30063198-2c6790b2-924e-11e7-9720-0d3cf676a932.gif)

With this pull-request we are restoring the behavior Atom 1.18 exhibited, which prevents the editor from auto-scrolling when using the mouse to add, delete or move selections:

![kapture 2017-09-05 at 15 25 24](https://user-images.githubusercontent.com/482957/30063285-766c9a9a-924e-11e7-8f0b-075e6ab0b35e.gif)

/cc: @nathansobo @ungb @Ben3eeE @50Wliu ",755,True,en,0
15528,1,1,0,Internals,as-cii,2017-09-02T09:41:59Z,19,1,2,0,"This fixes an uncaught exception that was being thrown after invalidating a marker and resizing the editor. I don't think this issue was reported, but it could be reproduced by:

1. Opening a file with merge conflicts in a git repository.
2. Delete the entire region containing conflict markers.
3. Try to resize the editor.
4. üí•

/cc: @nathansobo @Ben3eeE ",367,True,en,0
15522,3,1,0,Internals,damieng,2017-09-01T19:34:21Z,855,652,2,0,,0,False,en,0
15515,1,0,0,Internals,as-cii,2017-08-31T12:29:26Z,2,2,1,0,"Fixes #15488 
Fixes #15489

This pull-request fixes a regression introduced in https://github.com/atom/atom/pull/15367 while refactoring `DummyScrollbarComponent`. Instead of calling the `didMouseDown` method on the component itself, we were invoking the `didMouseDown` function that was passed by the parent component.

/cc: @nathansobo @ungb @Ben3eeE @rsese ",365,False,en,0
15506,2,3,0,Internals,as-cii,2017-08-31T09:29:27Z,35,27,2,0,"Fixes https://github.com/atom/atom/issues/15442

Previously, we were hiding scrollbars when their height/width was 0. On macOS, however, users can decide to only show scrollbars while scrolling, which causes Atom to detect scrollbars as being invisible during measurements. As a result, we were mistakenly setting the visibility property to `hidden` when this setting was on, thus preventing users from seeing the scrollbar on scroll.

With this pull-request we are:

* Changing the dummy scrollbar components to only become invisible when the content is not scrollable rather than when the scrollbars have zero width or height.
* Moving `DummyScrollbarComponent` back into its own GPU layer. This was a workaround that got added back in bac9922 and it's needed in order for scrollbars to be shown properly when the ""Show scrollbars only when scrolling"" setting is on.
* Renaming the `is{Horizontal,Vertical}ScrollbarVisible` functions to `canScroll{Horizontally,Vertically}`, to better express their intent. In fact, if the content is scrollable it doesn't necessarily mean that the scrollbar is also visible.

/cc: @nathansobo @Ben3eeE @ungb @lee-dohm ",1164,True,en,0
15503,1,1,2,Internals,as-cii,2017-08-31T09:29:15Z,137,26,3,0,"Fixes #15490

Previously, when a marker became invalid we would delete the corresponding block decoration from the DOM, without however removing it from the `lineTopIndex`. Also, we had a similar issue when decorating a marker that was already invalid: we would account for it in the index without adding it to the DOM.

This pull-request addresses the above problems by ensuring that block decorations are never added for invalid markers. At the same time, the editor component will still keep track of changes on the marker that was decorated, so that it can detect when its validity changes and render it appropriately.

/cc: @nathansobo @Ben3eeE ",656,True,en,0
15498,7,6,0,Externals,MoritzKn,2018-01-10T18:50:24Z,124,61,3,133,"### Description of the Change

* Some refactoring on the install script (mainly on the linux part) (1.-3. commit).
* Change the install script to create a separate installation for the dev channel (`atom-dev`) like it is already done for the beta channel (`atom-beta`) (4. commit).
* Change the way icons are handled in the xdg desktop file. This replaces the absolute path used previously with a icon name. The name will then be interpreted by the desktop environment, which in turn selects the icon from a icon theme. This is also how the desktop files in the dep and rpm packages already work. (5. commit).
* Change the install script to copy the application icons (in all resolutions) to the default icon theme. This is required to make to point above work when no alternative icon theme is used or the alternative icon theme does not provide an icon. (5. commit).

### Alternate Designs

None

### Why Should This Be In Core?

* Refactors core code.
* The beta channel is already installed in parallel so the dev channel should be too.
* The new way desktop files are handled is more ""linuxy"" and preferable as default.

### Benefits

* Cleaner code
* Allows all channels to be installed in parallel.
* Users are able to use alternative icon themes with atom; makes atom more hackable.
* The desktop environment gets to choose between different resolutions.
* Aligns the way the manually installed version behaves with the what is installed from a package.

### Possible Drawbacks

None known

### Applicable Issues

* Perhaps fix #12993 (icon scaling issue).
* Fixes icon behavior mentioned in #14480 (wrong icon path). This is fixed with the 2. commit and with the alternative design from the 5. commit.",1742,True,en,0
15495,8,0,0,Internals,iolsen,2017-08-30T00:37:19Z,7,3,1,0,"Original changes from https://github.com/atom/atom/pull/14701.

Figuring out why Circle builds are failing before merging.",124,True,en,0
15492,1,0,1,Internals,lee-dohm,2017-08-29T18:20:32Z,2,2,1,0,"[probot-stale](https://github.com/probot/stale) has been helping us clean up old issues. We originally implemented it with a very liberal two year stale window to ensure that it worked reliably. Now that probot-stale has [over five thousand issues across all of GitHub under its belt](https://github.com/search?q=commenter%3Aapp%2Fstale&ref=opensearch), we're confident that we can trust it with a more realistic window.

We're shrinking the window where something will be marked stale to one year and if there is no further activity after that, it will be closed in an additional two weeks. All other settings will remain the same.",634,True,en,0
15487,1,0,1,Internals,as-cii,2017-08-31T09:28:17Z,40,3,2,1,"Fixes #15467

This pull-request introduces a change in the way we respond to mousewheel events. In particular, if `-1 < delta * scrollSensitivity < 1`, we will scroll up or down by 1 in an attempt to honor the user's scroll intent.

/cc: @iolsen @lee-dohm @ungb @nathansobo ",278,True,en,0
15486,1,2,2,Internals,as-cii,2017-08-31T09:26:15Z,148,182,3,1,"As a consequence of https://github.com/atom/atom/pull/15378, we are now able to render highlight decorations in a separate div, as opposed to having an highlight container for each tile.

Code-wise this is much simpler, because highlights spanning multiple tiles can be represented via a single region and don't need to be split across the tiles they span anymore. As a byproduct, performance should improve as well, because the number of nodes that need to be managed should decrease significantly.

This also fixes https://github.com/atom/atom/issues/15449 (and other similar rendering artifacts), because highlight decoration DOM nodes won't need to move between tiles anymore when their position changes.

/cc: @nathansobo @t9md ",739,True,en,0
15475,3,0,0,Externals,50Wliu,2017-08-28T21:48:57Z,3,3,1,0,"For CSS, HTML, and the Atom API (to Atom 1.19's API docs).",58,False,en,0
15474,7,0,0,Externals,50Wliu,2017-08-28T21:48:48Z,7,7,1,0,"All patch releases this time, mostly just small bugfixes and additions here and there.

* language-css
  * More grid keywords
* language-gfm
  * New bullet point snippet
* language-java
  * Tokenize string parameters
* language-javascript
  * Add `.mjs`
* language-sass
  * Tokenize the `$=` ends-with selector
* language-shellscript
  * Tokenize heredoc with spaces",379,True,en,0
15446,2,1,0,Internals,maxbrunsfeld,2017-08-29T17:14:43Z,241,244,8,3,"Now that we're [using](https://github.com/atom/text-buffer/pull/247) `fs-admin` instead of `runas` in `text-buffer`, we can remove the few usages of `runas` in Atom itself and drop it as a dependency entirely, which will slightly reduce our bundle size and the amount of code we have to maintain.",296,False,en,0
15440,28,3,0,Internals,kuychaco,2017-09-12T19:23:19Z,127,63,3,18,"Fixes #14909 

This PR addresses three issues related to config settings data loss.

### Issue 1
_config file stops being watched_

Repro steps (on MacOS):
1. `mv config.cson config.cson-bak`
2. open Atom and open `config.cson`. Note that it's empty except for some settings set by packages. Add `editor.fontSize` and set it to something unusual. Note that the font updates immediately after setting it.
3. `mv config.cson-bak config.cson`
4. note that the `config.cson` file updates, but settings are not loaded. That is, if you changed the `editor.fontSize` normally you observe it updating on the spot, but making changes to the file after moving it will do nothing
5. reload the editor and note that `config.cson` has reverted back to its bare state 

Turns out that after step 3 we stop watching the `config.cson` file. Pathwatcher gives us a `delete`, and subsequent file changes do not result in more `change` events so we don't reload the user's config and update the in-memory settings. Reloading Atom flushes the stale settings to disk and overwrites the changes that were made resulting in lost settings. 

The fix implemented in this PR involves using @smashwilson's new bundled file watching service. We reload the user's config on `created`, `modified`, and `renamed` events. 

The bug outlined above resulted in the config file reverting to a previous version of the file prior to being overwritten. It seems that most of the reports in #14909 indicate that the config file was reset completely, which points to a root cause other than what was outlined above. 

The rest of this PR aims to make the code around writing to the config file more airtight. There are only two places where we make calls to `writeFileSync`: 

### Issue 2
_race condition in `loadUserConfig` when a config file does not yet exist_

Previously, there was room for a race condition. An external process could have created a config file after we checked for its existence and before we wrote to the file, potentially resulting in overwriting the changes made by an external process. 
```
      unless fs.existsSync(@configFilePath)
        CSON.writeFileSync(@configFilePath, {})
``` 
Solution: Don't write file if it already exists (depends on https://github.com/atom/season/pull/22)
```
      CSON.writeFileSync(@configFilePath, {flag: 'x'}, {}) # fails if file exists
```

### Issue 3

_race condition in `save()` we write the blank in-memory settings to disk before the first `loadUserSettings()` call_

Previously, there was the possibility that this happened before the in-memory settings were updated to reflect the user's config on disk (`@settings` is initialized to `{}` and updated only after `loadUserConfig` is called). In this case, writing to the file would clobber all the user's settings. This is the most likely cause of the issues reported in #14909. 

Solution: Store of `set` and `unset` operations run prior to loading the user's config and run them once the in-memory settings are updated. 


TODO:
- [x] fix tests
- [x] update `season` to take options
- [x] store pending operations in config before loaded
- [ ] for hotfix https://github.com/Axosoft/nsfw/blob/ef23f197cff6641276d90cdd779b4c1824fe6d6c/js/src/index.js#L80-L123",3288,True,en,0
15438,1,0,0,Externals,Ben3eeE,2017-08-28T19:56:23Z,27,1,2,4,"### Description of the Change

Before this PR running `pane:split-[direction]-and-move-active-item` on an empty pane creates a new empty pane and throws an exception because `undefined` can not be moved. This PR adds a condition to not try and move if `@activeItem` is `undefined`.

With this change the behavior is the same in that we create an empty pane in the direction when doing this but without throwing an exception.

I also added a test for copying empty panes. `pane:split-[direction]-and-copy-active-item` already worked on empty panes before this PR.

### Alternate Designs

We could do nothing if `@activeItem` is `undefined`. But I did not go with this because it changes the behavior and the split functions should return the created pane.

### Why Should This Be In Core?

The code is already in core.

### Benefits

* Fixes an exception

### Possible Drawbacks

Did not consider any drawbacks.

### Applicable Issues

Fixes https://github.com/atom/atom/issues/11189
",1010,True,en,0
15433,1,1,0,Externals,Ben3eeE,2017-08-24T15:53:18Z,3,3,1,0,"Discovered by me and @jasonrudolph 

The tests for `splitRight`, `splitUp`, and `splitDown` were all testing with `splitLeft` for the `moveActiveItem` test.",158,True,en,0
15420,2,0,0,Internals,as-cii,2017-08-24T20:49:49Z,42,44,2,1,"Refs: https://github.com/atom/atom/issues/15263

With this pull-request we are replacing the previous `lineNodesByScreenLineId` and `textNodesByScreenLineId` with a single `lineComponentsByScreenLineId` map, which allows the relevant nodes to be retrieved directly from the line component. Other than being simpler, this will help us understand whether #15263 might be caused by accidentally removing a line element from the map when a line is destroyed.",456,True,en,0
15416,2,0,0,Internals,nathansobo,2017-08-23T12:40:48Z,7,1,1,0,"This PR adds more metadata to the exception throw in https://github.com/atom/atom/issues/15263, with hopes we can understand the cause. We have yet to see one of these exceptions in BugSnag, which makes me think that it's either extremely rare and those experiencing it have metrics disabled, or that there's something wrong with our exception reporting.

/cc @as-cii ",370,True,en,0
15415,5,6,5,Externals,Xapphire13,2017-11-15T17:42:39Z,22,5,3,84,"The main process tests take some time to complete, to improve the inner loop when working on features I have added the commandline option to skip these tests.

I have also cleaned up a duplicate import and added some resource cleanup to a few existing tests.

**Note**: These changes are extracted from my now abandoned PR #14456 ",334,True,en,0
15414,1,0,0,Internals,maxbrunsfeld,2017-08-22T23:57:59Z,1,1,1,0,"Refs https://github.com/atom/atom/issues/15279
Depends on https://github.com/atom/text-buffer/pull/248",103,False,en,0
15413,1,0,0,Internals,smashwilson,2017-08-22T23:21:47Z,1,1,1,0,"It's `action`, not `type`.

Good catch @damieng.",50,True,pl,0
15407,2,3,0,Internals,as-cii,2017-08-22T17:47:18Z,79,0,2,0,"Fixes https://github.com/atom/atom/issues/15217
Fixes https://github.com/atom/atom/issues/15405

This pull-request addresses a regression that was causing edits performed while users were holding the left mouse button to result in unwanted selections.

| Before                                                                                                        | After                                                                                                        |
|---------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------|
| ![before](https://user-images.githubusercontent.com/482957/29560759-615f5b22-8733-11e7-98e8-72a79b1e28dc.gif) | ![after](https://user-images.githubusercontent.com/482957/29560760-617e3628-8733-11e7-937e-5fe55a16b974.gif) |

Back in Atom 1.18, we used to handle this subtle behavior via an `onWillChange` event subscription on the buffer:

https://github.com/atom/atom/blob/783cda8642e42e842a7aac761f267e151f3db324/src/text-editor-component.coffee#L727

And this pull-request uses the same strategy to work around the problem.

/cc: @nathansobo @Ben3eeE @ungb ",1279,False,en,0
15394,1,1,0,Externals,wbinnssmith,2017-08-21T15:35:31Z,751,583,4,0,"This was bootstrapped with running `decaffeinate` on both command-registry and its spec, but involved a line-by-line eyeing and updating for idioms, style, and in one case correctness:

For some reason, copying the keys to the new dispatchedEvent in coffeescript (command-registry.coffee:235) currently does not result in a thrown exception, as it should when trying to write over the read-only property `isTrusted`, so I added a check to ensure that the key did not already exist in the new event. Moreover, other definitions of `preventDefault`, `stopPropagation` and friends, which are also enumerable afaict, would also overwrite the ones defined just prior (command-registry.coffee:220 and command-registry.js:325), so that check ensures we don't overwrite those either.

Test plan: `./script/lint && ./script/test`, and a lengthy smoke test of various commands through keybindings, command palette, and package interfaces.

Released under CC0.",949,True,en,0
15392,2,1,0,Externals,wbinnssmith,2017-08-21T15:38:35Z,6,31,7,0,"Test Plan: ensure every removed global is a part of an added `env` from https://github.com/sindresorhus/globals/blob/master/globals.json

run `./script/lint`

Released under CC0",177,True,en,0
15389,2,1,0,Internals,as-cii,2017-08-20T13:00:19Z,42,11,2,0,"When there are block decorations, we compute a `marginTop` style for line numbers, so that they can be aligned correctly to the corresponding line nodes.

This pull-request fixes a regression in the logic that calculated the `marginTop` value, which was failing to correctly render line numbers when block decorations were located right before the end of a tile, or exactly at the beginning of it.

| Before | After |
|--------|-------|
| ![screen shot 2017-08-19 at 15 41 35](https://user-images.githubusercontent.com/482957/29487170-49e4d642-84f5-11e7-894f-2e8604633f66.png) | ![screen shot 2017-08-19 at 15 43 15](https://user-images.githubusercontent.com/482957/29487172-4f5bbe38-84f5-11e7-9eb0-c18acc87a1a9.png) |

@Ben3eeE @50Wliu @ungb: I don't think this regression has been reported yet, but please feel free to test it and close any issue that may be related to this.

/cc: @nathansobo 

",910,True,en,0
15384,4,2,0,Internals,nathansobo,2017-08-21T08:44:19Z,38,7,2,2,"Previously, we were calculating the position preceding block decorations for the row following the end of the highlighted range, but that's actually wrong. We just want the position following block decorations of the end of the highlighted range, plus one line height. This prevents us from incorrectly rendering the end of highlight after block decorations that immediately follow the end of the highlighted range.

Before:

<img width=""316"" alt=""screen shot 2017-08-18 at 8 56 51 pm"" src=""https://user-images.githubusercontent.com/1789/29482915-ded1c2cc-8457-11e7-8351-e954d1429aa2.png"">

After:

<img width=""362"" alt=""screen shot 2017-08-18 at 8 56 44 pm"" src=""https://user-images.githubusercontent.com/1789/29482921-f6ad596a-8457-11e7-9e4e-07ae2aba52ad.png"">

/cc @ungb @as-cii ",792,True,en,0
15383,6,5,10,Externals,wbinnssmith,2017-08-29T15:54:42Z,183,65,2,10,"Fixes #15143 

This adds support for listener objects which, in addition to the existing callback listeners, can optionally provide a `displayName` ahead of time to avoid a potentially awkward humanized displayName.

Every object-based listener must implement `handleEvent()`, which plays the role of the callback fired when the command is dispatched.

We can support other first-class metadata, for example I'm preparing a pull request to the command palette to support displaying a command's `description` field as a second line below the `displayName` in search results. I even have an example of adding ""tags"" to a command to help capture keywords a user might use when searching for a command, kind of like how macOS shows ""System Preferences"" as a result for settings:

![image](https://user-images.githubusercontent.com/755844/29479570-c53d9712-8427-11e7-8ac0-00693cecc4f0.png)

Here's an example of an object command listener:

```js
atom.commands.add('foo:command', document.body, {
  displayName: 'My awesome foo command',
  description: 'Here\'s some detail about my foo command. Try it out!',
  handleEvent() {
    alert('foo!');
  },
```

It should also be technically possible to attach these properties to a function callback. If we'd like to officially support this I'll add some tests to check:

```js
function myListener() {
  alert('foo!');
}

myListener.displayName = 'My Awesome Listener';
myListener.description = 'Does awesome stuff!';
```

I'll cross-link my command palette pull request which demonstrates the use of this API.

Released under CC0.

cc @matthewwithanm @nathansobo  @hansonw @jinface",1659,True,en,0
15380,1,1,0,Externals,marceloatie,2017-08-30T17:18:58Z,3,14,1,11,"-Only one installation process for all rpm based distributions
-Changed ""yum localinstall"" and ""dnf install"" to just ""rpm -i""
-Included distributions Linux Mint and openSUSE
",177,False,en,0
15378,1,0,7,Internals,as-cii,2017-08-21T08:44:59Z,8,14,2,2,"Fixes #15171

At the cost of a very minimal reduction in layout performance, we gain reliable rendering at all line heights and don't have to worry about characters that extend above/below the footprint of a line.

@ungb @Ben3eeE @50Wliu: this should fix all the reported bugs of cropped text when using certain fonts or line heights. We have tested it on both Linux and macOS, but it would be nice if you could give this a spin too. Please, feel free to add more issues to the ""Fixes"" list in case you can think of other related bug reports. Thanks! ‚ú® ",559,True,en,0
15377,9,2,0,Internals,smashwilson,2017-08-18T19:51:44Z,84,59,6,0,"Rather than synchronously returning a `PathWatcher` from the `watchPath` method and requiring users to await the `getStartPromise()` manually in test cases to avoid flaky tests, return a `Promise` that resolves to the `PathWatcher` after it's started.

I originally did it the other way for efficiency, but it's much harder to reason about, and accessing the start Promise in tests is often challenging. As evidence of this, it's the root cause of the flaky GitHub package test we're seeing in the atom/atom build right now... which _I_ wrote, against my own API üòá 

Along the way, I also fixed a subtle timing bug related to the event timing during the NativeWatcher re-attachment sequence when watchers are split or joined, and introduced a private `printWatchers()` method that's useful as a sanity check on the watchers that are alive at any given moment.

/cc @damieng as the only other current consumer of this API. If you're writing any tests that exercise `atom.project.onDidChangeFiles`, you'll need to await `atom.project.getWatcherPromise(projectPath)` before manipulating the filesystem and expecting the watcher to pick it up. I'd be happy to send PRs to fix any specs up myself if you point me to a repo that needs it.

/cc @nathansobo because this _should_ fix that GitHub package test flake you noticed yesterday.

/cc @maxbrunsfeld because this was his original suggestion and I should have listened to him to begin with :wink:

Remaining work: update the GitHub package to await the result of `watchPath`.",1538,True,en,0
15374,1,4,0,Internals,kuychaco,2017-08-18T12:58:30Z,6,5,2,0,"Fixes #14732

Problem: ""Save As"" for a new file would default to the previously used directory, instead of the open project folder in Atom. 

A regression was introduced where we were assigning the default path to be `undefined` when there was no file path for an item, as in the case of a brand new, unsaved file. When no default path is specified the operating system defaults to displaying the previously used directory.

The fix was to simply not set the default path in `Pane.prototype.saveItemAs` if the item has no path, and let `AtomWindow.prototype.showSaveDialog` set it based on the project paths, which happens later on down the code path.",657,True,en,0
15373,1,0,0,Internals,iolsen,2017-08-17T21:11:44Z,2,9,1,0,"Reverts atom/atom#14701

Damned if I can figure out why this test is failing, but I'll revert this until I do.",112,True,en,0
15372,1,9,0,Internals,as-cii,2017-08-17T23:13:53Z,21,11,1,0,"Fixes #13361
Fixes #15180
Fixes #15257
Fixes #14237
Fixes #14898
Fixes #12652
Fixes #13627

This ensure subpixel anti-aliasing works when `window.devicePixelRatio` is not an integer. Since subpixel anti-aliasing relies on the physical characteristics of the display, Chromium only enables it when rasterizing content that it knows will be aligned to a physical pixel boundary.

@50Wliu @ungb @Ben3eeE: can you give this a spin on Windows, please? We have tested it works correctly with 125% on Windows and by manually calling `setZoomLevel` on macOS in the console, but we'd like to make sure this is a holistic solution to the blurriness problem. Also, if you think this fixes more issues than the ones we have linked above, feel free to add them.

/cc: @atom/maintainers 

üçê'd with @nathansobo.",813,False,en,0
15367,1,2,0,Internals,as-cii,2017-08-17T15:17:30Z,46,19,2,0,"Fixes #14661

This prevents the cursor from unexpectedly changing when approaching the bottom/right corner of the editor with the mouse, even when no scrollbar is being shown.

/cc: @nathansobo @ungb @50Wliu @Ben3eeE ",221,True,en,0
15359,1,2,1,Internals,as-cii,2017-08-17T15:15:39Z,19,2,3,0,"Fixes #15308

In attempting to optimize the performance of `isFoldableAtBufferRow` in 3c87b74, we mistakenly introduced a bug that caused lines that contained a comment but didn't start with one to not be foldable anymore.

With this commit we are restoring the previous behavior, thus only disabling folding for lines that start with a comment (ignoring leading whitespaces).

/cc: @nathansobo @Ben3eeE @ungb ",416,True,en,0
15357,1,1,0,Internals,as-cii,2017-08-17T09:57:55Z,36,0,2,0,"Fixes https://github.com/atom/atom/issues/15247

This was a guard we used to have in `TextEditorPresenter`, prior to the editor rendering layer rewrite:

https://github.com/atom/atom/blob/b580ff8642d4401892c730f6bd2e1b38bd00b3e5/src/text-editor-presenter.coffee#L723-L732

With this pull-request we are adding those guard clauses back, preventing `NaN`, `null` or `undefined` values that were mistakenly passed to the `setScrollTop` or `setScrollLeft` APIs from putting the editor into an inconsistent state.

/cc: @nathansobo @Ben3eeE @ungb ",550,True,en,0
15347,1,0,0,Internals,nathansobo,2017-08-16T23:24:38Z,1,1,1,0,"Fixes #15295

This ensures that we always handle the mouseup even if the mouse is outside of the editor when the button is released, and also fixes a weird interaction with the `atom-terminal-panel` package.",209,True,en,0
15346,1,2,0,Internals,nathansobo,2017-08-16T23:23:51Z,11,11,1,0,"Fixes #15344

In #15314, @as-cii found a workaround to composition events still firing after a default-prevented keydown event. Unfortunately, applying this workaround in the `compositionupdate` handler instead of the `compositionstart` handler meant we still created a composition checkpoint. Then, on the next input event, we detected the presence of this checkpoint and reverted to it, causing the cursor to move as in #15344.

This PR moves the same logic from #15314 to `compositionstart` and avoids creation of a composition checkpoint following a default-prevented keydown event.

/cc @as-cii @ungb @Ben3eeE ",621,True,en,0
15345,1,2,0,Internals,nathansobo,2017-08-16T23:24:10Z,19,2,2,0,"Fixes #15343

If the current `scrollTop`/`scrollLeft` value exceeds the `maxScrollTop` / `maxScrollLeft`, we reassign the values to the max on read. This allows us to behave correctly when the editor has changed in dimensions or the content has changed since the scroll position was previously assigned.

Prior to this PR, we were applying `Math.round` to the scroll positions when assigning them but **not** rounding the values when reassigning them to the max.

In situations where the content height contains fractional pixels, this can lead to a fractional-pixel scroll position when scrolled all the way down/right which causes blurry text. This can also cause unexpected firing of `onDidChangeScrollTop` when the value isn't actually changing due to a decision to notify listeners based on a rounded-up value not matching a fractional clipped value, as was the case in #15343.

/cc @t9md @Ben3eeE ",911,True,en,0
15339,1,0,0,Internals,nathansobo,2017-08-16T18:09:00Z,21,1,2,0,"Fixes #15335

Previously, as soon as we decided to render linesToMeasure, we would clear them out. However, if a second update interleaved with the update that initially requested measurement, it could cause the requested lines to not be present when the measurement phase from the first update occurred. Now, any additional updates will only add to the set of lines that need to be measured until the measurement phase actually happens.

/cc @Ben3eeE @50Wliu @ungb ",470,True,en,0
15338,1,1,0,Internals,nathansobo,2017-08-16T16:45:30Z,23,1,2,0,"Previously, we weren't hiding off-screen lines that we rendered for measurement. That could cause flickering artifacts like the one below when re-triggering measurements, as well as the cursors div being pushed down momentarily.

![](https://user-images.githubusercontent.com/1058982/29333256-63dfdf1e-8203-11e7-9587-bccb69c4377a.gif)

/cc @as-cii @Ben3eeE ",361,True,en,0
15337,2,0,0,Internals,nathansobo,2017-08-16T20:32:23Z,94,54,2,0,"Previously, we weren't invalidating the old longest line measurement when changing the font size. This could mean that the lines div would get stuck at the wrong width.

/cc @as-cii @50Wliu @Ben3eeE In case there are any issues you think this might be related to. I noticed this while testing something else.",310,True,en,0
15329,2,1,0,Internals,ungb,2017-08-19T18:38:22Z,2,2,1,3,"Update autocomplete-plus package on atom/atom.  Seems like test failure were occurring on master.  Creating PR to address test failures before merging.


see:
https://circleci.com/gh/atom/atom/4747?utm_campaign=chatroom-integration&utm_medium=referral&utm_source=slack

Changes that went in for `autocomplete-plus` between 2.35.7 -> 2.35.8:
(https://github.com/atom/autocomplete-plus/compare/58beee8bdfa4281e5900578d0f4f2dc1053cb00f...master)


- [x] Fix test failures

/cc @simurai ",495,True,en,0
15327,1,2,0,Externals,captbaritone,2017-08-17T15:19:11Z,37,6,2,1,"Addresses issue pointed by out @nathansobo in #15277 where keybindings
for unfocusable nodes were being surfaced as accelerator indicators in
context menus.

When you right click in the DOM, your focus goes to the first focusable
ancestor of your click target. This change uses the ancestor that you
are actually focused on when looking for avaliable key bindings rather
than using the event target directly. This ensures that any surfaced key
bindings are actually reachable.",484,False,en,0
15324,1,1,0,Internals,nathansobo,2017-08-16T01:29:37Z,30,21,2,0,"Fixes #15239

This PR fixes a logic error in the following line of code:

```js
const scrollPositionChanged =
  this.setScrollLeft(this.getScrollLeft() + deltaX) ||
  this.setScrollTop(this.getScrollTop() + deltaY)
```

I didn't account for the ""short-circuit"" behavior of the or statement. With this code, we first attempt to scroll horizontally by `deltaX`, and if we scroll even a little, then we never attempt to scroll vertically. When I tested this originally, I thought we were getting the ""one axis at a time"" behavior automatically somehow, but really I was just seeing this bug. üôà 

This PR restores the behavior prior to 1.19 of scrolling only on one axis at a time, whichever has the greater delta.",725,True,en,0
15322,2,1,0,Internals,nathansobo,2017-08-16T00:13:23Z,11,4,2,0,"Following up on #15317, we need to move the placeholder text inside the lines div so that it aligns with the cursor in the event that themes apply padding or margin to the lines div.

/cc @as-cii @Ben3eeE ",207,True,en,0
15317,1,4,1,Internals,as-cii,2017-08-15T17:38:55Z,87,60,2,0,"Fixes #15241.

This will ensure that applying any style that changes the location of the lines container will also correctly position the cursors.

@Ben3eeE @ungb: can you help me test this? I can't reproduce the issue anymore by using the `no-caffeine-syntax` theme or the personal stylesheet provided in https://github.com/atom/atom/issues/15241#issuecomment-322509336, but it'd be nice if you could give this a spin and ensure we didn't break anything else accidentally.

/cc: @nathansobo ",498,True,en,0
15314,1,4,0,Internals,as-cii,2017-08-15T16:13:41Z,10,5,1,0,"Fixes https://github.com/atom/atom/issues/15189.

This is a continuation of #15266. In that pull-request we managed to prevent IME previews from being displayed in the editor when the originating `keydown` event was default-prevented. However, it was still possible for IME input to make it through the previous workarounds, thus triggering the `textInput` event and showing unwanted text.

Pressing another key that would complete the in-progress IME input would, in fact, first replace `this.lastKeydown` and then trigger the `textInput` event. In the handling of that event we would detect `this.lastKeydown` as ""non-default-prevented"" and therefore mistakenly insert the IME text.

With this pull-request we are adopting a different strategy to mitigate the issue. When receiving the wrong `compositionupdate` event we will first disable the hidden input and then re-enable it on the next tick. Disabling the input causes the in-progress IME input to be aborted and the browser to never fire `textInput` nor `compositionupdate` events anymore after that.

The only downside of this approach is that the hidden input also loses focus, but we transfer it back to it as soon as the next tick of the event loop is served and the input has been re-enabled.

@ungb @Ben3eeE: can you give this a spin and see if it fixes the problem? Thanks.

/cc: @nathansobo ",1369,True,en,0
15313,1,1,0,Internals,as-cii,2017-08-15T15:01:23Z,25,3,2,0,"Fixes https://github.com/atom/atom/issues/15311.

When changing the editor styles, we force the component to remeasure character dimensions. If they change, each line's height could change too, causing the current scroll top position to not match the viewport the user was observing. Thus, when detecting a line height change, we try to show users the area of the screen they were looking prior to tweaking the font size.

In trying to maintain the aforementioned logical position, however, we were mistakenly scheduling a new update before actually finishing the current one. This was problematic because if the first update detected that the longest screen line changed and such line was off-screen, it would try to render it. Before having the chance to measure it, though, the new update would kick in and delete the new longest screen line node, because it assumed it had already been measured. Finally, when
`measureContentDuringUpdateSync` fired, it would notice that the longest screen line node did not exist and throw an exception as a result.

This pull-request changes the `updateSync` method to set the `updateScheduled` flag only before returning control to the caller, as opposed to doing so at the beginning. This prevents calls to `scheduleUpdate` made in `updateSync` from scheduling new unwanted updates.

@Ben3eeE @ungb: can you confirm this fixes the aforementioned issue? Thanks!

/cc: @nathansobo ",1431,True,en,0
15310,1,1,0,Internals,as-cii,2017-08-15T14:57:51Z,24,25,3,0,"Fixes #15307.

This was an oversight during the text editor rendering layer rewrite in #13880. This pull-request fixes it and also changes tests to ensure this behavior doesn't regress in the future.

/cc: @Ben3eeE @ungb for testing, and @nathansobo for üëÄ.",263,True,en,0
15302,1,2,0,Internals,nathansobo,2017-08-14T21:34:45Z,19,4,2,0,"Fixes https://github.com/atom/notifications/issues/167
Fixes https://github.com/atom/atom/issues/15227

This avoids mysterious timing issues in which the editor gets a `focus` event in a state where `isVisible` returns false. If we always render the hidden input, we can always focus it. We still don't quite understand why things get into this state, but with this change we don't really need to.
",402,False,en,0
15299,1,2,0,Internals,as-cii,2017-08-14T14:59:28Z,45,0,2,0,"Fixes #15282.

Previously, clicking on a block decoration to interact with it would cause the editor to scroll to the line next to it. This is inconvenient, especially if the decoration was designed to be interactive and contained buttons or links. If the decoration was close to the bottom of the screen, clicking on a button inside of it would make the editor scroll down and abort the click.

This behavior regressed during the editor rendering layer rewrite and with this pull-request we are restoring the original behavior by simply ignoring clicks that land on block decorations.

@ungb @Ben3eeE: can you help me test this out? I think it should work as expected, but it'd be nice to make sure the behavior looks consistent.

/cc: @nathansobo @lgeiger ",766,True,en,0
15296,2,1,0,Internals,as-cii,2017-08-14T15:04:05Z,61,16,2,0,"Fixes #15238.

I think this slipped through during the refactoring performed in dc32018. With this pull-request we are fixing the issue and adding a new main process test to exercise this behavior and ensure we don't regress in the future.

/cc: @Ben3eeE @ungb for testing this, and @nathansobo @maxbrunsfeld for üëÄ. ",323,True,en,1
15285,1,1,0,Internals,nathansobo,2017-08-13T21:09:09Z,1,1,1,0,"Composition checkpoints are actually *numbers*, and the first checkpoint starts at `0`, which was previously being detected as falsy. The fix is to null check the composition checkpoint explicitly.

/cc @Ben3eeE @as-cii ",222,True,en,0
15277,1,5,0,Externals,captbaritone,2017-08-15T16:40:36Z,108,16,4,2,"Electron allows us to pass an ""accelerator"" property for each menu item, which
is renders to the right of the menu item. We were already adding these for the
application level menus.

This pull request adds the accelerator property to regular context menu items,
which should make it easier for people to discover/recall key mappings for
actions which they usually take via a context menu.

### Before

<img width=""306"" alt=""screen shot 2017-08-12 at 2 56 58 pm"" src=""https://user-images.githubusercontent.com/162735/29244516-bb975d46-7f6e-11e7-9488-745bd10e9130.png"">

### After

<img width=""304"" alt=""screen shot 2017-08-12 at 2 56 36 pm"" src=""https://user-images.githubusercontent.com/162735/29244517-be496796-7f6e-11e7-8883-edc2667c995a.png"">


",766,False,en,0
15276,1,1,0,Externals,captbaritone,2017-08-17T15:52:57Z,0,21,1,4,"Searching the code base and the GitHub repository shows no usage or
documentation for these two methods.

From what I can surmise, the call to `convertLegacyItemsBySelector` was removed
in https://github.com/atom/atom/commit/cc4ee926993edc479a1624b269d0c159608f1399
by @thomasjo but these methods just weren't cleaned up.",326,False,en,0
15275,1,5,0,Internals,as-cii,2017-08-12T19:30:41Z,6,4,1,0,"Fixes https://github.com/atom/atom/issues/15166.

This restores scrollbars to adopt the styling they had prior to #13880, as you can see in the below CSS excerpt from Atom 1.18.0.

https://github.com/atom/atom/blob/783cda8642e42e842a7aac761f267e151f3db324/static/text-editor-light.less#L170-L198

@nathansobo: do you recall the reason why changed the styling to `20px`? I couldn't find an explanation on the commit that introduced them, so I went ahead and created this pull-request.

Also, /cc: @ungb and @Ben3eeE for help on testing this and making sure it restores the original behavior.",598,True,en,0
15273,1,2,0,Internals,as-cii,2017-08-12T19:46:24Z,39,1,2,0,"Fixes https://github.com/atom/atom/issues/15111.

Instead, if the measured line height equals 0, default it to 1 so that the editor component doesn't start computing `NaN` or `Infinity` values due to e.g. dividing by 0. The result will still be illegible, but we won't throw weird error messages like `RangeError: Invalid array length`, as in the referenced issue.

We should probably consider sanitizing line heights smaller than a certain threshold, but that's non trivial because line height is expressed as a multiplier of the font size. Also, users may style the `line-height` property via CSS, which may still throw errors when using small values.

@Ben3eeE @ungb: can you help me confirm this fixes the issue above? I can't reproduce it anymore, but it might be good to be 100% sure.

/cc: @nathansobo",816,True,en,0
15270,1,2,0,Internals,as-cii,2017-08-12T19:22:00Z,59,38,2,0,"Fixes https://github.com/atom/atom/issues/15168.

Calling `pixelPositionForScreenPosition` was sometimes throwing an error indicating that the requested position was not rendered and that, as such, could not be measured.

This was caused by trying to measure a line that was visible at the moment of the call while also having a pending autoscroll request that would cause that line to go off-screen. Due to how the code was structured, we would mistakenly detect that line as visible, autoscroll to a different location, re-render a different region of the buffer and then try to measure the now invisible line.

This commit fixes this issue by restructuring and simplifying the logic for rendering invisible lines in order to measure them. Now, every line for which a measurement has been requested is stored in a `linesToMeasure` map. During the first phase of the update process (after honoring autoscroll requests), we detect which of these lines are currently visible and if some of them are not, we store them into the `extraRenderedScreenLines` map, which is then used to render lines that are invisible but need measurement.

@Ben3eeE @ungb: I am unable to reproduce the issue after this pull-request. Can you help me ensure this fixes all the reports we've got for this issue so far? They seem to be generated by slightly different reproduction steps, although I think they can all be traced back to the root cause described above.

/cc: @nathansobo for üëÄ 
",1481,True,en,0
15266,1,0,0,Internals,nathansobo,2017-08-12T21:23:34Z,8,2,1,0,"Fixes #15189

It seems like Chrome 56 has a regression that causes `compositionstart` and `compositionupdate` events to still be fired even if `preventDefault` is called on the original `keydown` event. This PR introduces a workaround that suppresses handling of these events if `defaultPrevented` is true on the most recent `keydown` event.

/cc @Ben3eeE @ungb ",366,True,en,0
15265,4,7,0,Internals,nathansobo,2017-08-12T19:26:01Z,442,193,2,0,"Fixes #14911

The `compositionupdate` event is associated with a `data` property that is supposed to contain the full in-progress state of the composed string. Due to a [bug in Chrome](https://bugs.chromium.org/p/chromium/issues/detail?id=677050) that has been resolved as of Electron 1.7, that field only contains the most recently typed character in Electron 1.6.

This PR attempts to work around this on Chrome 56 by reading the contents of the hidden input field directly rather than relying on the incorrect `data` property. Since `compositionupdate` events seem to be fired prior to the contents of the input field changing, I perform the read on `process.nextTick` after the browser has a chance to update the field.

One extra wrinkle is I now *clear* the input field on `compositionstart` events so that previous input doesn't pollute the previewed composition. The only keystrokes that could potentially pollute the preview are spaces, since we use `preventDefault` in our `textInput` event handler to prevent every other character from actually being inserted. If we `preventDefault` on space however, it causes the browser's default behavior of scrolling on space, so we have to let that one through. It's okay though, because we're clearing it out when the composition starts.

/cc @ungb @Ben3eeE ",1318,True,en,0
15264,1,1,0,Externals,captbaritone,2017-08-12T20:04:35Z,20,10,2,0,Fixes #15157,12,False,en,0
15244,1,0,0,Internals,nathansobo,2017-08-11T16:48:44Z,4,0,1,0,"Several packages were relying on a raw property rather than the getter method. This isn't really officially supported, but may as well keep them working.

Fixes https://github.com/callum-ramage/ctrl-dir-scroll/issues/28",221,True,en,0
15240,1,8,0,Internals,as-cii,2017-08-11T09:26:16Z,82,27,2,0,"Fixes https://github.com/atom/atom/issues/15185.

Etch's reconciliation routine causes elements to be sometimes re-ordered. In order to move an element, however, Etch needs to first detach it from the DOM and then re-append it at the right location.

This behavior is unacceptable for highlight decorations because it could re-start CSS animations on a certain highlight decoration when a completely different one is added or removed.

Even though we are still interested in restructuring etch's reconciliation logic to prevent unwanted re-orderings, with this commit we are switching to a custom routine to create/update/remove highlight decorations that prevents unnecessary moves and, as a result, fixes the undesired behavior described above.

/cc: @nathansobo @t9md ",779,True,en,0
15234,1,0,0,Internals,jasonrudolph,2017-08-10T15:41:54Z,2,0,1,0,"We've been tweaking/debugging the build process on the 1.20-releases branch while seeking a resolution for https://github.com/atom/atom/issues/15194. This PR brings the master branch up to date with those changes from the 1.20-releases branch.

/fyi @damieng @smashwilson ",274,True,en,0
15228,1,2,0,Internals,maxbrunsfeld,2017-08-17T18:09:37Z,1,1,1,7,"Refs https://github.com/atom/atom/issues/15225

@garretwilson This fixes *a* bug, which may be the cause of the problem you were seeing with `atom-beautify`, but I'm not yet positive.

I'm unfortunately going to be away from work until Monday evening, so I wanted to get this fix to you before I leave so you would have a chance to test it.",344,True,en,0
15224,3,0,0,Externals,50Wliu,2017-08-10T18:15:51Z,17,0,2,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

A very simple one-liner.  The `m` flag wasn't being added when doing a regex replacement on files not opened in Atom.  For those who aren't aware, `m` changes the meaning of `^` and `$` to mean ""begin/end of line"", rather than ""begin/end of string"" (which can be generalized to ""begin/end of file"" in Atom's case).  The behavior that `m` introduces is consistent with what most developers view `^` and `$` as, and is also what find-and-replace visually shows in the results view.  Therefore, this change fixes the discrepancy between the visual, expected result and the actual result when the regex contains a `^` or `$` and the matched string is not the first/last line in the file.

text-buffer already adds the `m` flag when replacing files inside of Atom.
https://github.com/atom/text-buffer/blob/bb9134fc93713273dcccafd9e917e00f1f2f58cc/src/text-buffer.coffee#L1326

### Alternate Designs

None.

### Why Should This Be In Core?

`atom.workspace.replace()` is a public API.

### Benefits

When searching with a regex that contains a `^` or `$`, replacements should now work as expected.

### Possible Drawbacks

There is one drawback: there is no way to return to the non-multiline behavior of `^` and `$` once the flag is set.  JavaScript does not yet support `\A` and `\Z`.

### Applicable Issues

Refs atom/find-and-replace#622",1653,True,en,0
15214,2,1,0,Externals,50Wliu,2017-08-09T18:00:43Z,7,7,2,0,Hopefully specs don't fail~,27,False,en,0
15208,8,3,4,Internals,smashwilson,2017-08-09T20:45:13Z,19,7,1,0,Let's try using a build matrix to split installer creation into a different job than the linting and tests. Hopefully this will help us sneak builds in under the AppVeyor time cutoff.,183,False,en,0
15198,1,0,0,Externals,mrnonz,2017-08-09T13:14:47Z,1,1,1,0,Update document for recommend version to major update (v1.X.Y),62,False,en,0
15191,3,4,0,Internals,smashwilson,2017-08-08T23:43:15Z,2,2,2,0,"Doing this in a PR because it broke snapshotting, likely because 0.4.1 changes the way that dependencies are de-duped.",118,False,en,0
15186,1,1,0,Externals,Ben3eeE,2017-08-08T20:43:25Z,1,1,1,1,Includes the changes in https://github.com/atom/atom-keymap/pull/217,68,False,en,0
15183,4,4,1,Internals,jasonrudolph,2017-08-07T17:24:14Z,57,6,2,0,"Fixes atom/tabs#461
Fixes atom/tabs#52

---

On Linux, when the user performs a middle-button mouse click, Chromium fires both a `mousedown` event *and* a `paste` event. This PR teaches the `TextEditorComponent` to ignore the `paste` event.

When the user performs a middle-mouse click on a tab, we first get the `mousedown` event. In response to that event, we [close the tab and attempt to prevent Chromium's default processing for the event](https://github.com/atom/tabs/blob/ce1d92e0abb669155caa178bb71166b9f16f329a/lib/tab-bar-view.coffee#L416-L418). This prevents Chromium's default processing for the *`mousedown`* event, but then Chromium also fires a *`paste`* event, and that event pastes the clipboard's current content into the newly-focused text editor. ü§¶

#14987 removed some of the middle-button mouse click handling related to pasting on Linux. This PR restores that logic and the related tests. (See `TextEditorComponent::didMouseDownOnContent(event)`.) With that change in place, since Atom already has its own logic for handling pasting, we shouldn't need to handle browser `paste` events. By ignoring the browser `paste` events on Linux, this PR fixes atom/tabs#461.

### TODO

- [x] Fix atom/tabs#461
- [x] Add test for `TextEditorComponent::didPaste(event)`
- [x] Address TODO in `TextEditorComponent::didPaste(event)` (https://github.com/atom/atom/pull/15183#discussion_r131672090)

### Test plan

- [x] Test on Ubuntu:
  - [x] Verify fix for https://github.com/atom/tabs/issues/461
  - [x] Verify the previous fix for https://github.com/atom/atom/issues/8648 is still intact
- [x] Test on macOS: Verify that the ctrl-click behavior fixed in https://github.com/atom/atom/pull/14987 is still intact
",1747,False,en,0
15179,1,1,0,Externals,Kreozot,2017-08-07T13:20:52Z,2,2,1,0,"### Description of the Change

Fixed links in keymap.cson comments. Old links is not actual.

### Benefits

More cosy keymap docs.

### Possible Drawbacks

None

### Applicable Issues

#14779",205,True,en,0
15170,1,0,0,Internals,lee-dohm,2017-08-04T21:57:47Z,11,0,1,0,"Add document to point people to our various support resources.

[SUPPORT doc documentation](https://help.github.com/articles/adding-support-resources-to-your-project/)",169,True,en,0
15169,1,0,0,Internals,jasonrudolph,2017-08-05T02:28:07Z,21,21,1,0,"Fixes #15158

---

As shown in #15158, [these assertions in `spec/text-editor-component-spec.js`](https://github.com/atom/atom/blob/29810c6cd1924e08126bd18d759b80abfd1c199c/spec/text-editor-component-spec.js#L1462-L1463) occasionally fail on AppVeyor:

```
TextEditorComponent
  highlight decorations
    it can flash highlight decorations
      Expected false to be true.
        at it (C:\projects\atom\spec\text-editor-component-spec.js:1462:53)
      Expected false to be true.
        at it (C:\projects\atom\spec\text-editor-component-spec.js:1463:53)
```

I haven't been able to reproduce the failure locally, but after discussion with @nathansobo, we have a hunch regarding the source of the intermittent failures. It seems that the flash for class 'c' sometimes ends before the flash for class 'd' happens:

```js
// Flash existing highlight
decoration.flash('c', 100)
await component.getNextUpdatePromise()
expect(highlights[0].classList.contains('c')).toBe(true)
expect(highlights[1].classList.contains('c')).toBe(true)

// Add second flash class
decoration.flash('d', 100)
await component.getNextUpdatePromise()
expect(highlights[0].classList.contains('c')).toBe(true) // <== occasionally fails
expect(highlights[1].classList.contains('c')).toBe(true) // <== occasionally fails
expect(highlights[0].classList.contains('d')).toBe(true)
expect(highlights[1].classList.contains('d')).toBe(true)
```


Prior to this PR, we only flashed class 'c' for 100ms, and perhaps that isn't always enough time. In this PR, we increase the flash duration from 100ms to 1000ms, greatly increasing the likelihood that we're allowing enough time for the flash on class 'd' to take place before the flash for class 'c' ends. (Even 1000ms doesn't _guarantee_ that we're allowing enough time, but we don't have a better solution available at the moment.)

This PR also extracts the involved assertions into their own test, so that 1) we can more clearly explain the scenario that these assertions are testing and 2) it will be easier to isolate any future intermittent test failures related to these assertions.
",2140,True,en,0
15163,7,4,0,Externals,wbinnssmith,2017-09-01T00:09:02Z,84,5,5,27,"This implements automatic focus management for modal panels using the excellent focus-trap module.

Upon being shown, modals will have their first tabbable element automatically focused, and shifting focus with the tab key (or more correctly the core:focus-next command) will be limited to the contents of the modal. If the modal does not have any tabbable elements, focus() will be sent to the panel's root element (if it implements it).

I'm happy to update this to *always* calls focus on the panel's root element, but then modal implementers would need to handle that and focus things on their own. I'd argue the tabbable element behavior is more accessible though :)

This has the effect of not automatically closing most of Atom's own modals whenever the tab key is pressed, which was an odd nonstandard behavior, IMO.

This also automates returning focus to the element that had focus before the modal was shown, something up until now had to be implemented in every modal in Atom.

This likely breaks a few contracts for existing Atom packages that create modals, but I've found this doesn't conflict behaviorally with well-behaved modals like the command palette which implement their own focus management (which can be removed if this lands).

Released under CC0.",1273,True,en,0
15154,2,0,3,Internals,jasonrudolph,2017-08-04T00:19:08Z,3,8,1,0,"Fixes #15122

---

As shown in #15122, [these assertions in `spec/text-editor-component-spec.js`](https://github.com/atom/atom/blob/7d6bd2a6b19be004254865d163d74bd5e849be2f/spec/text-editor-component-spec.js#L414-L415) occasionally fail on AppVeyor:

```
TextEditorComponent
  rendering
    it blinks cursors when the editor is focused and the cursors are not moving
      Expected '0' to be '1'.
        at it (C:\projects\atom\spec\text-editor-component-spec.js:414:49)
      Expected '0' to be '1'.
        at it (C:\projects\atom\spec\text-editor-component-spec.js:415:49)
```

I haven't been able to reproduce the failure locally, but I have a hunch regarding the source of the intermittent failures. I think it might be a case of ""overspecification"" in the test's assertions. The test expects the blinking cursor to *start* in the visible state, and then transition to the invisible state. When we see the failure above, I suspect that the cursor has already transitioned from the visible state to the invisible state by the time the assertions run.

Since the test aims to verify that the cursor blinks [1], it seems like we should focus on the blinking, and not worry about the *initial* state of the cursor. This PR removes the assertions that verify the initial state of the cursor, and instead asserts that the cursor toggles between the visible and the invisible state.

@nathansobo: Given your familiarly with this test, would you mind reviewing this change? I *think* this change has a good chance of resolving the intermittent failures while still maintaining the spirit of the test. What do you think?

---

[1] eb22b58756add00ae8f2a00d123e52e8ae2f6c69 introduced this test as a smoke test for cursor blinking
",1751,True,en,0
15148,3,4,0,Internals,nathansobo,2017-08-03T19:27:44Z,16,15,3,0,"@as-cii @jasonrudolph This cleans up the test noise we were seeing on our package.

In #9268, @thomasjo set the `ELECTRON_ENABLE_LOGGING` environment variable to true. He states in that PR that this was necessary to enable `console.log` to go to `stdout`, and I didn't take the time to go back and test that ancient version of Electron to confirm this to be true, but I'll take him at his word.

Now, however, `console.log` seems to work irrespective of this environment variable. Furthermore setting this environment variable has the unfortunate side effect of causing lots of fairly low level warning messages from within Chromium's internals to spam the console when Atom is run headless. In this PR, I remove the lines from `atom.sh` and `atom.cmd` that set this variable. It's still possible to automatically assign the variable via the `--enable-electron-logging` flag.

@damieng would you mind checking my changes in `cmd.sh` and maybe @ungb could you test it out? I just want to make sure I didn't break the script.",1029,True,en,0
15147,1,0,0,Internals,nathansobo,2017-08-03T14:11:04Z,26,4,3,0,"In the previous implementation of text editor rendering, [we were assigning an inline height on decoration elements](https://github.com/atom/atom/blob/b580ff8642d4401892c730f6bd2e1b38bd00b3e5/src/custom-gutter-component.coffee#L104). The rewrite in #13880 accidentally dropped this behavior, which was causing empty decoration elements to be zero height and not display a background in some cases. We also drop the `width: min-content` style on the `.line-number` class, which is being used by packages to style decorations in some cases. This width setting was needed at one phase of development but doesn't appear to be needed any longer.

Here is an example with `linter-ui-default` (configured with gutter decorations on the right), `nucleus-dark` UI theme, and `dracula` syntax theme.

Before this PR:
![screen shot 2017-08-02 at 8 37 33 pm](https://user-images.githubusercontent.com/1789/28903512-8e1e0db4-77c2-11e7-85b9-16ba71249b1a.png)

After this PR:
![screen shot 2017-08-02 at 8 38 22 pm](https://user-images.githubusercontent.com/1789/28903519-934a037e-77c2-11e7-8c07-3046de154d86.png)

This needs to be hot-fixed to 1.19 before we roll the railcars.

/cc @jasonrudolph ",1195,True,en,0
15145,1,0,0,Internals,jasonrudolph,2017-08-02T22:30:45Z,1,1,1,0,"Upgrade tree-view to hopefully ü§û fix the intermittent CI failures described in https://github.com/atom/tree-view/issues/1155.

xref: https://github.com/atom/tree-view/pull/1156",181,True,en,0
15138,3,4,0,Externals,alanyee,2017-08-02T16:57:49Z,4,4,1,1,"
### Description of the Change

-Added Homebrew install instructions for macOS
-Made explicit HTTPS calls
-Minor url cleanup

### Alternate Designs

N/A

### Why Should This Be In Core?

Most macOS developers use Homebrew, so having the instructions on the README would be helpful. HTTPS calls make web browsing safer.

### Benefits

The benefits are the same reason why they should be in core, and that there should be no drawbacks for including them in the README.

### Possible Drawbacks

N/A

### Applicable Issues

N/A",548,False,en,0
15137,1,0,0,Internals,BinaryMuse,2017-08-01T17:40:21Z,1,1,1,0,"### [github](https://github.com/atom/github)

v0.3.8...v0.3.9-0

* [atom/github#1034 - Always use URIs to manage Git/GitHub dock items](https://github.com/atom/github/pull/1034)
* [atom/github#1000 - Fixes PR label legibility](https://github.com/atom/github/pull/1000)
* [atom/github#1057 - Collect an --exec-path from a native git installation, if any](https://github.com/atom/github/pull/1057)
* [atom/github#1058 - Copy the CircleCI template, but pull from my branch](https://github.com/atom/github/pull/1058)
* [atom/github#1060 - Add CircleCI README badge](https://github.com/atom/github/pull/1060)
* [atom/github#1065 - Pass credentials correctly when username is provided in the git URL](https://github.com/atom/github/pull/1065)
* [atom/github#1068 - Move assertions in GitPromptServer tests out of the server process](https://github.com/atom/github/pull/1068)
* [atom/github#1016 - [WIP] Use Atom opener to display file diff](https://github.com/atom/github/pull/1016)",987,True,en,0
15135,1,1,0,Internals,jasonrudolph,2017-08-01T17:39:53Z,1,0,1,0,"Fixes #15062

## Demo

### With linter-ui gutter highlights to right of line numbers (default)

#### 1.18

![1 18-right](https://user-images.githubusercontent.com/2988/28797560-c0e23860-760f-11e7-9ced-0bd1f75b8828.png)

#### 1.19 before this PR

![1 19-before-right](https://user-images.githubusercontent.com/2988/28797561-c0e455e6-760f-11e7-8cb6-7ff053f95a77.png)

#### 1.19 after this PR

![1 19-after-right](https://user-images.githubusercontent.com/2988/28797558-c0dfa74e-760f-11e7-88f0-7d31b812a931.png)

### With linter-ui gutter highlights to left of line numbers

#### 1.18

![1 18](https://user-images.githubusercontent.com/2988/28797559-c0e19770-760f-11e7-8a06-056cb6afdc09.png)

#### 1.19 before this PR

![1 19-before](https://user-images.githubusercontent.com/2988/28797562-c0e48264-760f-11e7-95ad-b0754bbc42b8.png)

#### 1.19 after this PR

![1 19-after](https://user-images.githubusercontent.com/2988/28797563-c0e46784-760f-11e7-9215-c7227dc200f5.png)

---

xref #13880, which we believe to be the source of the regression that we're fixing in this PR",1100,True,en,0
15124,25,2,0,Internals,smashwilson,2017-08-03T10:54:55Z,71,16,6,4,"Use the JUnit XML reporter from [jasmine-reporters](https://www.npmjs.com/package/jasmine-reporters) to produce test reports on CI builds on CircleCI and AppVeyor. This should expose test metadata that we can use to:

* More quickly diagnose failures
* Produce metadata that we can consume to identify flakes over time",321,True,en,2
15121,4,1,0,Internals,maxbrunsfeld,2017-08-01T16:55:28Z,1,1,1,3,"Depends on https://github.com/atom/text-buffer/issues/241
Depends on https://github.com/atom/superstring/pull/19
Depends on https://github.com/atom/superstring/pull/21
Refs https://github.com/atom/text-buffer/issues/240

/cc @hansonw Could you give this is a try with some remote files when you get a chance?",313,False,en,0
15108,3,2,0,Internals,nathansobo,2017-07-31T19:35:27Z,1,3,1,4,"Prior to this PR, we were mocking `Date.now` once in the spec helper, then blowing up with a redundant mock error when `jasmine.useMockClock` is called.

Since this was newly introduced, let's only set it up when clock mocking is specifically requested to minimize breakage. We really need to deprecate the global spec helper someday. It's bad news.

This needs to be hot-fixed to 1.19.

/cc @hansonw",406,True,en,0
15082,1,1,0,Externals,t9md,2017-07-24T20:56:21Z,4,4,1,0,"`Array.prototype.map` call callback with `callback(item, index, this)`.
So using `bind` is not appropriate for the function which take 2nd arg.

cc @maxbrunsfeld 

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

I found this via code-reading. Not sure there is already reported issue.
Calling `pane.destroyItems()` don't `@promptToSaveItem` for items with index greater than 0.
Since map pass index, index goes to `force` arg of `destroyItems`. `force` become true unless index `0`.

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

No

<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

Bug
<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

Bug free.
<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

No.
<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

<!-- Enter any applicable Issues here -->
",1683,False,en,0
15081,1,13,7,Externals,mortenpi,2017-12-18T00:52:21Z,9,3,1,146,"**What problems does this solve?** Let's assume I have two `$ATOM_HOME` directories `A/` and `B/`, with different packages, themes etc. Currently, if I start Atom in the following way

```bash
$ ATOM_HOME=A/ atom
$ ATOM_HOME=B/ atom
```
the second one opens up a new Atom window, but uses packages etc. from `A/`, which feels counter-intuitive. Instead I propose that instances would be per `$ATOM_HOME`. On Linux this can be achieved by having sockets be per-`$ATOM_HOME` it seems.

This would be helpful for IDEs (e.g. [Juno](http://junolab.org/)) which load a lot of IDE-specific features and UI components. With this PR you could simply have a `juno` ""executable"" that wraps around an existing Atom installation, but does not interfere with normal Atom usage:

```sh
#!/bin/sh
export ATOM_HOME=$HOME/.juno
exec atom $@
```

**How does it solve it?** This PR puts the socket into `$ATOM_HOME`, instead of `os.tmpdir()`.

I've been running `1.20.0-dev` with this change for a week or so now and it has been working fine so far. But I'm not sure whether this particular PR is the best solution.

Also, it is Linux-specifc (and macOS?). I can't test this on macOS, nor provide a solution for Windows. If someone could provide a more complete solution I'd be happy if this PR would be superseded.

**Drawbacks/alternatives.** I don't see this affecting normal Atom usage in any way.

In case sockets have to be under `os.tmpdir()` (due to potential filesystem permission issues or something like that?), then an alternative would be to have a `abspath(process.env.ATOM_HOME)`-dependent piece in the socket name, where `abspath` would resolve any relative paths etc.",1688,True,en,0
15059,1,0,0,Internals,damieng,2017-07-19T19:52:32Z,35,76,3,0,,0,False,en,0
15054,1,0,0,Internals,damieng,2017-07-19T02:41:05Z,6,0,1,0,"e.g.

```
Installing script dependencies         
Installing apm                         
apm  1.18.2                            
npm  3.10.10                           
node 6.9.5 x64                         
python 2.7.12                          
git 2.10.2.windows.1                   
visual studio 2015                     
Installing modules done                
Installing one-dark-syntax@1.7.1 done  
```",426,True,en,0
15052,2,1,0,Internals,nathansobo,2017-07-19T02:27:09Z,1,1,1,0,"For some reason, `npm` isn't flattening all of `apm`'s indirect dependencies in its `node_modules` folder, violating an assumption we're making about the path of `node-gyp`, which is a dependency of the bundled `npm`. To work around this, we're adding an explicit dependency on `node-gyp` so we always know where it will be located.",332,False,en,0
15051,1,1,0,Internals,maxbrunsfeld,2017-07-18T23:08:58Z,12,3,2,0,"Fixes https://github.com/atom/atom/issues/15042
Fixes https://github.com/atom/atom/issues/15002
Fixes https://github.com/atom/atom/issues/15031
Fixes https://github.com/atom/atom/issues/14834
Fixes https://github.com/atom/atom/issues/14794
Fixes https://github.com/atom/atom/issues/14980

/cc @iolsen @ungb This needs to go out in a 1.19 hotfix asap.

üçê 'd with @nathansobo ",386,False,en,0
15043,1,0,0,Internals,damieng,2017-07-17T18:36:42Z,1,0,1,0,Merged the access keys in https://github.com/atom/atom/commit/7c681905bd81948a09b54fc6013a917852148f12 but forgot that accelerators in buttons were opt-in via the `normalizeAccessKeys` option in the intervening time.,216,False,en,0
15041,1,0,1,Internals,jasonrudolph,2017-07-17T15:34:47Z,4,4,4,0,"Fixes #15037.

---

To overcome issues with npm 5.2, https://github.com/atom/atom/pull/15004 and https://github.com/atom/atom/pull/15014 configured the build process to use npm 5.1. That change resolved the issues we were seeing with the AppVeyor build [A], but it unintentionally introduced a problem for anyone attempting to build Atom with Node 8.

While the [CI builds use Node 6.9.4](https://github.com/atom/atom/blob/3d02234cbdf701a851d9b1239d67dcdbc8808146/circle.yml#L19-L20), we aim to support [Node 6 or newer](https://github.com/atom/atom/blob/d61967bff479acbdc6216dc9618879ebe8d23910/docs/build-instructions/macOS.md#requirements). However, pinning npm to 5.1 causes problems when trying to build with Node 8 [B].

To resolve the original problems that we were addressing in https://github.com/atom/atom/pull/15004 and https://github.com/atom/atom/pull/15014, _and_ to restore support for building Atom with Node 8, this PR updates the build to use npm 5.3. The CI builds still use Node 6.9.4, but you should be able to build locally with Node 6 or newer once this PR is merged.

---

[A] Example AppVeyor build failure prior to pinning npm version: https://ci.appveyor.com/project/Atom/atom/build/7267/job/3narmqtij0sgb28f

[B] Example Circle CI build failure using npm 5.1 and Node 8.1.4: https://circleci.com/gh/atom/atom/4364

",1359,True,en,0
15023,1,0,0,Internals,jasonrudolph,2017-07-14T14:43:47Z,1,1,1,0,"This PR upgrades image-view to incorporate the changes in https://github.com/atom/image-view/pull/136, which fix the issue described in https://github.com/atom/image-view/issues/132. With this change, we restore the ability to see dimensions and file size for images shown in a pending pane item (e.g., pending pane items opened when browsing images via the tree view).",369,False,en,0
15014,1,0,0,Internals,damieng,2017-07-13T19:31:50Z,4,4,4,0,,0,False,en,0
15013,2,3,0,Internals,as-cii,2017-07-13T16:59:23Z,35,0,2,0,"Fixes #15005.

Previously, when `setModel` was called, we forgot to update the pointer to the component in the newly supplied editor. This was causing the element to not update in response to model updates but only as a result of focus or visibility changes. We suspect this regressed during the rewrite of the editor rendering layer.

With this pull request we will now correctly swap the element's underlying editor by updating the component pointer on the newly supplied editor. Also, if the element was already attached to another editor, we will null out the component reference on it, because one instance of `TextEditorElement` can only represent one instance of `TextEditor`.

/cc: @nathansobo @tjfryan ",717,True,en,0
15011,2,1,0,Externals,mehcode,2017-07-14T05:29:44Z,3,3,2,0,Fixes #15010 ,13,False,en,0
15008,17,0,0,Externals,50Wliu,2017-07-14T16:47:52Z,16,15,2,1,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

* language-javascript
  * JSDoc overhaul
  * Add a return snippet
  * Recognize `stringify` as `support.function.js`
  * Resolve incompatibilities with Linguist
* language-css
  * Add `fr` unit
  * Add semicolon to `import` snippet
* language-sass
  * Inherit number matching from language-css
  * Adjust variable and map scopes
  * Tokenize placeholders in at-rules
* language-less
  * Inherit number matching from language-css
  * Add punctuation scopes to variables
  * Stop matching URLs at first closing parenthesis
  * Resolve incompatibilities with Linguist
* language-clojure
  * Don't tokenize trailing whitespace as invalid
  * Don't tokenize escaped semicolons as comments
  * Add support for `.joke` and `.joker` files
* language-coffee-script
  * Resolve incompatibilities with Linguist
  * Add support for escaped JavaScript
* language-yaml
  * Resolve incompatibilities with Linguist
* language-xml
  * Allow space after attribute name
* language-php
  * Clean up grammar file
  * Tokenize `$this` as `variable.language.this.php`
  * Scope cleanup
  * Add `AND` as a valid SQL keyword
  * Tokenize parentheses
  * Fix inline include not stopping at the closing PHP tag
  * Tokenize multiple exceptions in a catch clause
  * Tokenize typehinted function arguments with default values
  * Tokenize function return values
  * Support `use` in traits
  * Tokenize the special `class` keyword when used in scope resolution
  * Remove erroneous function pass-by-reference regex
  * Support namespaced typehints
  * Add basic support for commas
  * Add structure to switch statements
  * Tokenize PHPDoc param types
* language-sql
  * Clean up comment regexes
  * Tokenize bare `float` type
* language-ruby
  * Tokenize embedded XML in heredocs
  * Fix end-of-heredoc tokenization
* language-hyperlink
  * Fix `mailto` scope
  * Do not inject inside regexp strings, even in text grammars
* language-gfm
  * Tokenize codeblocks containing unrecognized languages
* language-shellscript
  * Resolve incompatibilities with Linguist
* language-python
  * Update auto-indent regexes

### Possible Drawbacks

language-php regressions as I changed probably more than half the regexes.
JSDoc overhaul in language-javascript.
The fact that this language update is absolutely massive because I think I missed the last update I wanted to do and then went on vacation before getting this one out.",2751,True,en,0
15004,1,1,0,Internals,damieng,2017-07-12T23:50:38Z,1,1,1,0,"5.2 causes errors with eslinter-plugin-react
",46,True,en,0
15003,5,2,1,Internals,damieng,2017-07-17T22:54:06Z,28,20,2,5,,0,False,en,0
14998,1,6,0,Internals,simurai,2017-08-29T01:01:22Z,3,0,1,47,"### Description of the Change

This promotes the `.atom-dock-toggle-button-inner` to a GPU layer.

### Alternate Designs

- There would be other ways like `transform: translateZ(0)` or `backface-visibility: hidden`, but `will-change` is more official.
- We could also promote the parent element `.atom-dock-toggle-button`, but since the ""inner"" element is the one that actually gets transformed, it seems more appropriate.

### Why Should This Be In Core?

It's where the dock styles live.

### Benefits

Fixes this rendering issue: #14915

### Possible Drawbacks

Forcing layers could have some side effects elsewhere. 

### Applicable Issues

Fixes #14915
",682,True,en,0
14997,2,0,0,Internals,damieng,2017-07-13T19:33:33Z,15,13,1,1,Fixes #13933 ,13,False,en,0
14987,4,3,0,Internals,nathansobo,2017-07-11T22:59:10Z,23,40,2,1,"Fixes #8648

This PR fixes two regressions related to mouse handling introduced in the latest editor rewrite (#13880) and the upgrade to Electron 1.6.x (#12696).

* On Linux, the middle mouse button pasting text twice (#8648). This regressed because Chrome now seems to synthesize textInput events on mouseup when clicking with the middle button. We had custom logic to emulate this behavior that was rendered redundant by this change.

* On Mac, ctrl-clicking is interpreted by the OS as a right click that brings up the context menu. We weren't bailing out in this case, which caused the cursor to move after the context menu had closed.

We should hot-fix this to 1.19-releases once it is merged.

/cc @ungb ",721,True,en,0
14967,2,0,0,Internals,as-cii,2017-07-07T08:10:20Z,1,1,1,0,"This changes marker layer `onDidUpdate` events to occur after text-buffer `onDidChangeText` events. Also, those events will now be triggered at the end of the outermost transaction, analogously to `onDidChangeText`.",215,False,en,0
14959,6,0,0,Internals,BinaryMuse,2017-07-13T23:14:50Z,1,1,1,8,"### [github](https://github.com/atom/github)

v0.3.3...v0.3.8

* [atom/github#916 - Use chai-assert-async plugin from npm](https://github.com/atom/github/pull/916)
* [atom/github#915 - Upgrade Dugite to be ASAR-ready](https://github.com/atom/github/pull/915)
* [atom/github#896 - Edit commit message in editor](https://github.com/atom/github/pull/896)
* [atom/github#923 - Explicitly pin to 1.34.0 of dugite to pick up desktop/dugite#106](https://github.com/atom/github/pull/923)
* [atom/github#925 - Respect GIT_AUTHOR_*/GIT_COMMITTER_* environment variables](https://github.com/atom/github/pull/925)
* [atom/github#790 - Hey look some keybindings](https://github.com/atom/github/pull/790)
* [atom/github#980 - Fix tests that broke due to changes on Atom Beta](https://github.com/atom/github/pull/980)
* [atom/github#989 - Upgrade libstdg++ on Travis for our beta build](https://github.com/atom/github/pull/989)
* [atom/github#990 - Revert ""Upgrade libstdg++ on Travis for our beta build""](https://github.com/atom/github/pull/990)
* [atom/github#988 - Style error message](https://github.com/atom/github/pull/988)
* [atom/github#943 - add context menu labels when items are selected](https://github.com/atom/github/pull/943)
* [atom/github#1006 - Fix screenshots in package settings](https://github.com/atom/github/pull/1006)
* [atom/github#1012 - ‚¨Ü nsfw@1.0.16](https://github.com/atom/github/pull/1012)
* [atom/github#1028 - ‚¨Ü what-the-status@^1.0.2](https://github.com/atom/github/pull/1028)
* [atom/github#1031 - Fix `Repository#getGitDirectoryPath()` for absent or loading repos](https://github.com/atom/github/pull/1031)
* [atom/github#1032 - Add check for repository.isPresent() when observing text editors](https://github.com/atom/github/pull/1032)",1780,True,en,0
14955,2,1,0,Internals,as-cii,2017-07-05T12:18:15Z,40,12,2,0,"Fixes https://github.com/justmoon/relative-numbers/issues/41.
Refs: https://github.com/atom/atom/pull/14893#issuecomment-311430646.

Some packages rely on `data-screen-row` and/or `data-buffer-row` to provide their functionalities. As part of the editor rewrite, we accidentally removed `data-screen-row` from line number nodes, thus causing some packages (e.g. relative-numbers) to stop working.

With this pull-request, we are adding back `data-screen-row` on line numbers, which makes the packages relying on it work correctly again. As part of this bug fix, I noticed that we were not updating `data-buffer-row` and `data-screen-row` after initially constructing the element they referred to, so I have fixed this inconsistency in bcaf655.

I will merge this as soon as the build gets üíö, so that we can cherry pick it onto `1.19-releases` and let this pull-request go out with the next hot-fix release.

/cc: @atom/maintainers @avindra",951,False,en,0
14948,1,1,0,Internals,nathansobo,2017-07-05T21:24:44Z,6,6,2,1,"Fixes #14941

@lierdakil could you give this a look and see if it addresses the compatibility issues? Thanks very much for the report!",136,True,en,0
14931,8,21,2,Externals,UziTech,2018-01-09T13:12:46Z,37,11,2,192,"### Description of the Change

adds an `atom.commands.onDidFinish` function that is called after commands actually finish.

This will require commands that are asynchronous to return a promise so onDidFinish can know when a command is still working asynchronously.

### Alternate Designs

This comes from trying to return a commands value in #14720 

I decided to go with a `did-finish` event to keep backwards compatibility and use the event emitter already attached to `atom.commands`

This event is emitted once `Promise.all` on the return values of the command listeners finishes. Therefore it will be emitted when all listeners are resolved or one listener is rejected. And only the dispatched event is provided. A couple things could be changed here:

- We could wait until all listeners are resolved or rejected.
- We could emit a different event if rejected.
- We could include the returned values of the commands.

### Why Should This Be In Core?

It requires changes to the command registry and package creators to return a promise if the command is async.

### Benefits

- Ability to tell when an async command actually finishes.
- Ability to dispatch commands in series.

### Possible Drawbacks

Package creators will need to come on board for this to be very usefull

### Applicable Issues

#13195
",1345,True,en,0
14929,2,1,3,Internals,as-cii,2017-07-03T09:39:37Z,24,4,2,2,"Supersedes https://github.com/atom/atom/pull/14844.
Fixes https://github.com/atom/atom/issues/14836.

In the previous implementation of the editor rendering layer, we used to continuously re-measure block decorations that were on-screen. This was done to allow users to interact with the decorations, without requiring any extra work by package authors if the decorations size changed dynamically as a response to user input. During the rewrite in #13880 we lost this behavior and issues like the one linked above started arising. 

With this pull-request, we will now automatically schedule a new update when detecting that a block decoration got resized and call `invalidateBlockDecorationDimensions` on behalf of package authors. This is powered by a per-component `ResizeObserver` that listens for size changes on every added block decoration.",852,False,en,0
14905,1,1,0,Externals,matthewwithanm,2017-06-28T16:51:20Z,10,10,10,0,"These events will only be fired a single time at most, so we should clean up the listeners after that.

This should help minimize accidental memory leaks.

cc @hansonw",171,True,en,0
14897,3,0,0,Internals,as-cii,2017-06-27T09:35:44Z,109,63,5,0,"This pull-request uses a new private API on Workspace that emits an event every time the window title gets updated (e.g. as a result of an active pane item changing, the project paths changing, etc.).

This fixes a bug that left the custom title bar with a stale `document.title` under some circumstances.

üçê'ed with @jasonrudolph.

/cc: @atom/maintainers ",365,True,en,0
14895,1,0,0,Internals,as-cii,2017-06-27T09:33:59Z,31,0,2,0,"Fixes https://github.com/atom/atom/issues/14817.

Previously, when a block decoration needed measurements, we would always honor that request, even when the `blockDecorationMeasurementsArea` had not been explicitly sized yet, or when its size was not up-to-date. This was causing decorations to be incorrectly measured, due to a problem similar to #14769.

This pull-request fixes the above issue by flushing the newly measured scroll width to the measurement area (if needed) before measuring block decorations.

/cc: @atom/maintainers @t9md",548,True,en,0
14893,1,3,0,Internals,as-cii,2017-06-27T09:35:20Z,3,9,1,0,"Fixes https://github.com/atom/atom/issues/14842.

Previously, we were mistakenly not clearing out some styling properties like `marginTop`, thus causing e.g. line numbers to be misaligned. This was caused by manual updates to an element's style object, without a consequent update to the `NodePool`.

With this pull-request we will now rely on `element.styleMap` (a DOM primitive) to detect which styles have been set on a element that is about to be recycled and, if the object being created doesn't use them, simply clear them out.",537,True,en,0
14886,1,0,0,Externals,TimvdLippe,2017-06-29T18:20:49Z,13,0,1,5,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Finding out how to contribute to my first Atom package was problematic
and took me quite some time to figure out how to locally run the packages.
There were some spread out answers in the Atom discussion forum,
but I think it is easier for new developers to read the CONTRIBUTING guide
instead of using Google to find out how to contribute.

### Alternate Designs

Right now it is only on the Atom discussion forum, not in the contributing guide.

### Why Should This Be In Core?

All Atom packages link to this contributing guide.

### Benefits

Developers who have not contributed just yet are now more easily able to find out how to develop local changes and contribute them :)

### Possible Drawbacks

None that I am aware of, more sentences? :open_mouth: 

### Applicable Issues

N/A
",1109,True,en,0
14853,97,15,5,Internals,smashwilson,2017-08-08T18:04:40Z,1840,27,32,48,"This will add a central filesystem watcher to Atom's core API, so that multiple packages can share the same native filesystem watchers, conserving operation system resources.

There are a _ton_ of Node filesystem watcher packages with varying degrees of cross-platform compatibility, error resilience, and sophistication of configuration. To keep our scope from creeping uncontrollably, the first version we ship will target _only_ the minimum functionality that we need for bundled core packages and @damieng's language server integration.

See the original discussion in #14163.

## API

This will add two public methods to subscribe to filesystem changes, an ""extended"" general-purpose one to recursively watch any directory tree, and a ""public"" specialized one to watch for changes within project roots that are open within `atom.projects`.

The general-purpose one will involve calling `watchPath` instances directly, by means of a function exported from the `atom` require:

```js
const {watchPath} = require('atom')

const watcher = watchPath(rootPath, {}, events => {
  // Accept batch of events
})

const disposable1 = watcher.onDidError(err => {
  // Handle error
})

// After this promise resolves, changes made to files on the filesystem will result in
// the registered callback(s) being invoked
await watcher.getStartPromise()

// After this promise resolves, all OS watcher resources will be disposed
await watcher.dispose()
disposable1.dispose()
```

 * `rootPath` can be a path anywhere on the filesystem.
 * If `rootPath` is a directory, its contents will be watched recursively. If it's an individual file, only that file will be watched.
 * The `PathWatcher` instances returned by `watchPath()` may be backed by an existing native filesystem watcher on the same root path or a parent directory.
 * The native watcher may also be swapped out if a watcher is started on a parent directory, or if its native watcher is assigned to a parent directory but the parent watcher is disposed. All of these changes are transparent to consumers.
 * `getStartPromise()` is useful to have for writing test cases - you want to be sure the watcher is initialized and receiving events before manipulating the filesystem. It will _not_ be necessary to wait for the watcher to start before subscribing to events, though.

```js
const disposable = atom.project.onDidChangeFiles(events => {
  // ..
})
```

 * This API will be implemented with the other. Notably, watchers created here will participate in the deduping process described above.
 * As new roots are added to the project or removed, existing event subscriptions will be adjusted accordingly.

In both cases, the payload delivered to the change callback is an Array with the following structure:

```js
[
  {
    ""action"": """", // one of ""modified"", ""created"", ""deleted"", or ""renamed""
    ""oldPath"": """", // undefined unless type is ""renamed,"" in which case it holds the former name of the entry
    ""path"": """" // absolute path to the changed entry
  }
]
```

üóí  I'm writing this initial cut with [nsfw](https://github.com/Axosoft/nsfw) (which we use in the GitHub package). I'm planning to merge this PR still using nsfw and cutting atom/github over to using it as part of the next release so we're no worse off in stable than we are today.

After :ship:, I'll replace it with a bespoke native watching module. nsfw launches two threads for each watched directory root, which makes me nervous to use it to back a user-facing API.

## Remaining Work

- [x] Create a `NativeWatcherRegistry` to manage the attachment of native watchers to userland watchers.
  - [x] Re-use native watchers for exact directories
  - [x] Re-use existing native watchers on parent directories
  - [x] Replace native watchers on child directories with a new watcher on a parent directory
  - [x] Remove unused native watchers
  - [x] Re-watch individual child directories when a parent directory's watcher is removed
  - [x] Documentation complete
  - [x] Test coverage
    - [x] More complicated watcher splits: parent-child relationships among the child watchers
- [x] Implement a `NativeWatcher` to translate native watcher library events to match the spec :point_up:
  - [x] Rebroadcast change events through an event-kit `Emitter`
  - [x] Broadcast an event when event consumers should attach themselves to a new `NativeWatcher` instead
  - [x] Handle errors... somehow
  - [x] Begin watching lazily when the first change subscriber is registered
  - [x] Automatically shut down when no subscribers exist
- [x] Create a `PathWatcher` object and `watchPath` function to supply the user-facing watcher API
  - [x] Broadcast `onDidStart` when attached to a native watcher that has begun listening for events
  - [x] Rebroadcast `onDidChange` events to subscribers
  - [x] Change `onDidStart` to the more useful `getStartPromise`
  - [x] Lazily create `onDidChange` subscription
  - [x] Documentation complete
- [x] Re-export the `watchPath` function from `""atom""`
  - [x] Documentation
- [x] Implement `atom.project.onDidChangeFiles()` using PathWatchers
  - [x] Tests
  - [x] Documentation
- [x] Take it for a final spin
- [x] Implement a feature flag
- [x] Verify that the docs look okay in Joanna
- [x] Ensure CI is green",5360,True,en,2
14835,2,0,0,Internals,maxbrunsfeld,2017-06-19T22:32:38Z,4,6,2,0,Fixes https://github.com/atom/atom/issues/14827,47,False,en,0
14795,1,1,0,Externals,50Wliu,2017-07-19T22:17:53Z,3,1,1,33,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

#13947 introduced a regression with `atom --test` where if `core.restorePreviousWindowsOnStart` was set to `always`, `atom --test` would ignore the supplied directory and instead test specs in the first folder you opened.  Had a very fun time trying to figure out why `atom --test spec` was running `language-html` tests instead of `tree-view` ones...

### Alternate Designs

None!

### Why Should This Be In Core?

Because I would like to be able to tell Atom where I want the specs to be run!

### Benefits

Being able to test any directory from the command line regardless of where Atom was started!

### Possible Drawbacks

None?!

### Applicable Issues

None!",979,True,en,0
14790,1,0,0,Internals,nathansobo,2017-06-15T20:57:35Z,10,4,1,0,"/cc @lee-dohm @as-cii 

This should go out with a beta hotfix.",64,True,en,0
14788,1,4,0,Externals,paulcbetts,2017-06-27T01:12:57Z,0,4,1,11,"This PR removes the node_module caches so builds will complete, even if they're slower",86,False,en,0
14782,2,1,0,Externals,paulcbetts,2017-06-15T15:45:12Z,9,11,2,0,"This PR updates the Squirrel hooks to tell Squirrel.Windows directly what kinds of shortcuts to create on update instead of creating them then deleting after-the-fact

Fixes #5323

## TODO:

- [x] Make sure this works",223,True,en,0
14773,1,0,0,Internals,damieng,2017-07-12T22:03:38Z,1,1,1,29,,0,False,en,0
14769,1,1,0,Internals,as-cii,2017-06-13T16:09:31Z,11,1,2,0,"Fixes #14743.

Before rendering block decorations, we read their heights by putting them into a special div called `blockDecorationMeasurementsArea`.

Previously, this div was not explicitly sized, which was causing decorations to wrap while being measured but not when actually rendering them.

This pull-request fixes this inconsistency by explicitly styling the measurement area so that it has the same width as the component scroll width.

/cc: @atom/maintainers @t9md",480,True,en,0
14763,1,1,0,Externals,wrongway4you,2017-06-12T19:54:58Z,1,1,1,0,"The PR just fixes a small typo in `CONTRIBUTING.md` document.
No additional description is required.
",103,False,en,0
14761,1,7,0,Internals,jasonrudolph,2017-06-20T09:34:26Z,1,1,1,7,"### Description of the Change

While attempting to interact with an Express.js server within some Atom tests, we ran into the following error related to Atom's current Content Security Policy:

```
EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: ""script-src 'self'"".

  at Function.wrapfunction [as function] (node_modules/depd/index.js:409:43)
  at populateConstructorExports (node_modules/http-errors/index.js:247:45)
  at Object.<anonymous> (node_modules/http-errors/index.js:29:1)
  at Object.<anonymous> (node_modules/http-errors/index.js:262:3)
```

This PR updates the policy to resolve this error ‚òùÔ∏è, allowing Atom to run [this code](https://user-images.githubusercontent.com/2988/27043798-58b9ed04-4f69-11e7-80e8-3db5f8336cd5.png).

### Alternate Designs

We could have changed Express.js's dependencies to stop using eval, but we are not aware of any advantages of making such a change upstream.

### Why Should This Be In Core?

N/A

### Benefits

Allow package authors to use libraries that rely on eval.

### Possible Drawbacks

We're not aware of any negative consequences that this change would introduce, but it _is_ a change to the CSP, so we definitely want to hear from others. :pray:

@atom/maintainers: Do you know of any negative consequences that would result from this change?

### Applicable Issues

N/A
",1484,True,en,0
14753,1,2,0,Externals,tjkohli,2017-06-12T16:15:56Z,1,1,1,1,"### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

Changed the label on the positive button of the ""Editor is not responding"" alert dialog from ""Close"" to ""Force Close"" because ""Close"" might imply closing the Alert/Dialog instead of the editor, whereas ""Force Close"" better describes the action that button will take.

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

Other strings may be ""Force Quit"" or ""End Process"" or ""Close Editor""

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

This change is a tweak to the core strings.

### Benefits

<!-- What benefits will be realized by the code change? -->

Makes a (minor) improvement to user experience and reduces decision fatigue for end users. 

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

Slight (neglibile) increase in file size due to longer string.

### Applicable Issues

<!-- Enter any applicable Issues here -->

Translation/localization will need to be updated elsewhere.",1560,True,en,0
14745,1,0,0,Internals,damieng,2017-06-13T21:23:02Z,2,0,1,4,,0,False,en,1
14736,1,2,0,Externals,matthewwithanm,2017-06-22T21:11:53Z,57,17,3,14,"This adds an `onDidChangeVisible()` and `observeVisible()` method to docks so that other objects can be notified when they're toggled.

Since this functionality covers the `didHide()` callback use case, I removed that.

One thing I'd like to discuss is the semantics of this. In the original docks PR, I had avoided calling this ""visible"" because it'll actually be false while the dock is visible but being animated closed. If you're using this API, for example, to show or hide contents of an item, you could wind up with surprising results.",546,True,en,0
14734,2,1,0,Internals,as-cii,2017-06-12T15:20:18Z,15,2,2,4,"By the time that the animation frame is delivered, the requested autoscroll position could not exist anymore. This could cause the editor component to measure a non-existent line and, as a result, throw an exception.

With this commit we will always ignore measurements for screen lines that do not exist.

/cc: @nathansobo ",328,True,en,0
14729,4,0,2,Externals,50Wliu,2017-06-07T15:23:50Z,7,2,3,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Fixes some issues with the new Docks documentation.  In particular, the documentation to `get{Left|Right|Bottom}Dock` was pointing to the wrong class and the methods themselves weren't public.

Please note: While adding documentation to the dock methods, I noticed that while `WorkspaceCenter` had docs for its individual methods, it did not have documentation for the class itself and therefore was not showing up as part of the API.  Therefore I've added a short blurb to the class.

The documentation I added was based off my best judgement and the comments for similar classes/methods; please feel free to improve them.

### Alternate Designs

N/A

### Why Should This Be In Core?

Because the documentation is in core.

### Benefits

Better documentation.

### Possible Drawbacks

None.

### Applicable Issues

Fixes #14728

I have no clue how to test this.",1183,True,en,0
14725,5,1,0,Internals,jasonrudolph,2017-06-06T20:42:42Z,5,5,1,0,"This PR upgrades the packages associated with the issue described in https://github.com/atom/atom/issues/14648.

Now that https://github.com/atom/atom/pull/14695 is merged, and now that we have new releases of the [associated packages](https://github.com/atom/status-bar/issues/194#issuecomment-306206730), this PR updates Atom to use those new releases.

Associated PRs:

- https://github.com/atom/status-bar/pull/195
- https://github.com/atom/grammar-selector/pull/45
- https://github.com/atom/encoding-selector/pull/49
- https://github.com/atom/line-ending-selector/pull/46
- https://github.com/atom/github/pull/905
",630,True,en,0
14718,1,0,0,Internals,BinaryMuse,2017-06-05T18:40:04Z,1,1,1,0,"### [github](https://github.com/atom/github)

v0.3.1...v0.3.2

* [atom/github#876 - Show committer avatar as well as author in the PR commit view](https://github.com/atom/github/pull/876)",191,True,en,0
14711,2,13,0,Internals,simurai,2017-08-25T00:11:14Z,1,0,1,82,"### Description of the Change

This enables native tabs on macOS. Under `macOS > Menu > View` there will be a ""Show Tab Bar"" option.

![screen shot 2017-06-03 at 5 10 32 pm](https://cloud.githubusercontent.com/assets/378023/26751932/aedfc05a-487f-11e7-9643-8047242b3bcb.png)

Which lets you combine multiple Atom windows and tab between them:

![native-tabs](https://cloud.githubusercontent.com/assets/378023/26751925/80bf8d68-487f-11e7-91c6-2c1a767b3c5f.gif)

> Note: Only available if `Atom > Settings > Core > Title Bar` is set to `native`.

### Alternate Designs

Was wondering if it should be a config, but I think it's not needed. Because:

1. Electron is smart enough to [only show](https://github.com/electron/electron/blob/dfab1043d98067b43b45d8dcbe9d0b84d4820555/atom/browser/native_window_mac.mm#L789-L790) the native tabs if there is also a native title bar. So [issues](https://github.com/atom/atom/issues/14197) with hidden/custom title bar shouldn't be a problem.
2. You can control if Atom should open as a native tab or new window by going to `macOS > System Preferences > Docks` and change this:

    ![screen shot 2017-06-03 at 4 40 33 pm](https://cloud.githubusercontent.com/assets/378023/26751735/7b90a89e-487b-11e7-8439-2f70d267559b.png)


### Why Should This Be In Core?

It's part of the `browserWindow` options.

### Benefits

Makes it possible to tab between multiple Atom windows.

### Possible Drawbacks

People might not like this change if:

1. They prefer opening as tabs for all other apps (like Finder), but not for Atom.
2. They don't want to switch to a custom title bar.

Something else I noticed: If you have the DevTools open (as a separate window) and close the Atom window, the DevTools window moves as a tab to another existing Atom window. Not sure if that's an edge case to be ok with?


### Applicable Issues

Closes https://github.com/atom/atom/issues/14197
",1946,True,en,0
14701,8,1,0,Externals,paulcbetts,2017-08-17T18:36:29Z,9,2,1,76,"This PR strips a bunch of unnecessary files from our build result, which should make Atom smaller as well as reduce build times.
",130,True,en,0
14698,3,0,0,Internals,as-cii,2017-06-03T08:53:48Z,151,23,1,1,"In the previous implementation of the editor we recycled DOM nodes using a pool. During the rewrite we dropped this behavior to keep things simple but we've decided we are not comfortable shipping a component that produced this many nodes as garbage. Below is an example of scrolling all the way to the top/bottom of a large file repeatedly.

Before:

![screen shot 2017-06-01 at 17 27 25](https://cloud.githubusercontent.com/assets/482957/26687381/d757feda-46ef-11e7-974c-c3c8d57536a4.png)

After:

![screen shot 2017-06-01 at 17 28 20](https://cloud.githubusercontent.com/assets/482957/26687384/d797e59a-46ef-11e7-9495-fda4f839f1b1.png)

Note the number of nodes (in green) has reduced from ~50k to ~5k (10x reduction). Node consumption would be completely flat if not for the octicons being injected into every line number via `::before` pseudo-elements in CSS. In the future it might be nice to revisit our approach to line number icons, but it's a too big project to take on right now.

üçêed with @nathansobo.",1028,True,en,0
14697,1,0,0,Internals,lee-dohm,2017-06-01T15:26:21Z,1,0,1,0,"### Description of the Change

Add missing documentation for a function parameter.

### Alternate Designs

N/A

### Why Should This Be In Core?

Documenting something that is already in core.

### Benefits

People will understand the documentation better.

### Possible Drawbacks

N/A

### Applicable Issues

None known.",342,True,en,0
14695,18,5,2,Internals,jasonrudolph,2017-06-06T14:09:53Z,221,112,5,4,"### Description of the Change

As the first step toward resolving #14648, this pull request implements the proposal outlined in https://github.com/atom/atom/issues/14648#issuecomment-305017095:

> - Disallow editors in docks. Only allow editors in the workspace center.
> - Change `atom.workspace.getActiveTextEditor()` to return the active text editor (if any) in the workspace center. (This is more consistent with the pre 1.17.0 behavior described in https://github.com/atom/atom/issues/14648#issuecomment-304381899.)
> - Introduce `atom.workspace.observeActiveTextEditor()` as a means of observing the active text editor. (Packages like encoding-selector and grammar-selector _want_ to observe the active text editor, but currently have to rely on observing the active pane item, which is problematic for the reasons described in https://github.com/atom/atom/issues/14648#issuecomment-304391943.)

Once this pull request is merged, I'll then be able to update each of the core packages that currently use `atom.workspace.observeActivePaneItem()` to instead use `atom.workspace.observeActiveTextEditor()` to receive notifications each time a different text editor becomes active. Once that's done, we'll be able to close #14648.

### Alternate Designs

- For packages that need to observe the active text editor (e.g., https://github.com/atom/status-bar/issues/194), we could require those packages to observe all pane containers and watch for a text editor to become active in that pane container. Because observing the active text editor is a common need, I'd rather provide a core API for this functionality and not require each package to implement and maintain this logic.
- Instead of disallowing editors in docks, we could teach `atom.workspace.getActiveTextEditor()` to first check for an active text editor in the active pane container and return it if it exists, and to otherwise return the active text editor (if any) in the workspace center. `atom.workspace.observeActiveTextEditor()` would need to use similar logic to notify observers each time the value of `atom.workspace.getActiveTextEditor()` changes. This approach would likely allow us to resolve https://github.com/atom/status-bar/issues/194, but it feels overly complicated, and it seems like something that is more likely to cause future confusion, surprise, and additional maintenance overhead.

### Why Should This Be In Core?

It's the first step toward resolving #14648.

### Benefits

- Developers will have a core API for getting notified when:
  - A text editor becomes the active text editor
  - There is no longer an active text editor
- The behavior of `atom.workspace.getActiveTextEditor()` will [more closely match its pre-1.17.0 behavior](https://github.com/atom/atom/issues/14648#issuecomment-304381899), which various [packages relied on](https://github.com/atom/find-and-replace/pull/904).
- We answer the question, ""Does it make sense to have an editor in a dock?"" Answer: No. Atom expects to find editors in the workspace center. Docks are intended to provide supporting tools like a tree view, a debugger, a console. xref: http://blog.atom.io/2017/05/23/docks-deep-dive.html
- It reduces (hopefully ü§û) the overall number of scenarios that need to be considered in Atom core and in packages that interact with editors (e.g., https://github.com/atom/find-and-replace/issues/901#issuecomment-304078622).

### Possible Drawbacks

- By disallowing editors in docks, we reduce Atom's overall flexibility. If someone comes up with a compelling reason for using an editor in a dock, they're out of luck.
- Implementing `getAllowedLocations()` on an item affects where the item opens when using `atom.workspace.open()` and when [dragging an item to a dock in the UI](https://github.com/atom/atom/blob/16e1ef917be66637a58bad5e09c7d546782ee6e8/src/dock.js#L228-L229). However, functions like [`Pane::addItem()`](https://atom.io/docs/api/v1.17.2/Pane#instance-addItem) currently allow you to add the item to any location, regardless of the locations returned by the item's `getAllowedLocations()` function. In other words, there will continue to be ways to programmatically add a text editor to a dock, even though we're discouraging it and considering it to be unsupported behavior.

### Applicable Issues

- #14648
- https://github.com/atom/status-bar/issues/194

### TODO

- [x] Add `TextEditor::getAllowedLocations()` to indicate that editors belong in the workspace center
- [x] Add `Workspace::observeActiveTextEditor()`
- [x] Add API docs for new functions in `Workspace`
- [x] Determine and implement reasonable behavior for existing text editor functions in `Dock`:
  - [x] [`observeTextEditors`](https://github.com/atom/atom/blob/16e1ef917be66637a58bad5e09c7d546782ee6e8/src/dock.js#L387-L400) -- 0b314ac1a98ca06c82fc369fffe4f13fc772abe5
  - [x] [`getTextEditors`](https://github.com/atom/atom/blob/16e1ef917be66637a58bad5e09c7d546782ee6e8/src/dock.js#L586-L591) -- 09495dfc35b1294df0f4785e00d4eb1f8c7e27fc
  - [x] [`getActiveTextEditor`](https://github.com/atom/atom/blob/16e1ef917be66637a58bad5e09c7d546782ee6e8/src/dock.js#L593-L600) -- f8ebd71200af4dcc5cf6fc2d85e68247833d9acc
",5224,True,en,0
14694,1,2,0,Internals,nathansobo,2017-06-01T15:23:19Z,46,12,3,0,"In #13880 we honored the `lineNumberGutterVisible` parameter but neglected to honor the `showLineNumbers` parameter, which is what is used by the text editor registry to interact with the settings. In the previous editor implementation, both of these options simply hid the line number completely. In this version, we've elected to handle `showLineNumbers` differently from `lineNumberGutterVisible`. We continue to render the line number gutter (which contains diff decorations, fold indicators, etc), but we just don't render the line numbers in it. This provides more features and a better visual experience when the line numbers are disabled.

üçêed with @as-cii",669,True,en,0
14693,1,0,0,Internals,as-cii,2017-06-01T12:44:49Z,16,10,1,0,"Fixes #14592.

We attach resize listeners to overlays so we can update their position when they change sizes to avoid overflowing the window. However, resize events occur more frequently than we assumed, such as when the element is first attached to the DOM or when the resize listener is detached and reattached to avoid emitting warnings. Handling these extra resize events was heavily impacting performance. To avoid this, we now only process resize events when they report a client rect that differs from our most recent measurements, avoiding redundant updates.

/cc: @atom/maintainers @pfitzseb",604,True,en,0
14690,1,4,0,Internals,damieng,2017-07-12T22:04:13Z,3,3,2,41,Fixes #2928,11,False,en,0
14686,1,0,0,Internals,as-cii,2017-06-01T08:17:23Z,6,16,1,0,"This fixes a bug that got introduced in #13880 which was causing lines to disappear due to the browser trying to scroll the hidden input into view after it was focused.

![image_1024](https://cloud.githubusercontent.com/assets/482957/26637604/2ccb612a-4620-11e7-8032-625b15c31911.png)

With this pull-request we unconditionally restore the scroll top and the scroll left properties of the scroll view to 0 every time the hidden input is focused.

/cc: @atom/maintainers ",476,True,en,0
14682,8,12,0,Externals,paulcbetts,2017-08-15T08:43:29Z,18,1,2,76,"As part of #13916, ASAR gets removed in favor of using snapshots. While snapshots solves the startup speed problem better than ASAR, using ASAR archives also helps a _lot_ with installation speed as well as the time taken to generate an installer. 

Refs https://github.com/desktop/dugite/pull/103
Refs https://github.com/desktop/dugite/pull/106

## TODO:

- [x] Make sure this actually generates a usable installer
- [x] Check to make sure this doesn't regress startup time
- [x] Look for shell scripts in the github package that need to be moved to `.unpacked`",571,True,en,0
14657,6,28,0,Internals,simurai,2017-06-02T02:47:51Z,59,1,5,5,"### Description of the Change

This adds an Atomicons icon set. Similar to the Octicons, but has custom icons created for Atom only. Initially includes icons for the Outline view:

![screen shot 2017-06-01 at 2 23 25 pm](https://cloud.githubusercontent.com/assets/378023/26665740/a857d79a-46d6-11e7-8601-eecfbec0bdcf.png)

### Usage

Just like the Octicons `icon icon-xxx` classes, but grouped with an `icon-entity` prefix. Example:

```html
<span class=""icon icon-entity-array"">array</span>
<span class=""icon icon-entity-boolean"">boolean</span>
```

### Alternate Designs

A better approach would be to use SVG for the icons, instead of a font. Then the icons could be multi colored, be animated, easier to position without sub-pixel blurryness and easier to update/maintain.

Downside: You can't just use a class to add an icon. The SVG needs to be added to the DOM. Atom would need some sort of `<atomicon name=""array"" />` to `<svg class=""atomicon atomicon--array""><path d=....</svg>` injector. Like [etch-octicon](https://github.com/joefitzgerald/etch-octicon).

Maybe still worth to try that before making these part of the official style guide. This PR is mostly to add icons to the Outline view package.

### Why Should This Be In Core?

The Octicons are also in core.

### Benefits

More relevant icons.

### Possible Drawbacks

Maintenance cost.

### Credits

""Atomicon"" name: @Alhadis (somewhere in one of those issues).
",1469,True,en,0
14654,2,2,0,Externals,UziTech,2017-09-20T20:07:46Z,4,1,1,117,"### Description of the Change

Updated atom.confirm documentation to include what happens if dialog is closed without selecting an option

### Possible Drawbacks

I'm not 100% sure this is correct on all OSes 

I had to do quite a bit of experimentation on Windows to figure out all the edge cases.

Most of the information I got from the [dialog.showMessageBox](https://github.com/electron/electron/blob/master/docs/api/dialog.md#dialogshowmessageboxbrowserwindow-options-callback) documentation but there seems to be quite a few differences between Oses

<!-- What are the possible side-effects or negative impacts of the code change? -->
",654,True,en,0
14645,4,2,0,Internals,jasonrudolph,2017-06-07T13:51:32Z,50,0,2,12,"### Description of the Change

`WorkspaceCenter`'s `observeTextEditors()` method calls `this.onDidAddTextEditor()`, but `WorkspaceCenter` didn't have an `onDidAddTextEditor()` method. This pull request adds a test for `WorkspaceCenter`'s `observeTextEditors()` method, and it adds the missing `onDidAddTextEditor()` method in order to make the new test pass.

### Alternate Designs

None.

### Why Should This Be In Core?

It fixes bugs in existing core methods.

### Benefits

The `observeTextEditor()` method in `WorkspaceCenter` will successfully invoke the given callback for all current and future editors in the workspace center.

### Possible Drawbacks

No known drawbacks.

### Applicable Issues

@nathansobo noticed this bug when working on https://github.com/atom/find-and-replace/pull/904.
",824,True,en,0
14643,1,0,0,Internals,lee-dohm,2017-05-25T21:01:27Z,60,34,1,0,"### Description of the Change

Reviewed, cleaned up, and revised the guide. Updated some items and fixed a broken link too :+1:

* Added a section for people wanting to ask questions
* Moved the Code of Conduct up to the top
* Added a section on package naming conventions

### Alternate Designs

N/A

### Why Should This Be In Core?

Already is in core.

### Benefits

People will find the information more easily?

### Possible Drawbacks

None known.

### Applicable Issues

N/A
",508,True,en,0
14640,15,2,7,Internals,jasonrudolph,2017-06-08T23:15:33Z,653,266,8,14,"### Description of the Change

#### Functionality Description

Prior to this change, the following commands successfully operated on panes in the workspace center, but they could not focus/move/copy between the the panes in the workspace center and panes in the docks:

- `window:focus-pane-above`
- `window:focus-pane-below`
- `window:focus-pane-on-left`
- `window:focus-pane-on-right`
- `window:move-active-item-to-pane-above`
- `window:move-active-item-to-pane-below`
- `window:move-active-item-to-pane-on-left`
- `window:move-active-item-to-pane-on-right`
- `window:copy-active-item-to-pane-above`
- `window:copy-active-item-to-pane-below`
- `window:copy-active-item-to-pane-on-left`
- `window:copy-active-item-to-pane-on-right`

This pull request updates these commands to work across all visible panes, regardless of whether the pane is in the workspace center or in a dock.

#### Implementation Summary

- Prior to this change, the [directional pane focus/move/copy logic resided in `PaneContainerElement`](https://github.com/atom/atom/blob/7cfcdadbfbc2169b99893107f43be0fb3c2bbd30/src/pane-container-element.coffee#L27-L94). By hosting the logic in `PaneContainerElement`, we could only focus/move/copy between panes in a specific pane container (e.g., a single pane container in the workspace center). To make it possible to focus/move/copy between _all_ panes in the workspace, relocate the logic to `WorkspaceElement`.
- Add [tests for `nearestVisiblePaneInDirection`](https://github.com/atom/atom/blob/e3c612b261d658f492d7456dc9c18ccb48f23aa6/spec/workspace-element-spec.js#L37-L232), which provides the core logic for the higher-level functions like `focusPaneViewAbove`, `moveActiveItemToPaneAbove`, `focusPaneViewOnLeft`, etc.
    - Test the generic logic extensively (i.e., the logic that is independent of whether the given pane resides in the workspace center or a dock)
    - *Also* test the navigation between docks and the workspace center
- Since the core directional logic is tested in the new tests above, simplify the [tests for the higher-level functions](https://github.com/atom/atom/blob/e3c612b261d658f492d7456dc9c18ccb48f23aa6/spec/workspace-element-spec.js#L234-L483) (e.g., `focusPaneViewAbove`, `moveActiveItemToPaneAbove`, `focusPaneViewOnLeft`) to avoid unnecessary duplication.

### Alternate Designs

- We could perhaps leave the existing functions in `PaneContainerElement` and update them to focus/move/copy across pane containers, but it would seem odd (to me) to have something in `PaneContainerElement` operate on elements that exist in _other_ pane containers.
- We could leave the existing functionality in place and _add_ new commands that provide the ability to focus/move/copy across pane containers.
    - This would result in more code to maintain.
    - It would require us to come up with command names that distinguish the old behavior from the new behavior (e.g. `window:focus-pane-above` and `window:seriously-focus-pane-above` :stuck_out_tongue_winking_eye:)
    - I can't think of a compelling reason to the limit pane navigation commands to a single container. If you know of real world value that developers get from only being able to focus/move/copy between panes in a single pane container, please let me know. :pray:

### Why Should This Be In Core?

The existing commands reside in core, and this change updates them to support the docks that were recently added to core.

### Benefits

Developers gain the ability to focus/move/copy across *all* visible panes. Developers are no longer limited to focusing/moving/copying between panes in the workspace center.

### Possible Drawbacks

`PaneContainerElement` is not part of Atom's public API, but it's possible that some packages are relying on functions in `PaneContainerElement`. This pull request removes several functions from `PaneContainerElement`. If any packages are relying on those non-public functions, those packages will encounter errors when attempting to invoke those functions. Hopefully package authors would discover those issues during the next beta release, so that they could adjust their packages accordingly.

### Applicable Issues

https://github.com/atom/atom/pull/1484 introduced the ability to navigate directionally between panes.

### Demo

![demo](https://cloud.githubusercontent.com/assets/2988/26453346/5f8ec992-4131-11e7-9171-6aef04f34055.gif)

### Proposed Test Plan

I propose using the steps below to verify that this PR is providing the desired behavior. For now, I've done a sanity check in dev mode, and things appear to be working as expected. Once folks have had a chance to review this pull request, if folks are :+1: on the overall approach, I'll run through all of these steps to verify the behavior:

- [x] `window:focus-pane-above`
  - [x] You can navigate up from a workspace center pane to the adjacent workspace center pane above
  - [x] You can navigate up from the bottom dock to the bottommost pane in the workspace center
  - [x] When there is no pane above the focused pane, the focused pane remains focused
- [x] `window:focus-pane-below`
  - [x] You can navigate down from a workspace center pane to the adjacent workspace center pane below
  - [x] When the bottom dock is visible, you can navigate down from the bottommost pane in the workspace center to the bottom dock
  - [x] When the bottom dock is hidden and the bottommost pane in the workspace center is focused, the focused pane remains focused
  - [x] When there is no pane below the focused pane, the focused pane remains focused
- [x] `window:focus-pane-on-left`
  - [x] You can navigate left from a workspace center pane to the adjacent workspace center pane on the left
  - [x] When the left dock is visible, you can navigate left from the leftmost pane in the workspace center to the left dock
  - [x] When the left dock is hidden and the leftmost pane in the workspace center is focused, the focused pane remains focused
  - [x] When there is no pane to the left of the focused pane, the focused pane remains focused
- [x] `window:focus-pane-on-right`
  - [x] You can navigate right from a workspace center pane to the adjacent workspace center pane on the right
  - [x] When the right dock is visible, you can navigate right from the rightmost pane in the workspace center to the right dock
  - [x] When the right dock is hidden and the rightmost pane in the workspace center is focused, the focused pane remains focused
  - [x] When there is no pane to the right of the focused pane, the focused pane remains focused
- [x] `window:move-active-item-to-pane-above`
  - [x] You can move the focused pane's active item up from a workspace center pane to the adjacent workspace center pane above
  - [x] You can move the focused pane's active item up from the bottom dock to the bottommost pane in the workspace center
  - [x] When there is no pane above the focused pane, the focused pane's active item remains in the focused pane
- [x] `window:move-active-item-to-pane-below`
  - [x] You can move the focused pane's active item down from a workspace center pane to the adjacent workspace center pane below
  - [x] When the bottom dock is visible, you can move the focused pane's active item down from the bottommost pane in the workspace center to the bottom dock
  - [x] When the bottom dock is hidden and the bottommost pane in the workspace center is focused, the focused pane's active item remains in the focused pane
  - [x] When there is no pane below the focused pane, the focused pane's active item remains in the focused pane
- [x] `window:move-active-item-to-pane-on-left`
  - [x] You can move the focused pane's active item left from a workspace center pane to the adjacent workspace center pane on the left
  - [x] When the left dock is visible, you can move the focused pane's active item left from the leftmost pane in the workspace center to the left dock
  - [x] When the left dock is hidden and the leftmost pane in the workspace center is focused, the focused pane's active item remains in the focused pane
  - [x] When there is no pane to the left of the focused pane, the focused pane's active item remains in the focused pane
- [x] `window:move-active-item-to-pane-on-right`
  - [x] You can move the focused pane's active item right from a workspace center pane to the adjacent workspace center pane on the right
  - [x] When the right dock is visible, you can move the focused pane's active item right from the rightmost pane in the workspace center to the right dock
  - [x] When the right dock is hidden and the rightmost pane in the workspace center is focused, the focused pane's active item remains in the focused pane
  - [x] When there is no pane to the right of the focused pane, the focused pane's active item remains in the focused pane
- [x] `window:copy-active-item-to-pane-above`
  - [x] You can copy the focused pane's active item up from a workspace center pane to the adjacent workspace center pane above
  - [x] You can copy the focused pane's active item up from the bottom dock to the bottommost pane in the workspace center
  - [x] When there is no pane above the focused pane, nothing happens
- [x] `window:copy-active-item-to-pane-below`
  - [x] You can copy the focused pane's active item down from a workspace center pane to the adjacent workspace center pane below
  - [x] When the bottom dock is visible, you can copy the focused pane's active item down from the bottommost pane in the workspace center to the bottom dock
  - [x] When the bottom dock is hidden and the bottommost pane in the workspace center is focused, nothing happens
  - [x] When there is no pane below the focused pane, nothing happens
- [x] `window:copy-active-item-to-pane-on-left`
  - [x] You can copy the focused pane's active item left from a workspace center pane to the adjacent workspace center pane on the left
  - [x] When the left dock is visible, you can copy the focused pane's active item left from the leftmost pane in the workspace center to the left dock
  - [x] When the left dock is hidden and the leftmost pane in the workspace center is focused, nothing happens
  - [x] When there is no pane to the left of the focused pane, nothing happens
- [x] `window:copy-active-item-to-pane-on-right`
  - [x] You can copy the focused pane's active item right from a workspace center pane to the adjacent workspace center pane on the right
  - [x] When the right dock is visible, you can copy the focused pane's active item right from the rightmost pane in the workspace center to the right dock
  - [x] When the right dock is hidden and the rightmost pane in the workspace center is focused, nothing happens
  - [x] When there is no pane to the right of the focused pane, nothing happens
",10869,True,en,0
14634,14,2,0,Externals,50Wliu,2017-05-25T01:26:24Z,14,14,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

* language-php
  * Add support for inline PHPDoc and other PHPDoc improvements
  * Add JS as a synonym for JavaScript heredoc
  * Add `interface` snippet
  * Match functions according to the official PHP spec
* language-yaml
  * Tokenize uppercase variants of true, false, null
  * Allow spaces and quotes inside of unquoted keys
  * Add `.yamllint` to list of filetypes
* language-ruby
  * Add ruby_executable_hooks to hashbang recognition
* language-clojure
  * Add support for custom-defined macros
  * Add punctuation scopes for regexes
* language-gfm
  * Update list of Markdown file extensions
  * Fix errors with matching embedded code-blocks
  * Add support for embedded shell-session blocks
* language-shellscript
  * Adjust `function` snippet prefix
* language-xml
  * Add `.aiml` and `.siml` to list of filetypes
* language-java
  * Tokenize `default` and `strictfp` modifiers
* language-go
  * Fix comments in imports
  * Improve variable highlighting
* language-html
  * Fix PHP closing brace indentation
* language-sql
  * Add `.hql` to list of filetypes
* language-python
  * Adjust encoding snippet
  * Add `with` statement
* language-text
  * Adjust snippet scopes to only target Markdown, strings, comments, and plain text
  * Update year in legal snippet to 2017
* language-c
  * Add placeholder highlighting to C++ strings

Thanks to @UziTech, @luxifer, @jens1o, @nyoro712, @Ingramz, @deckar01, @AMeng, @Alhadis, @tonsky, @schlomo, @yoseldvp, @jflores, @CalvinHartwell, @ale-rt, @bilderbuchi, @bootmii, @ooJerryLeeoo, and anyone else I may have missed!

### Possible Drawbacks

I don't see any drawbacks with these updates.",1982,True,en,0
14621,1,0,0,Internals,kuychaco,2017-05-24T15:29:55Z,1,1,1,0,"v0.1.2...v0.2.0

* [atom/github#853 - File patch selection and context menu interaction](https://github.com/atom/github/pull/853)
* [atom/github#851 - Implement status bundle to reduce shell outs](https://github.com/atom/github/pull/851)
* [atom/github#859 - Fix regexp for GSOS#getRemotes](https://github.com/atom/github/pull/859)
* [atom/github#862 - Don't search parent directories for `.babelrc` when transpiling](https://github.com/atom/github/pull/862)
* [atom/github#860 - Support gitdir files](https://github.com/atom/github/pull/860)
* [atom/github#863 - Invalidated head description upon file system change](https://github.com/atom/github/pull/863)",665,True,en,0
14574,1,0,0,Internals,lee-dohm,2017-05-23T15:25:52Z,3,0,1,0,"### Description of the Change

Publicly document the `Task.cancel` function.

### Alternate Designs

N/A

### Why Should This Be In Core?

Documenting what is already in Core.

### Benefits

Package authors will be aware of its existence.

### Possible Drawbacks

Package authors will be aware of its existence?

### Applicable Issues

Fixes #14081
",372,True,en,0
14553,1,0,0,Internals,as-cii,2017-05-22T07:31:02Z,1,1,1,0,"Fixes https://github.com/atom/encoding-selector/issues/48.

When deciding which methods to export, `iconv-lite` verifies the availability of some Node features, which is clearly an unsupported behavior when executing it via `mksnapshot`.

In this case we were not getting any exception at compile-time, but we noticed some methods were missing from iconv-lite's API. With this commit we are excluding this module from the snapshot, thus making all of its methods available again.

/cc: @iolsen",499,True,en,0
14503,2,0,0,Internals,BinaryMuse,2017-05-19T15:43:25Z,1,1,1,0,"### [github](https://github.com/atom/github)

v0.1.1...v0.1.2

* [atom/github#847 - Choose the active context by the active item in the workspace center](https://github.com/atom/github/pull/847)
* [atom/github#850 - Make transpilation deps regular dependencies](https://github.com/atom/github/pull/850)",307,True,en,0
14495,4,13,3,Externals,warrenpnz,2017-09-12T18:32:42Z,41,5,5,116,"### Description of the Change

This change enables the maximum softWrapColumn in the display layer object to be set using a configuration parameter rather than using the MAX_SCREEN_LINE_LENGTH constant. This value is returned by the getSoftWrapColumn function.

The default and minimum is still set at 500 to satisfy the design decision to address performance issues for those opening minified files, however it can be adjusted upwards for those who require a more flexible option.

### Alternate Designs

As the getSoftWrapColumn function used a constant as the default return value, there are no alternate design options.

### Why Should This Be In Core?

This needs to be in core as it is affecting the editor display layer parameters directly 

### Benefits

Benefits are that the number of people who work with long line files that are not necessarily minified are able to customise their maximum width by the settings editor instead of using the constant value

### Possible Drawbacks

Possible drawbacks are that a user sets the width high enough to cause performance issues with minified files, however this can be mitigated by reverting the setting to defaults in the editor settings

### Applicable Issues

* https://discuss.atom.io/t/atom-editor-line-length-wraps-at-500-chars-on-1-15/40589/3
* https://discuss.atom.io/t/1-14-1-16-is-forcing-a-line-wrap-even-with-soft-wrap-toggled-off/41758/4
* https://discuss.atom.io/t/how-do-i-turn-off-soft-wrap/40417/11

Related to: https://github.com/atom/atom/pull/13820
",1552,True,en,0
14492,1,3,0,Externals,mrngoitall,2017-05-22T19:02:41Z,1,1,1,3,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

The ""Report Issue"" link in the Help menu currently directs users to https://github.com/atom/atom/blob/master/CONTRIBUTING.md#submitting-issues. #submitting-issues is no longer the name of the relevant section (it was actually renamed 2 years ago in commit https://github.com/atom/atom/commit/ee53bbf348e24a04fcfe67b6d7507c267dcc7678). This PR addresses this issue by updating the link to reflect the new name of that section.

### Alternate Designs

The ""Reporting Bugs"" header in `CONTRIBUTING.md` could've been renamed back to ""Submitting Issues,"" but that disrupts the flow of the document.

### Why Should This Be In Core?

Because it doesn't make sense for a package to update a link from atom's Help menu to atom's `CONTRIBUTING.md` file. üòõ 

### Benefits

Users will be taken directly to the relevant section when they're trying to report an issue with atom.

### Possible Drawbacks

The link might break again the next time the section gets renamed, in which case, we'll have to update this again. üòõ 

### Applicable Issues

N/A
",1359,True,en,0
14485,1,1,0,Internals,maxbrunsfeld,2017-05-18T23:23:21Z,24,11,2,0,Fixes https://github.com/atom/atom/issues/14231,47,False,en,0
14460,4,1,4,Internals,jasonrudolph,2017-05-22T14:03:27Z,130,0,3,4,"Fixes #14442.

### Description of the Change

Prior to this change, when a dock had focus, triggering `window:focus-next-pane` or `window:focus-previous-pane` would throw an error:

```
At /Applications/Atom.app/Contents/Resources/app/src/workspace.js:1559

TypeError: this.getActivePaneContainer(...).activateNextPane is not a function
    at Workspace.activateNextPane (/Applications/Atom.app/Contents/Resources/app/src/workspace.js:1559:1)
    at atom-workspace.window:focus-next-pane (/Applications/Atom.app/Contents/Resources/app/src/register-default-commands.js:168:1)
    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/Applications/Atom.app/Contents/Resources/app/src/command-registry.js:265:1)
    at /Applications/Atom.app/Contents/Resources/app/src/command-registry.js:3:1
    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:610:1)
    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:401:1)
    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeyEvent (/Applications/Atom.app/Contents/Resources/app/src/window-event-handler.js:100:1)
    at HTMLDocument.<anonymous> (/Applications/Atom.app/Contents/Resources/app/src/window-event-handler.js:3:1)
```

[`Workspace.activateNextPane()` calls `this.getActivePaneContainer().activateNextPane()`](https://github.com/atom/atom/blob/ae9f24602d80cb15fe0edc15c1aae37d44ee786c/src/workspace.js#L1361). `this.getActivePaneContainer()` returns either a `WorkspaceCenter` (if the workspace center is the active pane container) or a `Dock` (if a dock is the active pane container). `WorkspaceCenter` has an [`activateNextPane`](https://github.com/atom/atom/blob/8ed16cea43cfd3f3b04b51ed5851892944ac7f19/src/workspace-center.js#L290-L298) function, but `Dock` does not. Therefore, calling `Workspace.activateNextPane()` results in an error when a `Dock` is the active pane container. (The same goes for `activatePreviousPane`.)

This change resolves this issue by [adding `activateNextPane` and `activatePreviousPane` functions to `Dock`](https://github.com/atom/atom/blob/ae9f24602d80cb15fe0edc15c1aae37d44ee786c/src/dock.js#L629-L637).

With this change in place, triggering `window:focus-next-pane` or `window:focus-previous-pane` in a dock will focus the dock's next or previous pane respectively. If the dock has only one pane, then that pane will remain focused. In other words, these two commands should provide the same behavior regardless of whether they're executed in a dock or in the workspace center.

### Alternate Designs

None.

### Why Should This Be In Core?

It's a fix for an existing bug in atom/atom: #14442

### Benefits

Fixes #14442.

### Possible Drawbacks

From a functionality perspective, I'm not aware of any drawbacks.

From a code perspective:
- It seems like there's an interface that we expect both `Dock` and `WorkspaceCenter` to implement, but I don't see that interface explicitly described or enforced anywhere. I _think_ that lack of explicit interface is a cause of the bug seen in #14442. There may be other bugs that are lurking due to code that implicitly expects a `WorkspaceCenter` and a `Dock` to provide a common interface.
- [`Dock`](https://github.com/atom/atom/blob/8ed16cea43cfd3f3b04b51ed5851892944ac7f19/src/dock.js) and [`WorkspaceCenter`](https://github.com/atom/atom/blob/8ed16cea43cfd3f3b04b51ed5851892944ac7f19/src/workspace-center.js) have quite a bit of duplicate code ([side-by-side screenshot](https://cloud.githubusercontent.com/assets/2988/26175132/a7d9c034-3b1f-11e7-9586-f738646b7440.png)), and this PR adds even more. Perhaps a future refactoring could reduce this duplication.

### Applicable Issues

#14442

### Demo

https://github.com/atom/command-palette/issues/79#issue-227125354 shows the behavior prior to this change. The gif below shows the behavior after this change:

![demo](https://cloud.githubusercontent.com/assets/2988/26176358/d8723fba-3b23-11e7-84a7-8588669ef786.gif)
",4224,True,en,0
14459,1,0,0,Internals,lee-dohm,2017-05-17T20:55:08Z,1,1,1,0,"### Description of the Change

The previous link would give a 404 when the user was not logged in to GitHub. This link works whether logged in or not.

### Alternate Designs

N/A

### Why Should This Be In Core?

Functionality is already in core.

### Benefits

Search Issues menu item now works whether one is logged in to GitHub or not.

### Possible Drawbacks

None known.

### Applicable Issues

Fixes #7758
",435,True,en,0
14445,2,1,2,Internals,kuychaco,2017-05-17T15:39:19Z,36,12,3,0,"This is to allow us to move babel and other dependencies used only during transpiling to dev dependencies so that we can reduce the size of our build artifacts. 

Ref https://github.com/atom/github/issues/638",210,True,en,0
14435,44,14,4,Internals,maxbrunsfeld,2017-06-08T23:50:54Z,1946,1592,24,22,"### Summary

This pull request completely reimplements the `TextBuffer` class - Atom's core data structure representing editable text. The new implementation differs from the old one in several major ways:

* The class is now implemented primarily in C++, as part of our native library [superstring](https://github.com/atom/superstring).
* Instead of storing the text as a mutable array of lines, we store it as flat immutable string representing the file's original content, plus a *Patch* representing the user's unsaved changes. This is somewhat similar to the [piece table](https://en.wikipedia.org/wiki/Piece_table) data structure used in some other editors.
* At the native level, the buffer supports *snapshots* - read-only views of the buffer that can be processed in background threads with no copying or locking, even while the buffer is being mutated on the main thread.
* File I/O and transcoding is now handled by the native library, entirely on background threads and exposed via promises.

### Motivation

For many purposes, the existing array-of-lines implementation was actually very fast; we've never observed slowness associated with the querying or mutating of the text itself. This is a testament to V8's highly efficient String operations. However, there are many operations in Atom that *use* the `TextBuffer` and would benefit from being dropped to C++ and/or being moved to a background thread.

Here are some examples of this that have already been addressed in this PR:

* Previously, saving and loading a `TextBuffer` required its entire contents to be represented as a single JavaScript String. V8 has a hard limit on string length, so this would cause errors (#7210). Now, saving and loading are done in a background thread in C++, with minimal copying of data.
* When the file associated with an unmodified `TextBuffer` changes on disk, we diff the file's new contents with the buffer's contents in order to update the buffer in a way that preserves marker positions. Previously, this diff computation caused unresponsiveness in large files (atom/text-buffer#153). Now the diff is performed in C++ and on a background thread.
* Whenever the application is idle, we serialize the state of the window and persist it, so that we can restore it even if Atom crashes or power is lost. Previously, persisting a large file's text would cause hangs, so we had to disable this safety feature for large files (#13583). Now, because of our new representation of the buffer, we are able to efficiently serialize *just* the outstanding changes, so we can re-enable the feature for arbitrarily large files.
* The [line-ending-selector](https://github.com/atom/line-ending-selector) needs to detect what type of line endings a `TextBuffer` uses. Because we support files with *mixed* line endings, this entails scanning the entire buffer. Previously, this would take upwards of 50ms for a large file. Now, the search is performed asynchronously so that it causes no noticeable lag.

In addition to these improvements, this PR will make it very easy to optimize other features. Here are some follow-up PRs that I have in mind:
* When changing a large amount of text at once, indexing the new text in the `DisplayLayer` takes a long time. This is one of the main reasons that pasting a huge amount of text is slow. Some of this character-by-character computation could probably be done much faster in C++.
* Currently, using the [find-and-replace](https://github.com/atom/find-and-replace) package in a very large file can cause hangs when searches produce more than a hundred thousand results. We will now be able to run searches entirely in a background thread, eliminating any lag.
* Populating the [autocomplete-plus](https://github.com/atom/autocomplete-plus) package's `SymbolStore` can take a very long time for large files, so we had to [disable it](https://github.com/atom/autocomplete-plus/pull/782) for large files. Fuzzy matching should be able to be performed in C++ on a background thread, eliminating this restriction.

### Implementation details
<details>
<summary>Our new representation of the buffer:</summary>
<br/>

Suppose I create a `TextBuffer` with some initial text and then make three edits:

```js
const buffer = new TextBuffer('abc\ndefg\nhijkl')
buffer.setTextInRange([[0, 2], [0, 3]], ""C"")
buffer.setTextInRange([[2, 0], [2, 1]], ""H"")
buffer.setTextInRange([[1, 1], [1, 2]], ""E"")
assert.equal(buffer.getText(), 'abC\ndEfg\nHijkl')
```

This buffer is now represented internally like this:

![graph-1](https://cloud.githubusercontent.com/assets/326587/26644547/f3bbc95a-45e9-11e7-91a4-ceee77e90ecc.png)

The buffer is composed of two *layers*. The first layer stores the buffer's initial text as a flat, immutable string. This makes freshly-opened files very compact in memory. The second layer stores the unsaved edits in an object that we call a `Patch`. The `Patch` is structured as a [splay tree](https://en.wikipedia.org/wiki/Splay_tree) so that mutations and queries are very efficient, especially in areas that have recently been accessed.

Then, suppose I begin some asynchronous operation like saving the buffer to disk, or searching 
the buffer for a regex. Then, *while* that operation is still happening, I make some *additional* edits:

```js
const savePromise = buffer.save()
buffer.setTextInRange([[0, 0], [0, 1]], 'A')
buffer.setTextInRange([[2, 4], [2, 5]], 'L')
assert.equal(buffer.getText(), 'AbC\ndEfg\nHijkL')
```

At that point, the buffer's internal state would look like this:

![graph2](https://cloud.githubusercontent.com/assets/326587/26644968/63dd6562-45eb-11e7-9d66-9dfe94d243d9.png)

There are now *three* layers. Because the asynchronous `save` is still in progress, further changes that we make to the buffer are saved in a *new* Patch. When the `save` completes, we flatten the text down into one layer again.

</details>

### Effect on packages

I don't believe making `save` async has affected any of our bundled packages' functionality, though it has caused some test failures that I've had to fix:
* [x] https://github.com/atom/autocomplete-plus/pull/852
* [x] https://github.com/atom/whitespace/pull/155
* [x] https://github.com/atom/line-ending-selector/pull/45
* [x] https://github.com/atom/symbols-view/pull/222
* [x] https://github.com/atom/status-bar/pull/193
* [x] https://github.com/atom/tabs/pull/448

Depends on https://github.com/atom/text-buffer/pull/225
Depends on https://github.com/atom/superstring/pull/5
Depends on https://github.com/atom/node-pathwatcher/pull/121
Depends on https://github.com/atom/whitespace/pull/157

Closes https://github.com/atom/atom/issues/7210
Closes https://github.com/atom/atom/issues/11554
Closes https://github.com/atom/atom/issues/11012",6844,True,en,1
14432,1,0,0,Externals,50Wliu,2017-05-16T20:41:52Z,1,0,1,0,Reverts atom/atom#14428,23,False,en,0
14428,1,3,0,Externals,50Wliu,2017-05-16T20:36:54Z,0,1,1,0,This dependency appears to be unused.,37,False,en,0
14427,1,0,0,Externals,hansonw,2017-05-24T15:41:43Z,31,1,4,7,"I messed up the fix in https://github.com/atom/atom/pull/14320 (not sure how I got that to work), since `PackageManager` requires an object in the constructor.
This also adds some real tests so it doesn't break again.

Released under CC0.",241,False,en,1
14424,16,1,0,Internals,BinaryMuse,2017-05-18T15:10:58Z,58,11,5,2,,0,False,en,0
14420,1,1,0,Externals,matthewwithanm,2017-05-24T15:43:36Z,31,5,2,8,"The Nuclide file tree was causing this dialog to be shown every time.
With this commit, we exclude non-editor dock items from the ""dirty""
check.

cc @BinaryMuse @maxbrunsfeld",178,False,en,0
14419,1,1,0,Externals,Positive07,2017-05-15T23:10:14Z,0,1,1,0,"### Description of the Change
jQuery was removed from `package.json > dependencies` section

### Why Should This Be In Core?

After a search through this repository I found that jQuery isn't being used anywhere but is still part of `package.json` `dependencies`.

### Benefits

Finally removes jQuery from Atom!

### Possible Drawbacks

There may be something still using jQuery in there, so this needs to pass the CI before actually being done
",459,False,en,0
14417,1,0,0,Internals,lee-dohm,2017-05-15T20:45:08Z,10,0,1,0,"### Description of the Change

Add configuration schema for version pinned packages. See atom/settings-view#950.

### Alternate Designs

See atom/settings-view#950.

### Why Should This Be In Core?

This is where the configuration schema for `core` settings are defined.

### Benefits

See atom/settings-view#950

### Possible Drawbacks

See atom/settings-view#950

### Applicable Issues

* atom/settings-view#950
",437,True,en,0
14416,1,0,0,Internals,BinaryMuse,2017-05-15T18:11:18Z,1,0,1,0,"Some test runners output on stdout instead of stderr. This changes `script/test` so that if tests fail, output from stdout will also be shown.",142,False,en,0
14415,1,0,0,Internals,BinaryMuse,2017-05-15T14:25:10Z,1,1,1,0,,0,False,en,0
14413,2,0,0,Externals,50Wliu,2017-05-14T22:16:18Z,2,2,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

autocomplete-html has been almost completely rewritten and now features autocomplete descriptions and a smarter autocomplete.  Its completions list has also been updated for the first time in two years.

autocomplete-css just has some minor completion updates.

### Alternate Designs

None.

### Why Should This Be In Core?

Already in core.

### Benefits

* autocomplete-html
  * Descriptions when autocompleting
  * More autocompletions for ambiguous attribute names and boolean properties
  * Smarter autocompletion, especially for attribute flags
* autocomplete-css
  * More completions

### Possible Drawbacks

@Ben3eeE and I have done some pretty thorough regression testing with the new autocomplete-html, so I don't think there'll be any.

### Applicable Issues

None.",1098,True,en,0
14403,1,1,0,Externals,matthewwithanm,2017-05-15T14:15:22Z,1,1,1,2,"This was removed in #14175 in order to solve #14173 (editors not being
focused when clicking tabs). However, it means that the pane steals
focus from its children. The solution is to add the guard back and to
solve #14173 in another way: by delaying the activation of the item
(see atom/tabs#439).",301,False,en,0
14398,1,1,0,Internals,as-cii,2017-05-12T09:27:44Z,18,5,2,0,"This change also makes the test more useful, as it verifies that the metadata we read from the package.json's `packagesCache` is used correctly.

/cc: @nathansobo @maxbrunsfeld ",179,True,en,0
14393,3,3,0,Externals,torn4dom4n,2017-05-17T06:03:16Z,2,1,1,5,"### Description of the Change
Add GitHub package in build-status.md.
",71,False,en,0
14391,2,0,0,Internals,as-cii,2017-05-11T16:03:20Z,14,9,5,0,"When calling remote functions or emitting deprecation warnings respectively Electron and Grim create a fake `Error` object to retrieve the stack trace of the current call site.

When doing this for the first time, if the call site was located inside a snapshotted file, previously we would parse the source map for the snapshot and translate the position of each call in the stack trace. However, since the snapshot source map is quite big, we were observing major slowdowns when parsing it for the first time.

With this commit we will parse the snapshot source map while generating the snapshot, which will allow to not pay for it during runtime.

üçê'd with @BinaryMuse.",680,True,en,0
14387,2,0,0,Internals,nathansobo,2017-05-11T20:29:40Z,9,15,2,1,"This PR changes the behavior of the save and close commands to only act on the active item in the *center* of the workspace, rather than including items in docks.

This *could* be slightly confusing in some cases, such as if a user drags an editor or other save-able/closeable item into a dock, but ultimately treating dock items the same as center items for saving and closing has proven to be more confusing than helpful.

/cc @matthewwithanm @BinaryMuse @smashwilson @lee-dohm ",484,True,en,0
14386,1,0,0,Internals,nathansobo,2017-05-10T17:51:15Z,1,1,1,0,,0,False,en,0
14382,2,0,0,Internals,lee-dohm,2017-05-09T17:26:25Z,25,0,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Add configuration for the [probot-stale integration](https://github.com/probot/stale) to automatically close issues that have not had any recent activity. Currently set to notify issues that haven't had any activity in two years and then close if it still doesn't have activity in an additional 30 days after being notified.

### Alternate Designs

Have been doing this kind of thing manually :cry:

### Why Should This Be In Core?

This is project configuration, not adding anything to the Atom application.

### Benefits

Not having to clean up old issues manually.

### Possible Drawbacks

Might close issues that we still want to remain open but we will be tracking the stale label to ensure that doesn't happen.

### Applicable Issues

N/A
",1061,True,en,0
14375,2,5,0,Externals,matthewwithanm,2017-06-09T00:25:32Z,61,0,2,31,"We we're allowing subscription to this event, but never actually triggering it üò®

This is mostly copypasta from the implementation in workspace. lmk if you'd prefer something different.

I also added a test for `onDidChangeActivePane()` which I can separate into another commit if you want or drop entirely. (I was attempting to repro the other part of #14369 but it seems to work for me.)

cc @BinaryMuse @nathansobo",426,True,en,0
14372,23,4,3,Internals,BinaryMuse,2017-05-11T08:03:29Z,64,12,6,3,"itshappening.gif

---

For posterity: In addition to some more exciting changes ‚ú®, this PR makes some changes to the way we run tests. In particular, if a core package has an `atomTestRunner` entry in it's `package.json`, we now perform the following operations:

1. Copy the package's `node_modules` to `node_modules.bak`
2. Run `apm install` inside the package folder to install all its devDependencies
3. Run the tests as usual
4. Remove the new `node_modules` folder and rename `node_modules.bak` to `node_modules`

This ensures that all test dependencies get installed, while also ensuring that we don't corrupt CI's `node_modules` cache.",656,True,en,0
14367,1,1,0,Internals,smashwilson,2017-05-07T13:05:46Z,6,2,1,0,"### Description of the Change

The file `src/win_delay_load_hook.cc` is required for node_gyp to build native dependencies on Windows. This overrides the exclusion of `*.cc` and `*.h` sources from the packaged app for this specific, odd case, allowing native dependency builds to succeed again.

### Alternate Designs

I tried to find a way to modify the existing regexp to prevent `EXCLUDED_PATHS_REGEXP` from matching this file, but unfortunately JavaScript doesn't support negative lookbehind and I was concerned about the risk of an explosion in computational complexity with the workarounds.

I also considered splitting the `*.(cc|h)` exclusion rule into more specific exclusion rules, but there are too many of each that we _do_ want to exclude (all of the others; currently about 375 *.cc and 1000 *.h files). That would also cause a maintenance issue when adding any new dependencies with native components in the future.

### Why Should This Be In Core?

That's where the build scripts are :wink:

### Benefits

Attempting to build native dependencies on Windows machines fails with an error containing the following:

```
c1xx : fatal error C1083: Cannot open source file: 'C:\Users\foo\AppData\Local\Atom x64\app-dev\resources\app\apm\node_modules\node-gyp\src\win_delay_load_hook.cc': No such file or directory [C:\Users\foo\Documents\GitHub\xyz\node_modules\keytar\build\keytar.vcxproj]
```

These builds now succeed.

### Possible Drawbacks

Juggling multiple inclusion and exclusion patterns with precedence can quickly gets confusing (see: .gitignore files).

### Applicable Issues

My previous attempt to fix this was in atom/apm#716, merged in atom/atom#14331.
",1711,True,en,0
14352,1,1,0,Internals,as-cii,2017-05-04T16:42:47Z,1,1,1,0,"Fixes https://github.com/atom/atom/issues/14252.

Previously, we were disabling the zoom functionality right when creating an `AtomWindow` instance, which doesn't work possibly due to `webContents` not being ready yet.

With this pull request we will disable zooming in/out only after receiving the `window:loaded` event from the renderer process.

/cc: @ungb @iolsen 

 ",379,True,en,0
14339,2,3,0,Internals,maxbrunsfeld,2017-05-11T23:28:27Z,21,4,3,9,"Fixes https://github.com/atom/atom/issues/14338

/cc @t9md - Are you interested in building this branch and checking that it fixes the problem described in ‚òùÔ∏è that issue?

This should probably go into a beta hotfix.",223,True,en,0
14331,1,0,0,Internals,BinaryMuse,2017-05-03T15:28:49Z,1,1,1,2,":arrow_up: apm@1.18.1

Includes:

* https://github.com/atom/apm/pull/714
* https://github.com/atom/apm/pull/716

/cc @smashwilson @damieng ",146,True,en,0
14320,1,0,0,Externals,hansonw,2017-04-28T18:53:38Z,2,1,1,0,"This fixes a regression caused by https://github.com/atom/atom/commit/c4d0944c0da51e0a2d88273ff58a47c469d07be8.

The `urlOpen` function in AtomApplication is still constructing the `PackageManager` in the old way, but we need to use `initialize` now. (Let me know if there is a better way to do this now that we have snapshots!)

Released under CC0.",353,True,en,0
14309,4,1,1,Internals,BinaryMuse,2017-04-30T15:38:59Z,58,0,1,3,"### Description of the Change

This PR implements `Tooltip#recalculatePosition` which resets the Tooltip's position based on its current size. It also adds a `MutationObserver` that watches for the tooltip to change and calls the aforementioned method on the next animation frame when it does.

### Alternate Designs

`ResizeObserver` is not available until Electron 1.6 (with a flag), so a `MutationObserver` covers the majority of the important use cases until then.

I originally implemented this so the resizing operation took place in an `atom.views.pollDocument` call, but this made the tooltip feel very jerky, so I put it in an rAF instead. Happy to hear other üí≠ s.

/cc @nathansobo ",704,True,en,0
14293,1,1,0,Internals,BinaryMuse,2017-04-25T03:01:09Z,1,1,1,0,This fixes an issue where accessing properties on the `remote` module occasionally threw an exception.,102,False,en,0
14287,2,0,0,Internals,damieng,2017-04-25T21:51:48Z,8,2,1,1,"Correctly launch the Windows native version of Atom from the Windows Subsystem for Linux (WSL)

Fixes #14258 along with https://github.com/atom/apm/pull/714 for APM",166,True,en,0
14276,1,0,0,Internals,maxbrunsfeld,2017-04-21T18:13:41Z,1,1,1,0,"Addresses https://github.com/atom/atom/pull/14271#discussion_r112624466

/cc @damieng @as-cii",95,True,pl,0
14271,1,1,2,Internals,damieng,2017-04-20T23:38:08Z,1,1,1,0,,0,False,en,0
14269,6,4,0,Internals,BinaryMuse,2017-04-30T15:35:46Z,14,13,6,9,,0,False,en,0
14261,4,0,0,Internals,maxbrunsfeld,2017-04-19T23:19:06Z,1,1,1,0,Depends on https://github.com/atom/first-mate/pull/94,53,False,en,0
14250,2,5,0,Internals,smashwilson,2017-05-02T20:14:50Z,10,0,2,14,"### Description of the Change

Modify the Travis, Circle CI, and AppVeyor build metadata to only create branch builds for `master` and release branches named `x.y-releases`. This should help our build queue situation somewhat.

Note that _pull request_ builds should still be triggered on all three systems.

### Alternate Designs

We could do this by adding logic to the build scripts themselves to detect when they're being executed on a branch build that will also create a PR build, but there's no reason not to use the built-in solutions for this.

AppVeyor and (I believe) Circle both allow you to configure this setting in their own web UIs. I generally prefer to keep build configuration within the repository as much as possible, though, it's less confusing and we can manage it with pull requests (like this one!).

### Why Should This Be In Core?

The core build metadata files are in core :grin:

### Benefits

This will decrease the extraneous builds that are created when maintainers push branches to the atom/atom fork and create pull requests from them, which is [common in our workflow](https://github.com/atom/atom/branches/all). This results in _two_ builds for each push to a feature branch: one from the push to the feature branch and one from the pull request event:

<img width=""694"" alt=""screen shot 2017-04-18 at 12 54 21 pm"" src=""https://cloud.githubusercontent.com/assets/17565/25142789/2ab061c6-2436-11e7-8ca7-146a88846b10.png"">

Running fewer builds will result in less queue pressure and more rapid feedback on changes.

### Possible Drawbacks

Running the tests less often may cause us to miss flaky failures that happen only occasionally. We will also lose the ability to distinguish failures that are present on the branch itself (from the branch build) from those that are caused by the merge into master (from the pull request build).

### Applicable Issues

_N/A_

We've agreed to hold off on changing the build for a day or so to more easily isolate the cause of any problems from #13646.

/cc @damieng @as-cii @maxbrunsfeld @50Wliu 
",2106,True,en,0
14249,8,0,0,Externals,50Wliu,2017-04-19T17:19:03Z,8,8,1,1,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

* language-c
  * Punctuation tokenization improvements
  * Tokenize `nullptr` as a constant instead of a variable
  * Fix digit separators
* language-gfm
  * Tokenize embedded GraphQL
  * Add `clj` as alternative to `clojure`
  * Recognize `___` as a hr
* language-go
  * Don't require a word before an opening bracket when indenting
  * Fix multiple issues with variable tokenization
  * Tokenize variables starting with a non-ASCII letter
  * Remove lookbehinds where possible
* language-git
  * Increase maximum subject length to 72
* language-java
  * Tokenize new statements in ternaries
* language-sql
  * Correct time/timestamp grammar matches
* language-json
  * Add `.htmlhintrc` file support
* language-mustache
  * Use injections
  * Add `.mst` file support

### Possible Drawbacks

Possibly some language-go and language-mustache regressions.",1176,True,en,0
14239,1,0,0,Internals,maxbrunsfeld,2017-04-17T20:04:57Z,34,1,2,0,"The methods `paneForItem`, `paneForURI`, and `paneContainerForURI` already exist, so it seems reasonable to add `paneContainerForItem` as well. I've also backfilled some tests for these simple methods.",201,False,en,0
14221,3,3,0,Externals,matthewwithanm,2017-04-18T16:47:39Z,47,4,3,2,"This prevents permanent dock items from being closed, e.g. with cmd-w.

It also adds a new `force` argument to `Pane::destroyItem()` which devs can use to forcefully destroy permanent items; for example, when their package is deactivated.

cc @nathansobo",258,True,en,0
14217,1,1,0,Externals,edjubuh,2017-04-20T09:46:44Z,10,10,5,4,"Enable option in glob to disable directories from being returned when
finding paths to transpile during compilation

### Description of the Change
Before this PR, building Atom involved transpiling all babel paths, coffeescript files, cson files, etc. by globbing for all paths matching (essentially) `**/*.js`, `**/*.coffee`, etc. Node modules like term.js appear in the directory structure as `node_modules/term.js/<contents>`, which previously caused the folder `node_modules/term.js` to be added to a list of paths to transpile under the assumption that it was a file. This causes an error when [trying to read the folder](https://github.com/atom/atom/blob/master/src/compile-cache.js#L84)) `node_modules/term.js`. This PR fixes that by enabling the `nodir` option, which filters out any directories from being in the results. While I only specifically witnessed this issue in finding javascript files, the bug also exists in the coffeescript, CSON, PEG.js, and custom transpilers if someone names a directory *.coffee, *.cson, or something else expected to be transpiled.

### Alternate Designs
One could check if the path attempting to be transpiled is actually a directory where the error occurs right before transpiling, but glob already checks if the path is a directory.

### Why Should This Be In Core?
Proposed update to building atom

### Benefits
Can include node_modules named like module.js.

### Possible Drawbacks
In the future, if the [transpiler ](https://github.com/atom/atom/blob/master/src/compile-cache.js#L83) (or a custom one) may support directories? In this event, a glob pattern that ends with a `/` still grabs directories (even if `nodir` is enabled).

### Applicable Issues
None",1729,False,en,0
14210,2,3,2,Externals,matthewwithanm,2017-04-17T17:06:09Z,138,8,2,2,"Previously, we would get the initial size every time we didn't have an
explicit one. With this commit, we only get the initial size when we
deserialize and when we go from 0 -> 1 pane items.

Also, if the dock doesn't already have an explicit size, we'll use the
preferred size of the item being dragged when peaking the dock. That
way, dropping it won't cause it to change size.

This kinda-but-not-really fixes #14209. The tree view will still report sizes inconsistently but, since we only ask it once, we won't see the symptom.

cc @ungb @nathansobo",563,False,en,0
14205,1,0,0,Externals,matthewwithanm,2017-04-14T15:38:39Z,1,1,1,0,@Alhadis noticed I missed this in 53ec839.,42,False,en,0
14203,2,7,0,Externals,matthewwithanm,2017-04-14T02:31:51Z,16,9,4,0,"This fixes #14202 by (1) showing the affordance when you mouse out of the window and (2) making sure that the collapsed docks still have a pixel-wide hover area so the affordance can still be shown when the window's fullscreened.

cc @nathansobo @maxbrunsfeld @simurai",270,True,en,0
14194,1,2,0,Internals,as-cii,2017-04-13T10:48:10Z,5,0,1,0,"Fixes #14193.

With snapshots, all the forbidden modules are required lazily. In the case of `TextEditorElement` this can be problematic because users might create editors via `document.createElement('atom-text-editor')` before we have the chance to register the custom element.

With this pull request we will eagerly require `src/text-editor-element.coffee`, thus forcing `TextEditorElement` to register the HTML custom element when Atom is loaded and fixing the aforementioned issue.

/cc: @atom/maintainers ",517,True,en,0
14188,1,0,0,Internals,maxbrunsfeld,2017-04-12T17:59:33Z,42,5,2,0,Fixes https://github.com/atom/atom/issues/14184,47,False,en,0
14183,1,0,0,Internals,nathansobo,2017-04-12T17:24:17Z,9,1,2,0,"Previously, we were only restoring focus to the active center pane when hiding a dock via the *hide* method. Since `toggle` calls `setState` directly, we weren't notifying the workspace and restoring focus when hiding the dock via `toggle`. This PR fixes that.

@maxbrunsfeld we should cherry-pick this to 1.17-releases before publishing today.",346,True,en,0
14178,4,7,0,Externals,matthewwithanm,2017-04-13T16:17:10Z,9,2,3,1,"Currently, the absolutely positioned element is the only thing with a
size. That means that it'll cover the center. With this change, we give
a size to the (relatively-positioned) atom-dock element so that closed
docks take up canvas space instead.

I think @simurai mentioned this problem before but I wasn't following
and then forgot about it. üòñ

cc @nathansobo @maxbrunsfeld",388,False,en,0
14177,1,0,0,Externals,matthewwithanm,2017-04-12T21:20:59Z,2,2,1,0,Just noticed that these event listeners were being removed from the wrong elements.,83,False,en,0
14175,2,0,0,Internals,maxbrunsfeld,2017-04-11T19:59:36Z,26,2,2,0,"Fixes https://github.com/atom/atom/issues/14173

This regressed in https://github.com/atom/atom/pull/14143",108,True,en,0
14174,1,0,0,Internals,nathansobo,2017-04-11T17:10:51Z,3,0,1,0,"We're seeing errors that break window startup when deserializing 1.17 workspace state in prior Atom versions. Since users switch back and forth between beta and stable, this could cause unnecessary confusion. Here we don't provide full compatibility when downgrading, but we at least avoid errors so the window starts up gracefully. Unfortunately, we'll need to cherry-pick this to 1.17-releases.

/cc @maxbrunsfeld ",418,True,en,0
14168,2,0,0,Internals,as-cii,2017-04-11T08:12:55Z,223,71,3,0,"This morning I noticed that bundled packages were not being added to the `ModuleCache`. This was due to an accidentally committed change in 681f0f9fe1ca40425342102f01b0f1f406013858 and, since we had very little test coverage, this problem unfortunately slipped through.

This pull request adds back `ModuleCache.add` and retrofits some tests for that code path and for the new packages preloading stuff too.",409,True,en,0
14166,3,0,3,Internals,maxbrunsfeld,2017-04-11T17:32:07Z,222,208,8,0,"I've also rewritten the logic for maintaining the `atom-panel` element to avoid the use of custom elements altogether.

üé©  @joefitzgerald",142,True,en,0
14164,2,2,0,Externals,matthewwithanm,2017-04-12T18:53:51Z,50,3,3,1,"This provides a way to be notified when the shell environment has loaded‚Äîeven if it's already happened. (This implements the proposal from #14155.)

cc @nathansobo @maxbrunsfeld",181,True,en,0
14161,2,2,0,Internals,maxbrunsfeld,2017-04-10T21:55:04Z,189,34,4,0,"This fixes a regression introduced in #14143 and backfills some tests for the dock toggle buttons.

This also fixes a minor bug where, after clicking the dock toggle button to hide the dock, the button would remain visible until the next mouse movement.

/cc @nathansobo @matthewwithanm",290,True,en,0
14146,3,1,0,Internals,BinaryMuse,2017-04-13T17:13:00Z,48,47,2,7,"* Bump electron-link
* Only pre-require core packages during snapshot generation",81,False,en,0
14143,55,6,0,Internals,maxbrunsfeld,2017-04-10T15:08:07Z,1151,901,44,4,"* [x] Allow docks to be auto-resized by double clicking the resize handle
* [x] Don't open docks when single-clicking the resize handle
* [x] Docks have a `getElement` method, but other workspace classes still use the legacy view provider system. Add `getElement` methods on those classes instead, and get rid of all the remaining view providers in core.
* [x] Add Workspace APIs for tracking which pane container is focused: `getActivePaneContainer`, `onDidChangeActivePaneContainer`.
* [x] Make workspace methods like `getActivePane` return panes in docks if docks are focused.
",585,False,en,1
14137,4,0,0,Internals,nathansobo,2017-04-12T02:20:01Z,145,1,1,7,We didn't have a single listing of all the workspace item methods. Thought with the new docks feature landing it was a good time.,129,False,en,0
14136,1,0,0,Internals,maxbrunsfeld,2017-04-05T19:44:21Z,36,12,5,0,Depends on https://github.com/atom/atom/pull/14125,50,False,en,0
14135,5,1,0,Internals,jasonrudolph,2017-04-05T06:41:04Z,5,5,1,0,"This pull request proposes minor edits to `CONTRIBUTING.md` (e.g., [removing an extraneous word](https://github.com/atom/atom/commit/a36b6c4bd30d378f3b734631e00c0b3bc8b4f1d2), [fixing subject/verb agreement](https://github.com/atom/atom/commit/3f98ce2ac8facd5db5e4295a515369b568759e09), etc.). Each commit proposes a single edit, and the commit message aims to explain the proposed change.
",391,True,en,0
14134,2,0,0,Externals,matthewwithanm,2017-04-05T16:59:02Z,57,8,4,0,"### Description of the Change

Previously, when an item was moved, we would store the location in a StateStore. This updates that code to only store non-default values.

### Benefits

This reduces the noise in the DB and might be clearer for devs experimenting with default locations.",290,True,en,0
14131,3,0,3,Internals,BinaryMuse,2017-04-06T07:39:50Z,52,6,5,1,"This allows us to bundle packages with per-package transpilation setups as allowed in #13101. It's very similar to the existing built-in Babel pre-transpilation, but looks in `package.json` for the `atomTranspilers` configuration and adds the appropriate `CompileCache` setup *before* we begin to transpile *any* paths.

/cc @kuychaco @as-cii ",345,True,en,0
14125,5,7,0,Internals,maxbrunsfeld,2017-04-05T18:59:03Z,203,71,5,1,"Currently, in order to add a given item to the workspace, there is some indirection involved. You must add an *opener* function that returns that item based on some URI, and then to call `Workspace.open` with that URI:

```js
const MY_URI = 'my-package://something'

atom.workspace.addOpener((uri) => {
  if (uri === MY_URI) return new MyItem()
})

atom.workspace.open(MY_URI)
```

The URIs are involved because the workspace uses them as a serializable identifier for the items. But often the indirection of the *opener* concept is unnecessary. This PR adds the ability to add a given item directly to the workspace:

```js
atom.workspace.open(myItem)
```

The item can still have a `getURI` method, so the workspace will still be able to identifiy it for purposes like [remembering which Dock you last placed it in](https://github.com/atom/atom/blob/03be10414189b195ce4cbb9f11936cf575b15042/src/workspace.js#L688).

/cc @nathansobo @matthewwithanm",969,True,en,0
14119,1,2,0,Externals,cs150bf,2017-04-03T23:07:18Z,1,1,1,0,"
First argument to dialog.showSaveDialog() needs to be a BrowserWindow

https://github.com/electron/electron/blob/master/docs/api/dialog.md
https://github.com/electron/electron/blob/master/lib/browser/api/dialog.js

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

This should fix some regression introduced by commit https://github.com/atom/atom/commit/c6cae5b8fdfea982084b068a0b38a7c988c52f51 related to `showSaveDialog` causing things such ""Save As"", ""Save as HTML"" to not work properly (default filename ""Untitled"" and default path missing when it should be autofilled with more ""reasonable"" ones--e.g. original filename and path). 

This commit fixes the erroneous usage in [`src/main-process/atom-window.coffee#L268`](https://github.com/atom/atom/blob/c6cae5b8fdfea982084b068a0b38a7c988c52f51/src/main-process/atom-window.coffee#L268) introduced in commit https://github.com/atom/atom/commit/c6cae5b8fdfea982084b068a0b38a7c988c52f51
```coffeescript
dialog.showSaveDialog(this, params)
```

Here, `this` refers to an instance of AtomWindow, when the function `dialog.showSaveDialog` requires the first argument to be a BrowserWindow [`electron/lib/browser/api/dialog.js#L24`](https://github.com/electron/electron/blob/master/lib/browser/api/dialog.js#L24). 

So I believe the fix is simply 
```coffeescript
dialog.showSaveDialog(@browserWindow, params)
```

This is consistent with with the function binding usage in [`src/main-process/atom-window.coffee#L86@c6cae5b`](https://github.com/atom/atom/blob/c6cae5b8fdfea982084b068a0b38a7c988c52f51/src/main-process/atom-window.coffee#L86) and with the **old** working function `showSaveDialog` in [`src/application-delegate.coffee#L158`](https://github.com/atom/atom/blob/ae9d949ee4e199d1884bed89083196fa375bbd34/src/application-delegate.coffee#L158)

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

N/A
<!-- Explain what other alternates were considered and why the proposed version was selected -->

### Why Should This Be In Core?

Bug fix.
<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

### Benefits

Fixes bug (and see applicable issues)
<!-- What benefits will be realized by the code change? -->

### Possible Drawbacks

I cannot think of any at this moment.
<!-- What are the possible side-effects or negative impacts of the code change? -->

### Applicable Issues

- https://github.com/atom/atom/issues/14109
- https://github.com/atom/atom/issues/13978",3125,False,en,0
14116,1,1,0,Internals,as-cii,2017-04-03T12:48:36Z,4,0,1,0,"Many packages currently use this instance variable instead of calling `Package.prototype.getMainModulePath`. With this pull request we will eagerly compute such variable for preloaded packages too and therefore prevent third party packages that rely on this implementation detail from breaking.

/cc: @Ben3eeE who noticed this. Can you confirm this fixes the issue you experienced? Thanks!",391,True,en,0
14108,1,0,0,Externals,matthewwithanm,2017-04-04T17:20:25Z,25,6,2,3,`PaneContainer::onDidAddPaneItem` isn't triggered on moves.,59,False,en,0
14107,2,0,0,Externals,matthewwithanm,2017-04-03T21:42:11Z,25,4,3,3,"This commit changes the behavior of `open()` so that the item will be added to the workspace‚Äîeven if the `activateItem` option is false.

This provides a way to open (and add) an item without activating it, but removes the ability to open without adding. For that, we've made the `createItemForURI()` method public üòä

### Alternate Designs

We also considered adding a new option (`addItem`). Ultimately, this approach was chosen instead because `createItemForURI()` avoids the extra searching machinery of `open()` which probably isn't desired when creating an item.

### Benefits

Now we can open items without focusing their tab.

### Possible Drawbacks

This is a breaking change so callers using `activateItem: false` may have to be updated. This seems to be exceedingly rare though.",807,True,en,0
14104,1,1,0,Externals,kierans,2017-04-02T02:02:56Z,8,8,2,2,"To test:

`$ ATOM_HOME=<some dir> ./scripts/build`

Check that outputs exist in that dir

`$ATOM_HOME=<some dir> ./scripts/clean`

Check that dir cleaned.

Repeat with no `ATOM_HOME` to check default home dir works",224,True,en,0
14103,1,0,0,Externals,matthewwithanm,2017-03-31T19:05:37Z,100,31,2,0,"This adds an method for hiding items by URI and re-implements `toggle()` in terms of it. (tbh it's really just extracting most of  `toggle()` into a new function.)

cc @nathansobo @maxbrunsfeld",195,True,en,0
14096,1,0,0,Internals,as-cii,2017-03-30T09:15:16Z,5,1,1,0,"This module uses Node's `path` for determinining which path separator to use on the current platform. On browsers (and every other environment that does not support `require`, such as v8 snapshots) it falls back to always using a forward slash.

As a result, `PackageTranspilationRegistry` (and potentially other bundled packages that depend on `minimatch`) couldn't match glob expressions against any given path on Windows, thus causing the custom transpiler code to not work properly.

/cc: @BinaryMuse @smashwilson ",522,True,en,0
14080,16,5,0,Internals,as-cii,2017-04-03T07:59:34Z,277,111,12,5,"This pull request aims at reducing bundled packages loading and activation time even further by preloading them. During the snapshot phase, in fact, Atom will now scan all the core packages and load their main module, keymaps, menus, and settings. Later, at runtime, it will finish loading those packages by compiling their style sheets, calling `activate` on them, etc.

In addition, this pull request improves the way packages are resolved and, as a result, minimizes the I/O cost associated to it. Previously, in fact, because of the way the code was structured, we would get the list of package directories and constantly issue a `resolvePackagePath` for each of them. This, in turn, would unnecessarily verify again that each path was a directory, thus querying the file system and blocking the main thread. After these changes, we will perform that I/O just once and return a javascript object which contains all the information needed to load the associated package without extra cost.

On master, this is how loading and activating packages looks like:

![screen shot 2017-03-28 at 12 10 41](https://cloud.githubusercontent.com/assets/482957/24405701/1c772f16-13c6-11e7-9748-e5fe694c922c.png)

![screen shot 2017-03-28 at 12 09 41](https://cloud.githubusercontent.com/assets/482957/24405711/2586fa96-13c6-11e7-9ed9-d1c07a17cbb5.png)

This is how the same scenario looks like after the changes contained in this pull request:

![screen shot 2017-03-28 at 12 05 44](https://cloud.githubusercontent.com/assets/482957/24405970/fabc0576-13c6-11e7-8c27-d3b07eb1c58a.png)

![screen shot 2017-03-28 at 12 07 39](https://cloud.githubusercontent.com/assets/482957/24405975/fed3ee6c-13c6-11e7-824d-17f959ccc376.png)

You can notice how startup got `~ 90ms` faster, and packages loading alone became almost instantaneous. I am expecting this to be even more noticeable on machines that have slow hard drives, where the cost of I/O is much more dramatic.

This marks the end of the first round of performance improvements that can be achieved thanks to snapshots; there are still many things we can improve both in the renderer process and in the browser process, especially related to the scheduling of the tasks that currently happen as part of startup. I believe Atom could be a lot smarter about that, but I am going to illustrate what and how we could make it so in a separate issue (that is going to supplant the now outdated #13253).

/cc: @atom/maintainers ",2480,True,en,0
14065,1,1,0,Externals,akkatracker,2017-03-26T20:14:10Z,1,1,1,0,Just fixing a typo - no tests required,38,False,en,0
14063,2,5,0,Externals,dietmar,2017-04-04T21:22:41Z,40,9,2,10,"### Description of the Change

The functionality of pasting the clipboard on middle mouse click on Linux has been moved from `onMouseUp` to `onMouseDown`. Now it is consistent with the general behavior on Linux. Also, there was some interplay of this functionality with dragging, which resulted in issue #8648. This is resolved now.

### Alternate Designs

None

### Why Should This Be In Core?

Addresses a bug in Core.

### Benefits

Resolution of issue #8648 and consistency of UI behavior with other Linux applications.

### Possible Drawbacks

None

### Applicable Issues

#8648
",607,True,en,0
14038,21,1,0,Internals,as-cii,2017-03-22T07:39:19Z,171,57,12,0,"This pull request takes advantage of snapshots auxiliary data to minimize the I/O associated to reading a core package's style sheets when opening Atom. Specifically, we will now store all the sources, digests and style sheet paths in the snapshot blob, so that we can load them all at once during startup and avoid accessing the file system at runtime.

The following is a CPU profile taken on master after merging #14024:

![screen shot 2017-03-21 at 09 52 17](https://cloud.githubusercontent.com/assets/482957/24139415/49bfb1aa-0e1c-11e7-9ffc-08659daced45.png)

If we zoom in the various sections of this profile, we can see that `LessCache` shows up quite frequently:

![screen shot 2017-03-21 at 09 52 50](https://cloud.githubusercontent.com/assets/482957/24139443/6028c12a-0e1c-11e7-9910-2278bb4506dd.png)

![screen shot 2017-03-21 at 09 53 16](https://cloud.githubusercontent.com/assets/482957/24139445/60528bc2-0e1c-11e7-9a15-f84a4bd50af3.png)

![screen shot 2017-03-21 at 09 53 33](https://cloud.githubusercontent.com/assets/482957/24139448/605d2f78-0e1c-11e7-8bd0-a45b2422d091.png)

After these changes, this is how the same profile looks like:

![screen shot 2017-03-21 at 09 56 22](https://cloud.githubusercontent.com/assets/482957/24139523/ab84caba-0e1c-11e7-96e8-9b1dc0f04dee.png)

You can notice how Atom now loads `~ 100ms` faster thanks to the minimization of the I/O associated with listing and reading less style sheets; this improvement should also make startup time more consistent across reloads because it will make Atom rely less on the file system.

One thing to note is that we will still need to update `LessCache` and, as a result, write and read from `~/.atom/compile-cache/less` when booting up Atom. We could potentially minimize that cost too by batching reads and writes, but we think we could defer this to later and address other concerns (like packages preloading) first.

/cc: @atom/maintainers ",1954,True,en,0
14027,1,1,4,Externals,matthewwithanm,2017-03-31T19:57:51Z,73,4,3,13,"### Description of the Change

Add methods that chose what to save based on focus (instead of the active pane). This behavior change means that pane items in docks (#13977) will be savable too.

### Alternate Designs

The alternate we considered was having a single method which attempted to use the focused pane and then fell back to the active one, however this one was chosen because it's more predictable (i.e. doesn't depend on a state the user may not understand intuitively).

### Benefits

Editors in docks can be saved!

### Possible Drawbacks

Some may be relying on the current behavior, and use the command when an editor isn't active.

cc @nathansobo @maxbrunsfeld ",694,True,en,0
14026,3,0,0,Externals,50Wliu,2017-03-17T21:01:08Z,3,3,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

language-less and language-sass now use the property names and values in language-css to keep the languages more in sync.  Credit goes to @Alhadis.  Some issues with Sass have been fixed as well (most notably: Sass's custom property-list syntax is now tokenized properly).
autocomplete-css now has considerably better descriptions on a good portion of the property names.

### Alternate Designs

None.

### Why Should This Be In Core?

Core packages.

### Benefits

It should be easier to propagate property name and value changes across the three CSS languages now.  No more wacky autocomplete descriptions (or at least, a lot less).

### Possible Drawbacks

There may be some Sass (not SCSS) regressions.

### Applicable Issues

None.

Will merge when green.",1078,True,en,0
14024,21,2,0,Internals,as-cii,2017-03-21T08:37:06Z,566,417,35,3,"This pull request is a continuation of #13916 and takes advantage of snapshots to create an `AtomEnviroment` instance as part of `script/build`. Then, at runtime, Atom can simply use this instance and complete its initialization by supplying all the information we didn't have at compile-time: setting the `ATOM_HOME`, reading the user configuration, etc.

The following is a profile of how long it takes to initialize an `AtomEnvironment` on master:

![screen shot 2017-03-17 at 16 43 10](https://cloud.githubusercontent.com/assets/482957/24050971/e1193dda-0b30-11e7-99d2-0167e460d12e.png)

After these changes, this is how the same profile looks like:

![screen shot 2017-03-17 at 16 38 51](https://cloud.githubusercontent.com/assets/482957/24050970/e0f3ad86-0b30-11e7-88ab-1807b433f6ec.png)

You can notice how creating an `AtomEnvironment` is ~2x faster now, as it went down from `~106ms` to `~58ms`.

It's worth noting that just loading the base style sheets took more than `~30ms` (more than half of the `initialize` method). This is due to performing a lot of synchronous I/O but it can be almost eliminated by, again, making use of snapshots and load as much data as possible during `script/build`. This will be addressed in a forthcoming pull request.

/cc: @atom/maintainers 
",1301,True,en,1
14022,2,1,0,Internals,as-cii,2017-03-17T13:55:19Z,12,42,6,0,"Reverts atom/atom#13823.

For the reasons outlined by @nathansobo in https://github.com/atom/atom/pull/13823#issuecomment-287117624, we are going to revert the aforementioned pull request. Long-term we would like remove support for global transpilation but we need a safer transition path to do so, which the above pull request did not provide.

I will merge this as soon as I have a green build, and cherry pick onto beta as well in order to prevent Babel 6 from going to stable.

/cc: @atom/maintainers ",511,True,en,1
14021,4,2,0,Internals,as-cii,2017-03-17T17:05:42Z,19,9,7,0,"This will report the correct file and line numbers on stack traces instead of always showing `<embedded>:absoluteLineNumber`. As a result, it will also fix the `notifications` package, which will be able again to identify which package threw an exception and to create an issue on its repository.

/cc: @nathansobo @Ben3eeE ",326,True,en,0
14004,1,1,0,Internals,kevinsawicki,2017-03-14T19:23:55Z,1,1,1,0,"### Description of the Change

* Fix typo in logged message

### Alternate Designs

* Leave the typo as-is

### Why Should This Be In Core?

* Best home for it üè† 

### Benefits

* Increased correctness

### Possible Drawbacks

* None

### Applicable Issues

* None
",291,True,en,0
13982,1,1,0,Externals,liuderchi,2017-03-14T16:57:33Z,2,0,2,3,"### Description of the Change

By latest comment in #12984 from @as-cii 
adding 'Run Benchmark' menu item for win32 and linux platform.
would be an enhancement.

Also use letter `B` as hotkey hint.

### Benefits

we can run benchmark via menu in win32 and linux platform.

### Applicable Issues

enhancement of #12984",331,True,en,0
13977,40,12,34,Externals,matthewwithanm,2017-03-30T20:16:26Z,1912,151,20,20,"Hey all! I wanted to get this up to get some eyes on it and discuss some stuff. I'm trying to keep all the commits very focused to make things easy to review.

Stuff to Do
-----------

- [x] Add Dock component
- [x] Update atom/tabs to decorate docks
- [x] Serialize docks with workspace
- [x] Update `workspace.open()` to be location-aware
- [x] Remember (and re-use) last known location when opening
- [x] Add `WorkspaceCenter` class and `workspace.getCenter()` method
- [x] Update workspace pane inspection methods (that don't have to do with active panes) to reflect all locations
- [x] Don't create a Panel for docks
- [x] Update event listening strategy for showing toggle buttons
- [x] Swap LocalStorage for StateStore
- [x] Add tab check to drag handler
- [x] Add new `workspace.toggle()` method
- [x] Fix failing tests üòû
- [x] Add tests for new functionality/APIs üòû
- [x] Update Nuclide to new APIs, see if anything breaks
- [x] Fix issue: ""core:save"" only saves active item in center (#14027)
- [x] [atom/flight-manual] Update docs
- [x] [atom/tabs] Fix issue: Dragging overlay not showing up when over a ""peaked"" dock. (z-index?) (atom/tabs#425)
- [x] [atom/tabs] Add tests to make sure docks are decorated (atom/tabs#429)

Questions/Stuff to Discuss
---------------------------

I have some FIXMEs in the code for questions that came up along the way, as well as some others:

- ~[Is there any good way to detect whether something's droppable in the dock?][1]~
  - Just going to keep the Nuclide check for now and defer blessing anything without knowing the problem more
- ~[There are some known edge cases with showing the toggle buttons on hover.][2] Should we address them?~
  - Going to listen for leaving the central pane area, then handle it with mousemoves/position comparisons
- There's code that remembers the last place you put an item so that, if you close it and later open another, it'll show in the same place.
  - ~[Is trying to remember the split worth it?][3] It's not enough to just do it when a pane is moved (as is currently happening) since another pane moving would affect it. We could abuse `serialize()` and do it there instead. (It shouldn't be in the serialized value though because we want it to be shared across workspaces.) That wouldn't be perfect either though, because if the same item was in different locations in two windows, we wouldn't know which was preferred. (Either way, we're still kinda making a ""best guess"" since split location isn't context-independent.)~
    - Not worth it; leave it out for now
  - ~Is there a more efficient storage mechanism than [putting stringified JSON in local storage][4]?~
    - Use StateStore (this means `openItem()` will have to return a promise)
- ~The open API doesn't currently have a way to ensure a new item is created. (It always searches at least the active pane of the center.) Does that matter?~
  - Going to ignore until we have a use case
- ~Is it weird to have some of the workspace API methods (`paneForURI()`, `paneForItem()`)* include the docks while others (`getActivePane()`) don't? Similarly, if `searchAllPanes` includes docks, what's the desired behavior when `searchAllPanes` is false? (Previously, I mistakenly thought it meant to search no panes, so there wasn't any question.)~
  - `paneForURI()` and `paneForItem()` will include docks; active-related stuff won't. therefore, `searchAllPanes = true` will search docks, `false` (which only checks the active pane) won't
  - a `workspace.getCenter()` will be added and return an instance of the new `WorkspaceCenter` class, which trivially wraps `workspace.paneContainer`

* Oops, looks like I dropped the commit that updated those in a rebase. I'll add them back, depending on how we answer this question.

[1]: https://github.com/atom/atom/pull/13977/files#diff-aed5b259cccd55443edaa7b93d0d2bb0R144
[2]: https://github.com/atom/atom/pull/13977/files#diff-aed5b259cccd55443edaa7b93d0d2bb0R166
[3]: https://github.com/atom/atom/pull/13977/files#diff-4f265837c9eeb2d4123aad469237b2a2R295
[4]: https://github.com/atom/atom/pull/13977/commits/29bf4c90200cfec9e348d6518a2968db2bb6eae0",4196,True,en,0
13976,2,0,0,Internals,as-cii,2017-03-10T15:46:39Z,25,0,3,0,"This new private API will allow settings-view to communicate asynchronously with the main process to resolve proxies instead of using `remote` and blocking the renderer process during startup.

/cc: @atom/maintainers ",219,True,en,0
13970,1,2,0,Externals,matthewwithanm,2017-03-10T17:19:15Z,62,46,1,0,"This is a refactoring that sets up the work for #13878 (docks).

Because items will be able to dictate their preferred locations, we need to detangle the item creation from their placement.

I thought it was a little weird that the error was being thrown synchronously (instead of rejecting the returned promise), but there's a test that checks it so I kept it as-is.",371,True,en,0
13968,1,1,0,Externals,matthewwithanm,2017-03-10T00:03:54Z,0,6,1,0,"The comment was actually no longer accurate since arrow functions aren't newable. After doing an audit, @maxbrunsfeld determined that it could just be removed.",159,False,en,0
13965,2,8,0,Externals,krnowak,2017-04-05T22:29:34Z,41,12,7,27,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Currently the `--install` flag of the `./script/build` is a boolean flag that either installs atom to some predefined location or skips it. This PR extends the flag so it can accept a value telling the script where to install atom. Passing just `--install` will behave as it used to so far, so it will install atom to `/usr/local` on linux and other default locations on darwin and windows. Same with not passing the flag - atom won't be installed. But passing `--install=/opt/atom` will install atom under the given location.

The documentation is updated accordingly.

### Alternate Designs

I haven't considered other designs, extending the `--install` flag looked natural to me.

### Why Should This Be In Core?

It's a part of the builder script, so it can't be a package.

### Benefits

One can install the code in the location of choice. (Like for flatpaks, we want to install atom under `/app`).

### Possible Drawbacks

It's backward compatible, so not sure if there are drawbacks.

### Applicable Issues

Didn't file any.
",1350,True,en,0
13963,25,6,1,Internals,BinaryMuse,2017-03-27T17:56:38Z,292,62,7,18,"This PR addresses https://github.com/atom/atom/issues/13873, where the core issue is that re-opening a project when you have a window open with no project folders simply adds those project folders to the existing window, but adding project folders does not restore state for that set of project folders

The primary bad UX that results from this is that re-opening a project from the ""Recent Projects"" menu when you have a fresh Atom window doesn't really restore the previous project state; it just adds those folders to the project and any unsaved work that's stored in the project state is lost, making the user a [sad panda](http://i.imgur.com/Ddd4lWp.jpg).

This addresses the problem by simply restoring the project state for a folder or set of folders when:

1. The folders are added via ""Add Project Folders,"" or the folders are added automatically via the ""Open"" menu or via the `atom` command,
2. The folders are being added to an Atom window in which there are zero project folders

This results in [happier pandas](http://i.imgur.com/xlgcLBy.gif).

**Edge Cases**

‚úÖ  The Atom window has no project folders but already contains pane items

In this case, we serialize all the current pane items, restore the saved state from the snapshot, and then re-add the serialized pane items to the new workspace. We skip unchanged, empty editors (ones with no changes and with no content, like the one you get when ""Open Empty Editor On Start"" is enabled), so in the case that the user opens a new window and immediately re-opens a previously open project, the right thing should Just Happen‚Ñ¢. It's automagical! üåà 

![restore-project-state-with-open-items](https://cloud.githubusercontent.com/assets/189606/23728621/b0ad6402-0412-11e7-96f2-c4714c63ec9b.gif)

TODO:

- [ ] Don't ask the user to save or discard the changes
- [ ] Make the currently active pane item the active pane item after the state is restored (unless the user specifically opened a file, in which case that file will be active post-restore)

‚ùå  The Atom window has pane items that ""conflict"" with ones in the state snapshot

If the user already has a file open with unsaved changes, and that same file is open in the saved state snapshot, then the result of the operation is that there will be two copies of the file open, each backed by a different buffer.

This is super edge-casey as it's kinda hard to get into this state (since opening a file adds its parent folder to the project automatically), so I'm not sure if it's one we need to address. üí≠ s appreciated.

TODO:

- [ ] ???

‚ùå  Using `project.setPaths` or `project.addPath` does not trigger this behavior

Right now, the code paths for ""Application: Add Project Folder"" and for opening a file with the ""Open"" command or with `atom` go through code path that `project.setPaths` and `project.addPath` do not. We opted not to change that behavior since it would be a breaking change.

**Design Considerations**

It turns out that serializing a text editor and then deserializing it into a new `AtomEnvironment` is not very straightforward. The sorta hacky solution implemented here so far is to:

1. Serialize all the current pane items (text editors)
2. Also serialize all the buffers in `@project.buffers`
3. Restore the serialized `AtomEnvironment` state (minus window size and fullscreen setting)
4. Push the serialized buffers from step 2 into the new `@project.buffers`
5. Deserialize the serialized pane items from step 1

This feels üôÖ pretty gross üôÖ but we're not quite sure of a better way to handle it. üí≠ s from @atom/core highly appreciated!

---

Fixes #13873
Fixes #13861
Fixes #11293
Fixes #10044",3717,True,en,1
13955,3,3,0,Externals,matthewwithanm,2017-03-08T02:49:32Z,416,357,4,0,,0,False,en,0
13954,3,2,0,Externals,matthewwithanm,2017-03-08T02:48:49Z,463,366,8,0,"This PR converts PanelContainer, PanelContainerElement, and their related tests to JavaScript.",94,False,en,0
13949,7,1,0,Internals,as-cii,2017-03-10T14:00:30Z,133,151,9,3,"When Atom boots up it is extremely crucial to perform as little synchronous operations as possible in order to minimize startup time. This pull request does so by:

1. Exposing load settings to `BrowserWindow`s as JSON.

    When accessing objects in the main process via the `remote` module, Electron returns proxy objects that are references to the original ones. This means that trying to access a remote object's property or function results in a synchronous message exchange with the main process. <br>

    In Atom core we frequently access the load settings coming from the main process, especially during startup. This caused a lot of synchronous I/O which was blocking the renderer process for several milliseconds.
  
    With this pull request, instead of exposing load settings as a JavaScript object, we serialize them to JSON in the main process and parse them back to a JavaScript object in the renderer processes. This allows us to get a full copy of the object locally and pay for I/O only once when retrieving load settings from the main process for the first time.

2. Disabling zoom in the main process rather than in the renderer process.

    With this pull request we will register the `display-added` and `display-removed` events only once in the main process in order to disable zoom (see
    #11345) directly instead of unnecessarily paying for I/O in the renderer process during startup.

3. Registering enter/leave fullscreen events in the main process rather than in the renderer process.

    This will still notify render processes when such events are triggered without, however, incurring the additional cost of synchronously retrieving a `BrowserWindow` (and its properties) via `remote` during startup.

4. Replacing `localStorage` with `StateStore` in `HistoryManager`.

    Instead of using `localStorage` to store and retrieve the project history, with this pull request we will use `StateStore` so that we can retrieve state asynchronously without blocking Atom during startup. @damieng: I think this slightly changes the public `clearProjects` API by making it asynchronous. Considering the recent introduction of the API and its low adoption (I couldn't find anyone using it in packages), I believe this might be negligible; if you have any concern about it, though, please don't hesitate to raise them up.

These improvements are particularly evident during the construction of an `AtomEnvironment` instance. This is how a typical chart of that code path looks like today on master:

![screen shot 2017-03-07 at 11 10 00](https://cloud.githubusercontent.com/assets/482957/23651715/ae6bb898-0326-11e7-9059-22eb4bdd7f9a.png)

After removing all the synchronous I/O, the same code path looks like the following:

![screen shot 2017-03-07 at 11 05 29](https://cloud.githubusercontent.com/assets/482957/23651745/c4b1626a-0326-11e7-990e-cb9962520920.png)

On average, with these changes we save `~ 40ms` for the construction of `AtomEnvironment`. Moreover, the experience should be snappier across all the code paths because we won't pay any additional cost to retrieve load settings and to save project history state anymore. 

The next step will involve building an `AtomEnvironment` instance right inside the snapshot (as opposed to doing so at runtime) and thus potentially save 80-90% of the remaining `~ 80ms` observed after the changes introduced by this pull request.

/cc: @atom/maintainers ",3471,True,en,0
13947,5,33,5,Externals,anatoli26,2017-05-08T16:33:24Z,10,7,3,62,"Make an option to *always* restore the last session, no matter how Atom is invoked (#9643).

### Description of the Change

`src/config-schema.js`: the change adds the option to the Settings window.

`src/main-process/atom-application.coffee`:
- line 114: load previous session if the option is turned on;
- line 563: IMO it's a bug, here the newly created window is activated, but `@lastFocusedWindow` is not updated, so on the second invocation at the same moment in time there'll be no lastFocusedWindow and a second (new) window would be created (at line 542/544 -> 550/552).
- line 604: if any of the options is checked, restore the last session (applicable when starting atom without arguments)
- line 817: a function to duplicate an object, taken from: https://coffeescript-cookbook.github.io/chapters/classes_and_objects/cloning

### Alternate Designs

TL;DR: none, see the issue #9643 for an extended discussion.


### Why Should This Be In Core?

This is a standard behavior for most of modern multi-tab apps today, i.e. the ability to restore the last session after crash or normal exit, no matter how the app is invoked for the first time since the last session (i.e. with or without path parameters).


### Benefits

See the previous point.


### Possible Drawbacks

None as this is an option turned off by default, so it won't affect anyone if not explicitly terned on by the user.


### Applicable Issues

So far no issues were discovered.


### Other

script/test: 23 passing (2m), i.e. no errors when the option is turned off (the default behavior)
Jasmine specs in the ./spec folder are not provided

![atom_settings](https://cloud.githubusercontent.com/assets/22968420/23647967/5a4bb3fa-02f7-11e7-999a-6a513a885bd8.png)
",1782,True,en,1
13945,1,0,0,Internals,damieng,2017-03-06T20:20:12Z,1,1,1,0,,0,False,en,0
13944,1,1,0,Externals,proggga,2017-03-06T21:04:04Z,1,1,1,0,"### Requirements
No requirements

### Description of the Change
Link on this README.md is broken (people from MacOS can't get this link from current version of README.md

### Alternate Designs

May be remove links from readme.md and put link to ""docs""

### Why Should This Be In Core?

Same as Description of the Change

### Benefits

Clean README always better (any wrong text in README make bad view of code/repository)

### Possible Drawbacks

Don't understand

### Applicable Issues

Don't understand
",530,False,en,0
13941,8,0,0,Externals,50Wliu,2017-03-06T20:21:39Z,9,9,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

* language-java
  * Tokenize try-resource blocks
  * Fix an issue where inline new statements would not be closed
* language-json
  * Add `meta.structure.dictionary.key.json` to allow syntax theme authors to style keys
  * Support `.stylintrc`, `.languagebabel` file types
* language-less
  * Tokenize CSS variables
* language-php
  * Add a new snippet for anonymous functions
* language-property-list
  * Support `.wflow` file type
* language-sass
  * Tokenize interpolation in selectors
  * Tokenize CSS variables
  * Fix an issue where parentheses inside property values would be tokenized incorrectly
  * Fix an issue where comments would not be tokenized inside `@media` rules
* language-text
  * Update legal date to 2017
* language-xml
  * Support Vim and Emacs modelines
  * Support XML declarations
  * Support `.kst` file type
* language-yaml
  * Fix an issue where multiline strings were not closed correctly, preventing embedding of the grammar
  * Support `.stylelintrc` file type

### Benefits

See above.

### Possible Drawbacks

Most of the changes here are rather minor, the biggest ones probably being the inline new changes of language-java, the selector changes in language-sass, and the string rework in language-yaml.",1567,True,en,0
13940,11,0,0,Internals,as-cii,2017-03-10T08:01:37Z,35,40,4,3,"This pull request upgrades fs-plus to version 3.0.0 across all Atom dependencies, so that we can snapshot it and go on with #13916.",131,False,en,0
13929,1,1,0,Internals,as-cii,2017-03-04T15:17:05Z,19,2,2,0,"Previously, when calling `destroy` on a `PanelContainer` containing multiple panels, Atom would throw a `Cannot read property 'destroy' of undefined` exception (https://circleci.com/gh/atom/atom/2832). This was due to iterating over the panels while at the same time destroying them, which caused the iterated array to be modified during the loop.

With this commit we slice the array before iterating over it so that destroying a `PanelContainer` doesn't throw exceptions anymore.

/cc: @nathansobo @maxbrunsfeld ",518,True,en,0
13922,4,0,5,Externals,matthewwithanm,2017-03-03T21:03:36Z,3484,2919,4,0,"This converts `workspace.coffee` and `workspace-spec.coffee` to JavaScript. I split it into three different commits for review purposes:

- The first is just the automated decaffeinate step and probably doesn't need to be reviewed.
- The second is tweaking to make the linter happy. I tried to avoid any real changes here. (The one exception being `TestItemElement` in the spec bc of the difference bt CS and JS classes)
- The third is the real stuff. It cleans things up, removes implicit returns, and generally makes things a little more idiomatic.",554,True,en,0
13919,3,0,0,Internals,maxbrunsfeld,2017-03-02T20:24:02Z,65,28,6,0,This will help us to notice assertions failing during our development.,70,False,en,0
13918,1,1,0,Internals,nathansobo,2017-03-02T18:10:31Z,3,0,1,0,"This is to investigate a case where the default marker layer of the editor is destroyed without the editor itself or its buffer being destroyed, which is causing `Cannot decorate a destroyed marker` exceptions.",210,False,en,0
13916,59,16,0,Internals,as-cii,2017-03-16T11:22:02Z,431,335,27,13,"For a long time in Atom we have been wanting to have more control over startup time and, as part of this effort, back in November of last year we created an [in-depth issue](https://github.com/atom/atom/issues/13253) that illustrated where time was (and is) spent during the initialization of an Atom window. What we realized at the time was that most of the operations happening during startup were redundant and that we could use the information we had at build-time to minimize their cost.

### V8 snapshots

[V8 snapshots](https://v8project.blogspot.it/2015/09/custom-startup-snapshots.html) allow Electron applications to execute an arbitrary JavaScript file and output a binary file containing a heap with all the data that's left in memory after running a GC at the end of the provided script.

This suits the startup scenario described above perfectly, because we could use it to eagerly perform work when running `script/build` and just expose the computed data to Atom when it is opened.

The tricky part of using snapshots is that the code is executed in a bare V8 context, meaning that we have no access to Node/Electron features nor to DOM APIs and we can only run plain JavaScript code without having access to native modules either. So, in order to circumvent this issue, we decided to defer usages of forbidden APIs until runtime so that all the other computation could still happen as part of the snapshot. As a result, we set out to create a tool that automates deferring the usage such features in a way that didn't sacrifice code readability: electron-link.

### electron-link

[electron-link](https://github.com/atom/electron-link) is node module that takes a JavaScript file as the entry point and a list of modules that need to be required lazily. Then, starting from the main module, it traverses the entire require graph, replacing all the forbidden requires in each file with a function that will be executed later at runtime. The output of electron-link is a file that can be passed to the `mksnapshot` utility to eventually generate the snapshot blob for use in Electron.

electron-link can also determine whether a module can be snapshotted or not. For instance, the following code can be snapshotted:

```js
const path = require('path')

module.exports = function () {
  return path.join('a', 'b', 'c')
}
```

And the resulting code would look similar to the following snippet:

```js
let path;
function get_path () {
  return path || path = require('path');
}

module.exports = function () {
  return get_path().join('a', 'b', 'c')
}
```

Conversely, when trying to transform the following code, electron-link will throw an error because it is using a forbidden module at require-time:

```js
const path = require('path')

module.exports = path.join('a', 'b', 'c')
```

### Improving `require` time

While this pull request lays the groundwork for using snapshots for all the concerns described in https://github.com/atom/atom/issues/13253, it only speeds up the time we were previously spending in `require` calls. The reason for beginning with just this one feature is that it will allow us to verify the feasibility of snapshots in production and to ship new performance improvements incrementally.

The following is a typical chart of Atom startup time:

![screen shot 2017-03-02 at 12 02 49](https://cloud.githubusercontent.com/assets/482957/23504533/348fb306-ff40-11e6-8bac-264060588ce5.png)

*Please, note that these benchmarks profile everything from startup till the end of packages activation. There is other stuff going on after activating packages but it depends on asynchronous I/O and the scheduling of idle callbacks, so it adds noise to the measurements.*

On average it takes `~ 0.9s - 1.0s` to load a stock Atom window and activate its packages when no editor is open and the tree-view is closed. A lot of it is spent in requiring modules and executing them to create classes or define objects. This is how the same chart looks like after this pull request:

![screen shot 2017-03-02 at 12 01 21](https://cloud.githubusercontent.com/assets/482957/23504534/34b323ea-ff40-11e6-8f19-462592b0eb42.png)

You can notice how the calls to `require` have almost disappeared (some still need to take place for Node core modules) and how the total time has went down to `~ 0.7s - 0.8s` improving startup time by ~ 15-20%.

Another scenario worth of comparison is loading an Atom window with the tree-view opened. This is how it looks like on **master**:

![screen shot 2017-03-02 at 12 11 24](https://cloud.githubusercontent.com/assets/482957/23504869/886dbbb6-ff41-11e6-8d00-63e62857e79b.png)

You can see it was `~ 100ms - 120ms` slower and, in part, this is due to loading the package's modules. With the snapshot, on the other hand, we already paid that cost upfront during `script/build` and therefore the chart looks almost the same in terms of time (we still incur some overhead due to accessing the disk synchronously in the tree-view, but that's another story):

![screen shot 2017-03-02 at 12 12 14](https://cloud.githubusercontent.com/assets/482957/23504870/8891088c-ff41-11e6-9b66-cc2a3c2e9741.png)

This kind of improvement should apply to all the bundled packages because they are now required during the snapshotting phase.

### Caveats

Please, note that this pull request disables the asar bundle. Its introduction was mainly driven by two factors:

1. Lots of file system calls to stat the files.
2. Long path issues on Windows.

The former will be automatically addressed by snapshots because most of the fs calls will now happen during `script/build`, whereas the latter was solved by upgrading to npm 3 back in #11897.

Another caveat is that all the code that is snapshotted won't be inspectable in the DevTools, although stack traces should still be present and provide clear information about the call site where the error was thrown from.

### Next steps

Overall, we are really excited about snapshots and we think we can further improve startup time by performing even more work during `script/build`. This could include eagerly constructing an `AtomEnvironment`, parsing grammars and snippets, loading and parsing less style sheets, etc.

Also, before merging this there are a couple of additional tasks that need to be addressed:

* [x] Merge https://github.com/atom/fs-plus/pull/37.
* [x] Merge https://github.com/atom/node-pathwatcher/pull/119.
* [x] Clean up `shouldExcludeModule` and remove unnecessarily excluded modules.
* [x] Use https://github.com/electron/mksnapshot to generate the snapshot.
* [x] Copy the generated snapshot to the right location on Mac.
* [x] Copy the generated snapshot to the right location on Windows.
* [x] Copy the generated snapshot to the right location on Linux.
* [x] Ensure source maps location translation in stack traces works correctly.
* [x] Fix tests.
* [x] Merge #13940.
* [x] Merge https://github.com/atom/apm/pull/693.
* [x] Merge #13254.
* [x] Test drive!

/cc: @atom/maintainers ",7097,True,en,0
13912,1,0,0,Externals,50Wliu,2017-03-03T15:51:47Z,1,8,2,1,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

As noted in the comment, this workaround should have been removed once we upgraded to Chromium 51+.  We are now on Chromium 53, so this should be safe to remove.

### Alternate Designs

None.

### Why Should This Be In Core?

N/A

### Benefits

Maintenance

### Possible Drawbacks

None.

### Applicable Issues

None.",632,True,en,0
13898,3,0,0,Internals,maxbrunsfeld,2017-03-02T00:59:59Z,2,6,3,1,Refs https://github.com/atom/atom/issues/1667#issuecomment-280896197,68,False,en,0
13887,1,0,0,Internals,as-cii,2017-02-27T17:29:27Z,2,1,1,0,"Instead of throwing an error when supplying `ref` and/or `key`to `TextEditor.prototype.update` we will now simply ignore them. This change is needed because of https://github.com/atom/etch/pull/41 where we decided to pass `key` and `ref` to child components in order to avoid expensive copy operations.

/cc: @nathansobo ",323,True,en,0
13880,250,42,0,Internals,nathansobo,2017-05-05T17:57:09Z,8593,14489,62,67,"In this PR, I plan to completely rewrite editor rendering to take advantage of CSS layout containment and  intersection observers. This PR will also use Etch to perform declarative updates instead of the existing presenter with manual DOM manipulation, which has not aged well. I'm optimistic that a simpler layout, a cleaner approach to DOM updates, and better use of features such as layout containment can make our rendering faster and much more maintainable.

My goal is to rethink all of the DOM interactions associated with the editor to make sure things are as optimal as possible.

## Tasks

* [x] Content
  * [x] Render initial lines
  * [x] Render initial line numbers
  * [x] Update on scroll
  * [x] Update on buffer changes
  * [x] Adjust soft wrap on resize
  * [x] Scroll past end option
  * [x] Mini editors working
  * [x] Hide line numbers option
  * [x] Placeholder text
  * [x] Auto height and width
  * [x] Synthetic scrolling
  * [x] Dummy scrollbars
* [x] Cursors
  * [x] Basic rendering
  * [x] Auto-scroll
    * [x] Vertical
    * [x] Horizontal
  * [x] Blinking
  * [x] Option to hide with non-empty selections
  * [x] Cursors positioned after a fold marker are not displayed correctly
  * [x] Official API for customizing cursor styling
* [x] Input handling
  * [x] Position hidden input element
  * [x] Focus
  * [x] Editor commands
  * [x] Text input
  * [x] IME input
  * [x] Disabled input
  * [x] Mouse handling
    * [x] Single click to set cursor position
    * [x] Double click to select word
    * [x] Triple click to select line
    * [x] Add cursors with cmd-click
    * [x] Expand selections with shift-click
    * [x] Drag selections
    * [x] Autoscroll when dragging selections
    * [x] Autoscroll when dragging gutter
    * [x] Click/drag gutter to select lines
    * [x] Click gutter to toggle folding
    * [x] Destroy folds when clicking fold markers
    * [x] Middle mouse paste on Linux
    * [x] Scroll horizontally on shift-wheel
* [x] Decorations
  * [x] Make marker layer events synchronous
  * [x] Line
  * [x] Line Number
  * [x] Highlights
  * [x] Highlight flashes
  * [x] Overlays
  * [x] Custom gutters
  * [x] Blocks
  * [x] Never decorate invalidated markers
  * [x] Fix git-diff gutter decorations being shown at the end of the tile
* [x] Update on external changes
  * [x] Resize
  * [x] Gutter container resize
  * [x] Font size and styling changes
  * [x] Show/hide
  * [x] Refresh scrollbar appearance when scrollbar styling changes
* [x] Other
  * [x] Core tests passing
  * [x] Package tests passing
  * [x] Delete obsolete tests
  * [x] Do we need to support `onDidChangeFirstVisibleScreenRow`?
  * [x] Add screen-row data fields to line nodes for package compatibility
  * [x] Audit API of previous `TextEditorElement` implementation
  * [x] Clean up editor style sheets
  * [x] Revisit virtual node recycling and explore other approaches
  * [x] Schedule updates directly in editor model instead of via subscriptions
  * [x] Ensure proper setup/teardown on attach/detach
  * [x] `Failed to activate the pigments package, cannot find highlights-component in the require cache` We'll need to introduce a new API to support the use case that @abe33 is monkey patching private implementation details to support. We'll need to merge this before doing that.
  * [x] Maintain logical scroll position when changing font size
* [x] Regressions
  * [x] Ensure autoscrolling works correctly (when clicking ""go to code"" the cursor is positioned correctly, but scroll top is wrong).
  * [x] Stack-overflow exception with Nuclide Debugger (https://github.com/atom/atom/pull/13880#issuecomment-298391556)
  * [x] `Failed to activate the minimap-autohider package, cannot read property onDidChangeScrollTop of null`
  * [x] `Uncaught TypeError: this.textEditorElement.getFirstVisibleScreenRow is not a function from minimap`
  * [x] `Uncaught TypeError: editorElement.component.pixelPositionForMouseEvent is not a function from linter-ui-default`
  * [x] With atom-material-syntax matching brackets are not highlighted
  * [x] highlight-selected does not highlight selected words but it works when setting a custom highlight-selected style in the personal style sheet.
  * [x] Matching brackets are not highlighted when they occur on the same line and material-syntax is on (https://github.com/atom/atom/pull/13880#issuecomment-296623782)
  * [x] `Uncaught TypeError: Cannot read property 'id' of null` (https://github.com/atom/atom/pull/13880#issuecomment-297352917)
  * [x] Content of mini editors is shifted right as if there were a gutter, but there isn't. (https://github.com/atom/atom/pull/13880#issuecomment-296514927)
  * [x] Subpixel anti-aliasing sometimes breaks for a specific tile, possibly due to its contents overflowing.
  * [x] Tiles are laid out incorrectly during the first frame (https://github.com/atom/atom/pull/13880#issuecomment-296293639)
  * [x] Editor width for soft-wrap should take into account vertical scroll bar width
  * [x] Clicking past the last line does not update cursor position when scrollPastEnd is disabled.
* [ ] Optimization (any of these can happen after integrating and merging)
  * [x] ~~Contain layout of cursor position and selection count in status bar~~
  * [x] ~~When a tile is assigned a different start row, discard all of its lines rather than removing them 1 by 1~~
  * [x] Recycle DOM nodes?
  * [x] Optimize line numbers query in display layer
  * [ ] Cache isFoldable
  * [ ] Low-hanging fruits in keystroke code path ",5632,True,en,1
13875,1,3,0,Externals,absynce,2017-02-23T23:22:37Z,1,1,1,0,"
### Requirements

* [&check;] Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* [&cross;] All new code requires tests to ensure against regressions (It's not new.)

### Description of the Change

Change the Windows apm CLI shell reference to the correct path.

### Applicable Issues

Fixes #13874.
",440,False,en,0
13843,1,0,0,Internals,maxbrunsfeld,2017-02-18T00:50:38Z,2,2,1,0,"There was a bug in `parseCommandLine` that prevented the `--resource-path` flag from being used properly.

üçê 'd with @nathansobo",133,True,en,0
13842,1,2,0,Internals,ungb,2017-03-02T21:05:23Z,4,0,1,13,"### Description of the Change
Added logic from @progkix to support builds for 32bit linux.

### Alternate Designs

N/A
### Why Should This Be In Core?

Build scripts are in core.

### Benefits

allows people to build on 32bit linux.

### Possible Drawbacks

None so far. Will test this change before merging
### Applicable Issues


Creating PR off branch on master to trigger travis build.  See https://github.com/atom/atom/pull/13835 of original PR of same change.",485,False,en,0
13825,1,2,0,Externals,50Wliu,2017-02-23T22:44:48Z,7,3,1,8,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

First, here's a before/after comparison on Windows:

|Before|After|
|-------|-----|
|![specs-before](https://cloud.githubusercontent.com/assets/2766036/22984731/500a632e-f374-11e6-9dbc-86dbaa8bf82e.png ""Before"")|![specs-after](https://cloud.githubusercontent.com/assets/2766036/22984485/7bf7cef0-f373-11e6-9c74-70926ed40f59.PNG ""After"")|

Much nicer.

Changes include:
* Updating to the new `.<anonymous>` syntax
* Stripping away `file:///` identifiers on Windows paths and converting the rest of the path to use Windows path separators (in order for it to get relativized correctly)
* Relativizing paths in parentheses

### Alternate Designs

Instead of relativizing the path twice, depending on if its in parentheses or not, a more general `line.replace(///#{_.escapeRegExp(spec.specDirectory}#{_.escapeRegExp(path.sep}///, '')` could be used.  I am unsure if that would potentially relativize more than we wanted.

### Why Should This Be In Core?

Because it fixes already-implemented code in core.

### Benefits

See before/after picture above.

### Possible Drawbacks

I don't foresee any.

### Applicable Issues

None.

/cc @damieng for the Windows portions.",1492,True,en,0
13823,5,25,7,Internals,as-cii,2017-02-17T10:10:00Z,42,11,5,1,"This pull request upgrades babel to the latest version and runs a minimal set of transformations when transpiling babel files. In particular, only the following cases will be affected by the transpilation step:

1. `import` or `export` expressions.
1. `async`/`await` expressions.
1. Do expressions.
1. Function bind expressions.
1. Decorators.
1. Object rest spread expressions (e.g. `{a: 1, b: 2, ‚Ä¶anotherObject}`).
1. Class properties.
1. JSX code.
1. Flow code.

We shouldn't need any other transformation because Electron runs on a pretty recent V8 version. As a result, the generated code should be cleaner and source maps should look less crazy as well. Please, note that I was forced to update babel because the previous `asyncToGenerator` plugin had some bugs when not transpiling ES2015 classes.

/cc: @atom/core ",839,True,en,1
13820,2,31,0,Internals,maxbrunsfeld,2017-02-15T21:54:16Z,104,2,4,0,"Fixes #979

#### Changes:
1. We force soft wraps for lines that exceed 500 chars. This avoids the rendering bottleneck that we used to experience because we don't break lines into horizontal tiles. It's actually a pretty useful behavior, I think, because a single un-wrapped line of code is pretty hard to read.

2. We don't pass more than 500 chars at a time to first-mate. There was already a limit to the number of tokens that we read from first-mate, but because the TextMate grammars can contain regexps with arbitrary lookahead and backtracking requirements, this token limit did not mitigate all of the performance problems of tokenizing large lines. Now we avoid passing more than 500 characters of text at a time to the tokenizer.

#### Benchmark results

We added a benchmark for opening large single-line files. When run agains Atom *prior* to this PR, this benchmark would basically not terminate üò¨ . Now, it executes in a reasonable amount of time:

```
Opening a large single-line file:
512	1442.5700000000002
1024	2813.6100000000006
2048	5145.779999999995

Max time event loop was blocked after opening a large single-line file:
512	14.859999999999673
1024	8.095000000001164
2048	5.575000000004366

Clicking the editor after opening a large single-line file:
512	6.609999999999673
1024	3.9499999999970896
2048	4.955000000001746

Scrolling down after opening a large single-line file:
512	0.18499999999949068
1024	0.05000000000291038
2048	0.05000000000291038
```

You can see that the editor is immediately responsive after opening the file, regardless of its size. Unfortunately, the time to open a large single-line file still scales linearly with the size of the file. This is because the `DisplayLayer` currently indexes files on a line-wise basis, so for a single-line file, it has to index the entire file to answer any queries.

Still, a reasonably-sized minified file like [jQuery 3.1.1](https://code.jquery.com/jquery-3.1.1.min.js) (85 kb, 4 lines), opens almost instantly üéâ .


/cc @ungb Can you give this a test, and link to any relevant issues about hangs when opening files with long lines?",2161,True,en,0
13818,3,0,0,Internals,nathansobo,2017-02-17T10:15:16Z,56,42,4,2,"Previously, TextEditor.decorationsForScreenRowRange only returned decorations for markers on the default layer. This was inconsistent with other methods and was also making it impossible to add block decorations for markers on non-default marker layers.

üçê 'd with @as-cii 

/cc @smashwilson ",299,True,en,0
13817,1,1,0,Internals,nathansobo,2017-02-14T18:16:52Z,9,1,2,0,"We're seeing exceptions like the following:

```
TypeError Cannot read property 'findMarkers' of undefined 
    /app.asar/src/decoration-manager.js:151:20 module.exports.DecorationManager.decorationsStateForScreenRowRange
    /app.asar/src/text-editor.js:1698:37 module.exports.TextEditor.decorationsStateForScreenRowRange
    /app.asar/src/text-editor-presenter.js:1381:44 module.exports.TextEditorPresenter.fetchDecorations
    /app.asar/src/text-editor-presenter.js:125:14 module.exports.TextEditorPresenter.getPreMeasurementState
    /app.asar/src/text-editor-component.js:264:60 module.exports.TextEditorComponent.updateSyncPreMeasurement
    /app.asar/src/text-editor-component.js:196:12 module.exports.TextEditorComponent.updateSync
    /app.asar/src/text-editor-component.js:303:21 module.exports.TextEditorComponent.becameVisible
    /app.asar/src/text-editor-component.js:994:16 module.exports.TextEditorComponent.checkForVisibilityChange
    /app.asar/src/text-editor-component.js:980:17 module.exports.TextEditorComponent.pollDOM
    /app.asar/src/text-editor-component.js:3:59 none
    /app.asar/src/view-registry.js:263:9 module.exports.ViewRegistry.performDocumentPoll
    /app.asar/src/view-registry.js:226:14 module.exports.ViewRegistry.performDocumentUpdate
    /app.asar/src/view-registry.js:3:59 none
```

One way these could occur is if a package attempts to decorate an already destroyed marker layer. If that happened, we would previously silently allow the decoration to be created and then end up querying the editor's display layer for the destroyed layer's id, getting an undefined result.

/cc @maxbrunsfeld ",1657,True,en,0
13813,1,0,0,Externals,segevfiner,2017-04-09T23:24:17Z,1,1,1,54,"### Description of the Change

Whoops:

```
Cannot read property 'setPath' of undefined
TypeError: Cannot read property 'setPath' of undefined
    at Object.setUserData (C:\Users\Segev\Atom\Atom x64\resources\app.asar\src\atom-paths.js:53:12)
    at start (C:\Users\Segev\Atom\Atom x64\resources\app.asar\src\main-process\start.js:27:13)
    at Object.<anonymous> (C:\Users\Segev\Atom\Atom x64\resources\app.asar\src\main-process\main.js:36:1)
    at Module._compile (module.js:556:32)
    at Object.Module._extensions..js (module.js:565:10)
    at Module.load (module.js:473:32)
    at tryModuleLoad (module.js:432:12)
    at Function.Module._load (module.js:424:3)
    at Object.<anonymous> (C:\Users\Segev\Atom\Atom x64\resources\electron.asar\browser\init.js:166:8)
    at Module._compile (module.js:556:32)
```

I didn't test this, submitted directly from GitHub

### Why Should This Be In Core? & Benefits

It should fix the ability to use a portable electronUserData directory.",1007,True,en,0
13810,5,0,0,Internals,maxbrunsfeld,2017-02-15T22:13:29Z,33,12,2,1,"Fixes https://github.com/atom/atom/issues/13729

* [x] Ensure that the correct directory's state is loaded.
* [ ] ~~Remove duplication between `AtomWindow` constructor and `AtomEnvironment.openLocations` method.~~

‚òùÔ∏è We're going to defer this refactor until we take some time to rewrite the main process code.",319,True,en,1
13808,1,1,0,Internals,nathansobo,2017-02-13T21:19:54Z,12,0,1,0,"We're seeing the following error message in [this failing build](https://circleci.com/gh/atom/atom/2588) on CircleCI:

```
SecKey API returned: -25293, (null)/Users/distiller/atom/out/Atom.app: unknown error -1=ffffffffffffffff
```

Based on [this Stack Overflow article](http://stackoverflow.com/questions/39868578/security-codesign-in-sierra-keychain-ignores-access-control-settings-and-ui-p) it looks like they *may* have upgraded their images to Sierra and are causing this problem.

This PR runs the ‚ú®  command suggested in that article to hopefully fix the issue.",579,True,en,0
13806,10,1,0,Internals,nathansobo,2017-02-13T20:38:58Z,213,117,6,0,"In researching the cause of https://github.com/atom/atom/issues/13377, we've decided to make some changes to the element pool.

1) Based on a hypothesis that a package could be inserting foreign nodes into the text editor's DOM structure, we now only free elements that the element pool itself created.
2) If the above hypothesis is incorrect, we now report *assertion failures* rather than throwing exceptions, and include the HTML of the freed element just in case that might be helpful.

In addition, we've converted the class and tests to JS and removed some closure allocations on :fire: code paths.

We think we should probably merge this only to 1.15 (beta) because it's a somewhat risky change, but we'd like to get feedback pretty soon from it.

/cc @maxbrunsfeld ",782,True,en,0
13795,13,2,0,Internals,nathansobo,2017-02-18T19:59:43Z,89,215,13,7,"With the introduction of Chrome 53 in Electron 1.4, we now have access to a fully functional `IntersectionObserver` API, which can be used to detect when editors change in visibility. This means we can discard the previous `MutationObserver` based polling system, which creates a drag on frame rates in certain circumstances. This impact is hard to quantify because *measuring* the frame rate with mutation observers in place in the current scrolling scheme seems to slow performance dramatically, making this hard to measure. Regardless it's a big simplification to not require full DOM observation.

This PR replaces polling with the following approaches:

* Visibility detection: [`IntersectionObserver`](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)
* Resize detection of editors and overlay decorations: Scroll event hack via the [`element-resize-detector`](https://github.com/wnr/element-resize-detector) library.
* Transferring background to editor tiles: Plain CSS with `background-color: inherit` (now possible with the removal of the shadow DOM)",1091,True,en,0
13781,1,0,0,Internals,maxbrunsfeld,2017-02-14T16:47:38Z,3,2,1,4,"/cc @ungb 

I believe this resolves the first exception listed in https://github.com/atom/atom/issues/13778#issuecomment-278773192
(`TypeError¬∑Cannot read property 'buildTextEditor' of null`).",196,True,en,0
13768,1,4,0,Internals,nathansobo,2017-02-07T21:55:54Z,63,78,11,0,"Fixes #13761

Previously, when adding a window, we were unable to read its current project paths out of the hash of the URL during window initialization because the window still considered itself to be loading. Rather than fixing this issue, we decided to completely eliminate the sharing of state between processes in the window.location and instead switch to cached synchronous RPC for the loadSettings and a dedicated RPC-based mechanism for the project paths.

üçê 'd with @maxbrunsfeld ",496,True,en,2
13764,4,5,0,Externals,50Wliu,2017-03-29T21:38:48Z,7,3,2,50,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Don't soft wrap mini editors.  It seems like this isn't really useful for mini editors.

### Alternate Designs

There could be a separate programmatic toggle for mini editors that also looks at the global setting.

### Why Should This Be In Core?

Because mini editors already live in core!

### Benefits

No more ""why can't I scroll right when I type something really long?""

### Possible Drawbacks

Some mini editors may be relying on this, though I think that would be bad practice considering it's a user setting.

### Applicable Issues

Fixes atom/tree-view#473

/cc @simurai",897,True,en,0
13759,1,0,0,Internals,nathansobo,2017-02-07T17:24:01Z,9,5,2,0,"Fixes #13647.

This restores the behavior we had prior to #13475 when there are no pane items while preserving its improved behavior for paths outside of the current project.",176,True,en,0
13756,13,0,0,Externals,50Wliu,2017-02-06T22:24:21Z,13,13,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

* language-c
  * Vastly improved preprocessor support
  * Digit separator support
  * Access operator fixes
* language-clojure
  * Fixed TODO highlighting in comments
* language-coffee-script
  * Auto-indent after a colon
* language-html
  * Auto-indentation fix
* language-java
  * Improved number support
  * Fixed qualified storage type highlighting
* language-javascript
  * Support SQL template strings
  * More JSDoc enhancements
* language-php
  * Add a shorthand echo snippet
* language-python
  * Allow spaces in firstline shebang
* language-ruby
  * Support embedded GraphQL
  * Support `group` and `ruby` keywords
* language-ruby-on-rails
  * Add assert_template snippet
* language-sql
  * Support `IF EXISTS`
* language-xml
  * Add another filetype
* language-yaml
  * Better overall highlighting

### Alternate Designs

None.

### Why Should This Be In Core?

Just updating some packages.

### Benefits

See above.

### Possible Drawbacks

Syntax highlighting regressions.

### Applicable Issues

None.",1360,True,en,0
13755,1,1,0,Internals,as-cii,2017-02-06T18:22:12Z,4,1,2,0,/cc: @damieng ,14,False,pl,0
13754,1,3,6,Externals,hron,2017-02-20T17:54:19Z,31,5,4,14,"### Description of the Change

Currently atom creates two buffers for the same file if passed paths use difference case for disk drive letter, e.g. `d:\file.txt` and `D:\file.txt`

This change ensures that the absolute path always has disk drive letter in uppercase. 

### Alternate Designs

The other place where this fix could be applied is [findBufferForPath](https://github.com/atom/atom/blob/master/src/project.coffee#L331) function. However the used function [resolvePath](https://github.com/atom/atom/blob/master/src/project.coffee#L229) already has some path normalization code, so I think this is the best fit.

Actually Windows interpreters `file.txt` and `File.txt` as the same file. Maybe it makes sense to extend this patch and make Atom to do the same on this operation system, but I'm not sure because it can be file system specific. Any suggestions are welcome!

### Why Should This Be In Core?

I believe the current behavior of the editor is wrong for Windows users, so it makes no sense to create a plugin to fix that.

### Benefits

The main benefit I would like to get is the ability to click on parsed backtrace in my terminal emulation app (ConEmu). Right now it works, but atom opens second buffer for the same file because it doesn't normalize disk drive letter.

### Possible Drawbacks

The possible drawback is some broken tests, but I've checked that and it seems everything works.

### Applicable Issues

Here is the related issue #8221. It's not exactly about my problem, but it's very near.",1547,True,en,0
13753,1,0,0,Internals,lee-dohm,2017-02-06T15:57:09Z,1,3,1,0,"Remove the link to the `TextEditorElement` class since it isn't documented and we don't intend it to be.

Fixes atom/flight-manual.atom.io#128",144,True,en,0
13752,1,0,0,Internals,damieng,2017-02-06T15:10:30Z,5,29,4,0,Reverts atom/atom#13725,23,False,en,0
13731,1,8,0,Externals,Ingramz,2017-10-26T16:43:02Z,1,1,1,265,"Just a friendly reminder to occasionally update coffee-script.

Allows new syntax to be used and also provides better source maps.

After merging, make sure to clear compile-cache for updated source maps to take effect.

Changelogs can be found at http://coffeescript.org/#1.12.0 and then by scrolling up.",311,True,en,0
13725,1,1,0,Externals,hron,2017-02-05T01:51:41Z,29,5,4,3,"### Description of the Change

Currently atom creates two buffers for the same file if passed paths use difference case for disk drive letter, e.g. `d:\file.txt` and `D:\file.txt`

This change ensures that the absolute path always has disk drive letter in uppercase. 

### Alternate Designs

The other place where this fix could be applied is [findBufferForPath](https://github.com/atom/atom/blob/master/src/project.coffee#L331) function. However the used function [resolvePath](https://github.com/atom/atom/blob/master/src/project.coffee#L229) already has some path normalization code, so I think this is the best fit.

Actually Windows interpreters `file.txt` and `File.txt` as the same file. Maybe it makes sense to extend this patch and make Atom to do the same on this operation system, but I'm not sure because it can be file system specific. Any suggestions are welcome!

### Why Should This Be In Core?

I believe the current behavior of the editor is wrong for Windows users, so it makes no sense to create a plugin to fix that.

### Benefits

The main benefit I would like to get is the ability to click on parsed backtrace in my terminal emulation app (ConEmu). Right now it works, but atom opens second buffer for the same file because it doesn't normalize disk drive letter.

### Possible Drawbacks

The possible drawback is some broken tests, but I've checked that and it seems everything works.

### Applicable Issues

Here is the related issue #8221. It's not exactly about my problem, but it's very near.",1547,True,en,0
13713,3,10,0,Externals,dirk-thomas,2017-03-10T19:34:14Z,32,9,6,39,"This is in support of atom/find-and-replace#847.

### Requirements

* atom/find-and-replace#847
* atom/scandal#41
* atom/text-buffer#195

### Description of the Change

Add two additional optional options to `workspace.scan` (namely `lineCountBefore` and `lineCountAfter`) and pass them along to the `scan-handler` and from there to the `PassSearcher`.

### Alternate Designs

I am not aware of an alternative approach.

### Why Should This Be In Core?

Since the modified API for searching is part of the core it needs to be extended to support the use case described in atom/find-and-replace#190. If the `find-and-replace` package could handle this without requiring modifications to the core that would be great but with the current API being provided by the core I don't think this is possible.

### Benefits

It implements the long desired feature described in atom/find-and-replace#190.

### Possible Drawbacks

The additional optional argument shouldn't result in any backward compatibility problem as far as I can tell.

### Applicable Issues / Remaining Todos

* ~~In the current state when the search results list a file which is not opened yet and you click on the result the match is being updated and looses the context information. This is due to the fact that the search is being repeated in the buffer (instead of using `scandal` through the workspace API. In order to address this the `TextBuffer.scan` needs to be extended to support the same new options as in the referenced `scandal` ticket. Therefore I have prefixed the title with `[WIP]` for now.~~ This has been address with the PR to the `text-buffer` package.

* Add test coverage / update existing specs as soon as there is a consensus on the selected approach and the feature works.",1792,True,en,0
13696,7,1,1,Internals,BinaryMuse,2017-01-26T18:37:19Z,24,16,7,0,"This allows code signing certificates to be specified via `ATOM_MAC_CODE_SIGNING_CERT_PATH` and `ATOM_WIN_CODE_SIGNING_CERT_PATH` on macOS and Windows, respectively. In that case, we don't try to download the certificate, and we also don't delete the certificate after signing is complete.

This also fixes an issue where `certPath` wasn't in scope for the `finally` block in the macOS case.

/cc @as-cii @damieng ",418,True,en,0
13691,21,10,9,Externals,50Wliu,2017-05-31T01:17:08Z,197,186,33,126,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Removes a restriction that prevented people from trying to build Atom using Node 7+.  Now that apm has been updated this should work again.
In addition, I fixed a potential bug where `stdout` was being declared as a constant but then being reassigned.  I'm not sure this would work; even if it did, it's best that it's rewritten to be a `let` instead.

### Alternate Designs

None.

### Why Should This Be In Core?

Already in core.

### Benefits

More supported Node versions when building.

### Possible Drawbacks

None.

### Applicable Issues

None.

If CI is green, I will revert the CI changes and :boat:.",928,True,en,0
13687,1,1,0,Internals,as-cii,2017-01-24T12:49:34Z,10,1,2,0,"Fixes https://github.com/atom/bracket-matcher/issues/271.

When all the selections are destroyed and someone calls `editor.getLastSelection`, Atom ensures there is at least one selection available and, as a result, creates a new one. Due to the way our code was structured, the `onDidAddCursor` event was being fired before the new selection had the chance to be stored in the editor state: as a result, when someone tried to call `editor.getLastSelection` during a ""cursor added"" event, Atom would retry to create a selection, thus firing again the `onDidAddCursor` event and causing the infinite loop.

This pull request fixes the above problem by emitting the `did-add-cursor` event after the selection has been successfully added to the editor state.

/cc: @atom/maintainers  ",786,True,en,0
13685,1,0,0,Externals,kerryguard,2017-01-24T06:27:30Z,38,2,2,0,,0,False,en,0
13680,3,3,0,Externals,Down10,2017-01-24T00:34:02Z,160,36,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

I updated the list of text encodings that appear in the Settings configuration menu to properly reflect the code pages supported by [encoding-selector](https://github.com/atom/encoding-selector), as well as present descriptive text for the selection menu.

In the process, I removed what appeared to be a duplicate entry ('iso88597').

### Alternate Designs

None considered. I based the syntax on the code below it (the Telemetry selection options).

### Why Should This Be In Core?

It's a more user-friendly presentation of the list of supported code pages.

### Benefits

Users may more easily recognize the available text encodings that Atom supports from the Settings configuration page. 

### Possible Drawbacks

The code may break the functionality of the menu, because I'm not aware of how the menus are constructed, to be honest. I presume a more experienced coder can figure this out.

I just thought this could be an improvement to the menu. üòÉ 

### Applicable Issues

None cited.",1314,True,en,0
13671,1,0,0,Internals,damieng,2017-01-20T20:47:50Z,52,29,1,0,,0,False,en,0
13668,1,0,1,Internals,as-cii,2017-01-23T12:36:24Z,67,49,2,2,"Fixes #13663.

This pull request fixes an error that was thrown by `postcss` when trying to upgrade deprecated selectors of a file containing malformed CSS. With these changes all the CSS files that contain an invalid syntax will be skipped and the automatic transformation won't be applied.

/cc: @atom/core ",313,True,en,0
13667,1,0,0,Internals,as-cii,2017-01-20T13:49:20Z,5,5,2,0,"Fixes #13625.

This regression was introduced with the removal of the shadow DOM from `<atom-text-editor>` elements. Previously we were relying on Chrome always reporting `<atom-text-editor>` as the mousewheel `event.target`. As a result, removing the shadow boundary caused the mousewheel event to be potentially dispatched from anywhere inside the editor element, making our previous logic for handling ctrl-mousewheel invalid.

This pull request fixes it by recognizing mousewheel events that are dispatched from within an editor.

/cc: @atom/core",556,True,en,0
13664,1,10,0,Externals,zertosh,2017-01-20T21:07:22Z,123,10,8,0,"### Description of the Change

Adds a new config `editor.showCursorOnSelection`, enabled by default (changing the current default behavior), that makes it so that the cursor is always blinking even when you have a selection(s).

### Why Should This Be In Core?

It's pretty tied to the internals of `Cursor` and `TextEditor`.

### Benefits

Brings Atom in line with the behavior of Sublime (and others).

This is super useful for when you do `cmd+d` (`find-and-replace:select-next`) and you can't find where your cursor went.

### Possible Drawbacks

The current behavior is to hide the cursor when there's a selection. Since we're changing the default, that's sure to upset someone. However, since it is configurable, those that don't like it can easily revert to the old behavior.",798,True,en,0
13662,1,0,0,Internals,damieng,2017-01-19T23:07:05Z,46,7,2,0,This is required so that settings-view can successfully set the proxy servers for apm - it's an async call that can't stop returning the bufferedProcess object to callers.,171,False,en,0
13661,1,0,0,Externals,pietro909,2017-01-19T16:03:49Z,1,1,1,0,"### Requirements

This just fixes a broken link in README.md

### Description of the Change

Modify the link from `docs/build-instructions/macos.md` to `docs/build-instructions/macOS.md`, since the file has been renamed in 1cfcec2b72fa749285a5e67e7fc2ad9b04f7c15b

### Alternate Designs

No design change

### Why Should This Be In Core?

Documentation purposes

",379,True,en,0
13657,3,4,0,Internals,iolsen,2017-01-25T23:00:08Z,24,4,4,6,"Adds a core option for keeping open editors whose underlying files are deleted outside Atom.

![screen shot 2017-01-18 at 4 40 27 pm](https://cloud.githubusercontent.com/assets/553742/22088980/e1f25d3e-dd9c-11e6-81de-53846a511971.png)

To be merged in tandem with atom/text-buffer#178 (which will include tests for this option) and atom/tree-view#1026 in order to close atom/tabs#306.

Note that the default will change to keep these tabs open, as that's the conservative behavior with respect to potentially losing data.",527,True,en,0
13654,1,0,0,Internals,nathansobo,2017-01-18T20:28:52Z,1,0,1,0,"We deliberately assign more than 10 listeners on the method response channel.

This should eliminate `Warning: Possible EventEmitter memory leak detected` spam when running tests.

/cc @BinaryMuse ",201,True,en,0
13652,2,0,0,Externals,ghost,2017-01-18T19:22:47Z,1,0,2,0,"* Add superstring in build-status.md.
* Rename macos.md to macOS.md.

Should I rename macos.md to macOS.md? If possible, I think should rename freebsd, linux and window!.",173,False,en,0
13646,2,7,0,Internals,damieng,2017-04-18T01:50:10Z,62,4,4,89,,0,False,en,0
13644,3,0,3,Internals,iolsen,2017-01-19T19:29:15Z,8,1,2,1,"Because we rely on the state-store's availability to save unsaved changes in files it seems important to be able to check for the case where we never connected to the state store. This would be common for anybody who has multiple versions of Atom installed. Normal users probably don't do this often but as an Atom developer I certainly do. So this PR makes two changes:

1. Introduces an `isConnected` flag to `state-store`.

In the common (for me) case where you open e.g. beta after you've opened stable, and beta fails to connect to the indexedDB, it's set false.

2. Checks `atom.stateStore.isConnected` when determining whether to prompt to save file changes. Without this, changes are silently lost in this scenario.

Related to https://github.com/atom/tabs/issues/306 and https://github.com/atom/atom/issues/13318.

/cc @nathansobo @as-cii for review",868,True,en,0
13616,23,31,0,Internals,simurai,2017-02-22T13:39:06Z,98,23,5,39,"### Description of the Change

This replaces the current ""Use Custom Title Bar"" checkbox with a ""Title Bar"" dropdown. It has the following options:

- `native` (default)
- `custom` adapts to themes
- `custom-inset`  **New**! has more padding
- `hidden` **New**! completely hidden

![screen shot 2017-01-14 at 4 30 55 pm](https://cloud.githubusercontent.com/assets/378023/21953310/dbd0c716-da76-11e6-8abd-62d7ba54033e.png)

#### Native

![title-bar](https://cloud.githubusercontent.com/assets/378023/21953492/4a89d846-da7c-11e6-87ec-77f2125fc32e.png)

#### Custom

![title-bar 2](https://cloud.githubusercontent.com/assets/378023/21953491/4a88f020-da7c-11e6-98eb-0416edce2a21.png)

#### Custom Inset (new)

![title-bar 3](https://cloud.githubusercontent.com/assets/378023/21953493/4a8b4b36-da7c-11e6-9938-7ffc62e8e495.png)

#### Hidden (new)

![title-bar 4](https://cloud.githubusercontent.com/assets/378023/21953494/4a8c607a-da7c-11e6-8ffa-2400c07e1233.png)


### Alternate Designs

I also tried to add a ""hide title-bar but keep the traffic lights"" option:

![title-bar-custom](https://cloud.githubusercontent.com/assets/378023/18807178/79a7a210-827b-11e6-8f96-6b2a9bf28b02.png)

Unfortunately there are a few [edge cases](https://github.com/atom/atom/pull/10208#issuecomment-248550174) that would make the UI look broken. It's something that a [package](https://atom.io/packages/no-title-bar), theme or `styles.less` could provide when `custom-inset` is used.

Another example with the `tool-bar` package taking the role of a ""title bar"":

![title-bar-custom 2](https://cloud.githubusercontent.com/assets/378023/18807177/79a71afc-827b-11e6-8bc9-68ec69338e59.png)


### Why Should This Be In Core?

Needs access to the `BrowserWindow` API.


### Benefits

- Provides more title-bar variations.
- Themes can adapt to the different title-bar modes. Before there was no way to tell.
- Allows packages/themes to customize even further, like hide the title-bar but keep the traffic lights.


### Possible Drawbacks

When hiding the title-bar, managing the window needs to be done with the keyboard or from the menu. Dragging the window needs to be done with the status-bar. Not really a drawback since it's a choice and not the default.


### Applicable Issues

This PR contiues from https://github.com/atom/atom/pull/10208 (Hide title bar on OS X) and https://github.com/atom/atom/pull/11790 (already merged).

/cc @atom/feedback @atom/design ",2502,True,en,0
13606,4,3,0,Internals,maxbrunsfeld,2017-01-18T18:46:44Z,26,6,3,5,"Closes https://github.com/atom/atom/issues/10079
Closes https://github.com/atom/atom/pull/13119

üçê 'd with @nathansobo",124,False,en,0
13605,2,0,0,Internals,damieng,2017-01-14T17:35:28Z,3,4,2,1,,0,False,en,0
13604,1,1,0,Internals,BinaryMuse,2017-01-13T18:58:50Z,4,1,1,0,"When the renderer process crashes in headless mode, we open a dialog even though we have `@atomApplication.exit(100) if @headless` at the top of the handler. `exit` appears to not be as synchronous as the Electron docs say it is. :) This results in a confusing error:

```
2017-01-12 14:25:12.092 Atom[95390:27209761] TypeError: Error processing argument at index 9, conversion failure from #<BrowserWindow>
    at TypeError (native)
    at Object.showMessageBox (/Applications/Atom.app/Contents/Resources/electron.asar/browser/api/dialog.js:184:20)
    at WebContents.<anonymous> (/Users/mtilley/github/atom/src/main-process/atom-window.coffee:156:23)
    at emitOne (events.js:96:13)
    at WebContents.emit (events.js:188:7)
```

In this PR, we simply log a message and return early from the event handler to avoid the extraneous message.

/cc @atom/core",870,True,en,0
13602,1,2,0,Internals,nathansobo,2017-01-13T18:25:45Z,61,15,2,0,"![duplicate lines 2](https://cloud.githubusercontent.com/assets/1789/21907555/37f06b88-d8cd-11e6-8c5c-3376a7e52e37.gif)

Closes #13047 because I opted to take a fairly different approach to also solve for the case where selections spanning multiple lines intersect the same line more than once. That PR also didn't have tests and I didn't have push access to the branch. Thanks to @seusher for getting the process of fixing this started though.

/cc @ungb for more testing. I suggest you try to break this with diabolical selections.",537,True,en,0
13600,1,1,0,Internals,damieng,2017-01-17T19:08:36Z,5,0,1,5,"The on/off setting for automatic apm proxies, see https://github.com/atom/settings-view/pull/898 for more details.",114,False,en,0
13599,1,0,0,Internals,damieng,2017-01-12T17:24:05Z,2,2,1,0,Adds # as requested in #13346,29,False,en,0
13598,1,0,0,Externals,50Wliu,2017-01-12T17:13:28Z,0,3,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Removes a private, unused function that calls a deprecated function.

### Alternate Designs

None.

### Why Should This Be In Core?

This PR removes things and doesn't add anything :)

### Benefits

Code maintenance.

### Possible Drawbacks

Package authors using Cursor::getPixelRect will start receiving errors, but I think that's fine because it was private.

### Applicable Issues

Closes #13541

/cc @maxbrunsfeld",735,True,en,0
13597,1,0,0,Externals,Ingramz,2017-10-20T20:30:52Z,5,2,3,281,"When detecting grammar to use, the grammar scoring system's bundled/not bundled criteria should be lower priority than first line match. This would enable the use case where user installed grammar intentionally hands over the victory to bundled grammar based on first line match. If the two grammars were equal in terms of first line match, they would be still judged by bundled/non bundled, thus not breaking old intended behavior.

Cases where grammar relied on being a non bundled package, we'll have to at least copy the firstLineMatch of the bundled grammar or have a better one if the bundled package had one. This will be useful in the future nonetheless.

For more details, see https://github.com/atom/first-mate/issues/85",734,True,en,0
13596,1,1,0,Internals,simurai,2017-01-12T08:15:23Z,2,2,1,0,"### Description of the Change

This will ‚¨ÜÔ∏è  `one-dark/light-syntax@v1.7.1`

### Benefits

Just testing if CI passes this time.
",139,True,en,0
13592,1,1,0,Externals,50Wliu,2017-01-11T19:22:31Z,2,2,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

This PR updates autocomplete-css to bring it up to date with recent language-css changes.  language-less was also updated to reduce code duplication in autocomplete-css.

### Alternate Designs

None.

### Why Should This Be In Core?

Already in core.

### Benefits

Fixes specs!

### Possible Drawbacks

None.

### Applicable Issues

None.

Will merge when CircleCI is green.",692,True,en,0
13585,1,1,0,Externals,vjeux,2017-01-11T18:26:00Z,16,9,3,0,"We are working on a feature that changes the content of the editor when you mouse over some things and it makes the UI jump when going from 1 line to > 10. This makes the UI feel really bad.

I've looked at Sublime and the 1-9 state is the same as 1-99, only when you reach 100 lines then it jumps. I think that it is a better behavior as you want to minimize jumps as much as possible and it is extremely likely that you are going to hit the 9-10 lines threshold.

![](http://g.recordit.co/ABIlZf5eTx.gif)

While this is being reviewed and until the new version shipped, we are going to monkeypatch Atom in order to get this feature.

```js
var presenter = atom.textEditors.editors.entries().next().value[0].presenter.__proto__;
var old_updateLineNumberGutterState = presenter.updateLineNumberGutterState;
presenter.updateLineNumberGutterState = function() {
  var res = old_updateLineNumberGutterState.apply(this, arguments);
  this.lineNumberGutter.maxLineNumberDigits = Math.max(2, this.lineNumberGutter.maxLineNumberDigits);
  return res;
};
```

Released under CC0
",1090,True,en,0
13584,1,0,0,Internals,damieng,2017-01-11T00:34:10Z,0,5,1,0,Now that x64 Windows is published we can let the installer create deltas!,73,False,en,0
13583,1,1,0,Internals,nathansobo,2017-01-11T18:27:06Z,9,1,1,0,"The overhead of writing large amounts of data to IndexedDB is blocking the main thread for perceptible amounts of time, even though the API is asynchronous. A patch-based representation of the modified state could allows us to pay only for what has changed, but is too complex to justify implementing right now to support full crash recovery for large files. So instead, we'll only serialize the full text of files > 2MB on graceful shutdown of the window. Periodic serialization, which interleaves with fine-grained user interaction, will be limited to smaller files to ensure we don't make the editor unresponsive.

/cc @maxbrunsfeld ",638,True,en,0
13575,1,0,0,Internals,nathansobo,2017-01-09T19:07:21Z,4,4,1,0,"Calling `workspace.open` in an opener doesn't work properly with options like `split: left` because it causes the opened item to be added to the workspace as a side-effect. Since workspace openers are intended to be used during the process of calling `workspace.open`, we need to use `openTextFile`, which just creates an editor but does not attach it to the workspace.",369,False,en,0
13573,1,8,0,Internals,as-cii,2017-01-19T12:49:01Z,1,1,1,9,"Fixes #13417.

Considering that the .rpm package we release is for `x86_64` architectures, there should be no need to install i686 dependencies. With this pull request we are installing `libXss.so.1()(64bit)` instead of the more generic `libXss.so.1` to prevent extra dependencies from being installed on users' systems.

This works egregiously on Fedora, but it would be great to confirm it runs flawlessly on all Linux distros that support the .rpm packaging system. @ungb: can you help me with that, please? üôá ",520,True,en,0
13564,11,7,0,Externals,vovkasm,2017-01-09T19:29:32Z,40,0,3,2,"This is #12545 (send event to save state after 'Add Project Folder' or 'Remove Projec') + tests. Does it appropriate for merge now?

Copy of the description from #12545:

Fixes #12495

When we add or remove project folder, the window's current project path will be changed, then ""initialPaths"" will be reloaded, it is the best time to save state

/cc @maxbrunsfeld @lee-dohm ",383,True,en,1
13563,1,1,0,Externals,shreyasminocha,2017-01-28T02:13:24Z,25,0,1,20,"### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

This PR addresses #13548 and adds documentation to config.coffee about accessing and editing keys that do not appear in the configuration schema of the package and also mentions that it is against best practices to do the same.",666,True,en,0
13549,2,0,0,Internals,iolsen,2017-01-06T19:32:07Z,29,0,2,1,"### Description of the Change

This change adds an event that fires after the user keymap has successfully loaded. It should be broadly useful in packages but is specifically being added in service of the MRU tab setting as described below.

### Applicable Issues

This is necessary for adding an [MRU tab traversal setting](https://github.com/atom/atom/issues/11035) in a way that won't alter behavior for users who have already modified their keymaps to turn it off. At package init time the user keymap has not yet loaded so it's not possible to check for them.
",572,True,en,0
13545,5,3,0,Internals,maxbrunsfeld,2017-01-05T00:38:38Z,5,5,2,0,"Refs https://github.com/atom/atom/issues/9879
Refs https://github.com/atom/atom/pull/10856
Refs https://github.com/atom/text-buffer/pull/182
Refs https://github.com/facebook/nuclide/issues/697

/cc @dirk-thomas I have talked to some others on our team, and reconsidered this problem. I feel really bad for the delay in resolving this issue, and all of the work that you've done to propose solutions.

Where we stand right now, we think that the right solution is probably to simply remove the conversion to real paths. There may be some breakage of community packages, but it's hard for me to see how.

Please let me know what you think.

Discussed this with @nathansobo
/cc @noseglid because you maintain `atom-build` and this relates to https://github.com/noseglid/atom-build/issues/245",800,False,en,0
13543,3,11,0,Internals,nathansobo,2017-01-09T13:42:51Z,1,1,1,4,"@Ben3eeE, @ungb: @as-cii and I are hoping that this version of `atom-keymap` fixes https://github.com/atom/atom/issues/13131 by improving our detection of the native keyboard layout on Gnome systems. Could you two give this a spin on Gnome and see if we're right about that? You should be able to download the builds associated with this branch.

I've decided to hold off on removing the fallback code via https://github.com/atom/atom-keymap/pull/201 in the name of introducing less change. I think if we can reliably detect the layout, that code should be okay to run.

PS: If we're still failing to match any other bundled keystrokes, it might be worth creating an issue summarizing the platform, layout, and keystroke combinations that are still problematic.",765,True,en,0
13539,1,2,0,Internals,nathansobo,2017-01-04T18:19:14Z,4,5,1,0,"Previously, we were only calling the debounced resume callback when the cursor was already blinking, but this meant we didn't renew the debounce window. This in turn meant we attempted to start blinking the cursor again every 100ms regardless of cursor interactions, which was consuming an extra frame and causing cursor movement to not feel smooth.",349,False,en,0
13531,1,0,0,Externals,lugrace,2017-01-02T18:39:49Z,1,1,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--Updated the license file to include 2017 in the copyright.

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->
There isn't really any alternatives and the proposed version was selected to make sure that Atom keeps its copyright in the new yea.

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->
It is to protect Atom in the new year from copyright infringes. 

### Benefits

<!-- What benefits will be realized by the code change? -->
Protect Atom from copyright infringes.

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->
No drawbacks.

### Applicable Issues

<!-- Enter any applicable Issues here -->
No issues.
",1536,True,en,0
13525,1,3,0,Internals,lee-dohm,2017-02-23T18:06:37Z,1,0,1,54,"### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

The [dalek package](https://github.com/atom/dalek) checks after Atom activates the initial set of packages to see if there are packages that are installed both as built-in packages and as community packages. When people install built-in packages as community packages (often to get ""the latest version"") because built-in packages are designed to work with a specific version of Atom, strange bugs can happen that are very hard to diagnose. The dalek packages detects this problematic situation and notifies the person running Atom, giving them the information they need to correct the situation.

### Alternate Designs

<!-- Explain what other alternates were considered and why the proposed version was selected -->

* Automatic uninstallation - discounts that there can be valid reasons for this configuration

### Why Should This Be In Core?

<!-- Explain why this functionality should be in atom/atom as opposed to a package -->

This functionality is in a package.

### Benefits

<!-- What benefits will be realized by the code change? -->

* Reduced support overhead caused by people being in this situation without knowing it can cause problems

### Possible Drawbacks

<!-- What are the possible side-effects or negative impacts of the code change? -->

* Temporarily increased support overhead caused by people learning that this is a problem

### Applicable Issues

<!-- Enter any applicable Issues here -->

Fixes https://github.com/atom/atom/issues/11090",1935,True,en,0
13524,6,0,0,Externals,50Wliu,2016-12-31T03:25:54Z,6,6,1,0,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

* language-c
  * Fixes an issue where lines were merged even if they weren't supposed to
  * Improves ternary expression highlighting
  * Minor code cleanup
* language-java
  * Large rewrite to how `new` is matched and tokenized
  * Fixes static initialization blocks not being recognized
* language-javascript
  * Ligature support for `!!`
  * Fixes highlighting for multiline imports
  * Unsurprisingly, more JSDoc improvements and fixes
* language-ruby
  * Remove `*.erb` files from the recognized filetypes
* language-sql
  * Add `timestamptz` as a recognized keyword
* language-yaml
  * Add `.yml.erb` and `.yaml.erb` to the recognized filetypes

### Alternate Designs

N/A

### Why Should This Be In Core?

N/A

### Benefits

See above.

### Possible Drawbacks

Possible regressions are always a possibility.  Things to look out for this time include Java tokenization regressions (especially around lines containing `new` and `static`).

### Applicable Issues

N/A

Coming up: more language-java and language-c bugfixes, as well as a giant overhaul of language-css.",1405,True,en,0
13523,11,1,0,Internals,maxbrunsfeld,2017-01-04T00:07:38Z,37,18,6,3,"It is pretty easy for 3rd party Atom packages to accidentally introduce memory leaks, causing destroyed `TextEditor` objects to be retained on the heap indefinitely. This PR updates editors and their sub-objects to do a more aggressive teardown when they are destroyed, so that leaking these objects will have a negligible impact on Atom's memory usage, even for large files.

See also https://github.com/atom/text-buffer/pull/193

üçê'd with @nathansobo",459,True,en,0
13516,2,0,0,Internals,maxbrunsfeld,2016-12-29T19:31:54Z,2,2,1,0,"Depends on https://github.com/atom/text-buffer/pull/192
Depends on https://github.com/atom/find-and-replace/issues/835",119,False,en,0
13507,1,0,0,Internals,damieng,2016-12-28T01:30:22Z,77,63,2,0,Converting this file ahead of adding the proxy server option,60,False,en,0
13506,1,0,0,Externals,ggreif,2016-12-28T01:31:10Z,3,3,1,0,"and a few typos

### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion. Keep in mind that the maintainer reviewing this PR may not be familiar with or have worked with the code here recently, so please walk us through the concepts.

-->

### Alternate Designs

The change seems harmless, and makes reporting more exact.

### Why Should This Be In Core?

Already in core

### Benefits

User will get a lss confusing  error message for Atom Beta

### Possible Drawbacks

none

### Applicable Issues

none known",1008,True,en,0
13503,1,0,0,Internals,lee-dohm,2016-12-26T16:40:14Z,1,1,1,0,Fix typo in template heading,28,False,it,0
13493,3,2,2,Externals,vjeux,2016-12-23T01:49:13Z,47,2,2,0,"Right now, it is not possible to hide a tooltip programatically. This is useful when we know better than the tooltip implementation that we did an action that should hide it.

After discussing with @lee-dohm, he suggested the findTooltips API that mimicks the KeyMapManager API.

Released under CC0
",304,True,en,0
13487,3,0,0,Internals,lee-dohm,2016-12-22T05:32:30Z,62,92,3,0,"* Update to use the latest issue and PR templates. 
* Update the contributing guide to reference the template files themselves",127,False,en,0
13486,1,0,0,Internals,nathansobo,2016-12-22T02:54:49Z,3,1,1,0,"Previously, if we had selections exceeding the visible range we still add line decorations to the cache for every row in the selection, including rows that were off screen and not rendered. This resulted in massive slowdowns when rendering with a large selection.

Here's some profiles showing me scrolling a 250,000-line file with a single selection spanning the entire file.

Before this change, 500ms frames and terribleness:

![screen shot 2016-12-21 at 6 27 25 pm](https://cloud.githubusercontent.com/assets/1789/21412186/8b7dac08-c7ab-11e6-9f60-5f3150ec155b.png)

After this change, the line decorations don't appear in the profile, frames down to ~10ms.

![screen shot 2016-12-21 at 6 28 43 pm](https://cloud.githubusercontent.com/assets/1789/21412208/c3c8208e-c7ab-11e6-91e3-3c95aaf82159.png)

/cc @maxbrunsfeld ",832,True,en,0
13475,3,3,0,Internals,BinaryMuse,2016-12-20T04:30:20Z,39,8,2,0,"In cases where the active pane item has a path that is not inside a current project folder, we display the first project folder in the title bar. This can be misleading. For instance, with a project setup like this:

```
project
‚îî folder1
  ‚îî package.json
‚îî folder2
  ‚îî package.json
```

If we open `~/random/path/package.json`, the title bar will show `package.json ‚Äî¬†folder1`, which is incorrect. This made more sense previously, when the project only contained a single folder, but now the behavior seems misleading.

In order to provide the most pertinent information, this PR changes the behavior to the following:

* If the active pane item has a path that is included in a project folder, we show `item title ‚Äî¬†project folder` (as is the current behavior)
* If the active pane item has a path that is NOT included in a project folder, we show `item title ‚Äî¬†path to file` (where the path does not include the filename ‚Äî in the example above, it'd be `~/random/path`)
* If there is no active pane item (i.e., the pane is empty), we simply show `untitled`

Fixes #5058
Fixes #5585
Fixes #10710

/cc @atom/feedback ",1159,True,en,0
13473,2,0,0,Internals,lee-dohm,2016-12-20T04:08:21Z,3,1,1,0,I ran into strange problems with builds not working when I accidentally upgraded my environment to Node v7. I believe @damieng got bitten by this too. I figured I would save us and others the trouble :grinning:,210,False,en,0
13460,2,1,0,Internals,BinaryMuse,2016-12-20T16:08:35Z,15,1,2,3,"Turns out that packages were not transpiled using the transpiler under `atomTranspilers` during tests due to the way the test window is initialized. This fixes that issue.

/cc @atom/core ",190,True,en,1
13453,27,5,2,Internals,maxbrunsfeld,2016-12-16T18:25:10Z,51,77,9,1,"Depends on https://github.com/atom/text-buffer/pull/185. See that PR for a more thorough description.

Fixes https://github.com/atom/atom/issues/8864
Fixes https://github.com/atom/atom/issues/12391

This removes some restrictions that we previously enforced when editing large files; you can now use folds and soft wraps. The only feature that remains disabled for > 10MB files is syntax highlighting.

Large files also now open somewhat faster. Here are some benchmark results from Circle CI [before](https://circleci.com/gh/atom/atom/2204?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link) and [after](https://circleci.com/gh/atom/atom/2205?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link) this PR:

![benchmarks](https://cloud.githubusercontent.com/assets/326587/21627661/38a798a4-d1ce-11e6-8f7c-590cb0c54dcb.png)

There are lot of noise in these results of course, but opening a 10MB file is consistently ~200ms faster.",1002,True,en,0
13441,1,0,0,Internals,damieng,2016-12-16T18:05:30Z,12,7,3,2,"![image](https://cloud.githubusercontent.com/assets/118951/21168989/2b224754-c16d-11e6-8bdf-48b149145333.png)
",111,True,en,0
13431,3,0,0,Internals,damieng,2016-12-13T21:12:03Z,27,68,6,0,"We manually download the Chromedriver using the GitHub API used for some of the Atom specs because previously that's all there was and presumably also because we only used it on the Mac.

Lately, it has been hitting the rate limit and these two conditions no longer exist so we can just install it via npm.

Update: Added a check to the build script to ensure when we update electron we don't forget to update the chromedriver as recommended by @nathansobo ",461,True,en,0
13430,1,0,0,Internals,damieng,2016-12-13T00:35:25Z,4,4,1,0,"Our new signing key is not yet widely used and is triggering SmartSafe warnings.

We move the new key to new environment variables that match the Mac naming so that master/dev builds continue to be signed with the new key.

The old key is now back on the original environment variables so stable and beta will continue to be signed by the old key for a while.",363,True,en,0
13429,1,0,0,Internals,damieng,2016-12-12T23:27:08Z,1,1,1,0,"Get's us the 1.5 version of Squirrel which includes stub for atom.exe that doesn't move (useful for pinning etc)
",114,True,en,0
13426,1,14,0,Internals,damieng,2016-12-12T23:55:17Z,185,173,8,0,"This PR addresses a number of niggles with portable mode, namely:

1. Add macOS support - just create a .atom directory alongside Atom.app (fixes #13164)
2. Electron/Chromium userdata can now be portable (create electronUserData dir inside .atom - fixes #5502)
3. Removes the confusing `--portable` switch that didn't enable portable mode (it copied data)
4. Checks for a portable .atom folder in expected place before using ATOM_HOME (Comments in #10072)

Flight Manual needs to be updated once this is on stable.",521,True,en,0
13421,3,5,0,Externals,philwyett-hemi,2016-12-12T15:01:21Z,15,6,3,1,"* Correct requires for libXss across Fedora/RedHat (and derivatives) and SUSE.
* Split instructions for Fedora and RHEL etc. i.e. yum and dnf.
* Never use --assumeyes or -y installing packages. atom 1.12.7 shows if
  this had been done by end users it would have caused them great issue.
* Fedora 22 is End Of Life (EOL), so no instructions needed.",352,False,en,0
13416,1,1,0,Externals,MatthiasWinkelmann,2016-12-09T18:17:15Z,1,1,1,0,,0,False,en,0
13415,1,1,0,Externals,portal-chan,2016-12-09T17:49:37Z,1,1,1,0,,0,False,en,0
13412,2,1,0,Internals,maxbrunsfeld,2016-12-09T01:08:14Z,31,20,4,0,"When changing the workspace's pane configuration, the `PaneContainer` needs to sometimes remove intermediate `PaneAxis` objects from the DOM. When it does this, it [tries to restore focus](https://github.com/atom/atom/blob/89e3891d826e1c2eceb2d948203c668a4f65e0f3/src/pane-container-element.coffee#L17) to the previously-focused node.

This stopped working for text editors when we [removed the shadow DOM](https://github.com/atom/atom/pull/12903) because when a text editor is focused, it transfers focus to its hidden input element. This hidden input element was destroyed and re-created every time the editor was detached and re-attached.

This PR solves that problem by making the `TextEditorElement` keep a long-lived reference to a hidden input element, and re-using that same hidden input element every time it is attached to the DOM.

üçê 'd with @damieng

Fixes https://github.com/atom/atom/issues/13206",921,True,en,0
13411,1,1,0,Externals,joefitzgerald,2016-12-08T23:13:25Z,0,1,1,0,"Per @nathansobo, we‚Äôre not sure whether it‚Äôs even helpful to know that the text editor has scrolled in this way. It seems to occur often, and I notice it particularly when testing autocomplete-plus providers.

Before:

<img width=""753"" alt=""screen shot 2016-12-09 at 10 09 20 am"" src=""https://cloud.githubusercontent.com/assets/744740/21031467/c2bc71a8-bdf7-11e6-9c2d-ccdc286091d7.png"">

After: 

<img width=""799"" alt=""screen shot 2016-12-09 at 10 10 22 am"" src=""https://cloud.githubusercontent.com/assets/744740/21031471/cb8ca4ec-bdf7-11e6-9831-2bd43fe0fb41.png"">",576,True,en,0
13397,1,1,0,Internals,as-cii,2016-12-06T16:30:42Z,8,6,2,0,"Reverts atom/atom#13266 as it doesn't address #2991.

/cc: @vjeux ",68,True,en,0
13386,1,8,0,Internals,as-cii,2016-12-07T10:29:53Z,1,1,1,1,"Closes #13354 

This pull request fixes a regression introduced in #13289 that prevented Atom from installing on openSUSE because of a missing dependency. Replacing `libXScrnSaver` with `libXss.so.1` seems to address the problem, making Atom install as expected on Fedora as well as openSUSE.

@cobexer @Adobe-Android @dominuskernel: can you try building this branch and test that it works as expected on your machine? Thanks!",430,True,en,0
13384,1,0,0,Externals,TiagoDanin,2016-12-04T20:12:15Z,1,1,1,0,"Replace text ""osx"" to ""macOS"" in `spec/update-process-env-spec.js`",66,False,en,0
13375,1,0,0,Internals,as-cii,2016-12-10T00:45:24Z,41,29,2,7,"This pull request uses atom-select-list as a drop-in replacement for atom-space-pen-views. Feature-wise nothing should change, but this will help remove jQuery from Atom.",170,False,en,0
13372,2,0,0,Internals,as-cii,2016-12-05T14:53:54Z,24,4,3,3,"Refs: https://github.com/atom/atom/pull/13200#issuecomment-264423190

This pull request fixes a subtle bug that prevented hooks from being triggered on packages that were activated *after* Atom's initialization. In particular, when installing or disabling/enabling a package that relied on the `core:loaded-shell-environment` hook, such package would never activate because the hook had already been triggered.

This problem was not specific to `core:loaded-shell-environment`: in facts, the `grammar-used` hook was affected by it as well, although it was less evident because a `grammar-used` hook is emitted every time a new file is opened, rather than just once as it happens for `core:loaded-shell-environment`.

With this pull request, when a package is activated (either after installing it or after re-enabling it) we will re-trigger all the activation hooks that have been triggered until that moment. In addition, after a package has been successfully activated, we will stop listening to further activation (hooks and commands) events for that specific package.

/cc: @atom/maintainers @joefitzgerald ",1119,True,en,0
13365,2,0,2,Internals,damieng,2016-12-01T21:24:12Z,100,34,21,0,"This started-off as trying to figure out why a few tests fail under Windows and indeed should fix a couple of them.

In doing so I decided to make the tests clean up after themselves so that;

- I could see what was going on
- Any resource leaks/locks would show up (there is at least 1 in libgit2/git-utils)
- I didn't have to keep deleting %TEMP% (not automatic on Windows)
- I could now run the specs against a small RAM disk instead (down from 4 minutes to 2)",470,True,en,1
13358,1,11,6,Externals,matthewwithanm,2016-12-01T08:53:43Z,45,0,3,1,"This adds a new hook, `initialize()` to packages. This is meant to be called before any interaction with the package. Like `activate()`, it's passed the serialized state from the previous session. Unlike `activate()`, it's called _before_ deserialization, enabling item deserialization that's dependent on serialized package state.

It might be a little weird that a function called ""initialize"" can be called multiple times‚Ä¶open to bikeshedding the name!",459,True,en,0
13353,2,3,0,Internals,kevinsawicki,2016-12-07T10:26:13Z,1,1,1,8,"Upgrade to Electron 1.3.13 which includes some important bug fixes and an upstream Chrome patch that (hopefully) addresses the Linux keybinding issues on certain layouts when pressing `Ctrl`.

/cc @as-cii @Ben3eeE the version of Electron with the keybinding fix (1.3.13) is now on this branch if you want to try it out üêß ",326,True,en,0
13350,2,0,0,Internals,maxbrunsfeld,2016-11-29T17:30:08Z,25,4,2,0,"Fixes https://github.com/atom/atom/issues/13349
Fixes https://github.com/atom/atom/issues/12612

The `TextEditorPresenter` was highlight regions' `left` positions to reflect its current `scrollLeft` value, but it was not adjusting their `width` properties properly in some cases.

üé© @kevinsawicki for pointing this out",326,False,en,0
13338,9,0,0,Externals,50Wliu,2016-11-27T02:59:25Z,9,9,1,0,More of the usual stuff.  language-property-list is fixed.  A potentially broken change in language-javascript was reverted as I continue to investigate stuff regarding that grammar.,182,False,en,0
13322,1,0,0,Internals,lee-dohm,2016-11-24T07:39:34Z,2,2,1,0,,0,False,en,0
13321,2,6,0,Externals,lgeiger,2016-11-24T09:15:32Z,3,3,2,0,"Fixes #12528

This uncaught exception occurs during scrolling if the cursor hovers over a block decoration containing a SVG element.
It fails because `scrollevent.target` doesn't have a property `dataset` since it's a path inside the SVG instead of a DIV.

I discovered this bug during redesigning the output area of [Hydrogen](https://github.com/nteract/hydrogen) in https://github.com/nteract/hydrogen/pull/516.

/cc @mangecoeur",437,True,en,0
13320,1,1,0,Externals,joefitzgerald,2016-11-24T18:38:02Z,16,1,1,0,"- Implement timeout
- Clean up running process if window is reloaded or Atom exits

Fixes #13317",99,False,en,0
13307,1,2,0,Internals,damieng,2016-11-23T17:13:03Z,26,1,2,0,"The task bar supports a number of cool features in Windows we aren't currently using today.

This PR adds;

- Recently files (opened from Explorer, must be associated, can be pinned)
- Recent projects (same as File > Reopen Project including configurable number of items)
- New Window task (same as File> New Window)

A screenshot is worth n number of words.

![image](https://cloud.githubusercontent.com/assets/118951/20551914/4e1a0630-b0fa-11e6-9207-f9b5203e88be.png)
",481,True,en,0
13305,21,0,0,Internals,damieng,2016-11-30T21:39:04Z,91,70,24,7,"Fixes #11543 and makes Windows a safer place to do dev work happy in the knowledge you can actually run the tests and (probably) didn't break anything.

- Many tests were fixed (normally paths)
- A few tests were bypassed (screen co-ordinates, portable, smoke)
- Some functionality was fixed (internal theme id mangling)
- Chromedriver is now downloaded and used on Windows & Linux
- Windows now runs main and ui tests

## Life after this
```
c:\atom> script\test
Executing core render process tests



Finished in 108.754 seconds
2009 tests, 7657 assertions, 0 failures, 6 skipped


Executing core main process tests

  AtomApplication
    launch
      Œì√™√ú can open to a specific line number of a file (1548ms)
      Œì√™√ú can open to a specific line and column of a file (1533ms)
      Œì√™√ú removes all trailing whitespace and colons from the specified path (1545ms)
      Œì√™√ú positions new windows at an offset distance from the previous window (2337ms)
      Œì√™√ú reuses existing windows when opening paths, but not directories (2752ms)
      Œì√™√ú adds folders to existing windows when the --add option is used (1752ms)
      Œì√™√ú persists window state based on the project directories (2492ms)
      Œì√™√ú shows all directories in the tree view when multiple directory paths are passed to Atom (2180ms)
      Œì√™√ú reuses windows with no project paths to open directories (1646ms)
      Œì√™√ú opens a new window with a single untitled buffer when launched with no path, even if windows already exist (3022ms)
      Œì√™√ú does not open an empty editor when opened with no path if the core.openEmptyEditorOnStart config setting is false (2137ms)
      Œì√™√ú opens an empty text editor and loads its parent directory in the tree-view when launched with a new file path (1587ms)
      Œì√™√ú adds a remote directory to the project when launched with a remote directory (2942ms)
      Œì√™√ú reopens any previously opened windows when launched with no path (3612ms)
      Œì√™√ú does not reopen any previously opened windows when launched with no path and `core.restorePreviousWindowsOnStart` is false (3997ms)
      when closing the last window
        Œì√™√ú quits the application (1607ms)
    before quitting
      Œì√™√ú waits until all the windows have saved their state and then quits (2757ms)

  FileRecoveryService
    Œì√™√ú doesn't create a recovery file when the file that's being saved doesn't exist yet
    when no crash happens during a save
      Œì√™√ú creates a recovery file and deletes it after saving (1023ms)
      Œì√™√ú creates only one recovery file when many windows attempt to save the same file, deleting it when the last one finishes saving it
    when a crash happens during a save
      Œì√™√ú restores the created recovery file and deletes it
      Œì√™√ú restores the created recovery file when many windows attempt to save the same file and one of them crashes
      Œì√™√ú emits a warning when a file can't be recovered


  23 passing (43s)

```

![image](https://cloud.githubusercontent.com/assets/118951/20545873/86654f06-b0c6-11e6-94dd-1ebfde18d156.png)
",5185,True,en,1
13300,1,2,0,Internals,as-cii,2016-11-28T08:44:28Z,1,1,1,5,"Refs: #13254 

~~In atom-space-pen-views, on require, we call `atom.themes.requireStylesheet` to include a default style sheet for the select list. Now that we are planning to replace all usages of space pen with a more modern alternative (https://github.com/atom/atom-select-list), I believe a better design can be achieved by including a default style sheet in Atom core instead of relying on a require-time call to the `ThemeManager`.~~

This pull request introduces a `relatedTarget` option in the synthesized blur event of `TextEditorElement` to make it easier for users of this API to know the value of `document.activeElement` after the event dispatch. We will use this in atom-select-list to [determine if the user has clicked outside the select list](https://github.com/atom/atom-select-list/blob/fa20fdc7d0763a02aa2f1e2385f8f61e0063eb65/src/select-list-view.js#L35-L41) and, if so, trigger a `didCancelSelection` event.

/cc: @atom/maintainers ",960,True,en,0
13290,3,0,0,Internals,maxbrunsfeld,2016-11-21T23:17:08Z,3,2,2,0,Refs atom/scandal#40,20,False,en,0
13289,1,0,0,Internals,as-cii,2016-11-21T19:00:51Z,1,1,1,0,"Fixes #13176.

/cc: @atom/maintainers ",40,True,en,0
13288,1,1,0,Internals,as-cii,2016-11-21T19:01:03Z,4,6,1,0,"Fixes #13171.

This probably broke after upgrading electron but, since it's a code path we rarely touch, it went unnoticed.

/cc: @atom/maintainers ",152,True,en,0
13287,1,1,0,Externals,akonwi,2016-11-21T19:17:54Z,1,0,1,0,Adds the `key` argument to the function documentation,53,False,en,0
13275,1,5,0,Externals,ycai2,2016-11-20T05:20:51Z,3,3,3,0,"Move ""Fold all"" to above the ""Unfold all"" and separator. 
Fixes #13262",71,False,en,0
13272,1,6,0,Externals,vjeux,2016-12-12T23:55:46Z,20,0,2,23,"There's a bug when multiple gutters are prepended at once where their order is not correctly preserved in the dom. The issue is that we do not update indexInOldGutters even though we inserted a dom node in the old gutters dom.

Honestly, I'm unconvinced that this entire logic is correct, but this fixes the use case we have in Nuclide so it's more correct than before :)

Released under CC0",395,True,en,0
13268,1,2,0,Internals,damieng,2016-11-18T20:31:15Z,2,2,2,0,"This rebinds `windows:reload` command to <kbd>ctrl</kbd><kbd>shift</kbd><kbd>f5</kbd> on Windows and Linux to avoid conflicts with SymbolView package. 

Fixes #13267",167,True,en,0
13266,2,7,1,Externals,vjeux,2016-12-06T13:04:30Z,6,8,2,17,"Electron has an issue where displaying the context menu pauses the rendering loop. https://github.com/electron/electron/issues/1854

One unfortunate side effect is that when you right click on an element, the dom mutations to highlight the element have not been flushed yet which makes for a very bad user experience https://github.com/atom/atom/issues/2991

In order to solve this issue, we would like to flush the mutations and only then display the menu. Unfortunately, electron doesn't have APIs for that.

Things I have tried:
1) Electron has `browserWindow.webContents.invalidate()` and `.on('paint' -> ...)` but it only works with offscreen rendering which     atom doesn't use.
2) `.capturePage(-> ...)` takes a screenshot of the page and I hoped it     would do a flush first but it inconsistently displays the highlight     so it won't work.
3) `Using setTimeout((-> ...), 16)` works many times but not always
4) `requestAnimationFrame(-> ...)` should be what we want but unfortunately     it doesn't always show the highlights :(

What I found worked was to nest three `requestAnimationFrame`, it works all the time even when my machine is busy. This is not a 100% solution but I think that it's okay to assume that if the highlight hasn't been updated in three frames then you should probably try and optimize your code. 3 frames is 50ms and that delay isn't noticeable.

Note: the proper way to solve this that was mentioned in the issue is to open the menu from the main process but this is already what atom does and it's still an issue.

Before:
![](http://g.recordit.co/DruDVLJoN9.gif)

After:
![](http://g.recordit.co/PxBnwNt5yy.gif)

Released under CC0",1693,True,en,0
13257,2,0,0,Internals,damieng,2016-11-17T22:18:04Z,10,11,2,0,Matches the work done on Windows in 13e501b12e562f308c935f896a59c21bc282620d and 47ee7c6665b6ff99d730d5294b4b853c0f170ca0,121,False,en,0
13247,1,0,0,Internals,damieng,2016-11-16T22:06:17Z,1,1,1,0,"- Upgrade Node to 6.5.0 - solves mapped drives on Windows resolving to SMB path #13104
- Fix accessibility always enabled on touch screen https://github.com/electron/electron/pull/7611
- Fix window.opener API not behaving as expected",235,False,en,0
13246,1,0,0,Internals,damieng,2016-11-16T22:07:07Z,6,7,1,0,"because they conflict on international keyboards. Changes;

- `window:reload` is now <kbd>ctrl</kbd><kbd>shift</kbd><kbd>r</kbd>
- `window:run-package-specs` is now <kbd>ctrl</kbd><kbd>shift</kbd><kbd>y</kbd>
- `application:add-project-folder` is now <kbd>ctrl</kbd><kbd>shift</kbd><kbd>a</kbd>
- `editor:log-cursor-scope` is no longer bound by default (it was there for Sublime parity but we can't match it so any remapping would not be parity)

Fixes https://github.com/atom/atom-keymap/issues/175#",507,True,en,0
13241,1,0,0,Internals,nathansobo,2016-11-16T15:54:39Z,1,9,2,0,"Reverts atom/atom#13233

I thought this fixed the problem but it just created a new problem. Was just a *little* too happy with the merge button.",147,True,en,0
13233,1,0,0,Internals,nathansobo,2016-11-16T15:33:21Z,9,1,2,0,"This PR upgrades `atom-keymap` to `7.2.0`, which adds an API for reporting IME composition start and end events. When composition is in progress, all bindings and keystroke replays are suppressed to prevent interference with the IME API.

@ungb It would be great if you could test this out with various languages that require IME such as Japanese and Simplified Chinese. One thing to watch for is multi-keystroke bindings containing single keystrokes that partially match before the IME opens up... for example, `vim-mode-plus` defines `j k` to exit insert mode, but `j i` pops up the IME menu in Japanese text entry. We need to make sure Japanese IME still works.

I'm going to need to do some weird gymnastics to hotfix this to beta with this change so that IME users have a usable Atom build. I don't want to pull in the changes associated with keyup events though, so I may need to use a weird semver suffix to make it work.",932,True,en,0
13213,5,1,3,Externals,joefitzgerald,2016-11-15T09:15:58Z,64,53,4,1,"Fixes #13084

* Listen for the `exit` event on `process`, and kill the child process
* Unregister the event handler once the child process exits
* Switch to use `child_process.spawn` instead of `child_process.execFile` to avoid 100% CPU utilization on linux
* Ensure the environment is always set in `openPaths`",316,True,en,0
13202,2,0,0,Internals,maxbrunsfeld,2016-11-11T21:37:12Z,21,34,3,0,This fixes a regression introduced by https://github.com/atom/atom/pull/12898,77,False,en,0
13201,1,0,0,Internals,as-cii,2016-11-11T18:44:44Z,4,0,1,0,"Fixes #13189.

This makes it easy to access the editor in response to DOM events or when using APIs like `document.activeElement`.

/cc: @atom/maintainers ",159,True,en,0
13200,2,3,3,Internals,as-cii,2016-11-11T18:44:29Z,65,49,4,0,"Fixes #9406.
Fixes #13084.

When Atom is launched from the Dock, we invoke the user shell to retrieve environment variables that are assigned by their profile settings. However, we were doing so synchronously during startup, thus causing a [major slowdown](https://github.com/atom/atom/issues/9406) when opening Atom from the Dock and sometimes [hanging the startup process indefinitely](https://github.com/atom/atom/issues/13084).

With this pull request, we are changing `updateProcessEnv` into an asynchronous method. Packages that require shell environment variables to be assigned prior to activation can use the new `core:loaded-shell-environment` activation hook by putting the following snippet in `package.json`:

```json
{""activationHooks"": [""core:loaded-shell-environment""]}
```

This will defer packages' activation until `process.env` has been updated with the user environment variables.

/cc: @atom/maintainers ",939,False,en,0
13194,7,24,1,Externals,farnabaz,2016-12-15T22:37:54Z,80,59,2,34,"assume a line contain both english text and persian (rtl) text, like this
```
Sample Text ŸÖÿ™ŸÜ ŸÜŸÖŸàŸÜŸá sample text
```
atom always look at first rect size of Text Element and calculate position, this cause cursor to  place in wrong position
in our example `Range.getClientRects()` return three rects, look at this pen

http://codepen.io/farnabaz/pen/rWxrGW

before:
![before](https://cloud.githubusercontent.com/assets/2047945/20213015/8565f974-a81b-11e6-9a15-3a5e043c7d61.gif)

after:
![after](https://cloud.githubusercontent.com/assets/2047945/20213041/af658c26-a81b-11e6-93f2-93a3c702b362.gif)
",616,False,en,0
13186,1,1,1,Externals,joefitzgerald,2016-11-10T22:48:41Z,12,1,1,0,- Partially addresses #13084,28,False,en,0
13161,3,0,0,Internals,lee-dohm,2016-11-07T22:57:21Z,3,5,2,0,,0,False,en,0
13160,1,0,0,Internals,lee-dohm,2016-11-07T20:26:48Z,8,0,1,0,,0,False,en,0
13152,3,4,0,Internals,lee-dohm,2016-12-06T19:59:19Z,6,1,1,30,"### Description of the Change

The current description of the `core.openEmptyEditorOnStart` is misleading which has caused a lot of confusion around what this option is supposed to do or not do. Many people change this setting expecting some behavior difference when they start Atom the next time only to find out that it doesn't do anything from what they can tell. This is because Atom's default behavior in the absence of other instructions is to restore the state from the last time Atom was open, completely ignoring this setting.

There is [a way to configure Atom to not restore the last state](https://github.com/atom/atom/pull/11324). The configuration setting was never exposed in the config schema though so people had to dig through the code or search through Issues and PRs to discover that it was an option. This change adds the `core.restorePreviousWindowsOnStart` setting to the schema so that is no longer necessary.

### Alternate Designs

A more [comprehensive overhaul of Atom's launch story](https://github.com/atom/atom/issues/10517) whether in one large change or multiple small ones is something that is being looked at but won't realistically solve this confusion in the near term.

### Why Should This Be In Core?

This isn't new functionality.

### Benefits

A more clear understanding of what these settings do and do not.

### Possible Drawbacks

If not adding the `core.restorePreviousWindowsOnStart` setting to the config schema was intentional, this has the obvious drawback that it is now showing up in the Settings View.

### Applicable Issues

* Applies to #10517
* Fixes #10623
",1640,True,en,0
13140,1,0,0,Externals,vjeux,2016-11-04T02:40:37Z,1,1,1,0,Context: I'm trying to run atom in the browser and have strict mode enabled and it threw on this line. We need it to be a fat arrow otherwise it's adding it to the window (or undefined in strict mode).,201,False,en,0
13138,4,2,0,Internals,simurai,2016-11-04T06:52:12Z,49,1,6,0,"This updates the Octicons to `4.4.0` (almost newest). Some of the old icons from `2.1.2` that got removed in the meantime will still be available in Atom, so no packages should have missing icons.

Before | After
--- | ---
![screen shot 2016-11-03 at 7 54 01 pm](https://cloud.githubusercontent.com/assets/378023/19963431/b82f68f8-a1ff-11e6-8b53-be0edb9390d7.png) | ![screen shot 2016-11-03 at 7 54 22 pm](https://cloud.githubusercontent.com/assets/378023/19963430/b82f17b8-a1ff-11e6-9524-76d660fead9e.png)

Here the 20 new icons that will be available:

![screen shot 2016-11-03 at 7 22 20 pm](https://cloud.githubusercontent.com/assets/378023/19963466/e5865618-a1ff-11e6-8a15-1c7077d05745.png)

## Concerns

All icons should be fine except that the `GitHub` wordmark is much smaller. We can update the font size in places where we use that icon, like on the About page. The ""Gist"" icon is also quite small, but since it's a new one, it hasn't been used anywhere.

## Remaining tasks:

- [x] Add new icons to the **Style Guide** https://github.com/atom/styleguide/pull/45
- [x] Update **Flight Manual** https://github.com/atom/flight-manual.atom.io/pull/285
- [x] Update the GitHub icon on the **About** page https://github.com/atom/about/pull/43

Closes https://github.com/atom/atom/issues/8314
Will be in Atom `1.13`",1340,True,en,0
13135,5,0,0,Internals,damieng,2016-11-11T20:49:32Z,55,57,13,8,,0,False,en,0
13125,2,0,0,Internals,BinaryMuse,2016-11-01T19:08:38Z,26,13,4,0,"Extension to #13101, this adds package name, path, and metadata as a param to transpiler methods.",97,False,en,0
13124,1,3,0,Internals,nathansobo,2016-11-02T14:30:21Z,10,8,2,0,"Simply replace ::shadow with .editor to preserve the specificity of the transformed rule. This isn't beautiful, but it's the only way to guarantee that the styling transition is smooth enough to justify not bumping the major.

It would be great if some people that had styling regressions due to specificity could give this build a spin and see if things would have been okay if we transformed this way.

Closes #13019

/cc @as-cii @atom/maintainers @abe33 ",463,True,en,0
13101,23,33,21,Internals,BinaryMuse,2016-11-01T16:58:02Z,337,3,5,2,"This is a ~~WIP and (thus far) rough~~ implementation of per-package transpilation pipelines mentioned in #13087. It allows packages to opt in to fully managing their own transpilation steps, bypassing the built-in Atom transpilation entirely. Here's roughly how it works:
1. A package declares a property in its `package.json` called `atomTranspilers`. This is an array of objects, with each object specifying `glob`, `transpiler`, and optionally `options`.
2. When a package is loaded, if `atomTranspilers` exists in its metadata, we notify the `CompileCache` that it wants to do its own compilation.
3. A new class called `PackageTranspilationRegistry` wraps all the `CompileCache` compilers with a new object of the same interface that falls back to the original compiler if a package hasn't opted in to its own transpilation, but bypasses it completely otherwise.
4. If a package is doing it's own compilation, then for each file that matches the `glob` specified, the associated `transpiler` is required, and the exported value should be an object with a function called `compile` that takes three arguments: `sourceCode`, `filePath`, and `options` (where `options` comes from the package's `package.json`). It should return a string or Buffer with the transpiled source, or `undefined` to indicate that it doesn't want to transpile that file. Note that returning `undefined` doesn't fall back to the legacy, core behavior ‚Äî¬†packages which opt in to this mechanism are _fully_ responsible for _all_ their transpilation.

Also worth noting is that the transpiler file cannot be transpiled itself; its source must run in a vanilla Atom environment (which is admittedly pretty capable these days :).

One question I have is how to handle the caching. For example, I currently have `getCachePath` set to

``` javascript
return path.join(
  ""package-transpile"",
  crypto
    .createHash('sha1')
    .update(transpilerSource, 'utf8')
    .update(sourceCode, 'utf8')
    .digest('hex')
  )
```

but in many cases it's possible that neither the file's source nor the transpiler's source has changed, but the output of transpilation would be different (e.g. when editing a `.babelrc` file). Perhaps we should allow the package author to also specify a cache key for the file?

/cc @nathansobo @atom/core for early üí≠ 
",2344,False,en,0
13098,1,1,0,Externals,Ben3eeE,2016-10-29T14:03:50Z,8,1,2,0,"### Description of the Change

This code:

``` coffee
scope = @editor.scopeDescriptorForBufferPosition([start, 0])
commentStrings = @editor.getCommentStrings(scope)
```

Returns `Object {commentStartString: undefined, commentEndString: undefined}` if the language doesn't have comments. For example with `text.plain.null-grammar`.

Which causes this check in `LanguageMode.toggleLineCommentsForBufferRows`

``` coffee
return unless commentStrings?
```

To not return. Meaning `LanguageMode.toggleLineCommentsForBufferRows` will run even when there is no comment defined for the current language.
Which means that if the line is empty and the language doesn't have a defined comment we print `undefined` in the `TextEditor`.

This PR adds a check to return early if there is no `commentStartString`.
### Alternate Designs

Change the return value to `null` instead of returning an object with `undefined` properties for languages with no defined comments.
### Benefits
1. Fixes bug!
2. Doesn't write `undefined` in the `TextEditor` when trying comment an empty line when the comment is `undefined`!
3. Adds a test to not regress!

### Possible Drawbacks
- We can't add a language that only has a `commentEndString`?

### Applicable Issues

None

/cc: @nathansobo 
",1300,True,en,0
13095,3,9,2,Externals,vjeux,2016-11-02T14:31:19Z,62,10,3,4,"Inside of Nuclide, we have multiple places where we have multiple icons close together that have a tooltip: the left toolbar, the bottom status bar, the debugger icons...

The current behavior is very frustrating as you've got to wait for the delay on every single one of them. But, we have a clear signal that the user wants a tooltip when s/he waits the time to see it and it's likely that moving the mouse over the next item quickly means that s/he wants to see it as well.

This pull request introduces the concept of follow through: if you have seen a tooltip, you're going to instantly see tooltip on the next element you mouse over within a short timer (300ms right now).

Test Plan:
Video before:
![](http://g.recordit.co/7PCg0hjohP.gif)

Video after:
![](http://g.recordit.co/9OnZCvy9oI.gif)

Released under CC0
",821,True,en,0
13080,1,0,0,Internals,lee-dohm,2016-10-27T20:37:01Z,0,5,1,1,"### Description of the Change

Because the newer versions of Chromium (v52 in Atom v1.12.0-beta4) we're using in the current versions of Atom support all of the critical pieces of ES6, the `--harmony` flag is no longer necessary. Since the `--harmony` flag was the only flag set in that function, I also removed the `setupJavascriptArguments` function and the one call to the function.
### Alternate Designs

v1.4.x of Electron, which is based on Chromium v53, doesn't suffer from the bug that the `--harmony` flag exposes. Our [Electron v1.4 update PR](https://github.com/atom/atom/pull/12696) is still not quite ready to merge, so we decided to just remove the flag.
### Benefits

People won't experience random crashes when executing async code in Atom v1.12.x and above.
### Possible Drawbacks

There may be some packages that rely on features provided by `--harmony` that aren't available in the vanilla JavaScript support in Chromium or less likely aren't available in Atom's Babel support.
### Applicable Issues

Fixes #13073 
",1034,True,en,0
13078,2,0,0,Internals,damieng,2016-10-27T02:15:52Z,8,2,1,0,,0,False,en,0
13071,1,4,0,Internals,kevinsawicki,2016-10-26T04:56:37Z,1,1,1,0,"Specifying the button label as `Don't Save` instead of `Don't save` allows the keybindings of `cmd-d` and `cmd-delete` to be used on macOS to select this button.

Looks like this might have regressed in https://github.com/atom/atom/commit/4e9048d22de5fce1fb4bce20515fcee96aae786d#diff-1a7d1dda35d8e7ed3ad35b9a9fd2f134L596 and https://github.com/atom/atom/commit/4e9048d22de5fce1fb4bce20515fcee96aae786d#diff-1a7d1dda35d8e7ed3ad35b9a9fd2f134R584

Closes https://github.com/atom/atom/issues/12277

/cc @dgraham 
",510,True,en,0
13065,4,2,0,Externals,mnquintana,2016-10-27T18:36:40Z,352,294,4,2,"We're gonna get there, bit by bit. üòÑ 

üëÄ @atom/feedback 
",63,True,en,0
13046,1,7,0,Internals,damieng,2016-10-26T17:21:43Z,822,2,13,4,"## Implements new
- `atom.history` API containing `.getProjects()`, `.clearProjects()` and `.onDidChangeProjects(callback)` public API surface
- 'Reopen Project' menu that lists the **15** most recently opened projects (configurable via `core.reopenProjectMenuCount`)
- `application:reopen-project` command that provides a search across all projects opened
- `application:clear-project-history` command to clear project history
## Notes
- For now you can type `atom.history.importProjectHistory()` in the debug window to build your initial list from Atom's internal window-state history. Am considering making this happen automatically when you first run Atom with no existing project history state file.
- Multiple folder projects appear in the menu as the last name in the paths separated by a comma e.g. 'atom, settings-view' for width. They appear in full in the pop-up palette.
- Reopening a project always appears in a new window as window-state is preserved between projects and it is quite jarring otherwise.
- 'Clear Project History' appears at the top of the menu instead of ideally at the bottom due to limitations of the MenuManager and how it handles separators. Will be addressed in the future once that is resolved.
- Setting `core.reopenProjectMenuCount` does not disable the menu right now because of the same limitations as above (removing at run-time refuses to remove the separator)
## Screenshots
### Reopen Project menu

![image](https://cloud.githubusercontent.com/assets/118951/19613861/4e6ea51a-97a4-11e6-8d45-606e712e2e99.png)
### Reopen Project command list picker

![image](https://cloud.githubusercontent.com/assets/118951/19613853/3cc98fbe-97a4-11e6-9c89-3a285318d322.png)
",1703,False,en,0
13042,2,3,1,Externals,steakknife,2016-12-08T18:11:35Z,13,2,1,48,"**Problem** This patch is needed because `node-gyp` doesn't work with a space in `Atom Beta.app` -> renamed to `Atom-Beta.app`. This error occurs:

```
Cannot locate Atom.app, it is usually located in /Applications. Set the ATOM_PATH environment variable to the directory containing Atom.app.
```

**Use case** Developers/others want to multiple versions of Atom side-by-side.

**Solution** When launched from a Mac .app, a valid, symlinked `atom.sh` -> `atom`/`atom-beta` will always be contained in it's .app. This also works when a different `atom-something` symlink points to another atom.sh in an .app.
",608,True,en,0
13021,1,3,0,Externals,abe33,2016-10-19T10:38:15Z,1,1,1,0,,0,False,en,0
13020,1,1,0,Externals,idleberg,2016-11-21T17:35:31Z,4,0,1,33,"All features of `language-nlf` have been merged into `language-nsis`. The former will no longer be updated.
",108,True,en,0
13008,1,0,0,Internals,iolsen,2016-11-15T19:20:42Z,37,0,1,29,"New pane events to enable a list view of the MRU tab stack: https://github.com/atom/tabs/pull/388.

Part of the fix for https://github.com/atom/atom/issues/11035.
Requires https://github.com/atom/atom-keymap/pull/156 to work right.
",232,True,en,0
13007,5,0,2,Externals,ghost,2017-01-10T20:31:41Z,40,40,4,85,,0,False,en,0
13001,2,7,0,Externals,flububb,2016-10-28T14:46:04Z,6,1,1,11,"I don't know if the fixation of the architecture on non linux platforms makes any sense (line 25). Maybe simply 'arch': process.arch is the right way to go. Can't test it on my linux machine.

Fixes #12972
",206,True,en,0
12994,4,0,3,Externals,mnquintana,2016-10-16T21:47:56Z,264,186,1,1,"In a similar vein as https://github.com/atom/atom/pull/12350, this PR rewrites `src/config-schema.coffee` as JS ‚Äì it's also a pretty small file, so hopefully there's nothing weird going on here. üòÑ 

üëÄ @atom/feedback 
",225,True,en,0
12991,1,2,0,Externals,thomasjo,2016-10-15T08:23:01Z,1,1,1,0,"Since we're shipping a `.python-version`, we really should strive to keep it updated, at least with respect to CVE/security. Right now it's wildly out of date ‚Äî and Python 2.7.6 has some very serious security holes (and bugs).

I've tested this locally on macOS 10.12 running pyenv 1.0.2-44-g1dee022, and have successfully built both the `master` and `tj-upgrade-electron` branches.

/cc @atom/maintainers 
",409,True,en,0
12987,1,0,0,Externals,ivernus,2017-01-10T20:39:00Z,5,1,1,88,"Add additional information for using yum rather than dnf
",57,True,en,0
12985,5,0,0,Internals,nathansobo,2016-10-25T01:29:12Z,7,5,3,10,"This PR upgrades `atom-keymap` to include the changes in https://github.com/atom/atom-keymap/pull/152.

Closes #12951
",118,True,en,0
12984,13,8,0,Internals,as-cii,2016-10-14T18:25:52Z,326,30,18,0,"For a long time in Atom we have been wanting to measure how changes in the codebase can affect performance. Until now we have been relying solely on Chrome's wonderful profiler to explain performance optimizations or regressions when opening pull requests or issues; however, even though DevTools are a great companion when it comes to understanding what's slow and why, we felt the need for a sharper tool that could allow everyone (not just the person opening the pull request) to:
- Run benchmarks on their machine.
- Easily compare and contrast two runs of the same exact benchmark on two different versions of Atom.
- Store benchmarks and keep track of them.

As part of our efforts to make performance in Atom better and more transparent, we are introducing `Window: Run Benchmarks` and `atom --benchmark`.

_Disclaimer: this feature is meant to be used exclusively for atom/atom and, although it could work, we recommend against using it for running benchmarks on packages._
### A quick tour

When opening the command palette, you can now invoke the `Window: Run Benchmarks` command. This will open a new window and run all the benchmarks found in the `benchmarks/` directory. As soon as a benchmark completes, a plot of its data will be displayed on screen:

![screen shot 2016-10-14 at 12 08 03](https://cloud.githubusercontent.com/assets/482957/19383899/e740b790-9206-11e6-84e3-80a36bf1d2ae.png)

Alternatively, you can invoke `atom --benchmark` with one or more benchmark paths and get textual output instead:

```
Opening and rendering a TextEditor in large file mode:

0   199.98000000000002
1   18.894999999999982
2   11.099999999999909
3   9.565000000000055
4   8.554999999999836
5   9.670000000000073
```

You might have noticed that the above output is formatted as CSV (i.e. there is a tab between the columns). This allows to import data into an external tool like Numbers.app pretty easily to e.g. perform comparisons between two or more versions of Atom:

![screen shot 2016-10-14 at 12 30 00](https://cloud.githubusercontent.com/assets/482957/19384533/f7a7ef2e-9209-11e6-8463-f39b9dbea513.png)

Or to switch to a different representation of the same data:

![screen shot 2016-10-14 at 12 47 08](https://cloud.githubusercontent.com/assets/482957/19384919/5cd820e2-920c-11e6-8eb0-72441a51a20a.png)

""Single-value"" benchmarks are also supported, and they will not show any graph when run through `Window: Run benchmarks`:

![screen shot 2016-10-14 at 12 52 27](https://cloud.githubusercontent.com/assets/482957/19385086/1d6824f6-920d-11e6-9c28-e25076b67395.png)
### Implementation details

Data is plotted via [Chart.js](https://github.com/chartjs/Chart.js) and each benchmark is a javascript file (named `*.bench.js`) that exports a function (synchronous or asynchronous) with the following signature:

``` js
// `test` is a boolean indicating whether the user wants to run benchmarks in a
// lightweight mode.
export default function ({test}) {
  const t0 = window.performance.now()
  fun1()
  const t1 = window.performance.now()
  fun1()
  const t2 = window.performance.now()
  fun2()
  const t3 = window.performance.now()

  // This will plot one graph for `fun-1` and one ""single-value"" benchmark for
  // `fun-2`. Note how the latter doesn't need to supply an `x` value in the
  // object.
  return [
    {name: 'fun-1', x: 1, duration: t1 - t0},
    {name: 'fun-1', x: 2, duration: t2 - t1},
    {name: 'fun-2', duration: t3 - t2}
  ]
}
```

It's also interesting to note that, for the time being, we will not run benchmarks on dedicated hardware. However, we will make sure that they won't become stale or out-of-date by running a more lightweight version of them (see the `test` parameter above) on CI via `atom --benchmark-test` (which, with this pull request, will be executed as part of `script/test`).

/cc: @atom/core
",3851,False,en,0
12977,1,8,0,Internals,nathansobo,2016-10-14T05:11:52Z,2,1,1,0,"Relates to #8295 

Thanks to @matthewwithanm for finding this error. @matthewwithanm do you think this definitively closes that issue?

@Ben3eeE would you mind testing this out and see if the behavior is improved in that one flickering case you found dragging panes?

cc @lee-dohm 
",282,True,en,0
12946,2,2,0,Externals,jamsinclair,2017-05-13T22:00:47Z,17,1,2,214,"## Bug

Fixes the bug described in issue #11848

![move-line-up-bug](https://cloud.githubusercontent.com/assets/5964236/19289643/31871060-9068-11e6-89ad-055e0d2bb5d5.gif)
## Fix

From what I explored it looks like a previous dev has tried to fix this bug. Although because rows are 0 indexed, to select the penultimate row for the range it requires using `-2`. 

I wonder whether it's worth rewriting the line:

``` coffeescript
lines += '\n' unless lines[lines.length - 1] is '\n'
```

I've attempted to add a valid test. Suggestions to improve or better represent the test welcome üò∏ 

![move-line-up-fix](https://cloud.githubusercontent.com/assets/5964236/19289650/3aee8e58-9068-11e6-8fc9-9066c1306ebb.gif)
",712,True,en,0
12944,1,0,0,Externals,Ben3eeE,2017-01-10T20:30:30Z,1,1,1,91,"Looking at https://github.com/atom/atom/blob/master/CONTRIBUTING.md#your-first-code-contribution I suggest the following changes:
1. Exclude beginner label from the help wanted search link. Help wanted without beginner currently is supposed to be more involved issues and we want to search for these exclusively.
2. Sort by reactions rather than comments. We don't want to encourage +1 comments.

Currently fixes 1. I am unsure how to fix 2 since we would have to search by multiple reactions combined.

/cc: @lee-dohm @iolsen 
",528,False,en,0
12937,1,0,0,Internals,damieng,2016-10-11T16:49:01Z,28,5,1,0,"This ensure the atom-windows.zip file we make available for download by portable users contains signed executables by extracting them back from the Squirrel-generated nuget full package.
",187,True,en,0
12933,11,0,0,Internals,maxbrunsfeld,2016-10-14T14:30:36Z,206,232,7,3,"After merging https://github.com/atom/atom/pull/11414, we changed how we represent syntactic boundaries to use `TokenizedBufferIterator` instead. This approach allows us to not build placeholder lines eagerly whenever there is a buffer change or when instantiating a new `TokenizedBuffer`.

![screen shot 2016-10-14 at 15 34 23](https://cloud.githubusercontent.com/assets/482957/19391120/5f297048-922b-11e6-9de1-3df0ad35bcf4.png)

In reality, we still need to construct `TokenizedLine` instances when `TokenizedBuffer.prototype.tokenizedLineForRow` is called because we want to construct some synthetic null grammar boundaries so that `TokenizedBufferIterator` doesn't iterate till the end of the buffer (regression), and also because other packages are currently relying on that API. In practice this should be pretty cheap, because in the majority of the cases it happens only for lines that are currently on screen.
",919,True,en,0
12930,9,1,0,Externals,50Wliu,2016-10-11T00:48:44Z,9,9,1,0,"In general, just some minor fixes/modeline support.
- language-javascript, as is now customary, got even more improvements to its JSDoc tokenization.
- language-c can now tokenize operators.

@Alhadis if there's any merged modeline PRs that I forgot to bump the version for, please let me know.  I'll also try to get back to you on the incorrect-file-detection issue shortly.
",376,False,en,0
12929,1,0,0,Externals,50Wliu,2016-12-13T03:05:21Z,2,3,2,63,"The Windows scripts in atom/apm have been kept considerably more up-to-date than the ones in atom/atom.  This PR updates the apm scripts in atom/atom to call the ones in atom/apm and fixes the issue where `node-gyp` can't be found while `apm install`ing.

There are two alternative solutions:
1. Remove the scripts from this repository and symlink the atom/apm scripts, [as is done for macOS and Linux](https://github.com/atom/atom/blob/beb2b6bbc0c49798ea14ee32803cd880f55a68bf/script/lib/package-application.js#L68)
2. Remove the scripts from this repository and update PATH to include the scripts in atom/apm.
",612,True,en,0
12925,1,1,0,Internals,as-cii,2016-10-10T08:39:10Z,5,2,1,0,"This should fix the error we are observing on Circle (i.e. https://circleci.com/gh/atom/atom/1390), as `CompositeDisposable` requires all the added disposables to conform to the `Disposable` interface.

/cc: @atom/core 
",220,True,en,0
12924,5,0,0,Internals,as-cii,2016-10-10T13:15:56Z,79,90,17,0,"As part of our ongoing effort to extract `TextEditor` into its own library, with this pull request we will allow `TextEditor` objects to be instantiated using plain JavaScript (i.e. `new TextEditor()`) instead of `atom.workspace.buildTextEditor`.  An essential refactoring which makes this possible is treating `Clipboard` as a global (rather than as an instance variable) that is set only once at startup (in `src/initialize-test-window.coffee` and `src/initialize-application-window.coffee` ) on the `TextEditor` class via the static `TextEditor.setClipboard` method.

As a byproduct, this will also enhance usability for people using [etch](https://github.com/atom/etch) (or, more in general, JSX) to embed an editor into their views:

``` js
import {TextEditor} from 'atom'

<div ref='parent'>
  <TextEditor placeholderText='Insert Text Here...' />
</div>
```

`Workspace.prototype.buildTextEditor` will not be deleted, as it can still be used by package authors who want to create `TextEditor` instances that automatically change grammar based on their path, or respond to the user's configuration changes.

/cc: @atom/core 
",1130,True,en,1
12922,3,3,2,Externals,stereobooster,2016-10-26T23:35:43Z,19,4,3,17,"If Atom opened with folder e.g. `atom ./` it will save all buffers to workspace tied to this folder.
But if atom opened without folder e.g. `atom` it will prompt if you wan to save all unsaved buffers.
### Testcase
1. Open Atom (without params)
2. Type some text in untitled buffer
3. Quit Atom (Cmd + Q)

Expected behaviour:
1. Shows Prompt whether you want to save or not
2. Depending on user choice close Atom or not 

Current behaviour
1. Close Atom. All text in unsaved buffer is lost
",490,False,en,0
12917,1,3,0,Externals,lgeiger,2016-10-10T06:33:22Z,1,1,1,1,"This is the first bug fix release of Coffeescript 1.11: http://coffeescript.org/#changelog

Thans @Ingramz for upgrading in #12780
",131,True,en,0
12916,1,2,0,Externals,PeterDaveHello,2016-10-08T20:50:25Z,0,0,27,0,"Use Google's zopflipng to re-compress the png images losslessly, 27 images optimized as below:

```
 resources/app-icons/beta/png/1024.png   | Bin 643649 -> 363244 bytes
 resources/app-icons/beta/png/128.png    | Bin 20327 -> 15826 bytes
 resources/app-icons/beta/png/16.png     | Bin 907 -> 838 bytes
 resources/app-icons/beta/png/24.png     | Bin 1582 -> 1432 bytes
 resources/app-icons/beta/png/256.png    | Bin 61483 -> 42817 bytes
 resources/app-icons/beta/png/32.png     | Bin 2388 -> 2148 bytes
 resources/app-icons/beta/png/48.png     | Bin 4467 -> 3843 bytes
 resources/app-icons/beta/png/512.png    | Bin 196695 -> 121414 bytes
 resources/app-icons/beta/png/64.png     | Bin 6981 -> 5950 bytes
 resources/app-icons/dev/png/1024.png    | Bin 615195 -> 332728 bytes
 resources/app-icons/dev/png/128.png     | Bin 19799 -> 15386 bytes
 resources/app-icons/dev/png/16.png      | Bin 905 -> 809 bytes
 resources/app-icons/dev/png/24.png      | Bin 1573 -> 1433 bytes
 resources/app-icons/dev/png/256.png     | Bin 59627 -> 41035 bytes
 resources/app-icons/dev/png/32.png      | Bin 2400 -> 2156 bytes
 resources/app-icons/dev/png/48.png      | Bin 4258 -> 3664 bytes
 resources/app-icons/dev/png/512.png     | Bin 188763 -> 113909 bytes
 resources/app-icons/dev/png/64.png      | Bin 6841 -> 5848 bytes
 resources/app-icons/stable/png/1024.png | Bin 643183 -> 365636 bytes
 resources/app-icons/stable/png/128.png  | Bin 20680 -> 16281 bytes
 resources/app-icons/stable/png/16.png   | Bin 944 -> 851 bytes
 resources/app-icons/stable/png/24.png   | Bin 1647 -> 1485 bytes
 resources/app-icons/stable/png/256.png  | Bin 62800 -> 43741 bytes
 resources/app-icons/stable/png/32.png   | Bin 2486 -> 2230 bytes
 resources/app-icons/stable/png/48.png   | Bin 4610 -> 3966 bytes
 resources/app-icons/stable/png/512.png  | Bin 197165 -> 123027 bytes
 resources/app-icons/stable/png/64.png   | Bin 7136 -> 6120 bytes
```
",1916,True,en,0
12911,8,0,0,Internals,nathansobo,2016-10-11T14:09:31Z,132,46,5,3,"Just getting this started... we still need tests and some more careful thinking.

For now this adds two options to `atom.tooltips.add`:
- `tooltipElement` An element to add as the child. Maybe this should be an 'item' and we use the view registry instead?
- `tooltipClass` A custom class added to the root tooltip element.

Stay tuned.
",336,True,en,0
12903,38,27,0,Internals,as-cii,2016-10-18T08:15:43Z,2640,1678,34,10,"### Background

Back in #3943, we started rendering text editor contents inside a shadow DOM boundary to prevent outer style sheets from altering the editor inner contents. Although this introduced many benefits, it carried several tradeoffs too.

In particular, we started duplicating some of the style sheets (`{context: 'atom-text-editor'}`) inside each shadow root so that package and theme authors could still be able to explicitly target the editor visual elements. An alternative solution to this problem that we suggested (before the shadow DOM spec was finalized) was to use `/deep/` and `::shadow` pseudo selectors, which unfortunately are now [being deprecated](https://bugs.chromium.org/p/chromium/issues/detail?id=489954).

Even more importantly, this architecture was getting in the way of making `atom-text-editor` a reusable component, because it made it even more coupled to Atom and its ecosystem. Other problems involved things like #4590, and a more complex user experience for package and theme authors in general. Ultimately, we started feeling like the extra complexity of the shadow DOM wasn't worth its benefits.
### Removing shadow DOM from `atom-text-editor`

This pull request aims at removing the shadow DOM in a way that prevents elements within `atom-text-editor` that we don't fully control (i.e. the grammar scopes applied as CSS classes to every line's inner `<span>`) from being mistakenly styled from the outside. Specifically, every syntactic class name will now be prepended with `syntax--`; styling a JavaScript operator, for example, should now look like the following:

``` css
.syntax--source.syntax--js .syntax--operator {
  color: green;
}
```

Given the wide scope of this change, we are trying to reduce package breakage to a minimum by [transforming deprecated selectors automatically](https://github.com/atom/atom/blob/as-deprecate-shadow-dom/src/style-manager.js#L251-L306) and emitting a deprecation in [deprecation-cop](https://github.com/atom/deprecation-cop). Applying these transformations can be quite onerous and therefore we have introduced a layer of caching in 07d56b2 to ensure their performance impact stays low after the first time Atom is launched. 

Other notable changes include:
- Block decorations rendering has been rewritten from scratch (it previously worked only with the shadow DOM).
- When the editor is focused, `document.activeElement` will now return the hidden `<input>` inside `atom-text-editor`, instead of `atom-text-editor` itself. I could find only one third party package relying on this behavior, and I am going to submit a pull request shortly to use `document.activeElement.closest('atom-text-editor')` instead.
- Any Grim or style sheet deprecation will now cause specs to fail, see [`ensureNoDeprecatedFunctionCalls`](https://github.com/atom/atom/blob/as-deprecate-shadow-dom/spec/spec-helper.coffee#L121) and [`ensureNoDeprecatedStylesheets`](ensureNoDeprecatedStylesheets).
- Rendering flashes for decorations has been broken for a long time, but removing the shadow DOM highlighted the cause of the issue, and so they have been fixed in 1091b0e.
  
  ![flash](https://cloud.githubusercontent.com/assets/482957/19191430/b0e90580-8ca2-11e6-8272-c2d47fa4c8e5.gif)
### Conclusion

Removing the shadow DOM is an important step for the editor's future, as doing so will allow us to extract it, clean it up and optimize it. Considering the invasive nature of this change, we are planning to :ship: it after rolling the railcars next week, so that everyone can build it from master and extensively test it for an entire release cycle.

Before merging this, we will also need to merge the following core package pull requests, so that we stop using any deprecated API or selector, and make the test suite green again:
- [x] :arrow_up: autocomplete-plus (https://github.com/atom/autocomplete-plus/pull/779)
- [x] :arrow_up: autosave (https://github.com/atom/autosave/pull/71)
- [x] :arrow_up: atom-dark-syntax (https://github.com/atom/atom-dark-syntax/pull/31)
- [x] :arrow_up: atom-dark-ui (https://github.com/atom/atom-dark-ui/pull/64)
- [x] :arrow_up: atom-light-syntax (https://github.com/atom/atom-light-syntax/pull/9)
- [x] :arrow_up: atom-light-ui (https://github.com/atom/atom-light-ui/pull/36)
- [x] :arrow_up: base16-tomorrow-dark-theme (https://github.com/atom/base16-tomorrow-dark-theme/pull/31)
- [x] :arrow_up: base16-tomorrow-light-theme (https://github.com/atom/base16-tomorrow-light-theme/pull/11)
- [x] :arrow_up: bookmarks (https://github.com/atom/bookmarks/pull/70)
- [x] :arrow_up: command-palette (https://github.com/atom/command-palette/pull/72)
- [x] :arrow_up: deprecation-cop (https://github.com/atom/deprecation-cop/pull/70)
- [x] :arrow_up: find-and-replace (https://github.com/atom/find-and-replace/pull/789)
- [x] :arrow_up: git-diff (https://github.com/atom/git-diff/pull/111)
- [x] :arrow_up: markdown-preview (https://github.com/atom/markdown-preview/pull/436)
- [x] :arrow_up: package-generator (https://github.com/atom/package-generator/pull/45)
- [x] :arrow_up: one-dark-syntax (https://github.com/atom/one-dark-syntax/pull/79)
- [x] :arrow_up: one-dark-ui (https://github.com/atom/one-dark-ui/pull/168)
- [x] :arrow_up: one-light-syntax (https://github.com/atom/one-light-syntax/pull/24)
- [x] :arrow_up: one-light-ui (https://github.com/atom/one-light-ui/pull/77)
- [x] :arrow_up: settings-view (https://github.com/atom/settings-view/pull/862)
- [x] :arrow_up: solarized-dark-syntax (https://github.com/atom/solarized-dark-syntax/pull/76)
- [x] :arrow_up: solarized-light-syntax (https://github.com/atom/solarized-light-syntax/pull/26)
- [x] :arrow_up: wrap-guide (https://github.com/atom/wrap-guide/pull/60)
- [x] :arrow_up: apm (https://github.com/atom/apm/pull/615)
- [x] :arrow_up: first-mate (https://github.com/atom/first-mate/pull/80)
- [x] :memo: Update the flight manual (https://github.com/atom/flight-manual.atom.io/pull/281)

/cc: @atom/core
",6032,True,en,0
12898,12,2,0,Internals,maxbrunsfeld,2016-10-14T22:30:15Z,141,44,6,7,"When opening a large file, the majority of time before the file appears on screen is spent building the DisplayLayer's index of screen coordinates to buffer coordinates. As of https://github.com/atom/text-buffer/pull/175, the DisplayLayer can now compute this information lazily. This PR adjusts our usage of the display layer so that when possible, we avoid indexing the entire buffer.
### Benchmarks
#### Before (v1.12-beta0)

On my machine, opening a 10MB file used to take over 5 seconds:

![opening-before](https://cloud.githubusercontent.com/assets/326587/19403539/d3dbf136-921c-11e6-8c06-627afd337458.png)

Once the file was on screen, there was a long period in which the application was unresponsive because of work being done in the `autocomplete-plus` package. This was partially addressed in https://github.com/atom/autocomplete-plus/pull/782, which disables symbol indexing for large files. The following graph only goes up to 6MB because for files larger than that, the editor crashed üò¨ .

![before-event-loop](https://cloud.githubusercontent.com/assets/326587/19403611/322746d2-921d-11e6-80a8-be1cd33b41df.png)
#### After

Opening a file:

Now, when opening a 10MB file, it appears on screen in two seconds second:

![after-opening](https://cloud.githubusercontent.com/assets/326587/19404390/77c8dcf0-9222-11e6-8c6c-fdd314e02e31.png)

The application remains responsive afterwards:

![after-event-loop](https://cloud.githubusercontent.com/assets/326587/19404382/6800b14e-9222-11e6-8771-ec2bbffd90d4.png)
",1522,False,en,0
12897,1,1,0,Externals,matthewwithanm,2016-10-07T12:58:10Z,29,0,2,0,"This will allow packages to observe the state without having to worry
about subscribing to the events after they've already fired.

Originally suggested in #10839
",163,False,en,0
12892,1,0,0,Internals,damieng,2016-10-06T17:07:35Z,14,13,2,0,"Addresses some of #4057
",24,True,en,0
12883,1,0,0,Internals,maxbrunsfeld,2016-10-05T19:49:02Z,44,2,2,0,"Fixes https://github.com/atom/tabs/issues/377
",46,True,en,0
12866,1,1,0,Externals,mikezawitkowski,2016-10-04T14:58:40Z,3,3,1,0,"[ci skip]
",10,True,pl,0
12825,1,0,0,Internals,maxbrunsfeld,2016-09-29T21:20:41Z,1,3,1,0,"We're seeing some Circle builds time out, and we think it may be because after sending the keystroke, enough time is elapsing during our tests that the screensaver is _still_ starting.

Example: https://circleci.com/gh/atom/atom/1287
",234,True,en,0
12824,1,0,0,Internals,maxbrunsfeld,2016-09-29T20:15:11Z,8,5,2,0,"Refs https://github.com/atom/atom/pull/12759

In that PR, we broke the ability to toggle the dev tools and reload spec windows.
",128,True,en,1
12823,3,0,0,Internals,maxbrunsfeld,2016-09-29T21:21:54Z,7,4,3,0,"Fixes https://github.com/atom/atom/issues/12575

üçê 'd with @as-cii 
",71,True,en,0
12822,2,2,0,Externals,philschatz,2016-09-29T18:56:21Z,3,3,1,0,"fixes #12820. 

The problem was that lines beginning with `Returns` are [special in atomdoc](https://github.com/atom/atomdoc/blob/f2917a6433b72f8fafb89f5fcff7060a450fa661/src/parser.coffee#L10)  so I replaced it with `Determines`.
# New atom-api.json

``` json
{
  ""name"": ""indentationForBufferRow"",
  ""sectionName"": ""Indentation"",
  ""srcUrl"": ""https://github.com/atom/atom/blob/v1.12.0-dev/src/text-editor.coffee#L2943"",
  ""visibility"": ""Essential"",
  ""summary"": ""Get the indentation level of the given buffer row."",
  ""description"": ""Get the indentation level of the given buffer row.\n\nDetermines how deeply the given row is indented based on the soft tabs and\ntab length settings of this editor. Note that if soft tabs are enabled and\nthe tab length is 2, a row with 4 leading spaces would have an indentation\nlevel of 2."",
  ""arguments"": [
    {
      ""name"": ""bufferRow"",
      ""description"": ""A {Number} indicating the buffer row."",
      ""type"": ""Number"",
      ""isOptional"": false
    }
  ],
  ""returnValues"": [
    {
      ""type"": ""Number"",
      ""description"": ""Returns a {Number}.""
    }
  ]
}
```
",1114,True,en,0
12821,1,0,0,Internals,damieng,2016-09-29T19:39:39Z,2,1,1,0,"Fixes https://github.com/atom/atom/issues/9459
",47,True,en,0
12814,18,2,0,Externals,50Wliu,2016-09-29T16:30:51Z,18,18,1,0,"Highlights:
- Many languages got improved modeline support, thanks to @Alhadis
- @Ingramz contributed to some nice quality-of-life fixes
- @bgriffith continues to work on JSDoc support
- language-hyperlink supports unicode links again, thanks to @viddo
- Continued CSS and SCSS overhauls by @esdoppio, as well as major function improvements in Sass by @idbartosz
- Improved header file highlighting thanks to @hgdsraj
- Continued YAML improvements, by myself

This PR turned out a little larger than expected, thanks to procrastination.
",537,False,en,0
12794,2,2,2,Externals,philschatz,2016-09-29T18:36:54Z,4,2,2,1,"This uses the `yargs.terminalWidth()` to set the width for `atom` and `./script/build`. Fixes #12719
# Screenshots

80 characters:

![image](https://cloud.githubusercontent.com/assets/253202/18886657/cac5e072-84be-11e6-8166-76ff9ed30e20.png)

130 characters:

![image](https://cloud.githubusercontent.com/assets/253202/18886676/daeeb82a-84be-11e6-95b2-acb510a76545.png)
",370,False,en,0
12783,2,3,0,Externals,vedharish,2018-01-09T00:00:25Z,36,0,2,469,"Closes Issue #12744 

New behaviour can be seen from this screen cast

![screen cast](https://cloud.githubusercontent.com/assets/2497481/18846601/581b4bd6-8444-11e6-9b03-23ada04530af.gif)
",188,True,en,0
12782,1,1,0,Externals,Ingramz,2016-09-29T20:58:06Z,33,126,65,3,"This is a split from #12189 to reduce cognitive load. All changes should be obvious enough to convince within 30 seconds for any given change that it is ok to remove/change.

Unlike #12189, this does not require up to date CoffeeScript.
",237,True,en,1
12780,1,2,0,Externals,Ingramz,2016-09-29T20:53:02Z,3,3,3,3,"With help from @50Wliu in #12189 we've managed to get Atom's CoffeeScript files (also in bundled packages) forward-compatible with [CoffeeScript >=1.9.0](http://coffeescript.org/#1.9.0):

> Changed strategy for the generation of internal compiler variable names. Note that this means that <code>@example</code> function parameters are no longer available as naked <code>example</code> variables within the function body.

This has only one major drawback - community packages which still use the old style need to be updated in a similar fashion, so before making a major release, we should give enough time for package developers to ensure their packages work with the new version. Most of the time it is fixable by adding a `@` in front of the parameter variable name. Inevitably this will also introduce issues like ""the new version broke package xyz"".

<details> 
  <summary>

If you are a package developer, use coffeelint already and want a somewhat convenient way to check your coffeescript project for that specific error, expand me.</summary>


For Atom packages I used [coffeescope2](https://github.com/za-creature/coffeescope) with following configuration (add into `coffeelint.json`).

``` json
  ""check_scope"": {
    ""module"": ""coffeescope2"",
    ""level"": ""warn"",
    ""environments"": [""es5"", ""es6"", ""browser"", ""node"", ""jasmine""],
    ""globals"": {
      ""atom"": true,
      ""afterEach"": true,
      ""beforeEach"": true,
      ""describe"": true,
      ""fdescribe"": true,
      ""xdescribe"": true,
      ""expect"": true,
      ""it"": true,
      ""fit"": true,
      ""xit"": true,
      ""jasmine"": true,
      ""runs"": true,
      ""spyOn"": true,
      ""waitsFor"": true,
      ""waitsForPromise"": true,
      ""indexedDB"": true
    },
    ""overwrite"": false,
    ""shadow"": false,
    ""shadow_builtins"": false,
    ""shadow_exceptions"": [""err"", ""next""],
    ""undefined"": true,
    ""hoist_local"": true,
    ""hoist_parent"": true,
    ""unused_variables"": false,
    ""unused_arguments"": false,
    ""unused_classes"": true
  }
```

Then run:

```
npm install
npm install coffeescope2
node_modules/.bin/coffeelint .
```

![screen shot 2016-09-26 at 18 23 37](https://cloud.githubusercontent.com/assets/1017132/18840213/77bda71e-8416-11e6-8a5b-f43e6e1c3cac.png)

Undefined identifier is potentially the problematic spot you will want to fix. In my case the following change was enough: https://github.com/atom/open-on-github/commit/1f19165cadec324a6f300e371ebfe3b72898e1fd

After that it is up to you whether you want to keep using coffeescope2 or not, but it should help avoiding the most common issue that comes with this CoffeeScript update. Using coffeescope2 after this procedure is completely optional.

**One extra note as I see people copying this configuration to their projects. Some of very useful functionality of coffeescope2 has been disabled in this configuration, so that we could focus on fixing the current issue. You are missing out on quite a bit (namely detection of unused variables, variable overwriting and shadowing), you might want to take a look at it by enabling the flags in configuration.**
</details>
Closes #9739
",3133,True,en,0
12762,1,0,0,Internals,nathansobo,2016-09-23T16:41:40Z,145,109,2,0,"In order to test changes to main.js, we need to rebuild the application. For this reason, it makes sense to do as little work as possible here. In this PR, we change main to just determine the resourcePath, then use that path to require a start function which can be iterated on in dev mode.

This PR is a prerequisite to much larger changes we plan to make to the main process code. It will make these changes much easier to test as we develop them.

:pear:ed with @maxbrunsfeld 
",481,True,en,0
12761,1,0,0,Internals,nathansobo,2016-09-22T23:31:10Z,4,3,1,0,"This restores the ability to open a Window by single-clicking the dock icon on macOS.

üçê ed with @maxbrunsfeld 

Closes https://github.com/atom/atom/issues/12728
",165,True,en,0
12760,3,1,0,Internals,maxbrunsfeld,2016-09-22T22:16:34Z,3,3,2,0,"1. User key bindings now take precedence over package key bindings regardless of their selector specificity.
2. We now throw errors if key binding files contain duplicate keys. This was an easy error to make because it's easy to think of these CSON files as working like style sheets, rather than JSON objects.

Closes https://github.com/atom/atom-keymap/issues/110

üçê  w/ @nathansobo 
",389,False,en,0
12759,4,0,0,Internals,nathansobo,2016-09-22T21:08:02Z,75,58,6,0,"This PR changes our approach to package deactivation on window teardown. Previously, we called `serialize` on each package during `deactivatePackages`, which was called when destroying the package manager. Now, we rely on `PackageManager.serialize` being called as a result of saving window state, which always happens before unloading the window.

We needed to change our window IPC code to ensure that all code paths leading to a window reload gave the window a chance to serialize its state. We also did a bit of cleanup while we were in there.

üçê ed with @maxbrunsfeld 
/cc @matthewwithanm 
",598,True,en,0
12754,1,1,0,Internals,as-cii,2016-09-22T16:58:07Z,6,8,1,0,"...because content could get reflowed and previous measurements might become inaccurate. Typically, this could occur when measuring while the editor is hidden: in that case, the yardstick would always report `0px` and save that position into the cache. Then, when the editor becomes visible again, the wrong `0px` value would be returned, thus causing cursors etc. to be displayed incorrectly.

This was being shadowed by a üêõ in our measurements cache, but after fixing it in #12730 it started becoming more evident.

/cc: @atom/core 
",538,True,en,0
12753,1,4,0,Externals,lgeiger,2016-09-22T22:07:50Z,12,8,3,0,"This was originally brought up in #12573 (Sorry, I force pushed and couldn't reopen this PR).

It will shorten the directory path displayed in the title bar
PR:
<img width=""270"" alt=""bildschirmfoto 2016-09-01 um 02 14 06"" src=""https://cloud.githubusercontent.com/assets/13285808/18151613/bc5bb666-6ff0-11e6-9bd1-f5ebece7a21f.png"">
Master:
<img width=""398"" alt=""bildschirmfoto 2016-09-01 um 02 23 43"" src=""https://cloud.githubusercontent.com/assets/13285808/18151614/bc5bd3ee-6ff0-11e6-935d-fc1e24d66cb7.png"">

@iolsen thanks for merging https://github.com/atom/fs-plus/pull/32.
",578,True,en,0
12748,1,0,0,Externals,Fank,2016-09-21T16:08:22Z,1,1,1,0,,0,False,en,0
12745,1,0,0,Internals,as-cii,2016-09-21T17:07:05Z,1,6,1,0,"Previously, we were always mistakenly returning `[(0, 0), (0, 0)]`, thus causing the first line of a file to be constantly invalidated. This caused also a performance regression for long lines with lots of highlight decorations at row 0, because any change in the buffer at other rows caused that line to be re-rendered and, therefore, re-measured as well. This was a contributing factor in the performance problem mentioned on #12662.

Since `TokenizedBuffer` never synchronously invalidates beyond the extent of the spatial change we can simply return an empty array instead.
",578,True,en,0
12733,4,0,0,Internals,nathansobo,2016-09-20T22:06:55Z,30,9,3,0,"This uses the new Electron `app.relaunch` API and will be used to restart Atom after updating packages or when changing the `useCustomTitleBar` option. Restart is actually performed in the main process in `AtomApplication.restart`, and we preserve various command line flags from the previous instance based on the state of the application.
",341,True,en,0
12730,2,0,0,Internals,as-cii,2016-09-21T11:35:28Z,35,29,2,0,"Previously we were ignoring the measurement cache for characters located at `left: 0px` because `0` is evaluated as falsy in Javascript, causing those character to be constantly re-measured.

This pull-request fixes it so that we explicitly check for null values when consulting the cache. It's pretty minor, but should save some CPU cycles when rendering an editor.

/cc: @atom/core 
",385,True,en,0
12713,1,16,2,Externals,Ingramz,2016-10-01T21:52:43Z,6,16,3,14,"Since sourcemaps still refer to `.coffee` files after build, we shouldn't be deleting those from final output directory. Debugging from devtools with latest builds is practically impossible without them.

cc @as-cii 

EDIT -

The approach has changed a bit since the PR was opened. See [the comment below](https://github.com/atom/atom/pull/12713#issuecomment-249570094).
",371,True,en,0
12697,6,37,0,Internals,nathansobo,2016-09-20T21:43:01Z,53,20,3,5,"Closes https://github.com/atom/atom-keymap/issues/35
Closes https://github.com/atom/atom-keymap/issues/34

This PR includes a new version of `atom-keymap` with changes described in https://github.com/atom/atom-keymap/pull/144.

The basic idea is that we will never shadow the ability to type an ASCII character with any key binding. Most of this logic is handled in `atom-keymap` and is describe in the above PR.

In addition to the keymap changes, we are forced to omit keyboard shortcuts for application menu items if there's a possibility they could interfere with typing `AltGraph`-modified characters on international layouts. This means that `alt-` bindings on Mac and `ctrl-alt-` bindings on Windows won't show up in the menu, but the bindings will still work so long as they don't conflict.

I'd appreciate it if international users could give this a try by downloading binaries from the build provider for their platform. You can find links to builds of this PR in the build status section at the bottom of this page, then navigate to the ""artifacts"" section:
- For Windows, go to AppVeyor artifiacts
- For Mac, go to Circle artifacts
- For Linux, go to Travis, where you can find the S3 download URLs in the build log
",1228,False,en,0
12696,250,83,0,Externals,thomasjo,2017-05-19T11:38:22Z,8961,15463,88,245,"### Reported Issues

* [x] Object undefined errors from Electron https://github.com/atom/atom/pull/12696#issuecomment-261263408 and https://github.com/atom/atom/pull/12696#issuecomment-261527755
* [x] Default CSP changed, breaking file-icons and specs
* [x] `os.tmpDir()` deprecation warnings https://github.com/atom/atom/pull/12696#issuecomment-288871751
* [x] Drag image in `tree-view` incorrect (https://github.com/atom/tree-view/pull/1054)
* [x] Drop marker on `tabs` and `tree-view` missing (https://github.com/atom/tree-view/pull/1055, https://github.com/atom/tabs/pull/426)
* [x] Changes from https://github.com/atom/atom/pull/13795 cause exceptions in minimap (https://github.com/atom-minimap/minimap/pull/582)
* [x] Dragging pane items between docks mistakenly shows drop indicators due to new security constraints for the `dragover` event `dataTransfer` object (https://github.com/atom/tabs/pull/437)
* [x] Developer tools stop updating after reloading a window in dev mode
* [x] Issues folding soft-wrapped lines https://github.com/atom/atom/pull/12696#issuecomment-301161445
* [x] Dev tools reload exception (https://github.com/atom/atom/pull/12696#issuecomment-301207979, filed a bug for this in https://github.com/electron/electron/issues/9493)
* [x] Dev tools reload crash (end of https://github.com/atom/atom/pull/12696#issuecomment-301207979, filed a bug for this in https://github.com/electron/electron/issues/9493)
* [ ] White flash when hiding toolbar https://github.com/atom/atom/pull/12696#issuecomment-301182375
* [ ] Warnings from tree-view https://github.com/atom/atom/pull/12696#issuecomment-301208739
* [ ] Consistently crashing when continuing from a devtools breakpoint (filed a bug for this in https://github.com/electron/electron/issues/9078)

Reported issues resolved by #13880:

* [x] Scrollbars misbehaving on first file that is opened/restored https://github.com/atom/atom/pull/12696#issuecomment-251299649
* [x] Shift-scrolling scrolls vertically instead
* [x] Failing `spec/text-editor-component-spec.js` tests

---

During my initial testing on macOS 10.12, this seems to be working. Haven't noticed any regressions.
Would be great if more folks could give this a spin üôá

/cc @atom/maintainers 

---

Fixes #11692 
Resolves #12690
Fixes #8006
Fixes #12832 
Fixes #13767 
Fixes #4084 (Will be fixed by the editor rendering rewrite)
Fixes #13265 (Will be fixed by the editor rendering rewrite)",2470,True,en,1
12695,6,1,3,Externals,50Wliu,2016-09-22T03:09:15Z,6,16,1,7,"Take two!
",10,True,en,0
12694,26,3,0,Internals,maxbrunsfeld,2016-09-21T20:24:12Z,153,90,13,6,"Closes https://github.com/atom/atom/issues/10297
Depends on https://github.com/atom/service-hub/pull/9

/cc @peterhal @nmote @mostafaeweda

This implements the plan we described in https://github.com/atom/atom/issues/10297#issuecomment-245997900. This means that Nuclide's `atom.directory-provider` service hook will be called earlier in Atom's startup process, before project deserialization and notably before Nuclide's `activate` method is called. It also means that custom `Directory` instances for which `.existsSync()` returns `false` will _not_ be added to the project, so you may need to handle the state where the user has not yet authenticated specially in that method.

Also note that the `atom.directory-provider` service must be specified in Nuclide's top-level package.json (rather than being registered dynamically) in order to be recognized.

Sorry for requiring you to make these changes, but we really need to fix #10297, which was introduced by changes that we made together in order to accommodate Nuclide in the first place, so it doesn't seem too unreasonable.
",1083,False,en,1
12689,1,2,0,Externals,thomasjo,2016-09-15T11:51:27Z,1,1,1,1,"This might need some manual testing. Judging by the [changelog](https://github.com/electron/electron/releases/tag/v1.3.6) I don't expect this to cause any issues, but it doesn't hurt to be extra careful.

/cc @atom/feedback 
",225,True,en,0
12674,2,4,0,Externals,matthewwithanm,2016-09-16T21:06:10Z,23,3,2,3,"This is a failing test to illustrate a bug in `getPanes()`. I'm not sure what the right fix for this is üòû

Here's the problem as I understand it now: when you call `PaneContainer::destroy()`, it destroys all of its Panes. Each Pane will notify its PaneAxis, which will then remove the Pane from its list of children. This all works as long as the container's root is a PaneAxis, however, when you go from 2 to 1 Panes, the PaneAxis will reparent the last Pane making it the container's root. From that point on, `PaneContainer::getPanes()` will delegate to [the (destroyed) Pane](https://github.com/atom/atom/blob/v1.11.0-beta5/src/pane.coffee), which returns a list that includes itself.

My gut says that the right way to address this is to never have a Pane be the root (e.g. always contain it in a PaneAxis) but I don't really know.
",840,True,en,0
12673,1,0,0,Internals,nathansobo,2016-09-12T19:39:38Z,4,4,2,0,"Fixes #12654
",13,True,en,0
12672,1,1,0,Internals,nathansobo,2016-09-12T16:54:01Z,3,0,1,0,"Since spec windows don't register handlers for the IPC messages requested window state to be saved, the promise never resolves and the close button needs to be clicked twice. To avoid this, we'll just resolve the promise immediately in a spec window so we can proceed to close it.

Closes #12664
",296,True,en,0
12671,5,4,1,Externals,ghost,2016-09-12T18:33:01Z,12,12,2,0,,0,False,en,0
12661,1,2,0,Externals,thomasjo,2016-09-11T15:50:55Z,0,1,1,0,"The _""Window load time: ...""_ console message doesn't really provide any tangible benefit, and is generally just annoying as üí© when running specs.

Additionally, I believe on Windows this is printed in the terminal when Atom is launched via `atom.cmd`.

/cc @atom/feedback @nathansobo @damieng 
",298,True,en,0
12659,1,0,0,Externals,Fank,2016-09-11T15:15:55Z,1,1,1,0,,0,False,en,0
12653,2,7,0,Internals,damieng,2016-09-09T23:11:15Z,8,4,3,0,"The source maps for babel and typescript never worked correctly on windows as the path was treated by the Chromium debugger as relative because it was not prefixed with file:///.  This led to a weird issue where the source map was thought to be in a different folder to the generated JS.

This corrects it using the same approach we use for Coffeescript and also removes the 'App load time' which is the last thing spewing onto the command line at start-up now Electron has been upgraded.
",489,True,en,0
12646,3,2,0,Internals,as-cii,2016-09-09T15:59:16Z,60,45,6,0,"Previously we used to run tests only on CircleCI which, despite providing a pretty extensive coverage for macOS, is insufficient to understand whether something has regressed on other platforms. The ideal solution to this problem would be to run tests on every operating system: our renderer test suite, however, is particularly flaky on Linux and Windows as, with time, it has evolved without multi-platform compatibility in mind.

This pull-request is a first step towards such solution: instead of using Travis and AppVeyor as build-only providers, we will now run main process tests on them. These kind of tests are more coarse-grained than the renderer process ones, but they provide quick feedback and should act as good smoke tests for when we release new versions. We could have used `chromedriver` as well, but it seems like it's quite flaky on both Windows and Linux, so I have put that on hold for the time being (in a later pull-request, it might be interesting to change our current `smoke-spec` to use [electron/spectron](https://github.com/electron/spectron) instead and see if that changes anything).

/cc: @atom/core 
",1135,True,en,3
12645,1,2,0,Internals,as-cii,2016-09-09T15:57:57Z,44,4,2,0,"This regression was caused by a nuance in the way we maintain state in `AtomApplication` for open windows. Specifically, when closing the last window on Windows and Linux, we were explicitly calling `app.quit` _before_ removing such window from the list of open ones. In turn, this caused the new `before-quit` behavior introduced in #12619 to work improperly because it made the application wait on saving the state of a stale window before exiting.

With this pull-request we are fixing that by making sure the stale window is removed before calling `app.quit` in `removeWindow`.

/cc: @atom/core @damieng 
",609,True,en,1
12643,1,0,0,Internals,damieng,2016-09-08T23:26:20Z,4,3,2,0,"Fixed  #12642
",14,True,en,0
12619,3,4,14,Internals,as-cii,2016-09-07T14:02:57Z,90,33,7,0,"This fixes a test failure on #12300 where the new Electron version prevents state from being serialized.

Previously, we used to save the window's state in the renderer process `beforeunload` event handler: because of the synchronous nature of event handlers and the asynchronous design of IndexedDB, this could potentially not save anything if windows close fast enough to prevent IndexedDB from committing the pending transaction containing the state. (Ref.: https://mzl.la/2bXCXDn)

With this commit, we will intercept the `before-quit` events on `electron.app` and the `close` event on `BrowserWindow` (which will fire respectively before quitting the application and before closing a
window), and prevent them from performing the default action. We will then ask each renderer process to save its state and, finally, close the window and/or the app when the IndexedDB transaction completes.

/cc: @atom/core @thomasjo 
",924,True,en,1
12616,1,4,0,Internals,simurai,2016-09-10T10:33:51Z,8,1,4,3,"When splitting a pane **down**, the height isn't evenly split in half, just after resizing the tree-view. Or when some other style is changed in DevTools.. maybe if the change triggers a reflow?

![split](https://cloud.githubusercontent.com/assets/378023/18302313/2d086ea6-7512-11e6-9ded-24679c9cde6a.gif)

> Using `1.11.0-dev-eff5fa6` on macOS.

Adding `min-height: 0;` seems to work. This is probably related to #11866. Or some rendering bug. This PR adds `min-height: 0;` everywhere we already added `min-width: 0;`.
",520,True,en,0
12610,1,0,0,Internals,as-cii,2016-09-06T16:57:54Z,23,12,2,0,"Fixes #12609.

Previously, when calling `TokenizedBufferIterator.seek` with a position that lied within a text tag, we advanced the iterator by the extent of that tag without, however, consuming it. Hence, when calling `moveToSuccessor` afterward, we would consume that tag and advance the iterator again, thus effectively moving it twice and causing issues like the aforementioned one.

An option could be to clip to the left of the textual tag without consuming it. However, this would be a little odd with respect to the current contract of (`DisplayLayer` and) `seek`, whose promise is to move the iterator to a position that is greater or equal than the one asked by the caller.

Therefore, with this pull-request, we are changing the behavior of `seek` in this particular scenario to consume the tag in question and process all its siblings until a tag boundary is finally found. This ensures that the above contract is always respected, while still preserving the ""seek to leftmost tag boundary"" semantics (i.e. notice how in the changed test case, calling `seek` with `Point(0, 1)` is the same as calling it with `Point(0, 3)`).

/cc: @nathansobo 
",1156,True,en,0
12589,1,0,0,Internals,as-cii,2016-09-02T14:02:06Z,2,8,1,0,"Fixes #12587.

All the native modules we ship with Atom are compiled by dynamically linking the libstdc++ library. Using gcc (and g++) > 4.6 to compile them, however, requires a newer version of that library, which is not installed by default on Ubuntu Precise (Travis' default image) and thus causes all the third-party packages built via Travis to fail when using Atom 1.11-beta.

By using clang-3.3 we can keep backwards compatibility with previous versions of libstdc++ and still be able to compile C++11 code (which is mandatory for Node >= 4).
",550,True,en,0
12585,1,2,0,Externals,aqchin,2016-09-02T01:38:45Z,1,1,1,0,"The flight manual page does not have a secure connection, so navigating to the https link in Help->Documentation would result in an error with its security certificate.

Link changed to http but adding https support might be a better idea.
",240,True,en,0
12581,1,0,0,Internals,as-cii,2016-09-01T15:10:12Z,0,1,1,0,"Originally, editors with autoHeight set to false had an inline style of 100%. We attempted to retain this behavior while allowing CSS to change the height by applying this styling via a global CSS rule instead: unfortunately, however, this applies to non autoHeight editors as well because due to our deprecated autoHeight detection routine, the height of these editors must be assigned on an internal element and therefore does not override the 100% styling from the stylesheet.
",480,True,en,0
12580,1,2,0,Externals,frantic1048,2016-09-02T01:28:23Z,1,0,1,0,"This patch fixes `<atom-pane-resize-handle>`(`the handle`) overflow issue introduced in #7446 .

I was thinking of removing `/static/panes.less#L19` 's `z-index: 3`, but it just hide the handle, its height still overflows.

Then I noticed `the handle` uses `height: 100%` to gain height. The overflowed handle, between two `atom-pane-axis.horizontal.pane-row`, should have inherid it's direct parent, but actual it herited a further parent in higher hierachy `atom-pane-axis.horizontal.pane-column`. `atom-pane-axis` does't have a rule let its direct child uses `height: 100%` to gain expected height.

As a result, I set `position: relative` for `atom-pane-axis` to make atom-pane-resize-handle as it's direct child gain correct height.

screenshot with this patch:

![screenshot_20160901_214907](https://cloud.githubusercontent.com/assets/3102803/18170586/62a53916-7091-11e6-8eb5-d43345e5fd2b.png)
",900,True,en,0
12576,1,1,0,Internals,as-cii,2016-09-01T08:38:00Z,1,9,1,0,"Fixes #12571 

In the previous build scripts, we were considering all the builds triggered by a pull-request to be part of the dev channel. We adopted the same heuristic for the new build scripts, but didn't notice that Travis always sets the `TRAVIS_PULL_REQUEST` variable to ""false"" (which causes the `process.env.TRAVIS_PULL_REQUEST` expression to be evaluated as truthy).

In the past, this wasn't a problem because we were building artifacts via Janky, but after switching to Travis this makes it generate the wrong assets on stable and beta.

To fix this, it seems reasonable to remove the conditional that checks if we are building a pull-request: in the past this could have been problematic because assets could be uploaded inadvertently to S3 or GitHub, but this should be safe now that we rely on the release publisher to perform that task.

/cc: @nathansobo @joefitzgerald 
",886,True,en,0
12572,1,1,0,Externals,ablakely,2016-09-01T13:21:02Z,2,0,1,0,"Added support for building debian powerpc packages.
",52,True,en,0
12566,1,0,0,Externals,Ben3eeE,2016-08-31T19:20:18Z,2,2,2,0,,0,False,en,0
12565,1,0,0,Externals,joefitzgerald,2016-08-31T19:15:15Z,1,1,1,0,"https://david-dm.org/atom/atom / https://nodesecurity.io/advisories/marked_content-injection
",93,True,hr,0
12562,6,9,12,Externals,joefitzgerald,2016-09-08T19:55:19Z,140,45,3,8,"This PR simplifies the logic used to determine when to patch the environment for users of linux and macOS. Instead of using a whitelist of shells and trying to detect how Atom was launched with environment variable markers, we simply modify `atom.sh` to set a environment variable that is only set when launched from the shell. If this environment variable is not detected, the environment is patched with the environment from a new, interactive, login shell.
- [x] Stop whitelisting shells
- [x] Introduce `ATOM_SUPPRESS_ENV_PATCHING` environment variable, which is only set in `atom.sh`
- [x] Manually test on Ubuntu
- [x] Manually test on macOS

Fixes #11910
Fixes #12535
",675,False,en,0
12560,1,0,0,Internals,damieng,2016-08-30T20:43:25Z,14,0,2,0,,0,False,en,0
12559,1,0,0,Internals,as-cii,2016-08-30T17:33:17Z,5,10,2,0,"In #12410 we started using electron-packager which automatically renames Electron executables (e.g. `Electron Helper`, `Contents/MacOS/Electron`) to match the provided app name. This behavior differs from the previous Grunt-based scripts and caused breakage in places where we assumed these executables would always be named `Atom`.
",333,True,en,0
12555,4,7,3,Internals,as-cii,2016-08-30T14:43:17Z,104,10,10,0,"Fixes #12549.

This pull-request adds the ability to run `script/build --install` also on Linux (installing Atom in `/usr/local`) and on Windows (installing Atom in `C:\Users\<user name>\AppData\Local\`).

/cc: @nathansobo
",223,True,en,0
12553,1,1,0,Internals,as-cii,2016-08-30T09:51:34Z,4,2,1,0,"Refs: #12550 

This will ensure all the dependencies used later in `script/build` are installed.

/cc: @nathansobo @lee-dohm 
",126,True,en,0
12551,1,1,0,Externals,matthewwithanm,2016-08-30T16:34:55Z,12,12,3,0,"This updates the context menu so that splitting behaves consistently, regardless of whether the context menu is used from a text editor or not.

The current behavior comes from #7953 but, as @maxbrunsfeld pointed out when we talked about this, the purpose of that commit was to simplify the command names, so the UX change probably wasn't intentional.
",352,True,en,0
12550,3,3,0,Internals,nathansobo,2016-08-30T06:21:06Z,8,13,8,0,"This is how things worked previously, and it seems both convenient and low-cost. In the [Scripts To Rule Them All](https://github.com/github/scripts-to-rule-them-all) standard, there are examples of [scripts calling other scripts](https://github.com/github/scripts-to-rule-them-all/blob/master/script/test#L20).

/cc @as-cii @lee-dohm 
",336,True,en,0
12546,1,0,0,Internals,as-cii,2016-08-29T18:51:17Z,1,12,2,0,"Refs: atom/text-buffer#172

/cc: @nathansobo 
",46,True,xh,0
12545,3,2,2,Externals,yuanwhy,2017-01-09T19:29:43Z,4,0,2,133,"Fixes https://github.com/atom/atom/issues/12495

When we add or remove project folder,  the window's current project path will be changed, then ""initialPaths"" will be reloaded, it is the best time to save state

/cc @maxbrunsfeld @lee-dohm 
",241,True,en,0
12540,1,0,0,Internals,nathansobo,2016-08-28T12:54:09Z,2,0,1,0,"I think this should take the application out of ‚Äúapp nap‚Äù on macOS, leading to better responsiveness when opening paths from the CLI. Based on my research this morning I'm fairly optimistic that this might be all that is required to solve our issues with intermittent slowness when opening from the command line on macOS.

/cc @maxbrunsfeld @as-cii @damieng 
",363,True,en,0
12530,1,0,0,Internals,as-cii,2016-08-26T13:50:12Z,6,0,1,0,"/cc: @atom/core 
",17,True,en,0
12529,1,1,0,Internals,as-cii,2016-08-26T13:44:17Z,11,7,3,0,"Unless a choice has been made by the user, the telemetry consent tab always shows up as the first one when opening Atom, thus breaking some of the assumptions we make in main process tests. This caused our test suite to be ‚ùå, even if behavior-wise everything was okay.

With this pull-request we disable the telemetry tab in main process and smoke tests, so that the build is üíö again.

/cc: @atom/core 
",408,True,en,1
12522,1,3,0,Internals,maxbrunsfeld,2016-08-26T17:31:19Z,5,5,1,0,"This replicates a bugfix that landed on master in via https://github.com/atom/atom/pull/12125, into the `1.10-releases` branch.

Refs https://github.com/atom/autocomplete-plus/issues/752

We need this before we can do another railcar release.
",243,True,en,0
12521,2,1,0,Internals,damieng,2016-08-26T01:18:42Z,64,0,2,0,,0,False,en,0
12515,3,0,0,Internals,simurai,2016-08-26T04:40:17Z,5,6,3,0,"- [x] Add icon (@simurai)
- [x] Assign to file types (@damieng)

![screen shot 2016-08-25 at 10 27 57 pm](https://cloud.githubusercontent.com/assets/378023/17970965/b2066850-6b13-11e6-9dca-5c1b3b3178c0.png)

Closes #11504
",222,False,en,0
12509,4,0,0,Externals,mnquintana,2016-08-25T15:31:36Z,4,4,1,0,"Continuation of:
- https://github.com/atom/atom/pull/12281
- https://github.com/atom/metrics/pull/66
- https://github.com/atom/exception-reporting/pull/20
- https://github.com/atom/about/pull/37
- https://github.com/atom/welcome/pull/48

This PR bumps all the packages that were changed as part of the new telemetry consent stuff, so all those changes will be in `master` üòÑ 

üëÄ @damieng 
",394,False,en,0
12502,16,4,0,Externals,50Wliu,2016-09-07T13:28:53Z,11,11,1,15,"~~Do not merge; more language updates coming soon!~~
All language updates are done.

Too tired to write up a detailed changelog, but here are the major things to look out for:
- YAML support got seriously improved with this latest release.  But with serious improvements comes the potential for serious regressions, so that might be something to keep an eye out for.
- language-c got a fix ported from the textmate bundle!  Yay!
- Tons of JS improvements, especially regarding JSDoc and object keys.  Again, also has the possibility of regressions.
",549,False,en,0
12501,1,2,0,Externals,zertosh,2016-09-09T20:45:46Z,66,0,2,17,"This makes `onDidAddBuffer` symmetrical with other `onDidAddX` methods and their `observeXs`. It also documents `onDidAddBuffer` and adds tests for it.

Released under CC0.
",173,True,en,0
12469,1,1,0,Internals,maxbrunsfeld,2016-08-19T04:46:20Z,5,2,2,0,"/cc @50Wliu üé© 
",18,True,sk,0
12463,2,0,0,Internals,maxbrunsfeld,2016-08-18T17:59:57Z,33,17,2,0,"The display layer can't serialize all of its configuration, because some of them (`ratioForCharacter`, `isWrapBoundary`) are functions. So the text editor needs to reset its display layer with all of its parameters one time after deserializing.

Fixes https://github.com/atom/atom/issues/12451
",294,True,en,0
12448,9,3,0,Internals,as-cii,2016-08-17T18:55:54Z,154,14,6,0,"Fixes #12441 
Refs #12445 

This pull-request is a proposal to introduce an `autoWidth` parameter on `TextEditor` instances. When instantiating an editor with this parameter, the `width` of the `<atom-text-editor>` element will be automatically adjusted to the width of its content (+ the width of the gutter, if present).

![autowidth](https://cloud.githubusercontent.com/assets/482957/17744937/27e4ed64-64aa-11e6-92cf-6214fcb32847.gif)

Since we explicitly assign a `width` to text editors that have enabled `autoWidth`, there's no need to resort to CSS hacks on the parent component (e.g. `style.minWidth = '1em'`) or on the element itself (i.e. `display: inline-block`). This option will be off by default, meaning that editors will inherit the parent element's width, exactly like a `display: block` element. Because this will be an opt-in behavior it shouldn't introduce any regression and, thus, we might hot-fix stable and beta (respectively 1.9 and 1.10, as of this pull-request) with this new parameter.

/cc: @nathansobo @maxbrunsfeld 
",1047,False,en,0
12445,14,0,0,Internals,nathansobo,2016-08-19T14:58:02Z,180,75,9,2,"Previously, we attempted to automatically determine whether the editor‚Äôs height should be based on the editor‚Äôs content or the height of its container. Unfortunately, DOM APIs are insufficient to make this determination in a complete way, leading to unpredictable behavior.

This PR deprecates the automatic determination of this behavior. By default, editors base their height on their content. If an editor has an explicit height assigned via its style or is positioned absolute with an explicit top and bottom, we disable the content-based height calculation and log a deprecation warning telling the user to assign `autoHeight` explicitly in the future.

This paves the way to add an `autoWidth` setting to address https://github.com/atom/atom/issues/12441, which will default to `false` but be overridable in this same way.

We intend to move this PR through the entire release cycle because it's a pretty big change, then open a separate PR for the more additive `autoWidth` setting that we can hotfix to 1.9.x to fix Nuclide's issue without as much risk.

Tasks:
- [x] Deprecate automatic auto-height determination and get tests green
- [x] Ensure we only issue one deprecation warning per editor
- [x] Add test coverage for auto-height property
- [x] Add test coverage for deprecations
- [x] Remove remaining deprecations from core specs
- [x] Remove remaining deprecations from package specs
- [x] Fix broken package specs

/cc @atom/facebook @as-cii 
",1465,True,en,0
12440,3,4,0,Externals,matthewwithanm,2016-08-19T11:10:13Z,25,9,2,2,"Under the current behavior, which item is active won't be restored unless it implements `getURI()`.  This change lifts that restriction by serializing the index of the active item instead.
",189,True,en,0
12439,6,18,4,Externals,remexre,2016-08-18T21:32:36Z,33,14,3,1,"See #10086.
",12,True,en,0
12434,1,0,0,Internals,maxbrunsfeld,2016-08-16T00:50:19Z,43,0,2,0,"Refs https://github.com/atom/atom/pull/12196#issuecomment-239247231
",68,True,en,0
12426,1,1,0,Externals,oggy,2016-08-20T19:19:44Z,1,1,1,5,"Looks like this should follow the other marker methods in delegating to the default marker layer rather than the buffer directly.
",130,True,en,0
12410,212,2,1,Internals,nathansobo,2016-08-29T15:31:04Z,2288,3787,127,16,"Our existing Grunt-based build system is really difficult to follow, so this PR replaces it with a simpler approach involving plain old JavaScript.

The `build` directory is deleted, and instead the `script` directory takes on an expanded role, getting its own `package.json` and `lib` directories to support an overhauled version of `script/bootstrap`, `script/build`, and `script/test`. Instead of relying on Grunt, we do everything via functions defined in the `script/lib` directory.
### Build script

The _basic_ structure of the new build script is as follows:
- Copy all sources to `atom/out/app`
- Transpile Babel, CoffeeScript, and Less files in place
- Generate pre-cached metadata
- At this point, `out/app` is a valid Electron app that doesn't require transpilation support to run.
- Run [`electron-packager`](https://github.com/electron-userland/electron-packager) on `out/app` to package it into a distributable application on the current platform.
- Build installer on Windows, code sign on macOS
- Zip stuff up

This is all designed to run only on third-party build providers (CircleCI for macOS, Travis for Linux, and AppVeyor on Windows). We've put zero effort into making these scripts run on internal Janky boxes.
### Release publishing plan

We deliberately omit the artifact uploading step, because our plan is to orchestrate release publishing outside of the build. We'll rely on the build services to store artifacts associated with all builds, and when we're ready to release we'll have a script download these artifacts from Circle, Travis, and AppVeyor and upload them to the releases API and S3. This will help to ensure that all artifacts stay in sync based on a specific commit SHA.
### Tasks
- [x] Build scripts working on all platforms
  - [x] macOS
    - [x] Build a complete electron app
    - [x] Code sign
    - [x] Green build on Circle
    - [x] Implement `--install` flag
  - [x] Windows
    - [x] Build a complete electron app
    - [x] Build an installer
    - [x] Delete unnecessary .nupkg delta file uploaded as artifact
    - [x] Code sign
    - [x] Green build on AppVeyor
    - [x] Installing won't be supported, because users can launch the generated installer.
  - [x] Linux
    - [x] Build a complete electron app 
    - [x] Generate `.deb` package
    - [x] Generate `.rpm` package
    - [x] Green build on Travis
    - [x] Make Travis artifacts downloadable
    - [x] Installing won't be supported, because users can launch the package manager on the generated packages.
- [x] Add `script/lint`
- [x] Release publishing
  - [x] Visualize build status for release branch across all platforms
  - [x] Download and publish artifacts for a specific SHA
  - [x] Authenticate Atom maintainers that work for GitHub
  - [x] Get app running on Heroku Enterprise
  - [x] A pinch of styling
- [x] Documentation
  - [x] Rewrite build instructions for macOS
  - [x] Rewrite build instructions for Windows
  - [x] Rewrite build instructions for Linux
- [x] Ops
  - [x] Make builds a no-op on previous internal build systems.
  - [x] Eliminate atom-private AppVeyor build and use private env vars instead
",3141,True,en,0
12409,2,1,0,Internals,nathansobo,2016-08-12T22:35:05Z,651,636,4,0,"A few months ago, I rewrote the editor tests to use real timers and animation frames to address coverage gaps in the existing tests. Unfortunately, it's proven extremely difficult to make these tests run reliably on CI.

We plan to extract the editor completely soon, at which point it may be worth another try to implement more realistic tests, though doing so will probably require a careful look at the many nuanced time-sensitive sequences of operations that occur within the editor. Until then, I'm going back to a less realistic but more reliable approach to testing this component.
",589,True,en,0
12404,1,1,0,Externals,lazy-ninja,2016-08-12T18:13:47Z,12,12,3,0,,0,False,en,0
12397,3,2,1,Internals,damieng,2016-08-11T21:59:05Z,16,2,2,0,"1. Adds help for the build script to clarify options up-front
2. Does not build Windows installer by default as it is SLOW
",123,False,en,0
12396,4,1,3,Externals,joefitzgerald,2016-08-11T23:17:10Z,67,15,3,0,"In Atom 1.7 and 1.8, the environment would be patched for users of the zsh shell on OS X, who launched Atom from the Dock / Finder / Spotlight. A whitelist of shells was established in #12317, which is extended here to include zsh and fish.

Tested with built-in zsh, homebrew installed zsh, and homebrew installed fish.
",321,True,en,0
12394,49,7,0,Internals,nathansobo,2016-08-12T20:17:16Z,775,597,17,1,"This is a proof of concept of where I think we need to take our main process testing. There's a lot to do to get to ideal, and this PR doesn't do any of that... All we do is the minimal to instantiate an `AtomApplication` in our main process mocha suite and test the results of calling `openWithOptions` repeatedly.

The main reason we did this now is because this test was failing on CircleCI and blocking our build modernization effort and we didn't want to fight with the existing ChromeDriver test.

In the future, I'd like to have a single method on `AtomApplication` called `launch` that takes CLI arguments directly from our main script. We can integration test that method or mock out a method like `openWindow` that takes options to separate unit testing of CLI parsing from window open logic. The point is, the main process code is just JavaScript and we can test it just like we test anything else. If we reduce `main.js` to just calling `launch`, then we only need ChromeDriver coverage of our shell scripts that launch Atom.

/cc @maxbrunsfeld
",1057,True,en,3
12393,1,16,0,Internals,as-cii,2016-08-16T11:30:00Z,2,6,2,5,"After #11828, Atom always creates a backup file in the `~/.atom/recovery` directory, trying to restore it automatically via the main process in case there is a hard crash on the renderer process. This approach should be resilient enough to allow us to delete and stop using the `editor.backUpBeforeSaving` config option.

We can still keep it for a while in text-buffer, in case we need to use it again at some point, but it's probably fine to remove it from there too at some point in the future.

@atom/core: what do you think?
",530,True,en,0
12382,3,0,0,Internals,as-cii,2016-08-10T18:01:59Z,4,103,3,0,"Depends on atom/text-buffer#170.
Fixes #12085.

/cc: @nathansobo 
",66,False,en,0
12378,3,0,0,Internals,maxbrunsfeld,2016-08-09T22:24:44Z,8,2,2,0,"Refs https://github.com/atom/atom/pull/12196
",45,True,en,0
12377,1,3,0,Internals,nathansobo,2016-08-09T21:20:30Z,21,2,2,0,"Fixes https://github.com/atom/atom/issues/12280

If the object passed via IPC contains any keys of the same reference, all but one of these keys will be nulled out. Converting to/from a string avoids this problem.

@atom/electron-maintainers is it expected that objects passed over IPC would have fields nulled out if they point to the same object?
",349,True,en,0
12375,1,2,2,Internals,maxbrunsfeld,2016-08-09T20:19:34Z,34,15,2,0,"Fixes https://github.com/atom/atom/issues/12333
",48,True,en,0
12371,1,3,0,Internals,as-cii,2016-08-09T09:34:24Z,8,2,1,0,"This fixes a regression introduced in #12350 that was preventing Atom from starting after running `script/build`. Specifically, we were still transpiling coffee script files located in the `exports` directory, ignoring all the javascript assets inside of it, thereby causing the output application to not contain the Atom exports file and to throw an exception on startup. To fix this, we have replaced coffee script transpilation with babel transpilation for `export/**/*.js` files.

/cc: @maxbrunsfeld @mnquintana @CraZySacX
",527,True,en,0
12366,3,0,0,Internals,nathansobo,2016-08-08T18:16:09Z,12,1,2,0,"Refs #12085 
",13,True,fr,0
12351,1,0,0,Externals,mnquintana,2016-08-07T00:26:49Z,2,2,1,0,"Per discussion in https://github.com/atom/atom/pull/12258
",58,True,nl,0
12350,1,2,0,Externals,mnquintana,2016-08-08T19:04:35Z,60,46,3,1,"This PR rewrites Atom's exports file as JS ‚Äì it's a pretty small file, so there shouldn't be anything too weird going on here. üòâ 

üëÄ @atom/feedback 
",157,True,en,0
12348,1,1,0,Externals,Zirro,2016-08-07T14:47:51Z,1,1,1,0,"Just a small touchup - I noticed that there was a duplicate ""Note:"" in the custom title bar settings. I also took the opportunity to use HTML5s preferred `<br>` rather than `<br />`, and changed ""title-bar"" to ""title bar"" for consistency.
",239,True,en,0
12346,4,0,0,Internals,nathansobo,2016-08-06T14:30:47Z,24,7,2,0,"Fixes https://github.com/atom/tree-view/issues/906

This fixes an issue refreshing repository statuses with an Atom project containing multiple folders. We collect all project paths belonging to the current repository by relativizing them against its working directory. Unfortunately, when `Repository.relativize` is passed an absolute path that is not relative to the repository's working directory, it just returns the path unchanged. We were passing this absolute path into the subprocess that collected statuses, and since it was outside the repository in question we were returning no status changes for it, thus clearing all statuses for the repository.

This fixes the problem by ensuring we include no absolute paths in the collection of paths we pass to the subprocess.
",779,True,en,0
12342,3,1,0,Internals,nathansobo,2016-08-08T19:35:26Z,1,8,1,3,"This saves space, but leads to surprises when package code tries to read these files for purposes of introspection. For example, it was causing us not to report exceptions from the exception-reporting package. The .1% of the app bundle size it saves doesn‚Äôt seem worth the potential for problems.

/cc @lee-dohm @kattrali
",324,True,en,0
12327,2,6,0,Externals,Zirro,2016-08-06T14:29:53Z,23,1,2,1,"Unlike the native version, the custom title bar implemented in #11790 doesn't respond to double-clicks. This pull request implements the double-click behaviour in a manner that is consistent with the native title bar.

This is my first contribution to Atom, and the first time I've written CoffeeScript. I'd be grateful for feedback if there's something I ought to have done differently.

In case this pull request should include a test, I would appreciate some help in putting it together üôÇ
",495,True,en,0
12325,4,0,0,Internals,maxbrunsfeld,2016-08-04T21:02:40Z,13,6,4,0,"Fixes https://github.com/atom/atom/issues/12111
",48,True,en,0
12317,1,1,6,Internals,maxbrunsfeld,2016-08-04T00:00:46Z,109,255,4,0,"Fixes https://github.com/atom/atom/issues/12313
Fixes https://github.com/atom/fuzzy-finder/issues/205
Refs https://github.com/atom/atom/pull/12006 (solves same problem, but with a different approach)

Both `NODE_ENV` and `NODE_PATH` affect Atom's own behavior, so when loading environment variables from the main process, Atom needs to control these two variables explicitly.
",376,False,en,0
12306,1,0,0,Internals,as-cii,2016-08-03T14:28:32Z,4,2,1,0,"This was introduced in #12246 as a result of the `.coffee` -> `.js` conversion of `main-process/main.js`. An exception we were suppressing in Coffeescript via its `try` (without `catch`, which means is implicit) is now being thrown again, causing Atom to not start when the `$ATOM_HOME` folder doesn't exist.

Fixes #12283.

/cc: @atom/core 
",342,True,en,0
12300,18,23,1,Externals,thomasjo,2016-09-07T15:52:32Z,151,25,15,35,"The purpose of this PR is to begin the process of upgrading Electron to the latest release. As of right now, there are a few things that need to be dealt with before that can happen.

The primary problem is that as of Electron v1.1.0, Node.js was upgraded to v6 and that causes some issues. ~~I believe (and hope) that the only major issue is the usage of older version of graceful-fs in a few of our dependencies. Once those have been resolved, I think we'll be able to sort out the remaining issues in Atom core without too many problems.~~ OK, there are more problems than first anticipated ‚Äî I'll keep updating the task list below as I identify (and fix) problems.

There is another concern though, since Electron v1 removed some [deprecated module `require` bits](https://github.com/electron/electron/pull/5373).

I propose that in this PR, we perform the upgrade process in stages, one minor version bump at a time, to minimize the number of issues and hopefully keep it reasonable.

---
- [x] Upgrade to v1.0.x
- [x] Upgrade to v1.1.x
  - [x] Resolve breaking changes to `path` module. See https://github.com/atom/atom/pull/12300#issuecomment-241507011.
    - [x] tree-view (atom/tree-view#926)
    - [x] autocomplete-plus (atom/autocomplete-plus#753)
    - [x] Add deprecated shims, so that community packages don't break
- [x] Upgrade to v1.2.x
  - [x] Fix use of removed `ATOM_SHELL_INTERNAL_RUN_AS_NODE` env variable in `exports/atom.js`
  - [x] Fix beforeunload handler to conform to new contract
  - [x] Open issue on atom-package-deps (https://github.com/steelbrain/package-deps/issues/57)
- [x] Upgrade to v1.3.x
  - [x] Upgrade oniguruma to work with Node 6
  - [x] Upgrade marker-index to work with Node 6
  - [x] Investigate why `atom-pane-resize-handles` are positioned incorrectly, making it impossible to resize panes with the mouse.
- [x] Add deprecated shims for legacy electron APIs (where feasible)
- [x] Open issues on packages that use removed Electron APIs that we aren't able to shim (because they involve methods called on remote proxy objects).
  
  APIs:
  - `remote.require`
  - `WebContents.prototype.loadUrl` (renamed to `loadURL`)
  - `WebContents.prototype.getUrl` (renamed to `getURL`)
  
  Packages:
  - [x] atom-cos-studio (https://github.com/MDevelopmentGroup/Atom-COS-Studio/issues/35)
  - [x] atom-force (https://github.com/mikegedelman/atom-force/issues/3)
  - [x] atom-pronama-chan (https://github.com/hurumeki/atom-pronama-chan/issues/1)
  - [x] dev-tools-themes (https://github.com/travs/dev-tools-themes/issues/2)
  - [x] elasticsearch-client (https://github.com/KunihikoKido/atom-elasticsearch-client/issues/9)
  - [x] impress (https://github.com/kaitoy/impress/issues/1)
  - [x] jibo-sdk (https://github.com/jiborobot/jibo-sdk/issues/11)
  - [x] julia-client (https://github.com/JunoLab/atom-julia-client/issues/217)
  - [x] markdown-preview-enhanced (https://github.com/shd101wyy/markdown-preview-enhanced/issues/115)
  - [x] mavensmate-atom (https://github.com/joeferraro/MavensMate-Atom/issues/334)
  - [x] mocha-runner (https://github.com/tswaters/atom-mocha-runner/issues/10)
  - [x] nitrogen (https://github.com/nitrous-io/nitrogen-dist/issues/43)
  - [x] tree-view-bleeding (https://github.com/forivall/atom-tree-view-bleeding/issues/2)

Fixes #12591
",3310,True,en,2
12297,1,1,0,Internals,maxbrunsfeld,2016-08-03T00:02:59Z,13,1,2,0,"Thanks @iolsen for catching this.
Fixes https://github.com/atom/atom/issues/12296
",82,False,en,0
12295,29,1,0,Internals,nathansobo,2016-08-02T23:13:14Z,142,5,11,0,"Picks up from #11790
",21,True,en,0
12292,1,0,0,Internals,maxbrunsfeld,2016-08-02T20:58:28Z,16,5,2,0,"Fixes an error introduced in https://github.com/atom/atom/pull/12086, via https://github.com/atom/atom/pull/12158.
",115,True,en,0
12289,1,1,0,Internals,nathansobo,2016-08-02T18:46:30Z,144,85,3,0,"Fixes #10350
",13,True,en,0
12281,1,31,3,Internals,damieng,2016-08-09T14:53:18Z,10,1,1,7,"New telemetry consent setting that will be used by metrics and exception-reporter to determine whether to collect anonymous usage statistics, exception reports etc.

All parts are required for this to work correctly;
- https://github.com/atom/atom/pull/12281
- https://github.com/atom/metrics/pull/66
- https://github.com/atom/exception-reporting/pull/20
- https://github.com/atom/about/pull/37
- https://github.com/atom/welcome/pull/48
",437,True,en,0
12278,6,5,3,Internals,maxbrunsfeld,2016-08-02T19:59:15Z,347,247,10,0,"This will allow documented classes to be converted from CoffeeScript to JS.
",76,True,en,0
12276,1,11,3,Externals,pbiggar,2016-08-03T16:35:31Z,16,0,1,2,"This is my first PR against atom, so let me know if I've gotten anything wrong.

It's not currently possible to see what specs pass when you ctrl-alt-cmd-P. You see that some tests pass (via the red and green dots), but you can't see which ones (except by process of deduction by looking at which fail)

This PR adds the description of the spec, as well as all it's parent suites, to a tooltip so you can see what's passing and failing on mouseover.

I couldn't find tests for atom-reporter. Given the simplicity of the change and the overhead of learning how to write tests for this component, it didn't seem worthwhile. If there are already specs for it, please point me to them and I'll be happy to add a quick test.

Before: (no tooltip)
<img width=""411"" alt=""screenshot 2016-08-01 10 24 12"" src=""https://cloud.githubusercontent.com/assets/181762/17302916/3acf8a1c-57d3-11e6-871f-f85fe21351f0.png"">

After: (tooltip, showing suite and test name)
<img width=""343"" alt=""screenshot 2016-08-01 11 23 07"" src=""https://cloud.githubusercontent.com/assets/181762/17304448/789a2044-57da-11e6-9869-a2fc0830a2d8.png"">
",1111,True,en,0
12262,2,2,0,Internals,as-cii,2016-07-29T15:43:56Z,0,315,3,0,"This pull-request gets rid of `RowMap` along with its specs (after the transition to `DisplayLayer` we don't need this object anymore). It also deletes `spec/random-editor-spec.coffee`, because the tested behavior is already extensively covered in text-buffer (specifically, in `DisplayLayer` tests).

/cc: @atom/core 
",319,True,en,0
12258,1,5,0,Externals,mnquintana,2016-07-29T15:15:36Z,20,0,1,0,"This PR adds a section for JavaScript style to the Contributing guide, based on feedback from https://github.com/atom/about/pull/35.

üëÄ @atom/feedback @nathansobo 
",167,True,en,0
12249,1,0,0,Internals,nathansobo,2016-07-27T23:29:02Z,6,1,1,0,"Fixes atom/settings-view#767
",29,True,en,0
12246,4,0,0,Internals,as-cii,2016-07-27T16:54:28Z,325,236,6,0,"This pull-request converts the main script (and all the files that it requires) into standard javascript files so that Atom can be started like a standard Electron application, e.g.:

```
./electron/Electron.app/Contents/MacOS/Electron .
```

/cc: @atom/core 
",260,True,en,0
12240,2,0,0,Internals,nathansobo,2016-07-26T17:10:43Z,31,30,9,0,"Reverts atom/atom#12233

We can proceeed thanks to @elprans fixing `asar-require`.
",83,True,en,0
12237,1,1,0,Externals,zertosh,2016-08-10T00:08:49Z,22,0,2,14,"Without this fix, the included test would fail with:

```
$ ./out/Atom.app/Contents/MacOS/Atom --test --resource-path=""$(pwd)"" -- spec/package-manager-spec.coffee
(electron) submitURL is now a required option to crashReporter.start
Error Downloading Update: Could not get code signature for running application
---------------------------------.F.---------------------------------------

PackageManager
  ::activatePackage(id)
    when the package metadata includes `activationHooks`
      it does not double register activation hooks when deactivating and reactivating
        Expected 2 to be 1.
          at .<anonymous> (/Users/asuarez/src/atom/atom/spec/package-manager-spec.coffee:444:49)
        Expected 3 to be 2.
          at .<anonymous> (/Users/asuarez/src/atom/atom/spec/package-manager-spec.coffee:455:49)
```

cc: @hansonw 
",839,True,en,0
12233,1,0,0,Internals,nathansobo,2016-07-25T22:22:50Z,30,31,9,0,"Reverts atom/atom#11897

/cc @as-cii @BinaryMuse 
",50,True,en,0
12232,1,0,0,Internals,as-cii,2016-07-27T08:27:20Z,0,6,1,1,"We are going to use CircleCI for OS X builds, so this pull-request changes Travis to build Atom only on Linux.
",111,True,en,0
12230,1,0,0,Internals,damieng,2016-07-25T18:37:56Z,1,1,1,0,"Disabling the crash reporter's autosubmit and removing the current endpoint as it is down.
",91,True,en,0
12226,2,2,0,Externals,ypresto,2016-07-25T17:01:09Z,5,3,2,0,"Every config updates in config.setSchema causes did-change event to be emitted.
This PR reduces num of events by transact config changes.

![image](https://cloud.githubusercontent.com/assets/400558/17087052/0bed0874-523c-11e6-9fb7-e83e152fd26c.png)
",249,False,en,0
12216,7,0,2,Internals,nathansobo,2016-07-22T22:37:33Z,17,9,3,0,"- Fix asset uploading
- Fix automatic kick-off of builds
- Improve caching
- Add logging to upload tasks
",105,False,en,0
12210,1,0,0,Internals,nathansobo,2016-07-21T21:53:42Z,4,2,2,0,,0,False,en,0
12208,1,0,0,Externals,Ingramz,2016-07-21T13:19:56Z,1,1,1,0,,0,False,en,0
12207,15,2,0,Internals,as-cii,2016-07-25T16:35:12Z,69,4,4,4,"Depends on #11897. This is the [actual diff](https://github.com/atom/atom/compare/mkt-use-apm-with-npm3-and-node-4...as-circle-ci).

This pull-request tries to supplant Travis and replace it with CircleCI. After trying it out for a while, the build process seems more reliable and faster as well. Moreover, if CircleCI enables parallelism for macOS containers in the future, we could be able to speed up our test suite very easily.

Right now the build fails because of some flaky tests that are not related to CircleCI at all (i.e. Janky and Travis fail too for the same specs), but overall I think we might be able to üö¢ this and let it run alongside Travis for a while so that we can assess how well it performs. If after the test-drive everything looks good, we can :fire: Travis and use CircleCI only.

This is the plan we're on right now:

![screen shot 2016-07-20 at 20 47 37](https://cloud.githubusercontent.com/assets/482957/17016782/e2e37304-4f30-11e6-9976-e367fb17b27f.png)

After the experimentation phase, I believe we should switch initially to **Startup** and consider **Growth** too if we run out of minutes.

/cc: @nathansobo @iolsen @atom/core 
",1165,True,en,0
12203,12,1,0,Externals,50Wliu,2016-07-21T13:59:53Z,12,12,1,0,"- language-coffee-script
  - Improved auto-indentation logic
- language-css
  - Added `stroke-` property names
- language-git
  - Added support for `exec` in rebases
- language-go
  - Changed `main` snippet to `pkgm` for user friendliness
- language-html
  - Removed unsupported `charset` attribute in the `link` snippet
  - Added support for `x-template` scripts
- language-json
  - Added support for `.tfstate` files
- language-less
  - Fixed character escaping
- language-php
  - Updated snippet scopes
- language-ruby
  - Fixed `do` tokenization including spaces
  - Cleaned up the regexes
  - Improved number tokenization
- language-sass
  - Cleaned up the regexes
  - Fixed variables in maps
  - Fixed maps in maps
  - Fixed various tokenization issues
    - RGB values
    - Poor tokens
    - Property names in property values
  - Fixed pseudo-classes not including the preceding colon
  - Fixed character escaping
- language-sql
  - Added support for `EXCEPT` and `EXCEPT ALL`
  - Added support for `USE`, `GO`, `INTO`, `EXEC`, and `OPENQUERY`
  - Added support for `DECLARE`
- language-xml
  - Added support for `.ui` files
  - Added support for `.glade` files

Huge thanks to @esdoppio for contributing many of these changes, as well as to everyone else who opened all those PRs :smile:.
",1298,False,en,0
12180,1,0,0,Internals,maxbrunsfeld,2016-07-21T19:01:34Z,47,1589,9,5,,0,False,en,0
12172,1,1,0,Internals,maxbrunsfeld,2016-07-14T20:29:55Z,1,0,1,0,"Previously, the atom master build was failing because the `apm/node_modules` folder was somehow getting into an invalid state. Probably related to https://github.com/atom/atom/pull/12170.
",188,True,en,0
12167,6,0,0,Internals,maxbrunsfeld,2016-07-14T20:43:14Z,47,1589,9,0,"Closes https://github.com/atom/atom/issues/12159
",49,True,en,0
12158,2,2,0,Internals,lee-dohm,2016-07-13T00:18:23Z,2,2,1,0,"Decided to do the quick update to @Glavin001's #12086 so this could be merged.

Applies to #6771.
",98,True,en,0
12150,1,1,0,Internals,simurai,2016-07-13T02:44:31Z,1,0,1,0,"This allows themes to **opt-out** of custom styling for controls, like radio, checkbox, select etc. Useful for themes that like to mimic a more native look and feel, like [unity-ui](https://atom.io/themes/unity-ui), [native-ui](https://atom.io/themes/native-ui) etc.

| `@use-custom-controls: true;` | `@use-custom-controls: false;` |
| --- | --- |
| ![screen shot 2016-07-12 at 3 30 56 pm](https://cloud.githubusercontent.com/assets/378023/16757595/0e70e5f0-4848-11e6-9ca4-dad9f686298a.png) | ![screen shot 2016-07-12 at 3 30 13 pm](https://cloud.githubusercontent.com/assets/378023/16757586/07ed91e2-4848-11e6-8a9d-bde79cfd2b87.png) |
### Questions
- [ ] Variable name?
  - Drop the `use-` and just have `@custom-controls: true;`?
  - Invert it to `@use-native-controls: false;`
",781,True,en,0
12125,111,5,7,Internals,maxbrunsfeld,2016-08-16T19:07:42Z,2105,1485,39,38,"The goal here is to remove some of the barriers to extracting the `TextEditor` class into a library. This means removing the following atom-specific dependencies:
- [x] Config
  
  Instead of each `TextEditor` internally observing the config and updating its behavior accordingly, the `TextEditorRegistry` (an atom-specific class) will observe the config and update text editors from outside, using new public APIs like `setUndoGroupingInterval`.
  
  In order to handle settings like `nonWordCharacters` which can vary according to the cursor's position, the `TextEditor` will have an optional 'scoped settings delegate', which will allow the editor to query for settings at particular scopes. Example:
  
  ``` js
  editor.setScopedSettingsDelegate({
    getCommentStartString (scopes) {
      if (languageLooksLikeC(scopes)) {
        return ""//""
      } else {
        return ""#""
      }
    },
  
    getNonWordCharacters (scopes) {
      // logic ...
    }
  })
  ```
- [x] GrammarRegistry

This also removes a duplicate call to `DisplayLayer::reset` that was happening in the `TextEditor` constructor. For a big file like `text-editor-component-spec.js`, this makes the editor visible about  120 ms sooner üéâ .
",1220,False,en,0
12123,7,1,3,Internals,damieng,2016-07-20T00:23:02Z,92,78,6,11,"This is the Atom side of atom/settings-view#811 that provides the parts necessary for that one and facilitates;
1. Only installing the file handler by default (no more context menus by defaut but you keep them if you already have them)
2. Allows side-by-side of Atom.exe and AtomBeta.exe which can set, unset and upgrade independently
",335,False,en,0
12119,1,0,0,Internals,kuychaco,2016-07-08T23:37:44Z,3,2,1,1,"Signed-off-by: Nathan Sobo nathan@github.com
",45,True,en,0
12095,1,1,0,Externals,ammarnajjar,2016-07-04T15:59:25Z,1,1,1,0,"In the nodejs installation instructions for Fedora/Centos/RHEL, the old [link](https://github.com/nodejs/node-v0.x-archive/wiki/Installing-Node.js-via-package-manager#enterprise-linux-and-fedora) redirects the user to another [link](https://github.com/nodejs/node/wiki) which is the nodejs wiki, and where there are no installation instructions.
The correct link should be [https://nodejs.org/en/download/package-manager/#enterprise-linux-and-fedora](https://nodejs.org/en/download/package-manager/#enterprise-linux-and-fedora), which contains the most recent instructions to install nodejs.
",592,False,en,0
12086,1,6,0,Externals,Glavin001,2016-07-13T00:18:37Z,2,2,1,10,"Close #6771.
",13,True,en,0
12077,11,2,0,Internals,as-cii,2016-08-16T19:07:58Z,211,40,7,47,"This will make it easier for views/components that use etch to use a `TextEditor` in their `render` method.

To make `scrollPastEnd` and `autoHeight` updatable, I segregated the knowledge of those two parameters into the `TextEditor` object, so that `TextEditorPresenter`, `TextEditorComponent` and `TextEditorElement` can just use it, applying the necessary changes upon initialization and when the `onDidChangeScrollPastEnd` and `onDidChangeAutoHeight` events trigger.

/cc: @nathansobo @atom/core 
",501,True,en,0
12068,2,1,0,Internals,simurai,2016-06-29T06:17:45Z,22,21,6,0,"- [x] Remove all `-webkit-` prefixes that aren't needed anymore.
- [x] Add missing `min-width: 0;` to prevent #11866
",117,False,en,0
12060,1,0,0,Internals,simurai,2016-06-28T10:13:38Z,2,0,1,0,"> Note: This PR is in addition to #12059 but for the `1.9` branch.

This is another follow up for #11866. In this case it fixes **split panes**.
",145,True,en,0
12059,1,0,0,Internals,simurai,2016-06-28T08:41:01Z,2,0,1,0,"The same as #11930, but this fixes it for **split panes**.
",59,True,en,0
12056,1,0,0,Internals,damieng,2016-06-28T17:02:57Z,24,17,4,0,,0,False,en,1
12043,9,0,0,Externals,50Wliu,2016-06-25T02:55:11Z,9,9,1,0,"Woo!
- language-css
  - Added pseudo-class support
  - Added inline comments support
  - Added some missing properties
- language-gfm
  - Added `pycon` highlighting
- language-git
  - Added support for `drop` in rebases
- language-json
  - Added `.webmanifest` as a valid file type
- language-less
  - Added `.rc`, `.themerc`, and `.gtkrc` as valid file types
- language-php
  - Added support for the `<=>` operator to fix ligatures
- language-ruby
  - Added support for the `source` keyword
- language-sass
  - Added missing `object-fit` values
  - Added support for new CSS3 colors and deprecated CSS2 system colors
  - Added support for the `picture` element
  - Sass-only: Added support for vendor-prefixed properties
  - Better highlighting for `@mix` and `@namespace`
  - Added support for `@supports` feature queries
  - Fixed `@include` tokenization
- language-sql
  - Removed MySQL comments which also fixed temporary tables being tokenized as comments
  - Added support for `nvarchar`
  - Added `.dsql` as a valid file type
",1034,False,en,0
12037,1,0,0,Internals,damieng,2016-07-03T14:58:18Z,7,5,1,9,,0,False,en,0
12031,2,2,1,Externals,Jonahss,2016-06-29T00:54:46Z,8,1,2,6,,0,False,en,0
12028,1,5,0,Externals,ggreer,2016-06-30T23:47:37Z,4,1,1,8,"Atom sets NODE_ENV to 'production' earlier, but some code paths can cause it to be un-set. This degrades performance and sometimes crashes React. Fixes #12024.

I've tested this on Linux and macOS, but not Windows.
",215,True,en,0
12008,2,1,0,Internals,as-cii,2016-06-21T09:40:49Z,23,0,3,0,"Previously promises resolving to destroyed repositories remained in our cache after removing a project folder. This caused subsequent calls to `repositoryForDirectory` to return the previous instance of the `GitRepository`, even after adding the working directory back to the project.

/cc: @atom/core 
",303,True,en,0
12003,4,5,8,Externals,leo,2016-06-20T14:29:15Z,126,126,19,2,"OS X has been renamed to ""macOS"". More details [here](http://www.macworld.co.uk/news/mac-software/mac-os-sierra-x-10-12-fuji-features-uk-release-date-macos-touch-id-siri-apfs-wwdc-2016-3630374/).
",196,True,en,0
12002,1,2,0,Externals,williambout,2016-06-21T01:22:49Z,1,1,1,2,"Since Chrome 46 supports `BlinkMacSystemFont`, I think we should use it instead of  `.SFNSText-Regular` (also the private font is not working anymore on macOS Sierra).
",168,True,en,0
11998,1,0,0,Internals,as-cii,2016-06-17T22:17:19Z,9,4,1,0,"Our build is failing on Janky with the following exception:

```
[26891:0615/122703:INFO:CONSOLE(87)] ""Error: Cannot find module 'season/node_modules/cson-parser'
  at Module._resolveFilename (module.js:339:15)
  at Function.Module._resolveFilename (/private/var/lib/jenkins/workspace/atom/src/module-cache.coffee:273:20)
  at Function.Module._load (module.js:290:25)
  at Module.require (module.js:367:17)
  at require (/private/var/lib/jenkins/workspace/atom/src/native-compile-cache.js:50:27)
  at Object.<anonymous> (/private/var/lib/jenkins/workspace/atom/spec/compile-cache-spec.coffee:7:14)
  at Object.<anonymous> (/private/var/lib/jenkins/workspace/atom/spec/compile-cache-spec.coffee:1:1)
```

Which points at a problem with requiring a module's internal submodule in `compile-cache-spec.coffee`. Instead of relying on a `season` internal module, with this pull-request we simply verify that the CSON module gets called appropriately and avoid testing its caching/parsing behavior again in Atom (i.e. it's already tested in https://github.com/atom/season/blob/master/spec/cson-spec.coffee#L207).

I am not clear on why Janky cannot find that internal module (maybe npm got updated there and the module is now flattened?), but it felt reasonable to avoid this anti-pattern in the spec so that we can make it more bulletproof independently of which npm version our CI is running.

/cc: @atom/core
",1405,True,en,0
11994,1,1,0,Internals,nathansobo,2016-06-17T09:15:49Z,8,1,1,0,"I realize this is vain, but I really hate the word ""spec"" and would like the option to just call them tests. That works fine when specifying paths on the command line, but the interactive runner was defaulting the path to `spec`. This allows `test` instead if no `spec` directory is present.

cc @as-cii @BinaryMuse 
",317,True,en,0
11991,1,2,0,Internals,nathansobo,2016-06-17T09:14:31Z,13,1,2,0,"This will need to be merged into 1.9.x as well.

Fixes #11990
",62,True,en,0
11985,1,0,0,Internals,lee-dohm,2016-06-15T15:58:15Z,7,7,3,0,,0,False,en,0
11981,1,0,0,Internals,lee-dohm,2016-06-14T23:38:33Z,5,0,1,0,"Documenting the place where we put the documentation :grinning:
",64,True,en,0
11961,3,0,2,Externals,samhunta,2016-06-13T20:08:52Z,1,7,1,2,"The code removed is no longer needed as it was fixed in this issue of electron

https://github.com/electron/electron/issues/380
",128,True,en,0
11960,8,7,0,Internals,simurai,2016-06-18T07:21:06Z,26,4,2,7,"This makes the Spec Suite less ""flickery"" by absolutely position the reporter to the bottom.
## Before

![specs](https://cloud.githubusercontent.com/assets/378023/15982453/d1833848-2fc2-11e6-9cfd-fb705aaa3e6d.gif)
## After

![specs](https://cloud.githubusercontent.com/assets/378023/15982444/65d76204-2fc2-11e6-969a-759a483f6cf2.gif)
",334,False,en,0
11958,2,0,0,Externals,50Wliu,2016-06-10T22:08:46Z,2,2,1,0,"Lots of improvements from 0.52.0 to 0.53.0, including major bug fixes for SCSS and auto-indent for Sass!

Will merge once green.
",129,True,en,0
11942,4,5,5,Externals,ssorallen,2016-07-12T08:07:25Z,74,10,1,33,"Notifications support several options that were yet to be documented:
`buttons`, `description`, and `stack`. Add descriptions for each option
and its defaults (where applicable, e.g. .buttons.className).

`stack` is technically available on all notification types, but it
doesn't make sense to use it on types other than 'error' and 'fatal'.
Therefore it's documented only in those two cases.

The usage and expected display, like preformatted vs. Markdown, taken
from [atom/notifications/lib/notification-element.coffee](https://github.com/atom/notifications/blob/v0.64.1/lib/notification-element.coffee).
",607,False,en,0
11932,1,3,0,Externals,drewchandler,2016-06-08T12:58:41Z,2,2,1,0,,0,False,en,0
11930,1,2,0,Internals,simurai,2016-06-09T23:17:41Z,1,0,1,1,"This is a follow up for #11866.

In this case when there are too many tabs, they start to push `atom-workspace-axis.vertical` beyond the window width.

![image](https://cloud.githubusercontent.com/assets/490562/15840511/54e98534-2c9e-11e6-84cd-90067c05aebd.png)

Fixes https://github.com/atom/one-dark-ui/issues/138
",316,True,en,0
11929,1,7,0,Internals,damieng,2016-06-23T17:59:19Z,1,1,1,15,"Allow side-by-side versions to run rather than whichever version of Atom was launched first ends up opening all subsequent requests.
",133,True,en,0
11897,46,23,0,Internals,BinaryMuse,2016-07-25T16:32:00Z,31,30,9,51,"```
                  __              __ __
                 /\ \            /\ \\ \
  ___     ___    \_\ \     __    \ \ \\ \
/' _ `\  / __`\  /'_` \  /'__`\   \ \ \\ \_
/\ \/\ \/\ \L\ \/\ \L\ \/\  __/    \ \__ ,__\
\ \_\ \_\ \____/\ \___,_\ \____\    \/_/\_\_/
 \/_/\/_/\/___/  \/__,_ /\/____/       \/_/


                                    __
                                  /'__`\
     ___   _____     ___ ___     /\_\L\ \
   /' _ `\/\ '__`\ /' __` __`\   \/_/_\_<_
   /\ \/\ \ \ \L\ \/\ \/\ \/\ \    /\ \L\ \
   \ \_\ \_\ \ ,__/\ \_\ \_\ \_\   \ \____/
    \/_/\/_/\ \ \/  \/_/\/_/\/_/    \/___/
             \ \_\
              \/_/
```

This bumps apm to 1.11.1, which includes atom/apm#562 and atom/apm#563. Since npm 3 flattens packages by default, the build had to change relatively significantly, and I'm sure there are more edge cases to track down. This also bumps Atom's own npm to 3.9.5.

Of particular note, I removed the `apm clean` command that runs as part of the build. It didn't seem to be working in the first place, and seems to have trouble with npm 3's package flattening; maybe we can delegate to `npm prune` here. Since published builds get built from scratch, I think this is probably not a huge deal.

@atom/core, @atom/feedback, @damieng, I would love for you to pull down this branch and try to build Atom and make sure it runs correctly and that package-related operations work. It's _extremely likely_ you will have to run `script/clean` first; sorry, things are just too different.

Fixes #5109
Makes #7822 (more) possible
Probably a bunch of others too
",1592,False,en,0
11875,10,10,0,Internals,simurai,2016-06-24T05:54:17Z,326,793,24,23,"‚ö†Ô∏è  This is in parallel to #11839 + #11858. Don't merge all PRs, only pick one. ‚ö†Ô∏è 

This PR does:
1. Remove `bootstrap` dependency
2. Merge Bootstrap `3.3.6` + some Core styles and publish it as [atom-ui](https://www.npmjs.com/package/atom-ui) module
3. Add `atom-ui` dependency

Refs: #6351, #8237 
#### Stays in core `atom/atom/static`:
- [x] Octicons
- [x] Normalize
- [x] Scaffolding
- [x] Cursors
- [x] Panels
- [x] Panes
- [x] Syntax
- [x] `text-editor-light`
- [x] `workspace-view`
#### Moved + merged into the [atom/atom-ui](https://github.com/atom/atom-ui) package:
- [x] Tooltips
- [x] Buttons + Button Groups
- [x] Lists
- [x] Close
- [x] Code
- [x] Nav
- [x] Scaffolding
- [x] Utilities
- [x] Alerts
- [x] Tables
- [x] Forms
- [x] Type
- [x] Normalize
- [x] Clean up some un-used styles. Like IE hacks etc.
#### Removed:
- üî•  grid
- üî•  input-groups
- üî•  labels
- üî•  thumbnails
## Motivation

Currently we load Bootstrap and then try to override it in core. Merging them allows more control and adjustments can be made directly. Also, moving out of core and into a separate package feels less intimidating and can easier be rolled back in `package.json`.
## Concerns

Some styles got removed, so there is a chance that something might look unstyled or off. Packages bundled with Atom should be fine, but it's hard to predict if community packages rely on any of the removed styles. Maybe in the Beta phase we can catch some regressions.

Affected packages:
- [x] `autocomplete-plus` fixed by [reverting](https://github.com/atom/atom-ui/pull/4) some refactoring.
- [x] [godoc](https://github.com/zmb3/godoc/pull/17) uses `.close`. Fixed by [adding](https://github.com/atom/atom-ui/pull/5) `.close` too.
",1734,True,en,0
11866,2,3,0,Internals,as-cii,2016-05-30T13:34:31Z,18,5,3,0,"1) Fixes atom/find-and-replace#732.
2) Fixes an issue with resizing atom panes when one or more panes had many open tabs.

After [upgrading to Electron v0.37.8](https://github.com/atom/atom/pull/11474), we have noticed a couple of regressions when resizing some of Atom's UI elements. In particular, it seems like some of the flexbox rules for laying content out have changed since v0.36.12, and this causes elements like `atom-pane` or find-and-replace input boxes, to not shrink correctly when they are resized.

This pull-request fixes 1) by removing the explicit width on `atom-text-editor`'s `.lines` element (setting it should be unnecessary after #6733), which sometimes caused `atom-text-editor`'s width to determine the width of its parent, and 2) by allowing `atom-pane`s to be shrunk indefinitely, as it was before the Electron bump.
",845,False,en,0
11852,8,16,0,Externals,MikeInnes,2016-12-12T17:51:07Z,64,18,4,199,"Right now overlays will often move up and down as you scroll, attempting to stay within the editor view. This makes sense for autocomplete, but less sense for things like annotations in code (see e.g. Ink, Hydrogen packages). Indeed in these cases the jumpiness feels very unstable.

So I added a simple option which turns it off. The name could probably do with refinement.

Edit: [more helpful diff](https://github.com/atom/atom/pull/11852/files?w=0). Also, same testing concern as #11864.
",492,True,en,0
11847,1,0,0,Internals,as-cii,2016-05-27T09:09:36Z,3,0,1,0,"I caught an issue while building Atom on a Windows VM which caused `script/build` to fail. Namely, it seems like `node-gyp` couldn't be found for some reason; installing it manually fixed the problem on my virtual machine, so this pull-request adds `npm install -g node-gyp` as a workaround in the Windows build instructions (under the troubleshooting section).

/cc: @atom/core and @damieng for üëÄ 
",402,True,en,0
11833,1,0,0,Internals,damieng,2016-05-30T00:22:10Z,11,4,1,5,,0,False,en,0
11829,2,0,0,Internals,as-cii,2016-05-24T11:41:27Z,22,7,2,0,"Fixes #11796.

This pull-request fixes a üêõ that manifested when a block decoration was inserted without the `{position}` property. In the docs we specify that `before` is the default, but this behavior was handled inconsistently in `TextEditorPresenter` (e.g. in one place we considered `after` the default, and somewhere else we used `before` as the default) which, in turn, computed cursors (and other visual elements) positions wrong.
",441,True,en,0
11828,34,6,14,Internals,as-cii,2016-05-27T09:08:01Z,311,13,13,3,"~~Depends on #11826 (to run [spec/browser/file-recovery-service.spec.js](https://github.com/atom/atom/blob/as-file-recovery-service/spec/browser/file-recovery-service.spec.js)).~~

Fixes #11708.

Recently, we have been observing several issues related to losing data when Atom hard-crashes. We think that this problem manifests whenever the following happens:
1. User/Package triggers a file save.
2. `fs.writeFileSync(path)` gets called.
   1. `fd = fs.openSync(path, ""w"")` gets called. This causes the file to be truncated.
   2. Before `fs.writeSync(fd, contents)` has the chance to run, a hard crash occurs.

The scenario described above leaves the file in a ""truncated state"", thus erasing all of its contents. In the past we have experimented with backup files to solve this issue, but that creates other problems such as paths that are too long on Windows, and unnecessary events triggered on fs watchers that are monitoring the saved file's directory. It turns out that atomic saves are not a good trade-off either, as described on https://github.com/atom/atom/issues/3158#issuecomment-124225148.

With this pull-request we want to provide a file recovery service running on the main process that keeps track of pending changes, and restores files to their original state when a renderer process crashes while a save is in flight. If the recovery is unsuccessful for any reason (e.g. problems with permissions, unmounted network drives, etc.), we log a message like the following in the system console and in a message box too, so that users can perform the recovery themselves:

```
There was a crash while saving ""/private/etc/profile"", so this file might be blank or corrupted.
Atom couldn't recover it automatically, but a recovery file has been saved at: ""/Users/as-cii/.atom/recovery/profile-950635"".
```

By default we will use `~/.atom/recovery` as our recovery directory, where we temporarily store a backup of the saved file and delete it upon successful save/recovery. The nice thing about using the file system as our recovery storage (as opposed to IndexedDb), is that users can inspect it pretty easily and copy/paste content via Terminal.app or Finder.app (or their equivalent on other platforms). 

As a convention, backup files stored under the recovery directory, will have the following format:

```
{originalFilename}-{randomHexNumber}.{originalExtension}
```

Where:
- `originalFilename` is the name of the file without its extension. This string will be truncated if it's longer than `34` characters.
- `randomHexNumber` is a randomly generated hexadecimal number. This string will be 6 characters long by default.
- `originalExtension` is the extension of the file.

This should be long enough to make filenames readable (and more inspectable), but short enough to avoid path length issues on platforms like Windows.
",2848,True,en,0
11826,9,4,4,Internals,as-cii,2016-05-25T12:03:49Z,89,23,20,1,"‚Ä¶so that we can write unit tests for code in the main process. Below a list of conventions we'll be adopting:
1. Use mocha as the test framework.
2. Use chai as the assertion library.
3. Name specs `foo-bar.spec.js`, to prevent the renderer process from running specs written for the main process e.g. when calling `atom --test spec`.
4. Put specs under `spec/browser`.
5. Write specs in ES6.

Although somewhat inconsistent with the conventions we use for renderer process specs, this will hopefully be a first step towards migrating our entire Jasmine 1.3 test suite to a more modern environment.
",601,False,en,1
11825,2,6,0,Externals,drewmnoel,2016-05-25T16:39:31Z,3,0,1,1,"Fixes an uncaught exception when the open files dialog is cancelled. The `openPaths` function just needs to check to ensure `initialPaths` isn't null or empty when called (issues #10315 and #10308).

Should probably add a spec for this?
",237,True,en,0
11824,1,1,0,Externals,ruthgrace,2016-05-23T22:21:56Z,1,1,1,0,"As advised by @lee-dohm and @50Wliu in #11814
",46,True,en,0
11820,1,1,0,Internals,joshaber,2016-05-23T21:15:01Z,1,1,1,0,"Hopefully fix the crash in https://github.com/atom/atom/issues/11708.
",70,True,en,0
11814,4,4,2,Externals,ruthgrace,2016-05-23T22:07:31Z,2,0,1,0,"added flight manual to Your First Code Contribution, as recommended by @lee-dohm (personal communication via Slack). I thought the flight manual description on the [atom README.md](https://github.com/atom/atom/blob/master/README.md) was perfect, so I've just copied it here.
",275,True,en,0
11812,1,0,0,Externals,neurosnap,2016-05-23T21:50:12Z,1,1,1,1,"https://github.com/atom/apm/blob/master/script/download-node.js#L113
",69,True,en,0
11804,3,4,0,Internals,simurai,2016-05-24T01:05:33Z,1,1,1,2,"Ideally this would be an option in the settings, but maybe a note will already help too.

![screen shot 2016-05-21 at 10 27 45 am](https://cloud.githubusercontent.com/assets/378023/15445687/e7b6288a-1f3e-11e6-9657-9555752c92de.png)

Refs: https://github.com/atom/settings-view/issues/790 + https://github.com/atom/atom/issues/11782. There are many more issues and discussions about this, but these are just the recent two.
",423,True,en,0
11803,1,2,0,Externals,lexicalunit,2017-03-13T21:46:51Z,11,5,2,296,"Following a call to `replaceSelectedText()`, the previous selected text range is not necessarily still relevant as that text has been replaced. The newly inserted text can possibly have a totally different range. Use the range of the newly inserted text as the final selection range.
",284,True,en,0
11793,1,0,0,Internals,as-cii,2016-05-20T09:04:03Z,0,1,1,0,"Refs: #11750

Instead of automatically installing devtron after toggling the developer tools, we just bundle it in Atom and let people install it manually when they need to debug the application by executing the following snippet in the console:

```
require('devtron').install()
```

/cc: @lee-dohm 
",301,True,en,0
11792,1,6,0,Externals,Connormiha,2016-05-23T23:01:27Z,17,21,11,4,"Since Chromium 45 supports native `Object.assign` for merging objects. Let's get rid `extends` from `underscore` in favor of native method.
",140,True,en,0
11791,2,1,0,Internals,damieng,2016-05-23T21:22:36Z,66,40,3,3,"This switches us from signing directly with the Windows SDK to using Squirrel. This is necessary as Squirrel builds both the atomsetup.exe and the atomsetup.msi (which contains atomsetup.exe) so signing atomsetup.exe ourself is too late if we want to distribute the msi.

This is a little convoluted as we currently support remote URLs for keys to enable signing keys to not be checked in which Squirrel does not support so we continue to do that in our signing step but leave the actual signing to Squirrel.
",509,True,en,0
11790,21,72,17,Externals,brumm,2016-08-02T21:58:48Z,139,5,11,75,"This pull request is intended to naively implement a custom titlebar on OSX.

I've included fallback styling to match El Capitan's titlebars, which is probably not necessary as I modified the four included themes to provide their own titlebar styling. I'll create PRs for these in their respective repositories if this PR gets considered.

I'd like to hear your thoughts on the implementation, I just banged on the code until it worked üòÅ 

This is what it looks like by default: 
![image](https://cloud.githubusercontent.com/assets/170500/15407444/211946aa-1e0b-11e6-871b-4f332cbab894.png)

This is the titlebar provided by one-dark-ui, with the oceanic-next syntax
![image](https://cloud.githubusercontent.com/assets/170500/15407534/ad8b0c4a-1e0b-11e6-842e-de6df82d5e15.png)

This is one-light-ui, with the atom-light syntax
![image](https://cloud.githubusercontent.com/assets/170500/15407555/c5222ba4-1e0b-11e6-9aeb-2f7693e20a2d.png)

Things left to do:
- [x] ‚úÖ specs

This is a partial continuation of https://github.com/atom/atom/pull/10208 albeit without the combined title-bar-and-tabs functionality, for which this would be the groundwork. (As requested in https://github.com/atom/atom/issues/4599 for example.)
",1224,True,en,0
11767,1,0,0,Internals,as-cii,2016-05-16T11:47:49Z,22,11,2,0,"This fixes a problem (introduced in #11414) in the rendering of the gutter ""folded"" icon when a line is soft wrapped. In particular, such icon was being shown on the last screen row of the wrapped buffer row rather than on the first one. 

**Before:**
![before](https://cloud.githubusercontent.com/assets/482957/15285778/a6f1edc2-1b59-11e6-92ae-5e13e7ce0939.gif)

**After:**
![after](https://cloud.githubusercontent.com/assets/482957/15285788/b568977a-1b59-11e6-9e63-f7cf9d0f264d.gif)

/cc: @atom/core 
",503,True,en,0
11765,3,0,0,Internals,as-cii,2016-05-16T12:21:43Z,28,47,4,0,"~~Depends on atom/text-buffer#156.~~
Fixes #11745.

Rendering line numbers corresponding to lines that need to be measured isn't useful, and it puts unneeded pressure to the DOM. In the process of changing `updateLineNumbersState`, we have also refactored it to stop relying on row ranges being contiguous. This allows that code path to be:
1. Less error-prone, because we were trying to access rows that weren't actually rendered, and thus throwing an exception when measuring non-contiguous screen rows.
2. Tighter, because we can just iterate over each screen row and ask for its soft-wrap descriptor.

/cc: @atom/core 
",623,False,en,0
11762,2,1,0,Internals,damieng,2016-05-18T17:21:47Z,11,4,2,2,"Addresses #11756
",17,True,en,0
11761,1,0,0,Internals,damieng,2016-05-18T19:05:08Z,16,12,1,2,,0,False,en,0
11758,1,1,0,Externals,stanfieldr,2016-05-16T20:07:51Z,1,1,1,0,"This fixes #11542 
",19,True,en,0
11751,2,3,0,Externals,dgm34,2016-05-15T12:42:13Z,1,1,1,1,"The existing link to https://github.com/atom/solarized-dark 404s
",65,True,en,0
11750,1,6,0,Internals,lee-dohm,2016-05-16T00:20:12Z,2,0,2,2,"I decided to be conservative here and:
1. Pin to a specific version of Devtron
2. Only load Devtron when the Developer Tools are first opened

[More information on Devtron.](http://electron.atom.io/devtron/)
",208,False,en,0
11734,2,2,2,Internals,thedaniel,2016-05-11T15:08:21Z,1,1,1,0,"I thiiiink this is all that's necessary now that the msi is generated.
",71,True,en,0
11701,1,0,0,Internals,lee-dohm,2016-05-05T20:45:49Z,35,13,1,0,"Updating to the latest version of the Contributor Covenant code of conduct.
",76,True,en,0
11671,2,0,0,Internals,joshaber,2016-05-03T14:33:42Z,26,2,3,0,"Part of https://github.com/atom/atom/issues/10979.
",51,True,en,0
11669,1,2,0,Externals,tcyrus,2016-05-03T00:02:30Z,1,1,1,0,"Update `marked` to fix sanitization issue on david-dm
",54,True,en,0
11646,1,0,0,Internals,as-cii,2016-04-29T23:36:37Z,39,19,2,0,"This fixes an annoying problem that prevented the state of marker layers from being saved (i.e. selections history, bookmarks, etc.) when the window was reloaded either via `Cmd+R` in DevTools or via `Ctrl+Option+Cmd+L` in Atom.

The issue was that we were _always_ scheduling `saveState` on an idle callback: `window.onbeforeunload`, however, doesn't wait for that event before closing the window, and thus that state was never saved in those situations.

The solution is to use idle callbacks only during the critical code path (i.e. on mousedown and keydown), but save it synchronously otherwise. Saving something to IndexedDB is actually asynchronous too, but it seems like Chrome/Electron fulfills `put` requests that get executed right during `onbeforeunload`.

/cc: @atom/core 
",785,True,en,0
11642,3,0,8,Internals,damieng,2016-05-04T17:19:04Z,57,63,4,5,"Do not do out magic shell logic if options.shell set to anything. Although we don't use a version of node that honors options.shell today this enables us to do the right thing when we hit 5.7 without breaking changes as well as allowing opt-out today.
",252,True,en,0
11641,1,0,0,Internals,joshaber,2016-04-28T18:47:00Z,9,10,3,0,"Part of https://github.com/atom/atom/issues/10979.

Remove `TextEditor`s dependency on the global project.
",107,True,en,0
11639,4,5,4,Externals,BrainCrumbz,2016-05-04T21:17:15Z,242,147,5,6,"The first aim is to extract Windows Registry and PowerShell operations from squirrel-update: having those has dependencies, it is easier to mock them and thus squirell-update tests are simplified.

In perspective, this PR is functional to further changes addressing issue #5901. Here's why:

The need for such PR arose from another currently open one, #8780 , which combines together a refactoring and a feature improvement related to Windows right-click menu. If this current PR gets merged, then #8780 would be basically superseded, hence closed, and the actual feature improvement could be discussed and brought forward separately.

As things are now, the refactoring part in #8780 needs manual updates and conflict resolution everytime the codebase moves further in the squirrel-update area. By accepting this current PR, that would be set aside once for all.

HTH
",869,True,en,0
11634,1,1,0,Externals,livelazily,2016-04-29T16:35:17Z,5,1,1,1,"When env contains lots of data,eg: custom `LS_COLORS` or a very long long `PATH`, the connection will receive data multiple times in chunk, need to wait for its end to get completed data
",187,True,en,0
11628,8,0,0,Internals,joshaber,2016-04-28T13:56:30Z,30,7,2,0,"This was introduced in https://github.com/atom/atom/pull/11280.
",64,True,en,0
11627,2,0,0,Internals,joshaber,2016-04-27T17:04:52Z,12,0,2,0,"For backward compatibility with GitRepoAsync before moving to ohnogit.
",71,True,en,0
11618,5,18,1,Externals,dav-ell,2016-04-29T17:53:17Z,26,13,2,2,"Based on #6762 and suggestion by @lalomartins:

> if this is a huge project, it might be worth it as a temporary fix to open the file chooser in the direction it was last. So, whenever you select a file using the chooser, store the location as state somewhere, then next time start in the same place, if available. It would already be a lot less annoying, I believe, and that's what browsers do with the ‚Äúsave as‚Äù dialogue.

Also note that the code this replaces (`openOptions.defaultPath = projectPath`) was completely non-functional. Apparently `AtomWindow.projectPath` was removed a while ago, possibly as a result of #770.
",631,True,en,0
11617,2,3,7,Externals,rahatarmanahmed,2016-04-29T14:52:57Z,44,20,1,2,"As discussed in https://github.com/atom/atom/pull/11539#issuecomment-213368868 by @as-cii, this PR reimplements the `screenPositionforPixelPosition` method in `lines-yardstick.coffee` to use two binary searches to find the position in order to minimize the number of `getBoundingClientRect` calls. The first stage performs a binary search on the text nodes of a row to find the node containing the pixelPosition. The second stage performs a binary search within the text node to find the character that contains the pixelPosition. This improves responsiveness when clicking near the end of a very long line of text.

~~This adds a dependency on [`binary-search-with-index`](https://www.npmjs.com/package/binary-search-with-index), which is my fork of [`binary-search`](https://www.npmjs.com/package/binary-search). This fork passes the index to the comparator which is needed in the `characterComparator`, and also relicenses the package to MIT. The original package was CC0-1.0 and waived all copyrights, so this should be okay.~~

**Update**: The original package accepted my PR, so the only thing preventing us from using it is that its `CC0-1.0` license doesn't pass the [`legal-eagle`](https://github.com/atom/legal-eagle) check. Might be a better idea to patch `legal-eagle` to accept `CC0-1.0` since it does accept public domain.

Resolves #10769
",1354,True,en,0
11616,3,0,3,Internals,joshaber,2016-04-28T14:41:53Z,1,1,1,1,"This is step 5 as laid out by @nathansobo in https://github.com/atom/atom/issues/10979.

Remove `TextEditor`s dependency on `assert`.

I‚Äôm totally open to debate on how we want to handle this. @atom/core opinions wanted.
",223,True,en,0
11615,2,0,0,Internals,joshaber,2016-04-26T21:11:38Z,3,5,2,0,"This is step 6 as laid out by @nathansobo in https://github.com/atom/atom/issues/10979.

Remove `TextEditor`s dependency on `ApplicationDelegate`.

(This one was super easy since previous work removed what we needed it for :metal:.)
",233,True,en,0
11614,10,0,0,Internals,joshaber,2016-04-26T19:47:32Z,53,50,6,0,"_:warning: Dependent on https://github.com/atom/atom/pull/11604 :warning:_

This is step 4 as laid out by @nathansobo in https://github.com/atom/atom/issues/10979.

Remove `TextEditor`s dependency on `Project`.
",211,True,en,0
11606,9,2,0,Internals,joshaber,2016-04-26T14:38:28Z,40,3,5,0,"Introduced in https://github.com/atom/atom/pull/11562.
",55,True,en,0
11604,5,0,0,Internals,joshaber,2016-04-26T18:21:50Z,28,31,2,0,"_:warning: Dependent on https://github.com/atom/atom/pull/11603 :warning:_

This is step 3 as laid out by @nathansobo in https://github.com/atom/atom/issues/10979.

Remove `TextEditor`s dependency on `ViewRegistry`.
",216,True,en,0
11603,15,0,5,Internals,joshaber,2016-04-26T16:43:35Z,35,15,5,0,"This is step 2 as laid out by @nathansobo in https://github.com/atom/atom/issues/10979.

Remove `TextEditor`s dependency on `PackageManager`.
",142,True,en,0
11602,5,0,0,Internals,joshaber,2016-04-25T19:56:52Z,20,23,5,0,"This is step 1 as laid out by @nathansobo in https://github.com/atom/atom/issues/10979.

Remove `TextEditor`s dependency on `NotificationManager`.
",147,True,en,0
11580,1,2,0,Internals,damieng,2016-04-27T18:41:53Z,18,6,3,4,"This does two things:
1. Changes the default install folder to better match atomsetup.exe location, e.g. `c:\users\bob\appdata\local\atom\app-dev\` instead of `c:\program files\atom`
2. Only requests Admin rights if it can't write to the target instead of always prompting UAC
",277,False,en,0
11576,1,0,0,Externals,rldaggie,2016-04-22T15:46:10Z,1,1,1,0,,0,False,en,0
11564,1,2,0,Internals,lee-dohm,2016-04-22T23:00:21Z,1,0,1,1,"Fixes #11486 
",14,True,en,0
11562,7,2,0,Internals,joshaber,2016-04-22T15:49:14Z,64,782,6,0,"We‚Äôve pulled the brains of `GitRepositoryAsync` out into its own package: https://github.com/github/ohnogit

This lets others use it for projects other than Atom.
",165,True,en,0
11552,1,6,0,Externals,ggreer,2016-05-19T16:10:26Z,1,1,1,28,"Add blob: protocol to img-src and media-src sources. Add data: and mediastream: protocols to media-src.

These changes are needed to fix video chat in the Floobits Atom plugin (issue https://github.com/Floobits/floobits-atom/issues/114). A CSP directive of `default-src: *` doesn't cover protocols like `blob:`, `data:`, or `mediastream:`, which the Floobits package uses.
",373,True,en,0
11547,1,0,0,Internals,kuychaco,2016-04-20T20:11:28Z,1,0,1,0,,0,False,en,0
11544,2,0,0,Internals,damieng,2016-04-21T00:57:57Z,6,2,2,0,"Fixes:
- `Atom .` opens wrong folder from Bash #11454
- Atom fails to launch from Bash when install dir contains space #11492
- Atom fails to open in older versions of Bash #11164
",180,False,en,0
11541,3,6,4,Externals,BrainCrumbz,2016-10-31T17:05:35Z,13,0,1,194,"Comments came out while discussing issue #11137
",48,True,en,0
11534,5,1,0,Externals,50Wliu,2016-04-20T02:08:06Z,5,6,2,0,"Putting these updates into a PR to make sure nothing breaks and to give CI a break :P.

Summary of changes:
- language-coffee-script
  - Fix incorrect scopes on whitespace
  - Fix duplicate scopes on some assignment variables
- language-java
  - Tokenize all the punctuation!
  - Tokenize generics
- language-sass
  - SASS: Properly tokenize comments
  - SCSS: Don't tokenize URLs as comments
- language-yaml
  - Tokenize `true`, `false`, and `null` as language constants

And more to come soon hopefully!

Will merge once :green_apple:.
",538,True,en,0
11511,1,1,0,Externals,rldaggie,2016-04-18T15:53:29Z,4,4,1,0,,0,False,en,0
11506,1,6,0,Externals,wvanlint,2016-05-02T08:13:34Z,14,4,2,14,"This allows newer listeners to be prioritized based on when they are added.
This is useful as more recent contexts often have to be resolved first.

For example, when `core:move-down` is called in a `find-and-replace` editor, it will go through its history.
But when an autocompletion listener is added later, it should move through the possible autocompletions.

I am curious how this use case is handled in for plain DOM listeners, as they will always be called [in the order of their registration](https://www.w3.org/TR/uievents/#event-flow). It seems possible that listeners can be backed up, and restored after the context is resolved. I'm not very experienced in front-end development though, do you guys have insight?

cc @nathansobo 
",742,False,en,0
11498,1,1,0,Internals,BinaryMuse,2016-04-18T18:15:23Z,12,12,3,2,"Potentially fixes #11381 

/cc @lee-dohm 
",42,True,en,0
11494,2,1,1,Internals,BinaryMuse,2016-04-18T19:53:54Z,12,1,2,2,"Fixes #11473

/cc @kuychaco

@t9md I ran vmp specs against this change and they all pass
",89,True,en,0
11489,2,0,0,Internals,lee-dohm,2016-04-16T00:13:41Z,15,4,1,0,"Fixes #11302 
",14,True,en,0
11488,2,3,5,Internals,damieng,2016-04-19T22:48:31Z,75,38,9,4,"This sorts out a number of specs issues but is not yet complete. Want to merge anyway as it's better than what we have right now.
",130,True,en,0
11478,5,2,2,Internals,kuychaco,2016-05-03T00:36:56Z,112,18,2,17,"Thanks @einarmagnus for adding this feature :sparkles:! I resolved the merge conflicts and updated code to use the current APIs.

Closes https://github.com/atom/atom/pull/7713
Closes https://github.com/atom/atom/issues/7708
",224,True,en,0
11475,1,5,0,Internals,BinaryMuse,2016-04-14T21:57:04Z,1,0,1,0,"Potential fix for #11471 
",26,True,en,0
11474,29,29,0,Externals,50Wliu,2016-05-23T09:07:21Z,19,21,8,38,"Na√Øve bump to Electron 37 to see what broke and what got fixed.

~~Blocked on #11348~~
### TODO:
- [x] ~~Fix background throttling~~ (`text-editor-component-spec.coffee` fails even if we disable throttling, which means those specs need to be revamped because they're too time sensitive)
- [x] Fix autocomplete-plus specs (bb46933)
- [x] Fix find-and-replace specs (bb46933)
- [x] Fix tree-view specs (atom/tree-view#649)
- [x] Fix subpixel AA on non-editor elements
- [x] Test for regressions

Closes #6320
Unblocks atom/atom-keymap#35
If anyone knows of any other issues that are resolved with the upgrade to 0.37 please let me know!

/cc @lee-dohm
",651,True,en,1
11463,1,5,0,Externals,alazaro,2016-04-18T20:32:49Z,1,1,1,4,"This is the error thrown when starting Atom from Spotlight on Mac or by double clicking on the App and the default shell is `fish-shell`.
I attach a Snapshot of the error, that doesn't happen anymore after the fix.
![screen shot 2016-04-14 at 16 19 48](https://cloud.githubusercontent.com/assets/533153/14531454/ab89a0ec-025d-11e6-92ca-010838d0f97b.png)
",354,False,en,0
11459,5,3,0,Internals,as-cii,2016-04-15T15:01:32Z,13,42,2,1,"Previously builds that contained deprecations were failing without logging out the reason. I tracked down the issue to `ELECTRON_ENABLE_LOGGING`, which was preventing deprecations from being logged out. This is how this PR changes the `run-specs` task to handle this scenario correctly:
1. :bug: Use `ELECTRON_ENABLE_LOGGING=true`. This allows us to capture the output of calls to `console.warn` and `console.log`, which are useful to log out Grim deprecations.
2. :fire: Remove calls to `logDeprecations`. This method used to format the output captured in `stderr` to strip out ""[Console]"" noise from deprecations. This code path was not running anymore because we started using `stdio: 'inherit'` in #10838 for core specs, which prevents stderr output to be captured. I feel like it's okay to remove it, as the output is already readable as it is.

You can see a sample of a new build here: https://travis-ci.org/atom/atom/jobs/123049543#L254-L257.
",951,False,en,1
11438,1,0,0,Internals,kuychaco,2016-04-13T07:39:56Z,5,0,2,0,"Fixes #9805
",12,True,en,0
11437,1,1,1,Internals,damieng,2016-04-12T19:04:25Z,5,4,2,0,"Fixes the problem of apm and atom shell calls via buffered-process being interrupted/confused by autorun entries in the registry by telling our commands to ignore them.
",169,True,en,0
11436,1,1,0,Externals,joefitzgerald,2016-04-12T18:30:08Z,20,3,4,0,"This PR splits out portions of #11337, to address:
- Allows multiple invocations of `FOO=blah atom .` and `FOO=bleh atom .` to result in an updated environment for an existing window (""Should `process.env` be updated if atom is invoked from the shell for the same directory multiple times?"" from #4126)

/cc @lee-dohm 
",319,False,en,0
11427,3,0,0,Internals,nathansobo,2016-04-11T21:43:04Z,41,9,2,0,"Picks up from #11412, which I should have opened a branch on this fork for to test on the internal build.
",106,True,en,0
11426,4,5,0,Internals,joshaber,2016-04-11T18:15:42Z,5,5,3,0,"_Continuation of https://github.com/atom/atom/pull/11401._

This adds support for 32-bit linux systems. See #10819 
",116,True,en,0
11420,1,1,0,Externals,wvanlint,2016-04-19T21:47:21Z,8,6,2,9,"This PR changes the positioning of the overlay from absolute to fixed.
This ensures that no overflow will be triggered in surrounding elements, which is important especially for mini TextEditors.
cc @nathansobo 
",212,False,en,0
11419,1,0,0,Externals,colelawrence,2016-04-09T19:51:07Z,1,1,1,0,"Error happens at this place in the docs
https://atom.io/docs/api/v1.6.2/TextEditor#instance-decorateMarkerLayer
",112,False,en,0
11418,1,0,0,Externals,colelawrence,2016-04-09T19:49:11Z,1,0,1,0,"``` diff
 +  * `--no-install` - Skips the installation task after building.
```
",80,False,en,0
11414,151,27,0,Internals,nathansobo,2016-05-04T18:46:15Z,2023,5268,44,25,"This PR replaces a bunch of old and twisty code in `TextEditor` with usage of a new facility in the `text-buffer` library introduced in https://github.com/atom/text-buffer/pull/149. You can read that pull request for more information about what replaces all the code we're deleting here.
",288,True,en,0
11413,1,2,0,Externals,IanLee1521,2016-06-09T18:26:20Z,1,0,1,61,"Based on comment in dot-atom/.apm/.apmrc, the .apm directory created as part of the default startup is a cache, therefore it shouldn't be included in git.
",155,True,en,0
11412,1,1,0,Internals,damieng,2016-04-11T20:13:52Z,40,9,2,2,"Allows signing of the Windows executables (atom.exe, update.exe, atomsetup.exe) using the standard Windows SDK signing tool. 

Included is a test signing pfx/p12 signing key with the password 'password'. You can specify your own using the WIN_P12KEY_PASSWORD and WIN_P12KEY_URL as the Atom team will do on official builds when signing with the official key.
",358,True,en,0
11410,1,0,0,Internals,joshaber,2016-04-08T20:41:35Z,1,1,1,0,"# openIndex is going away: https://github.com/nodegit/nodegit/pull/989
",71,True,en,0
11403,1,1,0,Externals,50Wliu,2016-04-08T02:04:11Z,7,7,1,0,"This file wasn't updated for the flight-manual conversion.

I also fixed two `https://atom.io/docs/latest` URLs, one of which was inadvertently going to the Notifications API when it was talking about core, and the other leading to a 404.

Would love some :eyeglasses: in case I missed anything!  /cc @atom/feedback
",316,True,en,0
11399,43,44,15,Internals,BinaryMuse,2017-10-17T23:29:28Z,475,18,15,558,"See update below: https://github.com/atom/atom/pull/11399#issuecomment-330396536

---

This PR implements the `MessageRegistry`, which is similar to the `CommandRegistry` in that it maps string types of some kind to callback functions, but it differs in that messages originate from outside the application via `atom://` URIs handled via [the `open-url` event](http://electron.atom.io/docs/v0.37.4/api/app/#event-open-url-os-x).

This partially implements https://github.com/atom/atom/issues/5262, provides a mechanism for hitting things like https://github.com/atom/settings-view/pull/614 from outside the application (e.g. ""View in Atom"" links on package pages on the Atom site), and would enable package authors to implement things like https://github.com/atom/atom/issues/2037 for external debuggers, etc.

There is still some additional work to do around registering Atom as a system-level handler for `atom://` URIs on non-Mac systems, but that probably will be installer-based work.

/cc @atom/core @atom/feedback for review. Some open questions I have are:
- I restricted messages to URIs starting with `atom://atom` as we already [have a mechanism that utilizes URIs with hosts that match package names](https://github.com/atom/atom/blob/822e0c95108aadb91631570e386d8cf96d7cfdd0/src/browser/atom-application.coffee#L550-L557) to perform some work. (What is this used for? I'm not familiar with it.) I'd love to get rid of this, as it means we can't use any host that might match a package name. If anyone has bright ideas for URI schemes, that'd be awesome. (I thought maybe something like `atom://.message/...`?)
- Right now, the callback function is called with the string message (just the `namespace:name` portion) and the params, but maybe it makes more sense to pass the entire URI, or the parsed URI object.
",1837,True,en,1
11398,1,1,0,Internals,joshaber,2016-04-07T15:33:54Z,1,1,1,0,"Looks like this was introduced in https://github.com/atom/atom/pull/11369. :see_no_evil:
",89,True,en,0
11397,2,1,0,Internals,joshaber,2016-04-07T16:39:50Z,6,1,1,0,"This gives `GitRepository` the chance to clear its path cache before the callback is invoked. Otherwise reads from the cached status state within the callback would be wrong.

Fixes https://github.com/atom/atom/issues/11396.
",225,True,en,0
11388,1,10,0,Externals,ypresto,2016-08-06T13:07:30Z,12,0,2,121,"https://github.com/atom/atom/issues/8295#issuecomment-206484993
",64,True,en,0
11369,5,7,1,Externals,hellendag,2016-04-05T15:34:55Z,77,20,2,0,"Atom currently sets the `value` of the input on every `textInput` event, in an effort to appropriately handle changes made via the OSX diacritic menu (for accents, umlauts, etc).

The drawback of this is approach is that updating the value of the input will trigger layout and a subsequent layer tree update.

To resolve this, here is my proposal:
- Track a flag for `keypress` events. When the diacritic menu is used, there are two `textInput` events, with no `keypress` in between. Therefore, when no `keypress` has occurred just prior to a `textInput`, the editor model can select the previous character to be replaced by the new accented character.
- Track a flag for `compositionstart` events. When a user is in IME mode, the diacritic menu cannot be used, so the editor can skip the backward selection.

Test Plan:

Tested in a plaintext file.
- Type Latin characters, verify proper character insertion.
- Press and hold <kbd>a</kbd>. Diacritic menu appears. Select an option using the keyboard or mouse. Verify that the `a` is replaced by an accented `a`, with no extra characters.
- Type test strings in Katakana, 2-Set Korean, Telex (Vietnamese), Simplified Pinyin. Verify that characters are inserted correctly while composing, and after committing strings.

cc @ssorallen @nathansobo 
",1296,True,en,0
11352,4,2,1,Internals,BinaryMuse,2016-04-03T00:48:24Z,25,3,2,0,"See [this comment discussion](https://github.com/atom/atom/pull/11001#issuecomment-204294465). Unfortunately the solution suggested there will not work, as it breaks other functionality. So this is still üöß.

/cc @kuychaco 
",226,True,en,0
11351,1,2,0,Externals,Fank,2016-04-02T14:20:59Z,1,1,1,0,,0,False,en,0
11348,9,45,0,Externals,50Wliu,2016-04-30T07:19:17Z,9,9,5,28,"Continuation of #10983.

Closes #10983.
Fixes #11198.

/cc @drewmnoel 
",71,True,en,0
11345,1,6,0,Internals,as-cii,2016-04-01T16:21:46Z,15,4,2,0,"Fixes #8850. This continues the investigation started on #11326 and attempts to fix it using a different approach.

It turns out that the issue with pinch-to-zoom occurs only under certain circumstances; on my MacBook, it happens only whenever I do the following:
1. Start Atom with my MacBook closed and my external monitor on;
2. Open my Macbook, so that both displays are on;
3. Try to pinch the tree-view;
4. :boom: 

_(The above never happens if my MacBook is open when Atom is launched)_

As soon as a new display gets added or removed, in facts, the zoom level limit of the web frame is reset to the default and hence the page becomes zoomable again. This doesn't happen when changing the display's metrics (e.g. screen resolution), so I assume it must be something related to adding/removing displays. I have verified this arises also when enabling/disabling mirroring, which is considered by OS X as adding/removing one display.

Electron provides two events which allow us to detect when a display gets added or removed, so that we can reset the zoom level limits to `(1, 1)` every time this happens. I suspect this is what is happening in #8850, and this PR should fix it once for all.

/cc: @joshaber @nathansobo @mnquintana @atom/feedback for extra :eyes: :eyes: :eyes:.
",1284,True,en,0
11341,1,0,0,Internals,as-cii,2016-04-01T12:14:52Z,2,5,2,0,"Fixes https://github.com/atom/about/issues/21.

Back in #10675 we [introduced a listener for checking updates](https://github.com/atom/atom/blob/f884c987e29acef83a40164b681950a7fd8bf047/src/browser/atom-application.coffee#L307-L308) in the browser process without, however, adding the restart/install updates counterpart. However, we already expose both commands under application-level events (`application:check-for-update`, `application:install-update`), so this PR changes `ApplicationDelegate` to use those instead (and removing the unnecessary additional listener).

/cc: @amytruong @atom/core 
",601,True,en,0
11339,1,0,0,Externals,coliff,2016-04-01T13:28:18Z,2,2,1,0,"HTTPS a couple of links
",24,True,en,0
11329,1,1,0,Externals,thomasjo,2016-03-31T12:27:19Z,1,1,1,0,"A bug was introduced in https://github.com/atom/atom/commit/76f9f43e6aec3d53b1b23b893648eac238090a60, which boiled down to not checking whether the (seemingly) optional callback in `ChildProcess.safeExec` is defined before invokation.

I wasn't sure whether we wanted to add a condition on the `else` statement, or set `callback` to a noop function. I opted for the formed, but I'm open to suggestions.

/cc @thedaniel @abe33 @damieng 

---

Fixes #11328 
",456,True,en,0
11325,3,2,3,Internals,as-cii,2016-03-31T15:45:58Z,13,3,2,0,"Fixes #10403.

On OS X, we noticed that some emojis were not being displayed correctly. This is a problem with the rendering mechanism that Chromium uses and is present in Chrome 50 as well:

![screen shot 2016-03-31 at 11 26 59](https://cloud.githubusercontent.com/assets/482957/14171984/2f63fc88-f736-11e5-895d-f48cca510511.png)

However, it seems like it has been fixed on Chrome 51 Canary, where the test above works perfectly:

![screen shot 2016-03-31 at 11 26 34](https://cloud.githubusercontent.com/assets/482957/14172028/598ebfe8-f736-11e5-892d-e8068e1b7641.png)
### A workaround

Even with Chrome 50, however, I noticed that GitHub.com was rendering emojis correctly without using PNGs:

![screen shot 2016-03-31 at 11 48 34](https://cloud.githubusercontent.com/assets/482957/14172067/88db969a-f736-11e5-851c-151763d630cd.png)

It seems, in fact, that adding the ""Apple Color Emoji"" font to the list of font families allows Chrome to pick up the right glyph to render instead of the ugly box:

![screen shot 2016-03-31 at 11 31 04](https://cloud.githubusercontent.com/assets/482957/14172145/deb5f330-f736-11e5-808e-0bd574c4722a.png)

![screen shot 2016-03-31 at 11 31 09](https://cloud.githubusercontent.com/assets/482957/14172149/e1ae8958-f736-11e5-9f7f-2297f8df8090.png)

As expected, removing it, causes the box to appear (again, this works fine in Chrome Canary 51):

![screen shot 2016-03-31 at 11 30 31](https://cloud.githubusercontent.com/assets/482957/14172172/f9bd9836-f736-11e5-8c18-d55545381742.png)
![screen shot 2016-03-31 at 11 30 24](https://cloud.githubusercontent.com/assets/482957/14172173/fc8e0082-f736-11e5-9b1f-f8493d3734f1.png)

This is the exact workaround I have employed in Atom as well; indeed, we should be able to remove it  as soon as Chrome 51 gets released and Electron is updated.

/cc: @atom/core 
",1841,True,en,0
11324,5,1,0,Internals,as-cii,2016-03-31T09:56:43Z,39,7,3,0,"Supersedes and closes #9042.

This PR adds a couple of small changes to the above PR, so that:
- :racehorse: Atom opens slightly faster when `restorePreviousWindowsOnStart` is `false`;
- :white_check_mark: Specs ensure that such config parameter gets checked on start, rather than on exit;

Many thanks to @jordanbtucker for providing the original implementation and moving this forward! :sparkles: 

/cc: @atom/core 
",418,True,en,0
11323,2,0,0,Externals,clickthisnick,2016-05-04T18:22:37Z,3,3,2,34,"Update grammar
",15,True,sv,0
11320,1,0,0,Internals,joshaber,2016-03-31T00:42:45Z,1,1,1,0,"Fixes build on Windows machines that don‚Äôt have bash. Somehow this apparently worked on our CI machines already.
",115,True,en,0
11316,1,2,0,Internals,lee-dohm,2016-03-31T17:31:15Z,1,1,1,1,,0,False,en,0
11315,10,1,0,Internals,joshaber,2016-03-31T00:42:23Z,321,144,3,0,"Another entry in the saga of #11214.

The remaining problem comes down to nodegit's threading model. Nodegit uses a lock to protect against cross-thread memory corruption, race conditions, etc. It also uses libuv's thread pool to do git operations off the main thread.

The problem is that if a lot of git work gets queued up (as happens any time the window comes to the foreground), we can end up with git operations on all of libuv's threads, waiting to acquire the lock. That sucks, because node uses that same thread pool to do all its async work. So we end up blocking node from doing most anything until our git operations are done.

This is most noticeable on slow file systems (e.g., network drives). We‚Äôd essentially end up blocking node from doing anything while we waited on IO.

Instead of using nodegit‚Äôs locking, we‚Äôll use our own serialization mechanism.

This should also afford us more concurrency in the future if/when we need it.
",955,True,en,0
11314,4,1,0,Internals,as-cii,2016-04-01T07:09:37Z,42,2,5,1,"This PR propagates the auto-update errors to the renderer process so that we can handle the error state in the about package and show an appropriate error label.

/cc: @thedaniel @joshaber @atom/core 
",201,True,en,0
11312,1,1,0,Externals,coliff,2016-03-30T08:32:04Z,3,3,1,0,"https links to nodejs.org and visualstudio.com
",47,True,en,0
11311,2,1,2,Externals,coliff,2016-03-30T14:40:28Z,1,1,1,0,"https link to nodejs.org
",25,True,en,0
11306,1,1,0,Internals,nathansobo,2016-03-29T23:19:56Z,5,7,2,0,"For some reason, we're failing intermittently in certain tests with leaked subscriptions. I've spent some time trying to figure out how this could happen, but I can't.
- In the flaky tests, we're leaking paths that are being watched by buffers that I _know_ are being created via `Workspace::open`.
- That means these buffers should be destroyed in `atom.clear()` in the `afterEach` block that's defined in our spec helper to follow every test. As part of destruction, we destroy our watch subscriptions.
- Yet even after destroying all editors and buffers, we still seem to be leaking watches. This leads me to believe there is some subtle error in pathwatcher itself.

Ultimately, it's not clear that the value of this global assertion really warrants this level of hassle. I'm making a pragmatic call to convert this to a warning. If we're seeing it a lot as we develop code that watches paths, then we're probably leaking. If we see it once in a blue moon on CI it's probably just this issue. I don't think it's worth it to invest more time understanding it right now.

/cc @joshaber 
",1089,False,en,0
11296,3,1,0,Internals,nathansobo,2016-03-28T22:54:48Z,39,32,3,0,"Worked with @damieng on these changes. There may be other improvements to make but we might as well get these in.
- Fix the clean script to actually work on windows.
- Omit any `PATH` entry containing `msbuild.exe`, which confuses `node-gyp`.
",243,False,en,0
11295,3,1,0,Internals,joshaber,2016-03-29T15:57:41Z,9,10,1,0,"Fixes https://github.com/atom/git-diff/issues/97.
",50,True,en,0
11286,3,2,0,Internals,as-cii,2016-03-29T07:46:10Z,48,8,2,0,"Fixes #10903.

This makes sure that when a `PaneAxisElement` is removed from the DOM and subsequently added back to it (e.g. because of a `PaneContainer` or `PaneAxis`'s `replaceChild` call), its internal state gets reinitialized. The initialization process involves resubscribing to the underlying model, as well as cleaning up / rebuilding children on attach/detach.

/cc: @atom/core 
",387,True,en,0
11284,1,2,0,Externals,jonmast,2016-08-06T16:06:34Z,1,1,1,133,"The desktop entry specification states that %U is for URLs and %F is for
files. Since atom doesn't support URLs, we should use %F. Fixes #2320.
",144,False,en,0
11280,12,2,0,Internals,joshaber,2016-03-28T18:16:01Z,31,46,3,2,"Partly fixes #11214.

`git status` involves lots of IO (mostly `stat`s). On most file systems, this isn‚Äôt a big deal. But on slow file systems (e.g., networked drives), this can be quite costly.

In order to trivially maintain `GitRepository`s API after adding `GitRepositoryAsync`, we simply left it as-is, but that meant we were doing `git status` twice.

This remove‚Äôs `GitRepository`s `git status` check by pulling its status information from `GitRepositoryAsync` as much as possible, while still maintaining `GitRepository`s existing API.
",548,True,en,0
11277,10,5,0,Internals,joshaber,2016-03-28T21:24:56Z,38,23,2,3,"Partly fixes #11214.

The biggest problem was that calling `repo.workdir()` on the main thread involved acquiring a lock, which could already be held by a background thread doing disk IO. And on network filesystems, that IO was really expensive, which meant the lock would be held for a looooooong time. See also https://github.com/nodegit/nodegit/pull/968 which removes the need for `repo.workdir()` and friends to acquire the lock.

There are a couple other cases that we found where a lock could be acquired on the main thread:
- [x] `repo.path()`
- [x] `Git.Ignore.pathIsIgnored` (https://github.com/nodegit/nodegit/pull/970)

Even with these changes, performance will still be worse than 1.5.4 because both `GitRepository` and `GitRepositoryAsync` are refreshing their status from git which requires a lot of IO‚Äîwhere in 1.5.4 we only had `GitRepository`.

Ideally `GitRepository` would only do work if some package is using it. Currently that‚Äôll always be the case as `tree-view` hasn‚Äôt been updated to use `GitRepositoryAsync` yet (see https://github.com/atom/tree-view/pull/624). But once `tree-view` is updated, that would be a good optimization to do as well.

/cc @nathansobo 
",1194,True,en,0
11274,2,1,0,Internals,simurai,2016-05-19T07:01:00Z,4,0,1,55,"This let's packages use `position: absolute` and be contained to `atom-workspace-axis` elements.

It fixes https://github.com/thomaslindstrom/color-picker/pull/176 where color-picker relied on `background-tips` to add `position: relative;`, but broke when `background-tips` got disabled.

![color-picker](https://cloud.githubusercontent.com/assets/378023/14036216/14294b1e-f27a-11e5-8e10-a1dafb6ab570.gif)

:warning: Since `background-tips` only styled `atom-workspace .horizontal .vertical { position: relative; }`, there is a chance that some packages rely `atom-workspace-axis.horizontal` to be `position: static;`. So something to keep an eye on.
",651,True,en,0
11271,1,1,0,Externals,mhw,2016-03-25T08:29:25Z,1,1,1,0,"I was just reading the source code and noticed this minor cut-and-paste error in the error message.
",100,True,en,0
11265,1,1,0,Externals,ardhipoetra,2016-03-25T08:28:36Z,3,3,1,0,"Some link in issue template were dead (it was linked to the manual main page). This PR fixes that.
",99,True,en,0
11251,6,0,3,Internals,as-cii,2016-03-28T18:29:34Z,55,9,3,5,"This PR addresses the concerns raised by @jeancroy  in https://github.com/atom/atom/pull/10605#issuecomment-199603786 by falling back to reading state from the storage folder when we can't find one under IndexedDb.

Moreover, this introduces a `clear()` method on `StorageFolder` that deletes the storage folder whenever the user supplies the `--clear-window-state` argument (so that no state can be loaded in both IndexedDb and `~/.atom/storage`).

/cc: @nathansobo @kuychaco @iolsen 
",486,True,en,0
11246,2,4,0,Internals,damieng,2016-04-04T19:23:21Z,36,29,2,12,"Gradually improving the Windows build experience, so far:
- **clean** deletes all specified folders (doesn't stop on first missing one)
- **build** removes any path entry containing a msbuild.exe (avoids node-gyp errors)
",221,False,en,0
11240,3,2,0,Internals,as-cii,2016-03-23T16:23:18Z,34,14,3,1,"Fixes #11228.

Using `offsetHeight + marginTop + marginBottom` for any given block decoration item isn't appropriate, because it doesn't take into account the decoration's children and how they affect the surrounding content spatially.

With this PR, we are adding an element before and one after every block decoration, and use them as rulers that help us computing the appropriate height. Although it introduces two extra elements for each decoration, it shouldn't be a huge deal since those elements are supposedly pretty straightforward to lay out for Chrome.

/cc: @thedaniel @nathansobo 
",594,True,en,0
11216,1,2,0,Externals,ypresto,2016-07-25T17:29:35Z,4,3,1,127,"When config.setDefaults() is called ""did-change"" event emitted per one config key.
This hits performance when package has large set of default configs (like [atom-beautify](https://github.com/Glavin001/atom-beautify/issues/679).

Without transact: 

<img width=""637"" alt=""2016-03-20 1 29 10"" src=""https://cloud.githubusercontent.com/assets/400558/13903054/ab40c602-eeac-11e5-807b-953c18cbdded.png"">

With transact:

<img width=""641"" alt=""2016-03-20 14 47 49"" src=""https://cloud.githubusercontent.com/assets/400558/13903071/1def58bc-eead-11e5-8cd7-5394d0ee017a.png"">

Thanks!
",575,False,en,0
11201,1,4,0,Externals,bolinfest,2016-03-18T17:29:12Z,1,2,1,0,"I see that this file has a little use of async/await and many uses of `then()`.
Things would be much less verbose and much more linear if async/await were used throughout.
Would Atom be open to a PR that changes this?

For bonus points, we could also replace `'use babel'` with `/* @flow */` at the top of the file :)
",318,False,en,0
11194,1,1,0,Externals,fruchtose,2016-03-18T02:50:11Z,1,1,1,0,"This typo was introduced in atom/atom#11009
",44,True,en,0
11188,6,1,0,Internals,joshaber,2016-03-18T02:45:22Z,3,3,1,0,,0,False,en,0
11166,5,8,0,Internals,joshaber,2016-03-15T16:04:23Z,6,0,1,0,"Documents changes wrt https://github.com/atom/git-diff/issues/93 and https://github.com/atom/git-diff/issues/94.
",113,True,en,0
11162,7,0,0,Internals,joshaber,2016-03-14T19:59:23Z,33,4,2,0,"This is continuing @chuckhendo‚Äôs good work in https://github.com/atom/atom/pull/10930 by adding a spec to more thoroughly test the line-splitting we do in `BufferedProcess`.

It‚Äôs hard to test this in any sort of deterministic way since the process‚Äôs output could be split in any number of ways. So we throw a bunch of data at it and :pray: it gets split up in funny ways.
",379,True,en,0
11153,1,3,0,Internals,lee-dohm,2016-03-14T16:35:43Z,4,2,2,0,"https://github.com/atom/atom/pull/11054 wasn't preserving the `NODE_PATH` environment variable when the `process.env` was changed. This caused at least one problem: fuzzy-finder could no longer index files. This fix preserves all `NODE_` environment variables from the original environment, no matter what other changes are made.

/cc @joefitzgerald @nathansobo 
",363,True,en,0
11127,1,1,0,Internals,simurai,2016-03-11T05:38:54Z,1,1,1,0,"This PR adds [Use GitHub style when ""Save as HTML""](https://github.com/atom/markdown-preview/pull/335), but CI failed. Due to the ""language-javascript-was-updated-but-markdown-preview-didn't-receive-the-changes-yet"" failures, see https://github.com/atom/markdown-preview/pull/335#issuecomment-195120014.

Not sure if this will cause a build error in atom/atom too, hence this PR.
",380,True,en,0
11115,1,1,0,Internals,joshaber,2016-03-09T19:40:58Z,1,1,1,0,"Fixes a crash when creating a diff. See https://github.com/nodegit/nodegit/pull/945.
",85,True,en,0
11111,1,5,0,Externals,mehcode,2016-03-10T08:39:54Z,1,1,1,0,,0,False,en,0
11103,2,3,0,Internals,damieng,2016-03-09T17:36:19Z,1,50,2,0,,0,False,en,0
11101,4,1,0,Internals,joshaber,2016-03-08T18:37:32Z,65,11,2,0,"Fixes https://github.com/atom/status-bar/issues/128.

This mirrors the behavior of `GitRepository`.
",100,True,en,0
11099,1,1,0,Externals,rbottema,2016-03-08T16:47:32Z,11,1,2,0,"Should fix https://github.com/atom/settings-view/issues/712

The `numberToHexString` method incorrectly only put a 0 for numbers below 10 instead of 16, outputting `A` instead of `0A` for 11, for example. I've added a test at the only place that uses `toHexString` that fails on the current master branch. I'm not sure if it's in the right place, please let me know if I should move it/create seperate test cases.
",414,True,en,0
11089,1,1,0,Internals,joshaber,2016-03-07T20:39:43Z,1,1,1,0,"Fixes https://github.com/atom/git-diff/issues/88 and https://github.com/atom/git-diff/issues/89.
",97,True,en,0
11078,1,3,1,Externals,wvanlint,2016-03-11T22:37:07Z,9,7,2,5,"This PR makes it so `TextEditors` are added to the registry only when they explicitly opt in.
This was mentioned in atom/atom#10851 (where I forgot to include it) to avoid leaking memory due to package authors not calling `destroy`.

/cc @nathansobo 
",251,False,en,0
11077,1,2,0,Externals,RodrigoEspinosa,2016-03-09T17:05:04Z,1,0,1,3,"In **`text-editor.coffee`**, call `scrollToCursorPosition` on the `unfoldAll` handler.

![atom-unfold-all-fixed](https://cloud.githubusercontent.com/assets/1685621/13551477/0c1789d2-e31a-11e5-9798-d37a6031d09e.gif)

---

Fixes #11066.
",235,True,en,0
11065,1,0,0,Internals,joshaber,2016-03-04T22:09:09Z,1,0,1,0,"Otherwise TextEditorElements created through the tag wouldn‚Äôt have a
setting and be wrong.

I broke this in https://github.com/atom/atom/pull/10955.
",151,False,en,0
11063,2,1,0,Internals,nathansobo,2016-03-04T20:59:39Z,11,1,3,0,"Closes #10997. This adds a commit to test additional functionality and make the tests pass.

/cc @oclbdk 
",106,True,en,0
11060,13,2,3,Internals,as-cii,2016-03-07T11:49:30Z,46,28,11,2,"Depends on https://github.com/atom/text-buffer/pull/136.

Closes #10966.

After #10605 we have noticed some slowdowns during multi-cursor edits which we have tried to address in #10925 by switching from structured cloning to `JSON.stringify` when we had to serialize state. Even though that was faster, it led to several issues like stringifying cyclic structures and taking more and more time as the `History` grew over time.

With this PR we still continuously save the `AtomEnvironment`'s state, but we try to address the above concerns by: 
1. Incrementally converting history changes to a binary format. (https://github.com/atom/atom-patch/pull/7)
2. Serialize marker snapshots only before quitting. Although this won't maintain selection after hard crashes, the user history will always be preserved.

The result is the following: 

![screen shot 2016-03-04 at 17 43 44](https://cloud.githubusercontent.com/assets/482957/13533433/b67d40dc-e230-11e5-9789-7a1e993cba9a.png)
![screen shot 2016-03-04 at 17 44 03](https://cloud.githubusercontent.com/assets/482957/13533434/b6b32d3c-e230-11e5-8252-90958f4de929.png)

(**Total:** `~ 40ms`, benchmarks performed by simultaneously writing 5 characters on 1500 lines)

Those `~ 34ms` will only be payed the first time new history entries need to be serialized, because we will reuse a cached binary representation of them whenever they need to be serialized again.

As a byproduct, and thanks to history's internals restructuring, undos/redos with many overlapping changes will get faster, as we compose and merge them without repeating some of the work for the intersecting regions.

It would be awesome to have some feedback on this, especially to understand how this feels to you performance-wise after a test-drive.

What's missing:
- [x] Bump text-buffer after merging the related PR.

/cc: @atom/core 
",1855,True,en,0
11057,7,4,4,Internals,BinaryMuse,2016-03-07T18:01:28Z,76,26,4,3,"The API for adding pending pane items is pretty verbose; combined with ddb08d0c46ccf6408c5e7618fedd6cfc93bbad50, the argument list to `Pane::addItem` was getting pretty long, and it's easy to imagine it getting longer. This collapses things into an options object.

/cc @nathansobo re: the commit above; since the part of the API that changed was never publicly documented I assume it's fine to change for 1.6.

/cc @kuychaco the pending-ness :crown: 
",452,True,en,0
11054,16,25,30,Internals,lee-dohm,2016-03-12T04:25:20Z,274,15,6,7,"- [X] ~~Create an `atom.project.getEnv` API~~
- [X] Fixup `PATH` on OS X when `TERM` is not set
- [X] Patch `process.env` on startup
- [x] Receive passed in environment variables on subsequent launches

Fixes #11037
Fixes https://github.com/atom/atom/issues/6956
",263,False,en,0
11053,1,8,0,Internals,damieng,2016-03-05T03:33:14Z,1,18,1,0,"Existing solution caused Command Prompt to exit and sleep command is not built in to Windows.

New solution works by spawning powershell child process that passes it's PID to atom and then waits indefinitely. When atom terminates that process the parent process continues.

Tested in Command Prompt and Powershell in Windows 7 32-bit and Windows 10 64-bit.
",357,True,en,0
11051,1,2,0,Internals,kuychaco,2016-03-04T03:58:00Z,29,5,2,0,"Fixes atom/tabs#278

Signed-off-by: Michelle Tilley binarymuse@github.com
",74,True,fr,0
11042,1,5,0,Internals,kuychaco,2016-03-11T18:26:14Z,18,0,2,8,"Add the ability to install packages via git urls. See https://github.com/atom/apm/pull/518 and https://github.com/atom/settings-view/pull/743.

Signed-off-by: Michelle Tilley binarymuse@github.com /cc @BinaryMuse 
",214,True,en,0
11036,5,7,0,Internals,nathansobo,2016-03-04T19:44:04Z,29,18,5,1,"Refs #10628
Closes #11032

@jrkoenig I understand your original PR #10628 better now and after considering some alternatives, I think your idea of making `initialPaths` explicit is our best option. I cherry-picked that commit and fixed merge conflicts, along with some other small changes that I needed to get a clean restoration experience. Without these changes, I was getting a spurious entry for a parent directory in my project paths.

Can you give this a try and make sure I haven't missed some case that's important to you?
",531,False,en,0
11022,3,1,0,Internals,joshaber,2016-03-02T03:16:43Z,9,1,2,0,"Fixes #10931.

/cc @50Wliu This seems to fix it for me. It‚Äôd be great if you could verify.
",93,True,en,0
11011,7,0,0,Internals,nathansobo,2016-03-01T03:32:44Z,20,8,3,0,"This PR picks up on @colllin's #9642, merging it into master, simplifying tests, and fixing a core bug that was breaking its functionality. Manually tested and it works.
",170,True,en,0
11010,1,0,0,Internals,nathansobo,2016-03-01T01:13:44Z,17,3,3,0,"Fixes https://github.com/atom/deprecation-cop/issues/66

Previously, a guard based on the presence of the `_id` field (which is inserted by npm during installation) prevented a regex replacement of the git+ prefix on URLs. Now we always do this. Since the .git suffix also causes problems and we‚Äôre removing that in packages, I now remove that as well.

The result should be that deprecation cop doesn't need to perform its own normalization. This was the intended original behavior but the `_id` guard broke it.
",515,True,en,0
11009,1,0,1,Internals,kuychaco,2016-03-01T19:00:34Z,32,4,2,0,"Signed-off-by: Michelle Tilley binarymuse@github.com
",53,True,de,0
11008,1,1,0,Externals,jonjitsu,2016-03-01T07:59:34Z,17,0,1,0,"The config documentation:

https://atom.io/docs/api/latest/Config

was missing info on the order key.
",102,True,en,0
11006,1,0,0,Internals,BinaryMuse,2016-03-01T00:26:29Z,19,0,1,0,"See https://github.com/atom/tabs/pull/274#issuecomment-190064071

Signed-off-by: Katrina Uychaco kuychaco@github.com
",117,True,cy,0
11001,2,10,0,Internals,BinaryMuse,2016-02-29T18:30:49Z,41,4,2,0,"Continuation of #10959
",23,True,en,0
10999,8,14,0,Externals,50Wliu,2016-06-06T12:14:32Z,6,6,2,98,"Time to update some more specs!
",32,True,en,0
10984,1,0,0,Internals,iolsen,2016-02-26T22:42:49Z,4,0,1,0,,0,False,en,0
10975,1,0,0,Internals,joshaber,2016-02-26T14:45:12Z,1,1,1,0,"Fixes #10965.

Once this lands I‚Äôll backport on to beta.
",59,True,en,0
10972,3,0,0,Internals,maxbrunsfeld,2016-02-29T22:40:01Z,26,29,3,4,,0,False,en,0
10967,1,1,0,Externals,b6pzeusbc54tvhw5jgpyw8pwz2x6gs,2016-02-25T17:10:53Z,2,2,1,0,"This PR refer to [vim-mode-issue 961](https://github.com/atom/vim-mode/issues/961) and [vim-mode-PR 970](https://github.com/atom/vim-mode/pull/970).

To explain the problem more details, I uploaded a video file.
[video reproduce the problem](https://youtu.be/cu8EDDZt_aU)

Thank you.
",284,True,en,0
10959,9,7,0,Internals,kuychaco,2016-02-26T22:19:24Z,145,114,6,1,"- ~~New public API `workspace.setItemNotPending` that
  packages can use to set an item to set an item to not pending
  (e.g. when the user interacts with the item)~~
- Pending state for newly opened items with `{pending: true}`
  is now tracked by `Pane` instead of the item, and packages like
  `tabs` that query this information now get it from the Pane.

See corresponding changes:
- https://github.com/atom/tabs/pull/268
- https://github.com/atom/tree-view/pull/741
",471,False,en,0
10955,27,35,8,Internals,joshaber,2016-03-04T21:03:23Z,98,17,10,9,"From https://github.com/atom/atom/issues/5503:
- [ ] Don‚Äôt grow with content by default (`grow-vertically` attribute).
- [x] Don‚Äôt show gutters by default (`show-gutters` attribute).
- [ ] Don‚Äôt show invisibles by default (`show-invisibles` attribute).
- [ ] Don‚Äôt include 3 line padding.
- [ ] Add `read-only` attribute.

Did I miss anything? Does this seem like a reasonable way forward? /cc @atom/core
## 

This has evolved a bit since :point_up:.
",459,False,en,0
10933,2,0,2,Internals,maxbrunsfeld,2016-02-23T01:08:41Z,6,2,1,0,"Fixes https://github.com/atom/atom/issues/10840
",48,True,en,0
10930,1,7,0,Externals,chuckhendo,2016-03-14T19:59:33Z,4,3,1,20,"I've noticed for some time that viewing installed packages inside of settings-view was very slow. I did a little research on it, and reported the issue on the settings-view repo here atom/settings-view#734. It seems the issue is due to BufferedProcess trying to find new lines on the entire stream buffer, including data that it's already searched for new lines on. 

This PR fixes that by only searching the new data from the stream. Viewing installed packages is now significantly faster. I've attached a before and after screenshot of the CPU profile when opening settings-view and then going to the Packages tab.
### Before

![screen shot 2016-02-22 at 3 24 51 pm](https://cloud.githubusercontent.com/assets/1184341/13231590/917f5312-d978-11e5-9488-eb51ea4f459b.png)
### After:

![screen shot 2016-02-22 at 3 25 30 pm](https://cloud.githubusercontent.com/assets/1184341/13231594/955bcad8-d978-11e5-8b24-fbf5b4169ef3.png)
",925,True,en,0
10927,1,15,0,Internals,maxbrunsfeld,2016-02-22T17:30:40Z,1,1,1,0,"Fixes https://github.com/atom/atom/issues/10852
",48,True,en,0
10926,4,1,0,Internals,joshaber,2016-02-22T17:49:03Z,21,10,2,0,"Fixes https://github.com/atom/git-diff/issues/86.
",50,True,en,0
10925,2,6,0,Internals,as-cii,2016-02-23T09:10:02Z,23,10,2,0,"Last week we discovered with @kuychaco that serializing state is taxing on Atom's responsiveness, because serialization happens on the main thread. As per https://bugs.chromium.org/p/chromium/issues/detail?id=536620, we discovered that structured clone isn't very performant and therefore we started researching a different approach that could perform better.

Below you can take a look at a profile of `saveState` and `IndexedDb.put()`:

![before](https://cloud.githubusercontent.com/assets/482957/13218622/135896a4-d96b-11e5-84b1-57eef4b94b74.png)

**Total:** `~ 116ms` for inserting 11 characters on 200 cursors.

We decided to attack the problem in two ways:
1. Use `JSON.stringify` instead of structured clone to store state in IndexedDb.
2. Defer work until a `requestIdleCallback` is dispatched. This allows to avoid blocking the main thread if some important operation is being performed.

For the same scenario, this is how this PR performs:

![after](https://cloud.githubusercontent.com/assets/482957/13218818/3aeeae00-d96c-11e5-8112-9812b6fd0195.png)

**Total:** `~ 40ms`, `~ 3x` faster. :racehorse:
#### Serializing History

Another problem we noticed is that the more edits get performed on a certain buffer the slower serializing its history becomes. This makes sense, especially in the context of large multi-cursor operations, where a single checkpoint in history could contain lots of changes. 

![history](https://cloud.githubusercontent.com/assets/482957/13219700/fa7c2220-d971-11e5-91c9-ca34289e5e19.png)

**Total:** `~ 130ms`, for inserting 5 characters on 1500 cursors.

This is an issue we still have to solve, but here's a list of potential solutions:
1. Remove history serialization altogether. I didn't expect history to be remembered across sessions and I believe this is not a ""loss of work"" scenario, although it's admittedly a nice feature. Sublime Text doesn't preserve history after closing the window, but you might argue that our users are already familiar with this behavior.
2. Add an option to preserve history. The default would be false, and users can decide to opt-in if they want to keep the original behavior.
3. Incrementally serialize history's state. This might be a nice improvement for long-running editor sessions, because we just have to serialize new changes as they come in, avoiding the repeated work of serializing the same state over and over and spreading the cost over a large timespan. This won't help the multi-cursor scenario, though, where a huge amount of changes could be collected over a short amount of time, and hence slow down the UI.
4. Serialize state across multiple `requestIdleCallback`s. This is a nice idea in theory because it allows to split the cost of serialization in `50ms` chunks, thus not blocking the main thread at all. In practice, however, it might be difficult to both keep track of changes and serialize stuff in parallel: for example, what happens if, while serializing state, an edit occurred?
5. After :ship:ping web workers, move this work off the main thread. I think @nathansobo brought up this idea in the past, but basically we could have a separate `TextBuffer` instance working on another thread; as changes come in, we `postMessage` to the worker thread and we let it deal with all the serialization stuff. This somewhat depends on structured clone being fast, though, because otherwise sending message to the worker thread would let the main thread pay roughly the same cost of serialization.

I believe 2) could actually be fine because it would allows us to keep this code path fast without sacrificing simpleness.
#### Conclusion

I think it might okay to :ship: and experiment with this even if we do not solve the problem illustrated above. If serialization is still a bottleneck after test-driving this, we definitely need to back the feature out and address the problem from another, more performant perspective.

What do you think?

/cc: @atom/core 
",3957,True,en,0
10921,4,0,0,Internals,benogle,2016-02-22T22:28:16Z,5,4,2,1,"The main utility is to unblock MRU tabs: https://github.com/atom/atom/pull/10737, but there should be some interesting features unlocked by this change.

Effectively, this adds new syntax for dispatching commands on keyup events. It looks like this:

``` coffee
'atom-workspace':
  'ctrl-y ^ctrl': 'core:do-stuff'
```

Which means, user presses `ctrl-y`, then lifts `ctrl` to fire the `core:do-stuff` command. If any other keybinding is used instead of a `ctrl` keyup after the `ctrl-y`, the command will not be dispatched.

For more info see the PRs on atom-keymaps
- [Add handlers for keyup events](https://github.com/atom/atom-keymap/issues/113)
- [Run exact matches when the remainder of the partially matched commands are only keyup events](https://github.com/atom/atom-keymap/issues/115)

cc @natalieogle
",811,True,en,0
10901,1,1,0,Internals,thedaniel,2016-02-19T14:56:55Z,0,4,4,0,,0,False,en,0
10898,1,1,0,Externals,50Wliu,2016-02-19T20:50:40Z,1,1,1,0,"Fixes #9587
Fixes atom/autosave#54
Fixes atom/tabs#241

Wasn't sure if this warranted tests.  I'll gladly add one if asked to.
",127,False,en,0
10895,4,0,1,Internals,maxbrunsfeld,2016-02-18T23:36:59Z,5,2,4,0,,0,False,en,0
10888,1,3,5,Internals,maxbrunsfeld,2016-02-18T18:27:04Z,68,104,8,0,"Fixes issue caught by @izuzak in https://github.com/atom/atom/pull/10764#issuecomment-183709726
Refs https://github.com/atom/atom/pull/10743

I took this as an opportunity to clean up some of the craziness. Thus, I have probably broken something. 
",248,False,en,0
10886,1,1,0,Externals,daxlab,2016-02-18T15:56:25Z,2,2,1,0,"The atom build directory has been changed. The new build directory is `out/Atom`.
",82,True,en,0
10885,1,3,0,Internals,as-cii,2016-02-18T17:58:04Z,3,1,1,0,"This adds a simple layer of caching into `LanguageMode.prototype.getRegexForProperty` to avoid allocating `OnigRegExp` objects when e.g. calling `autoDecreaseIndentForBufferRow` (which is called for each line when performing a multi-cursor edit).
#### Before

![screen shot 2016-02-18 at 14 31 43](https://cloud.githubusercontent.com/assets/482957/13144733/a71cfc62-d64c-11e5-8bf6-aa67be04f6d4.png)

_(Total: `~ 293ms`, benchmark performed by editing 1500 lines, writing 5 characters)_
#### After

![screen shot 2016-02-18 at 14 29 03](https://cloud.githubusercontent.com/assets/482957/13144735/aae39284-d64c-11e5-9fcd-c2a74b571b92.png)

_(Total: `~ 135ms`, ~ 2x speedup :racehorse:)_

For the same edit, the method now takes `~ 135ms` to execute, but most of that time (`> 80ms`) is spent in getting the scope descriptor for a certain buffer position. That should get better with @nathansobo's improvements at the `DisplayLayer`, making `autoDecreaseIndentForBufferRow` a pretty cheap function call.

/cc: @atom/core 
",1019,False,en,0
10878,2,1,0,Internals,kuychaco,2016-02-18T21:57:06Z,9,1,2,0,"Fixes https://github.com/atom/atom/issues/5891
",47,True,en,0
10874,1,3,3,Internals,damieng,2016-02-18T02:55:22Z,29,8,1,0,"Kind of experimental but currently clean on Windows fails most of the time because of the path lengths.
",104,True,en,0
10873,1,0,0,Internals,maxbrunsfeld,2016-02-17T23:05:16Z,3,1,1,0,,0,False,en,0
10872,1,3,0,Internals,kuychaco,2016-02-18T00:16:02Z,18,1,2,0,"@joshaber pointed out that opening a file from fuzzy-finder currently does not make a pending pane item permanent. This PR makes it such that if you open a file without the `pending` option and the file is currently opened in pending state, the pending state will be terminated. 

TODO: Merge PRs for find-and-replace and tree-view once this is on stable. I simplified code in these packages by opening items without `pending` option rather than explicitly invoking `terminatePendingState`
",490,True,en,0
10870,12,5,20,Internals,lee-dohm,2016-02-18T20:02:35Z,39,2,2,0,"/cc @atom/feedback for more :eyes:
",35,True,en,0
10863,1,3,0,Internals,as-cii,2016-02-18T00:51:49Z,1,1,1,0,"This largely reduces the overhead of converting ranges/points from native to javascript objects.
#### Before

![screen shot 2016-02-17 at 16 26 23](https://cloud.githubusercontent.com/assets/482957/13114303/40bbd43e-d593-11e5-986c-e0251c23093c.png)

_(Total: `~ 1040ms`, benchmarks performed by editing 1500 lines, writing 5 characters)_
#### After

![screen shot 2016-02-17 at 16 22 54](https://cloud.githubusercontent.com/assets/482957/13114297/3b4f1e98-d593-11e5-967f-733af53cff8d.png)

_(Total: `~ 65ms`, 16x speedup :racehorse: :racehorse: :racehorse:)_

Props to @maxbrunsfeld for suggesting this fix! :clap: 

/cc: @atom/core 
",634,False,en,0
10862,3,17,2,Externals,PaulAik,2016-03-23T22:45:15Z,3,3,1,35,"Atom's `default-directory-provider` incorrectly identified Windows file paths (e.g. c:\users\paul\text.txt) as URL's. This has a knock-on effect for features such as the Tree View, which shows individually opened files as though they are directories (as opposed to the correct functionality, whereby Tree View shows the file's parent directory and highlights the opened file).

This was because the module was checking for the presence of a protocol in the path passed to it in order to determine whether it was a local file path or a URL (such as atom://config/something). Unfortunately, on Windows the drive letter (e.g. `c:`) was identified as a protocol.

The fix put in place replaces the check for a protocol with one that checks for a hostname. In valid URLs this should come back as a non-empty string, but on Windows it'll come back empty meaning the module correctly identifies the string as a file path.

Tested on Mac and Windows.

Linked tree view issue is [here](https://github.com/atom/tree-view/issues/471)
",1023,True,en,0
10861,10,3,0,Internals,as-cii,2016-02-18T14:26:44Z,73,105,7,0,"Understanding whether a row can be folded or not requires to scan surrounding lines and it's relatively slow. As you might imagine, doing so for every changed line after a multi-cursor edit can become quite painful as the amount of edited lines increases. For this reason, with this PR we now compute foldability on-demand (lazily) only for on-screen lines.
#### Before

![screen shot 2016-02-17 at 15 24 01](https://cloud.githubusercontent.com/assets/482957/13112699/3e149556-d58c-11e5-9341-1c129b6c2bc4.png)

_(Total: `~ 482ms`, benchmark performed by editing 1500 lines, writing 5 characters)_
#### After

![screen shot 2016-02-17 at 15 22 22](https://cloud.githubusercontent.com/assets/482957/13112872/f08a9e24-d58c-11e5-8291-65ff8e3c3911.png)

_(Total: `0 ms` in `handleBufferChange`, and the impact on the rendering path is negligible thanks to 2a35d19 :racehorse: :racehorse: :racehorse:)_

There's one caveat I illustrated in 90c75fd which needs to be discussed, but I feel like it _might_ be addressed separately and was not a problem introduced with these changes.

/cc: @atom/core 
",1093,False,en,0
10858,1,1,0,Internals,damieng,2016-02-17T19:36:35Z,1,1,1,0,"This gets us the latest version of Squirrel updater with many Windows fixes.
",77,True,en,0
10851,1,9,3,Externals,wvanlint,2016-03-01T00:34:03Z,85,2,5,12,"Currently, only `TextEditors` that are items of `Panes` are observable.
From the model point-of-view, the `TextEditors` are linked to the workspace through the `PaneContainer` and `Panes`.

There are other `TextEditors` that are of interest though.
For example, the editor in `find-and-replace` might want autocomplete functionality (atom/autocomplete-plus#383).

With this change, any editor created through `workspace.buildTextEditor` can be observed, which seemed the cleanest way to observe `TextEditors` across a varied use in the model.

Note: the tests seem to succeed locally, let me know if they are failing due to flakiness or if I am doing something wrong.
",668,False,en,0
10849,1,0,0,Internals,maxbrunsfeld,2016-02-17T23:05:26Z,3,1,1,0,,0,False,en,0
10846,3,0,0,Internals,kuychaco,2016-02-17T19:57:40Z,18,0,3,0,"Fixes https://github.com/atom/atom/issues/10762
",48,True,en,0
10843,6,2,0,Internals,joshaber,2016-02-18T15:23:37Z,4,4,1,1,":pray:
",7,True,en,0
10841,2,20,1,Externals,ArnaudRinquin,2016-02-23T00:42:21Z,53,12,5,6,"This commit adds the `-a, --add` option to the CLI which allows users to add paths to the last focused window (similar to Sublime), like shown here:

![add-option](https://cloud.githubusercontent.com/assets/228886/13084046/9380e642-d4cf-11e5-902a-cd1e126685fd.gif)

This allows you to open many projects in the same Atom window (but not necessarily at the same time) without the hassle of clicking through the menus (right click > Add Project Folder > find my way to the folder...) but doing it from the CLI instead.

This comes with:
- a single additional test, I'm not sure if adding more is necessary
- documented CLI usage (automated)

I'm not sure if that feature needs to be documented elsewhere, if it does I'd be happy to do it.
",737,True,en,0
10838,3,1,0,Internals,joshaber,2016-02-16T16:14:21Z,15,4,2,0,"Fixes #10837.
",14,True,en,0
10835,1,2,0,Internals,as-cii,2016-02-17T09:33:45Z,16,10,2,0,"With this PR, `TextEditorPresenter` can avoid to scan through all the cursors to understand whether they're visible on screen. This dramatically reduces the calls to `getScreenRange` and, thus, makes `updateCursorsState` faster for scenarios where the number of cursors is elevated (e.g. editing, scrolling through a file, etc.).

Although this code path will partially, and positively, be affected by the in-progress `DisplayLayer` redesign, I believe that reducing the number of cursors we need to iterate is still valuable in terms of performance and reduces the number of `getEnd()` queries we need to perform against `MarkerIndex`.
#### Before

![screen shot 2016-02-16 at 14 44 49](https://cloud.githubusercontent.com/assets/482957/13077922/29de3748-d4bc-11e5-9137-8dfb5d2be0f9.png)

_(Total: `~ 1183ms`, benchmarks performed by editing 3000 lines, writing 5 letters)_
#### After

![screen shot 2016-02-16 at 14 46 45](https://cloud.githubusercontent.com/assets/482957/13077986/9dd66d82-d4bc-11e5-9cb5-9998620adc47.png)

_(Total: `~ 98ms`, 12x faster :racehorse:)_

/cc: @nathansobo @maxbrunsfeld 
",1104,True,en,0
10828,1,0,0,Internals,joshaber,2016-02-16T01:32:47Z,2,2,1,0,"Add the decoration after subscribing to state updates. Same fix as #10792.
",75,True,en,0
10827,3,1,0,Internals,joshaber,2016-02-16T02:43:42Z,51,6,2,0,"Bring the fixes over from https://github.com/atom/atom/pull/10758 and https://github.com/atom/atom/pull/10797.
",111,True,en,0
10818,1,20,0,Internals,damieng,2016-02-16T18:44:58Z,9,2,1,1,":checkered_flag: Register atom.exe as a file handler for the current user including updating the .exe location on upgrade and removing it on uninstall. 

Addresses #4893 and #6860. Partially addresses #6177 in that we now do the right thing although Cyberduck on Windows still seems to have some issues - I couldn't get Edit With to even work with Notepad although the Open With from the transfer Window now works with Atom.

Tested on Win7/x86 and Win10/x64:
![handlerwin7](https://cloud.githubusercontent.com/assets/118951/13037228/f82a674e-d330-11e5-8021-692c90937dd6.PNG)
![handlerwin10](https://cloud.githubusercontent.com/assets/118951/13037220/e420371a-d330-11e5-9d96-260eb4489dfc.png)
",693,True,en,0
10803,1,5,0,Internals,lee-dohm,2016-02-13T05:15:06Z,1,1,1,0,"Fixes #10783 
",14,True,en,0
10797,4,1,0,Internals,joshaber,2016-02-12T20:32:34Z,31,2,2,0,"Fixes #10757.
",14,True,en,0
10795,1,0,0,Internals,lee-dohm,2016-02-17T18:26:28Z,0,12,1,5,"Some Core Team labels aren't used anymore. To prevent misleading our users, we are removing these labels from the CONTRIBUTING document.
",137,True,en,0
10792,11,9,4,Internals,joshaber,2016-02-12T22:24:29Z,22,13,1,0,"Fixes #10435.

I haven‚Äôt been able to reproduce this locally yet, but let‚Äôs see if it‚Äôs as easy as giving it a longer timeout.
",133,True,en,0
10789,2,1,0,Internals,as-cii,2016-02-12T16:57:49Z,2,2,1,0,"Refs: https://github.com/atom/autocomplete-plus/pull/659

What's missing:
- [x] `apm publish -t v2.27.1` for autocomplete-plus (it's currently failing with `Application Error`)

@maxbrunsfeld: I noticed you published a new version of autocomplete-plus but didn't upgrade it on atom/atom. The new version I plan to publish will include your changes: are you okay with this? Is there anything you were waiting for before updating ac+?
",433,True,en,0
10782,2,2,0,Internals,simurai,2016-05-19T02:27:09Z,9,0,1,97,"This solves the same as #10680 but using a CSS Media Query instead.
## Before:

When Atom's window get's narrower than `500px`, modals get cut off.

![screen shot 2016-02-12 at 10 07 56 am](https://cloud.githubusercontent.com/assets/378023/12996146/85ea076e-d170-11e5-9395-bf6fe1a7e7cc.png)
## After:

When Atom's window get's narrower than `500px`, modals will resize automatically.

![screen shot 2016-02-12 at 10 07 12 am](https://cloud.githubusercontent.com/assets/378023/12996149/8d0c66f4-d170-11e5-89ba-5783f10e868e.png)

Fixes #10603 closes #10680
## Affected themes

Themes that override the default of `500px` need to add their own Media Query.

``` less
@media (max-width: ???px) {
  atom-panel.modal {
    width: 100%;
    left: 0;
    margin-left: 0;
  }
}
```

When using `em`s, here another approach: https://github.com/atom/one-dark-ui/commit/4567ee785b7ffa8067684266b1fa7f3f5590dbbb
",899,False,en,0
10778,1,1,0,Externals,bbenoist,2016-02-11T22:06:02Z,1,1,1,0,"Found while I was taking some inspiration from the [Issue and Pull Request Labels](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#issue-and-pull-request-labels) section :eyeglasses: 

@izuzak Nice #8469 anyway :+1:
",225,True,en,0
10768,1,0,0,Internals,maxbrunsfeld,2016-02-11T18:20:16Z,1,87,2,0,"See https://github.com/atom/atom/pull/10764

After merging the above PR in master, I'd like to avoid waiting for v1.7.0 to be released before I can merge PRs that update packages to use the new deserializer and view-provider APIs. I can change the packages in a backwards-compatible way, but I need to temporarily remove the logic that I added in https://github.com/atom/atom/pull/9687 for handling the slightly-different API that I had introduced previously.

This should be pretty risk-free, since it just removes calls to some methods that I recently added. Once it goes :green_heart:, my intent is to merge it directly into stable and publish a new patch release, just to unblock continuing efforts to use the improved APIs.

/cc @nathansobo
",746,True,en,0
10764,2,4,0,Internals,maxbrunsfeld,2016-02-11T20:38:40Z,59,58,11,0,"This makes some further changes to the new `package.json`-based deserializer and view-provider APIs introduced in https://github.com/atom/atom/pull/9687. After updating some packages (see https://github.com/atom/atom/issues/9974) to use these new fields, I realized that it was somewhat awkward to specify deserializers and view providers in separate files from the packages's main module. I think it is better if these fields work similarly to `consumedServices` and `providedServices`, by specifying names of methods on the package's main module.
#### Example

`package.json`

``` json
{
  ""name"": ""my-package"",
  ""main"": ""index"",
  ""deserializers"": {
    ""MyObject"": ""deserializeMyObject""
  },
  ""viewProviders"": [
    ""buildMyObjectView""
  ]
}
```

`index.js`

``` js
const MyObject = require('./my-object')

module.exports = {
  activate () {
    // ...
  },

  deserializeMyObject (state) {
    return new MyObject(state)
  },

  buildMyObjectView (model) {
    if (model instanceof MyObject) {
      return new MyObjectView
    }
  }
}
```
#### Advantages
- This approach is more consistent with `consumedServices` and `providedServices`, which seem to be working well for a variety of use cases.
- Many packages currently maintain singleton instances of some view or model object, and keep a reference to it in their main module. This makes it easier for view providers and deserializers to create or update that singleton instance. The alternative would be for the instance to be stored as a global variable in the deserializer file, or in some third file that is required by both the main module and the deserializer.
- Similarly, this allows the deserializer to interact with any of the package's consumed or provided services with less boilerplate.
- Overall, I like the idea of the package's main module being the only file that needs global state, and all other files in the package exporting classes or functions.
#### Drawbacks
- The main module will be required earlier now, for packages that either 1) have view providers, or 2) have deserializers that are needed immediately. But _some_ code file would have to be required under these conditions regardless, so I think as long as the main module defers its requires effectively, it shouldn't make any difference in terms of load time.

/cc @atom/core
",2320,False,en,0
10758,4,2,0,Internals,joshaber,2016-02-10T20:15:10Z,31,2,3,0,"Fixes #10746.
",14,True,en,0
10748,1,0,0,Internals,lee-dohm,2016-09-29T19:10:51Z,1,1,1,232,"Ultimately we should add some stuff to the Flight Manual about file globs in various places in Atom. I just wanted to get something in place for now because of:

https://discuss.atom.io/t/tree-view-not-ignoring-ignored-names-names/25258
",237,True,en,0
10747,2,0,0,Internals,damieng,2016-02-09T23:46:38Z,36,26,1,0,,0,False,en,0
10743,4,3,0,Internals,joshaber,2016-02-10T14:22:57Z,22,3,3,0,"Fixes #10648.

So this fix is a little fussy.
1. Ideally we‚Äôd simply update the window load settings with the window dimensions before we reload, so that the reloaded window has the same dimensions.
2. **But** any changes we make to the window load settings in our `beforeunload` handler aren‚Äôt reflected in the reload. (I suspect Chromium‚Äôs grabbing the location for reload before calling the handler?)
3. So the next best thing: we detect a reload before `beforeunload` is called and update the window load settings there. This worked for _most_ reloads but I wasn‚Äôt able to find a hook for reloads triggered by cmd-r with the dev tools focused. That inconsistency would have been super annoying, to me at least.
4. So instead we track whether this is the first time the window‚Äôs been loaded. If it is, we use the default dimensions. If it isn‚Äôt, we use the dimensions we‚Äôre already saving in state.

@atom/core I‚Äôm curious if I‚Äôve totally overcomplicated this or missed anything obvious.
",1009,True,en,0
10737,12,8,11,Externals,natalieogle,2016-02-28T20:32:52Z,142,12,6,19,"Fixes #5344 

First thing I did was give the `Pane` class an `itemStack` property to keep track of the order the items were used. The main function I added is `activateNextRecentlyUsedItem` which walks down the `itemStack` each time the user hits tab after ctrl is held down.

I set up the keymap for ctrl-tab but I still don't have the keymaps figured out for when ctrl is held down and tab is pressed over and over before lifting up on ctrl.  Something else I need to figure out is how to call a specific function to move an item to the top of the stack once ctrl is lifted.  

So, based on the assumption that I can make a keymap for holding down ctrl and pressing tab over and over (suggestions are welcome), I set up my code so that `activateNextRecentlyUsedItem` would be called each time the user hits tab when holding down ctrl.  Each call to this function would walk down the `itemStack`.  When the user lifted the ctrl key, somehow we would need to call `moveItemToTopOfStack` which would move the item the user stopped on to the top of the stack.

I modified the serialization, too, so the `itemStack` would persist.  The 4 scenarios I was focusing on are:
- nothing is wrong
- no `itemStack` serialized
- some items not serialized
- for some reason there is a different number of items in the `itemStack` than in the `items` array

I wrote tests for the MRU functionality and for the different serialization scenarios.

So yeah, this won't work correctly until I can figure out the key maps for holding ctrl down and hitting tab more than once and until I can figure out how to call `moveItemToTopOfStack` when ctrl is lifted.  
",1641,True,en,0
10725,3,0,0,Externals,50Wliu,2016-02-08T22:36:10Z,4,4,3,0,"Prevents function and method calls from being superseded for built-in functions (thanks to @nfour and @MaximSokolov).

Will merge once build is green.
",151,True,en,0
10712,5,4,0,Internals,kevinsawicki,2016-02-08T16:57:48Z,8,0,1,2,"Atom maintains a bunch of regexes of things to ignore when bundling the app to prevent bloat.

This pull request adds ignore patterns for the latest native modules added to the build; `nodegit`, `marker-index`, and `cached-run-in-this-context`. These patterns prevent `.c`, `.cc`, and `.h` files from being included in the built app.

This shrinks the `app.asar` overall size from `~151M` to `~105M` and the number of files in the bundle from `~18.5K` to `~14.1K`.  The bulk of the savings was from `nodegit` which was bundling all of the `openssl`, `libssh`, and `libgit2` native source code.

@iolsen and I were pairing today and we noticed this when running the `script/grunt output-build-filetypes` to display what types of files were bundled in the app.

/cc @joshaber @thedaniel :eyes:
",792,True,en,0
10708,2,2,0,Internals,joshaber,2016-02-05T22:30:06Z,12,1,4,0,"Something‚Äôs gotta remove all those sweet, sweet type annotations.

/cc @maxbrunsfeld @as-cii to make sure I didn‚Äôt miss anywhere else where we determine Babel-ness.
",169,True,en,0
10695,1,1,0,Internals,thedaniel,2016-02-05T05:15:28Z,1,1,1,0,,0,False,en,0
10694,1,0,0,Internals,kevinsawicki,2016-02-05T01:08:26Z,2,0,1,0,"This pull request adds `apm/node_modules` and `build/node_modules` to the Travis cache to hopefully speed on bootstrap time on the Linux builds there.
",151,True,en,0
10692,1,0,0,Internals,kevinsawicki,2016-02-05T00:34:17Z,1,1,1,0,"The symbols are only published for the Mac version so only generate them on Mac.
",81,True,en,0
10691,2,1,0,Externals,50Wliu,2016-02-04T23:11:57Z,2,2,2,0,"These specs broke yesterday after Atom was updated to use `language-javascript@0.109.0`.  That version provided further control over numbers by splitting hex/octal/decimal numbers into different tokens.  Normal numbers are now `constant.numeric.decimal` instead of `constant.numeric`.

Will merge once specs are green.
",319,True,en,0
10679,1,3,0,Externals,n-riesco,2016-02-05T00:17:54Z,4,4,1,0,"If atom was built in a custom directory, a custom install will require the use of `--build-dir`.
",97,True,en,0
10675,49,13,9,Internals,thedaniel,2016-03-01T23:31:56Z,290,10,8,26,"This is WIP, I'm not sure the best way to write specs for this. There'll be a corresponding PR in atom/about for the UI.

The general idea is that the `AutoUpdateManager` which runs on the main thread will pass on events from the auto updater in Electron (or whatever needs to manage update checking in the future) corresponding with the update lifecycle - checking, available, not available, downloading, downloaded - to the renderer over IPC, the app delegate will proxy them, and then the Update wrapper (available at `atom.update`) will bind to the delegate and proxy them for clients (such as the about package)

---

Edit from @benogle:

Previously there was just an `update-available` and a `update-not-available` event. Respectively, these meant ""there is an update, it's been downloaded and it's ready to install"", and ""atom is up to date"". The only one exposed was `update-available` via `atom.onUpdateAvailable`. We needed more granularity for atom/about#12, so now there are more events.

This change adds a renderer process `AutoUpdateManager` which is hanging off of `atom.autoUpdater`. The events it supports are:

``` js
onDidBeginCheckingForUpdate(callback)
onDidBeginDownloadingUpdate(callback)
onDidCompleteDownloadingUpdate(callback)
onUpdateNotAvailable(callback)
```

This is probably an 80% point to something cleanish regarding update code. The underlying AutoUpdateManager still emits `update-available` events when the entire update has been downloaded. I was worried about breaking things, so that work can be done as a separate effort. These event names should be changed and `atom.onUpdateAvailable` deprecated in favor of events on `atom.autoUpdater`.
",1682,True,en,0
10673,1,1,0,Externals,50Wliu,2016-02-09T16:17:45Z,1,0,1,5,"In #9585 I added `apm.cmd`, but forgot to copy it over when building...:weary:.

Thanks to @PaulAik for asking why `apm.cmd` wasn't available!
",143,True,en,0
10666,6,2,0,Internals,kevinsawicki,2016-02-04T23:47:42Z,2,1,1,1,"This pull request is an experiment with using [AppVeyor artifacts](https://www.appveyor.com/docs/packaging-artifacts) as a way to download a built version of a pull request.
",174,True,en,0
10660,1,5,3,Internals,maxbrunsfeld,2016-02-02T19:50:47Z,27,2,3,0,"Fixes https://github.com/atom/atom/issues/10071

Also, add them in `Workspace::open` and not `AtomEnvironment::openLocations`, so that files opened in an existing window will also be added to the list.

/cc @atom/core
",218,True,en,0
10658,3,4,0,Internals,kevinsawicki,2016-02-02T21:17:47Z,3,1,3,0,"I'm struggling to remember why Atom originally built to a temp folder but this pull request changes the default build directory to be inside the repository at `out/` instead of `$TMPDIR/atom-build`.

This should make it easier to access the build once it completes when you are building but not installing since you'll be able to just do `open out/Atom.app` on Mac or `.\out\Atom\atom.exe` on Windows.

The reason I am making this change now is that AppVeyor's artifact upload system requires your artifacts be inside your project folder which got me thinking why Atom didn't follow that pattern like many other projects do like Node, Electron, etc.

/cc @atom/feedback 
",671,True,en,0
10646,6,2,0,Internals,kevinsawicki,2016-02-02T03:57:17Z,37,33,4,0,"Previously each build recompiled all `.less` files for all the shipped themes so that the first Atom launch required no Less compiles.

This pull requests adds a cache in `~/.atom/compile-cache/prebuild-less` so that only changed files need to be recompiled across builds.

This should save around 30-60 seconds when no Less changes are made between builds and it will be incremental compiles whenever a file does change.
### Before (first compile)

```
prebuild-less:src    55.1s
```
### After (fully cached)

```
prebuild-less:src    1.5s
```

/cc @iolsen 

Refs https://github.com/atom/less-cache/pull/9
",607,True,en,0
10645,1,6,0,Internals,kevinsawicki,2016-02-02T00:56:09Z,5,1,1,0,"Previously the CI fingerprint used a SHA-1 of the entire `package.json` contents to determine when to clear the `node_modules` folder.

This would cause lots of clearings of that folder on CI since `master`, `beta`, and `stable` branches all have different `version` values that can change often.

Now only the `electronVersion` value is used in the fingerprint meaning that `node_modules` will only be cleared when the minor version of Electron changes which is why I believe this clearing was originally added before the fingerprint check was incorporated.

/cc @thedaniel @maxbrunsfeld 
",590,True,en,0
10640,1,1,0,Internals,kevinsawicki,2016-02-01T18:52:50Z,1,0,1,0,"See https://github.com/estools/escope/issues/99 for more details

Seeing CI failures like this currently:

```
Running ""standard:src"" (standard) task
TypeError: Cannot read property 'visitClass' of undefined
  at monkeypatch (C:\projects\atom\build\node_modules\babel-eslint\index.js:220:40)
  at Object.exports.parse (C:\projects\atom\build\node_modules\babel-eslint\index.js:362:5)
  at parse (C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\node_modules\eslint\lib\eslint.js:528:27)
  at EventEmitter.module.exports.api.verify (C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\node_modules\eslint\lib\eslint.js:652:19)
  at processText (C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\node_modules\eslint\lib\cli-engine.js:225:27)
  at processFile (C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\node_modules\eslint\lib\cli-engine.js:262:18)
  at executeOnFile (C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\node_modules\eslint\lib\cli-engine.js:609:23)
  at Array.forEach (native)
  at CLIEngine.executeOnFiles (C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\node_modules\eslint\lib\cli-engine.js:632:56)
  at C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\index.js:105:56
  at zalgoSafe (C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\node_modules\dezalgo\dezalgo.js:20:10)
  at C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\node_modules\deglob\index.js:64:12
  at end (C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\node_modules\deglob\node_modules\run-parallel\index.js:16:15)
  at done (C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\node_modules\deglob\node_modules\run-parallel\index.js:20:10)
  at each (C:\projects\atom\build\node_modules\standard\node_modules\standard-engine\node_modules\deglob\node_modules\run-parallel\index.js:26:7)
  at f (C:\projects\atom\build\node_modules\glob\node_modules\once\once.js:17:25)
  at Glob.<anonymous> (C:\projects\atom\build\node_modules\glob\glob.js:133:7)
  at Glob.emit (events.js:95:17)
  at Glob._finish (C:\projects\atom\build\node_modules\glob\glob.js:172:8)
  at done (C:\projects\atom\build\node_modules\glob\glob.js:159:12)
  at Glob._processSimple2 (C:\projects\atom\build\node_modules\glob\glob.js:670:3)
  at C:\projects\atom\build\node_modules\glob\glob.js:640:10
  at Glob._stat2 (C:\projects\atom\build\node_modules\glob\glob.js:751:10)
  at lstatcb_ (C:\projects\atom\build\node_modules\glob\glob.js:728:12)
  at RES (C:\projects\atom\build\node_modules\glob\node_modules\inflight\inflight.js:23:14)
  at f (C:\projects\atom\build\node_modules\glob\node_modules\once\once.js:17:25)
  at Object.oncomplete (fs.js:108:15)
```
",2889,True,en,0
10605,49,16,6,Internals,kuychaco,2016-02-16T19:58:04Z,326,125,17,20,"Fixes [atom/atom#4161](https://github.com/atom/atom/issues/4161)
- [x] separate serialization from package deactivation
- [x] extract serialization logic from unloadEditorWindow
- [x] fix package manager tests
- [x] save state asynchronously on keydown and mousedown, write tests
- [x] get rid of AtomEnvironment state instance variable
- [x] fix AtomEnvironment tests
- [x] profile serialization time for various environment states
- [x] store state in IndexedDB
- [x] add command-line flag to clear indexedDB object store
",524,False,en,1
10595,1,2,0,Externals,mnquintana,2016-01-26T19:57:15Z,3,0,1,0,"Just Git for now.

Closes https://github.com/atom/atom/pull/10390
Closes https://github.com/atom/atom/issues/10388
",115,True,en,0
10581,1,0,0,Internals,maxbrunsfeld,2016-01-25T23:28:50Z,3,1,1,0,"Fixes https://github.com/atom/atom/issues/10426

I haven't added tests for this because I want to remove this method somewhat soon (once https://github.com/atom/atom/issues/9974 is finished and we deprecate specifying config schemas in package's main modules).
",261,True,en,0
10552,1,2,0,Externals,dirk-thomas,2016-02-04T00:44:45Z,20,16,1,11,"See https://github.com/atom/settings-view/pull/698#issuecomment-171725215

Mentioning the grouping feature as ""just another type"" makes it pretty hard to find. Therefore I moved it into a separate section to make it more obvious.
",230,True,en,0
10549,1,1,0,Internals,joshaber,2016-01-23T19:49:32Z,1,1,1,1,"Most notably pick up https://github.com/nodegit/nodegit/pull/876.
",66,True,en,0
10523,1,0,0,Internals,joshaber,2016-01-21T00:05:32Z,7,0,1,0,"Fixes #10509.
",14,True,en,0
10511,1,3,0,Externals,joefitzgerald,2016-03-04T21:03:10Z,1,1,1,44,"- https://github.com/atom/electron/pull/3594

/cc @kevinsawicki 

Blocked by #9627.
",84,True,en,0
10507,3,0,0,Internals,joshaber,2016-01-20T00:38:25Z,24,9,1,0,"Work around https://github.com/libgit2/libgit2/issues/3580.

Otherwise, when we run into one of these phantom submodules we‚Äôd:
1. Try to .openExt it.
2. It wouldn‚Äôt open the phantom submodule, but instead move up and open the parent repository.
3. Refresh the parent repository thinking it was the submodule.
4. Refresh its submodules.
5. Find the phantom submodule again.
6. Goto (1).
",390,True,en,0
10486,6,7,3,Externals,bolinfest,2016-01-25T21:31:25Z,41,6,2,6,"Fixes #10483.
",14,True,en,0
10468,3,7,0,Internals,joshaber,2016-01-19T03:20:58Z,7,1,1,1,"Fixes #10450.

It turned out to be a combination of a couple things: I accidentally broke it in the async-git branch, but we were also missing one 32-bit override.
",164,True,en,0
10452,1,1,0,Externals,pra85,2016-01-16T13:46:39Z,1,1,1,0,,0,False,en,0
10445,6,5,0,Internals,joshaber,2016-01-19T13:34:35Z,8,9,3,3,"Most notably this turns on the newly added thread safety.
",58,True,en,0
10441,3,3,2,Externals,casesandberg,2016-01-20T20:25:36Z,27,30,12,4,"Duplicate Imports:

https://github.com/casesandberg/atom/commit/8c5c795b35499996b057041c7cabd05f047fe9ae#diff-f93881c6debdf6136cc7fbd22c21340dL1

https://github.com/casesandberg/atom/commit/8c5c795b35499996b057041c7cabd05f047fe9ae#diff-f42f793b4715cfbf8d07c772bc142849L10
",272,True,en,1
10415,2,5,1,Externals,50Wliu,2016-01-14T16:37:43Z,3,0,2,0,"Fixes #10335
",13,True,en,0
10409,13,0,1,Internals,kuychaco,2016-01-15T21:07:46Z,91,36,7,1,"Further improvements to #10178

Improve terminate pending state tests.
Serialize pending state for editor.
Keep pending item upon losing focus.
",144,True,en,0
10395,2,4,0,Internals,maxbrunsfeld,2016-01-13T17:40:45Z,35,0,2,0,"Fixes https://github.com/atom/atom/issues/10056
Refs https://github.com/atom-minimap/minimap/issues/426

This stops babel from logging to stderr in the case where the user has the `DEBUG` environment variable set to `*` or `babel`. Babel doesn't have an API (except for the env var) for disabling this logging, so I've monkey-patched its `Logger` class, and created a feature request for adding a programmatic API: https://phabricator.babeljs.io/T6955.
",453,False,en,0
10379,1,1,0,Internals,maxbrunsfeld,2016-01-11T22:41:32Z,8,0,2,0,"Fixes #10014

/cc @steelbrain - It looks like the linter is passing markers that have been destroyed to `TextEditor::decorateMarker`. We had a hard time reproducing it, so I can't give you precise steps. It seems to happen when editing after closing split panes. When I reproduced it, I was undoing and redoing repeatedly, but I'm not sure if that's related.
",359,True,en,0
10377,4,15,1,Internals,joshaber,2016-01-13T20:05:27Z,1,2,1,1,"Since it‚Äôs been reporting the wrong release notes, it‚Äôs doing more harm than good :disappointed: 

We‚Äôll link to the release notes from About now.

![](https://cloud.githubusercontent.com/assets/13760/12246027/07da1fee-b87a-11e5-9843-b87dbbf3c975.jpg)

/cc @atom/feedback
",278,True,en,0
10375,1,1,0,Internals,joshaber,2016-01-11T17:25:14Z,0,17,1,0,"Having this file still here is confusing. Do we use it, or do we use https://github.com/benogle/pr-changelog?

Let's apply :fire: if we're not gonna keep it up to date.

/cc @mnquintana @atom/core 
",198,True,en,0
10365,1,3,0,Externals,svanharmelen,2016-01-10T22:24:41Z,1,1,1,0,"This version fixes #10272
",26,True,en,0
10362,1,7,0,Externals,mnquintana,2016-02-01T20:36:20Z,4,0,1,22,"To mirror Travis config, refs https://github.com/atom/atom/pull/8110
",69,True,en,0
10361,3,7,0,Externals,mnquintana,2016-01-13T14:49:12Z,14,1,2,3,"Fixes https://github.com/atom/atom/issues/10358

I wasn't sure if this check was better suited for `Package` or `PackageManager`, but I think it's more within the scope of `PackageManager` to manage the state of the `core.disabledPackages` keypath. Let me know if you think I should move it though!

/cc @atom/feedback 
",320,True,en,0
10359,1,6,0,Externals,ypresto,2016-01-12T16:15:09Z,4,2,2,2,"Fixes: #8319

The same command is available in tree-view, but it requires to focus tree-view.
https://github.com/atom/tree-view/blob/4eea2f197ee4232e25fdf8f680c1dc6a98346bcf/lib/tree-view.coffee#L311

This PR implements it on text-editor too.
",243,True,en,0
10352,14,8,3,Internals,thedaniel,2016-01-15T18:37:03Z,87,27,3,5,"With this change, async tree-view specs are green (https://github.com/atom/tree-view/pull/624) but it seems this blows up sync tree-view specs somehow. In any case, we need to use relativizeToWorkingDirectory in this class so that symlinks can be relativized.

cc @joshaber 
",275,True,en,0
10349,1,2,0,Externals,Tyriar,2016-01-11T20:59:43Z,2,2,2,2,"Function key keymaps don't work when they feature upperface 'F' characters.
They still tend to work because they typically have an application menu item
which is associated with it and falled back upon. The main difference is that
the originalEvent (KeyboardEvent) is not retained when doing this fallback as
Atom thinks that the menu item was pressed instead of the keymap.

Fixes #10287
",389,False,en,0
10341,2,1,0,Externals,mnquintana,2016-01-11T19:24:17Z,26,26,1,3,"Fixes https://github.com/atom/atom/issues/10302

Might be worth checking to see if we're compliant on other platforms too, and also checking the order of items in the File, Edit, View, Window, and Help menus.
",209,True,en,0
10336,1,2,0,Externals,50Wliu,2016-01-08T19:41:10Z,60,41,5,0,"Fixes Atom hanging indefinitely upon encountering two identical filenames located in different directories in 1.3.x.

(Is cherry-picking the correct way to do this?  It feels really weird creating a PR that uses someone else's commits)
",236,True,en,0
10334,1,0,0,Externals,50Wliu,2016-01-08T19:40:26Z,1,1,1,0,"This PR will fix #9584 and #9454 on 1.3.3.  Both Electron 0.34.4 and 0.34.5 solely exist to fix the aforementioned issues, so there shouldn't be any compatibility issues with this (hopefully).

Now on the right branch!
",219,True,en,0
10332,2,1,2,Internals,lee-dohm,2016-01-08T16:56:01Z,3,3,3,0,"Fixes #10331

/cc @joshaber @mnquintana 
",41,True,es,0
10328,1,1,0,Internals,lee-dohm,2016-01-08T01:37:55Z,1,1,1,0,"Resolves an issue where the GitHub API is rate-limited during the build when attempting to download Electron.

/cc @kevinsawicki 
",130,True,en,0
10327,13,1,0,Internals,joshaber,2016-01-08T01:54:50Z,10181,50,119,0,"Well, I split the submodule work out into its own PR hoping that'd make it more easily reviewable, but then I went an added a new fixture with submodules so this PR is back to being unreviewable :cry: 
",202,True,en,0
10326,3,1,4,Externals,raelyard,2016-02-26T15:18:33Z,27,37,1,49,"#5092 and #7757 were worked around with not updating the path if registry tools access disabled in the Windows Group Policy
#5063 was worked around with not updating the path if the path contains characters outside the ASCII range

This addresses both of these with fixes that correctly update the user path under these conditions with the deleting or corruption of the user path resulting from these issues.
",409,False,en,0
10310,3,1,0,Internals,kuychaco,2016-01-08T00:49:14Z,18,20,2,0,"Also extract helper for mapping error codes to friendly messages

/cc @kevinsawicki 

Closes #10299 
Closes #10300 
",116,True,en,0
10296,1,3,0,Externals,viatsko,2016-01-06T18:49:46Z,1,1,1,0,"This will allow us to override base git repository implementation if needed
",76,True,en,0
10293,1,3,0,Internals,as-cii,2016-01-22T18:44:29Z,40,5,2,16,"Supersedes #10292.

@nathansobo: this should be good to go now! :boom: 
",72,True,en,0
10280,1,0,0,Externals,mnquintana,2016-01-05T02:17:21Z,1,1,1,0,"Includes apm's new `enable` / `disable` commands courtesy of @bronson :clap: 
",78,True,en,0
10277,2,2,0,Internals,nathansobo,2016-01-05T16:43:01Z,57,43,6,0,"Fixes #10051

This PR moves clipping of measured positions up to the editor and out of `LinesYardstick`. This allows us to check for the presence of a row in the editor after clipping is applied and saves complexity since `LinesYardstick` is only used internally and we can always control whether we clip the position we pass in.

Instead of just checking whether a row is visible in the model, we also check whether a DOM node with the line's assigned id is present. If It isn't, we force a synchronous render.
",512,True,en,0
10257,1,1,0,Externals,thisiskj,2016-01-02T23:58:53Z,1,1,1,0,"Minor documentation update
",27,True,es,0
10256,3,16,0,Externals,leo,2016-01-14T19:17:29Z,18,15,3,12,"This resolves #9952 (please read the issue for more infos). Here‚Äôs a quick screenshots of what this PR does:
<img width=""1070"" alt=""before-after"" src=""https://cloud.githubusercontent.com/assets/6170607/12075447/621151c6-b181-11e5-8c59-7c027a5f29c0.png"">
",256,False,en,0
10249,3,2,0,Internals,joshaber,2016-01-05T17:40:28Z,9,4,3,3,"_Dependent on https://github.com/atom/git-utils/pull/63._

Fixes performance issues like those in https://github.com/atom/atom/issues/6437 and https://github.com/atom/atom/issues/3426. See https://github.com/atom/git-utils/pull/63 for a full writeup of the problem.

/cc @atom/feedback
",286,True,en,0
10247,1,3,0,Internals,joshaber,2016-01-01T20:38:51Z,1,1,1,0,"Pick up https://github.com/atom/git-utils/pull/61.

_Should_ fix #3627.
",72,True,en,0
10236,12,10,0,Internals,joshaber,2016-01-05T20:18:11Z,40,1,2,5,"Fixes #10057.

I don‚Äôt know if this is The Right Thing¬Æ on other platforms, so for now it‚Äôs OS X-only.

/cc @atom/feedback 
",129,True,en,0
10233,2,2,0,Internals,joshaber,2016-01-04T21:43:46Z,2,2,1,5,"Fixes #7171 and #7428.

It'd fail previously with:

```
TypeError: Cannot read property 'pathToOpen' of undefined
```

/cc @atom/feedback
",138,True,en,0
10226,1,3,0,Externals,danielbayley,2016-01-26T02:18:50Z,4,0,1,26,"Deprecate `language-jxa` package.
",34,True,es,0
10219,1,1,0,Externals,pimentel,2016-02-04T00:34:25Z,1,1,1,35,"The current documentation doesn't make any note about paragraphs being enclosed within comments. This pull request updates that.
",129,True,en,0
10178,14,15,0,Internals,kuychaco,2016-01-08T21:45:14Z,70,4,4,14,"Addresses issue #9165 

Single-clicking on a file in tree-view or on a search result from find-in-project opens a 'pending tab'. 

See corresponding pull requests for tree-view and tabs packages:
- [tree-view #682](https://github.com/atom/tree-view/pull/682)
- [tabs #246](https://github.com/atom/tabs/pull/246)
- [find-and-replace #644](https://github.com/atom/find-and-replace/pull/644)
",389,True,en,0
10139,3,4,0,Externals,sparanoid,2016-01-06T10:10:46Z,3,2,1,16,"`blob-store` is accidentally committed to my .atom repo recently: https://github.com/sparanoid/.atom/tree/master/blob-store

I think these files should be avoided.
",164,True,en,0
10126,2,5,0,Internals,as-cii,2016-01-05T10:27:38Z,16,1,3,16,"After talking to @maxbrunsfeld about how we may speed up our CI times, we agreed it could have been beneficial to have a better understanding about where the build time gets spent.

As a result, this PR introduces two more pieces of information when building Atom:
1. Package/Modules (un)install times.
2. Grunt tasks times. (these include running specs, linting, transpiling, etc.)

![screen shot 2015-12-19 at 17 52 22](https://cloud.githubusercontent.com/assets/482957/11914198/9ae037c8-a679-11e5-936d-88c6f74fc7cb.png)

![screen shot 2015-12-19 at 17 52 32](https://cloud.githubusercontent.com/assets/482957/11914195/72febdc4-a679-11e5-91ec-f5d93bb741b7.png)

(You can see a more detailed report at https://travis-ci.org/atom/atom/jobs/97848561)

/cc: @maxbrunsfeld @nathansobo @atom/core 
",794,True,en,0
10095,2,0,0,Internals,maxbrunsfeld,2015-12-17T03:56:04Z,1,1,1,0,"Depends on https://github.com/atom/marker-index/pull/4
Depends on https://github.com/atom/text-buffer/pull/121
",111,False,en,0
10084,3,1,0,Internals,as-cii,2015-12-18T18:56:40Z,75,11,2,2,"Fixes #9992.

Although we're adding a new parameter to the serialized state, this should be a 100% backwards-compatible change. :raised_hands: 

/cc: @atom/feedback 
",166,True,en,0
10068,1,0,0,Internals,lee-dohm,2016-01-18T08:23:52Z,7,7,3,34,"Applies to #10058 
",19,True,en,0
10062,1,1,0,Internals,maxbrunsfeld,2015-12-15T01:38:36Z,6,1,2,0,"Previously, manipulating the model's scroll position would not emit a presenter state update.
",94,True,en,0
10031,3,1,2,Internals,lee-dohm,2015-12-15T03:19:49Z,6,1,1,3,"Fixes #9994
",12,True,en,0
10028,4,1,0,Internals,nathansobo,2015-12-14T10:43:19Z,19,207,2,2,"The only extremely expensive operation we need to avoid unless it's needed is decoration computation. The rest of these flags don't really warrant the added complexity for the tiny amount of computation they save. Eventually, we'll make the decoration computation so fast so that we can always execute the entire code path whenever we update the editor. This will be easier to reason about both in terms of adding functionality and thinking about performance in a variety of circumstances. Removing the bulk of the flags gets us part of the way there.

/cc @as-cii 
",566,True,en,0
10027,1,1,0,Internals,nathansobo,2015-12-14T10:40:17Z,16,36,2,2,"This prevents an additional pending scroll top/left assignment and cuts directly to adjusting the positions, saving us an update cycle. It prevents the only major case of emitting an update event during state computation.

@as-cii Am I missing anything here?
",259,True,en,0
10017,7,7,0,Internals,as-cii,2015-12-11T19:13:17Z,148,55,7,0,"Fixes #10015 
Fixes #10003

We've discovered an issue in the way V8 matches source files against a cache blob that causes the cache not to be discarded if the source files is sufficiently similar to the compile cache.

As a result, instead of relying on V8 to invalidate the cache, we compute a hash of the file's contents and use that as an invalidation key for `FileSystemBlobStore` and `NativeCompileCache`.

/cc: @nathansobo @maxbrunsfeld @atom/feedback 
",459,False,en,0
10004,2,1,2,Internals,maxbrunsfeld,2015-12-10T18:28:37Z,6,2,1,0,"Fixes https://github.com/atom/apm/issues/476
",45,True,en,0
10001,1,0,0,Externals,svanharmelen,2015-12-10T13:57:23Z,1,1,1,0,,0,False,en,0
9997,7,13,4,Internals,as-cii,2015-12-15T11:09:52Z,61,16,4,5,"Fixes #9447.

This PR provides a different strategy for wrapping lines whenever CJK characters are involved. With this PR we try to detect a CJK character before or exactly at the desired wrap boundary: if we do, we perform the wrap; otherwise, we use the old line-breaking algorithm.

Although not compliant with the Unicode spec, this allows users to mix CJK characters with Latin ones without the need to introduce a complex line breaking logic.

Before: 

![screen shot 2015-12-10 at 10 29 22](https://cloud.githubusercontent.com/assets/482957/11711762/fc238466-9f28-11e5-83a9-cd92ce0940cc.png)

After: 

![screen shot 2015-12-10 at 10 29 44](https://cloud.githubusercontent.com/assets/482957/11711763/00ada642-9f29-11e5-9764-13b926a6193a.png)

/cc: @nathansobo @atom/feedback 
",782,True,en,0
9990,4,15,4,Externals,scv119,2016-01-07T19:05:43Z,61,39,9,28,"This PR does following:
- Added a config `core.automaticallyUpdate`. This config is enabled by default, but if user disable it, the new Atom window won't check update/schedule update on startup.
- I didn't observer the config changes after initialization, which means if user change the automaticallyUpdate config, it won't change the autoupdate behavior until user quit and start Atom again, but we could observer this changes if we think it's necessary.
- Remove the build option `--no-auto-update` and revert all related code introduced in https://github.com/atom/atom/pull/8721

What I have tested:
- run the `scrip/build` to build a new Atom.app.
- noticed the `enableAutoupdate` is selected by default, and the checkUpdate button showed up in Atom menu.
- disable `enableAutoupdate` option, open a new Atom window, the checkUpdate button disappeared from Atom menu.
- Note that since the build of Atom don't have certs, so I can't tell if the download is happening or not.
",979,False,en,0
9975,5,0,0,Internals,maxbrunsfeld,2015-12-08T20:33:35Z,21,4,3,0,,0,False,en,0
9972,1,0,0,Internals,nathansobo,2015-12-07T22:52:18Z,2,0,1,0,"Heads up @kevinsawicki.
",24,True,en,0
9968,8,19,5,Internals,as-cii,2015-12-09T11:00:40Z,50,19,6,1,"Depends on https://github.com/atom/text-buffer/pull/116.
Fixes #942.

Our serialization code already supported saving state for untitled `TextBuffer` instances, but the problem was that we used the file's path to identify and search for buffers in `TokenizedBuffer` and `atom.project`. This PR changes it so that, in addition to paths, we can make use of a uniquely generated id for each `TextBuffer`.

If the `TokenizedBuffer`'s state has a buffer path, we deserialize it exactly as before. Otherwise, we try to search by buffer id among all the project's buffers. It might be tempting to use IDs even when we have a path, but it still seems quite reasonable to just use them as a fallback for two potential problems:
1. Possible weird mismatches or false duplicates (e.g. two buffers have the same path, but different IDs)
2. Even if a buffer is not present in `atom.project`, we still want re-open a buffer at that location when deserializing a `TokenizedBuffer` (I am not sure we have any guarantee that this never happens).

Feedback welcome! :balloon: 

/cc: @nathansobo @maxbrunsfeld @atom/feedback 
",1107,False,en,0
9948,2,3,2,Externals,dirk-thomas,2015-12-07T19:19:56Z,28,0,2,2,"Currently the `config.cson` is being written in semi-random order (insertion order of the object properties). That makes it pretty difficult so visually find certain options or compare two `config.cson` files from different atom installations. Especially after changing configuration options back and forth the same set of config values results in a very different file.

By ordering the object properties alphabetically the output of that file becomes deterministic. The same configuration results in the same file. And diffing or comparing changes becomes much easier.
- The first commit only contains the new spec (which obviously fails without any other changes):

```
it writes properties in alphabetical order
    Expected [ 'foo', 'bar', 'baz' ] to equal [ 'bar', 'baz', 'foo' ]. (spec/config-spec.coffee:697:29)
    Expected [ 'foo', 'bar' ] to equal [ 'bar', 'foo' ]. (spec/config-spec.coffee:700:29)
```
- The second commit updates the save function to store the data with a deterministic order.
",1006,True,en,0
9947,1,1,0,Internals,nathansobo,2015-12-10T22:18:10Z,323,360,6,5,"In contemplating a radically different approach to rendering lines based on the new display layers, @maxbrunsfeld and I got a bit confused following the logic of editor DOM updates. We think it will be easier to follow if the `LinesYardstick` never forces a DOM update, but instead requires all lines being measured to be on the DOM as part of its contract.

That means we break `TextEditorComponent.updateSync` into two explicit pre-measurement and post-measurement phases directly in the component so it's more explicit to see, then add visibility checks and synchronous updates on any of the exposed measurement methods on the component.

This might have conflicts with block decorations, but it's going to make it easier for us to maneuver as we render via the `DisplayLayer`'s `TokenIterator` instead of from `TokenizedLines`.
",832,True,en,0
9937,3,0,0,Internals,maxbrunsfeld,2015-12-03T22:15:01Z,83,28,2,0,"Includes work done in https://github.com/atom/atom/pull/9763

/cc @dranzerashi
",79,True,en,0
9930,95,14,7,Internals,as-cii,2016-01-14T20:20:00Z,1352,58,14,42,"Implements and closes #9819.

![block-decorations](https://cloud.githubusercontent.com/assets/482957/11559474/6c857aea-99b9-11e5-921f-ba83bad27c09.gif)

The above GIF lasts `~ 50s` and showcases the integration of the block decorations API with the existing primitives within Atom (so, bear with it if it takes a bit to load :sweat_smile:). By default, we attach a decoration to a screen row: when the buffer changes or the underlying marker moves, we make sure to move the block decoration as well so that we can correctly calculate the other visual elements positions with respect to such decoration.

A block decoration can be created through the standard API to decorate markers:

``` js
editor.decorateMarker(
  editor.markScreenPosition([screenRow, 0]),
  {type: ""block"", item: item}
)
```

Decorations will be (re)measured if:
1. They are visible.
2. They are invisible but they were just added.
3. The editor width changes.
4. `TextEditorElement::invalidateBlockDecorationDimensions(blockDecoration)` is called.
5. They intersect with the buffer splicing region.

There could be some edge cases I haven't taken into account, but here's what I think it's missing:
- [x] Implement a non-linear (logarithmic) algorithm to handle screen-to-pixel positions conversion.
- [x] `offsetHeight` doesn't take margins into account.
- [x] Remove `addBlockDecorationForScreenRow`.
- [x] What happens when resizing the editor? Some block decorations above could need to be resized, thus changing all the items' position after them.
- [x] Correctly handle buffer vs. screen rows by invalidating the splicing region.
- [x] Handle custom gutters as well.
- [x] Inspect the `~ 3-4ms` slowdown when adding/removing many block decorations outside the shadow root.
  - This doesn't seem to be related to block decorations having a unique `id` or being teleported inside the shadow DOM because of `<content>`. Instead, it appears that some styles that cross the shadow boundary make style recalculation a bit slower when many block decorations get swapped in and out from screen. 
- [x] Add missing documentation (mark everything as experimental)
- [x] Allow to position block decorations before or after the marked position
- [x] Update documentation
- [ ] Test-drive! :car:
- [x] **Question:** should we implement a version that works without the shadow DOM? Maybe we can defer this to another PR, when the API stabilizes.
",2410,True,en,0
9921,4,0,4,Externals,50Wliu,2015-12-03T22:26:17Z,12,12,5,0,"`let` and `var` are now tokenized as `storage.type.var.js` instead of `storage.modifier.js`.
# TODO:
- [x] Get core specs to pass
- [x] Update language-html (atom/language-html#97)
- [x] Get package specs to pass

Refs atom/language-javascript#277

Closes #8556
",262,False,en,0
9894,1,4,4,Externals,BrainCrumbz,2016-02-04T00:55:09Z,8,2,1,64,"The command line parameters for script/build command where missing examples on how they should be run. That might be usefule for people starting active contribution to the project.
",181,True,en,0
9878,1,3,0,Internals,nathansobo,2015-11-30T20:32:07Z,28,3,2,0,"Refs #9660

Previously, prepareStackTraceWithStackAssignment could end up calling itself when third-party code assigned Error.prepareStackTrace back to its original value. Now, we short-circuit this process if the rawStack property has already been assigned.

:pear:d on this with @maxbrunsfeld.
",296,True,en,0
9831,3,3,0,Internals,as-cii,2015-12-04T20:34:20Z,53,2,3,8,"Depends on https://github.com/atom/atom-keymap/pull/105.
Fixes https://github.com/atom/atom-keymap/issues/100.

In this PR we use the new `priority` parameter to prevent packages from overriding user-defined keymaps.
- [x] :arrow_up: atom-keymap after :ship:ping the related PR (this will make specs :green_heart:)

/cc: @nathansobo @maxbrunsfeld @atom/feedback 
",363,False,en,0
9802,1,1,6,Externals,ssorallen,2015-12-01T01:06:51Z,1,4,4,6,"The scope selector is referred to with the key `scope` on the options
object, not `scopeDescriptor` as the current docs claim. Reference
`scope` correctly.

Mark `options` as optional for `::observe` because the arguments
collection is checked for length, and a length of 2 assumes the second
argument is `callback`. `options` is actually optional.
",349,False,en,0
9798,3,27,7,Externals,raelyard,2016-02-04T21:57:51Z,61,8,3,72,"especially to enable using Atom as the git commit editor

Fixes #3074

Works in Powershell, cmd, and cygwin
",108,True,en,0
9797,1,3,0,Internals,as-cii,2015-11-25T09:58:16Z,1,1,1,0,"This should fix https://github.com/atom/atom/issues/9454 by rounding down any device scale factor between 1.0 and 1.3.

Could any Linux user build this locally to check if this solves the problem? 

/cc: @atom/feedback @dappiu @martinb3 @NikoUY @anywhim @fiws
",260,True,en,0
9796,2,2,0,Internals,as-cii,2015-11-24T18:30:41Z,33,3,2,0,"Fixes #9548.

Before this PR, we were using `addEventListener` to listen for commands on elements with the `.native-key-bindings` class. The only way a command (i.e. not a standard event) can be triggered on an HTML element, however, is through `atom-keymap`, but that doesn't happen whenever a native keymap is fully matched.

In the old jQuery days, whenever adding an event listener on the document, we also called `atom.commands.add`, thus allowing to listen on the document and still being notified for events dispatched manually from `CommandRegistry`. After dropping it, though, we didn't update the `handleNativeKeybindings` code path to use `CommandRegistry`, thus not hitting that code path anymore when e.g. copy-pasting because those kinds of event are _synthesized_ (and not triggered on the DOM) whenever a command from `ApplicationMenu` or `ContextMenu` is dispatched.

It would be awesome if anyone could verify that the above rationale is sound, 'cause I'm relatively new to this area of the codebase. :smile_cat: 

/cc: @nathansobo @atom/feedback 
",1066,True,en,0
9788,7,2,3,Internals,as-cii,2015-11-24T14:01:18Z,47,10,4,0,"Fixes #9697.

The above issue can be consistently reproduced by switching to Dvorak and trying to open the DevTools through `Cmd-Alt-I` (which, if you have a Qwerty keyboard, is `Cmd-Alt-G`). This doesn't happen on most Qwerty keyboards and, quite oddly, I tracked down the problem to be related to DevTools being opened or closed. Indeed, if we try to replace `ApplicationDelegate::toggleWindowDevTools` with a simple log statement this problem doesn't seem to be reproducible. The reason why only certain keyboard layouts trigger this particular behavior is obscure to me at the moment, but somehow I believe this has to do with the DevTools appearing and disappearing, thereby confusing Chromium's input events. (@zcbenz: maybe you have some ideas on what's triggering this behavior?)

I think this wasn't caused by a recent Electron upgrade, but rather to the way we have changed Atom DevTools interaction: in the past, this was asynchronous but it got changed to be sync during the `AtomEnvironment` refactoring. I switched back to using an asynchronous approach, so that our keybinding/commands event handlers have the chance to fully execute without waiting for DevTools to be opened/closed.

I _think_ we were using a sync version because [these lines of code](https://github.com/atom/atom/blob/master/src/atom-environment.coffee#L672-L674) need to be executed in succession, so that the javascript code can be run when DevTools are already open. It turns out that, before these changes, the console wasn't getting shown if DevTools were closed because we still have to wait until the `devtools-opened` event gets triggered. This PR fixes also this problem by implementing a Promise-based API on top of Electron DevTools API.

/cc: @nathansobo @atom/feedback
",1767,True,en,0
9773,3,0,0,Internals,maxbrunsfeld,2015-11-24T18:59:53Z,37,14,2,0,"Includes #9772
",15,True,en,0
9772,1,2,0,Externals,scv119,2015-11-24T19:00:00Z,10,11,1,0,"This addresses issue: https://github.com/atom/atom/issues/9641
We solve that bug by customizing Error.prepareStackTrack, where we save the raw stack into error.rawStack field.

Tested following in Atom.app console:

```
var e = new Error();
e.stack
> ""Error
    at <anonymous>:2:9
    at Object.InjectedScript._evaluateOn (<anonymous>:904:140)
    at Object.InjectedScript._evaluateAndWrap (<anonymous>:837:34)
    at Object.InjectedScript.evaluate (<anonymous>:693:21)""
e.getRawStack()
> [CallSite, CallSite, CallSite, CallSite]
var e = new Error()
e.getRawStack()
>[CallSite, CallSite, CallSite, CallSite]
e.stack
>""Error
    at <anonymous>:2:9
    at Object.InjectedScript._evaluateOn (<anonymous>:904:140)
    at Object.InjectedScript._evaluateAndWrap (<anonymous>:837:34)
    at Object.InjectedScript.evaluate (<anonymous>:693:21)""
```
",841,False,en,0
9748,2,5,0,Externals,fscherwi,2016-05-05T21:48:48Z,1,1,1,165,"Upgrade pathwatcher, which has no API-changes and better support for UNIX-like systems!
",88,True,en,0
9730,4,15,4,Internals,zeke,2015-12-03T22:20:17Z,26,2,3,12,"This updates the version from 1.2 to 1.3 in the README and CONTRIBUTING docs.

http://contributor-covenant.org/version/1/3/0/
",126,True,en,0
9729,34,7,5,Internals,joshaber,2015-11-30T21:00:30Z,43,3,5,9,"Upload releases to a bucket separate from Releases.

This is a step toward fixing #9658.
",89,True,en,0
9711,6,5,0,Internals,as-cii,2015-11-20T16:42:28Z,14,2,3,0,"To understand if an object was a `TextEditor`, we previously suggested users to check for the existence of some of its methods. It turns out that this approach could lead to issues like https://github.com/atom/autocomplete-plus/issues/614, caused by checking for the wrong methods.

The alternative approach herein proposed tries to solve this problem by exporting an `::isTextEditor` function in `exports/atom.coffee`. This allows us to not export the internal `TextEditor` constructor while still letting user to understand whether a given object is a `TextEditor` or not.

I am going to open a PR that makes use of this new function in `autocomplete-plus`, where the problem first appeared, and search for other spots where we could use it.

/cc: @nathansobo @maxbrunsfeld  
",778,True,en,0
9709,2,4,1,Internals,as-cii,2015-11-20T17:24:33Z,19,1,3,0,"Fixes #9649

There was a subtle problem with an `if` statement that went overlooked when implementing the new measurement strategy which caused the first screen row to be ignored when computing content width if that row was both hidden and the longest one.

This PR fixes it and adds a spec to prevent this from happening in the future.

/cc: @abe33 @nathansobo 
",363,True,en,0
9687,15,2,0,Internals,maxbrunsfeld,2015-11-30T23:53:37Z,332,47,23,12,"#### The Problem

In order to interoperate with the deserialization of the Atom workspace, there are some APIs that packages have to call as soon as they are loaded (as opposed to inside of their `activate` method):
- `atom.views.addViewProvider`
- `atom.deserializers.add`

This forces Atom to load all packages' main modules at an early point in startup, even though many packages can be _activated_ lazily. This allows packages to affect the app even if they are disabled, and may reduce our ability to optimize startup time.
#### The Proposed API Change

This PR will add 3 new optional fields to packages' `package.json` files:
- `configSchema` - an object specifying the package's config schema
- `deserializers` - an object whose keys are deserializer names, and whose values are paths to files that export deserialization functions
- `viewProviders` - an array whose values are paths to files that export view-providing functions. These will need to work a little bit differently than normal view providers, because they can't be specified in relation to a particular model constructor. Maybe they will just be functions that return `null` if they do not apply to the given model.

It will also add a deprecation warning when packages accesses the `atom` global at load time.
#### Changes to Package Loading

When packages use the new `package.json` fields, we can defer loading any of their code until it is used, because we can know that there is no reason for them to run code at load time.
- The main module will be loaded when the package is activated.
- View providers will be loaded when either the package is activated.
- Deserializers will be loaded when `deserialize` is called with one of the specified deserializer names.

Once the deprecation period is over, we can use this approach for all packages.
#### Todo
- [x] Respect the 3 new fields in package.json.
- Use new fields to optimize package loading
  - [x] If a package has `configSchema`, `viewProviders`, or `deserializers`, don't load its main module until it is activated.
  - [x] Don't load a package's view providers until either it is activated or one of its deserializers is used.
- [x] Remember which packages use the atom global at require time, and for those that don't, don't require the main module until they are activated.

/cc @nathansobo
",2332,True,en,0
9684,1,0,0,Internals,maxbrunsfeld,2015-11-19T00:04:24Z,4,11,1,0,"Closes https://github.com/atom/atom/issues/9613
",48,True,en,0
9681,1,0,0,Internals,nathansobo,2015-11-18T18:58:58Z,4,3,1,0,"Opening on behalf of @maxbrunsfeld. Fixes #9567

The current shim for that event has a missing event argument
",110,True,en,0
9672,2,5,0,Internals,nathansobo,2015-11-18T19:06:02Z,28,33,8,0,"Fixes #9574

Previously, we were storing the project directory paths as the `initialPaths` key in load settings, which were accessed in the browser process by reading the URL hash. However, this URL hash was not always available, subjecting us to timing issues when opening multiple files in the same folder in rapid succession.

We now store the project directory paths directly on AtomWindow instances on creation, then RPC changes from the render process to the browser process with a custom code path.

Shout out to :airplane::finnadie:‚Äôd @as-cii on this for pairing with me.

@izuzak @amytruong This changes browser process code on which test coverage is extremely thin. If you could help test different aspects of opening stuff with Atom once this lands on `beta`, that would be super helpful.
",802,True,en,1
9670,3,8,0,Externals,50Wliu,2015-12-03T23:35:57Z,0,26,2,15,"Remove the `create-shortcut` task (reasoning is below).
",56,True,en,0
9668,1,1,0,Externals,50Wliu,2015-11-26T02:39:54Z,1,0,1,7,"Helps get builds that actually change code started faster.  For example, I'm waiting on Travis to run my Electron PR, and right now it's waiting on 3 documentation-only PRs before it.

If this gets merged I'll also propose the same to atom/electron, since that seems to attract more documentation PRs :).
",305,True,en,0
9665,1,0,0,Internals,nathansobo,2015-11-18T00:46:25Z,18,4,2,0,"These are throwing exceptions when we destroy the global environment. We're getting away with it because we've already serialized state, but it's still not good.
",162,True,en,0
9664,1,0,0,Internals,nathansobo,2015-11-18T00:46:21Z,1,2,2,0,"Fixes #9600

This ensures that package-defined deserializers work. Tried to test it, but our global environment is still a pretty tangled mess and the tests ended up feeling like they had negative value. We really need to refactor at this layer.
",246,True,en,0
9655,2,0,0,Externals,50Wliu,2015-11-17T22:35:06Z,7,7,2,0,"v0.101.0 adds proper highlighting to methods and properties.

Requires core spec changes.
",90,True,en,0
9654,7,7,0,Internals,thedaniel,2015-11-19T15:39:30Z,55,2,5,1,"_This is just a spike, the hash probably needs more stuff in it (node version, etc), just curious how it will interact with Travis_

Just opening this PR to kick off a couple Travis builds as it's the simplest way to test this change. Basically, are now using their container infrastructure which allows caching, but `script/cibuild` manually removes `node_modules` before running anyway. This just writes a sha into node_modules based on package.json and process.platform that prevents us from wiping it out of the build succeeds & the deps didn't change.
",557,True,en,0
9642,4,3,0,Externals,colllin,2016-03-01T03:32:49Z,28,5,2,104,"Before:

![before](https://cloud.githubusercontent.com/assets/185923/11204338/0318921e-8cbb-11e5-824c-39e1c72b3a8e.gif)

After:

![after](https://cloud.githubusercontent.com/assets/185923/11204340/09fa03b0-8cbb-11e5-8423-26c2dc6279e6.gif)
",239,True,en,0
9636,3,5,0,Externals,DouweM,2015-11-21T00:55:38Z,60,41,5,4,"I have two files, `app/services/notes/create_service.rb` and `app/services/issues/create_service.rb`.

Right now it's impossible to find which is which using either the window or tab title:

<img width=""851"" alt=""screen shot 2015-11-16 at 20 16 02"" src=""https://cloud.githubusercontent.com/assets/159434/11192012/ec039e28-8c9e-11e5-88e3-c9064d4bc078.png"">

<img width=""844"" alt=""screen shot 2015-11-16 at 20 16 10"" src=""https://cloud.githubusercontent.com/assets/159434/11192011/ebfe696c-8c9e-11e5-9da7-abb5c79f27c5.png"">

With these changes, it is:

<img width=""870"" alt=""screen shot 2015-11-16 at 20 18 28"" src=""https://cloud.githubusercontent.com/assets/159434/11192086/449feaa0-8c9f-11e5-8606-958d0bc146a4.png"">
<img width=""872"" alt=""screen shot 2015-11-16 at 20 18 36"" src=""https://cloud.githubusercontent.com/assets/159434/11192085/449c3860-8c9f-11e5-9562-44e944995b82.png"">

Both now use `<item>::getLongTitle` which delegates to `TextEditor::getUniqueTitle` in the case of `TextEditor` items.

Besides this, `TextEditor::getUniqueTitle` was modified to match Sublime Text's behavior, where `features/index.html`, `features/main/index.html` and `contact/index.html` will show as `index.html ‚Äî features`, `index.html ‚Äî features/main` and `index.html ‚Äî contact` rather than `features/index.html ‚Äî features`, `features/.../index.html` and `features/index.html`. With the original implementation, the difference between the first two would still be difficult to spot, and the actual filename could be pushed out of the tab if the directory names were especially long.

PS. I used em-dashes rather than 'normal' dashes since this was developed in conjunction with #9620.
",1681,True,en,0
9633,2,0,2,Internals,izuzak,2015-11-23T16:46:14Z,55,0,1,6,"Similar to https://github.com/atom/atom/pull/9333 which added a section on reporting bugs, this adds a section on suggesting features.

@atom/feedback @atom/issue-triage As always, I'd appreciate your feedback. If you can think of anything else that might be helpful here -- please let me know. :koala: 
",304,True,en,0
9627,59,47,6,Externals,50Wliu,2016-02-16T22:08:22Z,259,223,31,92,"Figured I'd get this started and get some more experience with the core atom code, as I'm pretty sure lots of things will need to be changed this time.

https://github.com/atom/electron/releases/tag/v0.35.0
https://github.com/atom/electron/releases/tag/v0.36.0

Fixes #9534
Fixes #9616
Fixes #9901
Fixes atom/tree-view#666
# TODO:
- [x] Fix core specs failing almost instantly with no output
- [x] Fix specs randomly hanging - at least, they didn't hang in the last build.
- [x] atom/tabs#238
- [x] Fix notifications specs that rely on `executeJavaScriptInDevTools`...kinda?  Not sure if I actually fixed the underlying deprecation or not.
- [x] Attempt to update to Electron v0.36.0 - in progress
  - [x] Fix failing specs on Mac (https://github.com/atom/atom/pull/9627#issuecomment-166756294)
  - [x] Remove `ipc.sendSync()` calls on startup
- [ ] Test for and fix regressions
# Regressions:
- [x] Opening a new tab no longer works
- [x] Adding a project folder does nothing through the context menu or file menu
- [x] Adding a project folder through the keyboard shortcut/command palette opens up the folder chooser but doesn't actually add the new folder
- [x] Open Your ... menu items are all broken, even when executed through the command palette
- [x] Open File does not actually open the chosen file
- [x] Help -> About Atom does nothing
- [x] Open Settings does not work through the file menu
- [x] ~~Opening Settings or any other file that uses a URI will cause a fake folder to appear in the Tree View (eg `config`, `init-script`) and `Settings - atom://config` or similar to show up in the titlebar.  Reproduce by using a new window.~~ - also an issue on master (tested on f6da4a9139bd08b4b89e85203caf20a4af72d195)
- [x] On 0.36 - menu mousedown effect is not removed when switching menus by hovering over to a new one (atom/electron#3964)
- [x] Closing the window when Atom is launched using `atom --foreground` yields an error:

```
Error: Object has been destroyed
    at Error (native)
    at AtomWindow.module.exports.AtomWindow.getLoadSettings (file:///C:/Users/user/Documents/GitHub/atom/src/browser/atom-window.coffee:91:8)
    at AtomApplication.module.exports.AtomApplication.saveState (file:///C:/Users/user/Documents/GitHub/atom/src/browser/atom-application.coffee:452:34)
    at EventEmitter.<anonymous> (file:///C:/Users/user/Documents/GitHub/atom/src/browser/atom-application.coffee:211:8)
    at emitOne (events.js:77:13)
    at EventEmitter.emit (events.js:169:7)
    at AtomApplication.module.exports.AtomApplication.removeWindow (file:///C:/Users/user/Documents/GitHub/atom/src/browser/atom-application.coffee:104:13)
    at BrowserWindow.<anonymous> (file:///C:/Users/user/Documents/GitHub/atom/src/browser/atom-window.coffee:126:30)
    at emitOne (events.js:82:20)
    at BrowserWindow.emit (events.js:169:7)
```

The error occurs on the following line:

``` coffee
getLoadSettings: ->
    if @browserWindow.webContents? and not @browserWindow.webContents.isLoading()
      hash = url.parse(@browserWindow.webContents.getURL()).hash.substr(1)  # Here!
      JSON.parse(decodeURIComponent(hash))
```
",3133,True,en,2
9620,1,4,7,Externals,DouweM,2015-12-04T00:23:43Z,20,13,2,17,"On OS X, the convention is to use the em-dash as the segment separator in window titles, and to not include the app name: (The two items at the top are window titles)
<img src=""https://cloud.githubusercontent.com/assets/639601/5069962/6032658a-6e9c-11e4-9953-aa84006bdfff.png"" width=""341"">
## OLD

<img width=""488"" alt=""screen shot 2015-11-16 at 12 02 36"" src=""https://cloud.githubusercontent.com/assets/159434/11180302/f37325d8-8c59-11e5-9435-355aecac706d.png"">
<img width=""573"" alt=""screen shot 2015-11-16 at 12 03 00"" src=""https://cloud.githubusercontent.com/assets/159434/11180313/0ac7f024-8c5a-11e5-80b8-d0ae731cb78a.png"">
## NEW

<img width=""492"" alt=""screen shot 2015-11-16 at 11 57 31"" src=""https://cloud.githubusercontent.com/assets/159434/11180252/983be42a-8c59-11e5-8515-ed43ff71e4ba.png"">
<img width=""540"" alt=""screen shot 2015-11-16 at 11 57 59"" src=""https://cloud.githubusercontent.com/assets/159434/11180251/98387c22-8c59-11e5-9d71-556d733b8136.png"">
",966,False,en,0
9609,2,15,0,Externals,DouweM,2015-12-04T17:18:17Z,8,0,3,18,"Title says it all!

<img width=""234"" alt=""screen shot 2015-11-15 at 20 51 23"" src=""https://cloud.githubusercontent.com/assets/159434/11170686/c1044de4-8bdb-11e5-94fd-e8c2e31c03a7.png"">

Closes https://github.com/atom/atom/issues/3935
",234,True,en,0
9607,2,18,2,Externals,DouweM,2015-11-20T17:41:57Z,26,12,4,4,"On OS X, Command-W is expected to close the current window, unless the current window has tabs (Safari, Chrome, Finder), in which case it will close the current tab, until only one is left, in which case it closes the entire window (and thus also the tab).

Currently in Atom, Command-W will close every pane item in the current pane, then the current pane, and so on until every pane is empty, which makes sense since pane items and panes ~ tabs. However, when only the empty root pane is left, which the user experiences as there being no panes left at all, hitting Command-W will not close the window, but will instead have no effect at all. To actually close the window, one needs to either manually hit the red close button in the upper left corner or the window, choose ""Close Window"" in the File menu or use the Cmd-Shift-W shortcut, all of which break the OS X UX contract.

With this PR, Command-W will behave exactly as it does right now, with one exception: when only the root pane is left, Command-W closes the entire window.

Hitting Command-W with only one pane item ~ tab open will NOT close the window, which is inconsistent with tabbed web browsing but makes more sense for a text editor.
",1206,True,en,0
9606,1,7,0,Externals,DouweM,2015-12-01T01:15:32Z,8,0,1,15,"I was getting annoyed by Atom missing this common OS X feature. 

It's especially useful when you have multiple spaces (desktops) with Atom already active on a different one than you are on currently. Currently, getting a new Atom window in this space takes 5 steps:
1. Click the dock icon, which would move you to the other space where Atom was already active
2. Choose ""New Window"" in the File menu (or use the Command+Shift+N shortcut)
3. Toggle Mission Control by hitting F3 or swiping up with the configured number of fingers
4. Drag the Atom window from the current space to the one where you wanted it
5. Switch back to the space you were on originally

Now, it only takes 2:
1. Right-click the Atom icon
2. Choose ""New Window""

<img width=""213"" alt=""screen shot 2015-11-15 at 19 52 36"" src=""https://cloud.githubusercontent.com/assets/159434/11170443/bfa18400-8bd4-11e5-8c1e-ac2c09c293b0.png"">
",901,True,en,0
9585,1,1,0,Externals,50Wliu,2015-11-14T00:17:24Z,3,0,1,0,"Allows Windows users who build Atom to conveniently type `apm` in the console just as they would for `atom`.

/cc @raelyard @joefitzgerald @kevinsawicki 
",154,True,en,0
9575,2,1,2,Internals,as-cii,2015-11-13T18:07:11Z,3,2,2,0,"Fixes #9189 

After the changes in #8968, `ThemeManager::isInitialLoadComplete` [was always being set to true](https://github.com/atom/atom/blob/master/src/atom-environment.coffee#L185-L186), whereas in the past we used to set it only after all the theme packages had been activated.

How does this relate to scrollbars? When restoring the previous state we attach the workspace along with the needed `TextEditorElement`s. When `TextEditorComponent` gets instantiated, it uses `isInitialLoadComplete` to decide whether it should listen to `ThemeManager::onDidChangeActiveThemes`, which is what triggers `::refreshScrollbars` after e.g. `one-dark-ui` loads.

Since `::isInitialLoadComplete` was true before the themes had the chance to actually being loaded, we weren't refreshing scrollbars at all, thus not allowing webkit to apply the needed stylesheets (when we refresh the scrollbars we explicitly trigger a reflow to let Chrome handle stylesheets correctly).

This PR changes the existing behavior so that we mark the initial theme load as complete only in test mode (through a configurable option).

/cc: @nathansobo @atom/feedback 
",1139,True,en,1
9554,4,24,17,Externals,didrocks,2016-04-06T20:29:32Z,105,6,6,145,"Now that Atom has a relocable/portable config directories and different channels, it makes sense to have a way to distribute an archive on Linux (as suggested on bug #7102) containing latest available code for each channels.

This has two advantages:
- this will enable (in a later step) to enable auto-upgrade to follow multiple channels (optionally in parallel in different directories). We can even think giving a way for people to switch between channels as needed (given the user config stay backward compatible). I'm happy to work on those 2 problematics after/if this PR is merged at some point.
- if all dependencies are installed in the distribution, the atom installation is then just a question of extracting an archive, requiring non root permission contrary to the .deb or .rpm packages.

We can then integrate this archive to be downloaded to some tools like Ubuntu Make (https://github.com/ubuntu/ubuntu-make/issues/6).

We generate a .tar.gz compressed archive (we could switch to a more performant .tar.xz, but the first format is more widespread and usual). I did add the `mktar` to the `CI task` (I saw the rpm wasn't in there, so I guess, it's only running on an Ubuntu machine) and tested it. I did add the task as well to `upload-assets`, but of course, I couldn't test it ;) The changes there are though minimal, but I can modify what's necessary as needed.

As _version_ contains _upstream version + channel name_, I didn't change anything in the naming of the archive publication, and the folder in archive contains thus an uniquely defined build.

Of course, the resulting archive is linked against the libraries available in the builder version. mktar is run where the .deb is built, which is, I guess, the latest ubuntu LTS. I tried the built archive on 14.04 LTS, 15.04, 15.10 and xenial (dev version), and everything is working as expected. If this doesn't work on other distros (which, looking at the deps, seems unlikely and we already only have one deb for debian/ubuntu and one rpm for fedora/opensuse‚Ä¶), we can build multiple archives. But I propose we starts with this one.

I'm happy to do any changes that you feel are necessary!
",2170,True,en,0
9539,1,7,0,Internals,simurai,2015-11-17T13:29:15Z,116,0,1,5,"This PR adds a few more file extensions to match all languages bundled with Atom.

Before

![screen shot 2015-11-11 at 11 07 26 am](https://cloud.githubusercontent.com/assets/378023/11081983/b9f5052c-8864-11e5-83b4-cce677e3779c.png)

After

![screen shot 2015-11-12 at 8 28 51 pm](https://cloud.githubusercontent.com/assets/378023/11117298/072f765c-897c-11e5-8548-518956f7c1e2.png)

Closes #9518
",396,True,en,0
9529,2,2,0,Internals,as-cii,2015-11-11T19:02:36Z,38,3,2,0,"Fixes #9525 

/cc: @izuzak @atom/feedback 
",43,True,de,0
9528,1,2,0,Externals,efatsi,2015-11-11T23:14:08Z,13,1,3,0,"Activate the last tab on pane on cmd / ctrl + 9 shortcut.

Closes #6609.

Noticed work for this was started on #8557 but never finished. This adds the functionality and accompanying spec.
",188,True,en,0
9527,3,1,0,Externals,joefitzgerald,2015-11-12T23:06:41Z,12,1,2,1,"- Fixes #8692 
- Fixes #8313

This PR fixes merge conflicts for #8692. #8692 fixes a bug with the following scenario:
- Open a file (e.g. `sample.js`)
- Close Atom
- Open Atom (observing that `sample.js` is open)
- A package with an activationHook of `language-javascript:grammar-used` is not activated

LGTM on the original PR.
",329,False,en,0
9524,7,2,4,Internals,as-cii,2015-11-12T08:26:27Z,86,11,3,0,"Refs: #9508 

This method is supposed to wrap asynchronous code within a `Config` transaction. It accepts a `callback` which must return a `Promise`: when this resolves or gets rejected (or the `callback` throws an error) we complete the transaction.

I am not super happy with the name I've chosen for this API, as it would have probably been better to follow Node's conventions (i.e. rename `::transact` to `::transactSync` and name the new one `::transact`): unfortunately that method name was already taken and it's part of the public API.

Another thought was to include this feature right inside the existing `::transact` method: although possible, the resulting method would need to conform to two different contracts based on the return type of `callback`, which feels somewhat misleading for clients. In the end having a separate method felt somewhat cleaner.

Feedback super welcome! :bow:  

/cc: @nathansobo @joshaber @atom/feedback 
",946,True,en,0
9514,2,2,0,Internals,kevinsawicki,2015-11-10T23:06:42Z,11,2,2,0,"Previously an uncaught exception was thrown if `core.packagesWithKeymapsDisabled` was set to an array that included a package name that wasn't loaded, such as a package that was uninstalled.

Closes atom/settings-view#695
",222,True,en,0
9513,9,9,2,Externals,Ingramz,2015-11-12T23:12:27Z,16,12,4,2,"Fixes atom/atom#2734

This is a pull request version of https://github.com/atom/atom/issues/2734#issuecomment-155230824 in order to work together on solving the currently unfair grammar scoring system. The main problem with the current system is that it gives a higher score to HTML grammar for any file that begins with HTML doctype, but the file might be using PHP or some other (templating) language that utilizes HTML syntax (with a different file type, eg `php`).

@nathansobo suggested adding an option to fall back to using the old system in case the new one breaks something, but I am not sure how to do that exactly. Also another question would be whether this transition period is needed at all, because all it ""breaks"" right now is grammar selection for files, for which there is a known file type, but the first line is matched from some other grammar. A fix for that case would be just adding the file type via user configuration, to override the known type from the other language.
",996,True,en,0
9508,3,5,0,Internals,as-cii,2015-11-11T08:10:56Z,16,8,2,0,"When activating a package, we load its settings asynchronously. Then, as soon as Node is done with IO, it calls us back with the content of those files, at which point we call `ScopedProperties::activate` to transfer those settings into our `Config` instance.

When setting a key in our `Config`, we emit an event that notifies attached listeners that something has just changed: the implications of this are pretty important, as there is a remarkable amount of operations we need to do in order to notify those clients, such as comparing the newly set key with the previous one, etc. Although the current implementation could be somewhat improved in terms of performance, it handles the configuration semantics pretty smartly, which means that, whenever setting something in the configuration, it's better to emit as little events as possible. For this reason, before the changes introduced with this PR, we were [wrapping packages activation with a call to `Config::transact`](https://github.com/atom/atom/blob/46665c1f8b86664f9431d66cfd9e291bdc0689cf/src/package-manager.coffee#L419-L423).

The problem with this approach, however, is that it doesn't play well with the asynchronous nature of loading the configuration, as the transaction will end as soon as we've finished iterating over the packages to activate (i.e. _before_ `ScopedProperties::activate` has the chance to execute). This means we emit way more events than we really should, paying an extra amount of time during startup:

![before](https://cloud.githubusercontent.com/assets/482957/11060723/54d06bae-87a2-11e5-9749-9103bcd74e67.png)

The breakdown here is the following:
- Parsing CSON: `~ 39.2ms`
- Activating Grammars: `~ 71.0ms`
- Activating Settings: `122.4ms` + `37.9ms`
- **Total: 294.9ms**

For this reason, we have introduced a `Config::beginTransaction` and `Config::endTransaction`, which are aimed to handle the asynchronous scenario in a more performant manner:

![after](https://cloud.githubusercontent.com/assets/482957/11060724/551a89b4-87a2-11e5-9a4d-43c11afed1a6.png)

We can observe a a `~ 125ms` speedup, as this approach allows us to emit just a minimal amount of events, thereby dramatically reducing the overhead of loading setting files.

For the future, I think it's also worth taking a look at how we might improve CSON (which, for bundled packages, is actually JSON) parsing and grammars activation, in order to reduce those remaining `169.7ms` to the minimum.

/cc: @atom/feedback @nathansobo @maxbrunsfeld
",2507,True,en,0
9507,3,1,0,Internals,as-cii,2015-11-10T09:56:31Z,3,3,1,0,"Ref.: https://github.com/atom/snippets/pull/182
Ref.: https://github.com/atom/settings-view/pull/694
Ref.: https://github.com/atom/autocomplete-snippets/pull/60

This PR just bumps snippets, settings-view and autocomplete-snippets, in order to give the snippets lazy load approach a spin on Travis. I am going to :ship: this as soon as the build gets :green_heart:.

/cc: @atom/feedback @nathansobo 
",400,False,en,0
9501,3,0,0,Internals,kevinsawicki,2015-11-09T21:37:14Z,4,2,2,0,"This adds roles to the `Services`, `Window`, and `Help` menus to re-enable them after a recent Electron upgrade.

Closes #3204
Closes #9408
",140,True,en,0
9490,1,3,0,Externals,aki77,2015-11-10T22:00:06Z,1,1,1,2,"When a package having `activationHooks` exists, `did-activate-initial-packages` is not called.
",95,True,en,0
9485,1,6,6,Internals,nathansobo,2015-11-07T23:02:34Z,6,0,1,0,"Throttling in test windows is annoying when tests run interactively, and _seems_ to cause issues with animation frames not firing even in headless tests, though it‚Äôs difficult to fully confirm since this issue is intermittent.

Refs atom/electron#3225
/cc @zcbenz 
",267,True,en,1
9484,1,1,0,Externals,50Wliu,2015-11-07T20:37:31Z,0,1,1,0,"This option was removed in Electron v0.33.9, and we're on v0.34.0 now (soon to be v0.34.3).
",92,True,en,0
9481,1,1,0,Externals,joefitzgerald,2015-11-07T20:38:05Z,1,1,1,0,"- Fixes Windows Overflow On `process.exit` (Causing apm To Always Fail) https://github.com/atom/electron/releases/tag/v0.34.3
- Fixes Excessive Console Logging On Windows: https://github.com/atom/atom/issues/8957 / https://github.com/atom/electron/releases/tag/v0.34.1
",269,False,en,0
9480,2,4,2,Internals,simurai,2015-11-24T08:59:31Z,21,0,1,16,"This PR makes the icons in small and extra small buttons a bit smaller too. Fixes #8412

Before:

![screen shot 2015-11-07 at 9 52 47 pm](https://cloud.githubusercontent.com/assets/378023/11015248/f0e8f7e6-8599-11e5-823b-c1175377df8d.png)

After:

![screen shot 2015-11-07 at 9 50 42 pm](https://cloud.githubusercontent.com/assets/378023/11015249/f817b6d8-8599-11e5-92e4-3061734e3fef.png)

Screenshots are with core styles only (no theme).
",440,True,en,0
9477,1,12,6,Externals,joefitzgerald,2015-11-11T17:35:28Z,86,25,12,4,"## Done
- [x] Add Windows CI via Appveyor
- [x] Pave the road for releases to be generated from Appveyor (Windows)
- [x] Make various improvements to script/cibuild and build/Gruntfile.coffee
- [x] Add caching of `~/.atom/.npm`, `~/.atom/.apm`, and `~/.atom/.node-gyp` on Appveyor
## Future
- [ ] Pave the road for releases to be generated from Travis (OSX / Linux)
- [ ] Provide a pathway for Node v4.2.1 / apm 1.5.x, but do not make them the default for internal Atom CI
- [ ] Add caching of `~/.atom/.npm`, `~/.atom/.apm`, and `~/.atom/.node-gyp` on Travis
- [ ] Make remoteReleases synchronization faster
- [ ] Add caching of electron
- [ ] Add caching of node in `https://github.com/atom/apm/blob/master/script/download-node.js`
- [ ] Create zip archive for Windows
- [ ] Add artifacts explicitly instead of all of `atom-build`
- [ ] Disable `0.10.35` builds on Windows (we now know they work)
- [ ] Add `signtool` tool
- [ ] Add encrypted ATOM_ACCESS_TOKEN to .travis.yml, with scopes necessary for release upload
- [ ] Fix .deb package generation
- [ ] Add encrypted signing keys for Travis and Appveyor, with corresponding encrypted variable
",1150,False,en,0
9476,1,2,0,Internals,nathansobo,2015-11-09T21:57:17Z,2,1,1,2,"Otherwise dev mode isn't enabled when running specs interactively, which can have unintended consequences.
",107,True,en,0
9471,2,10,0,Internals,joshaber,2015-11-09T14:22:22Z,2,2,1,2,"Fixes #9339.

A diff of the libgit2 changes: https://github.com/libgit2/libgit2/compare/21e7015ca3425e396c2b7cc03ac67e297a646c91...db1edf91e9ba9e82e6534c445008703766b5a6da
",172,True,en,0
9468,2,2,5,Internals,as-cii,2015-11-06T16:44:33Z,6,2,2,0,"_All the benchmarks were performed by opening `src/text-editor.coffee` on startup_.

In the previous implementation we were constantly querying `TextBuffer` for folds whenever the grammar on `TextEditor` changed:

![screen shot 2015-11-06 at 14 29 22](https://cloud.githubusercontent.com/assets/482957/10998082/d9b7339c-8492-11e5-8f34-014d780743f2.png)

Indeed, when changing the grammar we issue a call to `LanguageMode::unfoldAll` which tries to get a fold for each row in the buffer. 

![screen shot 2015-11-06 at 14 33 40](https://cloud.githubusercontent.com/assets/482957/10998152/6ad7aa82-8493-11e5-9ac7-6674ee1a53f1.png)

This happens also on startup because grammars are loaded after a `TextEditor` instance gets created. Moreover, user's perceived responsiveness gets worse as more files (or larger files) need to be opened/restored because we change the grammar for every instance of `TextEditor` as soon as the packages' grammars are loaded and a new grammar is recognized.
### Solution

With this PR, instead of issuing a `findMarker` call to `TextBuffer` for each buffer row, we just get all the folds intersecting the whole buffer and destroy them in reverse order. This is how the first graph looks like after the improvements:

![screen shot 2015-11-06 at 13 22 04](https://cloud.githubusercontent.com/assets/482957/10998210/d2316e20-8493-11e5-9458-9c58ab169d3c.png)

Calling `::unfoldAll` is almost instantaneous now and for a single ~3000 lines file this saves almost `150ms`. :racehorse: :racehorse: :racehorse: 

In the same code path there's still some work we could do to make loading settings faster, as it would seem like we spend a considerable amount of time in just setting keys/values in `Config` (at least during startup). Nevertheless, this should result in a significant responsiveness increase when users boot up Atom with some open files.

/cc: @nathansobo @atom/feedback 
",1906,True,en,0
9452,1,1,0,Externals,svanharmelen,2015-11-05T14:57:24Z,1,1,1,0,,0,False,en,0
9445,4,0,0,Externals,50Wliu,2015-11-06T23:45:40Z,6,6,2,1,"0.99.0 contains large changes to how operators are tokenized, so I'm pretty sure it's going to break language-html and/or core specs.  Creating a PR to be on the safe side.

TODO:
- [x] Fix core specs
- [x] Fix markdown-preview specs
",234,True,en,0
9444,9,4,4,Internals,maxbrunsfeld,2015-11-11T17:58:05Z,202,83,5,6,"This PR adds the ability to manipulate a TextEditor's vertical scroll position at the model level, via a new method, `::setFirstVisibleScreenRow` method, which is marked as `Experimental` for the time being. It also un-deprecates `TextEditor::getFirstVisibleScreenRow`, making it possible to synchronously read the editor's vertical scroll position.

This was driven out by vim-mode's [`ScrollFullPage` commands](https://github.com/atom/vim-mode/blob/e1d1a3edbaa16b6010e688b07c6cb3b9cd5c95a9/lib/motions/general-motions.coffee#L454), which need to synchronously update the editor's scroll position.

I've refactored the presenter so that it doesn't store its own copy of the `scrollRow` and `scrollColumn` state, using the model instead as the source of truth for these concepts. As part of this effort, I refactored the way the presenter's `scrollTop` and `scrollLeft` are initialized; they're now computed based on the `firstVisibleScreen{Row,Column}` as soon as the necessary measurements (line-height and base-character-width) are assigned.

Refs https://github.com/atom/vim-mode/pull/906
",1093,True,en,0
9440,2,1,0,Externals,50Wliu,2015-11-04T22:29:28Z,11,4,3,0,"Fatal notifications created during package load/activation/etc. now contain additional package name metadata for use in the Notifications package.

Required for atom/notifications#100.

/cc @kevinsawicki @benogle 
",214,True,en,0
9426,53,7,0,Internals,nathansobo,2015-11-10T06:02:26Z,5959,4483,23,6,"This PR improves the responsiveness of find-and-replace and other marker-intensive tasks by adding a layer-oriented API for working with collections of related markers and upgrading to a new implementation of the marker index. Searching for `e` in `jquery.js` now blocks the UI thread for ~1 second instead of ~3.2 seconds. Inserting newlines in this file with the markers present now takes ~10 ms instead of ~35 ms.

I still need to make the changes to find-and-replace backwards compatible and merge them after merging these changes.
## API Changes
### Marker Layers

A huge problem with our existing implementation is that creating markers emits synchronous events to support existing packages and core APIs. We needed a way to opt out of these event handlers for high-volume use cases, and marker layers were a good way to do this.
- `TextBuffer`
  - `.addMarkerLayer({maintainHistory})` Creates and returns a `MarkerLayer` object. If `maintainHistory` is `true`, markers will be restored on calls to undo/redo.
  - `.getMarkerLayer` Retrieve a marker layer based on its id.
- `MarkerLayer` Some highlights:
  - `.markRange` Creates a marker.
  - `.getMarker` Gets a marker by id.
  - `.findMarkers` Queries the marker layer.
  - `.onDidUpdate` Called asynchronously whenever markers are created, updated, or destroyed. Can be used without being a drag on performance, but you'll have to re-query any state you're interested in between calls.
  - `.onDidCreateMarker` This is needed to support our current synchronous selection APIs, but it shouldn't be used on layers that will contain a large number of markers because it slows down insertion.
  - `.copy` Create and return a new marker layer with all the same markers.
- `TextEditor`
  - `.addMarkerLayer({maintainHistory})` Creates and returns a `TextEditorMarkerLayer`.
  - `.getMarkerLayer` Retrieve an editor-level marker layer based on its id.
- `TextEditorMarkerLayer` This is a wrapper around a buffer-level `MarkerLayer` object and shares the same id.
  - `.markBufferRange` Create a marker.
  - `.markScreenRange` Create a marker.
  - `.findMarkers` Query markers with the same API as `TextEditor.prototype.findMarkers`
### Marker Layer Decorations

Another huge source of slowness in find and replace is that we decorated each marker individually. Now that we have marker layers, we can decorate an entire layer in the same way, avoiding a ton of allocations.
- `TextEditor`
  - `.decorateMarkerLayer(layer, properties)` Accepts a `MarkerLayer` or `TextEditorMarkerLayer` and the same properties that `decorateMarker` takes. It creates a decoration for every marker in the layer based on these parameters. This won't work for custom gutter decorations or overlay decorations, but _will_ work for highlights, line, and line number decorations. Returns a `LayerDecoration`.
- `LayerDecoration`
  - `setPropertiesForMarker(marker, properties)` This can be used to override the properties of a particular marker in the layer. We needed this to support the ""current result"" in find and replace without major changes to the package code. Pass `null` to clear the override.
## New Marker Index

![marker-binary-tree](https://cloud.githubusercontent.com/assets/1789/10924350/062ead24-823b-11e5-85ee-ffd1e77df82f.png)

This PR also incorporates a new binary-tree-based [marker-index](https://github.com/atom/marker-index), which replaces the previous b-tree-based index in text-buffer. It offers better and more predictable performance... about 33% faster on my insertion tests (from 1.6 second to 1 second) and an order of magnitude faster at splicing. 1 second is still too long to block the UI thread, so we may still need to background the index population. I would like to experiment with a C++ implementation and see what it buys us, since it's a straightforward implementation that should be fairly easy to port.
## Performance Improvements

Now on to the good part... the improvement. This shows results from 3 implementations. The current version, marker layers with the old index, and marker layers with the new index.
### Without marker layers (current implementation)
#### Inserting ~20k markers:

~3.2 seconds

<img width=""1143"" alt=""screen shot 2015-11-03 at 1 20 25 pm"" src=""https://cloud.githubusercontent.com/assets/1789/10922006/b26d99d2-822d-11e5-87fa-ff24243d1b5d.png"">
#### Inserting newlines

~35 ms per keystroke

<img width=""1098"" alt=""screen shot 2015-11-03 at 1 20 11 pm"" src=""https://cloud.githubusercontent.com/assets/1789/10922023/c65e319a-822d-11e5-90e0-176d6016d2f7.png"">
### Old marker index
#### Inserting ~20k markers:

1.6 seconds

<img width=""1239"" alt=""screen shot 2015-11-03 at 11 48 37 am"" src=""https://cloud.githubusercontent.com/assets/1789/10919754/61b5d024-8221-11e5-9155-4b5f2f17bbcf.png"">
#### Inserting newlines

~30 ms per keystroke

<img width=""1229"" alt=""screen shot 2015-11-03 at 11 51 12 am"" src=""https://cloud.githubusercontent.com/assets/1789/10920772/deeb95ba-8226-11e5-8ffa-7c9497bd399e.png"">

Zooming in, the newline insertion contains 3 ~5ms calls to `MarkerIndex.prototype.splice`:

<img width=""1119"" alt=""screen shot 2015-11-03 at 12 21 51 pm"" src=""https://cloud.githubusercontent.com/assets/1789/10920873/633900a0-8227-11e5-9ab5-eedd594e6606.png"">
#### Memory consumed

36.2 MB

<img width=""777"" alt=""screen shot 2015-11-03 at 1 15 50 pm"" src=""https://cloud.githubusercontent.com/assets/1789/10921926/31b3e3fa-822d-11e5-9b00-1c48426ba481.png"">
### New marker index
#### Inserting ~20k markers

~1 second

<img width=""1232"" alt=""screen shot 2015-11-03 at 12 45 31 pm"" src=""https://cloud.githubusercontent.com/assets/1789/10921238/3a37de72-8229-11e5-9854-9e92223029e9.png"">
#### Inserting newlines

~7-10 ms per keystroke

<img width=""1010"" alt=""screen shot 2015-11-03 at 12 48 16 pm"" src=""https://cloud.githubusercontent.com/assets/1789/10921246/490c5342-8229-11e5-84c9-a77a58b685dc.png"">

Only 1 significant splice operation, 0.8ms.

<img width=""829"" alt=""screen shot 2015-11-03 at 12 52 55 pm"" src=""https://cloud.githubusercontent.com/assets/1789/10921321/d89cf606-8229-11e5-889a-c45636f52fac.png"">
#### Memory consumed

34.8 MB (not a huge savings)

<img width=""778"" alt=""screen shot 2015-11-03 at 1 13 42 pm"" src=""https://cloud.githubusercontent.com/assets/1789/10921946/4b5947a0-822d-11e5-984a-4a5402c41251.png"">
",6335,True,en,0
9422,2,5,0,Internals,kevinsawicki,2015-11-04T02:30:00Z,35,36,2,0,"/cc @raelyard 
",15,True,en,0
9420,14,0,0,Internals,kevinsawicki,2015-11-04T01:01:10Z,15,24,2,0,"Set `ATOM_HOME` env var in the render process based on the value from the load settings set via the main process.

This removes duplication of `ATOM_HOME` computation.

/cc @raelyard 
",184,True,en,0
9419,16,0,2,Internals,kevinsawicki,2015-11-04T01:40:53Z,46,10,3,0,"I'm porting this from #9229 and retargeting to master.

From @raelyard:

 This is an enhancement to Portable Mode PR #8442 to provide a command line parameter for Atom to automatically set up a Portable Mode directory (a .atom directory as a sibling to the directory containing the Atom executable).

This uses -p and --set-portable
as a straw-man example of what would be the desired parameter.

This copies the .atom home from the default location to the portable location, assuming someone who has been using Atom and wants to go portable would want to take with them what they have already installed/configured.  This may or may not be a good assumption.
",659,True,en,0
9383,1,3,0,Internals,as-cii,2015-11-02T17:04:45Z,37,7,2,0,"This commit fixes what seems to be a bug in Chromium. Fixes #9382.

Before:

![before](https://cloud.githubusercontent.com/assets/482957/10870600/1ecd96c8-80cf-11e5-98d2-a2d49d943363.png)

After:

![screen shot 2015-11-01 at 19 33 27](https://cloud.githubusercontent.com/assets/482957/10870616/75606470-80cf-11e5-8b9d-7b861e219e6f.png)

When measuring lines (and with a special character sequence), it could happen
that Range(0, 0). getBoundingClientRect().width reports a number greater than 0.
This seems to happen when the font size is smaller than 12px and it's probably
due to subpixel font scaling. To solve it we've explicitly included a guard
clause that prevents this problem to happen.

/cc: @nathansobo @50Wliu @thomasjo @atom/feedback  for :eyes: 
",760,True,en,0
9333,5,2,4,Internals,izuzak,2015-11-08T21:13:09Z,86,25,1,10,"This adds a section on reporting bugs to the contributing guide and removes the generic section on submitting issues. My plan is to add a section on submitting feature requests and sections on other types of ""issues"" and pull requests, so that we cover all the different types of contributions. I think that will be more helpful than a single generic section since it will allow us to provide specific advice for each type of contribution, and I also think users will find the right section easier.

The section on submitting bug reports is structured in three parts: what you should do before submitting a bug report, which information you should provide in a bug report, and a template for structuring the information. For the part on which information should be provided, I tried to structure this as a list, and bold key sections off each note so that it's easy to scan. I think it will be helpful to list all the questions we often ask when debugging issues -- sometimes that will help users figure out things on their own and provide more helpful reports, and it will allow maintainers to link to this section and say ""Please provide more information, as listed here"". 

@atom/feedback @atom/issue-triage As always, I'd appreciate your feedback. :honey_pot: Is there any other information we normally ask from users when debugging issues? How do you like the idea of providing a template here, and should some other questions/information be a part of it? 
",1462,True,en,0
9318,14,18,9,Internals,as-cii,2015-11-03T13:35:58Z,455,86,13,6,"This PR speeds up source code compile times by using a hacked version of the `vm` module (https://github.com/as-cii/cached-run-in-this-context).

We've been searching very hard for a way to make startup faster: the biggest low hanging fruit seemed to be `vm.runInThisContext` which, before this improvement, took more than `250ms-300ms`. That function is used inside `Module.prototype._compile` for, surprise, compiling the source code: although v8 compiler is quite fast already, our codebase has grown quite a lot and the more files we added, the worse the situation would get.

The snapshot approach tried in #9265 should have indirectly solved this, but it felt way too complicated to construct an `AtomEnvironment` inside the snapshot context. Instead, we are taking advantage of a v8 compiler feature that allows to speed up source code compilation by producing/consuming a cache blob. By using this mechanism, we have managed to change startup times from (without any tab open):

![screen shot 2015-10-28 at 11 51 42](https://cloud.githubusercontent.com/assets/482957/10786490/c2df5476-7d6a-11e5-8f77-e089911f33f8.png)

to:

![screen shot 2015-10-28 at 11 48 05](https://cloud.githubusercontent.com/assets/482957/10786493/c6248cfa-7d6a-11e5-85eb-b2e2563aec6f.png)

:tada: :tada: :tada:

There's still some aspect we could improve, such as where these cache blobs get stored: I used files as the storage mechanism, as it allows us to keep the code pretty simple, but they take ~40ms to get read. There are alternatives to this (e.g. asar), but I am not sure it would improve the situation that much: even a 50% improvement, would make this just ~20ms faster at the expense of making code a bit more complex.

Please, note that whenever DevTools are open, v8 seems to make this optimization a bit worse: if you, however, spawn Atom:
- via cmd;
- by running the executable;
- by reloading the window with DevTools closed;

You will notice the speedup. @zcbenz: any ideas why this happens? I guess this covers already 100% of the average use cases and won't matter to the end user, but if possible it seems to be still worth investigating.

After this lands, I will go on hunting other things that are slowing startup down: we feel like IO could be the main cause but we'll get a better picture after this improvement gets :ship:ped.

/cc: @atom/feedback @nathansobo 
",2371,True,en,1
9313,1,1,0,Externals,yakirac,2015-10-28T09:11:04Z,0,1,1,0,"Updated the documentation for onDidChange in config.coffee. The value is never returned on the object so the documentation was updated to reflect that. Should close https://github.com/atom/atom/issues/7918
",206,True,en,0
9283,1,1,0,Externals,Tyriar,2015-10-26T07:27:55Z,1,1,1,0,,0,False,en,0
9274,10,29,7,Internals,simurai,2016-02-01T21:01:34Z,136,22,6,100,"This PR adds a top and bottom bar to `atom-workspace`.

``` html
<atom-workspace class=""workspace"">
  <atom-panel-container class=""header""></atom-panel-container><!-- New -->
  <atom-workspace-axis class=""horizontal""></atom-workspace-axis>
  <atom-panel-container class=""footer""></atom-panel-container><!-- New -->
  <atom-panel-container class=""modal""></atom-panel-container>
</atom-workspace>
```

![atom-panels](https://cloud.githubusercontent.com/assets/378023/10159023/c0848db4-66d0-11e5-9cbe-fadbfa2bd110.png)

It allows packages to add `<atom-panel>`s that span across the whole width and not just above/under the editor.

The `status-bar` or `tabs` _could_ go on top and under the tree-view.

![screen shot 2015-10-24 at 3 15 51 pm](https://cloud.githubusercontent.com/assets/378023/10709881/519c7aa8-7a79-11e5-906f-79d4513a1218.png)

![screen shot 2015-10-24 at 3 04 02 pm](https://cloud.githubusercontent.com/assets/378023/10709883/5ce52e1e-7a79-11e5-8467-d69f6fd93144.png)
#### Todo
- [x] Change to flexbox
- [x] Add top/bottom bar elements
- [x] Add API
- [x] Add specs
#### Todo after merging
- [ ] Merge: https://github.com/atom/tree-view/pull/627
#### Packages that break or have issues
- [ ] [nuclide-file-tree](https://atom.io/packages/nuclide) (Scrolling is broken)
- [x] [tool-bar](https://github.com/suda/tool-bar/) (scrolling is broken) -> [PR](https://github.com/suda/tool-bar/pull/111)
- [x] [atom-chat](https://atom.io/packages/atom-chat) (Overflowing content, no scrolling. Fix: Use Flexbox, only scroll `chat-messages`) -> [PR](https://github.com/mertkahyaoglu/atom-chat/pull/7)
- [x] [youtube-pane](https://atom.io/packages/youtube-pane) (footer will cover the youtube panel). -> [PR](https://github.com/alexandruionascu/youtube-pane/pull/3)

Closes #8939
",1783,True,en,0
9268,2,9,0,Externals,thomasjo,2015-11-18T17:52:00Z,7,10,4,25,"This PR attempts to leverage the `ELECTRON_ENABLE_LOGGING` environment variable flag added to Electron in v0.34.1. Setting the environment variable enables `console.log` support in Electron, just as the `--enable-logging` application argument does.

I haven't tested my changes on Windows yet, so it'd be brilliant if someone (@50Wliu perhaps?) could quickly check if they work. Otherwise I'll boot up one of my Windows VMs later and give it a whirl.

Note that I tried setting this in various places in code, but it seemed that wasn't early enough in the application lifecycle, hence why I ended up setting the environment variable in the shell scripts. Also note that I'm setting the variable whenever `EXPECT_OUTPUT` is set which I feel is appropriate, but if someone disagrees, I can easily change it so that it's only set in the case of launching Atom in test mode.

/cc @atom/feedback 
",892,True,en,1
9260,1,0,0,Externals,fazlearefin,2016-01-26T18:57:09Z,1,1,1,95,"For Fedora 22+, `sudo dnf install atom.x86_64.rpm` will not work unless the pathname to the package is mentioned.
",114,True,en,0
9249,1,0,0,Internals,nathansobo,2015-10-22T15:40:26Z,26,6,2,0,"Fixes #7566
Fixes #2871
",24,False,en,0
9248,1,0,0,Internals,maxbrunsfeld,2015-10-22T00:59:36Z,6,2,1,0,"These fields are used by grunt-electron-installer. We need to parameterize
them based on the channel so Atom Beta and Atom can coexist on windows.

Fixes https://github.com/atom/atom/issues/9247
",195,False,en,0
9244,1,0,0,Internals,maxbrunsfeld,2015-10-21T18:29:38Z,7,7,2,0,"Fixes https://github.com/atom/atom/issues/9243
",47,True,en,0
9238,1,1,0,Internals,izuzak,2015-10-21T16:18:36Z,1,1,1,0,"Hopefully this closes https://github.com/atom/atom/issues/9233, see https://github.com/atom/atom/issues/9233#issuecomment-149674829.

cc @kevinsawicki @nathansobo
",163,True,en,0
9235,1,1,0,Internals,nathansobo,2015-10-21T02:54:35Z,4,4,1,0,"Fixes #9233

This makes atom --profile-startup work correctly even if Atom isn't running when the command is executed.

I accidentally left the commit on master which marked the previous PR (#9234) as merged. I force-pushed to master seconds after it happened to correct the issue, so I'm opening this again.
",309,True,en,0
9234,1,0,0,Internals,nathansobo,2015-10-21T01:51:55Z,4,4,1,0,"Fixes #9233

This makes `atom --profile-startup` work correctly even if Atom isn't running when the command is executed.
",121,True,en,0
9227,6,2,6,Internals,izuzak,2015-10-22T13:51:34Z,84,43,1,2,"This is the first step in improving our CONTRIBUTING guidelines so that it's more helpful to both users and maintainers. I'll split the work into separate pull requests as I work on them.

This pull requests changes the structure by introducing sections and also adds a section on Atom's project structure (packages). This section is mashup of @benogle's recent [blog post](http://blog.atom.io/2015/10/16/making-your-first-contribution.html) :sparkles:, [this forum post](https://discuss.atom.io/t/id-like-to-report-an-issue-request-an-enhancement-for-atom-where-on-github-do-i-do-that/19290) from @mnquintana :zap:, and the previous text we had on this in the guidelines.
I think this information is super-helpful for contributors and should live in this document.

[Rendered version](https://github.com/atom/atom/blob/iz-update-contributors-guide/CONTRIBUTING.md) for easier reading.

cc @atom/feedback @atom/issue-triage for :eyes: and :thought_balloon:. :bow:
",964,True,en,0
9222,2,0,0,Internals,as-cii,2015-10-20T15:44:03Z,42,0,5,0,"Refs: https://github.com/atom-minimap/minimap/issues/299

/cc: @nathansobo @abe33 
",83,True,xh,0
9218,1,1,0,Internals,maxbrunsfeld,2015-10-21T20:46:15Z,9,7,1,2,"Fixes https://github.com/atom/atom/issues/8766
",47,True,en,0
9213,250,85,58,Internals,thedaniel,2016-01-15T21:17:41Z,12134,43,129,88,"This is an experimental spike of an alternate GitRepository class that uses [nodegit](http://www.nodegit.org/) rather than [git-utils](https://github.com/atom/git-utils). We would love to speed up the responsiveness of various aspects of Atom (tree-view, etc) by doing more Git operations asynchronously, and it would also be nice to get out of the business of maintaining our own libgit2 wrapper.

Here are a few notes about the reasoning behind some decisions here:
- It follows the existing GitRepository API closely, changing everything sync to Promise-based async.
  - The assumption is that having a close mapping between the sync and aysnc APIs will make it less painful to refactor client packages.
  - I'm not 100% sure we should keep this design, so it's a tradeoff between design quality and incurred labor. Ideally we'll keep this private and experimental all the way until Atom 2.0 so that we can change it as we need to.
- The class is written in ES6, because Coffeescript, while lovely, is the past, and the community seems to have consensus on transpilers like babel.
  - This includes an .eslintrc, because I've found it extremely useful.
  - The spec is still in coffee because I thought it might be easier to just modify it as I go to make sure I had the same coverage on both classes, though at the moment I wish I'd run it through a coffee -> js converter first.
- I haven't done a lot of ES6 or constructed a Promise-based API for anything serious before, so I'm sure to misuse some APIs.
- We'll need to keep the sync GitRepository class around for backwards compat, so I haven't decided quite how to integrate this with the current provider system.
  - Perhaps we add a private method on the sync repo like `GitRepository.async` that returns the Promise for an async repo, so that internal callers can use async without changing anything in the `GitRepositoryProvider`?
- Documentation is sparse because I wasn't sure this was a good path to follow until today. I'll flesh it out more as I go.

cc @atom/core @orderedlist 
- [ ] Determine a good test case (even if manual / subjective) for git-related UI responsiveness
  - many simultaneous changes, check tree-view update?
  - simulate degraded disk performance / network drive?
- [ ] cf #9240 
",2271,True,en,0
9198,2,22,0,Externals,alexchandel,2016-02-10T19:53:54Z,10,1,2,115,"Fixes #8261 
Fixes #9147
",25,False,en,0
9192,3,1,0,Internals,nathansobo,2015-10-17T17:19:04Z,25,14,3,0,"This pull requests addresses a couple issues with #8968
- It fixes an issue where the `resourcePath` wasn't being correctly assigned for `devMode`, which required `--dev` to always be passed to avoid throwing an exception when loading bundled keymaps.
- It overrides `console.log` and friends in headless tests to log to the terminal, working around a change in Electron 33 that requires `--enable-logging` to be passed on the command line to see console output. This output is now always visible in headless tests.

/cc @bolinfest @thomasjo @as-cii 
",551,False,en,1
9184,1,4,0,Externals,50Wliu,2015-10-22T15:39:13Z,1,1,1,5,"Coming right after #8779...I present Electron v0.34! :P
Made this because 0.34 doesn't seem to be a major bump for Atom, and I'd like to get the rest of the 0.33 changes in.
",174,False,en,0
9181,2,0,0,Internals,maxbrunsfeld,2015-10-16T23:46:05Z,22,1,2,0,"Stack traces were incorrect for babel-compiled JS files again, because the require order had changed such that coffee-script once again clobbered our Error.prepareStackTrace. We've made that property read-only again, but this time, we've provided a way for Grim to access an Error's raw stack trace array.
",306,True,en,0
9177,1,0,0,Internals,maxbrunsfeld,2015-10-16T19:08:46Z,3,1,1,0,"Refs https://github.com/atom/atom/pull/9101

This restores the ability to reload windows using `command-r` in the dev-tools, or anywhere in spec windows. This also works around an electron bug (https://github.com/atom/electron/issues/3114), that causes breakpoints to stop working after a window navigation is cancelled.
",321,True,en,0
9162,23,13,0,Internals,as-cii,2015-10-16T16:34:52Z,255,35,13,0,"Instead of considering every character to have the same width when we perform soft-wrapping, we now make a distinction between default characters, double width characters, half width characters and Korean characters .

The strategy consists in measuring these kinds of characters once when sampling font styles and then using the calculated width to find where a certain line wraps.

Please, note that this won't work with non-monospaced fonts, but it's consistent with how we currently handle soft-wrapping for latin characters.

/cc: @nathansobo @maxbrunsfeld 
",563,True,en,0
9157,1,1,0,Externals,50Wliu,2015-10-21T21:07:03Z,0,1,1,6,"I couldn't find any part of the code that used this, so here goes!
",67,True,en,0
9156,3,11,19,Externals,50Wliu,2015-10-22T11:52:06Z,19,29,1,6,"Based on my experience with getting Atom to build on Windows, I decided to try to refresh the Windows docs.

Changes:
- Node.js download link changed from http://nodejs.org/download/ to http://nodejs.org/en/download/.  The new link is an actual webpage, not just a list of files :P
- Restructured the requirements section
- Added explicit note about `GYP_MSVS_VERSION` (this was the cause of all my troubles :cry:)
- Included VS 2015 in the troubleshooting section
- Other minor grammatical changes

/cc @paulcbetts @raelyard @atom/feedback for review
",552,True,en,0
9152,2,0,0,Internals,benogle,2015-10-15T00:02:00Z,11,0,1,0,"The new title is sentence case. Wasnt sure on a good, clear title for it other than this one.
",94,True,en,0
9141,2,0,0,Internals,as-cii,2015-10-14T16:25:43Z,32,2,2,0,"We were mistakenly using the rounded scroll top to guard against such cases. This fixes it by using `@realScrollTop` instead.
",126,True,en,0
9135,2,3,0,Externals,50Wliu,2015-10-14T21:51:28Z,6,6,3,0,"Instead of specifying both node.js and io.js, just say ""node.js 0.10.x or above"" now that node.js and io.js have merged.
",121,True,en,0
9132,1,1,0,Externals,mrodalgaard,2015-10-13T20:53:31Z,9,8,1,0,,0,False,en,0
9131,1,1,0,Internals,maxbrunsfeld,2015-10-14T16:51:53Z,42,17,3,0,"Fixes https://github.com/atom/atom/issues/9032
",47,True,en,0
9127,1,0,0,Internals,nathansobo,2015-10-12T21:53:46Z,3,1,1,0,"We need to assign `onbeforeunload` rather than listening to `beforeunload` via `addEventListener` (which I guess jQuery was doing under the hood). This enables us to return `false` from the handler to cancel the closing of the window. See https://github.com/atom/electron/issues/2481#issuecomment-134467494.

Fixes #8947
",321,True,en,0
9123,1,1,0,Externals,ForNeVeR,2015-10-12T17:46:54Z,1,1,1,0,"I believe node 4.0 is fully supported and personally succeed with building atom on Windows with node 4.0.0.
",108,True,en,0
9122,1,1,0,Externals,ForNeVeR,2015-10-12T23:00:48Z,4,0,1,0,"I've done some research of current code and PR #3062 and have found that we not only should convert the slashes in the path, but also prepend `file:///` to it.

After that source maps started to work on Windows for me. Please note that the similar code has been added to [`compile-cache` module](https://github.com/atom/atom/blob/d9410716d2c39fa4d62b2e1ab2fe1251a5805487/src/compile-cache.js#L96) but I'm not sure whether we should/want to generalize and reuse this (because it doesn't prepend `file:///` there and seems to be working fine).

This patch will fix issue #9116.
",576,True,en,0
9104,2,26,0,Externals,joseramonc,2015-11-03T18:41:29Z,33,0,2,24,"Related to #7546, added the `autoIndentSelection if should autoIndent`. A demo of the change:

![autoindentmoveline](https://cloud.githubusercontent.com/assets/1993929/10412661/8f81b0c2-6f52-11e5-8fe5-45322401d8ea.gif)
",219,True,en,0
9101,1,5,0,Externals,thomasjo,2015-10-12T19:01:41Z,2,0,1,2,"According to https://github.com/atom/atom/issues/4300#issuecomment-139103318 preventing the `will-navigate` event from firing/propagating will resolve the file dragging and dropping problem reported in #4300.

I've been unable to reproduce the problem on OS X, so I'm unsure if this actually fixes it or not. Will test on a VM in the morning (UTC) unless someone can verify that this fixes the problem.

In addition I wasn't sure whether we wanted to add the event subscription in `atom-window.coffee` or `atom-application.coffee`. 

/cc @atom/feedback 

---

Fixes #4300 (**unverified**)
",589,True,en,0
9096,5,3,13,Internals,izuzak,2015-10-14T16:36:08Z,35,8,1,5,"This adds descriptions for core and editor config settings. I think this will help users understand the purpose of config settings and use them properly. I've definitely seen confusion about what some settings mean and I've been confused about some as well. Once this is merged, I'll start working on clarifying settings for individual packages.

@atom/feedback I'd love your help in reviewing this and making these descriptions as clear and as helpful as possible. Please let me know if you have any wordsmithing advice. :pray: 

Before:

<img width=""884"" alt=""screen shot 2015-10-09 at 12 58 22"" src=""https://cloud.githubusercontent.com/assets/38924/10392229/7880098c-6e85-11e5-91e9-a4dbe4fd3715.png"">

After

<img width=""896"" alt=""screen shot 2015-10-09 at 12 57 27"" src=""https://cloud.githubusercontent.com/assets/38924/10392228/787d4c9c-6e85-11e5-946a-7ee4b2d4b70f.png"">
",876,True,en,0
9067,4,3,1,Internals,as-cii,2015-10-07T20:32:17Z,11,2,3,0,"With this PR we make sure to clear out all the references that caused `TextEditorComponent`s to be retained (e.g. closures, etc.). Below you can have a look at how the heap looked like after scrolling for a while on multiple editors and then closing them.

![screen shot 2015-10-07 at 11 09 04](https://cloud.githubusercontent.com/assets/482957/10333455/62597a46-6ce4-11e5-9b86-fefc036d4e29.png)

![screen shot 2015-10-07 at 11 16 35](https://cloud.githubusercontent.com/assets/482957/10333550/f726adc4-6ce4-11e5-9a44-dd4a5fdc73ed.png)

As you can see, a lot of elements were leaking because they were still retained by `TextEditorComponent`.

This is how the heap looks after the changes in this PR:

![screen shot 2015-10-07 at 11 09 11](https://cloud.githubusercontent.com/assets/482957/10333477/88224b18-6ce4-11e5-83ff-313df800aa74.png)

:non-potable_water: :non-potable_water: :non-potable_water:

/cc: @nathansobo @atom/feedback for :eyes: 
",947,True,en,0
9062,1,3,0,Externals,fscherwi,2015-10-07T15:43:08Z,1,1,1,0,,0,False,en,0
9051,1,3,0,Internals,nathansobo,2015-10-05T21:10:30Z,27,21,3,0,"/cc @steelbrain

Refs #9012
",28,True,fr,0
9029,1,9,2,Externals,ssorallen,2015-10-12T18:19:37Z,66,1,3,10,"`onDidChangeActivePaneItem` is called synchronously when the active pane
item changes, and several non-critical actions preform work on that
event. Critical UI feedback, like changing the active tab, needs to
happen synchronously, but most other functionality should be run
asynchronously.

The code follows the same naming scheme and design pattern as
[`TextBuffer::onDidStopChanging`](https://github.com/atom/text-buffer/blob/v7.1.2/src/text-buffer.coffee#L184), which is exposed as
`TextEditor::onDidStopChanging`.

Fixes #8997.
",532,False,en,0
9024,1,10,4,Externals,EasyHard,2015-11-02T17:26:46Z,70,0,6,31,"This PR tries to address issue #7345

This method is intended to replace TextEditor.getLongTitle
and gives a better tab title when there are multiple opened
files have identical file name. It will returns 
<unique-parent-directory>/.../<filename> when opened files
have identical file name. With this PR and updating atom/tabs
multiple files with identical name will look like this.

![image](https://cloud.githubusercontent.com/assets/1419012/10245575/67b28c32-693b-11e5-8a96-5507247dd32f.png)
",495,True,en,0
9022,1,3,0,Externals,jeremyramin,2015-10-02T21:26:14Z,2,2,1,0,"Fix the bug where Open With Atom on Windows machines will fail for paths containing spaces. Wraps quotes around the path to the Atom executable in the reg key string. This fixes #8658.
",185,True,en,0
8985,11,2,0,Internals,as-cii,2015-09-30T09:31:19Z,146,79,8,1,"This is a continuation of #8905.

We deprecated a bunch of methods, but still used them in our core and in bundled packages as well. This PR changes that so that we no longer use the deprecated methods anymore.

Also, Travis will now fail if any deprecated method is hit by our specs.
- [x] Merge https://github.com/atom/find-and-replace/pull/540 and bump version.
- [x] Merge https://github.com/atom/symbols-view/pull/124 and bump version.
- [x] Merge https://github.com/atom/wrap-guide/pull/44 and bump version.
- [x] atom core
  - [x] `::page{Up,Down}`
  - [x] `::selectPage{Up,Down}`

/cc: @maxbrunsfeld @nathansobo 
",621,True,en,0
8983,1,0,0,Internals,maxbrunsfeld,2015-09-29T16:55:26Z,13,26,3,0,"Refs https://github.com/atom/settings-view/issues/670
",54,True,en,0
8972,1,1,0,Externals,thomasjo,2015-09-29T06:41:15Z,4,4,1,0,"GitRepository class documentation references deprecated method `Project::getRepo`. This resolves that by instead using the replacement `Project::getRepositories`.

Although, it seems as if that will be removed in v2.0, so perhaps we should update this to instead using the async `Project::getDirectories` method, coupled with `Project::repositoryForDirectory`?

/cc @atom/feedback

---

Fixes #8971
",399,True,en,0
8968,232,76,1,Internals,nathansobo,2015-10-15T22:37:24Z,2578,2127,116,17,"This PR aims to improve the experience of running tests in Atom in a few ways.
- Package authors will be able to specify an `atomTestRunner` field in their `package.json` containing a require path. If the field is present, Atom will resolve the path relative to the package's root, expecting the required module to export a function which it will invoke with an object containing the following parameters.
  - `testPaths` An array of paths to tests to run. Could be paths to files or directories.
  - `buildAtomEnvironment` A function that can be called to construct an instance of the `atom` global (it won't automatically be assigned to `global.atom`, that is left to the test runner to decide.
  - `logFile` An optional path to a log file to which test output should be logged.
  - `headless` A boolean indicating whether or not the tests are running headless.
  - `legacyTestRunner` This function can be invoked to run the legacy Jasmine runner, giving packages a chance to transition to a new test runner while maintaining a subset of their tests in the old environment.
- The test runner function will be expected to return a promise that resolves with an exit code. When tests are being run in headless mode Atom will exit with this code when the promise resolves. In interactive mode the promise will be ignored.
- Running tests via the `atom` CLI has been streamlined. Simply run `atom --test path1 path2` to invoke the test runner on the listed paths, expanded relative to the working directory. The `--spec-directory` option will be deprecated.
- The `buildAtomEnvironment` function will construct a clean Atom environment whose state can be reset via a call to `reset` in between test runs.

Refs #8917
/cc @bolinfest @maxbrunsfeld
### Additional Thoughts

Atom's current testing environment has been around since the very first day of Atom development, and is quite a mess. We assign all kinds of globals and mock the clock in evil and inconsistent ways that can cause quite a few headaches when writing tests for new packages.

This PR will give us a good way to make a fresh start. Ideally, a default test runner isn't something we should be supporting in Atom core. Every package should specify its preferred runner, which it can pull in as a development dependency and which Atom can interact with via an evolving interface. It would be good to have a recommended test framework. As it stands I'd probably want to switch bundled packages over to Mocha/Chai, unless people have other suggestions. Someday in the distant future we can finally delete the tangled mess that is our current default testing environment, but we'll keep it around for now.
### Tasks
- [x] Basic clean up around test window initialization
- [x] Support specifying multiple test paths as arguments from the CLI.
- [x] Support `atomTestRunner` field containing a path.
- [x] Support multiple test paths in the default jasmine test runner.
- [x] Clean up Atom environment construction so we can instantiate the Atom environment without assigning to globals.
- [x] Pass `buildAtomEnvironment` to test runners and use it to assign the `atom` global in the default test runner, rather than in the test window initialization script.
- [x] Rename `Atom` to `AtomEnvironment`
- [x] Add a `reset` method to Atom environment
- [x] Pass `legacyTestRunner` parameter.
- [x] Fix docs generation.
- [x] Drop the `--spec-directory` CLI option
  - [ ] Stop using `--spec-directory` in `apm test` (https://github.com/atom/apm/pull/445)
  - [x] Stop using `specDirectory` parameter when running tests interactively
- [x] Drop the `Run All Tests` command from Atom since it's broken.
- [x] Shim `process.stdout.write` and `process.stderr.write` in the test window
- [x] Support a timeout flag
- [x] Expect the test runner to return a promise
- [x] Update packages to not use deprecated methods
  - [x] https://github.com/atom/welcome/pull/39
  - [x] https://github.com/atom/markdown-preview/pull/316
  - [x] https://github.com/atom/language-php/pull/105
  - [x] https://github.com/atom/autocomplete-plus/pull/592
  - [x] https://github.com/atom/snippets/pull/176
  - [x] https://github.com/atom/autosave/pull/49
  - [x] https://github.com/atom/tabs/pull/214
  - [x] https://github.com/atom/language-javascript/pull/239
  - [x] https://github.com/atom/find-and-replace/pull/551
  - [x] https://github.com/atom/language-c/pull/93
  - [x] https://github.com/atom/find-and-replace/pull/552
  - [x] https://github.com/atom/fuzzy-finder/pull/144
- [x] Add user-facing documentation for the new workflow and options 
- [x] Move remaining uses of APIs that interact with main process such as `ipc` to methods on `ApplicationDelegate`
- [x] Assign the `defaultTarget` of the keymaps in the `AtomEnvironment` constructor.
- [x] Parameterize the `configDirPath` and don't attempt any disk I/O in `Config` or `AtomEnvironment` if it is undefined. This will allow us to remove several mocks from the spec helper that prevent reading and writing state.
- [x] Move `config.load()` into the `AtomEnvironment` constructor, which will be a no-op in specs where the config dir is undefined. This will allow us to move `loadBaseStyleSheets` back into the constructor as well so they are available in the environment's default state.
- [x] Move subscription to `core.autoHideMenuBar` into `AtomEnvironment` constructor.
- [x] Get build green.
- [ ] Document environment parameters (`applicationDelegate`, `window`, `document`)
",5477,False,en,2
8958,2,1,0,Externals,50Wliu,2015-09-27T13:58:25Z,1,18,3,0,"With the merge of atom/language-make#23, this hardcoded behavior is no longer needed and is set in the Make package itself.

Refs atom/language-make#21.

/cc @benogle 
",168,True,en,0
8945,2,1,0,Internals,as-cii,2015-09-25T13:25:42Z,2,2,2,0,"This introduces a couple of commits that fix [those spec failures](https://travis-ci.org/atom/atom/builds/81909632) we are observing in #8779 :green_heart:.

These are pretty straightforward, but it'd be great to have a second pair of :eyes:.

Thanks! :bow: 

/cc: @atom/feedback @zcbenz
",288,True,en,0
8933,1,0,0,Internals,maxbrunsfeld,2015-09-24T21:09:25Z,1,1,1,0,"Fixes https://github.com/atom/atom/issues/8849
Fixes https://github.com/atom/atom/issues/8888

In https://github.com/atom/text-buffer/pull/95, I added a field `load` to the `TextBuffer`'s serialization format. I did this because previously, text-buffers would always try to load when deserializing, even if they didn't have a file! Unfortunately, when I did this, I forgot to bump the serialization format. This caused text-buffers to deserialize without loading their underlying file, which caused the above two Atom issues.

In this latest version of `text-buffer`, I remove that `load` field. It was actually somewhat redundant; a better solution is to just avoid loading when buffers don't have a `filePath`.
",713,False,en,0
8931,1,16,0,Externals,ssorallen,2015-10-01T19:30:31Z,30,23,2,6,"`Gutter::decorateMarker` passes its `decorationParams` object through to
`TextEditor::decorateMarker`. Rather than duplicate documentation and
fall out-of-date (as was surfaced in #8920), link the
`TextEditor::decorateMarker` as the canonical docs location.
",258,False,en,0
8927,1,4,0,Internals,kevinsawicki,2015-09-24T15:57:32Z,1,1,1,0,"Upgrades Electron to prevent a file handle leak on Windows and an uncaught exception when reading an invalid path in the `.asar` archives.

Refs https://github.com/atom/electron/issues/2871
Closes https://github.com/atom/atom/issues/8834
Closes https://github.com/atom/atom/issues/8882
Closes https://github.com/atom/tree-view/issues/580
Closes https://github.com/atom/settings-view/issues/653
",394,True,en,0
8926,8,4,1,Internals,as-cii,2015-09-25T17:21:36Z,6,4,2,1,"Closes #8923.

This is a continuation of #8923 that will allow us to test whether node 4 works correctly with our dependencies.

This will increase a bit the Travis backlog but this is only temporary, as we should be able to keep only the latest node version after we merge #8779.

/cc: @atom/feedback @mnquintana 
",315,True,en,0
8919,1,3,0,Externals,bencolon,2015-10-22T20:13:42Z,117,3,3,28,"Exactly the same behaviour as left/right for top/bottom.

FYI, I need this to update the [find-and-replace](https://github.com/atom/find-and-replace) package with an option to open Find results on the bottom. For now, the package allows to open Find results only on the right.

Now : 

![capture d ecran 2015-09-24 a 10 27 07](https://cloud.githubusercontent.com/assets/216385/10068890/81d1a970-62a8-11e5-9906-cec69f10143d.png)

With the bottom option : 

![capture d ecran 2015-09-24 a 10 27 36](https://cloud.githubusercontent.com/assets/216385/10068891/8a845da6-62a8-11e5-9797-d9a7d8d5f676.png)
",598,True,en,0
8905,61,7,9,Internals,as-cii,2015-09-26T16:05:10Z,1020,840,10,3,"This PR moves all the code that handles pixel positions into `TextEditorPresenter`, where it belongs. This is part of the effort to merge #8811, as we realized we needed the `DisplayBuffer` to be clean before proceeding with measurements.

This refactoring was quite big, so I'd :heart: to gather some feedback on the changes I have made (both on code quality and regressions).

What's missing:
- [x] Fix missing failing specs.
- [x] Fix package specs (by shimming the original API).
- [x] Maintain a scroll queue to preserve scroll history.
- [x] Serialize scroll state in terms of logical coordinates.
- [x] Confirm that packages work as expected.
- [x] Confirm that atom core works as expected.
- [x] Shim `TextEditor` APIs to use their `TextEditorElement` counterpart.
- [x] Fix discovered bugs.

Thanks! :bow:

/cc: @nathansobo @atom/feedback 
",849,True,en,0
8900,17,5,0,Internals,zcbenz,2015-09-24T05:45:44Z,15,14,2,1,"This is independent from #8779 and doesn't require an update of Electron. The good thing is all native modules are now update-to-date, and we no longer need to worry the build would break when we update a module or package to a later version.

The only change is to update the modules to use Nan 2, the build is green, but we might probably encounter bugs due to the update.

Fixes #8508

/cc @as-cii @nathansobo 
",414,True,en,0
8897,1,1,0,Externals,ssorallen,2015-09-24T18:26:07Z,8,8,1,1,"The docs generator expects 'optional' starting with a lowercase 'o' to
mark arguments as optional. Lowercase 'O' to properly generate the docs.
",144,False,en,0
8895,2,3,2,Internals,as-cii,2015-09-24T08:33:44Z,13,1,1,1,"...and use `atom.assert` to verify that the constructor was run before the exception.

Ref.: #8762 

/cc: @nathansobo @izuzak 
",127,True,en,0
8892,1,1,0,Internals,nathansobo,2015-09-22T16:57:57Z,1,0,1,0,"Closes atom/bracket-matcher#178

@izuzak: This will help place blame properly when we attempt to add a pane item that reports itself as destroyed.
",147,True,en,0
8873,1,1,0,Internals,as-cii,2015-09-21T16:45:21Z,0,32,1,0,"In #8680 we have removed some deprecated events but we were still performing some operations which should be now unnecessary.

Other than tightening the codebase, this should bring some speedups when adding selections as well, 'cause we don't need to call `editor.selectionIntersectsVisibleRowRange` anymore.

/cc: @nathansobo for :eyes: 
",339,True,en,0
8862,3,1,4,Externals,phord,2015-10-01T16:32:49Z,32,3,2,11,"This fixes part of #8168.  The git-worktree model still is not supported, but this is because it is so new that libgit2 doesn't know about it yet, either.  But the .git-file feature which is heavily used by submodules works with this fix.
",239,True,en,0
8859,3,3,0,Internals,izuzak,2015-09-21T18:28:47Z,3,2,2,2,"Currently, running coffeelint produces this error and causes Travis builds to fail:

```
Running ""coffeelint:src"" (coffeelint) task
src/command-installer.coffee
  ‚úñ  line 73  Line contains inconsistent indentation  Expected 2 got 0
‚úñ 1 error
Warning: Task ""coffeelint:src"" failed. Use --force to continue.
Error: Task ""coffeelint:src"" failed.
```

See clutchski/coffeelint#189 for more information on this problem and suggested approach, and for a different place in Atom where this approach is used see this:

https://github.com/atom/atom/blob/ca39c106d6570b7e46129dd445dde3b9ba84cf9f/src/config.coffee#L984

cc @mnquintana @kevinsawicki for :eyes: and :thought_balloon: in case there's a better way to fix this.
",718,True,en,0
8854,1,1,0,Internals,maxbrunsfeld,2015-09-19T00:30:26Z,7,5,1,0,"This way, we won't accidentally tag the head of master when clicking 'Publish' for beta and stable releases.

/cc @nathansobo 
",127,True,en,0
8852,1,1,0,Internals,nathansobo,2015-09-18T21:18:11Z,1,1,1,0,"Fixes https://github.com/atom/atom/issues/8837
",47,True,en,0
8848,1,2,0,Internals,nathansobo,2015-09-18T17:20:39Z,12,0,2,0,"Fixes https://github.com/atom/vim-mode/issues/863
Fixes https://github.com/atom/atom/issues/8845

/cc @bhuga
",109,False,en,0
8829,8,3,3,Internals,maxbrunsfeld,2015-09-25T22:30:00Z,282,173,15,8,"- [x] Change `build` and `install` tasks to name application and command-line launchers based on the channel
  - [x] Mac
  - [x] Windows
  - [x] Linux
- [x] Change package generator tasks to name application and executables based on the channel
  - [x] windows installer
  - [x] debian
  - [x] rpm
- [x] Change atom executable to choose the beta version when invoked as `atom-beta`?
  - [x] Mac & Linux
  - [x] Windows
",419,False,en,0
8828,2,5,4,Internals,izuzak,2015-09-20T08:45:45Z,49,3,4,2,"This is an attempt to close https://github.com/atom/atom/issues/2607. 

Currently, the `TextEditor.cutToEndOfLine` method and associated `editor:cut-to-end-of-line` command cut text from the cursor to the end of the cursor's _screen_ line. For some users, this is not the expected behavior when the cursor is in a soft wrapped line -- for those users, a more intuitive behavior would be to cut to the end of the cursor's _buffer_ line.

This PR adds a new method and command which cuts text to the end of the buffer line. Users can add a new keybinding for that or change the existing keybinding for `editor:cut-to-end-of-line` to point to the new command.

Notes:
- I decided not to change the current method `TextEditor.cutToEndOfLine` so that it cuts to the end of the buffer line because that would be considered a breaking change for that API. Still, if we consider this to be a bug in that API method, I'd be happy to change that method instead.
- I decided not to change the current command `editor:cut-to-end-of-line` so that it cuts to the end of the buffer line because that would might surprise users who are relying the current behavior. Also, `editor:select-to-end-of-line` select to the end of the screen line as well, not buffer line, so it made sense to keep these in sync (selecting and cutting to end of line should work with the same line concept so that it's not surprising for users). 
- I decided not to add a new keybinding for this command because it seemed a bit strange to have keybinding for both `editor:cut-to-end-of-line` and `editor:cut-to-end-of-buffer-line`. Normally, users wouldn't use both, they'd use one or the other. 
- I decided not to change the existing keybinding for `editor:cut-to-end-of-line` so that it calls `editor:cut-to-end-of-buffer-line` just so it doesn't surprise users who are used to the existing behavior.

I'm not 100% sure in any of those decisions above. I opened this PR to have a discussion about them -- happy to make changes if anyone feels differently.

cc @thedaniel since you opened that issue https://github.com/atom/atom/issues/2607 and @nathansobo @maxbrunsfeld for :thought_balloon: and :eyes:
",2166,True,en,0
8826,3,3,3,Externals,scv119,2015-09-17T23:59:58Z,40,1,10,0,"Currently we traverse through submodules recursively to get all native modules while loading a given atom package. This could be quite slow for some package like `nuclide-remote-projects`, which takes 14 seconds to load for the first time.

In this PR, we utilize the native dependency information generated from apm, (which lies in _atomModuleCache['extensions']['.node']), to get all the transitive native dependencies for given package. And fallback to old approach if the field `_atomModuleCache` doesn't exist in package.json.

cc @kevinsawicki 
",551,True,en,0
8822,1,1,0,Externals,svanharmelen,2015-09-17T23:47:44Z,1,1,1,0,,0,False,en,0
8816,1,2,0,Internals,maxbrunsfeld,2015-09-17T20:45:38Z,20,15,38,0,"- [x] Change `build` task to use icons based on the channel
  - [x] Test on Mac
  - [x] Test on Windows
  - [x] Test on Ubuntu

On CI, set that option to 'beta', 'stable' or 'dev' based on the branch
",200,False,en,0
8815,1,0,0,Internals,maxbrunsfeld,2015-09-16T21:07:26Z,1,0,1,0,"Fixes https://github.com/atom/atom/issues/8785

It seems that chrome now automatically selects all text in an input element
when its containing shadow root gains focus, as if it had been reached by
typing tab. Setting the input's tabindex to -1 prevents this behavior.
",269,True,en,0
8811,90,26,8,Internals,as-cii,2015-10-07T20:43:59Z,1000,624,16,21,"Supersedes and closes #6083.
Supersedes and closes #7945.
## A Brief Flashback

Over the past month we have evaluated several strategies to attack the problem, among which:
#### iframe

Build the lines inside an `<iframe>` element and measure from them.

**Pros**: measurements happen in a separate context, completely decoupled from the current DOM. Some optimization can, therefore, be applied: skinnier DOM, less stylesheet, and so on.
**Cons**: building the lines twice has a cost which is higher than the optimizations we tried out. Moreover, we cannot alter the original DOM structure as, otherwise, measurements could be wrong. 
#### Canvas

Have a canvas element and use the `measureText` function to provide all the metrics we need to position visual elements.

**Pros**: measurements happen in a separate context and the overhead is minimal.
**Cons**: CSS typography is not fully supported (e.g. ligatures/contextual alternates get screwed up) and the risk of reporting corrupted measurements is very high.
#### No Measurements

Instead of positioning decorations, cursors, etc. with absolute coordinates, embed them inside each line and let the browser figure out all the metrics.

**Pros**: no need for measurements and more semantical HTML. In addition, this enriches the power of styling customizations (e.g. the user has the possibility to style a piece of text surrounded by a decoration).
**Cons**: worse performance, because the DOM gets more complicated and nesting increases. Overlays need to be displayed on top of lines node, which forces us to employ tricks to let them appear in front of everything. 
## The Present

In this PR we have implemented DOM-based measurements. The idea here is to append the real lines to the DOM, measure from them, and render everything else that needs measurements. 

Every time `TextEditorElement::pixelPositionForScreenPosition` or `TextEditorElement::screenPositionForPixelPosition` is called, we trigger a reflow (a bit like the DOM does when you try to read from it when its information is stale).

In `TextEditorPresenter` we update the DOM with all lines we'll need to measure before computing any state, in order to avoid multiple reflows caused by reading from line nodes more than once.

What's missing:
- [x] Autoscroll when reaching the right end of the editor.
- [x] Implement `screenPositionForPixelPosition` in `LinesYardstick`.
- [x] Fix remaining specs.
- [x] Avoid using `NodeIterator` as it is slow. Cache text nodes and measure those instead.
- [x] Evaluate if caching already computed positions yields some improvements.
- [x] Remove measurement in `TextEditorComponent::readAfterUpdateSync`.
- [x] Ensure we have no significant regression performance-wise.
- [x] Investigate why Hasklig behaves oddly.
- [x] Fix bug where the cursor disappears when moving it left/right.
- [x] :arrow_up: autocomplete-plus.
- [x] :arrow_up: wrap-guide.

Feedback is super welcome and appreciated! Thanks! :bow: 

/cc: @nathansobo @atom/feedback for :eyes: 
",3017,False,en,0
8801,1,4,0,Internals,thedaniel,2015-09-19T10:14:53Z,1,1,1,3,,0,False,en,0
8793,1,0,0,Externals,BrainCrumbz,2016-03-11T19:38:06Z,59,32,1,178,,0,False,en,0
8788,4,2,6,Internals,maxbrunsfeld,2015-09-15T21:17:53Z,89,0,1,0,"This adds a script, `railcar` that merges branches and updates version numbers in the way that we've talked about. With this script, the workflow for doing regularly scheduled releases will be:
1. Check that all CI builds are green on `beta` and `master`
2. Run `script/railcar`
3. Wait for all CI builds to finish on `stable` and `beta`
4. Click `Publish Release` on the two current draft releases (both normal and pre-release)
",429,False,en,0
8787,1,1,1,Externals,50Wliu,2015-09-14T22:43:24Z,8,10,1,0,"Also some other very, very minor tweaks :mag:.
",47,True,en,0
8783,21,11,7,Internals,as-cii,2015-09-17T09:17:01Z,241,146,14,2,"After meeting with the Chrome team, we have found out that our GC times were quite severe when many DOM nodes were appended and removed from the tree (e.g. a typical scenario where you can see this in practice is scrolling).

This is a chart that shows how **master** behaves when scrolling down for a while:

![before](https://cloud.githubusercontent.com/assets/482957/9855226/4436abee-5b0d-11e5-9755-ac33d579bc9b.png)

As you can see, the browser is triggering minor garbage collections during the scroll; at some point (which, _I think_, coincides with some Chrome threshold), a full GC is triggered and it takes quite a long time:

![screen shot 2015-09-14 at 18 26 32](https://cloud.githubusercontent.com/assets/482957/9855367/28cbc33e-5b0e-11e5-8fcd-196c07bc2232.png)

With this PR we are introducing a DOM elements pool, which efficiently allocates and deallocates nodes to minimize GC times. The result is the following:

![after](https://cloud.githubusercontent.com/assets/482957/9855407/4d56d2ac-5b0e-11e5-9fae-53be15539bb1.png)

![screen shot 2015-09-14 at 18 25 47](https://cloud.githubusercontent.com/assets/482957/9855411/50a55104-5b0e-11e5-8fd9-0ca1d53213a8.png)

:chart_with_downwards_trend: :racehorse: 

Moreover, we were able to ditch all the code that dealt with strings that contained null bytes (e.g. #8660) because now those characters are retained in the actual text nodes.

Some other pair of :eyes: are most welcome, especially to look out for performance regressions (it _feels_ like `innerHTML` was a bit faster, but I couldn't confirm this).

Thanks!

/cc: @atom/feedback @nathansobo 
",1614,True,en,0
8779,14,17,0,Internals,zcbenz,2015-10-16T21:59:14Z,30,19,10,32,"Node modules to update:
- [x] runas
- [x] pathwatcher
- [x] nslog
- [x] oniguruma
- [x] git-utils
- [x] spellchecker
- [x] scrollbar-style
- [x] keyboard-layout
- [x] atom-keymap
- [x] first-mate
- [x] scandal
- [x] text-buffer
- [x] apm
- [x] highlights
- [x] ctags

Atom packages to update:
- [x] bracket-matcher
- [x] link
- [x] markdown-preview
- [x] symbols-view
- [x] tree-view
- [x] spell-check

Fixes #8508
Fixes #7061
Fixes #3593
",439,False,en,0
8778,4,3,0,Externals,mnquintana,2015-09-16T14:08:28Z,12,3,2,2,"Closes https://github.com/atom/atom/issues/8656

If `@font-family` is undefined by a theme, then Atom will use the OS's default menu font in its place. Theme authors won't have to do anything unless they want their themes to use the OS default font - if that's the case, they need only :fire: their `@font-family` declaration.

This PR is pending changes to the One ~~and Atom~~ themes though for there to actually be an effect. :sweat_smile: 

Possible consequences:
- Anyone using SF UI on anything but El Capitan will be disappointed :disappointed: (since it'll now use the OS default - Helvetica Neue on Yosemite)
- It's possible that some OS font will have weird / unexpected consequences on `line-height` / kerning that we won't necessarily be able to anticipate. If that's the case though, themes can always override the OS default if necessary.

@simurai I was thinking of leaving Atom Dark & Light alone for now, [since they still have some issues with SF UI](https://github.com/atom/atom-dark-ui/pull/48#issuecomment-117368696) - what do you think?

Tested on OS X 10.10.5, Windows 8.1, Fedora 22, and Ubuntu 15.04

/cc @simurai @atom/feedback 
",1155,True,en,0
8751,1,1,0,Externals,Ingramz,2015-09-11T07:02:17Z,1,1,1,0,,0,False,en,0
8732,5,1,0,Internals,maxbrunsfeld,2015-09-14T18:21:41Z,25,10,5,4,"Previously, CI would upload assets when building the `master` branch. Now, it uploads assets to a pre-release when building the `beta` branch, and to a normal release when building the `stable` branch.
- [x] Update build scripts to create and upload assets to pre and production releases from the `beta` and `stable` branches, respectively.
- [x] Create a `beta` branch off of this branch. Verify that after CI runs, a draft pre-release is created and populated with assets.
- [x] Create a `stable` branch off of this branch. Verify that after CI runs, the draft normal release is populated with assets.
- [x] Add `-beta` to Atom's version number on the `beta` branch.
",669,False,en,0
8731,1,1,0,Externals,mnquintana,2015-09-11T00:55:45Z,3,0,1,1,"This PR documents a new label, [`electron`](https://github.com/issues?q=is%3Aissue+repo%3Aatom%2Fatom+is%3Aopen+label%3Aelectron), which should make it clearer when Atom bugs / enhancement requests require changes in Electron to happen. :zap: 

/cc @atom/issue-triage 
",269,True,en,0
8730,17,9,0,Internals,as-cii,2015-09-15T09:25:10Z,73,90,9,5,"- [x] Reopen https://github.com/atom/git-diff/issues/71 after :ship:ping this.
- [x] Merge https://github.com/atom/git-diff/pull/73.
- [x] Merge https://github.com/atom/bookmarks/pull/39.

In this PR I have removed inline styles from lines and got rid of a couple of classes that were not used for styling. To do that, I sorted line and line numbers by their screen row.

Before (full reflow):

![before-1](https://cloud.githubusercontent.com/assets/482957/9761178/653b5f3a-56fb-11e5-9236-66e6a5368b67.png)
![before-2](https://cloud.githubusercontent.com/assets/482957/9761179/65403258-56fb-11e5-854a-c05c9f5031d6.png)

After (full reflow):

![after-1](https://cloud.githubusercontent.com/assets/482957/9761186/6e2d7ff6-56fb-11e5-8eb7-beadac1e1862.png)
![after-2](https://cloud.githubusercontent.com/assets/482957/9761184/6dcf02be-56fb-11e5-9250-3cf452c1de9f.png)

:racehorse: :racehorse: :racehorse: 

Please note that this regresses https://github.com/atom/git-diff/issues/71 because we cannot set inline z-indexes anymore on line nodes. @simurai: in the meantime, I feel like I'd be down to have the git deletion marker styled like:

![deletion-marker](https://cloud.githubusercontent.com/assets/378023/9516321/ed2090d2-4ce2-11e5-8664-08f3f6a019ca.png)

Or, alternatively, to avoid assigning an opaque background to the cursor line number.

Thoughts? :thought_balloon: 

/cc: @nathansobo @atom/feedback 
",1407,False,en,0
8721,1,7,0,Externals,scv119,2015-09-24T00:31:52Z,31,7,6,14,"Add `--no-auto-update` to script/build as an option to disable Atom autoupdate.

This PR create a new grunt task that set `_enableAutoUpdate` to Atom's package.json while building. And in AutoupdateManager, it loads package.json and check if `_enableAutoupdate` is set.

I verified that `script/build --no-auto-update` will set `""_enableAutoUpdate"" : false` in Atom's package.json whereas `script/build` will  set `""_enableAutoUpdate"" : true`. 

However, it seems that the build generated by `script/build` won't trigger autoupdate even if I made the the version to be `1.0.9` instead of `1.0.9-somehash`.

Any thought on how to verify the autoupdate feature using `script/build`?

cc @bolinfest  @maxbrunsfeld  @kevinsawicki 
",727,True,en,0
8715,6,2,1,Internals,nathansobo,2015-09-10T18:14:26Z,40,2,2,2,"Closes #8703
Fixes #8701

Major props to @Ingramz for discovering this obscure bug in `TokenIterator`. This PR adds a test and adjusts the implementation slightly, while incorporating his original commits. Thanks so much for your contribution :metal:.
",252,False,en,0
8699,8,6,0,Internals,as-cii,2015-09-17T16:46:43Z,69,1,6,10,"When this option is enabled, we reflow lines and line numbers at a minimum interval rate of `200ms`, similarly to Chrome's **Continuous Repaint** feature. If another frame is requested in the meantime, we dispatch it anyways but still reflow everything.

This feature is particularly useful to inspect **Layout** and **Recalculate Styles**, possibly tracking down performance issues related to them. A typical workflow to inspect slow styles would look like the following:
1. Settings -> Enable continuous reflow
2. Open the document you'd like to inspect
3. Record a few seconds with the Timeline
4. Open your personal stylesheet
5. Add/Remove styles
6. Go to 2)

Please, note that reflowing happens only when the editor is focused (so to avoid noise from benchmarking multiple editors at once).

I am a bit unsure we should expose this as a user-facing setting: it would probably be okay to show it only when dev mode is enabled. What do you think? :thought_balloon: 

Thanks!

/cc: @nathansobo @atom/feedback 
",1013,True,en,0
8682,56,7,0,Externals,thomasjo,2015-09-23T16:41:26Z,251,1826,49,18,":warning: WIP :warning: 

**NOTE**: This PR is currently based on #7877. We should rebase this on top of `master` once #7877 gets merged.
## 

Refs https://github.com/atom/atom/issues/5164
",189,True,en,0
8680,78,4,2,Internals,nathansobo,2015-09-19T03:13:17Z,1978,13655,66,13,"This has been a long time coming. I made the early mistake of basing Atom's initial view system, SpacePen, on jQuery, which solves a lot of problems that aren't at all relevant when targeting a single, modern browser engine. Last summer we removed the reliance on jQuery from Atom's public API and setup a pretty complicated layer of shims to keep the old jQuery-based views working through the deprecation period. With that finally behind us, this PR will remove jQuery and SpacePen entirely. We'll need to transition bundled packages away from SpacePen to finally get the benefit of reduced require time by not loading jQuery, but this is a first step.

Some things to note:
- Our default tooltips are based on bootstrap, which ships its tooltip support as a jQuery plugin. I reworked their code to remove the dependency on jQuery, which could _slightly_ alter a couple corners of the API. It would be great if people could help me test that the new tooltips work correctly in all cases.
- Some of our rarely used global spec helpers have been removed.
- The last incomplete step is to switch our test reporter from SpacePen to raw DOM APIs.

I do worry that old packages that depend on jQuery _might_ break in unforeseen ways, since we were augmenting the jQuery that shipped with SpacePen with extra stuff. For example, we had shimmed `trigger` to run Atom commands, but that no longer works. I'm not totally sure what's going to happen, but most packages developed in newer styles should have nothing to do with this.
",1523,True,en,0
8676,6,1,0,Internals,maxbrunsfeld,2015-09-15T21:59:27Z,1,1,1,11,"#8665 didn't completely fix the problem.

Fixes https://github.com/atom/atom/issues/8758
",89,True,en,0
8672,3,5,3,Externals,fedorov,2015-09-10T14:59:07Z,9,0,1,6,"Documentation augmented with a note about the need of using fake protocol in
order to invoke opener on a file already opened.

See discussion at

https://discuss.atom.io/t/difficulties-using-atom-workspace-addopener/20444
",222,False,en,0
8668,1,0,0,Internals,maxbrunsfeld,2015-09-03T23:28:50Z,7,7,1,0,"Fixes a regression introduced in #8661
",39,True,en,0
8665,3,1,0,Internals,maxbrunsfeld,2015-09-03T22:15:33Z,1,1,1,0,"- [x] Once Atom's CI passes w/ this text-buffer upgrade, publish a new patch release of text-buffer.

Fixes https://github.com/atom/atom/issues/148
Depends on https://github.com/atom/text-buffer/pull/95
",203,True,en,0
8663,7,8,8,Internals,lee-dohm,2015-09-14T16:50:13Z,27,0,2,10,"Applies to #1654 

@simurai would you like to take a look at my implementation here and let me know if there is a better approach?

/cc @atom/feedback 
",152,True,en,0
8661,3,0,0,Internals,maxbrunsfeld,2015-09-03T19:19:47Z,43,59,2,0,"Fixes https://github.com/atom/atom/issues/7342

A while ago we added some logic for handling URLs as command-line arguments. This caused problems for our handling of filename arguments with line numbers and column numbers like `file-name.txt:5`, because that argument would parse as a URL.

This also consolidates the logic for handling path arguments, removing it from `main.coffee`.

/cc @mostafaeweda
",404,True,en,0
8660,1,1,0,Internals,as-cii,2015-09-03T19:17:37Z,8,0,2,0,"Fixes #2537.

I am relatively new to this area, so feedback is super appreciated! :bow: 

When a document had null bytes, we were previously detecting whether such bytes were paired with other characters. Thus, if we had a string like the following in the buffer:

```
{someLetter}{nullByte}{variationSelector}
```

`TokenIterator::isPairedCharacter` returned true for `{nullByte}{variationSelector}`.

Although I _suspect_ it would be technically possible for null bytes to be paired with other unicode characters, as soon as we insert a null byte into the DOM it gets ripped off. 

This screwed up our measurement mechanism, which wasn't able to match DOM positions against the model. A solution for this could have been to substitute [this line](https://github.com/atom/atom/blob/master/src/lines-tile-component.coffee#L346) with:

``` coffee
continue if char.indexOf('\0')
```

However, this would skip the whole paired character and it's inconsistent with what gets displayed to the user. This PR changes the behavior of `isPairedCharacter` so that it skips null bytes when detecting pair code points.

/cc: @maxbrunsfeld @nathansobo @atom/feedback for :eyes: 
",1166,True,en,0
8646,1,6,0,Externals,jeancroy,2015-09-03T14:47:41Z,19,3,2,0,"Possible fix for https://github.com/atom/atom/issues/3624.

Problem is that line completion was triggered only on cursor line.
Other editor like sublime will complete the missing selection both before the start and after the end of a multi-lines selection.
## Before

![before](https://cloud.githubusercontent.com/assets/12763666/9647785/8e44bfe0-51ae-11e5-8fed-4267d8107c03.gif)
## After

![after](https://cloud.githubusercontent.com/assets/12763666/9647786/939f7f2a-51ae-11e5-903a-fa0f8c7d8032.gif)
",501,True,en,0
8642,1,0,0,Internals,nathansobo,2015-09-02T18:20:59Z,39,51,3,0,"This ensures we correctly restore the last cursor when handling a cursor destruction event. It fixes an exception that occurred when undoing after splitting an editor and supplants #8641.

It also removes some deprecated APIs that were in the path of our changes.
",264,True,en,0
8632,1,1,0,Externals,devoncarew,2015-09-02T05:31:11Z,1,1,1,0,"Fix a broken link in the docs page for https://atom.io/docs/api/v1.0.10/NotificationManager. The link from `getNotifications` points to a `Notifications` class instead of `Notification`.
",187,True,en,0
8627,1,0,0,Internals,nathansobo,2015-09-01T20:22:29Z,17,6,2,0,"Not just text insertion.

Fixes #8369

@maxbrunsfeld Can you merge this before the next release if it's :green_apple:?
",119,True,en,0
8624,1,0,0,Internals,nathansobo,2015-09-01T17:22:28Z,24,19,2,0,"Previously, we required the cursor to exceed the bounds of the editor, but that makes it impossible to scroll when the window is maximized. This fixes that issue by moving the scroll boundary in by 30 pixels.

/cc @50Wliu
",222,True,en,0
8623,1,1,0,Externals,aranajhonny,2015-09-08T16:48:19Z,1,2,2,7,"Fixed link for instructions Node.js debian, ubuntu and fedora. It is not something remarkable for us , but it is better to be specific.
",136,True,en,0
8617,2,3,0,Externals,CosmicWebServices,2015-09-01T14:08:03Z,1,2,2,0,"Windows 10 instructions
",24,True,en,0
8612,1,5,0,Internals,simurai,2015-09-08T18:35:12Z,1,1,1,7,"This PR adds support for the bundled system font (San Francisco) that ships in El Capitan **Beta**.

The font stack will be:
1. `.SFNSText-Regular`: San Francisco on OS X El Capitan **Beta**.
2. `SF UI Text`: San Francisco on OS X when the downloaded version is installed.
3. `Lucida Grande`: <= OS X Yosemite.
4. `Segoe UI`: Windows
5. `Ubuntu`: Linux (Ubuntu)
6. `Cantarell, sans-serif`: Fallback

Closes #8594

**Note**: Most themes will override the `@font-family` variable, but still good to add as ""default"".
",515,True,en,0
8608,2,3,1,Internals,maxbrunsfeld,2015-09-01T21:15:39Z,12,13,3,0,"Fixes https://github.com/atom/atom/issues/8551
",47,True,en,0
8604,4,16,2,Externals,lpommers,2015-09-28T08:01:42Z,6,6,2,27,"closes https://github.com/atom/atom/issues/7738

Now, when you have multiple cursors or selections and press `esc`, the single cursor or selection that will remain is the original cursor/selection 

![cursors](https://cloud.githubusercontent.com/assets/5764316/9586715/b39de780-501e-11e5-8a1b-03639e92c25d.gif)
",311,True,en,0
8601,2,0,2,Internals,kevinsawicki,2015-08-31T20:58:44Z,1,1,1,0,"I believe the wrong variable was being used when this code got ported in #8433 

Closes #8579

/cc @maxbrunsfeld :eyes: 
",121,True,en,0
8599,1,0,0,Internals,kevinsawicki,2015-08-31T16:50:17Z,1,1,1,0,"Several fixes documented at https://github.com/Squirrel/Squirrel.Windows/releases/tag/1.0.0
",92,True,en,0
8589,1,1,0,Externals,bcoe,2015-08-31T08:03:28Z,1,1,1,0,"`yargs@3.23.0` eliminates the dependency on spawn-sync, to prevent regressions like we had last week yargs now has:

windows testing via AppVeyor: https://ci.appveyor.com/project/bcoe/yargs

_and_

OSX testing via Travis: https://travis-ci.org/bcoe/yargs
",255,True,en,0
8571,1,7,0,Externals,jacekkopecky,2015-10-13T17:01:54Z,4,1,1,45,"When I run `apm test` while having another Atom window open (on a mac, if that matters), the new Atom instance screws with the socket file: it deletes the original socket on start [here](https://github.com/atom/atom/blob/5e5139b753b9c24b2671064f3b1eceabb31112d9/src/browser/atom-application.coffee#L136), creates its own and deletes that on exit.

That means that after `apm test`, `atom .` no longer opens in the original (still running) window.

Even worse, during `apm test`, `atom .` will open a window in the instance running the tests, which then happily dies (taking the new window with it) when the specs are done.

Comments on the PR welcome.
",652,True,en,0
8561,2,1,0,Externals,50Wliu,2015-08-30T14:14:31Z,4,0,1,1,"Refs #4289.  People keep hitting it so I thought a notification would be helpful.
Didn't think a spec was necessary, but if someone wants one, I'll add it :).
",159,False,en,0
8558,1,0,0,Internals,nathansobo,2015-08-28T20:55:24Z,2,17,2,0,"Fixes #8320

We simply move the cursor up or down by the number of whole lines that fit on screen, allowing autoscroll to adjust the scroll position. This causes there to be a margin under the location to which we move the cursor, but I think it‚Äôs better to provide context and keep the autoscroll experience consistent when using the keyboard.
",347,True,en,0
8555,1,5,0,Externals,ryanpcmcquen,2015-08-28T16:02:08Z,4,4,3,0,"Confirmed here: https://github.com/atom/atom/issues/8508
",57,True,en,0
8548,3,4,0,Internals,nathansobo,2015-08-28T19:46:01Z,109,38,4,0,"Fixes #8539
Fixes #6722

Our current approach to autoscrolling when selecting with the mouse relies on the same code path as our keyboard-based autoscrolling. This makes it feel jerky and also makes it especially hard to control at small editor sizes.

This PR uses a different code path to autoscroll when selecting with the mouse, providing a smoother and more controlled experience. The scroll speed is a quadratic function of the mouse cursor's distance beyond the edge of the editor viewport, and I'm open to adjusting the parameters if anyone wants to experiment or pull something from another codebase.

![comfy-scroll](https://cloud.githubusercontent.com/assets/1789/9536808/b0485090-4ced-11e5-8d2b-dc720f1d2919.gif)
- [x] Experiment with a mouse-specific autoscroll code path
- [x] Test coverage for new code
- [x] Fix existing broken tests
",850,False,en,0
8547,1,0,0,Internals,nathansobo,2015-08-28T00:58:09Z,10,13,2,0,"Previously we were attempting the same computation twice, once incorrectly when returning the scroll margins as integers and then doing the same thing in terms of pixels. This just cleans up the original calculation. It‚Äôs _slightly_ different because it takes the floor to continue returning integers, but the behavior is extremely close.
",341,True,en,0
8537,3,4,2,Internals,as-cii,2015-08-28T08:31:58Z,61,6,3,0,"Fixes https://github.com/atom/git-diff/issues/71.

Some decorations on line-numbers exceed the line height, thus overlapping the next row. When the next row has e.g. a `background-color`, such decorations get hidden. For more information, please have a look at the aforementioned issue; here's a relevant screenshot of the glitch:

![visual-glitch](https://cloud.githubusercontent.com/assets/38924/9423029/e79a1258-48b1-11e5-9baa-9ee16f9a7dc2.gif)

After this PR, similarly to the tiles within `.lines`, we assign a decreasing `z-index` to the tiles in the gutter. We do so for `.line-number`s as well, so that we don't have to deal with DOM ordering while still solving the problem.

Among all the solutions proposed in the above issue, I feel like this is the most unobtrusive (assuming we don't want to change the visuals). Although this doesn't solve an analogous scenario (i.e. when a decoration overlaps the previous row), it fixes the pretty common issue we are observing on the gutter.

I'll test drive this to check if anything got screwed up. Feedback is very welcome! :eyes: :bow: 

/cc: @simurai @nathansobo @izuzak @atom/feedback 
",1144,True,en,0
8536,1,2,0,Internals,as-cii,2015-08-27T16:20:25Z,5,5,1,0,"Some methods in `TextEditorPresenter` were calling buffer-to-screen conversion methods more than once, causing unnecessary slowdowns when many cursors/decorations were in place.

Before:

![screen shot 2015-08-27 at 11 36 19](https://cloud.githubusercontent.com/assets/482957/9517510/cd605688-4cb0-11e5-9b34-0bd1f5d9921e.png)

After:

![screen shot 2015-08-27 at 11 36 04](https://cloud.githubusercontent.com/assets/482957/9517511/cff9de46-4cb0-11e5-8d6a-6e711cd23cfa.png)

_(benchmarks executed on a file with ~ 3k rows full of cursors and decorations)_

 :racehorse: 

Ideally, we shouldn't need to be conservative about such kinds of calls but that would require to address the problem from a totally different perspective and, on the other hand, this is a fairly quick win we can take advantage of in the meantime.

/cc: @maxbrunsfeld @nathansobo @atom/feedback 
",867,True,en,0
8533,1,2,0,Externals,ssorallen,2015-10-13T20:56:41Z,35,10,1,47,"- The defaults for the 'icon' values come from [Notification::getIcon][0].
- `dismissable` defaults to `!!options.dismissable`, which equates to `false` for `undefined`.

[0]:
https://github.com/atom/atom/blob/v1.0.7/src/notification.coffee#L79
",245,False,en,0
8531,1,1,0,Internals,nathansobo,2015-08-27T00:40:05Z,29,2,2,0,"The last selection can sometimes be destroyed by packages, which was creating problems.

Fixes atom/bracket-matcher#102
",120,True,en,0
8530,1,5,0,Internals,kevinsawicki,2015-08-26T23:05:07Z,1,1,1,0,"CI on Windows is currently failing with:

```
Running ""create-windows-installer:installer"" (create-windows-installer) task
>> The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.
Error: Command failed: The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.

  at ChildProcess.exithandler (child_process.js:637:15)
  at ChildProcess.EventEmitter.emit (events.js:98:17)
  at maybeClose (child_process.js:735:16)
  at Process.ChildProcess._handle.onexit (child_process.js:802:5)
```

I believe the paths in the `yargs` dependency of `apm` are causing this.

I'm pinning the `yargs` version for now to see if it resolves this issue.

Closes https://github.com/atom/atom/issues/8528
",918,True,en,0
8527,1,0,0,Internals,maxbrunsfeld,2015-08-26T22:44:30Z,153,137,2,0,"Fixes https://github.com/atom/tree-view/issues/404
",51,True,en,0
8526,3,10,0,Externals,jacekkopecky,2015-08-26T21:42:53Z,10,10,2,0,"Fixes #8486 I think.
",21,True,en,0
8520,1,3,0,Internals,as-cii,2015-08-26T23:21:52Z,53,6,5,0,"After merging the tiles PRs, I have overlooked that the lines/line-numbers containers were still using `scrollHeight` as their height. This is clearly wrong and, although this seemed to have no effect performance-wise, @nathansobo found it had an impact while benchmarking stuff with `chrome://tracing`.

To fix this, I have introduced a `state.content.maxHeight` that's calculated using `TextEditorElement`'s bounding client rect and that gets updated every time its dimensions change.

Sorry about this but hopefully we can get it fixed pretty soon with this PR.

/cc: @atom/feedback for :eyes:
",597,True,en,0
8507,2,1,0,Externals,thomasjo,2015-08-25T19:50:32Z,2,2,2,0,"This PR is necessary as part of the Electron upgrade (https://github.com/atom/atom/pull/7877). A bug was discovered in ASAR that causes hidden files to be ignored. We've worked around that problem by renaming the `.ctags` file in symbols-view to `ctags-config`.
",262,True,en,0
8506,4,1,2,Internals,maxbrunsfeld,2015-08-25T19:09:55Z,64,10,4,0,"Fixes https://github.com/atom/atom/issues/8178
Depends on https://github.com/atom/text-buffer/pull/92
- [x] Merge the text-buffer PR, publish a new minor version of text-buffer, and upgrade Atom to use that.
",208,False,en,0
8500,4,4,3,Externals,natthu,2015-08-31T12:24:12Z,12,1,2,6,"I work on a package that adds a gutter to show ""dot"" next to a line (setting breakpoints). I noticed that sometimes the gutter UI would not update even if the code to decorate the marker successfully executed. When I debugged Atom, I realized that since the order in which gutters are added is undeterministic (unless you set the right priorities), `updateCustomGutterDecorationState` would sometimes return early.
",415,True,en,0
8497,1,2,1,Externals,ssorallen,2015-08-26T16:40:41Z,5,0,1,1,"The Electron MenuItem[1] `enabled` and `visible` options are exposed to
Atom context menus in menu_helpers.coffee[2] but are not yet documented.
Both options are passed through to Electron.

[1] http://electron.atom.io/docs/v0.31.0/api/menu-item/
[2] https://github.com/atom/atom/blob/v1.0.7/src/menu-helpers.coffee#L49
",320,False,en,0
8496,1,0,2,Internals,maxbrunsfeld,2015-08-24T21:28:30Z,35,0,2,0,"Refs https://github.com/atom/vim-mode/pull/827
",47,True,en,0
8494,1,1,0,Externals,lpommers,2015-08-24T21:40:54Z,4,0,1,0,"update to the docs

`setSelectedBufferRange` and `setSelectedBufferRanges` can also take a `preserveFolds` bool in the options object.
",135,True,en,0
8480,4,8,0,Externals,jeremyramin,2015-08-25T16:15:43Z,32,1,2,2,"The config.get method does not return the default values for objects with properties in a config schema.
### Example

For example the editor config has:
(excerpt taken from [config-schema.coffee](https://github.com/atom/atom/blob/master/src/config-schema.coffee))

``` coffeescript
...
  backUpBeforeSaving:
    type: 'boolean'
    default: false
    description: 'Ensure file contents aren\'t lost if there is an I/O error during save by making a temporary backup copy.'
  invisibles:
    type: 'object'
    properties:
      eol:
        type: ['boolean', 'string']
        default: '\u00ac'
        maximumLength: 1
      space:
        type: ['boolean', 'string']
        default: '\u00b7'
        maximumLength: 1
      tab:
        type: ['boolean', 'string']
        default: '\u00bb'
        maximumLength: 1
      cr:
        type: ['boolean', 'string']
        default: '\u00a4'
        maximumLength: 1
...
```

A call to `atom.config.get('editor')` returns an object with an 'invisibles' value that is an empty object. We are expecting an object containing the default values for the properties in 'invisibles'. 

This result is caused by `_.defaults()` in `@getRawValue()` not being recursive. The lack of a `_.deepDefaults()` lead me to use a bit of a workaround with `_.deepExtends()`. Now with `_.deepExtends()`, the default values are the base while any new values read from the config.cson overwrite the defaults. This way all default values, even nested ones, appear in the result.
### Side-Effect

A side effect of this issue was that atom/settings-view does not properly present the available configuration options from the config schema. The `appendObject()` method in [settings-view/lib/settings-panel.coffee](https://github.com/atom/settings-view/blob/5a115f9e051da32e7af676daf6076d890d8d5e75/lib/settings-panel.coffee) uses the values provided by `config.get(packageName)`. The lack of keys in the value provided to appendObject would lead to objects in the schema disappearing from the SettingsPanel. With this proposed change, the SettingsPanel now properly displays objects and their properties.

See atom/settings-view#386 and atom/settings-view#518.
",2180,False,en,0
8475,4,1,0,Internals,nathansobo,2015-09-08T16:42:23Z,137,31,2,17,"This is to support https://github.com/atom/incompatible-packages/pull/9

This PR adds `Package::rebuild()` and `Package::getBuildFailureOutput()` methods, persists build failures, and considers a package incompatible when it has a build failure.

It also changes the storage location of the cached incompatible native modules in local storage so we can distinguish them more easily from build failures, so we should wait to merge this until the Electron upgrade lands which will force us to invalidate the cache anyway.
",520,True,en,0
8473,1,1,0,Internals,lee-dohm,2015-08-21T23:41:13Z,2,2,1,0,,0,False,en,0
8469,4,3,20,Internals,izuzak,2015-09-04T12:14:05Z,187,1,1,13,"This adds a section on labels used in `atom/atom` and across the Atom organization, something that the @atom/issue-triage team discussed previously.

Notes:
- The diff is rather large due to all the search links, it might be easier to read in rendered mode
- The intro to the section is a bit wordy as I tried to explain the motivation for listing these labels and adding the search links. I'm not worried about that, and I think the words are worth it, but if someone has suggestions on reducing that text -- that'd be swell.
- Also wanted to make it clear that these labels are not set in stone and that we want to evolve them to support the project and the community. 
- I added this section at the very bottom of the document so that it doesn't overwhelm readers who are reading top-to-bottom.
- Also added a TOC section at the top to announce what the guide talks about and make it easier to jump to specific sections.
-  I think I listed all labels that are out there, but please let me know if I missed one. Also, I wonder if some labels shouldn't be listed for some reason (I can't think of such a reason, but still wondering if someone else can).

@atom/issue-triage When you have some time to :eyes: this :books:, would love to hear your thoughts on the format and the content. :thought_balloon: Also /cc @atom/core. 
",1328,True,en,0
8452,1,1,0,Externals,mrodalgaard,2015-08-19T22:21:55Z,8,5,1,0,"Fixes #8401.

Might consider making `::getFlexScale` and `::setFlexScale` public, as they are pretty essential for controlling / registering the pane‚Äôs size from a package.
",175,True,en,0
8446,1,14,0,Internals,nathansobo,2015-08-19T20:13:27Z,42,3,2,0,"Fixes #8369
Fixes #5243 
Fixes #5200

@izuzak, @mnquintana Either of you interested in giving this a try on Yosemite? I'll probably merge it once it's green regardless, but it would be good to confirm it fixes the issue you're experiencing that I can't repro.

On recent versions of OS X Yosemite, there is a delay before we receive the `mouseup` event when dragging selections with the trackpad. This means that we‚Äôre frequently accidentally inserting text before the selection process terminates, leading to unexpected selections after the text insertion. This fixes that behavior and makes the behavior more straightforward even in the case where the mouse button is remains held down during text insertion.
",713,False,en,0
8442,25,100,22,Externals,paulcbetts,2015-11-03T20:49:55Z,95,0,5,76,"This PR sets the default ATOM_HOME to be relative to `atom.exe`, if the following cases are true:
1. We're not in DevMode
2. We're on Windows
3. The EXE path is not in the normal installed location

This allows users to take the entire Atom folder and use it as a ""Portable"" application (i.e. portableapps.com)

Fixes #2939
## TODO:
- [x] Make sure this actually works
- [ ] ~~Add `.alwaysportable` directive~~ (Gonna see if people want this or not)
- [ ] Code Review
",468,False,en,0
8441,1,1,0,Internals,lee-dohm,2015-08-20T18:13:28Z,11,0,1,1,":warning: Should only be merged after settings-view has been incremented past v0.214.0. :warning:

Related to atom/settings-view#635
",133,True,en,0
8440,3,2,3,Externals,thomasjo,2015-08-19T18:57:41Z,16,0,1,0,"This PR is an attempt at documenting the view resolution algorithm used in `ViewRegistry::createView`, which is in turn invoked by `ViewRegistry::getView`.

There might be typos, poorly phrased sentences and what not, so don't be shy with the feedback!

/cc @nathansobo @atom/feedback 
",286,True,en,0
8436,2,2,0,Internals,as-cii,2015-08-20T14:00:08Z,8,10,1,1,"While working on character measurement, I spotted a couple of _cursor rendering computations_ that were not batched yet.

This PR fixes that, so that when a cursor changes (e.g. gets added, removed, or moves) we wait until the next frame to update it. This is consistent with how we handle other updates in the presenter and should as well yield some speedups when many cursors are added/removed/moved at once.

Any feedback is very welcome and much appreciated! :eyes: :bow: 

/cc: @nathansobo @maxbrunsfeld @atom/feedback 
",525,True,en,0
8433,33,12,40,Internals,maxbrunsfeld,2015-08-22T00:45:10Z,640,686,22,3,"Refs https://github.com/atom/atom/issues/8416
",46,True,en,0
8431,1,5,1,Externals,thomasjo,2015-08-18T21:10:30Z,10,0,2,0,"By adding this extension to `ViewRegistry::getView` we're paving the way for [Etch](https://github.com/nathansobo/etch)-like view frameworks which promotes the usage of plain objects and classes with an `element` property which is an instance of `HTMLElement`.

/cc @nathansobo @maxbrunsfeld 
",293,True,en,0
8420,1,9,2,Externals,jssln,2015-08-21T20:43:17Z,16,1,2,3,"It seems expected for custom `Gutter`s to be destroyed when its `TextEditor` is destroyed.
We decided that the `line-numbers` Gutter could not be deliberately `destroy`-ed, which is why there is a special case for it. 

The change in this PR also prevents an exception that would be thrown if you call `Gutter::destroy` after the TextEditor has been destroyed:
- `TextEditor::destroyed` calls `GutterContainer::destroy`
- ... which used to set the GutterContainer's `@gutters = null`.
- Then if you call `Gutter::destroy`, it calls `GutterContainer::removeGutter`
- ... which attempts to call `@gutters.indexOf`. But `@gutters` would be `null`, not an Array.
",659,False,en,0
8419,1,8,1,Externals,aranajhonny,2015-08-18T21:33:46Z,1,1,1,0,"Update linux.md
",16,True,fr,0
8397,6,14,1,Externals,jonathandelgado,2015-08-25T22:09:43Z,19,0,4,10,"Adds the configuration option to disable the initial empty editor. [Many people](https://discuss.atom.io/t/preference-not-to-open-new-file-when-opening-atom/8476), myself included, find it annoying to constantly close these files.

Fixes #4573 by proxy, as well.
",263,True,en,0
8377,2,8,0,Internals,nathansobo,2015-08-19T20:15:34Z,50,42,2,5,"/cc @izuzak for :microscope: 
### Before:

![gutter-selection-before](https://cloud.githubusercontent.com/assets/1789/9263408/f25b02f8-41d9-11e5-9610-0a0c0eb695cd.gif)
### After:

![gutter-selection-after](https://cloud.githubusercontent.com/assets/1789/9263418/0d2bc96e-41da-11e5-822a-413e39938ad5.gif)
",304,False,en,0
8373,2,1,0,Internals,nathansobo,2015-08-13T22:37:12Z,23,48,1,0,"Refs #8350

Regardless of whether you're holding `shift` or `cmd`, the autoscroll behavior should be consistent.

@izuzak Can you try to break this?
",149,True,en,0
8358,1,0,0,Externals,mnquintana,2015-08-13T11:35:49Z,1,1,1,0,"The metrics link in about now opens the metrics package directly in Atom.
",74,True,en,0
8357,6,5,3,Internals,kevinsawicki,2015-08-13T14:23:28Z,53,0,6,0,"Adds two new pane commands, `pane:increase-size` and `pane:decrease-size` with some default keybindings on all platforms.

Continuation of #7354

Closes https://github.com/atom/atom/issues/7332
",194,True,en,0
8356,12,5,1,Internals,benogle,2015-08-13T18:13:13Z,197,51,3,0,"This does the simplest thing possible. When `editor.tabType` is set to `auto`, it does what it did before. When it is set to `hard` or `soft`, it uses those values all the time unless `setSoftTabs()` is explicitly called. The API is unchanged. Specs have been consolidated a bit as there were a couple places where the tab stuff was being tested.

Eventually (another PR), I'd like to change the name of `editor.softTabs` setting to `editor.defaultTabType` or something more clear. 

Closes https://github.com/atom/atom/pull/8186 @Abdillah, I've used a couple of your commits.
Closes https://github.com/atom/atom/issues/3719
",625,True,en,0
8350,1,6,0,Internals,nathansobo,2015-08-12T20:32:56Z,29,2,2,0,"Fixes #2696
- Explicitly assign the orientation of the selection when it crosses the initially clicked row.
- Autoscroll to the cursor, not the entire selection.
",162,False,en,0
8334,1,0,0,Internals,nathansobo,2015-08-11T20:23:25Z,11,2,2,0,"Fixes #7068
",12,True,en,0
8321,1,2,0,Internals,as-cii,2015-08-11T15:37:11Z,2,1,1,0,"Fixes #8301.

It seems like, for a time related problem, we're getting intermittent build failures on Travis [for this line](https://github.com/atom/atom/blob/master/spec/text-editor-component-spec.coffee#L827) (which was added as part of #8009).

This PR simply bypasses the `nextAnimationFrame` call when there is no pending frame (as we did for https://github.com/atom/atom/blob/master/spec/text-editor-component-spec.coffee#L852).

/cc: @atom/feedback @thomasjo
",466,True,en,0
8312,2,11,0,Internals,kevinsawicki,2015-08-11T16:42:26Z,4,4,2,0,"Switch to the [Contributor Covenant](http://contributor-covenant.org/version/1/2/0/) from the [Open Code of Conduct](http://todogroup.org/opencodeofconduct).

See https://github.com/todogroup/opencodeofconduct/issues/84 for more details.

See [here](http://contributor-covenant.org/#who) for other projects using the Contributor Covenant.

/cc @atom/feedback 

Closes #8206 
",375,True,en,0
8308,1,3,0,Internals,nathansobo,2015-08-10T20:53:27Z,2,1,2,0,"Fixes #7961
",12,True,en,0
8266,1,3,0,Externals,yomybaby,2015-08-10T17:42:37Z,1,1,1,3,"## Description

When opening already opened file via `atom.workspace.open(path,{ initialLine: 0,  initialColumn: 0, searchAllPanes: true} )`, cursor position doesn't move to `row : 0, column:0`.

Check below screenshot. 
I run code on console.

``` javascript
var indexPath = ""/Users/yomybaby/Documents/AWorkspace/demo-atom-package/app/controllers/index.js""
setInterval(function(){
  atom.workspace.open( indexPath , {initialLine:0, initialColumn:0, searchAllPanes:true});
},1000);
```

![openbug](https://cloud.githubusercontent.com/assets/621215/9134340/31a3663a-3d3e-11e5-8a38-74eb7ab16994.gif)
## Expected result:

Whether or not file is opened already, cursor position has to be [0,0].

Same result of below code

``` javascript
var indexPath = ""/Users/yomybaby/Documents/AWorkspace/demo-atom-package/app/controllers/index.js""
setInterval(function(){
  atom.workspace.open( indexPath , {searchAllPanes:true}).then(function(te){
    te.setCursorBufferPosition([0, 0])
  });
},2000);
```

![openexpected](https://cloud.githubusercontent.com/assets/621215/9134344/395fc24c-3d3e-11e5-8e70-22410111b0b2.gif)
",1108,True,en,0
8256,23,5,0,Internals,nathansobo,2015-09-19T03:59:28Z,125,140,10,43,,0,False,en,0
8255,5,1,0,Internals,kevinsawicki,2015-08-06T20:40:04Z,9,5,1,0,"Follow on to #8254, sign `Update.exe` as well before building the installer.

Refs #8246 
",90,True,en,0
8254,1,0,0,Internals,kevinsawicki,2015-08-06T18:15:42Z,21,24,2,0,"This breaks apart the `codesign` build task so that `atom.exe` is signed before `AtomSetup.exe` is built and signed.

This should hopefully prevent `atom.exe` from being detected as malware on Windows 10.

Refs #8246
",217,True,en,0
8238,1,2,0,Externals,bolinfest,2015-08-05T22:02:44Z,1,1,1,0,"This picks up a critical bug fix for https://github.com/babel/babel/issues/2152.

/cc @sebmck
",94,True,en,0
8232,57,60,26,Externals,lpommers,2015-11-07T21:40:58Z,847,118,3,94,"Closes https://github.com/atom/atom/issues/2470

![move-line](https://cloud.githubusercontent.com/assets/5764316/9087105/e7be09fa-3b88-11e5-8059-777b0d902e56.gif)

`ctrl-cmd-up` and `ctrl-cmd-down` now supports moving multiple selections up and down. 
",252,True,en,0
8229,1,0,0,Externals,svanharmelen,2015-08-05T16:24:02Z,1,1,1,0,,0,False,en,0
8225,1,4,0,Internals,benogle,2015-08-05T18:16:06Z,1,1,1,0,"Scandal now stats path patterns that do not contain any `*` chars to better determine if a pattern is a file or directory. So the case of ""Search in directory"" when the directory contains dots will now work.

![screen shot 2015-08-04 at 5 41 58 pm](https://cloud.githubusercontent.com/assets/69169/9075915/22084ff8-3ad0-11e5-8b06-85edff9994e1.png)

Closes https://github.com/atom/atom/issues/6134
Closes https://github.com/atom/find-and-replace/issues/388
Closes https://github.com/atom/find-and-replace/issues/309

@jugglingnutcase feel free to try out this branch to see if it fixes your problem. You will need to `script/bootstrap` after pulling down this branch to get the new scandal version. 
",699,True,en,0
8220,1,0,0,Internals,benogle,2015-08-04T20:51:10Z,15,11,1,0,"This allows pane movement to work in find and replace, the tree view, etc.
",75,True,en,0
8214,1,1,0,Internals,izuzak,2015-08-04T17:08:33Z,13,3,1,0,"This is an attempt to close https://github.com/atom/atom/issues/5789, using @nathansobo's idea from https://github.com/atom/atom/issues/5789#issuecomment-127354721. 

@nathansobo If you have any suggestions on polishing this text, I'd appreciate them.
",252,True,en,0
8208,2,4,2,Internals,nathansobo,2015-08-04T18:11:19Z,24,7,3,0,"Fixes #3489

This PR changes our approach to creating and manipulating multiple selections with the mouse. Previously, as soon as selections started overlapping we merged them, but this led to unintuitive behavior when dragging with the mouse, where existing selections would snap to the current pointer location. It also created inconsistencies when the first selection was wordwise or linewise.

In this PR, we defer selection merging during dragging. You can drag a new selection to overlap an existing one, then change your mind and still leave the old selection intact. As soon as you release the mouse button, selections are merged as normal.

![selection-merging](https://cloud.githubusercontent.com/assets/1789/9052814/584d7860-3a29-11e5-8255-09fe72a04433.gif)

This is the first time we've ever allowed overlapping selections to exist, so I do wonder if there might be some fallout, but it's a very narrow window. @izuzak interested in giving this a spin since you originally brought this issue to my attention?
",1021,True,en,0
8205,1,0,0,Externals,mnquintana,2015-08-04T00:59:38Z,1,1,1,0,"This adds the collapsible package section goodness from https://github.com/atom/settings-view/pull/593
",103,True,en,0
8189,1,1,0,Internals,simurai,2015-08-01T11:32:00Z,1,0,1,0,"Currently the `atom-workspace` background-color uses `@app-background-color`, but text color isn't defined and falls back to Bootstrap's default color of `#333`. This can make text hard to read with dark themes.

This PR adds `color: @text-color;` which should match the background.
",283,True,en,0
8182,1,12,0,Externals,bolinfest,2015-08-03T20:24:29Z,13,1,2,2,"‚Ä¶ files.

Also update the version of Babel to pick up a JSON-parsing fix. This was an
issue that was discovered in the course of seeing how reading .babelrc files
would interact badly with Atom's Babel cache.

/cc @sebmck
",224,True,en,0
8179,1,0,0,Externals,mnquintana,2015-07-31T23:02:35Z,1,1,1,0,"Fixes a keybinding conflict with `window:reset-font-size` https://github.com/atom/tree-view/issues/251
",103,True,en,0
8173,1,1,0,Internals,maxbrunsfeld,2015-08-12T17:52:53Z,12,12,3,12,"Refs #8130.

/cc @tmunro
",25,True,fr,0
8170,1,0,0,Externals,paulcbetts,2015-07-31T11:19:13Z,3,0,1,0,"This PR set the App User Model ID to match what Squirrel.Windows configures the shortcut to be, which should resolve #7374.

Normally, our App User Model ID is unset, but certain Windows features require an explicit App User Model ID (jump lists and notifications). To solve this Generally‚Ñ¢, we rig Squirrel.Windows to configure this in the shortcut, which means that the Browser process will inherit this value.

However, because Chromium forks and the process that actually creates the window isn't the same one, and App User Model IDs don't inherit, our renderer process ends up being the _default_ one (which is effectively the path to the EXE). We fix this in https://github.com/atom/electron/pull/2175, but we still need to tell Electron what the initial name should be. 
",780,True,en,0
8165,1,1,0,Externals,svanharmelen,2015-07-31T10:57:51Z,1,1,1,0,"Updating the language package to the latest version.
",53,True,en,0
8162,4,1,0,Externals,50Wliu,2015-07-31T04:53:07Z,4,4,1,0,"- language-c updates `this` to be `variable.language.this.c`
- language-java now tokenizes comments in enums and updates `this` to be `variable.language.this.java`
- language-javascript fixes a major regression with const highlighting
- language-yaml fixes more issues with multiline text blocks
",296,False,en,0
8158,12,25,0,Externals,MaximSokolov,2015-08-28T15:46:38Z,86,76,3,28,,0,False,en,0
8151,1,0,0,Externals,mnquintana,2015-07-30T04:19:15Z,1,1,1,0,"This now hides deprecation-cop's status bar view unless the window is in dev mode. https://github.com/atom/deprecation-cop/pull/64
",131,True,en,0
8150,1,0,0,Externals,mnquintana,2015-07-30T04:19:06Z,1,1,1,0,"This fixes an issue with VCS coloring if the project root was a symlink. (https://github.com/atom/tree-view/pull/487)
",118,True,en,0
8148,1,0,0,Externals,mnquintana,2015-07-30T01:30:13Z,1,1,1,0,"`marked` 0.3.4 was just released, which resolves a [security vulnerability](https://nodesecurity.io/advisories/marked_redos). Although 0.3.4 was already satisfying the semver version range, this bumps the minimum version to be more explicit (and hopefully make [David](https://david-dm.org/atom/atom)'s `insecure` status go away :stuck_out_tongue_closed_eyes:)
",361,True,en,0
8146,1,0,0,Internals,nathansobo,2015-07-29T20:32:25Z,7,3,1,0,"Refs #8123

This was causing long pauses when selecting by word with the mouse in certain locations.
",101,True,en,0
8144,13,14,3,Internals,maxbrunsfeld,2015-08-13T17:17:29Z,229,13,7,14,"Closes #1718
",13,True,en,0
8142,3,6,0,Internals,kevinsawicki,2015-07-29T22:46:20Z,11,10,2,0,"Long time coming, upgrades to Squirrel for Windows 0.99.3 via upgrading the grunt plugin for creating electron installers.
",123,True,en,0
8141,1,0,0,Internals,nathansobo,2015-07-29T19:29:39Z,10,1,2,0,"Refs #8123
",11,True,fr,0
8140,1,0,0,Internals,nathansobo,2015-07-29T17:50:11Z,7,3,3,0,"Fixes #3158

@atom/feedback It would be great if you could enable this option once this lands to see if we're encountering unexpected issues with backup files.
",160,True,en,0
8130,5,19,7,Externals,tmunro,2015-07-30T03:18:13Z,75,1,3,0,"Adds support for activating and deactivating the keymaps for individual packages. Currently, there's no good way to quickly disable conflicting keymaps. Adding `unset!` entries for every binding in your own keymap is tedious and error-prone. This adds `Package` support for activating and deactivating keymaps, so you can easily choose which keymaps from which packages are important to you.

See https://github.com/atom/settings-view/pull/610 for UI support.

Related: https://github.com/atom/atom-keymap/issues/82
",516,True,en,0
8126,4,3,2,Internals,benogle,2015-07-29T18:59:56Z,32,1,2,0,"The process for each project search would stick around:

![screen shot 2015-07-28 at 2 11 12 pm](https://cloud.githubusercontent.com/assets/69169/8947369/07e0ad04-354f-11e5-9529-e3db0eadf779.png)

Closes https://github.com/atom/find-and-replace/issues/459
",256,True,en,0
8125,2,1,0,Externals,50Wliu,2015-07-29T00:47:01Z,2,2,1,0,"PRing because two languages changed.

language-go@0.32.0 improves the auto-indent patterns and also adds specs for it :green_heart:!
language-yaml@0.23.0 adds support for `.sls` files and properly handles pound (`#`) symbols in multiline blocks.

Will merge when green.
",270,True,en,0
8123,1,6,0,Internals,nathansobo,2015-07-28T22:33:41Z,56,2,2,0,"Instead just autoscroll to the cursor, which is what we do when single-click dragging.

Fixes #6675
",100,True,en,0
8122,1,1,0,Externals,ssorallen,2015-07-29T00:33:29Z,6,6,1,0,"Use the `Returns` keyword in function docs so they are put
in panels like other return values in docs.
",103,False,en,0
8121,1,1,0,Externals,ssorallen,2015-07-29T00:32:59Z,4,4,1,0,"Use the `Returns` keyword in `get*Theme` function docs so they are put
in panels like other return values in docs.
",115,False,en,0
8120,1,2,0,Externals,ssorallen,2015-07-29T00:32:34Z,3,3,1,0,"Use the `Returns` keyword in `PackageManager::getAvailablePackage*`
docs so the return values are called out in panels like with other
documentation.
",150,False,en,0
8119,1,0,0,Internals,nathansobo,2015-07-28T17:57:45Z,6,0,3,0,"Fixes #6949

This prevents insertion of weird characters when ctrl-up/down are pressed.
",88,True,en,0
8112,1,3,0,Internals,as-cii,2015-07-28T14:38:32Z,3,0,1,0,"Refs: #8098

To create a new stacking context we need to isolate the container div (https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context).

This fixes a visual glitch on the wrap-guide whenever there are more than 5 tiles (i.e. the wrap guide gets hidden). I am sorry for not catching this early, but apparently I overlooked it while testing #8098.

/cc: @nathansobo 
",413,True,en,0
8110,1,4,0,Externals,mnquintana,2015-07-28T14:32:40Z,4,0,1,0,"This PR adds some Travis config to only trigger builds for pushes to `master`, instead of building pushes for every branch in the repo. This should help keep our jobs queue from being flooded - it should cut down our number of build jobs from 6 to 3. However, this does preserve triggering builds for PRs.

I think we should probably add this config to every repo in the Atom org.

/cc @as-cii @atom/feedback 
",410,True,en,0
8109,1,3,0,Externals,batjko,2015-07-29T00:35:50Z,6,4,1,0,"Thanks @izuzak for pointing out that the git shell can take forward slashes, and the original instructions do assume usage of that, as opposed to cmd or Powershell.
",165,True,en,0
8107,1,6,2,Externals,batjko,2015-07-28T11:09:39Z,4,4,1,0,"Just a little oversight.
",25,True,en,0
8105,1,5,1,Internals,as-cii,2015-07-28T13:45:23Z,17,2,2,0,"Fixes #8070

/cc: @atom/feedback @maxbrunsfeld @nathansobo 
",60,True,en,0
8103,1,2,0,Externals,50Wliu,2015-07-28T02:37:50Z,1,1,1,0,"Fixes an issue where strings would be incorrectly highlighted in the following scenario:

``` js
write(""){"");
```

(Also, sorry for the many JS PRs lately - maybe I should try bumping the version less often :P)
",211,True,en,0
8101,4,2,2,Externals,drewkett,2015-07-28T14:47:28Z,1,1,1,0,"npm is missing from the current instructions. Also, I added a note about the AUR as an alternative for building from source on Arch.  

This addresses issues raised by @Narrat in #7426 and @fusion809 in #7511.
",210,True,en,0
8098,2,6,0,Internals,as-cii,2015-07-28T08:13:20Z,37,1,4,0,"Fixes #8026.

![screen shot 2015-07-27 at 20 34 41](https://cloud.githubusercontent.com/assets/482957/8914361/1ce2edd0-349f-11e5-8954-de2c6c1ef65a.png)

As a temporary stopgap measure until we explore better alternatives, we have decided to tackle the above issue by putting tiles upper in the stack in front of the ones below.

We need to put tiles into a separate div with its own stacking context, so that tiles do not overlap other elements such as the cursors or the wrap-guide.

/cc: @nathansobo @abe33 @rbu
",514,True,en,0
8095,1,1,0,Internals,nathansobo,2015-07-27T18:33:38Z,2,0,2,0,"Fixes #4562
",12,True,en,0
8094,3,5,0,Internals,smashwilson,2015-07-27T22:36:42Z,18,5,4,0,"Specifying a `.class` parameter when creating an overlay decoration now applies that CSS class to the created `atom-overlay` element:

``` coffee
decoration = editor.decorateMarker(marker, {type: 'overlay', item: element, class: 'my-overlay'})
```

Usually, this isn't necessary, because you can apply styles to the item's view instead. I hit a problem with that when I tried to apply positioning styles to the item, though, because the overlay element's absolute positioning interfered with the positioning I was trying to apply. I've had [a workaround](https://github.com/smashwilson/merge-conflicts/blob/1088c7fbcf32924998ff6c88c41f088bf0da37c9/lib/view/covering-view.coffee#L23) in place for a while, but being able to apply styles to the overlay element itself would make it a bit more graceful, I think. It would also make overlay parameters a bit more consistent with those accepted by the other decorations.
",916,True,en,0
8092,1,1,0,Externals,MaximSokolov,2015-07-27T16:27:56Z,2,0,1,0,,0,False,en,0
8082,1,1,0,Externals,50Wliu,2015-07-25T23:21:42Z,1,1,1,0,"0.83.0 fixes an issue with regex highlighting after a `const` declaration.
0.84.0 fixes the `setInterval` and `setTimeout` snippets not being properly escaped.
",160,False,en,0
8071,2,0,0,Internals,benogle,2015-07-28T01:00:39Z,3,3,3,3,"Closes https://github.com/atom/find-and-replace/issues/149

See atom/scandal#29
",80,True,en,0
8062,1,1,0,Externals,MaximSokolov,2015-08-18T01:07:56Z,8,4,1,24,,0,False,en,0
8061,3,0,0,Externals,50Wliu,2015-07-24T16:13:20Z,3,3,1,0,"- Javascript 0.82.0 now tokenizes the `$` in  `$something` as an instance constructor and also fixes tokenization when destructuring in `const` assignments (`const [first, second, ...rest] = array);`)
- Python 0.38.0 correctly tokenizes `self.something` now
- Go 0.31.0 adds the `fmt printf` snippet for debugging
",314,False,en,0
8053,1,3,0,Externals,oggy,2015-07-25T14:34:33Z,54,0,5,1,"Rationale: I don't like losing my tabs when I close a pane (or accidentally close the wrong pane), so want to be able to move them into another pane just before the pane is destroyed.

This adds both `pane.onWillDestroy -> ...` and `workspace.onWillDestoryPane (pane) -> ...`, analogous to the pane item callbacks.
",315,True,en,0
8051,4,0,0,Internals,maxbrunsfeld,2015-07-23T20:15:52Z,6,5,3,0,"The new service-hub (0.6.2) has fewer changes than when I first tried to upgrade (0.6.0).
",90,True,en,0
8048,2,4,0,Externals,svanharmelen,2015-07-23T19:00:28Z,14,5,2,0,"Fixes #8013
",12,True,en,0
8041,1,8,0,Internals,as-cii,2015-07-24T14:36:10Z,4,0,1,1,"When highlights are positioned outside the line box, they could get hidden by a subsequent tile (because of its opaque background). As a result, subpixel anti-aliasing gets disabled by Chrome.

Using `border-box` as the default `box-sizing` allows highlights to always fit within the line. This won‚Äôt cover cases where a style like `margin` is applied (causing the highlight to go outside its boundaries), but I am not sure we should consider such scenarios given that highlights should be positioned right inside lines.

Fixes #7382
Fixes #7316
Fixes #7772

@karai17 @w1res @burodepeper: it would be great if you guys could try this branch out to see if it actually fixes the issues you reported. If you don‚Äôt know how to build this branch, you can also put the following snippet in your personal stylesheet:

``` less
atom-text-editor::shadow .region {
  box-sizing: border-box;
}
```

Thank you! :pray: 

/cc: @nathansobo @atom/feedback for additional :eyes: 
",967,True,en,0
8025,7,6,7,Externals,lpommers,2015-08-18T16:26:00Z,32,0,3,27,"Closes https://github.com/atom/atom/issues/7103

Add a new command, `editor:copy-selection`, that writes to the clipboard only if the user has selected text 
",158,True,en,0
8020,1,2,0,Externals,bolinfest,2015-07-22T15:35:44Z,2,0,1,0,,0,False,en,0
8010,1,1,0,Internals,maxbrunsfeld,2015-07-22T00:34:07Z,34,22,5,0,"This is a change I've been meaning to make for a while. I made `find-and-replace` and `spell-check` explicitly opt out of marker snapshotting, but in other situations where there are lots of markers (e.g. the linter w/ lots of errors, a big file w/ lots of folds) the marker snapshotting causes noticeable lag.
#### Before

In a 2000-line file w/ 150 folds, `MarkerStore::createSnapshot` takes a long time before and after each change. This character insertion **took 15 ms**.

![screen shot 2015-07-21 at 2 43 16 pm](https://cloud.githubusercontent.com/assets/326587/8813331/7fdf8034-2fb7-11e5-977e-00bd087a21de.png)
#### After

Now that part of the flame graph is gone, because folds aren't snapshotted. Folds shouldn't be snapshotted, because they are destroyed if touched by a change anyway. The same character insertion **took 4 ms**.

![screen shot 2015-07-21 at 2 43 33 pm](https://cloud.githubusercontent.com/assets/326587/8813377/efa24f96-2fb7-11e5-9704-fa86a21b4abf.png)
",981,False,en,0
8009,14,3,1,Internals,jlord,2015-07-23T19:06:02Z,93,65,6,2,":pear: ing with @nathansobo 

Previously document polling happened through timed intervals causing continued use of CPU when the editor was unfocused. 

This PR changes the polling to occur when the DOM is mutated or the window is resized (since that doesn't fall under a DOM mutation). Additionally it changes the way Atom updates the CSS so that it occurs as a mutation and the event is captured. Furthermore! It prevents the cursor from ever starting to blink if it wasn't blinking already which can be caused, for instance, when content is changed in the Settings View.

We've added test coverage but are still testing this branch out to be sure we've:
- covered all the DOM changing scenarios
- not added additional CPU usage when editor _is_ active

cc @atom/feedback, try out this branch too if ya can :+1: 

Fixes https://github.com/atom/atom/issues/4019
Quality Initiative https://github.com/atom/atom/issues/7995
",923,True,en,0
8002,1,5,0,Externals,svanharmelen,2015-07-21T18:41:31Z,3,2,1,0,"By moving down the line that checks if the `precedingRow` is empty, you will still be able to use the `increaseIndentPattern` and `decreaseNextIndentPattern` to influence your indentation.

Now it seems a little weird to me to have a `decreaseNextIndentPattern` match an empty line and by that make the next line decrease it's indent level, but it seems some language packages (tried to) do exactly that before #6808 with the `decreaseIndentPattern`.

While this could have worked for some, IMO it only worked because of the logic error/problem that was changed/fixed in #6808.

So this change enables such a use case again, and even in a much more predicable and exact way. And of course it's also true that if the empty line does _not_ match the `increaseIndentPattern` or `decreaseNextIndentPattern` (which will be the case in most cases) this change will have no effect except for the fact that the also the empty line is now also matched against the regexp's.

As for the tests... I didn't add any new ones for this use case because currently no language package is using this. The issue https://github.com/atom-haskell/language-haskell/issues/40 and some discussion on Gitter lead me to this change/fix as it seems at least the `langange-haskell` package would like to use it. But until (if) they actually do, I cannot write a test for this I think... All existing tests do still pass and I worked with it for a day now and didn't notice any side effects...
",1464,True,en,0
7996,1,6,0,Externals,bolinfest,2015-07-22T08:33:04Z,1,1,1,1,"Once https://github.com/babel/babel/issues/2028 is fixed, we can start
picking up new versions of Babel again.

/cc @sebmck
",124,False,en,0
7966,1,0,0,Externals,mnquintana,2015-07-19T15:18:28Z,1,1,1,0,"This includes a few fixes for the JS grammar.
",46,True,en,0
7957,1,3,0,Internals,simurai,2015-07-23T15:02:34Z,1,0,1,5,"### Problem

The GPU layer added to the .gutter .tiles cause the surounding UI to also composite layers, like the tas or the status-bar. This disables subpixel anti-aliasing and text doesn't look that sharp.

Eventhough the `.gutter` has `overflow: hidden`, it seems Chrome still thinks there is a chance of overlapping and thus creates the extra layers.
### Solution

Creating an own stacking context with `z-index` for the `.gutter` seems to fix it.

![z-index](https://cloud.githubusercontent.com/assets/378023/8700714/7bbbe614-2b48-11e5-834b-c4f72630c089.gif)

Fixes #7904
",577,True,en,0
7953,4,46,6,Externals,acontreras89,2016-02-09T01:51:16Z,231,29,13,206,"**Updated** as of Feb 2016 (see discussion below):
Improve multi-pane API to allow creating empty panes, as well as moving or copying files among them. 
Addresses #4738.
- [x] Add an option (namely `moveActiveItem`) to `Pane::split`, allowing to move the active item when splitting, instead of copying it
- [x] Rewrite `pane:split-<direction>` commands to create empty panes
- [x] Add `pane:split-<direction>-and-<action>-active-item` commands, to achieve original behaviour of the split commands and, alternatively, move the current item instead of copying it
- [x] Add `window:<action>-active-item-to-pane-<direction'>` to allow moving and copying files between panes

Where
- `<direction>` is either `up`, `down`, `right` or `left`
- `<action>` is either `copy` or `move`
- `<direction'>` is either `above`, `below`, `on-right` or `on-left`

Behavior for current key bindings is kept. For example, <kbd>cmd-k left</kbd> (<kbd>ctrl-k left</kbd>) will now trigger `pane:split-left-and-copy-active-item` instead of `pane:split-left`.
",1034,False,en,0
7950,1,0,0,Internals,nathansobo,2015-07-17T21:18:47Z,1,1,1,0,"This avoids an assertion failure due to destroying the last selection, so we can reduce the noise and find code paths that destroy it incorrectly.
",147,True,en,0
7949,1,0,0,Internals,nathansobo,2015-07-17T20:02:04Z,15,14,1,0,"Fixes #7923 
Fixes #7910
Fixes #7853
Fixes #7582 
Fixes #7198
Fixes #7063

If we encounter a scope end tag, we'll just keep popping scopes until we find the matching scope start tag. I'm not totally sure why we're getting unmatched starts, but I don't think it's a catastrophic enough situation to warrant throwing this exception anymore.
",339,False,en,0
7944,1,1,0,Externals,thomasjo,2015-07-17T13:34:13Z,2,2,1,0,"Bumps both `one-dark-syntax` and `one-light-syntax` to v1.1.0 which adds highlighting for the `.support.type` scope. 

See https://github.com/atom/one-dark-syntax/issues/36 for details.
",186,True,en,0
7916,1,10,0,Externals,oggy,2016-01-26T22:45:00Z,44,3,2,195,"The ""enum"" property may now specify options as a list of [value,
description] pairs.

This goes with atom/settings-view#589.
",125,False,en,0
7896,1,2,0,Externals,rameshvarun,2015-09-21T21:04:43Z,1,1,1,68,"Several functions on the [PackageManager docs page](https://atom.io/docs/api/v1.0.2/PackageManager) return objects of type `Package`. The docs link to the address https://atom.io/docs/api/v1.0.2/Package, which does not exist as `Package` is not marked as an extended class (thus no docs page is generated for it). This PR makes `Package` an extended class so that the docs links are no longer broken.
",401,True,en,0
7881,1,1,0,Externals,bolinfest,2015-07-14T13:25:44Z,1,1,1,0,"Upgrade Babel to pick up bug fixes and to ensure a version that
has support for transforms such as `es7.classProperties`.

This transform is particularly useful for classes that subclass `React.Component`
as shown in http://babeljs.io/blog/2015/06/07/react-on-es6-plus/#property-initializers.
",293,False,en,0
7880,1,1,1,Externals,ghost,2015-07-17T21:29:03Z,1,1,1,3,,0,False,en,0
7879,3,2,4,Externals,ssorallen,2015-07-22T21:44:30Z,22,2,1,9,"- Mark `dismiss` as an ""extended"" API because its use case is uncommon.
- Mark event handler functions as public because responding to a
  notification being displayed or dismissed is useful.
",192,False,en,0
7877,42,92,5,Externals,thomasjo,2015-09-08T15:41:25Z,68,52,11,56,"This is a continuation of #6877.
## Blocking issues
- [x] Building with io.js v2.x is not supported.
- [x] Crash caused by invalid memory access during exit/closing window.
- [x] 8 failing spec assertions.
- [x] In OS X closing all windows exits the application.
- [x] Building on Linux (Ubuntu 12.04.5 LTS) is failing due to compilation errors.
- [x] Failing settings-view specs.
- [x] apm builds incompatible native modules.
- [x] Experiment with upgrading to Electron v0.31.x.  
  **Conclusion**: Not viable in this PR since it requires bumping every single dependency to NAN 2.x.
- [x] Wait until https://github.com/atom/incompatible-packages/pull/9 is ready to merge.
- [x] Preserve `CustomEvent` as type of object dispatched by command registry
- [x] Investigate why symbols-view is failing to find any symbols
- [x] Investigate extremely long paint times for cursor movement on first-gen MBP retinas
### Issue details
#### Building with io.js v2.x is not supported

**Resolution**: Do not update npm. The version shipped with io.js is patched to work around the problems with node-gyp.

Any attempt to execute `script/build` when using io.js v2.x fails with

```
Installing build modules...
gyp ERR! configure error
gyp ERR! stack Error: 404 response downloading https://nodejs.org/dist/v2.4.0/node-v2.4.0.tar.gz
gyp ERR! stack     at Request.<anonymous> (/Users/thomasjo/.nvm/versions/io.js/v2.4.0/lib/node_modules/npm/node_modules/node-gyp/lib/install.js:251:14)
gyp ERR! stack     at emitOne (events.js:82:20)
gyp ERR! stack     at Request.emit (events.js:169:7)
gyp ERR! stack     at Request.onRequestResponse (/Users/thomasjo/.nvm/versions/io.js/v2.4.0/lib/node_modules/npm/node_modules/request/request.js:985:10)
gyp ERR! stack     at emitOne (events.js:77:13)
gyp ERR! stack     at ClientRequest.emit (events.js:169:7)
gyp ERR! stack     at HTTPParser.parserOnIncomingClient (_http_client.js:415:21)
gyp ERR! stack     at HTTPParser.parserOnHeadersComplete (_http_common.js:88:23)
gyp ERR! stack     at TLSSocket.socketOnData (_http_client.js:305:20)
gyp ERR! stack     at emitOne (events.js:77:13)
gyp ERR! System Darwin 14.4.0
gyp ERR! command ""/Users/thomasjo/.nvm/versions/io.js/v2.4.0/bin/iojs"" ""/Users/thomasjo/.nvm/versions/io.js/v2.4.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""rebuild""
gyp ERR! cwd /Users/thomasjo/Code/atom/atom-electron/build/node_modules/runas
gyp ERR! node -v v2.4.0
gyp ERR! node-gyp -v v2.0.2
gyp ERR! not ok
```
#### Crash caused by invalid memory access during exit/closing window

**Resolution**: Solved in Electron v0.30.2.
[Full crash log](https://gist.github.com/thomasjo/8080e027a291c9402292).
The problem is a bit tricky to reproduce, but when it occurs it happens when a window is closed or when exiting Atom, which leads me to believe the problem is related to storing state. Seems like the crash is caused by a `nullptr` reference.
#### 8 failing spec assertions

[Full output](https://gist.github.com/thomasjo/541278db1f5ac7675a87) from `apm test`. Summary of failing specs;
##### command-registry-spec.coffee
- [x] `Expected undefined to be HTMLNode` at command-registry-spec.coffee:212:16.  
  _Caused by https://code.google.com/p/chromium/issues/detail?id=495437._
##### package-manager-spec.coffee

All failures originate from `it triggers the activation event on all handlers registered during activation`.
- [x] `Expected 0 to be 1`.
- [x] `Expected 0 to be 1`.
- [x] `Expected 0 to be 1`.
- [x] `Expected 0 to be 2`.
- [x] `Expected 0 to be 2`.
- [x] `Expected 0 to be 1`.
##### pane-container-view-spec.coffee
- [x] `Expected [ undefined ] to equal [ { 0 : HTMLNode, element : <getter>, activeItemModifiedChanged : Function, ...` at pane-container-view-spec.coffee:60:21.
#### In OS X closing all windows exits the application

**Resolution**: Side-effect of crashing problem. Resolved in Electron v0.30.2.

When running against atom-shell v0.22.3 Atom behaves as expected and leaves the application running even after all application windows have been closed. When running against Electron v0.30.0 however, after all windows have been closed the application exits.
#### Building on Linux (Ubuntu 12.04.5 LTS) is failing due to compilation errors

**Resolution**: Using GCC 4.7+, or Clang 3.0+. Also fixed in CI by ensuring the usage of Clang instead of GCC.

Attempts to build on Ubuntu 12.04.5 LTS (64-bit) fails while compiling npm modules, throwing errors similar to

```
gyp ERR! cwd /home/travis/build/atom/atom/node_modules/oniguruma
gyp ERR! node -v v0.10.35
gyp ERR! node-gyp -v v1.0.2
gyp ERR! not ok 
In file included from /home/travis/.atom/.node-gyp/.node-gyp/0.30.1/src/node.h:42:0,
                 from ../node_modules/nan/nan.h:24,
                 from ../src/repository.h:29,
                 from ../src/repository.cc:22:
/home/travis/.atom/.node-gyp/.node-gyp/0.30.1/deps/v8/include/v8.h:543:1: error: expected unqualified-id before ‚Äòusing‚Äô
/home/travis/.atom/.node-gyp/.node-gyp/0.30.1/deps/v8/include/v8.h:922:1: error: expected unqualified-id before ‚Äòusing‚Äô
```

The compilation failure is caused by the fact that GCC 4.7 or newer is required due to V8 using the _template alias_ feature in C++, and that is not supported in GCC 4.6.3 which is the newest GCC (officially) available in Ubuntu 12.04.5 LTS.

**Solution**: Compile with Clang 3.4 on Ubuntu 12.04.5 LTS;

```
$ sudo apt-get install clang-3.4
$ CXX=clang++ script/build
```

For Travis CI support, we should specify `compiler: clang` in `.travis.yml`. (http://docs.travis-ci.com/user/languages/c/#Choosing-compilers-to-test-against)
#### Failing settings-view specs

Resolution: Fixed bugs in settings-view package@0.211.3.

```
ThemesPanel
  when a UI theme is selected
    it updates the 'core.themes' config key with the selected UI theme
      Expected [ 'atom-dark-syntax' ] to equal [ 'atom-light-ui', 'atom-dark-syntax' ]. (spec/themes-panel-spec.coffee:53:46)
  when a syntax theme is selected
    it updates the 'core.themes' config key with the selected syntax theme
      Expected [ 'atom-dark-ui' ] to equal [ 'atom-dark-ui', 'atom-light-syntax' ]. (spec/themes-panel-spec.coffee:58:46)
  when the 'core.config' key changes
    it refreshes the theme menus
      Expected 'atom-dark-ui' to be 'atom-light-ui'. (spec/themes-panel-spec.coffee:69:36)
      Expected 'atom-dark-syntax' to be 'atom-light-syntax'. (spec/themes-panel-spec.coffee:70:40)


Finished in 17.811 seconds
101 tests, 440 assertions, 4 failures, 0 skipped
```
#### apm builds incompatible native modules.

**Resolution**: Solved by apm v1.0.3.

When apm builds native modules they end up incompatible with Atom. See https://github.com/atom/atom/pull/7877#issuecomment-127031350 for more details.
## Other potential problems
1. ~~Currently it does not seem like it's possible to use this build of Atom as a Git editor; closing the spawned window does not result in the process exiting as expected it seems like, and thus leaves the Git terminal process waiting for the input sequence to end.  
   This is possibly related to issue _In OS X closing all windows exits the application_.~~ Resolved by upgrading to Electron v0.30.2.

---

Fixes https://github.com/atom/atom/issues/6335
Fixes https://github.com/atom/atom/issues/3826
Fixes https://github.com/atom/atom/issues/7502
Fixes https://github.com/atom/atom/issues/3636
Fixes https://github.com/atom/atom/issues/6243
Fixes https://github.com/atom/atom/issues/6306
Fixes https://github.com/atom/atom/issues/6219
Fixes https://github.com/atom/atom/issues/7811
Fixes https://github.com/atom/atom/issues/7374
Fixes https://github.com/atom/atom/issues/8309
Fixes https://github.com/atom/atom/issues/6513
",7710,False,en,0
7869,1,2,0,Internals,izuzak,2015-07-13T18:58:51Z,1,1,1,0,"It seems that the `config.get` and `config.set` APIs are not fully compatible. The `set` API takes a scope selector which must be prefixed with a `.`, while the `get` API takes a scope descriptor which doesn't need to have a `.` (it's first converted into a ScopeDescriptor and then then that object prepends a `.` if it's missing, as far as I can tell). Would be nice if they were compatible in this way, but for now -- I think fixing the example would be :sparkles:.

cc @maxbrunsfeld for :eyes: since Git blame says you were polishing these examples in the past. 
",567,True,en,0
7863,1,2,0,Externals,bolinfest,2015-07-13T21:11:29Z,1,0,1,0,"Because the target environment in Atom supports for/of natively,
do not transpile for/of using Babel. Without this change, the following code:

``` js
var arr = ['foo', 'bar', 'baz'];
for (var item of arr) console.log(item);
```

would be unnecessarily be transpiled to:

``` js
var arr = ['foo', 'bar', 'baz'];
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var item = _step.value;
    console.log(item);
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}
```
",900,False,en,0
7859,2,4,0,Externals,dsandstrom,2015-07-17T21:11:41Z,42,10,2,4,"Fixes #7656 #7658

I added underscore to the snake case/camel case regex segments so that we can skip over it when moving right and left.  In addition, I added non-English letters to the subword regex for better compatibility.

Sorry about combining these into one PR, but I thought it would save time and hassle.
",314,True,en,0
7858,2,5,4,Externals,svanharmelen,2015-07-17T16:46:47Z,18,9,2,4,"The fix to ignore invisibles (64dfda572dd3db46ff841db9659f413a5f9b3b21) introduces a new bug when pasting lines from the clipboard:

![before](https://cloud.githubusercontent.com/assets/4171547/8640040/70538f4e-28ea-11e5-97ab-d39416dcf8fa.gif)

As the commit takes the content of `@buffer.lineFromRow(bufferRow)` to test against the `decreaseIndentRegex`, it will actually test the content of the row the cursor is on instead of the content that is being pasted. And this (of course) could cause unexpected indentations...

In turn the same goes for checking if the `bufferRow` is a commented line, so this check is removed again.

After this commit pasting above a line matching the `decreaseIndentRegex` works as expected again:

![after](https://cloud.githubusercontent.com/assets/4171547/8640053/139c7a8a-28eb-11e5-9f18-4329950dfc22.gif)
",842,True,en,0
7841,1,1,0,Externals,mnquintana,2015-07-11T12:18:08Z,1,1,1,0,"This [removes the redundant updates container](https://github.com/atom/settings-view/pull/582) from the package detail view.
",125,True,en,0
7813,2,0,0,Internals,nathansobo,2015-07-09T16:19:31Z,34,2,3,0,"I'm trying to hunt down these uncaught exceptions that seem to derive from corrupted states. This PR seasons in some additional checks to help us track where things go wrong.
- An assertion whenever we update screen lines that the count matches the buffer if there are no folds or soft wraps. This should help us see the moment this goes wrong if it does.
- The inclusion of change counts in exception metadata. Every time the buffer changes, we'll increment a count. When the tokenized buffer and display buffer process these changes, we'll assign their change counts to match. If these numbers ever differ, it means we haven't processed a change between two layers.
",668,False,en,0
7809,2,1,0,Internals,thedaniel,2015-07-09T16:54:55Z,25,19,2,0,"Registering them in pane-container led to packages deserializing before e.g. Gutter was available.
",99,True,en,0
7808,1,0,0,Internals,maxbrunsfeld,2015-07-09T00:17:55Z,33,2,2,0,"Generally, I want an exception to be thrown when packages try to put markers at invalid positions: it's a problem in the package. But in the case of calling `Workspace::open` with an `initialLine` or `initialColumn`, the stack trace doesn't include the package, because the method is async. It also seems like it's not a big deal to ignore these parameters if they're something that's not a number, like `NaN`.

Fixes https://github.com/atom/atom/issues/7398
Fixes https://github.com/atom/atom/issues/7672
",506,True,en,0
7804,1,0,0,Internals,nathansobo,2015-07-08T22:36:07Z,1,1,1,0,,0,False,en,0
7802,10,1,0,Internals,kevinsawicki,2015-07-08T22:57:17Z,27,14,2,0,"Adds several more codes to the handling of read/write errors that have been reported via notifications.
### Open
- [x] `EIO`
- [x] `ENOTCONN`
- [x] `ENXIO`
- [x] `UNKNOWN`
### Save
- [x] `EINTR`
- [x] `EIO`
- [x] `ENOTSUP`
- [x] `ESPIPE`

Refs #2539
Closes #4467
Closes #6348
Closes #6799
Closes #7203
Refs #7649
Closes #7651
Closes #7654
Closes #7780
Closes https://github.com/atom/tree-view/issues/412
",404,False,en,0
7798,1,0,0,Internals,nathansobo,2015-07-08T22:01:29Z,11,0,1,0,"Refs #6117
",11,True,fr,0
7797,2,7,0,Internals,bkeepers,2015-07-08T22:23:15Z,6,0,2,0,"I have discussed this with @atom/core and they intend to adopt and uphold this code of conduct. It will apply to all repositories in the [@atom GitHub organization](https://github.com/atom), the [discussion forum](https://discuss.atom.io/), and [chat rooms](http://atom-slack.herokuapp.com/).

A blog post on atom.io will be coming soon about it.
",347,True,en,0
7778,3,0,0,Internals,nathansobo,2015-07-08T17:43:55Z,41,23,5,0,"This code recovers gracefully from situations where we try to measure off the end of a text node. Since this situation is unexpected, when it happens, we ask the user (only once) for the text of the line where it's happening. Hopefully we can use this information to get a better understanding of why this is happening.
",320,True,en,0
7770,1,3,2,Internals,nathansobo,2015-07-08T00:26:04Z,10,10,1,0,"Our current approach relies on `menu.sendActionToFirstResponder`, which is only defined on OS X. It would be good to actually make this work elsewhere, but this will at least prevent the exception for the undefined method.

Closes #6587
",237,True,en,0
7769,6,3,0,Internals,kevinsawicki,2015-07-07T21:29:17Z,22,0,2,0,"Previously the API documented on `atom.notifications` was not validated so you could create a notification with a non-string message, non-object options, or non-string detail. 

This would cause the notifications package to throw errors when it tried to convert a non-string markdown message.

Now it verifies the options on creation and throws error when they are invalid.

Closes https://github.com/atom/notifications/issues/79

/cc @benogle 
",445,True,en,0
7768,1,1,0,Internals,izuzak,2015-07-07T18:09:29Z,1,1,1,0,"See https://github.com/atom/atom/pull/7717#issuecomment-119280666 for context. 

cc @kevinsawicki :zap: for catching that case as well
",135,True,en,0
7767,1,2,0,Externals,ssorallen,2015-07-07T17:51:25Z,4,0,1,0,"Add missing `name` argument to `enablePackage` and `disablePackage` docs.
",74,True,en,0
7754,1,1,0,Internals,as-cii,2015-07-07T12:29:45Z,12,1,2,0,"In #7733 we have removed a couple of update statements that were no longer needed. Unfortunately, we didn‚Äôt catch a :bug: that caused the editor not to scroll automatically when the model changed.

This PR fixes it and also adds a spec to prevent this to happen in the future. The :beetle: was caused by the following scenario:
1. A new line was inserted at the end of the buffer, causing the content height to be bigger;
2. The model triggered a `setScrollTop` on `TextEditorPresenter` with the correct value;
3. `TextEditorPresenter::setScrollTop` didn‚Äôt know about the change in the model yet and tried to constrain `@scrollTop` using a bad value (i.e. the content height before the change) as the upper bound;
4. :bug: 

/cc: @maxbrunsfeld @nathansobo 
",761,True,en,0
7748,1,0,2,Internals,maxbrunsfeld,2015-07-07T16:14:07Z,33,19,2,0,"Packages like `go-to-line` [use the `::onWillInsertText` event](https://github.com/atom/go-to-line/blob/70428c943c4e1c5c2675d90e418bdcf2fd62833b/lib/go-to-line-view.coffee#L24) to stop invalid text from being inserted into a text-editor. Previously, this event was not emitted when pasting. This allowed invalid data to enter the editor in the `go-to-line` dialog.

Fixes atom/go-to-line#22
",391,True,en,0
7746,2,0,0,Internals,kevinsawicki,2015-07-07T17:10:54Z,23,8,2,0,"These appear to not always be there depending on the forked process.

Closes #7459
",83,True,en,0
7744,1,1,0,Internals,kevinsawicki,2015-07-07T00:08:40Z,10,10,2,0,"This is a stopgap solution to intermittent require errors in the browser process because of an asar/electron bug. This will not be needed once #6877 is merged.

Follow on to https://github.com/atom/atom/pull/7560

Closes #6276
Closes #7591 
Closes https://github.com/atom/tabs/issues/192
Closes https://github.com/atom/tree-view/issues/399
",340,True,en,0
7741,1,1,0,Externals,mnquintana,2015-07-06T23:07:27Z,1,1,1,0,"This includes a fix for https://github.com/atom/tabs/issues/182
",64,True,en,0
7733,2,1,0,Internals,as-cii,2015-07-06T21:49:14Z,1,20,1,0,"This PR gets rid of a couple of `update` statements in `TextEditorPresenter` that were getting executed when some event was triggered. They are unnecessary because they‚Äôll get executed anyway as soon as `getState` is called.

Although this is pretty straightforward, another pair of :eyes: is most welcome. Thanks! :bow: 

/cc: @nathansobo @atom/feedback 
",358,True,en,0
7717,1,4,0,Internals,izuzak,2015-07-07T17:14:28Z,1,1,1,2,"This should fix https://github.com/atom/atom/issues/7714, though I'm not really sure when an error won't have a message defined (other than manually setting it to undefined, which a package could do I guess?). 

cc @kevinsawicki for :thought_balloon: :eyes: 
",259,True,en,0
7699,2,2,1,Externals,nounoursheureux,2015-07-06T17:32:27Z,4,1,1,2,"Fixes #6796
If the dialog opens a file its title is changed to ""Open File"", and if it opens a directory its title is changed to ""Open Folder"".
",143,False,en,0
7683,1,0,0,Externals,mnquintana,2015-07-03T14:00:49Z,1,1,1,0,"This fixes the color for the path tile in the status bar.
",58,True,en,0
7667,1,0,0,Internals,jlord,2015-07-06T17:14:00Z,1,1,1,3,"This updates the version of `minidump` to `0.9` which includes a fix for building on ARM machines.
 :computer: :muscle: :sparkles: 

:link: https://github.com/atom/node-minidump/issues/5
",187,False,en,0
7660,1,0,0,Externals,mnquintana,2015-07-02T21:06:10Z,1,1,1,0,"This adds a ""copy path"" feature when clicking on the file path.
",64,True,en,0
7640,1,1,0,Internals,nathansobo,2015-07-01T22:35:28Z,1,0,1,0,"/cc @benogle 
",14,True,de,0
7638,2,18,14,Externals,joefitzgerald,2015-07-09T20:42:31Z,163,15,11,8,"This PR:
- Adds `activationHooks` to package.json
- Triggers the `{grammar-package-name}:grammar-used` hook when a text-editor-element's grammar is set

This allows package authors to defer package activation for language-specific packages until the first use of the grammar(s) their package serves. It also leaves open the possibility to trigger other activation hooks in the future with minimal code.
- Fixes #6629

/cc @kevinsawicki
",436,False,en,0
7633,1,0,2,Internals,nathansobo,2015-07-01T19:09:14Z,8,0,2,0,"Closes #5978

We end up attempting to retrieve a view for pane items from a WeakMap, which can only use objects as keys. Throwing an exception earlier helps to clarify to package authors that this won't work.
",209,True,en,0
7624,5,14,0,Externals,isghe,2015-07-02T14:50:11Z,15,15,3,1,"From:
[OS X Human Interface Guidelines -Terminology and Wording](https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/OSXHIGuidelines/TerminologyWording.html#//apple_ref/doc/uid/20000957-CH15-SW3)

> IMPORTANT
> 
> Be sure to create the ellipsis character using the key combination Option-; (Option-semicolon). This ensures that an assistive app can provide the correct interpretation of the character to a disabled user. If you use three period characters to simulate an ellipsis, many assistive apps will be unable to make sense of them. Also, three period characters and an ellipsis don't look the same because the periods are spaced differently than the points of an ellipsis.
",708,False,en,0
7612,8,6,0,Internals,nathansobo,2015-07-01T17:47:33Z,394,2,10,0,"Continuation of #5806 in preparation to merge.

@dsandstrom I've changed the regular expression a little bit so we don't need a hack to move the cursor to the beginning of the buffer. It also required a change to text-buffer to allow regex matches at the beginning of the scan range.

One of the tests changed slightly in behavior, but it's still seeming reasonable and things are working intuitively in all my tests.

I'm considering adding the following emacs-style bindings for those of us who are averse to the arrow keys:
- `ctrl-alt-f` Move subword forward
- `ctrl-alt-b` Move subword backward
- `ctrl-alt-d` Delete subword forward
- `ctrl-alt-h` Delete subword backward
- `ctrl-alt-shift-F` Select subword forward
- `ctrl-alt-shift-B` Select subword backward
",766,True,en,0
7602,1,1,0,Internals,nathansobo,2015-06-30T20:54:47Z,21,14,4,0,"In #7563, I fixed an issue where alignment spaces were getting stripped when auto-indenting lines that combined tabs and spaces by only allowing one kind of character to count as indentation. There were concerns, however, that this would make Atom's indentation handling less robust in the face of sloppy code where tabs and spaces are interleaved.

This takes an approach more similar to @driskell's original PR (#5658), but we continue to use floating point numbers for the indent level. When hard tabs are enabled, we handle the fractional portion of the indent level by appending an appropriate number of trailing spaces.

@driskell Any thoughts on this one?
",663,True,en,0
7596,18,4,3,Externals,mnquintana,2015-07-06T17:12:28Z,26,7,2,6,"This PR parallelizes the Travis build so that core specs and package specs can be run concurrently, significantly cutting down on build time.

| Before | After |
| --- | --- |
| [~27 min](https://travis-ci.org/atom/atom/builds/68887449) | [~22 min](https://travis-ci.org/atom/atom/builds/68996020) |

~22 minutes is still a pretty long time, so there's still some work to be done here. :wink: 

Possible next steps:
- Set up custom caching for packages on S3
  - If we manage to fix the issue below, then we might be able to use [the custom caching scheme built into Travis.](http://docs.travis-ci.com/user/caching/#Arbitrary-directories) (It's only supported for the container-based infrastructure on Linux.) Although, to do this, I think we'd have to add an option to `apm install` to only install if the package isn't already installed.
- Fix flaky specs so they can be run on Travis' (much faster and more stable) Linux infrastructure instead of the Mac infrastructure (was discussing this with @as-cii at CodeConf ‚Äì this is probably the trickiest of the two)

/cc @as-cii @atom/feedback 
",1095,True,en,0
7587,1,0,0,Externals,mnquintana,2015-06-30T22:54:42Z,1,1,1,0,"Refs https://github.com/atom/one-dark-ui/pull/81

/cc @simurai 
",64,True,en,0
7573,1,2,0,Externals,viddo,2015-06-30T16:20:12Z,1,1,1,0,":point_up: 
",12,True,en,0
7563,1,9,0,Internals,nathansobo,2015-06-30T00:19:44Z,25,11,3,0,"Closes #5658 
Closes #5642

A huge huge thanks to @driskell for identifying the issue and taking action to fix it. I used a slightly adapted version of his test case in this PR, but took a different approach to solving the problem.

Previously, we allowed a mix of tabs and spaces to be counted toward the indentation of a line. This caused problems when auto-indenting lines in a hard-tabbed file that contained ‚Äúalignment spaces‚Äù, such as occurs in aligned comment blocks. For this case, it makes more sense to assume that the line is indented via tabs only, and consider the subsequent alignment space as part of the line‚Äôs content. This means it's actually more correct to only consider tabs **or** spaces, but not both when reading or updating a line's indentation.
",777,False,en,0
7562,6,4,5,Externals,mnquintana,2015-07-29T19:48:42Z,10,5,2,29,"From https://github.com/atom/atom/issues/7552#issuecomment-116735581

A lot of people try to use the config files as they would a stylesheet, trying to override keybindings for instance by repeating the same selector multiple times in the file, which causes issues because CSON keys must be unique. This makes it a bit more explicit that keys need to be unique.
",362,True,en,0
7560,1,0,0,Internals,kevinsawicki,2015-06-29T20:45:58Z,2,4,2,0,"This is a temporary fix for #6548 until #6877 is merged.

Basically just do the requires up front instead of deferred so this asar bug isn't hit.

This should have an incredibly minimal negative impact to startup time since these deferred requires are incredibly small and asar is now used so it is only two extra file reads at startup.

Closes #6548 
",352,True,en,0
7558,4,2,3,Internals,nathansobo,2015-06-30T20:54:36Z,68,3,4,1,"This was briefly introduced in #7350, but reverted before we went 1.0 to minimize risk. It's the logical next step in attacking our uncaught exceptions.
",153,True,en,0
7521,1,1,0,Externals,ghost,2015-06-29T02:26:13Z,1,6,1,0,"Use of license objects or a ""licenses"" property containing an array of license objects are now deprecated. Instead, use SPDX expressions. https://docs.npmjs.com/files/package.json#license
",188,True,en,0
7458,1,1,0,Externals,nounoursheureux,2015-07-24T01:09:11Z,1,1,1,27,"It is no longer selected by double-clicking. #7047 
",52,True,en,0
7426,1,1,0,Externals,drewkett,2015-06-27T14:01:56Z,1,1,1,1,"PYTHON environment variable needs to be in all caps
",52,True,en,0
7411,2,2,0,Externals,deprint,2015-07-06T20:56:20Z,17,3,2,11,"`TextEditor` has a function called `setMini` that toggles the mini state of an editor. The problem is that it only ""changes"" the `TextEditor` itself and `TextEditorPresenter`, but not `TextEditorElement`.
Before fix:
![unfixed-setmini](https://cloud.githubusercontent.com/assets/7817714/8353884/1fbc8b9e-1b43-11e5-965a-8e420f80ab94.png)
After fix:
![fixed-setmini](https://cloud.githubusercontent.com/assets/7817714/8353886/2774bd7a-1b43-11e5-8c85-a38d264e470f.png)
Code:

``` coffeescript
@content: ->
    ...
    @div class:'editor-item', =>
            @subview 'test_data', new TextEditorView({mini:true, placeholderText:'Test Input'})
    ...

toggleMini: ->
    editor = @test_data.getModel()
    editor.setMini(not editor.isMini())
```
",743,False,en,0
7395,1,3,0,Externals,oggy,2015-06-30T22:25:16Z,24,0,2,6,"Hi,

I'd love to have this here `will-remove-item` event on Pane. The motivation is for oggy/tab-switcher#11, where I want to determine in a `did-change-active-item` hook if an item is being activated because the user clicked the tab, or if it's just because the active item was removed and this was next to it (which I could do by setting a flag between `will-remove-item` and `did-remove-item`).

There are probably many possible solutions here, but this seemed the most generic. WDYT?
",488,True,en,0
7381,1,1,0,Externals,blopker,2015-06-23T10:53:43Z,1,1,1,0,"Cheers! :beers: 
",17,True,nl,0
7377,3,5,0,Externals,mnquintana,2015-07-27T17:42:48Z,6,1,4,34,"Closes https://github.com/atom/atom/issues/3377
Closes https://github.com/atom/about/issues/2

This PR adds a new package - [`about`](https://github.com/mnquintana/atom-about) - dedicated to viewing information about your Atom installation within Atom, across all platforms.

![About screenshot](https://raw.githubusercontent.com/mnquintana/atom-about/master/resources/about-atom.png)

_Note: The color on the Atom logo is the hover state._

Right now it doesn't do a whole lot (you can copy the version number though), but I have several enhancements planned right now (showing all Atom org contributors, checking for updates, checking if latest commit if using built Atom, installed packages, etc), but that should make it a bit easier to review. I plan on continuing to maintain this package if it gets merged (along with the core team and the rest of the maintainers and anyone else who wants to pitch in :smile:).

If the team decides to go forward with this, then we should:
- [x] Transfer repo to Atom org
- [x] Transfer atom.io ownership to atom
- [x] Remove Command Palette entry for About: About Atom

Let me know what you think!

/cc @simurai @atom/feedback 
",1170,False,en,0
7373,1,1,0,Internals,nathansobo,2015-06-22T20:09:11Z,36,111,4,0,"Reverts atom/atom#7350
",23,True,en,0
7368,1,2,0,Externals,amayer5125,2015-06-22T16:16:17Z,12,1,1,0,"Fedora 22 uses dnf
yum command will not work
",45,False,en,0
7360,4,1,2,Internals,izuzak,2015-06-22T18:10:17Z,23,0,2,0,"This fixes https://github.com/atom/command-palette/issues/42 using the approach suggested in https://github.com/atom/command-palette/issues/42#issuecomment-104730041.

Without the fix, the test added in 6521c86 expectedly fails with:

```
CommandRegistry
  ::add(selector, commandName, callback)
    it throws an error when called with an non-function callback
      TypeError: Cannot read property 'message' of null (spec/command-registry-spec.coffee:168:22)
```

With the fix added in d477377, the tests pass again.

cc @nathansobo @kevinsawicki for :eyes: 
",560,True,en,0
7351,1,1,0,Externals,mnquintana,2015-06-22T18:02:01Z,1,1,1,2,"`Clipboard::write()`'s `metadata` argument is optional, but it's currently marked as required - this updates the docs to mark it as optional.

/cc @atom/feedback
",162,True,en,0
7350,7,3,0,Internals,nathansobo,2015-06-22T17:18:44Z,111,36,4,2,"There are a few hard-to-reproduce uncaught exceptions lurking in Atom that are giving a subset of our users a hard time. Until now, in order to solve these kinds of mysteries, our only option other than raw luck with reproduction steps or a brilliant stroke of insight was to be more aggressive about throwing exceptions when getting into an invalid state. But, of course, we're extremely reluctant to do that because who wants to introduce an even greater chance of throwing an exception?!

This PR enables a better approach by adding a new tool to our box: `atom.assert`. This global method takes a condition, a description message, and an optional metadata callback as follows:

``` coffee
atom.assert a is b, ""a is b"", -> {a, b}
```

Now, whenever we have uncaught exceptions, our goal should be as follows:
- If appropriate, do something to suppress the exception. This may lead to other, weirder errors, but we also may survive without the user ever noticing. This is obviously an extremely short-term strategy, and it will need to be applied judiciously.
- Start forming hypotheses and seasoning in efficient-to-run assertions that can investigate how and where things might be going wrong. This will enable us to start chasing errors to their source as we put out releases.

An example of this approach is included in this PR, referencing #5905.

@atom/feedback Once we start doing this, it could be fairly important to know if an assertion has failed when someone is reporting a bug. We'll be reporting assertion failures to bugsnag and logging them to the console. Do we want some other indicator? My main thing is that we need to be able to insert assertions without interrupting a user's flow.

It's also worth noting that this changes the API of `atom.onDidThrowError` to yield the entire `Error` object to subscribers. It's made backward-compatible by adding the old event properties to the error object. I found no packages that use this method, so it should be pretty safe to change this.
",2005,True,en,0
7348,1,1,0,Externals,tony612,2015-06-22T16:28:03Z,2,0,1,2,,0,False,en,0
7341,1,5,0,Internals,as-cii,2015-06-19T17:52:17Z,29,1,4,0,"Fixes #7337.

We caught another :bug: related to #7320. Basically, when multiple `TextEditorComponent`s were created for the same instance of `TextEditor`, we weren‚Äôt removing some event listeners from the recycled gutter DOM node which, in turn, had multiple handlers listening and acting when a certain event was fired (e.g. `onMouseDown` and `onMouseClick`).

@maxbrunsfeld: could you give this a shot and look out for the bug you reported? I am quite confident this is going to fix it but I‚Äôd like to have your feedback as well. :bow: 

I think this is likely to be the last fix for all the so-called ‚Äúglobal state‚Äù issues that we have encountered over the last days. However, I won‚Äôt feel very confident about changing these areas of the code without introducing new :beetle:s. I like @jssln's proposal :bulb: of having a `1:1` correspondence between `TextEditorComponent` and `TextEditor` and I think we have two ways of handling it:
1. When panes are split, always create a new instance of `TextEditor`.
2. When `TextEditorElement` is detached, avoid creating a new instance of `TextEditorComponent` and simply use the previous one.

@nathansobo: this PR can be merged without addressing the above proposal, but I am curious about your :thought_balloon: on this. My two cents are that we should go for 2), as it‚Äôs kinda pointless to always create new instances as proposed in 1). I am sure, though, that there are good reasons for that behavior to exist  and it‚Äôd be great if you could share your thoughts about them.

Thanks everyone! :bow: 
",1564,True,en,0
7338,4,2,4,Internals,simurai,2015-06-19T16:10:16Z,17,10,1,0,"This PR adds some examples (commented). Fixes https://github.com/atom/welcome/issues/34

It also changes the line about Less and mentions that you can use normal CSS (or Less). Some people might get discouraged when they read about having to learn Less.
",254,True,en,0
7329,9,24,0,Internals,kevinsawicki,2015-06-24T22:05:29Z,31,47,10,6,"Running task list of cleanup to do before 1.0 ships:
### Things to do before 1.0 ships
- [x] Bump `package.json` version to `1.0.0`
- [x] Remove `--include-deprecated-apis` command line option
- [x] Bump [apm](https://github.com/atom/apm) to 1.0 https://github.com/atom/apm/pull/383
- [x] Upgrade apm package/theme templates to use `^1` `atom` engine field https://github.com/atom/apm/pull/383
- [x] Remove [React forks](https://github.com/atom/atom/blob/master/package.json#L54-L55) from `package.json`
### Things to do after 1.0 ships
- [ ] Update screenshots in docs repo
- [x] Remove `--one` flag from https://github.com/atom/ci files
- [ ] Update `engines` version ranges in `package.json` for bundled packages?
- [ ] Remove or flesh out TODOs in docs

Closes https://github.com/atom/atom/issues/3684
",806,False,en,0
7324,2,4,0,Internals,maxbrunsfeld,2015-06-17T19:41:59Z,41,17,4,0,"Previously, when pasting text with the `Auto Indent on Paste` setting enabled, the indentation of the affected lines would always be adjusted afterwards based on the language's 'suggested indentation'. This would sometimes have the effect of undoing the paste!

Now, this adjustment is _only_ performed if the pasted text spans more than one line. I believe this matches the behavior of TextMate, which I find to be very intuitive.

Also, while fixing this, I noticed an unrelated bug where the `decreaseIndentPattern` would sometimes incorrectly fail to match, because it was being tested against the version of the text with invisible characters substituted. For example, when invisibles are enabled, leading spaces are displayed as `‚Ä¢`. The regex was being tested against the displayed string instead of the buffer's actual contents. This would cause [language-html's](https://github.com/atom/language-html/blob/94e850dc4ab848baac1f413e4cb864864e1c24f8/settings/language-html.cson#L14) and [language-javascript's](https://github.com/atom/language-javascript/blob/601cb6cb8f80e03e7eaa5695515d6366fb2b6d18/settings/language-javascript.cson#L11) decrease-indent-patterns to fail to match.

Fixes https://github.com/atom/atom/issues/7317
",1239,True,en,0
7320,3,8,0,Internals,as-cii,2015-06-19T07:01:59Z,10,1,2,1,"Closes #7306

We started noticing that when a `TextEditor` pane got split, the same view for `Gutter` was being shared amongst several models, thereby making the same DOM element accessible simultaneously by more than one object. This made us experience _orphaned line numbers_, caused by two instances of `LineNumberGutterComponent` mutating `.line-numbers` at the same time.

This is a typical race condition which I would normally address by understanding and possibly locking the correct order in which operations should happen. However, I believe in this situation we shouldn‚Äôt actually care about ordering at all, since I think views should be kept ‚Äúlocal‚Äù, thus avoiding to expose them to the world and/or reusing them across other views (either accidentally as in this case or on purpose).

@jssln @nathansobo: I assume the `ViewRegistry` came into play because it was handy to get the view straight from `atom.views.getView`. If this is the use case and I am not missing something, we may expose a method under `TextEditorElement` which, in turn, would interrogate `TextEditorComponent` to fetch the related DOM node. What do you think? :thought_balloon: 
",1171,True,en,0
7310,2,0,0,Externals,mnquintana,2015-06-17T01:09:21Z,17,0,1,0,"Windows doesn't have `row-resize` or `col-resize` cursors, so this re-adds `ew-resize` and `ns-resize` cursors on the pane resize handle.

Addresses https://github.com/atom/atom/commit/384b88eecf6aae287f9a7a5c79a1f52dd0755494#commitcomment-11715023

Closes https://github.com/atom/atom/pull/7309
",296,True,en,0
7294,1,2,0,Externals,aki77,2015-06-16T21:26:51Z,9,1,2,0,"decoration listener is not destroyed.

**Active Packages**
- bracket-matcher

[![Gyazo](http://i.gyazo.com/b61da2fc549debdaf6ece5779ab17a30.gif)](http://gyazo.com/b61da2fc549debdaf6ece5779ab17a30)
",197,True,en,0
7290,1,0,0,Internals,maxbrunsfeld,2015-06-15T21:40:37Z,8,7,1,0,"Fixes #7231
",12,True,en,0
7284,1,0,0,Externals,mnquintana,2015-06-15T13:27:03Z,1,1,1,0,"This ensures that files that have been moved or deleted aren't autosaved.
",74,True,en,0
7281,3,11,0,Internals,simurai,2015-06-19T16:12:18Z,3,4,2,4,"This PR replaces the current default font for the editor. Fixes #7220

**Before**: The default is `Inconsolata`, but only if it's installed. If not, the fallback font is `Monaco`. The problem is that Inconsolata is quite smaller than other fonts, making it look bigger when changing the font in the settings. Or it's already too big when Inconsolata isn't installed. It's also a problem in mini editors.

**After**: New default is `Menlo`.
- Much closer to other fonts.
- Already comes preinstalled with OS X from Snow Leopard or newer.
- Is also the default in other editors/applications, like Xcode.

![default-font](https://cloud.githubusercontent.com/assets/378023/8155190/b9f42d94-137c-11e5-8bf0-714972431662.gif)

Text in mini editors in some/most themes will look bigger. But they already do that, if Inconsolata isn't installed or if a user changes the font in the settings. So with this change, themes hopefully make the `@input-font-size` a bit smaller and then it would be more consistent with other fonts.

![screen shot 2015-06-15 at 4 16 11 pm](https://cloud.githubusercontent.com/assets/378023/8155386/b3b808ae-137e-11e5-8327-51b88e79c72c.png)
### Possible alternatives
1. `Monaco`. It's the current fallback font if Inconsolata is not installed.
   - Pro: Less people would be affected by this change.
   - Con: Monaco doesn't have _italic_ and _bold_ version, which some themes use. Also in MD files. Menlo is newer and arguably more legible.
2. Bundle a new default font (see: #4201).
   - Pro: Could be any font, not just a system font. Would be consistent across all platforms.
   - Con: Even more users would be affected (also Win+Linux). Staying close to the platform might be a good idea because people are already used to that font from other editors/applications. Like Xcode uses Menlo and Visual Studio uses Consolas, in Atom it would be the same.
### Who is affected?
- Users that haven't changed the Font Family in the settings and have Inconsolata installed or are on OS X.
- Users that haven't changed the Font Size in the settings.
- Users that haven't changed the Line Height in the settings.
### I prefer the old default

For users that prefer the old default, it can be changed back in the settings to:
- Font Family: `Inconsolata, Monaco, Consolas, 'DejaVu Sans Mono', monospace`
- Font Size: `16`
- Line Height: `1.3`
",2354,True,en,0
7258,1,0,0,Internals,maxbrunsfeld,2015-06-12T23:58:41Z,12,12,1,0,"Mainly, I did this to make the generated JS easier to read when debugging.
",75,True,en,0
7249,2,3,0,Externals,mnquintana,2015-08-03T17:59:59Z,1,1,1,52,"This bumps npm to the latest version (2.11.2) - part of [an effort to update dependencies.](https://david-dm.org/atom/atom) Let's see if this goes green! :traffic_light: 

Fixes https://github.com/atom/atom/issues/8045
",219,True,en,0
7243,1,0,0,Externals,mnquintana,2015-06-12T02:12:12Z,1,1,1,0,"This truncates the titles of issues reported through notifications.
",68,True,en,0
7239,1,1,0,Externals,viddo,2015-06-11T22:21:04Z,1,0,1,0,"I imagine the cut command was missed when this was originally done in https://github.com/atom/atom/commit/bb1bcc233ae37f6e72f3172db30908885c768919 ?

I verified it working manually by [re-building atom](https://github.com/atom/atom#building) and adding an input element with the `native-key-bindings` class through the developer console, e.g.

``` js
i=document.createElement('input'); i.classList.add('native-key-bindings'); i.type=""text""; i.tabIndex=""-1""; document.body.appendChild(i); i.style.position=""absolute""; i.style.zIndex=3; i.style.bottom=0; i.style.border=""5px solid red""; i;
```

and verifying that the cut now works with this change.
",648,True,en,0
7237,1,4,0,Externals,ssorallen,2015-06-11T22:22:48Z,23,1,1,0,"Add argument and return type docs to fill in the documentation site.
",69,True,en,0
7235,1,3,0,Externals,mnquintana,2015-06-11T22:00:07Z,1,1,1,0,"This adds VCS coloring for tabs. (Thanks @acontreras89!)
",57,True,en,0
7234,2,4,0,Internals,maxbrunsfeld,2015-06-12T17:50:57Z,13,3,2,0,"This also fixes some cases where the window state would incorrectly be saved in the middle of exiting.
- [x] Avoid incorrectly saving state as windows are closed while restarting to install an update.
- [x] Make sure that `quitting` state doesn't incorrectly persist if quit is cancelled due to unsaved buffers.

Fixes #7156
Fixes #7214
",337,False,en,0
7233,1,0,0,Externals,mnquintana,2015-06-11T19:43:55Z,1,0,1,0,"Now that we've had Slack going for awhile, let's advertise it on the Readme!

/cc @thedaniel 
",94,True,en,0
7225,7,6,11,Externals,lpommers,2015-06-12T17:41:17Z,44,7,4,1,"Closes https://github.com/atom/atom/issues/6909

![deselect](https://cloud.githubusercontent.com/assets/5764316/8105547/6d6a5a9c-103a-11e5-80d1-3fe6b7ad1e7d.gif)

 `Cmd / Ctrl-Click` -ing on a cursor when there are multiple cursors will remove that cursor. 

If there is only the one cursor and it is `Cmd / Ctrl-Click`-ed, nothing will happen. 
",346,True,en,0
7222,1,1,0,Externals,herkyl,2015-06-11T08:47:48Z,1,1,1,0,,0,False,en,0
7219,2,0,0,Externals,bolinfest,2015-06-10T22:51:19Z,299,29,5,0,"This reverts the revert of https://github.com/atom/atom/pull/7022 and adds the appropriate fixes to both `workspace.coffee` and `spec/workspace-spec.coffee` to address the issue that was caught by the test failure in the `find-and-replace` package.
",249,True,en,0
7218,1,0,0,Internals,kevinsawicki,2015-06-10T22:24:03Z,1,1,1,0,"There were cases where the error thrown loading/activating a package was not properly attributed to the package because of the stack trace.
- [x] Add path information to CSON errors https://github.com/atom/season/pull/15

Fixes https://github.com/atom/atom/issues/6227
### Before

![screen shot 2015-06-10 at 3 01 35 pm](https://cloud.githubusercontent.com/assets/671378/8095274/aa90660a-0f81-11e5-8631-d1aebd7e3b91.png)
### After

![screen shot 2015-06-10 at 3 01 47 pm](https://cloud.githubusercontent.com/assets/671378/8095271/a864ab16-0f81-11e5-9fba-b40d6a45c133.png)
",572,False,en,0
7200,1,0,0,Internals,maxbrunsfeld,2015-06-10T00:21:44Z,1,1,1,0,"Fixes #7105.
",13,True,en,0
7199,2,4,0,Internals,kevinsawicki,2015-06-10T16:42:45Z,1,2,2,0,"Only grab focus once when launching instead of multiple times.

Closes #6828
",77,True,en,0
7192,1,3,1,Internals,as-cii,2015-06-09T22:04:52Z,6,14,2,0,"- :fire: Delete old code which was written to support some non-batched
  methods in a previous version;
- :white_check_mark: Cover ‚Äúpartially off-screen markers which are
  empty‚Äù scenario, since that [code path](https://github.com/atom/atom/blob/f830623512fe69c287f17fd5e02b9ad9dca401ad/src/text-editor-presenter.coffee#L1274) was not being hit by `TextEditorPresenter` specs;

Fixes #7183

/cc: @izuzak @nathansobo @maxbrunsfeld 
",436,False,en,0
7190,1,0,0,Internals,maxbrunsfeld,2015-06-09T18:51:39Z,29,299,5,0,"Reverts atom/atom#7022
",23,True,en,0
7179,1,1,0,Externals,rmartin,2015-06-09T11:20:14Z,2,2,1,0,"Resolves inconsistency as raised by https://github.com/atom/atom/issues/7178 and originally raised by  @trkoch in https://github.com/atom/atom/pull/5902#issuecomment-95063910. Updates the pane resize cursor to leverage col-resize for horizontal and row-resize for vertically split panes.

Cursor Reference: 
https://developer.mozilla.org/en-US/docs/Web/CSS/cursor

Screen Capture showing fix:
![atomresizepanecursorfix](https://cloud.githubusercontent.com/assets/119151/8053335/905e84d0-0e44-11e5-812d-0d26fda05ab5.gif)
",520,True,en,0
7176,5,7,2,Externals,mnquintana,2015-06-10T22:38:31Z,15,1,3,1,"Fixes #7174

/cc @kevinsawicki 
",32,True,pl,0
7175,1,1,0,Externals,nikhilofthesouth,2015-06-09T15:55:50Z,5,1,1,0,"Was bothering me a little. Deprecate old misspelled API, removing from docs. 
",78,True,en,0
7173,3,10,4,Internals,nathansobo,2015-06-21T16:17:59Z,47,9,3,12,"![screenshot 2015-06-08 23 52 18](https://cloud.githubusercontent.com/assets/1789/8046221/79c32c68-0e39-11e5-8ea2-76fc21e68880.png)

I'm now considering chunking the population of the line index on the UI thread to get us a progress bar before 1.0. I want to fix some bugs first, so until then, this will represent a soft limit to keep people from straying into the danger zone with larger files.
",397,True,en,0
7172,1,0,0,Internals,nathansobo,2015-06-08T22:00:06Z,20,3,2,0,"Fixes #7160
",12,True,en,0
7170,1,1,0,Externals,erfanio,2015-06-08T21:50:31Z,2,1,2,0,"When building from source there is a problem with the `atom.desktop`. The icon that it points to doesn't exit.
I added `atom.png` to get unpacked from app.asar and changed `atom.desktop` to point to and fixed the problem
",221,False,en,0
7169,1,1,0,Externals,mnquintana,2015-06-08T16:31:07Z,2,2,1,0,"The example was using a `project` global instead of `atom.project`.
",68,True,en,0
7158,2,1,0,Externals,50Wliu,2015-06-08T22:36:31Z,2,1,1,1,"Previously `update-downloaded` would get emitted right after `update-available` which would suppress the ""Downloading Update"" menu entry.

I'm not too literate at Coffeescript so hopefully I put `@emit update-available` where it actually belongs :P.

Fixes #7128.
",264,True,en,0
7157,1,1,0,Externals,mnquintana,2015-06-08T16:01:42Z,1,1,1,1,"Fixes https://github.com/atom/atom/issues/7096

`lsb` is quite a large package ‚Äì we should just use what we need (which is `lsb-core`)

Tested on Fedora 21 and OpenSUSE 13.2

/cc @kevinsawicki 
",196,True,en,0
7150,1,1,2,Externals,thomasjo,2015-06-08T16:02:40Z,2,2,1,1,"Fixes #7146
",12,True,en,0
7149,1,1,0,Externals,devoncarew,2015-06-07T05:24:33Z,1,1,1,0,"Fix a typo in `src/text-editor.coffee` (`adter` => `after`).
",61,True,it,0
7145,5,1,8,Externals,jessegrosjean,2015-06-11T22:28:24Z,22,6,4,4,"This changes the pane.saveItemAs logic to look for a getSaveOptions method and if present those options will be passed into the save dialogue. This add flexibility, giving items more control over how the save dialog works. I need it so that I can include filter types in the save dialogue. But I expect there will be other uses cases going forward.
",349,True,en,0
7130,11,8,0,Internals,nathansobo,2015-06-05T22:05:27Z,126,60,6,0,"Pictured below is Atom opening an 18.5 MB file (repeated copies of jQuery):

![large-file](https://cloud.githubusercontent.com/assets/1789/8014574/45c5fa94-0bd2-11e5-88b2-98601aac5bda.gif)
### Less Is More

The lion's share of overhead when working with text files goes to supporting the following features:
- Soft wrap
- Folds
- Syntax analysis

As files get larger, this overhead becomes more problematic. Yes, we can reduce this overhead and plan to do so, but it's also true that these features are less likely to be critical when editing really huge files. So this PR disables them for files above 2MB.

In return we can do the following:
- Compute placeholder `TokenizedLine`s on demand instead of up-front. This skips all of the processing I was trying to perform in the background on #7060, which can now be closed. It also avoids the memory hit of storing horizontal spatial metadata for any lines we haven't yet viewed. I'm leaving lines cached once we compute them once to avoid creating the same line over and over again. We could potentially use an LRU (""least recently used"") cache eviction strategy if we want to cap consumed memory, but I'm not sure it's worth prioritizing.
- Delegate straight through to `TokenizedBuffer` from `DisplayBuffer` rather than storing a second copy of lines, since there are no folds and soft wraps. This isn't a huge win but it does avoid an extra potentially huge array of references.
- Not block the UI thread as we perform the initial tokenization. This is really long overdue to be backgrounded, but this is a good stopgap.
### Metrics

Now that we've cleared a huge bottleneck, new bottlenecks are revealing themselves in the initial load of a large file. At least on an SSD, I/O really isn't high on the list yet. Here's a flame graph for loading that 18.5 MB file:

<img width=""1318"" alt=""screenshot_2015-06-05_22_11_18"" src=""https://cloud.githubusercontent.com/assets/1789/8014847/6b37b540-0bd4-11e5-94f9-0d91da9083e6.png"">

There's plenty of low hanging :apple: in here. I've highlighted a few things that stood out to me.

@maxbrunsfeld: `TextBuffer` might be a good first candidate for `Patch` after all, at least in terms of getting that data structure optimized for insertion. `SpanSkipList` insertion is by far the biggest remaining cost.

From a memory perspective, the `SpanSkipList` is also our biggest offender when `TokenizedLine`s are out of the way:

![screenshot 2015-06-05 22 10 07](https://cloud.githubusercontent.com/assets/1789/8014925/f7aff92e-0bd4-11e5-8777-73d92bdfe6ad.png)
### Closing Thoughts

I still want to push the efficiency of the structures that support Atom's full feature set, and we have a bunch of ideas for how to do so. But in the meantime, this is a much better compromise than an error message.
",2789,True,en,0
7129,1,1,0,Internals,maxbrunsfeld,2015-06-05T21:06:10Z,2,5,1,0,"In #7023, when we switched to a fully batched system of computing decoration states, I neglected to remove a couple of unnecessary incremental decoration state updates. They are now gone.

This exposes another performance benefit of the batched system: large find-and-replace searches are now much faster because we avoid thousands of unnecessary presenter state updates as highlights are created.

A search in an 8800-line file with 20k results now takes about **2.7 seconds** on my machine, whereas before it took **4 seconds**.

/cc @nathansobo
",548,True,en,0
7127,19,10,1,Internals,as-cii,2015-06-08T18:51:02Z,289,177,8,3,"After merging #6733 there have been [some reports of text looking blurred](https://discuss.atom.io/t/text-rendering-seems-blurry-compared-to-other-editors/13927/15). The reason for that is we started rendering tiles with a transparent background: this doesn't play well with Chrome, which disables sub pixel rendering, thereby making text less crisp.

This PR attempts to bring text clarity back. It's a bit more cumbersome than it seems on the surface because, in order to make tiles opaque, we need to distribute highlights across tiles. We plan to :ship: this in time for the next release and so it's quite urgent. :warning: 

If anyone wants to give feedback meanwhile we make progress on this it would be highly appreciated! The code still needs to be polished, but feature-wise everything should already work as expected.

Thanks to anyone who will take the time to have a look! :bow: 

/cc: @atom/feedback 
",914,True,en,0
7125,1,0,0,Internals,nathansobo,2015-06-05T16:30:17Z,1,1,1,0,"Fixes #7073
",12,True,en,0
7123,2,1,0,Internals,kevinsawicki,2015-06-05T16:02:35Z,45,0,3,0,"The sublime-tabs package disables the tree-view and tabs packages so re-enable them when sublime-tabs is installed but not loaded because it is deprecated.

Refs https://github.com/atom/tree-view/issues/467
Refs https://github.com/atom/tabs/issues/162
",252,True,en,0
7119,1,1,0,Externals,verrazanof,2015-06-08T23:00:48Z,1,1,1,3,"For Arch, `export PYTHON=/usr/bin/python2` should correct for `export python=/usr/bin/python2`
",95,True,en,0
7101,31,11,3,Internals,as-cii,2015-06-30T16:54:14Z,767,689,10,25,"Please, note that this is still a work in progress but it makes use of the tiling technique adopted in #6733 for line-numbers as well.

On average, with these improvements we basically halve paint times. This is a screenshot before gutter tiling:

![before](https://cloud.githubusercontent.com/assets/482957/7990205/ac41dbdc-0aef-11e5-9f20-c6708f5268f6.png)

And this is after:

![after](https://cloud.githubusercontent.com/assets/482957/7990208/b02f2006-0aef-11e5-99bb-c74e6f7e08ee.png)

_To see the difference, please have a look at them at full-screen. Benchmarks were performed using the following script on `text-editor-component-spec.coffee`:_

``` coffee
startBenchmark: (time=10, delta=250) ->
  @benchmarkInterval = setInterval(->
    document.querySelector(""html /deep/ .editor-contents--private"").dispatchEvent(new WheelEvent(""mousewheel"", wheelDeltaY: -delta))
  , time)
```

Chrome further confirms we have a ~50% speedup on paint times:

| Before | After |
| --- | --- |
| ![screen shot 2015-06-04 at 19 29 37](https://cloud.githubusercontent.com/assets/482957/7990247/104574cc-0af0-11e5-94fe-7506187ee889.png) | ![screen shot 2015-06-04 at 19 29 31](https://cloud.githubusercontent.com/assets/482957/7990246/1017763a-0af0-11e5-84a3-5e30f149c0bf.png) |

A byproduct of this change is that we'll be able to paint more than ~750k lines! :tada: 

I took the chance to extract out a `TiledComponent` which aims to cleanly abstract away all the complexity of creating a tile on screen and moving it up and down. I think there is a similar duplication in `TextEditorPresenter` but I'd like to a wait a bit more before introducing an abstraction in there, too.
### What's missing
- [x] Find a better name for `TileComponent` (it clashes with `TiledComponent`). I think we should keep the latter and get rid of the former, e.g. `TileComponent -> LinesTileComponent`.
- [x] Adjust existing specs to support this new behavior
- [x] Spec coverage for tiling (having a reusable contract test for this one seems like a good path, as we can use it for every `TiledComponent`)
- [x] Make sure custom gutters continue to work. @jssln: I think nothing huge should be screwed up with this PR (although changes like the one in `gutter-component-helpers.coffee` look suspicious), but you did a great job on the gutter and I'd :heart: to have your feedback :bow: 
- [x] Uncomment `if @newState.maxLineNumberDigits isnt @oldState.maxLineNumberDigits` and handle that scenario
- [x] Refine `text-editor-presenter-spec.coffee`'s tests names

/cc: @nathansobo @maxbrunsfeld
",2563,True,en,0
7086,1,1,0,Internals,jlord,2015-06-04T18:20:06Z,1,0,1,1,"We use 'Preferences' as the option within the app menu (e.g. Atom) as is typical in OS X applications. In Chrome and in Atom (and likely elsewhere) we actually call the page you land on 'Settings'. 

This PR adds 'Show Preferences' as an option so that if you happen to search for 'Preferences' rather than 'Settings' you can still make your way to the page. 

<img width='455px' src='https://cloud.githubusercontent.com/assets/1305617/7966759/fea5be40-09da-11e5-814a-25d718aee0b5.png'>

Closes https://github.com/atom/settings-view/issues/80

cc @kevinsawicki 
",562,True,en,0
7084,5,2,0,Internals,kevinsawicki,2015-06-03T21:59:35Z,5,1,1,0,"`-1`/`--one` has been removed so add a warning about it, see #7055 for more details

This ensure people that aliased `atom --one` to `atom` don't have breakage where the path after the `--one` argument isn't treated as a path to open.
",235,True,en,0
7074,1,0,0,Externals,mnquintana,2015-06-03T01:33:35Z,1,1,1,0,"Reverts atom/atom#6735

Alas, I'd hoped this would be a drop-in replacement, but it breaks installations with malformed `PATH`s.

Fixes https://github.com/atom/atom/issues/6985
",177,True,en,0
7071,1,1,0,Externals,50Wliu,2015-06-02T23:33:32Z,1,1,1,0,"Closes #7066
",13,True,en,0
7067,1,1,0,Externals,ghost,2015-06-02T20:37:54Z,0,1,1,0,,0,False,en,0
7056,2,0,0,Internals,kevinsawicki,2015-06-02T15:51:33Z,23,1,2,0,"Prevents Atom from failing to open because of a read error with a serialized editor.

Closes #6955
",99,True,en,0
7055,5,1,0,Internals,kevinsawicki,2015-06-03T00:40:06Z,34,34,6,1,"Switches 1.0 API preview mode to be enabled by default and renames the flag to be `--include-deprecated-apis` to still run Atom with deprecated APIs.
",150,True,en,0
7054,1,1,0,Externals,50Wliu,2015-06-01T22:49:25Z,1,1,1,0,"Adds support for `IS NULL`.
",28,True,en,0
7053,1,0,0,Internals,nathansobo,2015-06-01T22:54:04Z,8,5,1,0,"This fixes the styling of leading whitespace on folded lines.
",62,True,en,0
7051,6,3,0,Internals,kevinsawicki,2015-06-01T21:31:43Z,17,17,2,0,"Keep deprecating but don't remove certain minor deprecations that are easy to keep supporting for a little while longer and don't slow down Atom:
- Loading stylesheets from `stylesheets/` (now `styles/`)
- Loading settings from `scope-properties/` (now `settings/`)
- `activationEvents` in `package.json` (now `activationCommands`)
- `configDefaults` in package main (now `config`)
- `atom.config.unobserve` API (currently a no-op)
- Old `context-menu` format

This is an effort to not break packages that have very minor deprecations.

Refs #6867 
",549,False,en,0
7039,1,1,0,Externals,50Wliu,2015-06-01T16:40:34Z,1,1,1,1,"Adds `*.webapp` to the list of files recognized as JSON.
",57,True,en,0
7036,1,1,0,Internals,lee-dohm,2015-06-01T16:39:56Z,3,0,1,1,,0,False,en,0
7023,8,0,0,Internals,maxbrunsfeld,2015-06-04T17:57:00Z,149,83,9,5,"Depends on new `text-buffer` features. See atom/text-buffer#66.

This is one of several optimizations aimed at addressing Atom's slowness when an editor has a lot  of markers (e.g. find-and-replace results, spell-check highlights).
#### Problem

Currently, each decorated marker in the editor is individually observed by the `TextEditorPresenter` using `Marker::onDidChange`. Even though the presenter doesn't do much work for markers that are off-screen, just emitting all these change events becomes expensive when there are 10,000+ markers. The main cost is computing each marker's screen coordinates based on the underlying buffer coordinates.

This is a flame graph taken while inserting a newline into a file 2800 line file with 17000 search results. It took **1.5 seconds**. The region between the red arrows is emitting marker change events.

![screen shot 2015-06-04 at 10 50 45 am](https://cloud.githubusercontent.com/assets/326587/7990786/27838374-0aa8-11e5-8c6e-e64d0377c29a.png)
#### Solution

~~We've added a new API on `TextEditor` called `::observeMarkers()`, which allows you to observe any marker changes within a particular region of the editor.~~ The presenter now simply recomputes decoration states whenever any markers update. It determines that markers have updated using the text-buffer's `::onDidUpdateMarkers` method. This means that most markers are not observed, so they can avoid observing changes to their underlying `text-buffer` marker, preventing unnecessary screen-coordinate translations.

The same operation as performed above now takes **170 ms**. Still not fast, but we've removed a bottleneck.
",1634,True,en,0
7022,21,11,55,Externals,bolinfest,2015-06-09T16:40:06Z,299,29,5,10,"The contract for a provider for the `atom.directory-searcher` service
is defined by the spec of the `DefaultDirectorySearcher`.

This modifies `Workspace::scan()` to use the appropriate `DirectorySearcher`
for each member of `atom.project.getDirectories()` when scanning the workspace
for files that match the specified regex.
",327,False,en,0
7021,14,2,0,Internals,kevinsawicki,2015-06-03T17:08:04Z,1798,0,7,4,"Adds a list of package name and versions not to load since they contain deprecations and will break once the deprecated Atom APIs are removed.

Refs #6867 
",156,True,en,0
7020,3,6,0,Internals,nathansobo,2015-06-01T18:17:27Z,20,1,3,2,"We don't currently support invisible character strings that exceed a single character. Previously, rendering went haywire when users specified strings that were longer. This PR disallows that.
",193,True,en,0
6998,1,3,0,Internals,benogle,2015-05-29T17:33:27Z,36,0,2,0,"They were unstyled. So this: 

![screen shot 2015-05-28 at 4 10 06 pm](https://cloud.githubusercontent.com/assets/69169/7873204/0fb108d8-0554-11e5-8cd2-743e54f03baa.png)

to this:

![screen shot 2015-05-28 at 4 10 16 pm](https://cloud.githubusercontent.com/assets/69169/7873206/12f27c48-0554-11e5-9425-9bd90ba476bb.png)

Maybe should go in the themes, but I wanted this to be in a central place. What do you think @simurai?
",424,True,en,0
6997,1,0,0,Internals,nathansobo,2015-05-28T21:39:00Z,41,1,2,0,"Fixes atom/atom-keymap#79

Previously, when keystrokes bound to `unset!` corresponded to commands in the application menu, the commands were getting run anyway due to the operating system's processing of the keyboard shortcut present in the menu. This omits any `unset!` commands from the application menu to prevent that from happening.

This is more general than I would like. If the keystroke is unset in any context, we err on the side of caution and don‚Äôt add it to the application menu for any command. Since our application menu isn‚Äôt context aware, this should be good enough for now and solve the 80% case. Someday we should make the application menu update / gray out options when the focused element changes. Only then would we be able to precisely determine that a binding was unset in a given context, because we would have an element. Without an element it's just guess-work because who knows when a selector will match.
",939,True,en,0
6996,1,0,0,Externals,mnquintana,2015-05-28T19:58:10Z,1,0,1,0,"We shouldn't accidentally lint benchmark fixtures either.
",58,True,en,0
6988,1,1,0,Externals,mnquintana,2015-05-28T15:10:11Z,1,1,1,0,"Fixes https://github.com/atom/atom/issues/6983
Refs https://github.com/atom/atom/pull/6888

I'm not 100% sure, but I think this should fix https://github.com/atom/atom/issues/6983 ‚Äì rather than requiring the exact package name (which may be repo-specific) this requires the virtual package name `lsb`, which should cover all possible `lsb` packages for distros. 

I've tested this on Fedora 21, but don't have a VM set up for any other RPM-based distros. If anyone does, I'd very much appreciate trying to install `lsb` with your package manager and reporting your results here. Thanks!

/cc @kevinsawicki @mingjunyang
",621,False,en,0
6987,1,3,0,Internals,nathansobo,2015-05-28T15:11:05Z,11,5,2,0,"I switched to first-mate Selector because I didn‚Äôt want to replicate the poorly-defined Token::matchesScopeSelector method now that tokens are not stored on lines. However, the first-mate semantics are stricter and that broke the API. Perhaps using selector-kit here would be better, but I just wanted to put back exactly to how it was for now.

@kevinsawicki we need to merge this and release ASAP to fix railroad diagrams and probably some other packages. Sorry about this everybody.

/cc @ypresto
",502,True,en,0
6979,1,0,0,Internals,maxbrunsfeld,2015-05-27T22:02:43Z,7,3,1,0,"Fixes https://github.com/atom/atom/issues/6917
",47,True,en,0
6978,3,5,2,Externals,mostafaeweda,2015-05-29T17:28:56Z,58,13,7,1,"This PR fixed the `undefined` case and not being able to open new files and opening all url-style paths, config, preferences, ..etc.

Including url-style paths like remote://host:port/some/path in the initialPaths causes state loss issues, because the hash creation in: https://github.com/atom/atom/blob/master/src/atom.coffee#L93 creates a key that's different from the key got when restoring the state, because the initialPaths are normalized and not existing (see: https://github.com/atom/atom/blob/master/src/browser/atom-application.coffee#L372).

So, when the initialPaths contain a url, the state is never restored

This diff makes sure that project paths and initialPaths aren't normalized when not local paths

@bolinfest @maxbrunsfeld @benogle
",754,True,en,0
6977,1,2,4,Internals,maxbrunsfeld,2015-05-27T17:27:55Z,14,61,7,0,"Reverts atom/atom#6813

That PR introduced some bugs and we need to unblock the release of 0.202.
",98,True,en,0
6961,1,0,0,Externals,mnquintana,2015-05-27T17:52:47Z,1,1,1,0,"Adds a tooltip and a format string for the cursor position tile.
",65,True,en,0
6960,1,0,0,Internals,maxbrunsfeld,2015-05-27T00:37:49Z,17,10,2,0,"The double transaction was just there to set an undo-grouping interval, which can be accomplished another way. This helps performance a little when typing by avoiding duplicate marker snapshots.
",195,True,en,0
6958,1,1,0,Externals,mnquintana,2015-05-26T23:33:00Z,2,0,1,0,"This adds `.coffeelintignore` and `coffeelint.json` to the list of ignored paths so we don't ship with them.

Refs https://github.com/atom/atom/issues/5982

/cc @kevinsawicki 
",176,True,en,0
6942,3,2,0,Externals,mnquintana,2015-05-25T17:15:51Z,24,0,3,0,"Refs https://discuss.atom.io/t/install-atom-as-standard-user-on-os-x/17142/2?u=mnquintana

`script/build`'s option flags are currently undocumented for every platform but Linux ‚Äì this documents it for other platforms.

/cc @atom/feedback 
",241,True,en,0
6941,1,1,0,Externals,mnquintana,2015-05-25T17:23:15Z,4,3,1,0,"This documents the option of passing a function to tooltip's title.

/cc @atom/feedback 
",89,True,en,0
6919,1,1,0,Externals,mnquintana,2015-05-26T16:14:04Z,1,1,1,3,"Fixes https://github.com/atom/atom/issues/6918

The issue here was that `atom.getLoadSettings().resourcePath` was returning the path to `app.asar`, but the LICENSE.md currently doesn't get placed inside `app.asar` ‚Äì it lives directly inside the resources directory. This gets around that by using `process.resourcesPath` like https://github.com/atom/atom/blob/master/src/browser/atom-application.coffee#L210, but this probably isn't the best approach since `process.resourcePath` won't change if you launched Atom normally but have a dev mode window active.
- Should we generate LICENSE.md inside `app.asar`?

/cc @atom/feedback @kevinsawicki 
",646,True,en,0
6910,4,5,17,Externals,thomasjo,2015-05-29T20:45:59Z,6,0,1,6,"Not entirely sure about the wording, and location of the paragraph, but perhaps not too bad?

/cc @atom/feedback 

---

Resolves #6893 
",136,True,en,0
6907,1,3,0,Externals,mnquintana,2015-05-22T13:28:06Z,1,0,1,0,"Refs #6898, https://github.com/atom/atom/issues/5982, and https://github.com/atom/atom/pull/6230#discussion_r27896062

This adds a `.coffeelintignore` file to ensure that no one accidentally lints the `spec/fixtures` directory, lest we break the universe.
",256,True,en,0
6898,11,9,5,Externals,mnquintana,2015-05-26T15:54:56Z,260,249,14,4,"The sequel to https://github.com/atom/atom/pull/6230

I'm sure making the package linting job harder for myself :stuck_out_tongue_closed_eyes:, but I figured I should do this now before I add linting support to any more packages ‚Äì this updates coffeelint.json to lint for more code style errors.

Let me know if these changes seem reasonable!

/cc @atom/feedback 
",366,True,en,0
6894,1,1,0,Externals,50Wliu,2015-05-21T20:36:02Z,1,1,1,0,"Adds support for .iml files.
",29,True,en,0
6892,5,1,0,Internals,nathansobo,2015-05-22T00:32:25Z,764,610,16,0,"#6757 contained a couple of regressions that required me to back it out. This should fix both of them. I'm going to merge this after we release today.
",151,True,en,0
6888,1,1,0,Externals,mnquintana,2015-05-21T22:33:33Z,3,0,2,0,"Refs https://github.com/atom/notifications/pull/64#issuecomment-103884342

This helps ensure that Linux installs have `lsb_release` installed for more accurate OS reporting in issues.
",184,True,en,0
6882,1,0,0,Externals,mnquintana,2015-05-21T02:01:07Z,1,1,1,0,"Needed for https://github.com/atom/atom/pull/6848
",50,True,en,0
6879,1,0,0,Internals,nathansobo,2015-05-20T23:11:27Z,26,11,2,0,"This saves over 50ms to initialize the DisplayBuffer when opening `text-editor.coffee`. The savings increase as files get larger.
",130,True,en,0
6859,1,0,0,Internals,maxbrunsfeld,2015-05-20T01:16:45Z,18,3,2,0,"The vim-mode package [moves cursors](https://github.com/atom/vim-mode/blob/208b36df89c62ef2657f04fc21055334374d8dbc/lib/vim-state.coffee#L32) inside of marker change handlers. Currently, this causes incorrect marker change events to be emitted. This fixes that.
",262,True,en,0
6858,1,0,0,Externals,mostafaeweda,2015-05-19T18:47:30Z,1,1,1,0,"After https://github.com/atom/language-php/pull/75 is merged and published to npm
please merge this to use it
@kevinsawicki @bolinfest 
",136,False,en,0
6849,1,1,0,Externals,50Wliu,2015-05-19T16:57:42Z,8,8,1,0,"Last I checked, Git Shell uses bash-like syntax, not bat.  This fixes comments not being recognized and instead being parsed (such as the `for` receiving special highlighting).
Also some wording changes (and remove some indentation that's not needed).
",252,False,en,0
6848,2,8,0,Externals,mnquintana,2015-05-21T01:58:37Z,7,1,2,2,"Fixes https://github.com/atom/atom/issues/5009

![screenshot 2015-05-19 10 05 55](https://cloud.githubusercontent.com/assets/823545/7704827/bcca0864-fe0e-11e4-88d5-13c1c6cb24ae.png)

This PR migrates Atom to use the latest source Bootstrap instead of Atom's outdated fork of Bootstrap. There's really no need for Atom's fork anymore because the `viewport` option was added to source Bootstrap awhile ago, and that's all we were using the fork for anyway. [Source Bootstrap fixed the tooltip arrow positioning issue awhile ago too.](https://github.com/twbs/bootstrap/commit/4c9850701069954375b19e19bd1513654130eacf)

_Note: this doesn't mean Atom won't still be moving away from Bootstrap eventually, but Atom does heavily rely on it for such components as tooltips, so upgrading it is still a good idea._

TODO:
- [x] Figure out why bootstrap.less is overriding atom.less for the tooltips' `font-family` (ie. the tooltips are always Helvetica Neue because they're defined to be in bootstrap.less)
- [x] Settings View
  - [x] Fix checkboxes
- [x] Fix padding to left of tabs
- [x] Check Styleguide for other regressions

/cc @atom/feedback @simurai 
",1149,True,en,0
6847,7,4,0,Internals,kevinsawicki,2015-05-18T23:27:02Z,42,5,5,0,"If two grammars are both registered for the same file type, use the one from the non-bundled package.

This allows bundled grammars to be easily overridden by installed packages.

This takes away the stress from adding/removing more file types to core grammars in fear that they will break installed packages.

Basically installed packages will always win.

Refs https://github.com/atom/language-python/pull/61
Refs https://github.com/atom/language-php/pull/50
Refs https://github.com/atom/language-xml/issues/23

/cc @atom/feedback 
/cc @lee-dohm @thomasjo
",558,True,en,0
6832,1,0,0,Externals,mnquintana,2015-05-18T16:24:31Z,1,1,1,1,,0,False,en,0
6820,1,0,0,Externals,thomasjo,2015-05-18T16:23:46Z,1,1,1,2,,0,False,en,0
6813,10,9,12,Externals,mostafaeweda,2015-05-26T22:48:58Z,61,14,7,11,"Including url-style paths like `remote://host:port/some/path` in the `initialPaths` causes state loss issues, because the hash creation in: https://github.com/atom/atom/blob/master/src/atom.coffee#L93 creates a key that's different from the key got when restoring the state, because the `initialPaths` are normalized and not existing (see: https://github.com/atom/atom/blob/master/src/browser/atom-application.coffee#L372).

So, when the initialPaths contain a url, the state is never restored

This diff makes sure that project paths and `initialPaths` aren't normalized when not local paths

@bolinfest @maxbrunsfeld @benogle 
",629,True,en,0
6810,1,3,0,Externals,thomasjo,2015-05-15T20:07:19Z,1,1,1,0,,0,False,en,0
6808,1,50,8,Externals,svanharmelen,2015-07-08T18:33:49Z,78,21,4,54,"Currently the hard coded restrictions prevent some very valid use cases (will add a before and after screencasts at the bottom) and limit the possibilities to implement correct indentation.

Before:
![before](https://cloud.githubusercontent.com/assets/4171547/7628544/db28e958-fa24-11e4-9599-126bd61ef749.gif)
As you can see here the bracket isn't indented correctly when moving it to the next line. The decreaseIndentPattern is correct as it does increase when removing and typing in the bracket again on the same line.

After:
![after](https://cloud.githubusercontent.com/assets/4171547/7628620/df8dfb5e-fa25-11e4-9056-b58b4aee31fa.gif)
After removing the hard coded restrictions, the bracket is indented as expected.
",720,True,en,0
6789,1,1,0,Internals,maxbrunsfeld,2015-05-14T23:37:37Z,48,1,2,0,"I was editing `find-and-replace` and `atom` in the same window, and it was annoying not being able to run specs for both projects. Now it tries to run the package specs for the active pane item. If there's no active pane item or it doesn't have a path, it uses the first project directory like it did before.
",309,True,en,0
6785,1,0,0,Internals,maxbrunsfeld,2015-05-14T16:54:14Z,5,1,1,0,"Refs #6466 
",12,True,fr,0
6777,3,3,0,Internals,maxbrunsfeld,2015-05-14T04:37:56Z,58,59,5,0,"Currently, opening large files takes a long time. Most of the time is spent tokenizing the lines and computing the screen lines (accounting for soft-wraps, etc). Because of a small logic error, this was all happening _twice_, every time we opened a file.

These flame graphs are for opening an example 2.3MB javascript file (jQuery 2.0.3, concatenated 10 times).
### Before

Opening the file took about **8.2 seconds**. The span of time between the two red arrows is unnecessary work.

![screen shot 2015-05-13 at 8 18 58 pm](https://cloud.githubusercontent.com/assets/326587/7625546/dd157690-f9ad-11e4-8025-481e19c33bc1.png)
### After

No more duplicated work. Opening the file took about **3.2 seconds**.

![screen shot 2015-05-13 at 8 17 45 pm](https://cloud.githubusercontent.com/assets/326587/7625548/e51e262a-f9ad-11e4-995f-8c0236b4dce7.png)
",848,True,en,0
6776,17,1,2,Externals,jssln,2015-05-14T22:43:39Z,780,690,8,0,"This is the first part in a series of follow-ups to polish off https://github.com/atom/atom/pull/5217.

This PR does the following:
- Changes `@state.gutters` in TextEditorPresenter to be an Array of Objects of the form:
  - gutter: Gutter model object
  - visible: boolean, whether the gutter is visible
  - content: either what used to be @state.gutters.lineNumberGutter or @state.gutters.customDecorations[gutterName], depending on the gutter
  - styles: an Object with fields: scrollHeight, scrollTop, backgroundColor
- Changes the `state` that is passed to each gutter component's `::updateSync` to only contain the state that it needs.
",642,True,en,0
6773,7,4,0,Externals,bolinfest,2015-05-13T23:30:53Z,9,10,3,0,"Tests should be 100% reproducible, but `AutoUpdateManager` introduces unpredictable behavior, so it should not be installed when Atom is launched via `apm test`.
",162,True,en,0
6764,1,4,0,Externals,mnquintana,2015-05-14T16:01:38Z,1,1,1,1,"Adds fuzzy match character highlighting
",40,True,en,0
6760,4,7,0,Internals,maxbrunsfeld,2015-05-14T21:29:35Z,17,52,4,1,"See https://github.com/atom/text-buffer/pull/58.

Currently this branch uses a pre-release of text-buffer, `6.0.0-beta.1`, introduced in the above PR.
- [x] Publish the `text-buffer@6.0.0` and switch to using that. 
",216,True,en,0
6759,19,9,3,Internals,kevinsawicki,2015-05-13T17:25:27Z,88,37,3,0,"This changes Atom to show the editor window as quickly as possibly, before package and theme loading begins.

It stores the background color in local storage to minimize the color changes once the editor loads.
",211,True,en,0
6757,55,32,8,Internals,nathansobo,2015-05-20T17:47:52Z,720,610,15,7,"Previously, we naively stored every token on every line as its own object, and made things even worse by storing an array of scopes on every token. This caused `TokenizedLine`s to consume much more memory than is strictly necessary.

This PR switches `TokenizedLine` to a much more compact (but also more cryptic) representation. Instead of repeating the scopes on each token, we instead represent the entire tokenized line as a _nested word_, which intermingles start and end tags with text much like HTML.

Consider the following JavaScript fragment:

``` js
function() {}
```

Previously, we would store this as an array of tokens, each with an array of its containing scopes:

``` js
[
  {value: 'function', scopes: ['source.js', 'meta.function.js', 'storage.type.function.js']},
  {value: ' ', scopes: ['source.js', 'meta.function.js']},
  {value: '(', scopes: ['source.js', 'meta.function.js', 'punctuation.definition.parameters.begin.js']},
  {value: ')', scopes: ['source.js', 'meta.function.js', 'punctuation.definition.parameters.end.js']},
  {value: ' ', scopes: ['source.js', 'meta.function.js']},
  {value: '{', scopes: ['source.js', 'punctuation.section.scope.begin.js']},
  {value: '}', scopes: ['source.js', 'punctuation.section.scope.end.js']}
]
```

Now this is stored more like HTML, with strings intermingled with scope start / end tags.

``` js
// Note: This JSON is just for example purposes. Read below for the actual representation.

[
  {start: 'source.js'},
    {start: 'meta.function.js'},
      {start: 'storage.type.function.js'},
        ""function"",
      {end: 'storage.type.function.js'},
      "" "",
      {start: 'punctuation.definition.parameters.begin.js'},
        ""("",
      {end: 'punctuation.definition.parameters.begin.js'},
      {start: 'punctuation.definition.parameters.end.js'},
        "")"",
      {end: 'punctuation.definition.parameters.end.js'},
    {end: 'meta.function.js'},
    "" "",
    {start: 'punctuation.section.scope.begin.js'},
      ""{"",
    {end: 'punctuation.section.scope.begin.js'},
    {start: 'punctuation.section.scope.end.js'},
      ""}"",
    {end: 'punctuation.section.scope.end.js'},
  // note 'source.js' isn't closed yet
]
```

This may look more verbose, but it eliminates the need to repeat the same scopes on successive tokens in the same branch of the syntax tree. In actuality, the scopes are encoded as simple arrays of integers. Negative integers indicate start and end tags, with odd integers being start tags and even integers being end tags for the odd integer preceding them. Positive integers stand in for strings. The integers can be translated back to scope strings by consulting a lookup table on the grammar registry. We retain the original string and combine the two pieces of data as needed.

So in reality, the stored representation looks like this.

``` js
{
  text: ""function() {}"",
  tags: [-1, -3, -5, 8, -6, 1, -7, 1, -8, -9, 1, -10, -4, 1, -11, 1, -12, -13, 1, -14]
}
```
### Measurements

Here are some heap snapshots taken with `benchmark/fixtures/huge.js` in the Atom repository. This file is just a copy of jQuery 1.7.1, but has some good examples of lines with extremely complex scope structures.

First, on master:

![screenshot 2015-05-14 19 07 26](https://cloud.githubusercontent.com/assets/1789/7637260/e40779b6-fa6c-11e4-8441-ef42af5e8f9f.png)

`TokenizedLine` instances consume over 27MB. The largest instance is expanded in the screenshot, where you can see the vast majority of the memory for that line being consumed by the `tokens` array (~25KB). Repeat that for thousands of lines and you can see the problem.

Now, the same file on this branch:

![screenshot 2015-05-14 19 09 57](https://cloud.githubusercontent.com/assets/1789/7637303/40a52bdc-fa6d-11e4-88b3-e64479cccda3.png)

Still more memory than I'd like to consume, but much less, around 8.4MB. You can see that the `tags` array takes up much less space than the `tokens` array, but still more than it seems like it should. I can save more with typed arrays, but only about 500KB in my experiment.

JS objects still seem to impose a frustrating amount of overhead. Starting to wonder if we want to drop some of our low-level storage structures to C++, but I'd rather improve the structure of this layer before contemplating that. The `TokenizedLine` instances are also now much simpler objects, meaning they terminate in primitives much more quickly. I wonder if this helps the GC in that the heap is simpler and there are fewer objects to trace. This is just speculation however.
### Steps
- [x] Get core specs passing with new representation
- [x] Eliminate usages of the `tokens` array shim in core, which creates a lot of garbage
- [x] Post some heap snapshot comparisons
- [x] Publish a new major revision of first-mate and link it in package.json
- [x] Ensure all package specs pass
- [x] Switch hot package paths off the tokens shim
",4909,True,en,0
6755,3,10,0,Internals,kevinsawicki,2015-05-18T16:23:34Z,7,1,1,6,"Closes #4936
",13,True,en,0
6750,1,1,0,Internals,izuzak,2015-05-12T15:38:44Z,1,1,1,0,"While I was [updating](https://github.com/atom/decoration-example/pull/1) decoration-example to 1.0 APIs, I noticed that this `Decoration::update` call was not triggering a deprecation warning and might be wrong (because it will return a function which would need to be called again). I think the extra function wrapper is not needed so this removes it.

After removing it, the deprecation is correctly reported in Deprecation cop when calling `Decoration::update`.

![screen shot 2015-05-12 at 12 58 43](https://cloud.githubusercontent.com/assets/38924/7585823/a6584108-f8a6-11e4-9047-707ba1e50f07.png)
",604,True,en,0
6747,1,0,0,Internals,jlord,2015-05-12T01:17:16Z,1,1,1,0,"To include a spec fixture with correct semver. 
",48,True,en,0
6746,1,0,0,Internals,jlord,2015-05-12T00:20:58Z,1,1,1,0,"This corrects the semver in a spec's `package.json` per https://github.com/atom/atom/pull/6645.
",96,True,en,0
6745,6,0,0,Internals,jlord,2015-05-12T00:20:49Z,6,6,1,0,"This bumps the versions of the 6 packages that were missing a `license` filed in their `package.json` per https://github.com/atom/atom/pull/6645#issuecomment-100340178.

:sob: my commit message emoji fails.
",207,True,en,0
6743,2,0,2,Internals,kevinsawicki,2015-05-12T01:11:26Z,2,1,2,0,"The hunspell dictionaries need to be unpacked so lets just unpack the entire `spellchecker` module since it is small and used out of process anyway.

Closes #6621
Closes atom/spell-check#57
",190,True,en,0
6738,1,1,0,Externals,jhasse,2015-06-10T23:00:10Z,2,2,1,30,"This fixes

```
/c/Users/jhasse/AppData/Local/atom/bin/../app-0.198.0/resources/cli/atom.sh: Zeile 21: /c/Users/jhasse/AppData/Local/atom/bin/../app-0.198.0/resources/cli/atom.sh/../../app/apm/bin/node.exe: No such file or directory
```

On Windows 7 using MSYS 2.
",265,True,en,0
6737,2,4,0,Internals,izuzak,2015-05-11T19:56:52Z,3,3,1,0,"This is an attempt to fix https://github.com/atom/atom/issues/6713 and another problematic case when constructing keystrokes for menus.

The problem in https://github.com/atom/atom/issues/6713 was that the keybinding for `window:increase-font-size` is `cmd-+`, but Electron doesn't accept `+` characters in keystrokes -- [it accepts `Plus`](https://github.com/atom/electron/blob/master/docs/api/accelerator.md#available-key-codes). 29a4ab1 fixes this by detecting `+` keys and switching them with `Plus`. 

![screen shot 2015-05-11 at 14 08 08](https://cloud.githubusercontent.com/assets/38924/7564463/3426c966-f7e7-11e4-819e-fbe6ab41fbc2.png)

Another thing I noticed is that keystrokes are split on `-` (which is the separator Atom uses), which causes problems for keystrokes which use `-` as the key. For example, `window:decrease-font-size` has `cmd--` as one of its keybindings. The reason why this problem doesn't manifest currently is that [`window:decrease-font-size` has two keybindings currently](https://github.com/atom/atom/blob/f1f8c3d0a72de7d20bcde4fd145261c34d3e7462/keymaps/darwin.cson#L79-L80), and the second one is getting picked when constructing the menu (the one which doesn't use `-`):

```
  'cmd--': 'window:decrease-font-size'
  'cmd-_': 'window:decrease-font-size'
```

If you remove that second keybinding, the menu entry for `Decrease font size` will not have a keystroke as well. 71fba99 fixes this by splitting the keystroke on `-`, but only if there's another character after it (so, it doesn't split on trailing `-`).

I tried to figure out how to write tests for this, but failed. :disappointed: @kevinsawicki @maxbrunsfeld if you have some :hourglass: to point me in the right direction -- I'd be happy to add those. 
",1753,True,en,0
6735,1,1,0,Externals,mnquintana,2015-05-11T16:08:51Z,1,1,1,0,"From https://github.com/atom/apm/issues/282#issuecomment-100289741

Refs https://github.com/atom/apm/pull/361
",110,True,en,0
6733,68,48,19,Internals,as-cii,2015-06-02T22:18:41Z,879,635,8,22,"This PR introduces a change in how we render lines. It does so by organizing them into tiles, which we then move up and down through a compositing transformation. The main advantage is that paint times dramatically reduce, because now we simply need to paint a small tile, instead of all the lines. This is especially noticeable during scrolling which, as a result, will be the subject of the benchmarks I am going to show later on.

Please, note that:
- [x] Specs are broken. The solution you can see here was achieved by spiking a bunch of ideas, and therefore I didn't pay attention to change specs/code gradually. As a result, I plan to adapt previous specs and write some new ones as soon as possible.
- [x] There's some evident structural duplication in code. However, I'd like to start refactoring that stuff as soon as I have unit tests to prevent naive errors.
- [x] Naming-wise I am not entirely happy with `TilesPresenter` and `LinesPresenter` and they're probably going to change. Any suggestion or improvement is very welcome here.
- I have intentionally left out line numbers from using this new approach. I'd like to keep this PR focused and work on that right after :ship:ping this one.

:racehorse: And now some benchmarks! :racehorse:
## Benchmarks

Tests conducted using:
- A `1920x1080` window
- `editor.scrollSensitivity = 130`
- A custom code (associated to a keyboard key) to simulate `mouseWheel` events
  
  ``` coffee
  document.querySelector(""html /deep/ .editor-contents--private"").dispatchEvent(new WheelEvent(""mousewheel"", wheelDeltaY: -250))
  ```
- Keyboard Key Repeat: `Fast` (Mac OS X setting)
- Delay Until Repeat: `Short` (Mac OS X setting)

I needed a (more or less) repeatable way to benchmark scrolling. To try this out, you can simply scroll up and down as you would normally do.
### master

![master](https://cloud.githubusercontent.com/assets/482957/7561220/9eec5f12-f7ca-11e4-82ba-ac2124b536f0.png)
### as-tiled-rendering

![as-tiled-rendering](https://cloud.githubusercontent.com/assets/482957/7561218/9a2fd81e-f7ca-11e4-8194-4075bc541ea3.png)
### Why this matters?

As you can notice, paint times are dramatically reduced. This may not be noticeable with your :eyes:, but it's nevertheless important 'cause it leaves some room for additional operations (such as a more expensive character measurement computation). As said earlier, things are going to speed up further once we introduce tiling for line numbers as well.

It would be great if you could try this out, reporting any eventual regression or glitch that I may have overlooked while implementing the tiling strategy. Moreover, any code review or additional :eyes: are always welcome.

Thank you!

/cc: @atom/feedback @nathansobo
",2734,True,en,0
6710,19,16,12,Internals,benogle,2015-05-13T18:45:48Z,79,1,4,4,"Closes #4364 
Closes https://github.com/atom/autocomplete-plus/issues/351
",74,False,en,0
6707,1,0,0,Internals,maxbrunsfeld,2015-05-08T19:35:33Z,4,9,1,0,"Refs #6690
",11,True,fr,0
6706,6,4,3,Internals,izuzak,2015-05-08T20:59:08Z,66,1,2,0,"This is the little brother of https://github.com/atom/atom/pull/6640 and together they should fix https://github.com/atom/atom/issues/6654. :family: :facepunch: 

cc @kevinsawicki for :eyes: 
",192,True,en,0
6694,1,1,0,Internals,maxbrunsfeld,2015-05-07T20:09:39Z,1,1,1,0,"Some good low-hanging :cherries:. Screen updates:

Before:
![before](https://cloud.githubusercontent.com/assets/326587/7524833/9777b4d4-f4b9-11e4-9d8e-cede4539645a.png)
300 ms / 3 fps. Spikes at the bottom are GC.

After:
![after](https://cloud.githubusercontent.com/assets/326587/7524860/ba3ddc64-f4b9-11e4-9c57-39490230d596.png)
20 ms / 50 fps. No GC.
",354,True,en,0
6690,1,10,0,Internals,maxbrunsfeld,2015-05-07T22:24:13Z,0,1,1,0,"Closes #6464
",13,True,en,0
6687,1,1,0,Externals,oclbdk,2015-05-07T18:21:38Z,1,1,1,0,,0,False,en,0
6684,6,5,0,Internals,maxbrunsfeld,2015-05-13T18:08:21Z,13,9,1,6,"We now save the open windows whenever:
- A new window is opened
- A window loses focus
- A window is closed (unless it's the last window open on linux or windows)
- `atom.exit()` is called

Refs #6466
",201,False,en,0
6672,1,1,0,Internals,maxbrunsfeld,2015-05-06T17:53:49Z,21,9,2,0,"Refs #6521 (May fix, but I'm not sure)
",39,True,en,0
6658,5,0,0,Internals,jlord,2015-05-07T00:23:17Z,1,1,1,1,"This includes the `settings-view` update with correct semver in spec fixtures upon which https://github.com/atom/atom/pull/6645 depends. :pizza: 
",146,True,en,0
6656,1,4,0,Externals,jgebhardt,2015-05-07T20:26:36Z,0,5,1,1,"This change depends on https://github.com/atom/react/pull/2.

After updating https://www.npmjs.com/package/react-atom-fork to v0.13.2 per the above PR, we need to remove the compatibility transform.
",199,True,en,0
6645,26,5,8,Internals,jlord,2015-05-14T18:46:27Z,20,15,5,9,"In an previously merged PR #6582 we just normalized the repository url. Here we normalize the entire `package.json` in the same way that npm does. 

TODO:
- [x] Fix Atom bundled packages with bad package data in order for this to go :green_apple: 

Closes https://github.com/atom/atom/issues/6601
",297,True,en,0
6640,1,4,0,Internals,izuzak,2015-05-06T17:26:43Z,3,3,1,2,"Fixes https://github.com/atom/atom/issues/1743 which was reopened due to this observation:

> This doesn't quite work yet. When opening a file to line 0, Atom will just try to open a file called ""filename.txt:0"" rather than just defaulting to the top of the file.

I think it's worth supporting this edge case where we'd normally expect the user to specify ""1"" as the initial line, not ""0"".

cc @kevinsawicki 
",410,True,en,0
6631,17,23,2,Externals,mnquintana,2016-03-31T05:30:19Z,203,0,9,332,"_See https://discuss.atom.io/t/shift-selection-by-column/16545?u=mnquintana for more background_

![screencap1](https://cloud.githubusercontent.com/assets/823545/7448891/7c64c1ea-f1f4-11e4-94bf-dfbaab1a5ee6.gif)

This adds the column-equivalent of `TextEditor::moveLineUp()` and `TextEditor::moveLineDown()` - instead of moving a line up or down, these commands move any active selections left or right by one column. This is especially useful if you're refactoring / generally trying to clean up your code.

TODO:
- [x] Add keybindings for Linux and Windows (anyone have any suggestions for good keybindings for this?)
- [x] Consider renaming commands? (Is Move Selection Left / Right too vague?)
- [x] Fix case when moving multiple one-line selections to either the beginning or end of the line

Shoutout to @lee-dohm for helping with the implementation :wave: 

/cc @atom/feedback 
",885,True,en,0
6602,3,2,0,Internals,jlord,2015-05-05T03:43:04Z,0,3,1,3,"We don't really need these here (and it can be confusing) as languages can define them. 

_before_
<img src=""https://cloud.githubusercontent.com/assets/1305617/7435334/c9311c84-eff7-11e4-9d58-25447d345b22.png"" width=""300px"">
Closes https://github.com/atom/settings-view/issues/353
",281,True,en,0
6582,3,6,0,Internals,jlord,2015-04-30T22:00:05Z,25,0,4,0,"This adds a dependency and replicates the way npm handles 'shortcut' repository urls in package.json, turning them into urls. 

Closes atom/settings-view#387
",158,True,en,0
6578,1,1,0,Externals,LEDfan,2015-04-30T17:48:24Z,1,1,1,0,"Otherwise this error happens:

```
tobia@tobia-pc:~/Downloads/atom> git fethc -p
git: 'fethc' is not a git command. See 'git --help'.

Did you mean this?
    fetch
tobia@tobia-pc:~/Downloads/atom> git fetch -p
tobia@tobia-pc:~/Downloads/atom> ./script/build 
Node: v0.10.31
npm: v1.4.23
Installing build modules...
gyp: /usr/share/node/common.gypi not found (cwd: /home/tobia/Downloads/atom/build/node_modules/runas) while reading includes of binding.gyp while trying to load binding.gyp
gyp ERR! configure error 
gyp ERR! stack Error: `gyp` failed with exit code: 1
gyp ERR! stack     at ChildProcess.onCpExit (/usr/lib64/node_modules/npm/node_modules/node-gyp/lib/configure.js:338:16)
gyp ERR! stack     at ChildProcess.emit (events.js:98:17)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:810:12)
gyp ERR! System Linux 3.16.7-21-desktop
gyp ERR! command ""node"" ""/usr/lib64/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""rebuild""
gyp ERR! cwd /home/tobia/Downloads/atom/build/node_modules/runas
gyp ERR! node -v v0.10.31
gyp ERR! node-gyp -v v1.0.1
gyp ERR! not ok 
npm ERR! runas@2.0.0 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the runas@2.0.0 install script.
npm ERR! This is most likely a problem with the runas package,
npm ERR! not with npm itself.
npm ERR! Tell the author that this fails on your system:
npm ERR!     node-gyp rebuild
npm ERR! You can get their info via:
npm ERR!     npm owner ls runas
npm ERR! There is likely additional logging output above.

npm ERR! System Linux 3.16.7-21-desktop
npm ERR! command ""/usr/bin/node"" ""/usr/bin/npm"" ""--userconfig=/home/tobia/Downloads/atom/build/.npmrc"" ""install"" ""--loglevel"" ""error""
npm ERR! cwd /home/tobia/Downloads/atom/build
npm ERR! node -v v0.10.31
npm ERR! npm -v 1.4.23
npm ERR! code ELIFECYCLE
gyp: /usr/share/node/common.gypi not found (cwd: /home/tobia/Downloads/atom/build/node_modules/grunt-atom-shell-installer/node_modules/asar/node_modules/chromium-pickle) while reading includes of binding.gyp while trying to load binding.gyp
gyp ERR! configure error 
gyp ERR! stack Error: `gyp` failed with exit code: 1
gyp ERR! stack     at ChildProcess.onCpExit (/usr/lib64/node_modules/npm/node_modules/node-gyp/lib/configure.js:338:16)
gyp ERR! stack     at ChildProcess.emit (events.js:98:17)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:810:12)
gyp ERR! System Linux 3.16.7-21-desktop
gyp ERR! command ""node"" ""/usr/lib64/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""rebuild""
gyp ERR! cwd /home/tobia/Downloads/atom/build/node_modules/grunt-atom-shell-installer/node_modules/asar/node_modules/chromium-pickle
gyp ERR! node -v v0.10.31
gyp ERR! node-gyp -v v1.0.1
gyp ERR! not ok 
gyp: /usr/share/node/common.gypi not found (cwd: /home/tobia/Downloads/atom/build/node_modules/minidump) while reading includes of binding.gyp while trying to load binding.gyp
gyp ERR! configure error 
gyp ERR! stack Error: `gyp` failed with exit code: 1
gyp ERR! stack     at ChildProcess.onCpExit (/usr/lib64/node_modules/npm/node_modules/node-gyp/lib/configure.js:338:16)
gyp ERR! stack     at ChildProcess.emit (events.js:98:17)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:810:12)
gyp ERR! System Linux 3.16.7-21-desktop
gyp ERR! command ""node"" ""/usr/lib64/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"" ""rebuild""
gyp ERR! cwd /home/tobia/Downloads/atom/build/node_modules/minidump
gyp ERR! node -v v0.10.31
gyp ERR! node-gyp -v v1.0.1
gyp ERR! not ok 
npm ERR! 
npm ERR! Additional logging details can be found in:
npm ERR!     /home/tobia/Downloads/atom/build/npm-debug.log
npm ERR! not ok code 0
```
",3718,True,en,0
6575,9,4,5,Internals,lee-dohm,2015-04-30T01:42:28Z,88,0,7,0,"See #6086 

@CaptSaltyJack, I went ahead and fixed the tests. I did more research and found that the behavior wasn't the bug it was just an obscure flaw in the tests. They're all fixed now :grinning:
",200,True,en,0
6572,2,1,0,Internals,benogle,2015-04-29T23:13:03Z,15,8,3,0,"The minimap inserts itself in the editor shadow DOM, which makes it look like the gutter to the calculation.

Closes https://github.com/atom-community/autocomplete-plus/issues/394
Closes https://github.com/atom-minimap/minimap/issues/317
",238,True,en,0
6570,1,1,0,Externals,jssln,2015-04-29T21:26:29Z,17,0,2,0,"...m gutter element

This is @nathansobo's fix for line numbers (https://github.com/atom/atom/commit/192997c8cf4479c4cae155207ad3b175c0ee9498) applied to custom gutters.
",170,True,en,0
6567,2,3,0,Internals,simurai,2015-04-29T16:04:21Z,1,1,1,0,"This PR adds `DejaVu Sans Mono` to the Atom font stack. It should fix font issues on Linux. See #4201

The default fonts will be:
- `Inconsolata` on all platforms, but must be manually installed by the user. Otherwise..
- `Monaco` on OS X
- `Consolas` on Windows
- `DejaVu Sans Mono` on most Linux distros. Thx @fvsch.
#### Unpleasant surprises

This change should only affect users on Linux that have not defined a custom font in the settings. But arguably that will be a pleasant surprise.
",492,True,en,0
6566,6,5,10,Internals,as-cii,2015-05-04T13:14:22Z,249,175,1,5,"As we kept adding features or fixing stuff, our `TextEditorPresenter` has grown more and more complex (as of now it counts more than 1k LOC). As you might imagine, this leads to difficult maintenance and introducing regressions becomes much easier. :fearful:

That said, this layer is not intrinsically convoluted and, therefore, I think we have some chance to make it better. This PR attempts to bring some clarity to one aspect @nathansobo pointed during a conversation and which I totally agree with.

When dealing with batching, I introduced an helper function (`@batch`) which enabled me to, more or less, decorate a function and have it batched automagically. While this removed a bit of duplication, it didn't improve code quality at all, making the batching process look a bit opaque.

The intent of this PR is to replace this mechanism with a simpler one, which solely relies on booleans. I have payed attention to preserve the original behavior but, as illustrated earlier on, it's easy to overlook mistakes and it would be great if you could try this out to spot regressions of any kind. (/cc: @atom/feedback)

Going forward I think that the path should be to split `TextEditorPresenter` into many smaller objects (e.g. one for lines, one for gutters, etc... maybe the structure could even match how we currently organize _UI Components_). This way `TextEditorPresenter` could act as the glue which makes those smaller presenters stick together. If we follow this design I think we can make our test suite even more precise (i.e. keep some integration tests in `TextEditorPresenter` and test each component separately). @nathansobo: what are your :thought_balloon: on this?

My plan is to achieve this incrementally :footprints:: this PR is just the first, tiny step; as we touch related areas of this code we should take the time to give them some :heart:.

Any suggestion, proposal or feedback is very welcome! :bow:
",1930,True,en,0
6563,1,3,0,Internals,nathansobo,2015-04-30T21:26:34Z,17,5,3,1,"With the presenter we started clipping screen positions prior to translating them to pixel positions. This interacts with the current clipping behavior on folded lines (which should change) where the cursor is always clipped to 0. So when the longest line was also folded we were miscalculating the width. :see_no_evil:!

The removal of clipping also causes us to calculate the width based on the trailing whitespace of soft-wrapped lines, which I actually think is an improvement but it is slightly different.

Fixes #6562
",524,True,en,0
6558,11,0,0,Internals,kevinsawicki,2015-04-29T16:56:06Z,118,55,2,0,"Calling `child_process.spawn` can [throw](https://github.com/iojs/io.js/blob/391cae3595e5b426be50cf26a2ae02c346c2a63f/lib/child_process.js#L1093) a runtime error distinct from the `error` events that are emitted on the returned process object.

This pull request catches these exceptions and sends them down the `BufferedProcess::onWillThrowError` path on a `process.nextTick` callback so that emitted errors and spawn errors can be handled consistently.

Without this you would need to wrap `new BufferedProcess` calls in a `try`/`catch` block which isn't very intuitive given that `error` events are emitted in most cases.

Fixes #5560
Fixes #6556

/cc @benogle 
",665,True,en,0
6550,1,0,0,Externals,mnquintana,2015-04-28T11:54:36Z,1,1,1,0,":arrow_up: bracket-matcher@0.74.0
",34,True,en,0
6547,1,3,0,Externals,mpkh,2015-04-29T21:52:28Z,9,0,1,1,"related issue on discuss: https://discuss.atom.io/t/ctrl-x-tab-selection/13615

I strongly suggest to keep `alt` there and not `ctrl`
- I just can't rotate my hand to press `ctrl+1` or alike, I don't know how people use it, it's very uncomfortable
- sumblime has got `alt+n` even on windows
",291,True,en,0
6546,2,2,0,Internals,as-cii,2015-04-28T10:19:44Z,5,2,1,0,"Adding `ATOM_ACCESS_TOKEN` to the environment variables caused Travis to recognize it as another row in the matrix, thus spawning unwanted builds like the ones below (i.e. the failing ones):

![screen shot 2015-04-28 at 09 00 57](https://cloud.githubusercontent.com/assets/482957/7364294/3889a300-ed85-11e4-824f-a06978666f91.png)

This PR fixes it by explicitly specifying `matrix` and `global` into `.travis.yml` (as documented in http://docs.travis-ci.com/user/environment-variables/).

/cc: @thedaniel @kevinsawicki 
",520,True,en,0
6543,6,2,1,Internals,kevinsawicki,2015-04-28T16:17:56Z,79,39,3,0,"This pull request adds the `--profile-startup` command line option that will profile render process for the created window.

The goal here is to make it easy to see why an Atom window might be loading slowly.

It covers the time between the `window.onload` handler firing and the completion of the bootstrap script. So it will include deserialization, all requires, package loading, theme loading, etc.

``` sh
atom --profile-startup
```

![screen shot 2015-04-27 at 6 17 00 pm](https://cloud.githubusercontent.com/assets/671378/7361208/aab03f38-ed09-11e4-8e1d-7eb248f74995.png)
",579,True,en,0
6539,5,4,9,Externals,mnquintana,2015-04-30T17:50:43Z,38,2,2,2,"This changes `workspace::resetFontSize`'s behavior from restoring Atom's default font size to restoring the window's starting font size. 

This is, I think, far more useful behavior than restoring Atom's default font size, which you can do by just emptying the Font Size input in Settings View. If you've ever had to change the font size to make code more readable to others temporarily (ie. a presentation or a talk), having a command to return to what you had configured originally is a godsend. (I've found myself in that situation quite often.)

Please try this branch out and let me know what you think! :wink:

/cc @atom/feedback 
",637,True,en,0
6527,3,5,2,Externals,mnquintana,2015-04-28T00:38:42Z,12,0,3,0,"Adds ""Increase Font Size"", ""Decrease Font Size"", and ""Reset Font Size"" to the View menu, which is typical in other editors (TextMate, Brackets) and should help in discoverability.
",180,True,en,0
6526,1,10,0,Internals,lee-dohm,2015-04-28T16:13:00Z,1,0,1,1,"This will prevent Atom from crashing, but still allow folks who need large
font sizes for visual impairments to have them.

Fix #4880
",134,False,en,0
6522,2,1,0,Internals,izuzak,2015-04-28T11:42:51Z,18,5,2,1,"@kevinsawicki @maxbrunsfeld I _think_ this is the last of the fixes for the reports in https://github.com/atom/atom/issues/6310. :sweat_smile: 

Currently, there's no special `Grim.deprecate` call for the old context menu CSON format -- it's being detected [within `ContextMenuManager.add()`](https://github.com/atom/atom/blob/14161a63fe1b56aed834050bd8bb56180e6acfb3/src/context-menu-manager.coffee#L115-L123), which is called from [`Package.activateResources()`](https://github.com/atom/atom/blob/14161a63fe1b56aed834050bd8bb56180e6acfb3/src/package.coffee#L194). So, the `Grim.deprecate` call within `ContextMenuManager.add()` catches both calls to `ContextMenuManager.add()` from packages (adding menu items after activation) and calls to `ContextMenuManager.add()` from Atom when it adds menu items from packages' cson file at activation.

For that reason, the `Grim.deprecate` call in cases when `ContextMenuManager.add()` is called from Atom at package activation is incorrectly attributed to Atom itself. Also, the deprecation text is a bit confusing because it says that `ContextMenuManager.add()` was called, but the package didn't make such a call directly.

This PR adds a new `Grim.deprecate` call to `Package.activateResources()` _before_ `ContextMenuManager.add()` is called. This catches the old-context-menu-CSON-format situation so that it is correctly attributed to packages and a clearer message can be shown. In addition, the conversion from the old format to the new format happens in `Package.activateResources()` as well so that the `Grim.deprecate` call within `ContextMenuManager.add()` isn't triggered in that case. The `Grim.deprecate` call within `ContextMenuManager.add()` wasn't removed because it still needs to catch direct calls to that public method from packages.

Before (call attributed to Atom):

![screen shot 2015-04-26 at 11 08 40](https://cloud.githubusercontent.com/assets/38924/7337875/dcd9a894-ec39-11e4-98e5-ca53684b6ed2.png)

After (call attributed to package + a bit more direct deprecation message)

![screen shot 2015-04-26 at 11 11 41](https://cloud.githubusercontent.com/assets/38924/7337876/e1267b48-ec39-11e4-97e2-c39a08d4ed1f.png)

Does this approach look okay?
",2218,True,en,0
6510,2,2,0,Internals,izuzak,2015-04-24T16:52:33Z,4,4,1,0,"See https://github.com/atom/deprecation-cop/issues/36#issuecomment-95621001 (and the following few comments) for motivation.

@maxbrunsfeld @kevinsawicki This fixes the problems reported in https://github.com/atom/atom/issues/6310 and https://github.com/atom/settings-view/issues/476.

`activationEvents` before:

![screen shot 2015-04-23 at 17 08 12](https://cloud.githubusercontent.com/assets/38924/7321801/7f7b4824-eaa4-11e4-9a35-869f69244e34.png)

`activationEvents` after (now reported as a problem on the redacted package):

![screen shot 2015-04-24 at 16 52 00](https://cloud.githubusercontent.com/assets/38924/7321747/56474ab6-eaa4-11e4-8993-012d72895fb4.png)

`configDefaults` before:

![screen shot 2015-04-24 at 17 01 44](https://cloud.githubusercontent.com/assets/38924/7321839/9641003a-eaa4-11e4-8484-86de322d677b.png)

`configDefaults` after (now reported on the closer package):

![screen shot 2015-04-24 at 16 59 50](https://cloud.githubusercontent.com/assets/38924/7321752/5fd36c54-eaa4-11e4-80c5-bc270fe6334f.png)
",1032,True,en,0
6502,5,1,2,Externals,mnquintana,2015-05-20T01:47:29Z,4,4,2,26,"See atom/apm#268

/cc @atom/feedback 
",38,True,en,0
6501,1,1,0,Externals,mnquintana,2015-04-23T22:46:21Z,3,3,1,0,":arrow_up: 
",12,True,en,0
6499,1,1,0,Externals,pusateri,2015-04-23T21:11:49Z,2,2,1,0,"csslint removed their architecture limitations in 0.10.0 and so it no longer stops building on FreeBSD.
",104,True,en,0
6497,1,2,0,Externals,bolinfest,2015-04-23T20:54:26Z,4,0,1,0,,0,False,en,0
6493,1,1,0,Externals,mnquintana,2015-04-23T20:50:42Z,1,1,1,0,":arrow_up: tree-view@0.171.0
",29,True,en,0
6492,1,0,0,Externals,mnquintana,2015-04-23T20:49:44Z,1,1,1,0,":arrow_up: welcome@0.27.0
",26,True,en,0
6481,5,1,0,Internals,kevinsawicki,2015-04-23T23:29:10Z,41,5,3,1,"Put `atom.notifications` in the public API.

Mark `NotificationManager` and `Notification` as public as well and expose a minimal API.

Closes #5870
",149,True,en,0
6477,2,5,0,Internals,izuzak,2015-04-23T00:01:44Z,4,4,2,0,"_See https://github.com/atom/deprecation-cop/issues/36#issuecomment-94856987 for motivation._

@kevinsawicki @maxbrunsfeld I moved the two calls mentioned in the comment above :point_up: and that resolved the problem for those two calls. Here's how those two deprecations look now in Deprecation Cop:

![screen shot 2015-04-22 at 15 27 18](https://cloud.githubusercontent.com/assets/38924/7275823/4f85a690-e906-11e4-8cac-a704d9412577.png)

:sparkles: -- notice that they are attributed to pdf-view, not to Atom core.

However, there are two other `Grim.deprecate` calls which are still being incorrectly attributed to Atom core -- the ones which check if the value returned from `onDidChangeModified` and `onDidChangeTitle` are `Disposable`s. 

![screen shot 2015-04-22 at 15 31 08](https://cloud.githubusercontent.com/assets/38924/7276006/59974f52-e907-11e4-9542-b5b935d43f1d.png)

Those two calls are [here](https://github.com/atom/atom/blob/ecd04446434e47c505d7f1d3d8cb0fb76e91aa64/src/pane-view.coffee#L119) and [here](https://github.com/atom/atom/blob/ecd04446434e47c505d7f1d3d8cb0fb76e91aa64/src/pane-view.coffee#L128). As far as I can tell, I can't apply the same approach to these because they check if the _return value_ has a specific type. So it needs to stay there, I _think_.

Also, the ""magic"" which helps us solve the problem for the two deprecations in this PR is that we explicitly pass a package name to Grim.deprecate to tell it what package is involved. That ""magic"" is implemented in [atom.workspace.getCallingPackageName()](https://github.com/atom/atom/blob/ecd04446434e47c505d7f1d3d8cb0fb76e91aa64/src/workspace.coffee#L483). So, I tried calling this method from `pane-view.onActiveItemChanged()`, where the two deprecations checking for a `Disposable` return values are located, but that call returned `undefined`.

I'm not sure how to fix those two deprecations -- would love your help with those, if you have ideas. :pray: Also, maybe we can just remove them?
",1986,True,en,0
6470,1,1,0,Externals,brettle,2015-04-22T16:15:57Z,1,1,1,0,,0,False,en,0
6459,3,1,0,Internals,kevinsawicki,2015-04-21T23:24:14Z,3,3,1,0,"Result of looking at initial report from #6457 

/cc @mnquintana 
",66,True,en,0
6457,1,1,0,Externals,mnquintana,2015-04-21T22:50:19Z,1,0,1,0,"This adds a dependency status badge (from https://david-dm.org) to the Readme to make it a bit easier to keep track of dependency up-to-date-ness. Unfortunately, this only works for dependencies in `atom/atom/package.json` and not `atom/atom/build/package.json` (they don't support subdirectories... yet). This should make it a bit easier to keep track of dependency versions and see when we're out of date.

Eventually I'd like to add this to all package Readmes too, but that will come with @atom/issue-triage's big rewrites.
",528,True,en,0
6456,1,7,0,Externals,bolinfest,2015-04-21T22:51:13Z,2,2,1,0,"Fixes #6445.
",13,True,en,0
6450,5,4,0,Internals,as-cii,2015-04-21T22:52:30Z,23,13,2,0,"As you may have noticed, our Travis builds fail more often than not. That's due to our specs running in parallel, which slow down one another since (I suppose) we're on a single-core machine.

So, the important changes which we're going to introduce with this PR are:
- Set concurrency to `1` when we're on Travis;
- Use `sudo: false` infrastructure;

This should lead to a much consistent test result across builds (hopefully reducing spurious errors).

_Side note: once we manage to make specs working flawlessly on Linux, things should get much faster (and, in addition, we get caching for free)._
",601,True,en,0
6449,2,3,0,Internals,nathansobo,2015-04-21T14:20:14Z,40,3,3,0,"A common pattern is to put something on the DOM, measure it, then update the DOM again based on that measurement. This change ensures that any updates requested as a result of reading from the DOM get scheduled for the end of the current frame. If you want to read _again_ after these follow-on updates, you will need to wait for the next frame. But at least this way we ensure instant feedback with minimal thrashing (1 reflow) when we have no choice but to read the DOM before updating.

/cc @benogle
",503,True,en,0
6447,21,3,0,Internals,kevinsawicki,2015-04-20T23:47:13Z,61,16,4,0,"#6395 removed core specs and fixtures and this PR removes package specs and fixtures from the bundle to reduce the size.

It also removes a bunch of other unneeded files from the app bundle that I noticed while auditing.

This removes around **~2,500** unneeded files from the app which shrinks `app.asar` by 3MB.
",314,True,en,0
6446,1,5,1,Externals,bolinfest,2015-04-21T18:31:53Z,6,5,2,0,"Bump babel-core from 4.0.2 to 5.1.11.

Note that this is a major version bump, so `babel.coffee` also had to be updated to reflect the minor API changes.

Notable new features from the [changelog](https://github.com/babel/babel/blob/master/CHANGELOG.md) since 4.0.2:
- Add [trailing function comma proposal](https://github.com/jeffmo/es-trailing-function-commas).
- Decorators based on [@wycat's stage 1 proposal](https://github.com/wycats).

There is a number of bug fixes and performance improvements, as well.

One new error that users are likely to run into is this one in subclass constructors that reference `this` but not `super`:

```
'this' is not allowed before super()
```

As best I can tell, this was a recent-ish update to the ES6 constructor semantics spec that Babel is now enforcing: https://gist.github.com/allenwb/53927e46b31564168a1d. /cc @sebmck
",867,True,en,0
6433,1,1,0,Externals,vvakame,2015-04-19T15:12:26Z,1,1,1,0,,0,False,en,0
6431,2,0,0,Internals,nathansobo,2015-04-20T20:07:54Z,35,10,2,2,"Fixes #5771

When we change config values rapidly, we end up detecting our own changes to the user config file, causing a load to be requested. If we have made changes to the config since the last write that haven't yet been saved, our changes end up getting clobbered when the stale values are loaded. My simple solution is to just never load values from disk when there are unsaved changes pending.

This is actually a pretty nuanced problem to get right in the general case, and reminds me of the kinds of problems databases deal with. The sync API backed by async persistence is especially tricky. But I think for our limited case, it should be fine to suppress loading config for a brief window when we're about to write to it again.

/cc @maxbrunsfeld since this interacts with your original improvements to make config reads and writes asynchronous.
",857,True,en,0
6429,2,3,0,Externals,ghost,2015-04-17T19:44:58Z,1,1,1,0,,0,False,en,0
6407,2,0,0,Internals,kevinsawicki,2015-04-16T22:14:12Z,10,4,1,0,"While profiling startup I noticed that https://github.com/atom/atom-shell/blob/29338e2fa488c87a02a466d28b7f78ff9fc86903/atom/common/lib/asar.coffee#L56 was showing up in the profile a lot.

This fixes that by verifying that the `grammars` and `settings` folders exists before reading them.
",290,True,en,0
6395,1,1,0,Internals,kevinsawicki,2015-04-15T22:05:30Z,1,1,1,0,"This keeps the spec runner and helpers but not the specs themselves and not the fixtures.

This shaves ~225 files from the app bundle and 1.8M of size.

The spec runner should still run the same for packages and projects with a `spec/` folder.

This only impacts the ability to Atom's specs directly without cloning the repo first.

The remaining spec files shipped are:
- app/spec/atom-reporter.coffee
- app/spec/jasmine-helper.coffee
- app/spec/spec-bootstrap.coffee
- app/spec/spec-helper-platform.coffee
- app/spec/spec-helper.coffee
- app/spec/spec-suite.coffee
- app/spec/time-reporter.coffee

/cc @maxbrunsfeld 
",619,True,en,0
6392,1,0,0,Internals,benogle,2015-04-15T18:16:43Z,1,1,1,0,"Merge when 192 is out. Closes #6374 

Derp.
",44,True,en,0
6385,1,5,0,Internals,as-cii,2015-04-15T16:17:27Z,1,0,1,0,"Fixes #6274 :tada: :tada: :tada:

First of all, you can reproduce some of the failures mentioned in the previous issue by simply checking out **master** and focusing on a `SelectListView` spec and a failing spec on `TextEditorComponent`, e.g.:

``` diff
diff --git a/spec/select-list-view-spec.coffee b/spec/select-list-view-spec.coffee
index e22b24f..106661f 100644
--- a/spec/select-list-view-spec.coffee
+++ b/spec/select-list-view-spec.coffee
@@ -23,7 +23,7 @@ describe ""SelectListView"", ->
     {list, filterEditorView} = selectList

   describe ""when an array is assigned"", ->
-    it ""populates the list with up to maxItems items, based on the liForElement function"", ->
+    fit ""populates the list with up to maxItems items, based on the liForElement function"", ->
       expect(list.find('li').length).toBe selectList.maxItems
       expect(list.find('li:eq(0)')).toHaveText 'Alpha'
       expect(list.find('li:eq(0)')).toHaveClass 'A'
diff --git a/spec/text-editor-component-spec.coffee b/spec/text-editor-component-spec.coffee
index 769ce42..b518c0b 100644
--- a/spec/text-editor-component-spec.coffee
+++ b/spec/text-editor-component-spec.coffee
@@ -198,7 +198,7 @@ describe ""TextEditorComponent"", ->
       atom.config.set(""editor.showInvisibles"", false)
       expect(component.lineNodeForScreenRow(10).textContent).toBe nbsp

-    it ""gives the lines div the same background color as the editor to improve GPU performance"", ->
+    fit ""gives the lines div the same background color as the editor to improve GPU performance"", ->
       linesNode = componentNode.querySelector('.lines')
       backgroundColor = getComputedStyle(wrapperNode).backgroundColor
       expect(linesNode.style.backgroundColor).toBe backgroundColor
```

To be fair, this doesn't always cause the specs to fail: in 90% of the cases, though, it does on my machine so I assume it does on yours as well. Running the command below will help if you still cannot reproduce the error:

``` bash
$ sudo nice -n -20 stress --io 8 --cpu 8
```

Back to the randomly failing tests! :fire: 
### Why did they fail, then?

Our `spec-helper` is supposed to clear all the state from previous tests during `beforeEach` and `afterEach`: in practice, however, it doesn't do so for `setInterval` and `clearInterval`. The specs which use those two methods, either directly or indirectly, need to make sure to clean the state themselves or even mock those functions if they need them to write a particular expectation.

Specifically, the root of the failures resided in a dirty `ViewRegistry` which contained an active `setInterval` function instantiated by the previous SUT (e.g. `SelectListView` uses a `TextEditorView`, which in turn uses a `TextEditorComponent`, which in turn uses a `ViewRegistry` via `@pollDocument`) and which were being triggered during `TextEditorComponent` tests. The reason why they presented to ourselves in a randomized fashion, was because the _unmocked_ `setInterval` method was used during `SelectListView` specs and the system triggered the timeout independently from our `advanceClock`.
### A solution

My first reaction was to always mock `setInterval` and `clearInterval`, as `TextEditorComponent` does, in our `spec-helper`, but then I noticed this in `text-editor-presenter-spec.coffee`:

``` coffee
# These *should* be mocked in the spec helper, but changing that now would break packages :-(
spyOn(window, ""setInterval"").andCallFake window.fakeSetInterval
spyOn(window, ""clearInterval"").andCallFake window.fakeClearInterval
```
- A quick workaround could be to mock such methods only while running core tests. The question is: do we have a way to recognize when we're in such environment?
- An alternative could be to mock those two methods in `select-list-view-spec`, but we wouldn't use them at all for our test assertions and I'd love not to bother with this stuff every time we deal with a SUT which uses those methods internally (also because we may not be aware of that).

That said, I have decided to put a `@stopPollingDocument` right inside `ViewRegistry#clearDocumentRequests` which, to be fair, seems a quite reasonable tradeoff to me. This seems to have fixed those spurious errors once for all (https://travis-ci.org/atom/atom/jobs/58576153) and I cannot reproduce them locally anymore :tada: 

I'd :heart: to hear your feedback on this :bow: 

/cc: @kevinsawicki @maxbrunsfeld 
",4401,True,en,0
6383,12,8,10,Externals,mnquintana,2015-04-15T17:21:57Z,29,0,2,0,"This adds `data-active-path` and `data-active-name` to `atom-pane` for any active buffer that implements `::getPath` ‚Äì refs atom/tree-view#406, https://github.com/atom/tree-view/pull/406#issuecomment-83653324

This lets you do things based on whether or not a buffer has a file path (like enabling or disabling commands, for instance).

/cc @kevinsawicki @maxbrunsfeld 
",372,True,en,0
6381,5,1,0,Internals,kevinsawicki,2015-04-15T16:47:15Z,30,8,6,0,"This is a follow up to #5828 which adds custom notifications for a few places that weren't showing them when stylesheet loading failed.

Closes #6356
",150,True,en,0
6380,7,14,19,Internals,maxbrunsfeld,2015-04-15T22:50:22Z,168,85,7,1,"- [x] Write integration test
- [x] Make it pass
- [x] Fix duplicated logic for working w/ `~/.atom/storage`
- [x] Debug integration test failures

Closes #1603.
",161,False,en,0
6368,6,3,0,Internals,kevinsawicki,2015-04-14T17:09:21Z,6,38,4,0,"This pull request consolidates the selector validation and specificity caching into the `clear-cut` library and upgrades to the faster specificity calculations via https://github.com/atom/clear-cut/pull/2.

Previously selector specificity was calculate and cached multiple places meaning cached values were not shared between keymaps, command registry, and context menus.

Now all places that parse selectors and calculate specificity share one common cache.

:racehorse: 
",473,True,en,0
6367,2,0,0,Internals,benogle,2015-04-14T17:22:02Z,2,2,2,0,"Now that https://github.com/atom/scandal/pull/21 is merged and there are no more duplicates when searching symlinked files, this should default to true. 
",154,True,en,0
6365,2,0,0,Internals,kevinsawicki,2015-04-14T00:11:27Z,16,5,2,0,"There was a regression at some point where the files under `static/` were not properly prebuilt into the Less cache causing them to be recompiled on the fly during runtime.

This would slow down the very first launch of Atom on a machine before `~/.atom/compile-cache` would be populated.

It would also slow down the first launch after an update whenever a stylesheet under `static/` had been changed.

This saves ~500ms off of the very first Atom launch on a machine by not having to compile the following Less files on the fly:
- `static/atom.less`
- `static/text-editor-shadow.less`
- `node_modules/atom-space-pen-views/stylesheets/select-list.less`

You can see this slow down by deleting `~/.atom/compile-cache/less` and then restarting Atom with `--safe`.
",763,True,en,0
6364,5,1,0,Internals,benogle,2015-04-14T00:48:56Z,40,14,3,0,"This is a version of #6050 that handles all cases and passes the specs. cc @seansay

Closes #6050 
Closes #5963
",112,True,en,0
6359,10,3,3,Internals,as-cii,2015-04-14T18:07:58Z,46,21,9,1,"While addressing #6248 I discovered some flaky tests: some of them failed only on Linux, some others failed just because they were executed in a slow machine. In both cases, there wasn't a good reason why they should have failed and, therefore, I decided to fix them :green_heart: 

Please note that, although my ultimate goal is to make every spec bullet-proof, the changes here proposed are deliberately not comprehensive: there are a bunch of other tests which need to be inspected (see #6274) but I think it's better to address each of them incrementally, without creating gargantuan pull requests.

Also, I think this highlights the importance of running specs on every platform: even though all the tests hereby addressed were failing because of a bug in the test itself (and not in our production code), there's a quite high risk of introducing bugs on other platforms without noticing it.

An additional pair of :eyes: is most welcome, especially for some changes (in which I am going to write an additional comment).

Thanks :bow: 

/cc: @maxbrunsfeld @nathansobo @kevinsawicki 
",1088,True,en,0
6338,1,2,0,Externals,subesokun,2015-04-11T20:02:56Z,1,1,1,0,"`atom.fs` is undefined in the current Atom version. The function `getHomeDirectory()` seems to be now only available in the Atom `fs-plus` package.
",148,True,en,0
6333,7,2,2,Internals,kevinsawicki,2015-04-13T22:57:00Z,23,4,3,3,"Precompile the `static/bootstrap.less` file and ship a `static/bootstrap.css` instead.

This shaves ~10ms off of startup since the less import cache checks aren't run and the file system is only hit once for the `.css` file instead of 10 times for all the bootstrap imports.
",275,True,en,0
6323,1,1,0,Internals,maxbrunsfeld,2015-04-13T18:02:59Z,4,6,1,3,"/cc @atom/core - could you double check my wording of this message?
",68,True,en,0
6313,16,8,0,Internals,kevinsawicki,2015-04-15T23:22:12Z,64,25,12,7,"Reverts atom/atom#6242 and brings back #5382 
### Packages To Test

These packages use a buffered process which might have issues inside an `.asar` archive.
- [x] Symbols View
- [x] Notifications
- [x] Package Generator
- [x] Settings View
- [x] Tree View
- [x] Update Package Dependencies
- [x] `apm` populating the compile cache on package install
### Platforms To Test
- [x] Windows
  - Verify atom and apm commands work with installer
  - Verify no long paths
- [x] Mac
  - Verify atom and apm commands install from system menu
- [x] Linux
  - Verify atom and apm commands work from native package installation
### Results
- Startup appears 100-200ms faster on my Windows 8.1 VM running inside Parallels
- Windows installer appears to be much snappier
",756,False,en,0
6297,15,0,0,Internals,kevinsawicki,2015-04-08T18:00:49Z,52,14,5,0,"We've inlined the bundled package metadata, keymaps, and menus for awhile but neglected the core keymaps and menus.

This pull request inlines all the files in the `keymaps/` and `menus/` folders into the main app's `package.json` file so ~5 fewer JSON files are read and parsed at startup.

I noticed this when I saw `atom.menus.loadPlatformItems` show up in the startup profile since it does a resolve, read, and parse that is directly mirrored in `atom.contextMenu.loadPlatformItems` as well.
",496,True,en,0
6295,2,0,0,Internals,kevinsawicki,2015-04-07T23:09:59Z,1,2,1,0,"This code was really old and an initial oversight, `require` should have been used to read the root `package.json` file like is done in `package.coffee` so that it is cached since it is ~500k.

This shaves 5-10ms off of startup.
",229,True,en,0
6294,5,0,0,Internals,kevinsawicki,2015-04-07T22:27:33Z,8,10,5,0,"Found a few emissary requires that were left around that could be :fire: or moved into a deprecated block.
",107,True,en,0
6292,6,0,0,Internals,kevinsawicki,2015-04-07T20:32:13Z,6,3,6,0,"This pull request adds system menus and keybindings for the new `application:add-project-folder` command.

It repurposes the current `application:open-dev` keybinding since `application:add-project-folder` is much more commonly run and `application:open-dev` is only used by people writing packages or hacking on core.

You can bind back `application:open-dev` in your `~/.atom/keymaps.cson` file via the following:

``` coffee
'atom-workspace':
  'cmd-alt-o': 'application:open-dev'
```

/cc @maxbrunsfeld @thedaniel 
",519,True,en,0
6291,1,0,0,Internals,maxbrunsfeld,2015-04-07T19:30:37Z,5,5,3,0,"Refs #5728.
",12,True,fr,0
6281,2,4,0,Internals,izuzak,2015-04-07T18:51:19Z,10,4,2,0,"Currently, clicking the ""Report issue"" menu option in Atom takes the user to the New Issue form on GitHub for atom/atom. 

![screen shot 2015-04-07 at 13 48 47](https://cloud.githubusercontent.com/assets/38924/7022511/f34967ca-dd2c-11e4-9fc0-96e60bc3769b.png)

I think that's great -- it allows users to quickly report issues. However, it doesn't assist users in creating a good bug report or feature request. We've noticed lots of issues created without even basic information such as Atom version, OS, expected behavior, and screenshots. 

This PR changes the in-app menu option to instead point users to the [CONTRIBUTING guide section on submitting issues](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#submitting-issues). That section explains which information users should include in issues and also points them to the debugging guide. This will introduce an additional step in the process for creating issues, but it will hopefully result in higher quality issues which are easier to triage (and fix). :pray: 

Also, I slightly updated the CONTRIBUTING guide to state this goal more clearly, include a link to the New Issue form in the first bullet, and point to package repositories in the section on submitting issues. The CONTRIBUTING guide will see a lot more updates in the near future, this is just a first step.

cc @atom/core @atom/issue-triage 
",1373,True,en,0
6275,4,0,0,Internals,kevinsawicki,2015-04-06T23:49:11Z,6,3,3,0,"Core spec deprecations are clear on before each run meaning they aren't reported to the build output and the build doesn't fail when they are hit.

This pull request is an attempt to rid the core specs of deprecated calls and fail the build going forward whenever deprecations are hit in core specs.
",300,True,en,0
6273,1,0,0,Internals,maxbrunsfeld,2015-04-06T22:44:26Z,25,3,3,0,"I think this will make it easier for people to add root folders. Now they can trigger the command (`Application: Add Root Folder`) anywhere within the workpace, not just on the tree view. This doesn't add any key-binding to the command.
",237,True,en,0
6272,16,0,0,Internals,kevinsawicki,2015-04-06T22:45:40Z,130,78,8,0,"This migrates the classes that `extend Model` to use a new simpler version that has incrementing `id` support built-in but doesn't pull in the full models from the theorist library.

This ensures model elements such as `TextEditor` won't have emissary mixins included when in 1.0 API preview model.

This is a follow-on pull request to #6103 
",343,True,en,0
6248,53,19,8,Internals,as-cii,2015-04-16T16:54:20Z,53,9,7,12,"Closes #6222  :green_heart: :green_heart: :green_heart:
- [x] Setup Travis
  - [x] OS X setup. [You can see a passing build here.](https://travis-ci.org/as-cii/atom/builds/57160743)
  - [x] `script/cibuild` didn't work out of the box on Travis; on my OS X machine it doesn't work either, [showing the same failures](https://travis-ci.org/as-cii/atom/builds/57005243). @kevinsawicki: any idea why we're getting those errors? `run-specs` task is not really reliable on my machine and I usually run tests through `apm test`: do you think we can keep it in Travis as well?
  - [x] Linux setup (to test builds only, as per current `cibuild` behavior).
    - [x] Ask Travis to enable multi-os setup, [as it is disabled by default](http://docs.travis-ci.com/user/multi-os/)

Any idea or suggestion is most welcome, as usual. Thank you! :pray: 

/cc: @atom/non-github-maintainers @atom/owners 
",886,False,en,0
6246,1,7,0,Externals,jussi-kalliokoski,2015-04-22T00:43:45Z,26,21,4,18,"Also removed duplicated logic to run grunt.
",44,True,en,0
6242,1,4,0,Internals,kevinsawicki,2015-04-03T18:26:50Z,22,46,13,0,"Reverts atom/atom#5382 because of https://github.com/atom/symbols-view/issues/89
",81,True,en,0
6240,1,1,0,Internals,maxbrunsfeld,2015-04-03T17:50:55Z,12,18,2,0,"Fixes atom/vim-mode#602
Fixes atom/vim-mode#496
",48,False,lt,0
6239,6,3,4,Internals,as-cii,2015-04-07T16:10:00Z,29,4,2,3,"Closes #6108.

Before these changes, when a line contained multiple selections and `deleteLine()` was called, two lines would have been deleted instead of just one. This happens because, when the line containing the first selection is deleted, the other selection doesn't get destroyed but it simply moves.

This PR tries to fix this by merging selections that have intersecting rows. However, I do feel like there may be some other elegant solutions to this: I am thinking to something like `Marker` invalidation, for example.

/cc: @nathansobo 
",547,True,en,0
6230,5,13,5,Externals,mnquintana,2015-04-08T19:07:23Z,157,144,41,5,"This PR adds more coffeelint rules to cover code style requirements from CONTRIBUTING.md, and one rule that wasn't explicitly defined in CONTRIBUTING.md, but was already used everywhere in the codebase.

Refs atom/settings-view#449, atom/settings-view#44, #5982 

/cc @kevinsawicki I wanted to update the coffeelint rules first in core before I go and add coffeelint.json to all the package repos.
",398,True,en,0
6225,1,4,0,Internals,lee-dohm,2015-04-06T16:34:56Z,1,1,1,3,"Fixes #6224 
",13,True,en,0
6220,2,1,0,Internals,as-cii,2015-04-02T16:28:09Z,36,4,2,0,"Closes #6190 

When copying, cutting, pasting and mutating selections in general, we were accessing selections as they were added to the editor. This caused unexpected behaviors, especially when dealing with multi-line selections.

With this pull-request we now compute all the aforementioned operations ordering the selections first. This is also consistent with how Sublime Text works :sparkles:

/cc: @nathansobo 
",417,True,en,0
6208,3,2,0,Internals,jlord,2015-04-01T22:14:22Z,19,1,1,0,"A wee PR here to add a section on spec writing. Coming from a suggestion from @nathansobo [here](https://github.com/atom/markdown-preview/pull/220#issuecomment-84234793).

Nathan, I tweaked the orginal dog scenario to be a happier one :dog: :grinning: 

[r E n D e R e D](https://github.com/atom/atom/blob/0f43b246b4ef5c1759c81440e8b0b2abbf9230d3/CONTRIBUTING.md)
",364,True,en,0
6206,1,1,0,Externals,mertkahyaoglu,2015-04-01T17:36:57Z,0,2,1,0,,0,False,en,0
6205,2,0,0,Internals,kevinsawicki,2015-04-01T16:53:48Z,31,0,1,0,"Folders of the style `npm-10200-49dae08c` are filling up our CI machines so delete them all each time a CI build runs since they are leftovers from previous builds and are never reused or needed again.
",202,True,en,0
6202,1,4,0,Externals,jessegrosjean,2015-04-09T19:05:15Z,3,0,1,8,"This exports the pathwatcher File and Directory classes through require('atom').

I think this makes sense since those classes are already publicly documented as part of the Atom platform API, but currently there's no way for a package to require and instantiate them. The alternative is to add the pathwatcher module to my own package, but this seems redundant since File and Directory are already documented as part of the Atom platform. Also since pathwatcher is a native package it's even more problematic then it would be with a normal package.
",550,True,en,0
6200,1,1,0,Externals,mertkahyaoglu,2015-04-01T15:31:57Z,1,2,1,0,,0,False,en,0
6199,10,1,0,Internals,zcbenz,2015-04-01T20:13:40Z,2,2,2,0,,0,False,en,0
6197,17,0,4,Internals,benogle,2015-04-02T01:24:24Z,393,268,11,0,"Here is an overlay outside the editor bounds with a `-250px` `left-margin`:

![screen shot 2015-03-31 at 7 13 04 pm](https://cloud.githubusercontent.com/assets/69169/6933331/7e001cfe-d7da-11e4-9b83-4b810b9894fb.png)

Here is autocomplete using the new overlay. Note how it is up against the window, and it is shifted horizontally and flipped vertically to keep within the window.

![autocomplete-recompute-better](https://cloud.githubusercontent.com/assets/69169/6933332/8b437e92-d7da-11e4-8e81-8485c5cc1968.gif)
### Notes
- The overlay parent is the `atom-text-editor`. The editor and containing pane are now both `overflow: visible`. This allows the pane item the flexibility to have things jump out if necessary.
- When bumping up against the left or right edge of the window, the overlay will _shift_ horizontally, not flip. This always keeps it in the window frame. Shifting felt more natural than flipping.
- When bumping up against the bottom edge of the window, the overlay will flip. It will not necessarily be always visible in the window frame (due to scrolling), but does its best with the flip.
- A `left-margin` is supported on the overlay. It will take the margin into account when doing the window bounds-checking. Note the blue box in the first image has a `-250px` left margin.
- In the future, it would be nice to allow configuration of the shift or flip, or bounds checking at all, but for right now, keeping it simple.
### TODO
- [x] Make it work
- [x] Clean up the overlay caching :art:
- [x] Move specs to the presenter
- [x] All specs passing

cc @nathansobo @bolinfest 
",1595,True,en,0
6175,1,0,0,Internals,jlord,2015-03-31T00:04:59Z,2,2,1,0,"Bump the versions of `deprecation-cop` and `image-view` used to the newest versions which are published from `master` rather than the branch I made a PR with :grin: 
",166,True,en,0
6174,1,1,0,Internals,jlord,2015-03-30T23:16:13Z,1,1,1,0,"Use the latest version of `status-bar` which moves to the deprecation call for the `legacyProvideStatusBar` to the returned methods. https://github.com/atom/status-bar/pull/65

:green_apple: :green_apple: :green_apple: :green_apple: :green_apple: 
",248,True,en,0
6173,1,0,0,Internals,benogle,2015-03-30T21:38:28Z,13,0,1,0,"Will be used by syntax themes, and autocomplete
",48,True,en,0
6167,7,8,4,Externals,jessegrosjean,2015-04-02T17:52:55Z,32,0,3,3,"Currently screenPositionForPixelPosition special cases pixel positions
below the last row so that the column position is always set to the
last column of the last line, even if the pixel 'x' position is less
then that column.

This patch special cases picks above the first row so that the  text
column position will be in the first column even if the pixel 'x'
position is greater then that column.

At a higher level, this patch fixes the problem where you can‚Äôt select
to the start of a text field by just clicking and dragging up. Instead
you have to click and drag back (x axis) beyond the start of the text
field.

Closes #6168
",636,False,en,0
6166,1,0,0,Internals,jlord,2015-03-30T17:32:05Z,1,1,1,0,"Bump the version required here because I tangled up the other one :grin:
",73,True,en,0
6138,1,0,0,Internals,jlord,2015-03-27T23:57:24Z,1,1,1,0,"Use the latest version of `image-view` which uses the latest version of the `status-bar` Services API :peach: 
",111,True,en,0
6137,1,0,0,Internals,jlord,2015-03-27T22:53:59Z,1,1,1,0,"Use the latest version of `feedback` which uses the latest version of the `status-bar` services API :palm_tree: 
",113,True,en,0
6132,1,1,0,Internals,jlord,2015-03-27T20:54:54Z,1,1,1,0,"Use the latest version of `deprecation-cop` which uses the latest version of the `status-bar` Service API. :cat2: 
",115,True,en,0
6131,1,0,0,Internals,jlord,2015-03-27T19:54:57Z,1,1,1,0,"The latest version of `settings-view` which is using the latest version of the `status-bar` Service API.

:balloon: 
",117,True,en,0
6127,1,0,0,Internals,maxbrunsfeld,2015-03-27T17:41:13Z,8,1,2,0,"Fixes #6126
",12,True,en,0
6115,1,4,0,Externals,lukecaputo,2015-03-30T16:13:16Z,1,1,1,3,"change spelling: ""judgement"" to ""judgment"".
",44,True,en,0
6114,4,0,0,Internals,nathansobo,2015-03-26T23:34:39Z,167,126,9,0,"Fixes #6110
",12,True,en,0
6112,7,0,0,Internals,kevinsawicki,2015-03-26T17:48:51Z,6,6,2,0,"The rpm CI builds were failing after a recent upgrade to a new Fedora 20 container.

Fedora 21 came out last December so lets starts building on that.
",151,True,en,0
6109,2,1,0,Externals,mnquintana,2015-03-26T15:56:45Z,2,2,2,0,"Wooo 2015 :beers: 
",19,True,nl,0
6103,65,2,0,Internals,kevinsawicki,2015-04-03T19:22:39Z,1117,1064,35,8,"This pull request adds a new command line flag (`-1` or `--one`) that will launch Atom with no core deprecated APIs so you can test out the 1.0 API experience where APIs will be missing instead of present but logging deprecations.

So things like `atom.workspaceView` will be unavailable and so you can use this flag to test out that your packages will work correctly when 1.0 comes out.

The basic flow here is to check `Grim.includeDeprecatedAPIs` in places and to co-locate all the prototype methods at the bottom of the file so they can all be deleted easily once 1.0 ships.
### Deprecations To Update
- [x] atom/atom
- [x] https://github.com/atom/atom-keymap/pull/77
- [x] https://github.com/atom/event-kit/pull/5
- [x] https://github.com/atom/first-mate/pull/41
- [x] markdown-preview
- [x] https://github.com/atom/node-pathwatcher/pull/68
- [x] https://github.com/atom/scoped-property-store/pull/13
- [x] https://github.com/atom/text-buffer/pull/55
- [x] wrap-guide

Refs #5164
",985,True,en,0
6098,3,0,2,Internals,kevinsawicki,2015-03-27T00:20:26Z,9,8,2,1,"Previously deprecations were only shown in dev and test windows.

Removing this check enables it for all windows.
",114,True,en,0
6085,2,0,0,Internals,jlord,2015-03-27T01:08:33Z,1,1,1,2,"This updates Atom to the latest version of `markdown-preview` with a fix for scrolling to the top of the preview when editing a file with code blocks! :tada: 
",159,True,en,0
6078,5,0,0,Internals,kevinsawicki,2015-03-24T20:40:02Z,14,2,4,0,"Tweaks notifications to prompt to open issues on the package instead of core when an error is thrown loading a package or is thrown from an unloaded package.

Closes atom/notifications#48
",188,True,en,0
6077,1,2,0,Externals,bolinfest,2015-03-23T23:31:45Z,7,0,2,0,"For `GitRepository`, this will return `""git""`.
",47,True,en,0
6072,1,0,0,Internals,jlord,2015-03-23T20:19:24Z,1,1,1,0,"This updates to the latest version of `markdown-preview` which no longer has a cursor for each text block :1234: 
",114,True,en,0
6047,1,1,0,Externals,postcasio,2015-03-23T16:24:07Z,5,5,1,3,"Noticed that a couple of deprecated methods on project were themselves calling deprecated methods, and recommending the use of deprecated methods.
",147,True,en,0
6041,1,1,0,Internals,nathansobo,2015-03-19T20:38:15Z,34,18,3,0,"Reverting the revert... the spec failures weren't caused by the PR I reverted as I originally thought. My apologies @as-cii.
",125,True,en,0
6040,1,0,0,Internals,nathansobo,2015-03-19T18:48:05Z,18,34,3,0,"Reverts atom/atom#6030
",23,True,en,0
6038,10,2,0,Internals,kevinsawicki,2015-03-19T21:16:26Z,124,6,35,0,"Profiling some of the lower level libraries in the past has shown GC pauses and slow downs when methods accidentally build-up and return an array accidentally when the function ends with a `for` or `while` loop.

This cleans up a bunch of areas in core that were doing this involuntarily as well as adds a grunt task to lint for them in the future.

This also updates array copies to consistently use `slice` instead of `for` which is significantly faster, https://jsperf.com/slice-vs-loop-return/2

I don't have any metrics on before/after speedups but it does reduce the total JS size of the `src` folder by ~225 lines.

This also prevents some public APIs from returning arrays accidentally when they should have been returning `undefined`.
",744,True,en,0
6030,4,3,1,Internals,as-cii,2015-03-19T16:58:55Z,34,18,3,0,"Closes #5995 :sparkles: 

As pointed out on the aforementioned issue, Atom behaved unexpectedly while soft-wrapping tab-indented lines. I tracked down the issue to `TokenizedLine#findWrapColumn`: when searching backwards for spaces, in facts, the method didn't skip indentation tokens.

But why this was happening only for tab-indented lines? That's because invisibles were getting replaced with visible characters. However, the replacement for `\t` has a trailing space `¬ª`, whereas the replacement for spaces hasn't.

This PR changes the behavior to always skip indentation tokens while scanning the line backwards for spaces :beetle: :gun: 

![screen shot 2015-03-19 at 12 05 31](https://cloud.githubusercontent.com/assets/482957/6729204/44fb8b72-ce30-11e4-8a1b-4e41d81da2c6.png)

/cc: @izuzak @nathansobo
",810,True,en,0
6027,9,10,0,Internals,zcbenz,2015-03-25T02:30:27Z,4,4,3,6,"This PR upgrades atom-shell to v0.22.1, which uses Chrome 41 and io.js 1.5.1.

Fixes #309.

![screen shot 2015-03-19 at 9 22 46 am](https://cloud.githubusercontent.com/assets/639601/6722740/a499a242-ce19-11e4-8503-d325e66acafa.png)
",232,True,en,0
6026,4,2,0,Internals,jlord,2015-03-19T21:04:21Z,50,2,6,0,"This is a short term fix for https://github.com/atom/settings-view/issues/416 (because it's causing quite a bit of errors)‚Äîmaking Atom to check first that the method exists and skip if it doesn't.  

A more ideal, but more complicated, fix down the line will involve updating requires when upgrading a package. 

:pear: 'd with @kevinsawicki 
cc @izuzak @maxbrunsfeld 
",371,True,en,0
6016,2,3,0,Externals,basarat,2015-03-19T08:38:43Z,1,1,1,1,"This is purely from code review. I haven't managed to get tests working on windows.
",84,True,en,0
6015,1,0,0,Internals,thedaniel,2015-03-18T06:46:41Z,1,1,1,0,"- [Add package card hover state](https://github.com/atom/settings-view/pull/429)
- [Enablement updates](https://github.com/atom/settings-view/pull/407)
- [Variable font size](https://github.com/atom/settings-view/pull/404)
",223,False,en,0
6011,12,0,0,Internals,kevinsawicki,2015-03-17T23:26:25Z,10,10,1,0,"Upgrade core, core libraries, and core packages to use pathwatcher 4.x which had some breaking changes from 3.x such as a `Sync` suffix to methods on `File`.

Closes #5706 
",173,True,en,0
6010,12,15,10,Internals,as-cii,2015-03-18T17:39:28Z,62,24,4,0,"Closes https://github.com/atom/atom/issues/6003

/cc: @nathansobo 
",67,True,xh,0
6007,1,3,0,Externals,octref,2015-03-18T00:00:40Z,1,0,1,0,"For file format that Atom doesn't recognize as a
programming language, such as log files,
skip Tokenization since no syntax highlighting should be done.
",153,False,en,0
6005,2,3,8,Externals,vegar,2015-04-09T13:44:55Z,5,3,1,22,"I just learned that [calling open on workspace](https://discuss.atom.io/t/how-can-we-help-you-write-packages/4268/67) without specifying an uri is the way to go for getting a new tab with a new document. 

I can't find anything about this in either the docs or the [api documentation.](https://atom.io/docs/api/v0.187.0/Workspace#instance-open)

Should `uri` be marked optional, like the `options` params? And should it be added a line stating that no uri opens a blank editor?

(and there's an extra `a` in the title..)
",521,True,en,0
5994,11,0,0,Internals,kevinsawicki,2015-03-17T00:42:05Z,29,3,7,0,"I noticed bracket matcher was still calling `TextEditor::on` for a `destroyed` event and not getting a deprecation warning for it.
",131,True,en,0
5993,2,0,0,Internals,kevinsawicki,2015-03-16T23:03:11Z,4,3,3,0,"Closes #5173 
",14,True,en,0
5969,4,1,0,Externals,mnquintana,2015-03-17T01:07:42Z,6,0,3,2,"I've found myself wanting to do this quite frequently ‚Äì this PR adds ""Close Pane"" to `atom-pane`'s context menu, allowing you to close the active pane from the context menu just like you can do with the ""Split"" pane commands.
",228,True,en,0
5961,2,0,0,Internals,maxbrunsfeld,2015-03-13T20:28:41Z,9,2,5,0,"Depends on https://github.com/atom/service-hub/pull/4 being merged and a published in `service-hub@0.5.0`.

Refs atom/status-bar#63.
",133,True,en,0
5960,4,2,1,Externals,Bjoernsen,2015-03-17T23:50:00Z,3,3,3,4,"Currently, it is not possible to use atom for multiple users on the same linux machine. The socket file '/tmp/atom.sock' belongs to the first user that starts atom.
With this small change, a socket file will be created for each user.
",234,False,en,0
5959,7,3,5,Internals,as-cii,2015-03-16T17:26:54Z,132,16,4,3,"This fixes #5788 

As reported on the issue, Atom behaved inconsistently while adding selections (above or below) on lines made of tokens with a `screenDelta > bufferDelta` (e.g. tabs). The behavior was not compatible with Sublime Text, too, which handles the scenario like this:
- Selecting above or below works with what's visible on screen (thus, no mismatch between buffer length and screen length)
- Soft-wrapped lines are therefore included while selecting
- When a soft-wrapped line has indentation, skip it and select the first real character

This is the behavior I would expect in Atom as well and, hopefully, this PR includes everything that's needed to achieve it :fire: 

An additional pair of :eyes: is most welcome, but even if code-wise this looks good, I'd prefer to leave this open for a while so that the community has the chance to test-drive it.

Thank you! :bow: 

/cc: @benogle @izuzak @nathansobo @kevinsawicki 
",936,True,en,0
5951,4,1,1,Internals,as-cii,2015-03-12T18:36:51Z,28,2,2,0,"Supersedes and closes #4597

Thanks to @izuzak, @neojski and @nathansobo for reporting the issue, providing an alternative algorithm and bringing the issue forward: you are great guys! :clap: 

As usual, an additional pair of :eyes: is most welcome :bow: 
",256,True,en,0
5949,1,0,0,Internals,nathansobo,2015-03-12T02:58:33Z,1,1,1,0,"Reverts atom/atom#5944
",23,True,en,0
5944,1,0,0,Externals,bolinfest,2015-03-12T02:29:24Z,1,1,1,0,,0,False,en,0
5942,5,2,0,Externals,schacon,2015-03-12T06:02:59Z,35,2989,27,0,"All these docs have been moved to the atom/docs repository, integrated into the Flight Manual.
",95,True,en,0
5936,2,3,0,Internals,as-cii,2015-03-13T18:28:46Z,16,10,3,2,"As reported by @nathansobo on #5858:

> I'm fine with leaving the optimization in, although extra bonus :christmas_tree: would be to only destroy folds containing a selection when the selection changes. I don't think selectAll should destroy anything. If you get inspired I would love to remove the optimization combined with that behavior change.

:fire:

Any feedback or suggestion is very welcome, as usual. Thank you! :bow: 

/cc: @izuzak 
",444,True,en,0
5926,1,0,0,Internals,jlord,2015-03-10T22:28:59Z,4,4,1,0,"The `status-bar` has been updated and the latest version of these packages uses the latest `status-bar`.

Tracking: https://github.com/atom/atom/issues/5726 
",158,True,en,0
5904,2,4,0,Internals,as-cii,2015-03-09T16:44:54Z,17,14,2,0,"Close #5883 
Close #5667

Thanks to @izuzak for making this issue reproducible for everyone. Great job, seriously! :clap: 

Unfortunately, #5883 is caused by something different than #5667: if you try to checkout `v0.180` (where the issue originally appeared) you'll find out that the reproducing steps provided by @izuzak won't cause any problem. Therefore, I'd like to apologize with every Atom user for this issue (I am truly sorry if this has caused headaches to you :pray:), because this has been caused by our batching strategy. 

When there is only one pane, everything goes smoothly and no error occurs. However, when there's more than one (and with some particular packages enabled), our `TextEditorPresenter` goes out-of-sync, thus causing that annoying `No line exists for row #{row}. Last screen row: #{@model.getLastScreenRow()}` error. This happens because:
- Something change in the underlying buffer
- `getState` gets called before `updateStartRow` and `updateEndRow` (which would be triggered by a change in the buffer)
- `updateLinesState` tries to traverse an obsolete row range

For symmetry with `@updateState`, I opted to simply include `@updateContentDimensions`, `@updateScrollbarDimensions`, `@updateStartRow` and `@updateEndRow` right before performing any change to the actual state in `@getState`. I didn't batch these methods because they are used also by other non-batched operations (see `@updateHighlightState`) and therefore need to be updated every time. On the other hand they are very fast, and it should be quite cheap to call them.

This should solve once for all any issue that arise from the presenter going out-of-sync with the underlying model because of the async nature of the updates. As a result, I believe that the original issue can be closed as well.

Once again, sorry if this has caused problems to you!

/cc: @nathansobo 
",1874,False,en,0
5902,24,30,19,Externals,liuxiong332,2015-04-15T20:31:33Z,308,12,10,37,"### this commit request implement resizable panes and achieve the feature of  #274.

**printscreen**:
![resizepane](https://cloud.githubusercontent.com/assets/3992532/6550615/8c760832-c666-11e4-8d5e-dcb5ab2f211d.gif)
#### approach

the approach is inserting resizable view (named pane-resize-handle-view) between two panes. when user move the resizable view,  I will change the pane's flexGrow style value by two pane's width or height ratio. for example, if the left pane is  200px and the right pane is 600px, then I will modify flexGrow style to 0.5 and 1.5.
This way is like tree view's resizable view.
",607,True,en,0
5898,5,22,9,Externals,basarat,2015-03-26T21:33:04Z,161,1,8,18,"This is similar to https://github.com/atom/atom/pull/5299 

Provide TypeScript support to ease package development.
# Motivation
- Provides built in support for sourcemaps 
- No longer need to check in `.js` files when creating packages using TypeScript 
# Sample

You can see a sample package here : https://github.com/basarat/atom-typescript-test 
![image](https://cloud.githubusercontent.com/assets/874898/6544570/f7ff3fc8-c5a9-11e4-86ed-964df59ee80b.png)
![image](https://cloud.githubusercontent.com/assets/874898/6544572/0a1edda8-c5aa-11e4-92cd-d32043e1f958.png)

same as other PR 

``` js
global.require('../src/typescript/').getCacheHits()
global.require('../src/typescript/').getCacheMisses()
```
## TODO:
- [x] Add transpiling support
- [x] Add tests

/cc @vvakame @csnover
",783,True,en,0
5894,1,1,0,Externals,basarat,2015-03-09T16:53:37Z,1,0,1,1,"closes https://github.com/atom/atom/issues/5888
",48,True,en,0
5878,2,0,0,Internals,zcbenz,2015-03-06T02:09:52Z,2,2,2,0,,0,False,en,0
5875,1,7,0,Internals,maxbrunsfeld,2015-03-10T21:31:42Z,3,35,3,4,"No more `atom --multi-folder`

Closes #770.
",44,True,en,0
5874,4,0,0,Internals,kevinsawicki,2015-03-05T22:34:45Z,10,5,2,0,"While reviewing some symbols view code I noticed we weren't marking deprecations when doing things like:

``` coffee
file = new File('/foo/bar')
file.on 'moved removed contents-changed', ->
```

I updated `pathwatcher` and this PR updates core and affected packages that were using the deprecated File/Directory APIs
",317,True,en,0
5858,1,2,0,Internals,as-cii,2015-03-09T21:07:05Z,5,2,1,4,"Based on the work made in #5843, I decided to give optimizing `destroyFoldsIntersectingBufferRange` for every scenario (not only the whole buffer selection) a try.

A quick win was to simply iterate over the buffer range in reverse order: when destroying a fold, `DisplayBuffer#updateScreenLines` gets called unless the row is inside a larger fold; starting from the bottom helps reducing the amount of calls dramatically (moreover, this is how the rest of atom core handles folds traversal, so we win also in consistency :v:).

However, this was not enough to have acceptable performance because, for each row in the range, the buffer was traversed back and forth to find folds intersecting such rows. This is unnecessary, since we need only to perform such traversal on `start.row` and `end.row`, and simply destroy anything in between. This would catch any larger fold and the rest of them must be right inside `bufferRange` (outermost rows included). :racehorse: :racehorse: :racehorse: 

@nathansobo: I am wondering if we should remove [the previous optimization](https://github.com/atom/atom/pull/5843); after these changes we save a relatively short amount of time skipping `destroyFoldsIntersectingBufferRange` on `selectAll`. On the other hand, I am not entirely unhappy with keeping the further optimization there.

/cc: @izuzak
",1339,True,en,0
5846,2,4,0,Internals,maxbrunsfeld,2015-03-05T02:19:44Z,19,16,3,0,"/cc @mostafaeweda
",18,True,en,0
5845,1,0,0,Internals,jlord,2015-03-05T02:01:28Z,1,1,1,0,"Now use `status-bar@0.62.0` which doesn't make deprecations. 
",62,True,en,0
5843,1,2,0,Internals,as-cii,2015-03-05T00:33:38Z,2,1,1,0,"As pointed out on #5791, selecting the whole buffer with many folded lines caused a serious performance degradation. I tracked down the issue to `Selection#selectAll` trying to unfold those lines which contained the selected buffer range. However, since we know in advance that we're going to select the whole text, we can make the clever assumption that everything would be unfolded anyways, thus calling the faster `@editor.unfoldAll` (e.g. faster because it simply scans each line one by one, instead of traversing the buffer back and forth for each line in the selection).

So, we go from this:

![screen shot 2015-03-04 at 23 49 43](https://cloud.githubusercontent.com/assets/482957/6495499/1f4851be-c2cb-11e4-866f-4f036962cc78.png)

To this:

![screen shot 2015-03-04 at 23 50 05](https://cloud.githubusercontent.com/assets/482957/6495500/20553cac-c2cb-11e4-8ccc-a87822042c4c.png)

_(Benchmark performed on `benchmark/fixtures/huge.js`, on my machine it's 70% faster)_

With this change, `selectAll` on a buffer with many folded lines takes no longer than unfolding everything :racehorse: :racehorse: :racehorse: 

Close #5791 

/cc: @nathansobo @izuzak 
",1161,True,en,0
5839,1,9,0,Externals,mostafaeweda,2015-03-06T18:14:57Z,3,1,1,2,"@kevinsawicki @bolinfest 
",26,True,pl,0
5832,1,4,4,Externals,bolinfest,2015-03-04T16:44:03Z,20,1,2,0,,0,False,en,0
5828,28,3,2,Internals,kevinsawicki,2015-03-04T19:47:04Z,205,31,15,0,"Calling `webkitMatchesSelector(selector)` on an element will throw an error. There were several places in core where these errors weren't being caught and handled.
- [x] Throw an error when `atom.commands.add` is called with an invalid selector
- [x] Throw an error when `atom.contextMenu.add` is called with an invalid selector
- [x] Show a notification when a package has invalid selectors in their activation commands
- [x] Show a notification when a package has invalid selectors in their context menu
- [x] Show a notification when a package has an invalid grammar
- [x] Show a notification when a package has invalid settings
- [x] Show a notification on all caught package load/activate errors

Closes https://github.com/atom/atom/issues/5098
Closes https://github.com/atom/atom/issues/5536
Closes #5743
Closes https://github.com/atom/command-palette/issues/30
Closes https://github.com/atom/command-palette/issues/32

The new notifications look like this when a package fails to load or activate:

![screen shot 2015-03-03 at 6 13 01 pm](https://cloud.githubusercontent.com/assets/671378/6476914/ff64b8ec-c1d0-11e4-9df4-55a64ae4b50d.png)
",1146,False,en,0
5824,2,0,2,Internals,benogle,2015-03-03T21:08:18Z,36,1,3,0,"Using this solution to atom/welcome#26 instead of #5812

Closes atom/welcome#26
",80,True,en,0
5814,3,2,1,Internals,izuzak,2015-03-03T14:58:50Z,149,12,2,0,"Fixes https://github.com/atom/atom/issues/5738:
-  d21ae2c modifies the click handlers for the gutter to select buffer lines, rather than screen lines. Clicking the gutter for any screen line of a wrapped buffer line selects the whole buffer line (previously, only the clicked screen line would have been selected).
- 03a064b adds more tests for checking how click handlers for the gutter behave when soft wrap is turned on (I duplicated all the existing tests, turned on soft wrap, and then tweaked them to test the new functionality).

Before :tv: (notice screen lines being selected):

![1](https://cloud.githubusercontent.com/assets/38924/6350264/964de4e4-bc32-11e4-8e79-e7f61220a2c5.gif)

After :tv: (notice buffer lines being selected):

![gutter](https://cloud.githubusercontent.com/assets/38924/6463027/d748e13e-c1ae-11e4-9002-f0ee33a264b2.gif)

cc @nathansobo for :eyes: 
",881,False,en,0
5806,2,6,0,Externals,dsandstrom,2015-07-01T17:47:35Z,386,0,8,121,"Add commands for moving, selecting, and deleting camelCase words.

Fixes #1982 and an alternative to #3961. Also, hopefully can used with atom/vim-mode#377.

Replaces #4429.
",174,True,en,0
5795,3,5,5,Externals,mostafaeweda,2015-03-03T00:04:54Z,17,3,2,3,"I'm having an issue of:
When I add an atom directory provider with uri like: myuri://server:port/some_path and reload atom or close/open atom, the default directory provider normalizes my uri path (bc it calls path.normalize on it eve though it's not a local filesystem directory).
https://github.com/atom/atom/blob/master/src/default-directory-provider.coffee#L16-L24

How do you think about the following solution:
1- The deafult directory provider returns a directory only when it exists on the filesystem.
2- On deserializing and creating the project with paths, if a projectPath can't be handled by a directory provider, it's added to another array to be consumed later by atom packages, when they are loaded

That's trying to work-around the nature of atom core initializing before packages are loaded and able to provide their directory providers.
",855,False,en,0
5787,1,1,0,Externals,mnquintana,2015-02-27T16:42:22Z,1,0,1,0,"If you start with GitHub as an entry point for Atom (as opposed to https://atom.io), it can be a bit difficult to find Atom's release notes quickly. If you're lucky you might come across the `release-notes` package, but that too doesn't contain the release notes (somewhat paradoxically). Of course, you could always browse through the Releases on GitHub, but that also has a bit more noise if all you want to see are the changes.

This adds a CHANGELOG.md that literally just links to https://atom.io/releases to avoid duplication and to make Atom's release notes a bit more discoverable.
",590,True,en,0
5786,2,1,0,Internals,izuzak,2015-02-27T16:16:56Z,14,2,2,0,"Fixes https://github.com/atom/atom/issues/5739.
-  574158d adds a failing spec to demonstrate the problem. Running the specs results in this (expected) output:
  
  ```
  TextEditorComponent
  gutter rendering
    fold decorations
      rendering fold decorations
        when soft wrapping is enabled
          it doesn't add the foldable class for soft-wrapped lines
            Expected true to be false. (spec/text-editor-component-spec.coffee:650:55)
  ```
- 09ed657 adds a check in the GutterComponent so that fold icons are added only on the first physical line of soft wrapped lines. Running the specs doesn't trigger the failure above. 

Before :tv::

![foldy2](https://cloud.githubusercontent.com/assets/38924/6414319/b256fdae-be96-11e4-9d66-41d966d1c8c0.gif)

After :tv::

![foldy](https://cloud.githubusercontent.com/assets/38924/6414246/351efff8-be96-11e4-84e6-7813df93647c.gif)

cc @benogle @nathansobo for :eyes:
",928,False,en,0
5775,2,2,0,Internals,nathansobo,2015-02-27T05:53:17Z,54,31,4,0,"Fixes #4378
",12,True,en,0
5768,1,0,0,Internals,maxbrunsfeld,2015-02-26T19:55:17Z,33,6,2,0,"Refs #770, #5728.
",18,True,fr,0
5762,23,8,4,Internals,as-cii,2015-02-28T17:58:01Z,391,355,12,2,"This PR is still experimental, as it still needs some :heart:, but it demonstrates a few concepts discussed in #5025. It introduces, in facts, the notion of batching along with some other performance improvements :racehorse: You can find some pieces of information about batching in the aforementioned issue, but I'll report some key ideas here as well.

We noticed that a lot of computation was wasted in `TextEditorPresenter`, especially when performing multi-operations (e.g. select many things, write on many lines, etc.). If we write a character on 10 lines simultaneously, the whole UI would be recomputed 10 times, even though this was an atomic operation.

Therefore we came up with the concept of batching: before making an atomic operation, we explicitly put `TextEditor` on `batchMode`. This will emit two events: one on start and one at the end. `TextEditorPresenter` intercepts them and records what changes would have happened during the batching timeframe (if the same change would have been applied many times, it just keeps the last one). When batching ends, it applies all the recorded operation.

When `transact`ing, batching happens automatically. 

If we agree this could be a suitable redesign and we manage to refine this a bit, it seems like we get rid of almost any bottleneck in the presentation layer. Writing 5 characters on 1000 lines simultaneously shows that most of the time is now spent on `TextBuffer` and `mergeIntersectingSelections` (we need to make this even faster):

![screen shot 2015-02-26 at 11 39 02](https://cloud.githubusercontent.com/assets/482957/6390779/803ca36a-bdaf-11e4-87f8-cd466b1e5fc1.png)

(the whole time was 87 seconds, and most of them were spent in the model layer)

/cc: @nathansobo
",1744,True,en,0
5759,1,3,1,Internals,as-cii,2015-02-27T08:00:20Z,9,1,2,0,"It appears that #5567 solved #3999 too, with a minor bug that happens during that scenario. This PR attempts to solve it, so that we can close #3999 once for all.

Current behavior (master):

![soft-wrapping-before](https://cloud.githubusercontent.com/assets/482957/6388178/0b6bc678-bd97-11e4-87a6-e7efc6d77392.gif)

After these changes:

![soft-wrapping-after](https://cloud.githubusercontent.com/assets/482957/6388180/1332d932-bd97-11e4-9b4a-b3f51a7a200f.gif)

_(the editor doesn't flash like this, it's a LICEcap issue I guess)_

Unfortunately I have found quite difficult to reproduce the issue via a test (so that we can guard against this regression), probably because when resizing the buffer we need to have a pane (like the tree-view). Any ideas how we can write one? Should we write one at all?

Thanks!
",814,True,en,0
5753,3,2,0,Internals,maxbrunsfeld,2015-02-26T17:13:11Z,32,5,2,0,"In adding multi-folder support, a few packages have needed this, and I've had to write local helper functions:
- [tree-view](https://github.com/atom/tree-view/blob/master/lib/move-dialog.coffee#L23)
- [find-and-replace](https://github.com/atom/find-and-replace/blob/master/lib/project/result-view.coffee#L14)
- [fuzzy-finder](https://github.com/atom/fuzzy-finder/blob/d30e2b09988327d9436173386c22e918bd995901/lib/fuzzy-finder-view.coffee#L153)

I think before I write a fourth copy of this helper function for symbols-view, we should add _something_ like it to core. Any suggestions on this API or the naming? The way I have it, it's like this:

``` coffee
[rootPath, relativePath] = atom.project.splitPath(thePath)
if rootPath?
  console.log ""#{thePath} is in project directory #{rootPath}. relative path: #{relativePath}""
else
  console.log ""#{thePath} is not in any project directory""
```

/cc @nathansobo
",909,False,en,0
5750,2,2,0,Externals,jimgraham,2015-02-26T17:06:50Z,4,2,1,0,"Do not set the icon in the updater dialog when
- on Windows
- calling the `showMessageBox` function.

Fixes atom/atom#5670

I only found two references to the `'atom.png'` file in `src/` and assumed this was the fix.

Looks like this when complete:
![atom](https://cloud.githubusercontent.com/assets/430293/6379378/d569367e-bcff-11e4-9b42-d6f3e7dceed2.png)
",357,False,en,0
5744,1,1,0,Internals,kevinsawicki,2015-02-25T22:17:53Z,17,1,4,0,"Now that we have services and config that both use other exported properties from the package's main module,  implementing and exporting an `activate` function should be optional.

`deactivate` was already optional so this makes the two consistent with each other.

Packages just using services will no longer need a no-op `activate` function exported.
",353,True,en,0
5733,2,1,0,Internals,as-cii,2015-02-25T18:19:55Z,3,3,1,0,":racehorse: :racehorse: :racehorse: 

/cc: @nathansobo 
",56,True,xh,0
5722,4,0,0,Internals,maxbrunsfeld,2015-02-25T00:25:25Z,150,23,6,0,"Refs #770.
- [x] Workspace::scan
- [x] 'editor:checkout-head-revision' command
- [x] When text-buffers [change paths](https://github.com/atom/atom/blob/master/src/text-editor.coffee#L134)
- [x] The [document title](https://github.com/atom/atom/blob/4a20dc907957567994010ee754d6025e23baf4ab/src/workspace.coffee#L162)
",317,False,en,0
5720,1,1,0,Internals,maxbrunsfeld,2015-02-24T20:27:15Z,26,13,2,0,"Fixes #5705.
",13,True,en,0
5717,1,1,0,Internals,izuzak,2015-02-24T18:22:55Z,1,1,1,0,"I guess this fixes https://github.com/atom/atom/issues/5675 since we're not going to stop using assignments in conditional tests (?).

/cc @nathansobo @kevinsawicki 
",166,True,en,0
5714,1,2,0,Internals,as-cii,2015-02-24T20:44:07Z,18,11,1,0,"If one cursor changed, all of them were recomputed in `TextEditorPresenter`. With a small refactoring, we gain quite a lot of speed (noticeable especially on multiline selections when moving left and right).

:racehorse: :racehorse: :racehorse: 

As usual, a second pair of :eyes: is always welcome! Thanks :bow: 
",314,True,en,0
5708,1,0,0,Externals,bolinfest,2015-02-24T16:50:46Z,1,1,1,0,"Now it runs without reporting any issues.
",42,True,en,0
5707,5,16,0,Externals,bolinfest,2015-02-25T18:07:39Z,40,6,2,1,"In Deprecation Cop, the warning is associated with `atom core` rather than the package that loaded the file with the old pragma.

Also, even though the deprecation message is parameterized by `filePath`, multiple deprecation warnings about the 6to5 pragma appear to be coalesced into a single warning under `atom core`.
",320,True,en,0
5704,1,1,0,Externals,brixen,2015-02-24T01:34:49Z,1,1,1,0,"Fixed misspelling of container in selector table.
",50,True,en,0
5679,1,2,0,Externals,jbrains,2015-02-23T17:36:22Z,1,1,1,1,"A minor improvement to the ""Your First Package"" guide.
",55,True,en,0
5678,2,4,0,Internals,as-cii,2015-02-23T20:36:28Z,7,7,1,1,"This pull-request introduces a performance improvement in `mergeIntersectingSelection`. Before changing it the cost of this function was `O(n^2)`: selections were accessed always and in sparse order, causing the traversing time to increase exponentially as more and more selections were added. 

Before merging selections, we now order them first and try to intersect the current selection with the previous one only. This brings the cost of `mergeIntersectingSelections` down to `O(n log n)`, changing this:

![screen shot 2015-02-22 at 14 01 32](https://cloud.githubusercontent.com/assets/482957/6318610/5c48188e-ba9b-11e4-9470-5ce9becff76f.png)

To this:

![screen shot 2015-02-22 at 14 00 31](https://cloud.githubusercontent.com/assets/482957/6318618/b80862aa-ba9b-11e4-9ea7-eafbf7fe32e1.png)

:racehorse: :racehorse: :racehorse: 

_(Benchmarks based on splitting into lines the entire selection of a 400 lines file)_

All the specs are green, therefore this ""new algorithm"" shouldn't have changed the behavior of `mergeIntersectingSelections`. It would be great to have some more :eyes: to detect any possible regression.

Hopefully, this should be a significant step forward towards #5163 :smile: 
",1204,True,en,0
5677,1,1,0,Externals,ghost,2015-02-22T09:42:40Z,3,3,1,0,,0,False,en,0
5660,7,2,4,Externals,bolinfest,2015-02-24T01:21:48Z,25,1,2,2,"...s null rather than throws.

The UI locks up if this method does not return.
",79,True,en,0
5643,5,1,0,Internals,kevinsawicki,2015-02-19T23:14:35Z,31,2,5,0,"Setup Grim in the task process and report back deprecations to the app.

![screen shot 2015-02-19 at 11 17 02 am](https://cloud.githubusercontent.com/assets/671378/6274017/f269b7ca-b828-11e4-9e8a-c90825c505a0.png)

Closes #5525 
",229,True,en,0
5641,2,0,0,Internals,maxbrunsfeld,2015-02-19T18:43:39Z,51,0,2,0,"The tree-view needs to be able to remove a path from the project.
",66,True,en,0
5628,4,3,0,Internals,kevinsawicki,2015-02-19T00:45:47Z,7,7,6,0,"Make Atom buildable with node 0.12.x and io.js 1.x

Closes #3184
Closes #5493
Closes #5591 
",92,True,en,0
5624,40,21,2,Internals,nathansobo,2015-02-20T16:52:22Z,995,765,21,1,"React is an amazing abstraction, but very few abstractions come without at least some overhead. In the case of Atom's text editor, it's worth the effort to avoid this overhead by hand coding all DOM updates. The update code is repetitive, but it's also pretty straightforward. In exchange, we get much simpler profile traces, drop a big dependency, and reduce the overall number of moving parts in Atom. Below are some flame graphs for entering a character at the end of a syntax-highlighted line. The comparison is somewhat unfair because the React case _could_ have been a bit more optimized, but I think the pictures also show how much simpler the manual approach is in our case.

![screenshot_2015-02-18_15_03_39](https://cloud.githubusercontent.com/assets/1789/6257760/3205780a-b780-11e4-9399-94d2ded8f0a4.png)

![screenshot_2015-02-18_15_01_42](https://cloud.githubusercontent.com/assets/1789/6257801/6ad79938-b780-11e4-9bde-226ab9b986ba.png)

React is a great tool for many cases, for our particular needs in this particular case I decided it would be easier to just do things for ourselves.
### Remaining Tasks:
- [x] Don't use React for EditorComponent
- [x] Fix autocomplete spec.
- [x] Unify DOM updates / polling across editors.
",1241,True,en,0
5623,1,2,0,Externals,brendannee,2015-02-19T23:18:40Z,8,2,3,1,"When state is ‚Äúchecking‚Äù, menu should say ‚ÄúChecking for Update‚Äù instead of ""Downloading Update"".  This solves the issue of a slow network connection where it incorrectly shows ""Downloading Update"" even before it has been determined if an update is available.
",267,True,en,0
5618,2,0,0,Internals,maxbrunsfeld,2015-02-18T19:37:15Z,39,10,4,0,"Refs #770.
",11,True,fr,0
5614,1,1,0,Internals,izuzak,2015-02-18T17:03:07Z,0,1,1,0,"I think this should have been removed as a part of db13a40. See https://github.com/atom/atom/issues/5569 for more context.

cc @kevinsawicki 
",142,True,en,0
5605,2,1,0,Externals,a-moses,2015-02-18T17:08:03Z,1,1,1,0,"fix .deb file  for Debian (SID/JESSY versions)  and Ubuntu 14.04TLS comfortability 
",84,True,en,0
5599,1,0,0,Internals,maxbrunsfeld,2015-02-17T23:45:58Z,33,4,4,0,"Signed-off-by: Nathan Sobo nathan@github.com
",45,True,en,0
5579,1,4,8,Externals,kittens,2015-02-20T23:04:26Z,51,35,11,3,"6to5 has been renamed to Babel, more information [here](http://babeljs.io/blog/2015/02/15/not-born-to-die/).
",109,True,en,0
5573,1,1,0,Externals,postcasio,2015-02-18T01:58:33Z,18,18,7,1,"In CSS3, single colon for pseudo-elements is deprecated.
",57,True,en,0
5567,28,62,11,Internals,as-cii,2015-02-26T02:06:35Z,178,63,6,10,"This fixes #1125.

It still needs a lot of refactoring (and some test cases too), but I just wanted to evaluate the approach that me and @nathansobo agreed on the aforementioned issue. To recap, the following is a brief explanation of how the solution works.

When lines with an indentation are soft wrapped, they are prepended with a phantom token which is as long as the indentation of the original line. This token is not selectable, nor reachable by the cursor. I had to change how `DisplayBuffer#clipScreenPosition` worked, since I could not treat the phantom token as an hard tab. I'd like to remark that this is still experimental code, but based on my tests I can confirm it works pretty well.

~~There's a subtle bug, though, which needs to be addressed and which I'll be looking at soon after creating this pull request. When a line is indented but no space is present, Atom freezes: I am quite sure this is due to how soft wrapping works on lines without spaces (namely, lines without words). I am quite sure this can be fixed easily, it just needs some more attention (and a better knowledge of the codebase).~~

Thanks everyone in advance for the support!

/cc: @atom/core
",1186,True,en,0
5558,1,1,0,Externals,jeremy-engel,2015-02-14T17:44:04Z,2,2,2,0,"The word `optional` was misspelled as `optinal` two times in the API docs. This PR corrects those errors.
",106,True,en,0
5540,1,3,0,Externals,bolinfest,2015-02-13T21:44:43Z,3,13,1,0,"This makes it possible to remove a TODO in `GitRepositoryProvider`.
",68,True,en,0
5537,2,10,10,Externals,bolinfest,2015-02-17T18:48:08Z,44,2,3,4,"...oryProvider is registered.

I tested this using my test `HgRepositoryProvider`. Now when I run the following from the
command line:

```
atom <path-to-directory-with-hg-repository>
```

And then run the following in the console:

```
atom.project.getRepositories()
```

I get an array with an `HgRepository` in it. Previously, I got an empty array because the
`Project`'s paths were set before my `HgRepositoryProvider` was registered.
",439,True,en,0
5535,6,2,17,Externals,bolinfest,2015-02-20T05:54:54Z,162,15,4,7,"A `Project` will always have a `DefaultDirectoryProvider` that
will be used if there are no other `DirectoryProvider` objects
that can produce a `Directory` for a path.
",169,False,en,0
5534,3,3,0,Internals,nathansobo,2015-02-13T00:06:23Z,41,28,3,0,"Previously, auto-indent-on-paste updated pasted text _after_ inserting it into the buffer, causing tons of buffer changes events to be emitted, which is very expensive. Now, we adjust all but the first line of the inserted text before inserting it into the buffer. The first line still needs to be post-processed in case it requires indentation to be less than the insertion column.

Fixes #5529
Fixes #5411
",408,True,en,0
5528,1,5,0,Externals,vpeil,2015-02-13T19:13:22Z,3,0,1,0,"_script/build_ has the shebang #!/usr/bin/env node. On some system this command is no available but nodejs (e.g. on debian).
The softlink fixes this problem, and all the other steps work fine.
",193,False,en,0
5526,1,1,0,Externals,bolinfest,2015-02-13T17:24:51Z,6,6,2,0,"Bumped the version of 6to5-core to `^3.6.0` to ensure `reactCompat` is
available as a transform rather than an option.

Verified that the deprecation warning went away in my console and that a
package that uses JSX+React still works as expected.
",246,False,en,0
5524,23,0,0,Internals,kevinsawicki,2015-02-12T22:46:18Z,139,133,9,0,"This PR does several things related to deferring and minimizing the CoffeeScript compiles done at startup.
- [x] Extract `coffee-cache` into a separate lib.
  - This allows it to be more easily setup as early as possible without concerns for being in dev mode.
- [x] Don't require CoffeeScript until the first `.coffee` file is required.
  - This saves `~50ms` on startup when all CoffeeScript files are cached or no `.coffee` files are required.
- [x] Cache generated source maps to disk.
  - Dev mode is slow because `coffeestack` is used to convert stack traces and so it was compiling CoffeeScript files on startup for any deprecated calls. coffeestack now caches source maps to disk so that compiles won't be needed in between launches.  This dropped dev mode load time from 2 seconds to 1 second for me.
",810,False,en,0
5522,1,1,0,Internals,benogle,2015-02-12T18:57:07Z,5,5,1,0,"This way, options like `split: ‚Äòleft‚Äô` can be used with the config URIs.
",77,True,en,0
5519,11,0,0,Internals,nathansobo,2015-02-12T18:57:20Z,220,178,4,0,"This avoids a bunch of redundant synchronous computation in the presenter. For a single character input, it reduces the time spent updating the presenter synchronously by about .6 ms.
",184,True,en,0
5491,17,10,52,Externals,bolinfest,2015-02-12T19:00:05Z,213,6,5,1,"...rovider.

I tested this by creating a dummy implementation of an `HgRepositoryProvider`
(with the optional `createRepositorySync()` method implemented) and an `HgRepository`
in an Atom package with the following stanza in the `package.json`:

```
  ""providedServices"": {
    ""atom.repository-provider"": {
      ""versions"": {
        ""0.1.0"": ""createHgRepositoryProvider""
      }
    }
  },
```

I opened a path with an Hg repository from the command line using Atom.
I verified that `atom.project.repositoryProviders` contains both a
`GitRepositoryProvider` and an `HgRepositoryProvider`.

I also verified that running the following printed out an `HgRepository`:

```
var Directory = require('pathwatcher').Directory;
atom.project.repositoryForDirectory(
    new Directory(atom.project.getPath(), /* symlink */ false)).then(
        function(repo) { console.log('repo: %o', repo); });
```

One thing that stands out to me about the current API for the
atom.repository-provider service is that the function used to create
a `RepositoryProvider` does not receive any arguments. If the creation
of the `GitRepositoryProvider` were done via the service, this would
be a problem because it needs a reference to `atom.project`, which is
not defined when it is created. (We work around this because it is
created in `Project`'s constructor, so it can pass `this` to
`new GitRepositoryProvider()`.)

We would have to create a `RepositoryProviderFactory` or something if
we wanted to specify arguments when creating a `RepositoryProvider`,
in general. Maybe that's too crazy / not an issue, in practice.

Though note that `GitRepository` cannot access `atom.project` lazily
because it uses it in its constructor to do the following:

```
if @project?
  @subscriptions.add @project.eachBuffer (buffer) => @subscribeToBuffer(buffer)
```

So long as we can guarantee that `atom.project` is defined before the
other providers are initialized, I think we should be OK.

Follow-up work:
- Replace the use of `RepositoryProvider.createRepositorySync()` with
  `RepositoryProvider.repositoryForDirectory()` in `Project.setPaths()`.
- Replace all uses of `Project.getRepositories()` with
  `Project.repositoryForDirectory()` in packages that are bundled with Atom
  by default.
- Implement `Directory.exists()` and/or `Directory.existsSync()` and update
  `git-repositor-provider.coffee`, as appropriate.
- Eliminate `GitRepositoryProvider.repositoryForDirectory()`'s use of
  synchronous methods.
- Somewhat orthogonal to this diff, but the following fields need to be
  removed from `Project` because they enforce the idea of a single root:
  `path`, `rootDirectory`, and `repo`. This has implications around the
  existing use of `@rootDirectory?.off()` and `@destroyRepo()`.
",2765,True,en,0
5489,40,0,0,Internals,kevinsawicki,2015-02-12T00:04:22Z,112,24,3,0,"This is a follow on to #5487, after looking at q I noticed Atom was bundling was too many copies of a bunch of other modules.

These are all things where 1 copy would suffice. And the module cache wasn't catching all of these dupes since certain dependencies weren't aligned causing extra requires at startup.

This PR aligns version dependencies on these modules and aggressively de-dupes them so that only 1 version is shipped with Atom.

This PR removes 200 modules and 2,500 files from the app bundle.

Here are some of the biggest savings:

| Module | # of copies |
| --- | --: |
| space-pen | 27 |
| atom-space-pen-views | 22 |
| temp | 10 |
| inherits | 7 |
| amdefine | 6 |
| coffee-script | 6 |
| coffeestack | 6 |
| sigmund | 6 |
| domelementtype | 4 |
| rimraf | 4 |
| semver | 4 |
| through | 4 |
| abbrev | 3 |
| grim | 3 |
| iconv-lite | 3 |
| loophole | 3 |
| request | 3 |
| cheerio | 2 |
| clear-cut | 2 |
| highlights | 2 |
",942,True,en,0
5487,6,2,0,Internals,kevinsawicki,2015-02-11T00:25:38Z,6,6,2,0,"In dev mode there is no module caching and so a bunch of versions of [q](https://github.com/kriskowal/q) are getting required since packages and modules were using a variety of versions.

Requiring q in dev mode is pretty slow since it create and inspects an error which causes source maps to load and a CoffeeScript compile to occur. Requiring it multiple times makes that even worse.

This PR speeds up dev mode by ensuring q is required only once.  It also allows 1 version of q to ship in the actual app bundle instead of 5.

This also upgrades Atom to the latest q version, 1.1.2
",585,True,en,0
5475,14,0,0,Internals,maxbrunsfeld,2015-02-13T06:28:16Z,412,228,10,3,"Refs #770.
- [x] Add API for opening native 'open file' dialog and returning the selected path, for use by the tree-view.
- [x] Allow `atom.project.setPaths` to support multiple paths
- [x] Add `atom.project.addPath`
- [x] Populate `atom.project` with multiple paths when multiple path arguments are provided to `atom` command
",327,False,en,0
5452,1,1,0,Externals,outsideris,2015-02-09T16:55:05Z,2,2,1,0,"The link is broken. I also changed the title as title of  actual document.
",75,True,en,0
5448,2,2,0,Internals,izuzak,2015-02-08T18:06:20Z,2,1,2,0,"This adds the ""Upgrading your package"" guide :link: to the documentation index so that the guide is listed on the [docs page on atom.io](https://atom.io/docs/latest/) (currently, it's [not listed there](https://cloud.githubusercontent.com/assets/38924/6095897/13f38d3e-af74-11e4-8752-476e20f9d6c3.png) and is only reachable from [the blog post](http://blog.atom.io/2015/01/15/announcing-the-atom-1-api.html) or in [atom/atom on GitHub](https://github.com/atom/atom/blob/master/docs/upgrading/upgrading-your-package.md)). I'm guessing we just forgot to add it here in https://github.com/atom/atom/pull/4169 and it wasn't intentional.

cc @benogle (and :zap: again for writing that guide)
",687,True,en,0
5440,1,1,0,Externals,50Wliu,2015-02-06T22:06:07Z,1,1,1,0,"First pull request, yay!
Adds a colon in the advanced keymaps doc so that direct copy/paste works.
",99,False,en,0
5424,9,2,0,Internals,kevinsawicki,2015-02-06T00:22:26Z,98,32,6,0,"This moves the save error handling from `Workspace` to `Pane` so that save errors from `Pane::destroyItem` and `Pane::saveItems` are now properly handled.

Also adds a notification for when `atom.config.save` fail to write the file to disk.

Closes #5292
Closes #5350
Closes #5371
Closes #5396
Closes #5421
",307,True,en,0
5417,1,2,0,Internals,izuzak,2015-02-05T16:55:35Z,1,1,1,0,"This :trollface: me on two of my pacakges, as described in [this comment](https://github.com/izuzak/atom-pdf-view/issues/45#issuecomment-72206548).

apm uses `semver.validRange` to [determine if the semver of `engines.atom` is valid](https://github.com/atom/apm/blob/94d2dd96114cbbefc52ad728f5ec870d6d3ce4c6/src/install.coffee#L508), and if it isn't -- it skips that version of the package. Here's how that behaves for the recommended semver in the guide:

```
> semver.validRange("">=0.174.0, <2.0.0"")

null
```

Here's how it behaves with the change suggested in this PR:

```
> semver.validRange("">=0.174.0 <2.0.0"")

'>=0.174.0 <2.0.0'
```

Also, the range works as expected when testing whether a version is in that range:

```
> semver.satisfies(""0.178.0"", "">=0.174.0 <2.0.0"")
true
> semver.satisfies(""2.178.0"", "">=0.174.0 <2.0.0"")
false
> semver.satisfies(""0.174.0"", "">=0.174.0 <2.0.0"")
true
> semver.satisfies(""0.173.0"", "">=0.174.0 <2.0.0"")
false
```

As far as I can tell, this is also how ranges are explained in [`node-semver`](https://github.com/npm/node-semver#ranges).

cc @benogle
",1094,True,en,0
5408,2,2,0,Internals,thedaniel,2015-02-05T01:28:19Z,1,0,1,0,"C# is a pretty mainstream language to leave out of core. I think it at least meets the bar set by inclusion of language-clojure, language-mustache etc.
",152,True,en,0
5405,4,8,0,Externals,eestrada,2015-02-06T19:38:24Z,13,1,4,1,":penguin: :package: This rounds out the issues addressed in PR #5339, PR #5336 and issue #5331. Now the ideal icon for a given resolution is available to the desktop environment.
",179,True,en,0
5404,15,7,4,Internals,maxbrunsfeld,2015-02-09T21:11:53Z,234,14,10,5,"This adds an integration test, `spec/integration/startup-spec.coffee` that tests Atom's handling of different command-line arguments. Currently, only a few simple cases are tested.

Questions:
- [x] Currently, `selenium-webdriver` has been added to the `dependencies`. We probably shouldn't require this module to be installed unless the user is running tests. Can we use `devDependencies`? _Moved the dependency to build/package.json_
- [x] Currently, the tests are skipped if `chromedriver` is not installed. Should we install `chromedriver` on CI? _We won't need to if we download it as part of the build; see below_
- [x] Should this test live in a separate suite so that it isn't run by default. The integration tests take about 14 seconds to run on my macbook pro. _Yes_
- [x] Is this even a good idea? I feel like something along these lines will help us in the future when developing the browser-side code. _Yes_
- [x] Make integration specs runnable separately from the main spec suite
  - [x] Make the integration specs _not_ run as part of the normal spec suite
  - [x] Make build script download `chromedriver` to the same location as `Atom.app`
  - [x] Make `run-specs` grunt task run the integration tests
  - [x] Publish new `grunt-download-atom-shell` version and upgrade it in atom
- [x] Fix the tests' flakiness

/cc @atom/core 
",1347,True,en,0
5403,2,1,0,Externals,eestrada,2015-02-04T19:21:37Z,5,3,3,0,":penguin: It is no longer hard coded into the atom.desktop.in file; the individual grunt tasks now determine how the executable path is built and accessed.
",156,True,en,0
5399,1,1,0,Externals,eestrada,2015-02-04T17:05:30Z,1,1,1,0,"I realize the debian package build depends on this. Although it
probably won't break anything, I would rather implement a solution
that doesn't change the behavior of the debian installer.
",189,False,en,0
5392,9,1,0,Externals,eestrada,2015-02-04T16:59:47Z,17,17,13,0,":penguin: Now rpms created with grunt will respect the --install-dir flag. Also, the rpm summary uses the grunt description variable. This is a partial implementation of issues discussed in PR #5339 . Resolving icons in the atom.desktop file using the system icon path will be taken care of in another PR.

Also, automated builds of rpm packages for upload to atom.io should now build against '/usr' instead of '/usr/local'.
",425,True,en,0
5385,20,33,3,Internals,kevinsawicki,2015-02-04T19:22:09Z,37,21,9,0,"This PR unifies all references to use the `ATOM_HOME` environment variable as the location to store packages, compile caches, node headers, etc.

The location still defaults to `~/.atom` when unset.

This should make Atom portable meaning it will write no files outside this location.

Closes #2939
",299,True,en,0
5382,18,20,4,Internals,zcbenz,2015-04-03T13:12:14Z,46,22,13,58,"By using [asar](https://github.com/atom/asar) to [package the `app` folder](https://github.com/atom/atom-shell/blob/master/docs/tutorial/application-packaging.md) into a single file,  we should be able to speed up the install time and startup time on computers that run on HDD significantly.

Known issues:
- [x] `index.js` not loading on Windows.
- [x] Can not interpret Less stylesheets because of graceful-fs not compatible with `asar`.
- [x] Program not quitting on Windows.
- [x] Tasks not working.
- [x] `apm` and `atom` commands can not be installed.
- [x] `apm` can not show built-in packages.
",602,True,en,0
5374,2,1,0,Internals,lee-dohm,2015-02-03T17:04:29Z,31,9,1,0,"This is intended to address the commonly-asked question about making a keybinding execute multiple commands.

It also updates the example code for a command by removing the reference to the deprecated `EditorView` and just using the example from the `CommandRegistry` documentation.
",283,True,en,0
5368,1,1,0,Internals,lee-dohm,2015-02-03T17:06:11Z,1,1,1,0,"Applies to #5354 

Accidentally pushed this change originally to a different pull request after that PR had been merged. Making a new PR just for this change now :grinning:
",173,True,en,0
5347,1,1,1,Externals,driskell,2015-02-04T04:27:32Z,4,9,2,2,"Using 0.175.0 on Mac OS X 10.10.2 (though likely affecting all platforms), the indent guides are missing on whitespace only lines. So when you start a new line which auto-indents the indent guides are visibly missing. Snapshot below:

![screen shot 2015-02-01 at 17 59 23](https://cloud.githubusercontent.com/assets/939815/5993100/77e73eea-aa3c-11e4-8812-82568431c5ab.png)

This is down the fact that the ""isWhitespaceOnly"" detection only works if invisible characters is disabled. With invisible characters enabled, it sees the invisible characters and thinks the line does not contain only whitespace, thus disabling the guides.

This patch also means the whitespace only flag is stored, and there's no need to run any regex again when re-rendering the HTML for the line.

Snapshot after applying the patch:

![screen shot 2015-02-01 at 18 01 01](https://cloud.githubusercontent.com/assets/939815/5993127/7490fad2-aa3d-11e4-909d-30c187ba6f9e.png)
",949,True,en,0
5346,5,3,1,Internals,lee-dohm,2015-02-03T01:26:08Z,14,14,3,1,"Saw these while looking around the documentation
",49,True,en,0
5342,3,4,0,Externals,paulcbetts,2015-02-04T01:14:36Z,3,2,3,2,"This PR enables creating / publishing delta packages for Atom updates, which vastly decreases the amount of data users have to download for every Atom release. Typical delta package sizes for JavaScript-only changes (i.e. not the upcoming release because of Chrome 40) are around 800k-2MB.

This PR also updates us to Squirrel.Windows 0.8.3 which fixes a bunch of issues, see https://github.com/atom/grunt-atom-shell-installer/pull/6 for more info
## TODO:
- [x] Triple-check install + update
- [x] Wait for `grunt-atom-shell-installer@0.21.0` to be published
",560,True,en,0
5335,1,1,0,Externals,xfq,2015-02-02T19:29:48Z,1,1,1,2,"Add a semicolon.
",17,True,ro,0
5334,1,0,0,Externals,xfq,2015-01-31T10:42:56Z,17,17,9,0,"Change HTTP to HTTPS to avoid plaintext HTTP connections.
",58,True,en,0
5333,1,0,0,Externals,xfq,2015-01-31T10:41:52Z,1,1,1,0,"Update a URI.
",14,True,en,0
5330,2,0,1,Externals,xfq,2015-01-31T10:40:37Z,3,2,1,0,"Fix a broken link in `docs/creating-a-theme.md`.
",49,True,nl,0
5329,1,0,0,Externals,xfq,2015-01-31T10:39:42Z,2,2,1,0,"IIRC themes can't be installed in the _Themes_ section of the settings view now.
",81,True,en,0
5327,1,1,0,Externals,xfq,2015-01-31T10:38:53Z,1,1,1,0,"Apple has renamed Mac OS X to OS X.
",36,True,en,0
5316,3,12,0,Internals,simurai,2015-02-10T17:33:53Z,66,1,3,11,"This PR adds a badge component to core and removes the import of the Bootstrap badge. Issue #5271.

![screen shot 2015-01-30 at 8 08 54 pm](https://cloud.githubusercontent.com/assets/378023/5974814/df83884c-a8bb-11e4-82fd-04335f773d07.png)
",240,True,en,0
5314,2,1,0,Externals,eestrada,2015-01-30T19:12:50Z,2,1,1,0,":penguin: Took a couple things that were hard coded to be absolute paths and made them relative. This makes it much easier to install Atom in a non-standard location on Linux and have it just work.

However, with default settings on the build scripts, everything still behaves the same as before these changes.
",311,True,en,0
5305,1,1,0,Externals,mnquintana,2015-01-29T17:15:11Z,1,1,1,0,"Fixes #5304
",12,True,en,0
5300,1,0,0,Externals,ghost,2015-01-29T02:45:27Z,1,1,1,0,"Change http://github.com to https://github.com to avoid plaintext HTTP connections.
",84,True,en,0
5299,7,66,24,Externals,bolinfest,2015-02-02T21:11:33Z,196,2,4,4,"Transpile all .js files with 6to5.

In the spirit of supporting JavaScript development for Atom packages,
this adds default support for es.next transpilation support in the way
that Atom already has default support for CoffeeScript transpilation.
There are many new features in ES6+ that make JavaScript development
easier and more enjoyable, particularly in terms of support for async code.

For reference, this was a much faster way to iterate on this than running `./script/build`
each time:

```
cp /Users/mbolin/src/atom/static/index.js /Applications/Atom.app/Contents/Resources/app/static/index.js
coffee --output /Applications/Atom.app/Contents/Resources/app/src --compile /Users/mbolin/src/atom/src/esnext.coffee
```

Run the following in the console to see how warm the cache was after startup:

```
global.require('../src/esnext/').getCacheHits()
global.require('../src/esnext/').getCacheMisses()
```
",911,True,en,0
5293,160,12,0,Internals,nathansobo,2015-02-09T22:43:14Z,3419,818,22,12,"This PR changes our approach to text editor rendering by centralizing all state in a `TextEditorPresenter` object that sits between the view and the model.

![presenter diagram](https://cloud.githubusercontent.com/assets/1789/5943048/d3ef770a-a6d8-11e4-9ed7-aa4ce2a650f2.png)

The presenter manages a mutable state object that is synchronously updated whenever there are changes from the model or changes to measurements from the view. The view consumes this state object when updating the DOM asynchronously so we don't need to recompute it before every render like we do now.

This reconfiguration paves the way to perform all DOM updates manually rather than relying on React's virtual DOM reconciliation system. The view will maintain a copy of the presenter state, and it will perform a comparison of the presenter's state against the copy when updating the DOM.

The net result will be a design very similar to React's reconciliation mechanism, but my hope is that a lower-level implementation targeting our specific problem domain will make this design easier to profile and open up specific optimizations that wouldn't be possible at a higher level of abstraction. We already perform DOM updates to lines and line numbers manually to optimize around reconciliation overhead; this would just complete that process.
## Remaining work
### Optimizations
- [x] Perform a single decorations query when the visible row range changes to cache the visible decorations, then read decoration classes from that when building lines, line numbers, etc rather than querying multiple times on every change.
- [x] When decorations are added / removed, update only the decoration classes on lines and line numbers rather than doing a full pass on their content.
- [x] Cache `foldable` status for each line in the tokenized buffer instead of recomputing it every time we update the line numbers.
### Fixes
- [x] Fix velocity scrolling upward
- [x] Fix TextEditorComponent specs
- [x] Compute row id correctly when the first visible line is soft-wrapped.
- [x] Eliminate `TextEditorPresenter::getHeight`
- [x] Audit handling of scrollTop/scrollLeft
- [x] Enforce maximum scrollTop/Left based on height/width and content. This should hopefully address some flakiness in the random test.
- [x] Editor losing focus when switching grammars with grammar switcher. Does that happen on master too?
- [x] Gutter background color isn't changing when themes get changed.
- [x] Switching syntax themes is super slow
",2493,True,en,0
5282,42,1,0,Internals,zcbenz,2015-01-28T23:52:20Z,31,30,6,0,,0,False,en,0
5280,10,1,8,Internals,benogle,2015-01-30T02:06:18Z,120,12,2,2,"What's happening? A value in the user's config file is not run through the config schemas
- The user config is loaded from disk, and sets without running through the schemas
- The user config is loaded before package schemas are read

I had a couple options
1. Just run the value through the correct schema on `get`. This is not intrusive, but it slows down reads. And reads happen a lot
2. Split up initial config load to loading core config, loading package schemas, then loading the rest of the config values
3. Reset the all values in the user config on schema changes to take advantage of the new schemas

I opted for option 3 as it should keep the config in sync as packages are activated/deactivated/installed, etc. This may have an impact on startup time because the user config is reset (though, without save) for each schema addition. 

Closes #5219 
Closes #5306 
",875,False,en,0
5279,1,1,0,Externals,paulcbetts,2015-01-29T00:11:15Z,1,1,1,1,"Chrome 39 proper now has DirectWrite as the default renderer on Windows, which makes a huge difference in text clarity, especially on High DPI monitors.
",153,True,en,0
5278,4,22,29,Externals,adzenith,2015-03-30T07:59:21Z,60,16,5,61,"These changes make selecting hard tabs work like it does in other editors. Currently in Atom, if you click in the middle of a hard tab the cursor always goes to the left edge. These changes make it go to the closest edge.

Tests have been updated, and new ones have been added for the new functionality.

I believe I've hit everything in the contribution guidelines. Let me know if I need to make any changes!
",410,True,en,0
5277,9,32,4,Internals,maxbrunsfeld,2015-02-03T01:07:41Z,217,98,11,6,"See https://github.com/atom/atom/issues/5165#issuecomment-71685691.
- [x] When activating a package, register its service-consuming methods
- [x] When activating a package, register its service-providing methods
- [x] When _deactivating_ a package, dispose of its service-consuming methods
- [x] When _deactivating_ a package, dispose of its service-providing methods
- [x] When activating a package that depends on a service, should we automatically activate all non-disabled packages that provide that service (see https://github.com/atom/atom/issues/5165#issuecomment-71697306)? I think not, for now.
- [x] Should there be an option for making a service dependency `optional` vs `required`? I'm inclined to not add this yet.
- [x] Should we make the `ServiceHub` private? We did.
- [x] Document usage of new `providedServices` and `consumedServices` fields in package.json

/cc @atom/core

Closes #5165
",906,False,en,0
5263,1,0,0,Internals,thedaniel,2015-01-26T22:31:53Z,1,1,1,0,,0,False,en,0
5240,1,3,0,Externals,mnquintana,2015-01-25T19:48:12Z,12,12,5,1,"[Less is now written without caps lock](http://lesscss.org/), so I went through and updated the docs to reflect that.
",118,True,en,0
5235,3,0,0,Internals,zcbenz,2015-01-26T20:58:06Z,2,4,3,3,,0,False,en,0
5228,1,1,1,Internals,benogle,2015-01-23T18:33:20Z,4,4,1,0,,0,False,en,0
5220,5,1,0,Internals,kevinsawicki,2015-01-22T22:11:37Z,25,0,2,0,"Start shipping these new themes
",32,True,en,0
5217,53,14,159,Externals,jssln,2015-04-22T19:29:17Z,1691,243,28,90,"Summary: This implements the gutter API described in https://github.com/atom/atom/issues/5038.

Test Plan: Added unit tests. Tested manually as well -- if you rebase before the commit ""Remove test-only CSS"", there is some default CSS that makes gutters and decorations obviously visible when you add them via commands in the console. Example test commands, on top of this default CSS:

``` javascript
var e = atom.workspace.getActiveEditor()
var g = e.addGutter({name: 'test'})

var m = e.markBufferRange([[1, 0], [10, 0]])
var d = e.decorateMarker(m, {type: 'gutter', gutterName: 'test', class: 'test-class'})

var item = document.createElement('div')
item.className = 'test-item'
item.style['background-color'] = 'green'
var m2 = e.markBufferRange([[12, 0], [20, 0]])
var di = e.decorateMarker(m2, {type: 'gutter', gutterName: 'test', class: 'test-class', item: item})
```

Updating:

``` javascript
var item2 = document.createElement('div')
item2.className = 'test-item2'
item2.style['background-color'] = 'red'
di.setProperties({type: 'gutter', gutterName: 'test', class: 'test-class2', item: item2})

g.hide()
g.show()
g.destroy()
g = e.addGutter({name: 'test'})
```
",1172,True,en,0
5201,1,1,0,Externals,wyand,2015-01-27T22:09:52Z,15,9,1,5,"When Atom is installed with [Homebrew](https://github.com/Homebrew/homebrew), it will be in `~/Applications` instead of `/Applications`. This change updates the `atom.sh` startup script to check both `/Applications` and `~/Applications` before falling back to a metadata search.

Behavior is unchanged when `$ATOM_PATH` is unset or empty.
",339,True,en,0
5189,2,0,0,Internals,maxbrunsfeld,2015-01-22T16:44:18Z,29,15,2,0,"Previously with `autoIndentOnPaste` turned on, when a block of code was pasted, each line of the block was auto-indented based on the grammar.

Now, the relative indentation of the lines is preserved, and the indentation of the entire block of code is adjusted uniformly such that the first line's indentation matches the grammar's suggested indent level.

Fixes #4648.
",370,True,en,0
5175,4,2,0,Internals,kevinsawicki,2015-01-21T17:23:09Z,15,6,6,0,"Previously app was installed at `apm/node_modules/atom-package-manager` in the distribution.

This made the paths longer than they needed to be, so the `node_modules/atom-package-manager` folder now sits directly in the root `apm` folder.

All paths in the install are now under 200 characters so hopefully all long path install errors will no longer occur. You can run `script/grunt output-long-paths` to check this.

Closes #5109
",432,True,en,0
5157,1,1,0,Externals,postcasio,2015-01-20T23:39:19Z,17,0,2,0,"Another error code to check for.
",33,True,en,0
5152,1,1,0,Internals,simurai,2015-01-20T16:54:13Z,2,5,1,0,"Now that `.editor` and `.editor-colors` are replaced with `atom-text-editor`.
",78,True,en,0
5143,1,1,0,Externals,avrahamruderman,2015-01-19T18:49:34Z,1,1,1,0,"the the
",8,True,en,0
5118,1,1,0,Externals,nullstyle,2015-01-20T18:03:31Z,1,1,1,3,,0,False,en,0
5117,1,1,0,Externals,rachelmyers,2015-01-16T22:16:35Z,1,1,1,0,"With the aim of being a bit more inclusive, this PR changes the suggested emoji indicating a style or formatting change from :lipstick: to :art:.

Fixes #5111
",159,True,en,0
5114,5,1,2,Internals,benogle,2015-01-16T19:41:30Z,69,2,3,0,"- Checks that it can open as read rather than read/write; this will fix the `EPERM` and `EBUSY` errors on read.
- Makes the error better for `EPERM` and `EBUSY` errors when they do happen on save

Closes #5102 
Closes #5107 
Closes #5112 
Closes #3231
",252,False,en,0
5110,1,6,0,Externals,amayer5125,2015-03-12T00:37:43Z,1,1,1,54,"Macs generate ._ files when saving to a filesystem other then HFS
In shared environments this is a big problem
",111,False,en,0
5086,7,6,2,Internals,kevinsawicki,2015-01-16T17:47:01Z,37,5,3,0,"If a buffer's serialized path was a directory upon deserialization then Atom would previously fail to launch.

Now these invalid buffers are ignored and deserialization can complete successfully.

Fixes #4199
Fixes #4939
Fixes #5084
",233,True,en,0
5068,2,1,0,Internals,nathansobo,2015-01-15T03:04:02Z,28,25,7,0,"We're talking about adding APIs for multiple gutters, so the name 'gutter' for these decorations doesn't really make sense. What we're actually decorating is the _line numbers_, which will be just one of the potential gutters on an atom editor.
",245,True,en,0
5066,1,1,0,Externals,adrianlee44,2015-01-14T23:52:25Z,3,3,1,0,"I see this error when using `git-blame` package which is using the deprecated method `getOriginUrl`. Since it's the method is referring to itself, it's causing `Maximum call stack size` (https://github.com/alexcorre/git-blame/issues/56).
",238,True,en,0
5060,1,2,2,Internals,maxbrunsfeld,2015-01-14T21:13:52Z,9,5,2,0,"The first commit fixes an error that caused #4099; we were accidentally comparing folds from two different `DisplayBuffer`s, on the same `TextBuffer`.

 The second commit is a refactor to make it easier to avoid this kind of error. It makes it so that any time a `DisplayBuffer` is used to find or create markers, they are associated with that `DisplayBuffer`.
",361,True,en,0
5059,3,0,0,Internals,kevinsawicki,2015-01-14T18:42:00Z,2,1,2,0,"### Upside
- `--silent` is now supported to `AtomSetup.exe` so https://github.com/atom/chocolatey/pull/35 can be released after this comes out
- `AtomSetup.exe` will now have the Atom icon when downloaded
- [Other bug fixes](https://github.com/Squirrel/Squirrel.Windows/releases/tag/0.8.0)
",290,False,en,0
5051,1,1,0,Externals,tony612,2015-01-14T17:10:26Z,4,4,1,0,"Change range -> position
",25,True,en,0
5044,6,6,2,Externals,russlescai,2015-01-21T19:22:17Z,21,2,3,7,"This pull request allows custom configuration for file encoding based on scope descriptors.

For example (my original issue), setting powershell files to UTF16-BE:

```
"".powershell"":
  core:
    fileEncoding: ""utf16be""
```

I have created a package to do this (https://atom.io/packages/default-encoding) which works, however I added this pull request if you guys think it will be useful.

Note this is not in lieu of auto detection, just another way to customise atom.

Thanks
",478,True,en,0
5031,1,1,0,Externals,tony612,2015-01-13T17:55:49Z,1,1,1,0,"Change selection -> cursor
",27,True,en,0
5017,7,0,0,Internals,nathansobo,2015-01-13T01:11:50Z,80,41,7,0,"This will be used by the next release of `markdown-preview` to render code blocks using editors instead of a secondary highlighting code path. This will enable the `.editor-colors` selector to be deprecated. Refs #5010.
",220,True,en,0
5015,1,0,0,Internals,thedaniel,2015-01-12T20:51:26Z,1,1,1,0,,0,False,en,0
4979,1,1,0,Externals,DinisCruz,2015-01-12T18:54:32Z,4,0,1,2,"Here is an example of adding it to an Package https://github.com/jacogr/atom-lcov-info/issues/18
",97,True,en,0
4973,2,1,2,Internals,lee-dohm,2015-01-10T00:43:50Z,14,1,2,0,"Fixes #4969

See: https://discuss.atom.io/t/how-to-see-what-syntax-markup-is-being-used/14172

![screen shot 2015-01-09 at 4 31 11 pm](https://cloud.githubusercontent.com/assets/1038121/5689622/d6acfdb0-981d-11e4-9ea9-cf38e08f8da6.png)
",236,True,en,0
4971,13,1,0,Internals,kevinsawicki,2015-01-13T01:06:39Z,5,5,2,3,"This pull request upgrades the [season](https://github.com/atom/season) version to `5.0` which uses the latest version of [cson-safe](https://github.com/groupon/cson-safe).

The main upside here is that `cson-safe` doesn't eval the files but instead parses them safely just like `JSON.parse` does.

This will break any `.cson` files that contain code since they will no longer parse correctly.  This is a good thing since the expectations of CSON are the same as JSON, they parse to plain old JavaScript objects with arrays, string, numbers, and booleans.

This PR also upgrades to CoffeeScript 1.8 across the board for `.cson` files and `.coffee` files.
# Performance Differences

Ran 100 calls of `CSON.readFileSync` and `CSON.stringify` against  https://github.com/atom/atom/blob/6cc1ffa7935ea013e822ddab06b7897320313016/keymaps/darwin.cson

Prior version used (1.0.2): ~2600 milliseconds
New version used (5.0.0):  ~600ms
",926,True,en,0
4955,4,8,0,Internals,nathansobo,2015-01-09T19:36:16Z,62,47,31,0,"According to the W3C, [""style sheet"" is two words](http://www.w3.org/TR/html401/present/styles.html).

I already updated some of the API to treat it that way a few weeks ago, but I forgot about the package directory layout and the `package.json` keys. This finishes the job. I opted for a one-word directory name, `styles`. The `package.json` keys use camel case.
- Package directory format:
  - `stylesheets/` => `styles/`
- Package metadata:
  - `stylesheets` => `styleSheets`
  - `stylesheetMain` => `mainStyleSheet`

This will unfortunately require another mindless upgrade pass after the next release. I will happily do it though to have correct grammar in our APIs.
",672,True,en,1
4937,13,0,0,Internals,nathansobo,2015-01-09T02:21:51Z,547,469,8,0,"Package manager wasn't invoking `::onDidActivateAll` listeners at the appropriate time. This PR fixes that issue and updates several method names in `PackageManager` and `ThemeManager` for clarity and consistency.
- `PackageManager`
  - `onDidActivateAll` => `onDidActivateInitialPackages`
  - `onDidLoadAll` => `onDidLoadInitialPackages`
- `ThemeManager`
  - `onDidReloadAll` => `onDidChangeActiveThemes`
  - `getActiveNames` => `getActiveThemeNames`
  - `getLoadedNames` => `getLoadedThemeNames`
  - `setEnabledThemes` => deprecated, use `config.set`
",553,False,en,0
4930,25,5,7,Internals,kevinsawicki,2015-01-13T01:54:14Z,198,5,5,4,"This adds first-class support for colors in the config schema.

``` coffee
atom.config.set('my-package.aColor', 'khaki')
atom.config.get('my-package.aColor') # {red: 240, green: 230, blue: 140, alpha: 1}
atom.config.get('my-package.aColor').toHexString() # '#f0e68c'
atom.config.get('my-package.aColor').toRGBAString() # 'rgba(240, 230, 140, 1)'

atom.config.set('my-package.bColor', 'rgba(10,20, 30, .75)')
atom.config.get('my-package.bColor') # {red: 10, green: 20, blue: 30, alpha: .75}
```

This will be used to make themes adjustable by allowing colors to be changed in the settings view and those color changes will be reflected in Less variables in the loaded theme stylesheets.
",686,True,en,0
4911,1,1,0,Externals,postcasio,2015-01-08T17:32:57Z,1,1,1,0,"It invokes the callback when packages are loaded, not activated.
",65,True,en,0
4907,1,0,0,Internals,kevinsawicki,2015-01-08T19:09:19Z,8,1,2,0,"Create a special compile cache for when sudo'ing as root so file permissions don't get messed up when folders are created by root and then written to by another user.

Closes #3082
",181,True,en,0
4906,35,4,11,Internals,benogle,2015-01-15T00:25:01Z,326,123,12,6,"- When someone does not have access, opens a large file, or opens a bad file, it will have a nice error.
  ![screen shot 2015-01-08 at 5 18 45 pm](https://cloud.githubusercontent.com/assets/69169/5674126/6e4d7524-975a-11e4-8cc9-978e7f50b725.png)
  - Closes #4421 
- When there is an error reading the file after getting a file changed event, it will have a better error. 
  ![screen shot 2015-01-08 at 5 12 52 pm](https://cloud.githubusercontent.com/assets/69169/5674088/03726e6c-975a-11e4-8bf8-782d71cf51f6.png)
  - Relies on https://github.com/atom/text-buffer/pull/41 and https://github.com/atom/node-pathwatcher/pull/54
  - Closes #4850 
  - Closes #4751 
  - Closes #4639 
  - Closes #4576 
- When there is a problem opening / watching config, keymaps, snippets, we display a better error.
  - Closes atom/snippets#97
### TODO
- [x] Open access errors
- [x] Errors on read after file change event
- [x] `unable to watch path` errors for config, keymap, user scripts on startup
- [x] Make sure the bad-config errors arent crazy
",1032,False,en,0
4901,2,2,2,Externals,danfuzz,2015-01-08T01:34:33Z,5,5,2,0,"There were two problems:
- In the URL lists, the reference was listed as `[less]`, but in the prose it was listed as `[LESS]`. I made it `[LESS]` in the URL lists, which seems to match the rest of the docs.
- In both cases in the prose, the reference `[LESS]` was followed by a prose parenthetical. Markdown treats these as literal URLs. Adding a quoting backslash before the open paren fixes this.
",399,False,en,0
4890,1,1,0,Externals,SKAhack,2015-01-07T16:51:06Z,1,1,1,0,"little fix
",11,True,en,0
4879,5,0,0,Internals,nathansobo,2015-01-07T16:51:55Z,53,45,8,0,"The `group` parameter was previously used to ensure style sheets from core, packages, themes, and the user's `.atom` directory cascaded in the correct order. The weakness with this approach is that it depended on the load order of the first style sheet from each group. This caused a bug where the context-targeted style sheets for atom-text-editor would get out of order with the bundled style sheets coming _after_ the theme style sheets, causing the bracket matcher styling to be wrong. Using numbers explicitly ensures that style sheets always land in the expected order. Floating point values can be used at a later point to precisely position style sheets into the cascade if desired. I did a full scan of all packages and did not detect a dependency on the grouping API, which is private anyway.
",803,True,en,0
4877,1,3,0,Internals,lee-dohm,2015-01-07T02:01:14Z,12,1,1,0,"@kevinsawicki mentioned that his first debugging step to check is `apm unlink -a`. I figured since I refer people to the debugging doc all the time, I should add this suggestion.

I put the section where I felt it should go, but I could definitely see that if this is more intended for end users than Atom package hackers, it should go futher down in the document.
",365,True,en,0
4858,1,1,0,Internals,lee-dohm,2015-01-06T18:49:17Z,25,1,1,0,"See https://discuss.atom.io/t/testing-for-the-existence-of-a-file/14079

Perhaps this is overkill, but I wanted to prevent future confusion regarding this function. Got some of the language from node-pathwatcher.
",213,True,en,0
4836,1,1,0,Internals,lee-dohm,2015-01-05T19:06:00Z,10,0,1,2,"Applies to #4834 

I figured this was a good piece of advice for package authors that create panel UI. I believe this is the best place to put this documentation. If it should go somewhere else, let me know.

/cc @benogle @maxbrunsfeld 
",237,True,en,0
4827,1,0,0,Internals,maxbrunsfeld,2015-01-02T07:18:02Z,9,3,1,0,"The `wordRegex` option wasn't respected.
",41,True,en,0
4812,1,0,0,Internals,maxbrunsfeld,2014-12-31T02:18:58Z,18,0,2,0,"Currently, after folding at indent level `n`, folding at any indent level > `n` doesn't work. This fixes that.
",111,True,en,0
4807,5,38,0,Internals,simurai,2015-01-08T17:42:08Z,0,0,4,9,":warning: Don't merge yet. Still needs legal clearance.

Replaces the Atom icon with a ""Yosemite"" version. Issue #3923

Current

![screen shot 2014-12-30 at 11 10 27 pm](https://cloud.githubusercontent.com/assets/378023/5579158/6837e04e-9079-11e4-91ed-dcbc9a74233a.png)

New ""Yosemite"" version

![screen shot 2014-12-30 at 11 11 04 pm](https://cloud.githubusercontent.com/assets/378023/5579163/7710eda4-9079-11e4-9583-47fe62ecdafc.png)

In context

![screen shot 2014-12-30 at 11 48 21 pm](https://cloud.githubusercontent.com/assets/378023/5579460/7ddec016-907e-11e4-9696-ae252f118692.png)

The new version doesn't necessarily need to have the white border etc. Makes it fit in, but it might seem too close to a stock app from Apple? /cc @cameronmcefee
- [x] Mac
- [x] File icons
- [x] Win
- [x] Linux
",802,True,en,0
4802,4,0,0,Internals,maxbrunsfeld,2014-12-30T18:41:01Z,80,46,4,0,"Two problems:
- When we started using `Config::set` for all settings (rather than `::addScopedProperties` et al), we accidentally introduced a lot more writes of the config to disk, particularly when initially loading packages. We shouldn't be saving the user's config to disk when we're using a `source` other than the user's config file.
- The settings-view calls `::set` _a lot_. This ought to be ok. We don't need to synchronously save the config every time set is called. We should throttle the writes.

Fixes #4770.
",522,False,en,0
4801,1,1,0,Internals,nathansobo,2014-12-30T19:41:13Z,27,21,3,0,"Refs #4605 
",12,True,fr,0
4606,1,0,0,Internals,nathansobo,2014-12-30T22:37:09Z,14,10,2,1,"Our scoped settings system is based on the idea that all settings get associated with a selector. In light of this, the `global` key is idiosyncratic. We should just use the standard global selector, `*`, which is what we actually use in the scoped properties store.
",267,True,en,0
4796,2,0,0,Internals,maxbrunsfeld,2014-12-29T19:35:43Z,57,12,6,0,"This allows us to deprecate `::settingsForScopeDescriptor`.
",60,True,en,0
4794,2,0,0,Internals,nathansobo,2014-12-29T21:03:19Z,389,369,4,0,"References #4589
",17,True,en,0
4779,1,1,0,Externals,ultramiraculous,2014-12-30T19:41:27Z,1,1,1,2,"TextEditor::onDidAddTextEditor doesn't exist.  Assuming Workspace::onDidAddTextEditor was intended.
",100,True,en,0
4773,5,0,0,Internals,maxbrunsfeld,2014-12-27T04:07:10Z,101,92,4,0,"Use `::set` instead.

This drove out fixing some things about `Config::set`:
- With a null key-path, it now sets the root object
- `::unset` now works with a `source` but no `scopeSelector`
- `editor.completions` now needs to be part of the built-in schema, because many packages write to that key-path as a scoped property.
",325,True,en,0
4756,1,0,0,Internals,maxbrunsfeld,2014-12-25T00:25:28Z,4,26,1,0,"Changing the font size can sometimes be slow because of time spent triggering many events while reloading the config file. This speeds it up.

It used to be necessary to individually set each 'leaf' value in the user's config, to trigger the right events. Now we don't need to do that; event listeners take care of checking for changes in the observed key paths.
",363,True,en,0
4755,4,0,7,Internals,maxbrunsfeld,2014-12-24T01:22:39Z,84,35,5,0,"Two problems:
- `PackageManager::activatePackage` throws an error when disabling a non-existent package. It should probably just reject its promise.
- `Config` observers get into a bad state when callbacks throw exceptions.

Fixes #4721
",237,False,en,0
4753,1,0,0,Internals,maxbrunsfeld,2014-12-24T04:35:42Z,20,0,2,0,"The settings-view needs this so that it can display snippets associated with packages.
Right now it [uses private properties on Config](https://github.com/atom/settings-view/blob/master/lib/package-snippets-view.coffee#L32).

Refs atom/settings-view#294
",254,False,en,0
4743,1,1,0,Externals,Kangaroopower,2014-12-23T17:05:22Z,1,1,1,0,"Previously, the emitter didn't return the new type of grammar, just an undefined to signal when the grammar changed. This patch makes it so that the type of grammar is returned when the texteditor's grammar changes, as per what the API says it does
",249,True,en,0
4734,1,1,0,Externals,KINFOO,2014-12-22T17:53:49Z,4,0,1,0,"I am available to improve it
",29,True,en,0
4729,4,6,4,Externals,alexandershov,2014-12-23T00:07:11Z,31,3,3,1,"Alright, first things first: Atom is awesome!

Second, I‚Äôm not completely happy with my pull request. I‚Äôve used the patched Atom for two weeks - the problem seems to be fixed.

But.

It seems that [this line](https://github.com/alexandershov/atom/commit/229e7e03b2e7ad3f89ddb1e43ee2d237f6c754b7#diff-88caa33888e5345667751ee7182b4c36R459) works correctly (meaning ""setting new cursor position and scrolling to it"") only if it's placed after the code doing the pane creation/activation. It still works, but I have a hunch that programming by coincidence isn't a good practice ;)

Also, I couldn‚Äôt find specs for AtomApplication, which means that [this change](https://github.com/alexandershov/atom/commit/229e7e03b2e7ad3f89ddb1e43ee2d237f6c754b7#diff-9929202e800354a2caa775ed44c61bfeR362) is not covered by tests.

So, getting some advice from a smart person would be cool.
",878,True,en,0
4719,1,1,0,Externals,coreylindsey,2014-12-22T17:38:48Z,1,1,1,2,"gconf was needed
",17,True,en,0
4698,4,4,1,Internals,benogle,2014-12-19T19:36:31Z,15,5,3,0,"Previously, when you opened a new window from safeMode or devMode, the mode settings were not persisted. This has always annoyed me. Now, when you open windows from safe mode, they are also safe mode windows, and if you open dev mode windows from a dev mode window, they are dev mode windows.

Closes https://github.com/atom/atom/issues/4690
",342,True,en,0
4691,5,0,0,Internals,kevinsawicki,2014-12-18T19:23:47Z,46,27,2,0,"- Moves the cursor to the clicked location
- Ensures operations like backspace don't write to the selection clipboard

Closes #4296
Closes #4638
Closes #4677
",158,False,en,0
4689,1,7,0,Externals,ebayer,2014-12-20T01:12:03Z,7,0,4,1,"Fixes https://github.com/atom/find-and-replace/issues/271
",58,True,en,0
4672,2,4,8,Internals,maxbrunsfeld,2014-12-18T02:11:33Z,80,30,3,0,"Refs #4666.
#### Problem

Currently, each scoped settings file or snippets file that is loaded from a package causes expensive events to be emitted on `atom.config`. Emitting these events is expensive because:
- The act of adding scoped settings clears the scoped settings cache
- Callbacks registered via `atom.config::onDidChange` or `::observe` receive the new property value as an argument. Computing the new value requires re-merging the scoped properties with an _empty cache_.

Merging scoped properties recently became more expensive due to deep-merging.
#### Solution

This adds a new method to `Config` called `::transact` which allow multiple config changes to be 'rolled up', firing only one change event.

Currently, I only use `::transact` in `PackageManager` when activating and deactivating packages. I think the snippets package should also use it when loading snippets files from packages.

/cc @benogle @kevinsawicki
",936,False,en,0
4655,1,0,0,Internals,benogle,2014-12-16T23:05:58Z,23,2,2,0,"Closes #4622 
",14,True,en,0
4652,1,1,0,Internals,benogle,2014-12-16T22:52:37Z,26,1,2,0,"!!

This was fine with the shadow DOM disabled.

@nathansobo this feels like a big deal, but maybe there were actually no memory leaks caused.
",143,True,en,0
4632,11,1,0,Internals,kevinsawicki,2014-12-16T18:00:25Z,39,2,4,0,"For use in Windows shells that are bash-like.

Closes #4586
",60,True,en,0
4631,20,1,6,Internals,maxbrunsfeld,2014-12-16T23:22:15Z,477,257,12,0,"This PR updates the config API, but does not change the way global properties are stored. They still aren't stored in the scoped property store.

Refs #4567.
### Steps
- [x] Make `Config::get` and `::set` take trailing options hashes
- [x] Add a `source` option to `Config::set`
- [x] Use the user's settings file path as the default source in `::set`
- [x] Add `sources` and `excludeSources` options to `Config::get`
- [x] Fix remaining failing specs related to the user config using new source information
- [x] Add `Config::unset`
- [x] Make `Config::observe` and `::onDidChange` consistent with `::get` by taking a scope as an option instead of the first argument.
- [x] Throw exception when trying to specify a `source` without a scope selector (To be fixed by #4567).
- [x] Bugfix: only use special priority for settings w/ user's config file as source
- [x] Update docs
- [x]  Deprecate `::isDefault` and `::getDefault` in favor of using the `source` option to `::get`
- [ ] Add a way to get settings set from with a source _directory_ (needed by [this code](https://github.com/atom/settings-view/blob/master/lib/package-snippets-view.coffee#L26) in settings-view)
",1172,True,en,0
4630,6,1,0,Internals,benogle,2014-12-16T19:07:34Z,53,2,2,0,"We dont handle saving errors very well. Say when someone tries to save, and it cannot write for some reason, permissions, lack of directory, trying to overwrite a directory, etc. This will kick out a warning notification rather than a fatal error.

This will fix:
- #4607 
- #4616 
- #4495 
",291,True,en,0
4592,7,5,0,Internals,zcbenz,2015-01-06T01:42:12Z,3,3,3,23,,0,False,en,0
4581,1,1,0,Externals,mnquintana,2014-12-12T19:20:16Z,1,1,1,0,"This PR adds OS default fonts for the Linux distros Ubuntu and Fedora (or anyone else using GNOME 3). Since Lucida Grande and Segoe UI are generally only available in their native OSes (OS X and Windows respectively), the `sans-serif` fallback was being used as the main UI font:

![screenshot from 2014-12-12 14 10 30](https://cloud.githubusercontent.com/assets/823545/5417562/b789d5d2-8208-11e4-9f4a-d10aefff3122.png)

With these two additional fonts, the UI should look more native in Unity and GNOME 3 (Unity below):

![screenshot from 2014-12-12 14 09 56](https://cloud.githubusercontent.com/assets/823545/5417586/dd83360c-8208-11e4-92c5-4628651b732c.png)
",661,True,en,0
4566,1,1,0,Internals,maxbrunsfeld,2014-12-12T00:15:19Z,6,24,2,0,,0,False,en,0
4560,21,1,0,Internals,kevinsawicki,2014-12-12T20:20:42Z,41,15,4,1,"Adds an `atom.cmd` that is similar to the `atom.sh` in that it checks for flags that should synchronously show output and launch atom and launches it a different way in those cases.

This adds a `atom.js` wrapper that spawns `atom.exe` and immediately exits so that the output does not go to the console.

Fixes #4178
",318,True,en,0
4535,1,0,0,Externals,mark-hahn,2014-12-12T19:58:26Z,1,1,1,1,"If you call `Package::activateNow` when Atom is waiting for a command to activate it, then `activateNow` blows up expecting a promise.  This fixes that and allows `activateNow` to be used at any time on a loaded package.
",221,True,en,0
4531,3,1,2,Internals,benogle,2014-12-11T02:17:09Z,83,0,2,0,"We've had a lot of errors related to not having some binary installed. The errors are terrible: https://github.com/atom/atom/issues/4525

These packages are trying to [handle them](https://github.com/nickclaw/atom-grunt-runner/blob/master/lib/grunt-runner-view.coffee#L152), but there is no way without using `bufferedProcess.process.on 'error'` and that is obviously not discoverable. 

Notifications will catch the unhandled errors, and display something nice for them, rather than the fatal notification with a 'create issue' button.
- If there is a handler, just emit the event
- If no handler, throw an error
",614,True,en,0
4478,2,0,2,Internals,maxbrunsfeld,2014-12-09T21:05:36Z,6,4,2,0,"This is needed for the styleguide.
",35,True,en,0
4457,4,0,1,Internals,maxbrunsfeld,2014-12-09T01:43:11Z,56,0,2,0,"In order to avoid using deprecated APIs, the wrap-guide package needs to be able to:
- perform adjustments when a text editor element is attached to the DOM
- know a text editor element's default character width
",212,False,en,0
4455,1,0,0,Internals,maxbrunsfeld,2014-12-08T21:23:19Z,30,27,1,0,"Previously, a transaction was used to set an undo grouping interval
for every editor command except `undo` and `redo`. The problem is
that currently, moving a marker inside of a transaction causes the
buffer's redo stack to be cleared. For now, just don't use
transactions for commands that don't modify the buffer's contents.

Fixes #4445.
",341,False,en,0
4454,1,3,0,Externals,andreicristianpetcu,2014-12-08T20:17:06Z,2,1,2,0,"Please use ndenv for nodejs versioning and pyenv for python versioning
Your .node-version tells ndenv that it needs version v0.10.21 but v0.10.21 has an old npm (1.3) so I get an error that I need npm 1.4+. I bumped the version of node to the current version v0.10.33 and the build passes. Also, I see you need python 2 so I used python 2.7.6 and it worked. Please use ndenv and pyenv for managing your python and nodejs versions. It's easy to use and it's friendly with other projects on the same system.
",506,False,en,0
4430,2,3,1,Externals,steelbrain,2014-12-08T17:43:53Z,1,1,1,1,"Fixes atom/atom#4427
",21,True,en,0
4414,1,0,0,Internals,maxbrunsfeld,2014-12-05T22:06:22Z,8,0,1,0,"Fixes atom/notifications#6
",27,True,en,0
4413,3,0,0,Internals,benogle,2014-12-05T23:00:00Z,53,5,6,0,,0,False,en,0
4407,1,1,0,Internals,nathansobo,2014-12-05T21:13:50Z,99,0,3,0,"This depends on the [`service-hub`](https://github.com/atom/service-hub) library, but I wanted to make the documentation Atom-specific in the project so I'm defining a trivial subclass in core. It's kinda weird, but gets the job done. Open to suggestions as to other approaches. Check out the [documentation](https://github.com/atom/atom/blob/ns-add-services-api/src/service-hub.coffee) at the top of the `ServiceHub` class on this branch for more details about the design.
",474,True,en,0
4406,1,0,0,Internals,maxbrunsfeld,2014-12-05T17:44:29Z,6,1,2,0,"This will be useful when updating the [styleguide's examples](https://github.com/atom/styleguide/blob/master/lib/styleguide-view.coffee#L48) to use custom elements.
",165,True,en,0
4405,1,0,0,Externals,ryanpcmcquen,2014-12-05T18:38:42Z,4,0,1,0,":penguin: 
",11,True,en,0
4393,1,1,0,Externals,envygeeks,2014-12-05T18:47:11Z,9,9,1,1,"Move the Debian alternatives entry up so it's below and grouped with
""no such file or directory"" since it's an alternate solution to symlinking.
",145,False,en,0
4390,1,0,0,Internals,benogle,2014-12-03T22:15:33Z,25,0,3,0,,0,False,en,0
4380,1,0,0,Internals,nathansobo,2014-12-02T23:24:23Z,1,1,1,0,"Doing this as a PR we can link to from the package upgrade issue since it's failing on CI for some reason.
",107,True,en,0
4365,3,0,0,Internals,maxbrunsfeld,2014-12-02T16:55:00Z,178,223,22,0,"After talking with the team, we've decided that instead of #4353, we'll just make some more minimal changes to the view registration system. This PR:
- Removes all view-related methods from the models.
- Simplifies the API for adding view providers to the view registry; you now always pass a model constructor and a function that returns a view.
",347,False,en,0
4340,1,0,0,Internals,maxbrunsfeld,2014-11-28T18:05:35Z,75,7,2,0,"This will make it easier to test packages that use panels
without using the DOM
",80,False,en,0
4337,2,3,6,Externals,pwagland,2014-12-05T23:04:03Z,2,2,1,7,"Deal with ATOM_PATH having a space by proper quoting, and not passing
the directory name to dirname.

Fixes atom/atom#4336
",123,False,en,0
4328,1,1,0,Internals,maxbrunsfeld,2014-11-27T00:20:29Z,1,1,1,0,"Currently, the attach callbacks are called before the panel item is actually attached to the DOM, so if they try to read/modify things like focus, it won't work.
",162,True,en,0
4325,1,1,0,Internals,nathansobo,2014-11-26T22:02:36Z,19,3,3,0,"/cc @benogle

By default overlays are positioned at the head of the given marker. This option allows them to be positioned at the tail instead by passing `position: ‚Äôtail‚Äô` when creating the decoration, which is useful for autocomplete.

I tried various other approaches for positioning the overlay in autocomplete without adding this option, but the complexity of the text manipulation (due to the fact that the case of the prefix and suffix can be altered) meant that any other markers I created were always getting moved to undesirable places. Since we restore the selections following the text manipulation, simply positioning the overlay at the tail is the most convenient and simple approach.
",703,True,en,0
4322,2,5,0,Externals,tsunamistate,2014-12-10T00:31:56Z,13,9,2,13,"**Please review, first RP ever**

This updates Windows installation section of README and adds separate Chocolatey installation file, if user desires so.

Fixes #4321 
",168,True,en,0
4315,27,3,0,Internals,benogle,2014-11-27T19:16:35Z,220,125,31,1,"In progress. Feel free to take bits of it if you'd like.
### TODO
- [ ] Remove `Point.translate` calls, use `Point.add`? See `text-editor-spec` and `text-editor-component-spec`, @nathansobo a while ago, I swapped `add` for `translate` and specs were failing. 
- [ ] Use checkpoints rather than transactions? See `text-editor-spec` and `text-editor-component-spec`. @nathansobo or @maxbrunsfeld 
- [ ] Upgrade the theme manager specs. Several events are asking for using something on atom.styles. Not sure if we want to test these or suppress. @nathansobo this is your domain.
",576,False,en,0
4309,1,1,0,Internals,maxbrunsfeld,2014-11-25T01:40:25Z,14,1,2,0,"An off-by-one error caused new panels to be inserted later in the document than intended.

This caused the find-and-replace panel to appear below the status bar.
",162,True,en,0
4307,11,2,0,Internals,benogle,2014-11-25T23:59:37Z,25,8,6,0,"This does 2 things:
- Make the notifications package a bundled package
- Add notifications (Errors) for issues when loading files (config, keymap, snippets)

There is an issue on error where two messages are displayed. 

![screen shot 2014-11-24 at 5 21 01 pm](https://cloud.githubusercontent.com/assets/69169/5176450/4c2aa1bc-73fe-11e4-9c40-a6602b794f7e.png)

This is caused by https://github.com/atom/node-pathwatcher/issues/50. I've worked around it in the notifications package by not displaying duplicates until after some amount of time https://github.com/atom/notifications/commit/c9f17d1db6ebab36f61526ead3fc83608549b585.

Closes #4212 
Closes #3524
",658,False,en,0
4305,4,0,0,Internals,nathansobo,2014-11-25T14:43:17Z,20,3,4,0,"All panels need to support outdated theme selectors for the time being. We were attempting to add these classes on a per-package basis but that's onerous for package authors. It will be easier to just add them in core and remove them when the time comes.
",255,True,en,0
4288,1,3,0,Internals,maxbrunsfeld,2014-11-23T18:12:51Z,52,88,2,0,"This affects the behavior of copy/paste when `Auto Indent on Paste` is turned _off_, i.e. in whitespace-sensitive languages. I think it will make things more intuitive for people. Selecting groups of lines and pasting them at column zero now works as expected.

Note that the relative indentation of the copied text is still preserved on paste, as before.

This change removes one 'Public' method - `Selection::normalizeLines`. I thought of deprecating it, but it implemented a behavior that this PR removes, and no package calls it.

Closes #4272.
",549,True,en,0
4286,2,0,0,Externals,m0x72,2014-11-25T20:20:43Z,2,2,1,3,"`exports/atom.coffee` requires package `reactionary` while atom only has `reactionary-atom-fork` as a dependence (https://github.com/atom/atom/blob/master/package.json#L53). Should require `reactionary-atom-fork` instead.

It's clear that `Reactionary` will soon be omitted from atom's module exports, but as long as fallbacks are provided, the `reactionary` package reference should be corrected. :)
",401,True,en,0
4264,13,3,5,Internals,benogle,2014-11-24T23:39:57Z,153,10,7,4,"The implementation of https://github.com/atom/atom/issues/4228

To have the message views as a package, this requires us to export the `Message` class. 

TODO: 
- [x] Fill out the issue body, including version information similar to bug-report
- [x] Parse stack trace and figure out in which package an error happened
- [x] Provide a timestamp
",344,True,en,0
4259,5,4,2,Internals,nathansobo,2014-11-20T21:11:45Z,102,86,12,0,"Previously, `atom.syntax` was public but contained no public methods. I was considering removing it entirely when I noticed that we use `atom.syntax.selectGrammar` in some package specs, so I decided to make it officially public. The name `syntax` feels pretty vague now, and in the spirit of focusing our global objects on specific tasks, I think the name `grammars` blends in better with the rest of our global services.
",423,True,en,0
4258,4,1,0,Internals,nathansobo,2014-11-20T18:22:33Z,19,14,5,0,"Some memory leaks have slipped through during the various contortions required for the API freeze:
- The updates to `GitRepository` subscriptions introduced a bug that caused to not unsubscribe correctly from `TextBuffer`s when they were destroyed.
- The jQuery shims weren't having `cleanData` called on them when the underlying custom element was removed, causing handlers which are held by global jQuery data structures to leak.
",432,False,en,0
4250,7,0,1,Internals,nathansobo,2014-11-20T18:26:07Z,136,0,3,0,"It still uses Bootstrap underneath the hood to save us the trouble of implementing tooltips, but the new API works with raw DOM nodes and does not require any access to jQuery. Since we're no longer exporting the version of jQuery that has the tooltip API, this is the only way to provide the tooltip facility now.
",315,True,en,0
4248,13,3,0,Internals,benogle,2014-11-20T18:53:19Z,86,64,12,0,"This PR also removes references to workspaceView
",49,True,en,0
4246,4,0,0,Internals,kevinsawicki,2014-12-02T17:10:33Z,13,0,3,12,"Probably won't be merged until https://github.com/atom/atom-shell/issues/825 is released and is used by Atom.
",110,True,en,0
4243,3,0,2,Internals,benogle,2014-11-19T22:33:53Z,9,4,5,0,"They are now available at https://github.com/atom/space-pen and https://github.com/atom/atom-space-pen-views/blob/master/lib/scroll-view.coffee but will not be included in core in the 1.0.
",189,True,en,0
4240,5,0,0,Internals,kevinsawicki,2014-11-19T19:52:46Z,14,1,3,0,"Looks like Atom Shell's clipboard API uses sync ipc calls on Linux which causes the writing of selected text to the selection clipboard to add a non-trivial amount of time to the selection change event dispatch.

https://github.com/atom/atom-shell/blob/879de423728832cece6e798e3cbbb46e61738a16/atom/common/api/lib/clipboard.coffee#L3

Regarding this now being async, in my testing, this didn't change the behavior of middle mouse paste on Linux. The selection was still written to the clipboard before I could hit the paste button quick enough to paste the wrong text. But if this does present issues it could wait until the text is written before pasting the text on middle click.

Closes #4238
",696,True,en,0
4239,1,0,0,Internals,maxbrunsfeld,2014-11-19T19:14:31Z,2,55,2,0,"Closes #4234.
",14,True,en,0
4233,1,1,0,Internals,maxbrunsfeld,2014-11-19T06:26:23Z,63,12,3,0,"Addresses an issue pointed out by @dsandstrom in #4148.

@dsandstrom, @unDemian, if you wish to integrate this change into [clipboard-history](https://github.com/unDemian/clipboard-history), note that metadata field is called `fullLine`, not `fullline` as in @tekkub's [cut-line](https://github.com/tekkub/cut-line) package. I don't mean to be needlessly incompatible, but we always use camel-case identifiers, and I didn't want to break with that convention.
",460,True,en,0
4231,1,0,0,Internals,maxbrunsfeld,2014-11-19T01:38:55Z,19,5,3,0,"When explicitly auto-indenting and when pasting, indentation is based
on the previous non-blank line. When simply inserting newlines,
the previous line is used, even if it is blank.
",182,False,en,0
4225,4,1,2,Internals,benogle,2014-11-19T19:55:45Z,105,5,3,1,"This will allow packages to override the dev tools popping up behavior.
",72,True,en,0
4224,54,0,2,Internals,kevinsawicki,2014-11-18T23:37:04Z,156,13,1,0,"The new squirrel installer installs to `%UserProfile%\AppData\Local\atom` and currently only handles creating start menu and desktop shortcuts.

This PR adds the remaining items that were previously managed by the chocolatey install script.
- Adds an **Open with Atom** file context menu.
- Adds an **Open with Atom** folder context menu.
- Adds `%UserProfile%\AppData\Local\atom\bin` to the `Path` environment variable.
  - Uses `setx` to set the `Path` in the registry.
- Adds a command shim from `%UserProfile%\AppData\Local\atom\bin\atom.cmd` to the latest installed `atom.exe` version since `atom.exe` changes paths on each update.
- Adds a command shim from `%UserProfile%\AppData\Local\atom\bin\apm.cmd` to the latest installed `apm.cmd` version since `apm.cmd` changes paths on each update.

Once Atom ships with this and any bumps are smoothed out, this will be extracted into Atom Shell and added as helper on the `auto-updater` module.

Closes #4180
",961,True,en,0
4223,5,2,0,Internals,nathansobo,2014-11-19T21:59:20Z,109,28,5,1,"Global style sheet handling has now been moved to `StyleManager` and relies on interaction with the `<atom-styles>` element. The `ThemeManager` now focuses only on loading themes. This PR makes the new methods public and deprecates the old ones.
",246,True,en,0
4219,3,0,0,Internals,maxbrunsfeld,2014-11-18T04:08:17Z,90,61,3,0,"I found this while working on #4192. The `normalizeIndentOnPaste` option wasn't respected when pasting with multiple selections.
",129,True,en,0
4216,1,0,0,Internals,benogle,2014-11-18T00:20:23Z,19,20,4,0,"This is nicer for styling, and consistent with the `atom-workspace-axis` elements. So 

``` css
atom-panel.modal {
  //..
}
```

Rather than

``` css
atom-panel[location=""modal""] {
  //..
}
```
",194,True,en,0
4215,13,1,0,Internals,kevinsawicki,2014-11-18T01:07:04Z,21,1,6,0,"Adds a `core.autoHideMenuBar` config setting to auto hide the menu bar on Linux and Windows. `Alt` will bring show the menu bar in this mode.

![auto-hide](https://cloud.githubusercontent.com/assets/671378/5079234/493f802c-6e67-11e4-9614-4ab547197e54.gif)

This new command `window:toggle-menu-bar` will also be available from the command palette and the `View` menu.

Closes #2914
",382,True,en,0
4214,15,2,0,Internals,benogle,2014-11-18T01:23:46Z,166,0,3,0,"Pulled the theme bits out of https://github.com/atom/atom/pull/4169
",68,True,en,0
4211,5,1,0,Internals,kevinsawicki,2014-11-17T17:59:32Z,32,0,2,0,"Adds for pasting the selection clipboard on middle mouse button on Linux.

Pastes on `mouseup` instead of `mousedown` which seemed to be consistent with of native inputs in Firefox and Chromium as well as Sublime on Ubuntu 14.04.

Copies all selection changes instead of just mouse driven selection changes so that things like `ctrl-D` and `ctrl-L` go to the selection clipboard.

Closes #2244
Closes #2272
Closes #3027
",420,True,en,0
4209,1,1,0,Externals,stramel,2014-11-17T16:39:02Z,1,1,1,0,"Update `git fetch` command to include the prune flag which will remove remote branches that no longer exist.
",109,True,en,0
4196,1,2,0,Internals,zcbenz,2014-11-17T21:37:30Z,1,1,1,2,"Changelog:
- Add `plugins` attribute for `<webview>`
- Add `preload` attribute for `<webview>`
- Add `httpreferrer` attribute for `<webview>`
- Add `crashRepoter.getLastCrashReport` API
- Add `original-fs` module
- Add `preload` option for BrowserWindow
- Add APIs to toggle menu bar for BrowserWindow
- Fix wrong string when using `Buffer` for WebKit‚Äôs external string

**Linux**
- Use system window frame for undocked devtools

**Windows**
- Upload PDB files to symbol server
- Use native frame for `BrowserWindow` when DWM is off
- Fix setting default path for file dialogs

**Windows & Linux**
- Fix crash when showing error dialog on early initialization stage
- Make `auto-hide-menu-bar` work when number lock is on
",724,False,en,0
4194,1,0,0,Internals,benogle,2014-11-14T23:41:04Z,65,5,2,0,"It would write an empty object for the parent key when there were no other objects in the parent key.

The settings view will call `atom.config.restoreDefault` for every option when viewing a language package. This fix will only save if the value changes, and will never set an empty object. 

Closes #4175
",307,True,en,0
4192,7,6,3,Internals,maxbrunsfeld,2014-11-17T23:22:15Z,60,6,6,3,"Currently, auto-indent is not used when pasting. This makes sense for coffeescript and other indentation-sensitive languages, because in those languages, auto-indent would often make the indentation worse. This adds a separate config option, `autoIndentOnPaste` that allows auto-indentation to be used when pasting.

@atom/core Do you guys think there's anything we need to do make it clear that `autoIndentOnPaste` completely supercedes `normalizeIndentOnPaste`?

Closes #1407
- [x] auto-indent pasted text
- [x] in `::suggestedIndentForBufferRow`, base indentation on previous non-blank line
- [x] don't auto-indent when pasting after non-whitespace characters
- [x] make a separate config option, `editor.autoIndentOnPaste` for auto-indenting pasted text
- [x] add a description to the original `autoIndent` config option, differentiating it from `autoIndentOnPaste`
",870,True,en,0
4191,5,0,0,Internals,kevinsawicki,2014-11-14T22:44:50Z,9,5,2,0,"Publishes the Windows installer and nuget package files as part of the CI build.

Refs #3675 
",94,True,en,0
4188,1,0,0,Internals,maxbrunsfeld,2014-11-14T18:00:22Z,4,6,1,0,"Just some cleanup.
",19,True,en,0
4170,11,1,0,Internals,kevinsawicki,2014-11-13T17:07:06Z,9,78,14,0,"Extracted the previous code into a grunt plugin so any atom shell app can use it.

https://github.com/atom/grunt-atom-shell-installer
",134,True,en,0
4169,38,8,57,Internals,benogle,2015-01-15T20:07:54Z,625,0,1,63,"This is an initial draft of docs for converting your packages. Initially i'm thinking we want to have 3 docs
### To Write
- [x] TL;DR
- [x] Viewing Deprecations
- [x] Updating Views
- [x] Updating Specs
- [x] Eventing changes + Disposables
- [x] Updating commands
- [x] A little bit about the stylesheets, linking back to the theme guides

My vision for them is written around specific patterns with short explanations and links to examples. Like ""I have a SelectListView view, how do I do this with the new APIs?"". And we can link to our [PRs for conversion](https://github.com/atom/command-palette/pull/19/files). Deprecations will get all the nits, but there are definite patterns we will find. 

The themes are handled in https://github.com/atom/atom/pull/4214
",765,False,en,0
4165,18,3,2,Internals,nathansobo,2014-11-14T15:18:35Z,453,209,18,1,"Closes #4086

It needs to be easy to style text editors in a way that diverges from the current syntax theme when desired. Without the shadow DOM, this was simply a matter of overriding styles on the editor. With the shadow DOM, this has become harder, leading to problems like the following in the settings view:

![Settings view mini editors](https://cloud.githubusercontent.com/assets/1789/5020293/f3746d96-6a84-11e4-8ae4-473e98354f2c.png)

Ultimately, there's no avoiding the reality of the shadow DOM when overriding text editor styling, but it should be as clean and simple as possible. This PR makes some changes to ensure any text editor can be styled as follows:

``` less
atom-text-editor {
  background-color: white;
  color: black
}

atom-text-editor::shadow .cursor {
  border-color: white;
}
```

In order to make this happen, syntax themes need to style the host element itself rather than a nested root node. This will allow external styles to easily override them. To encourage this change, I have removed the `.editor` class from the element at the root of the shadow DOM, replacing it with a `.editor--private` class to discourage any future use. Syntax theme authors now need to set the background color of the editor via the `:host` pseudo-selector, as follows:

``` less
:host {
  background-color: blue;
  color: white;
}
```

They will also need to avoid scoping any other styles by the `.editor` selector. A simple approach that also supports the shadow DOM being disabled is to scope nested selectors under both `.editor` and `:host`:

``` less
// This should be replaced...
.editor, :host {
  .cursor { }
  // more styles
}
```

I plan to open PRs on the top 30 syntax themes to make these small changes.
",1732,True,en,0
4162,1,0,0,Internals,maxbrunsfeld,2014-11-12T18:25:38Z,16,5,2,0,"Addresses concerns about #4148.
",32,True,en,0
4157,2,2,0,Externals,AgentAntelope,2014-11-12T17:14:50Z,1,1,1,0,"The expected behaviour of cmd-delete is that it deletes to end of line,
with cmd acting as a modifier to delete.
",113,False,en,0
4152,2,0,0,Internals,nathansobo,2014-11-11T22:20:47Z,24,10,3,0,"In https://github.com/atom/bracket-matcher/pull/82, we're switching the bracket matcher to use highlight decorations rather than hand-crafted views. In order to be backwards-forwards compatible, we need to add the `.bracket-matcher` class on the regions directly until people have a chance to upgrade.
",302,True,en,0
4148,1,17,0,Internals,maxbrunsfeld,2014-11-11T19:13:51Z,30,0,2,0,"I often want this feature.

Closes #3643 
",42,True,en,0
4144,18,17,9,Internals,benogle,2014-11-12T23:02:40Z,301,6,7,1,"It works:
![overlay-decoration](https://cloud.githubusercontent.com/assets/69169/4987275/9f4b251c-6948-11e4-9d7f-620eb073aa47.gif)

I want to position the `atom-overlay` element to fit within the editor window, so people dont have to think about it. @nathansobo, objections to that?

Closes #3747
### TODO
- [x] Overlay decorations display
- [x] Specs
- [x] Properly position up against the bounds of the window
- [x] Make work when shadow dom is disabled
",456,False,en,0
4143,1,0,0,Internals,nathansobo,2014-11-11T02:50:13Z,42,2,2,0,,0,False,en,0
4141,5,1,3,Internals,kevinsawicki,2014-11-11T18:07:53Z,48,1,3,0,"Adds `core.fileEncoding` which will be used as the editor/buffer's default encoding when reading/writing.

I went with `core` instead of the `editor` for the prefix since this default should be respected for any packages reading/writing files, regardless of whether they are using the editor/buffer API or not.

![screen shot 2014-11-10 at 5 59 01 pm](https://cloud.githubusercontent.com/assets/671378/4987134/655ab9dc-6946-11e4-93a4-dc3252134c3e.png)

Closes atom/encoding-selector#3
",485,True,en,0
4135,7,0,0,Internals,benogle,2014-11-10T22:00:45Z,38,0,6,0,"Based on https://github.com/atom/atom/pull/4117. @ardeshirj did all the work.

Closes #4117
",92,True,en,0
4129,1,0,0,Internals,nathansobo,2014-11-10T15:17:56Z,40,1,3,0,"Fixes #4094
",12,True,en,0
4121,6,1,0,Internals,maxbrunsfeld,2014-11-10T17:25:36Z,44,41,5,0,"Motivated by [this bracket-matcher PR](https://github.com/atom/bracket-matcher/pull/82).
",89,True,en,0
4119,1,0,0,Externals,j-em,2014-11-10T18:34:38Z,1,0,1,1," load the bootstrap style for thumbnails, this fix: #4104
",58,True,en,0
4105,1,1,0,Internals,lee-dohm,2014-11-10T17:18:42Z,1,3,1,2,"Noticed that ""soon"" is now.

/cc @nathansobo 
",46,True,en,0
4103,3,0,0,Internals,nathansobo,2014-11-07T23:00:40Z,14,0,3,0,,0,False,en,0
4101,3,0,0,Internals,maxbrunsfeld,2014-11-07T21:56:26Z,13,19,6,0,"The solution for rendering global style tags with the shadow DOM disabled disrupted the order of the cascade. This is a different approach that preserves it.
",158,True,en,0
4087,1,1,0,Externals,philipgiuliani,2014-11-07T17:34:32Z,1,1,1,0,"Because of the update with the custom elements, i noticed that `.workspace` hasn't been updated in the `keymap.cson`, but `.editor` has (to `atom-text-editor`).
",161,True,en,0
4078,3,1,4,Internals,thedaniel,2014-12-29T19:44:31Z,9,8,1,53,"Adds docs for search and sorting - this has been in for a little while, it was just left undocumented because I thought I might tune/change the search indexing a bit. Happy to commit to this though.
",199,True,en,0
4071,8,28,9,Internals,maxbrunsfeld,2014-11-06T18:13:04Z,155,102,6,0,"This shouldn't be merged yet because it depends on [an unreleased text-buffer branch](https://github.com/atom/text-buffer/pull/36). Just wanted to get feedback on this approach.

Per a conversation with @kevinsawicki, I avoided changing the behavior of the `TextEditor`'s existing programmatic API. Callers can opt-in to undo-grouping using `TextEditor::withGroupingInterval`.

I updated the listeners for all editor commands and for the `textInput` event to use this method.

Closes #1606
",490,True,en,0
4068,1,1,0,Externals,jpelgrom,2014-11-05T16:18:00Z,1,0,1,0,"Added a keyboard shortcut for the ""Open folder"" action found in the file menu, based on the behaviour in the Linux version of Atom: Ctrl + Shift + O. Also logical because the keyboard shortcut for the secondary saving option (save as) is set to the original shortcut plus Shift.

PRed after discussion in [this thread at discuss.atom.io](https://discuss.atom.io/t/keyboard-shortcut-to-open-folder-on-windows/13080?u=jpelgrom).
",427,True,en,0
4064,1,2,0,Internals,zcbenz,2014-11-05T17:40:04Z,5,1,2,0,"On Yosemite the `$PATH` is not inherited by the `open` command, so we have to explicitly pass it by command line to make `atom` command inherit the `PATH` environment variable.

Fixes https://github.com/atom/atom-shell/issues/550.
",231,True,en,0
4063,2,0,0,Internals,benogle,2014-11-05T01:12:49Z,97,74,3,0,"All panels under one roof.  Give them a default color. 

This will deprecate the `.tool-panel` and `.panel-*` classes. 
",120,True,en,0
4061,7,1,7,Internals,benogle,2014-11-04T23:34:43Z,110,18,11,0,"Closes #4046

Will require the linter in #4045 to look for `.overlay` and suggest `atom-panel[location=""modal""]` instead.
",122,True,en,0
4060,1,0,0,Internals,benogle,2014-11-04T21:47:44Z,46,16,4,0,"I was having some conflicts in the modal panel stuff I was doing. Turns out we dont need a lot of bootstrap. This loads the bits we need. 
",139,True,en,0
4023,5,1,0,Internals,kevinsawicki,2014-10-31T18:39:39Z,30,13,2,0,"Maps URLs like `atom://assets/my-background.png` to `~/.atom/assets/my-background.png` so you can put something like this in your `~/.atom/styles.less`:

``` css
.item-views:empty {
  background-image: url(atom://assets/my-background.png);
  background-repeat: no-repeat;
  background-position: center;
  background-size: 90% 90%;
}
```

And have it be portable across machines and easily stored in a dotfiles repo.

Fixes #4010
",429,True,en,0
4018,1,3,0,Externals,ardeshirj,2014-10-31T16:48:34Z,0,3,1,0,"This is an attempt to fix Issues #4015 #4008.

Seems like CentOS and Red Hat are not providing `libgnome-keyring` to their official yum repository, and since the spec has `Requires: libgnome-keyring` it doesn't let them install without resolving the dependency.

In this PR, I removed all package dependencies with the assumption that those are all `build dependencies` (including libgnome-keyring) and if they are not installed then the build process (`script/build`) will fail, therefore we can't build rpm yet. In other words, rpm-build does not need to check those dependencies if they are all `build dependencies`.

Thank you.
",632,True,en,0
4014,4,0,0,Internals,benogle,2014-10-31T19:19:28Z,17,3,4,0,"Merge when https://github.com/atom/text-buffer/pull/34 is merged
Closes #3756 
",79,False,en,0
4012,2,0,0,Internals,benogle,2014-10-30T20:56:52Z,143,121,12,0,"Closes #3977 
",14,True,en,0
4006,2,3,0,Internals,zcbenz,2014-11-05T17:45:31Z,1,1,1,6,"@kevinsawicki From atom-shell v0.19.0 all custom security restrictions on `iframe` have been dropped, and package authors need to use [`<webview>` tag](https://github.com/atom/atom-shell/blob/master/docs/api/web-view-tag.md) for embedded external contents instead, we may need to put a notice in Atom's release notes.
",318,True,en,0
3997,8,14,0,Internals,kevinsawicki,2014-10-30T16:26:17Z,24,1,5,0,"I've had the feedback package disabled for months, for me it takes up valuable real estate on the status bar and draws attention to itself.

I think we are at the point where we can remove it and instead just add helpful items to the Help menu.

This PR removes the package and adds several new help menu items for faq, issues, roadmap, and discussions.

@lee-dohm any ideas for other helpful things to put in the help menu?
",425,True,en,0
3989,1,1,0,Externals,Bengt,2014-10-29T00:10:22Z,10,4,1,0,"... add packaging dependency for Fedora
",40,True,id,0
3987,12,5,0,Internals,kevinsawicki,2014-10-29T18:58:32Z,52,3,4,0,"- Upgrades pathwatcher and text-buffer for new encoding APIs
- Adds a new [encoding-selector](https://github.com/atom/encoding-selector) package that mirrors the grammar selector behavior
- Put the current encoding on the status bar
- Allow changing of the encoding
- Add auto detect option that uses [jschardet](https://github.com/aadsm/jschardet)

![encodings](https://cloud.githubusercontent.com/assets/671378/4818732/4680b1c8-5ef7-11e4-9ce2-8f68e58fb9a7.gif)

Closes #1806 
",478,False,en,0
3974,1,0,0,Internals,nathansobo,2014-10-27T17:32:48Z,17,6,3,0,"References #3789

It‚Äôs possible that bundled packages stray into this corner case, so I‚Äôd like us to catch and fix misbehaving packages before exposing users to any exceptions. Once we go one release with this turned on, we can enable the exception for all builds.
",269,True,en,0
3968,1,2,0,Internals,lee-dohm,2014-10-30T16:38:11Z,10,17,2,4,"This behavior is great for safe mode so I figured we could extend it to non-safe-mode when the configured themes aren't available for some reason. This will prevent the UI from looking wonky if things are mis-configured.
",221,True,en,0
3965,1,3,0,Externals,brunetton,2014-10-27T16:13:05Z,1,1,1,1,,0,False,en,0
3953,9,1,2,Internals,kevinsawicki,2014-10-24T21:13:40Z,95,13,5,0,"Adds support for editing [combining characters](http://en.wikipedia.org/wiki/Combining_character).

This mirrors the support added for variation sequences in #3565 

Closes #3945 
",180,True,en,0
3950,1,1,0,Externals,avdv,2014-10-24T16:11:35Z,1,1,1,0,"You need to have python2 installed on Arch.

Otherwise you get build ENOENT errors using npm-gyp.
",98,True,en,0
3944,3,6,1,Internals,benogle,2014-10-24T20:10:49Z,14,6,3,0,"Currently, the user's config file is loaded, then when each package loads, their config settings are loaded on top. Packages that define scoped settings will have priority over the user settings because they are loaded last. Example: atom/settings-view#267 We have a few options:
- Load the user config _after_ all the packages. 
  - This produces a period of time when atom has no styles.
  - Requires adding a pretty awkward method on PackageManager to get a callback when the scoped settings are all loaded
- Load the config as it is today, then reload the user config 
  - Requires adding a pretty awkward method on PackageManager to get a callback when the scoped settings are all loaded
  - Loads the file 2x
- Keep track of the read config file, and reload the scoped properties when the packages load 
  - Requires that awkward method
  - Seems like it would add some complexity to config
- Give the user configs an explicit higher priority
  - This PR

This feels like the cleanest, least intrusive way to do it. 

Closes atom/settings-view#267
Depends on https://github.com/atom/scoped-property-store/pull/6
",1118,False,en,0
3943,68,3,5,Internals,nathansobo,2014-11-05T16:42:07Z,662,469,31,12,"Closes #1800
## Tasks
- [x] Fix git diff styling
- [x] Fix specs
- [x] Fix loss of ability to insert text after autocompleting when the menu doesn't pop up
- [x] Add a feature flag
",181,False,en,1
3942,32,1,0,Internals,kevinsawicki,2014-10-23T18:36:31Z,104,46,7,0,"Follow on to #3797

Adds a Dockerfile to build and upload the RPM using a Fedora 20 image.

The Debian Dockerfile was moved to `build/debian/Dockerfile`, since this one will be actively used I decided to put it at the root of the repo.
",236,True,en,0
3925,1,4,1,Externals,jessfraz,2014-10-22T18:12:52Z,50,0,1,0,"I'm just going to leave this here.

You see I was trying to containerize a node webkit app, so I
thought why not atom. Except halfway through I realized it
actually _isn't_ a node webkit app. I finished it anyways
because I had already started. It mounts the X11 socket
so it's a containerized desktop app.
You can do what you want with it.

But since this is OSS, I am going to give you my opinion
anyway. So here it is:
You should take this and use it as a build script, because
it seems like building this is a real PITA.

Ok that's all, enjoy.
Also this file was written in vim.
No, I'm not sorry.

Signed-off-by: Jessica Frazelle jess@docker.com

![2014-10-21_2880x1800](https://cloud.githubusercontent.com/assets/1445228/4730664/4d6d4c94-599d-11e4-9126-39861e96001f.png)
",777,True,en,0
3922,10,1,2,Internals,benogle,2014-11-18T02:00:57Z,110,73,3,27,"### TODO
- [x] Deprecate space-pen exports
- [x] Deprecate React exports
- [x] Add event-kit exports
- [x] Docs
  - Fix places where it's getting `View` and `$` from `atom`
  - Add a little blurb about the deps with the hats

Closes #3842
",239,False,en,0
3917,22,0,0,Internals,kevinsawicki,2014-10-21T20:49:39Z,115,20,8,0,"Atom currently ships with 77 bundled packages.

So each time a window is opened, 77 `package.json` files are read/parsed, ~25 package keymap JSON files are read/parsed, and ~25 package menu JSON files are read/parsed.

In order to minimize the read/parse time during startup, inline all this content into the main `package.json` file under a special `_atomPackages` key.

For me this drops 25-50ms off of package load/activate time and should be more for slower machines and non-SSD drives.

Also this removes ~175 files/folders from the distribution which makes it a little leaner.
",583,True,en,0
3916,1,3,0,Externals,suda,2014-10-22T16:31:11Z,3,0,1,1,"By default many packages (including apm) [discover config directory manually](https://github.com/atom/apm/blob/master/src/config.coffee#L11). Setting ATOM_HOME allows changing default config directory without breaking apm.
",223,True,en,0
3915,1,3,0,Internals,zcbenz,2014-10-21T15:02:18Z,1,1,1,0,"Fixes #3826 
Fixes #3854 
Fixes #3363 
",39,False,en,0
3910,10,3,7,Internals,benogle,2014-10-21T20:27:17Z,156,120,14,0,"Adding this as a future-proof. At some point we would like to be able to scope settings to a particular file path (or something else? See https://github.com/atom/atom/issues/3751). The ScopeDescriptor object will be a container for these kinds of things. The `ScopedDescriptor`s returned from the editor can contain the file path, which config can deal with accordingly. 

This is added in a pretty non intrusive way. Similar to text-buffer `Range`, there is a `fromObject` method. So everything that takes a `ScopeDescriptor`, can still take an array of strings. 

Closes #3751
",579,True,en,0
3909,2,0,0,Internals,kevinsawicki,2014-10-21T18:12:31Z,29,24,2,0,"When #3761 was landed, there was an `extensions` object written to Atom's `package.json` file that was a map of extensions to files.

This was used to speed up load time of relative requires by knowing the extension ahead of time so one or more files wasn't stat-ed while it was being resolved.

Now that that has been released and appears to be having major upsides, add that same extension cache to all installed packages.

This should further reduce the count to `Module._findPath` for all the packages installed to `~/.atom/packages`.

These extensions will be added on the next `apm install` and `apm upgrade` for packages already installed, and can also be regenerated by running `apm rebuild-module-cache`.
",714,True,en,0
3907,4,2,0,Internals,benogle,2014-10-21T20:12:18Z,66,9,3,0,"With this, schemas can specify defaults for scopes:

``` coffee
type: 'string'
default: 'ok'
scopes:
  '.source.js':
    default: 'omg' 
```

This structure allows for a separate schema for each scope in the future, but for now, I'm only using the `default` key.

Refs #3898 
",276,True,en,0
3906,5,0,0,Internals,kevinsawicki,2014-10-21T17:36:14Z,33,7,2,0,"Now that package menus properly destroy themselves during deactivation, the window's application menu should be tracked and restored when the window gains focus.

Without this, a bunch of menus are getting destroyed when a window is closed, even if another window is still open.

Fixes #3806 
",293,True,en,0
3886,1,1,0,Externals,fenuks,2014-10-20T15:32:14Z,1,0,1,1,,0,False,en,0
3883,8,0,8,Internals,nathansobo,2014-10-20T16:29:13Z,18,3,1,2,"Previously, when running `apm test` inside the package directory worked fine because it set the `spec-directory` argument to the executable and just ran the core specs. However, if the repository was located somewhere other than `~/github/atom` and no `ATOM_DEV_RESOURCE_PATH` environment variable was defined, it would _first_ load a bunch of core files out of the application bundle. Now that we're using custom elements, these leads to errors due to redundant element definition, so we need a new approach.

Now when you run `apm test` in the atom repository, we will automatically assign the resource path to the directory containing the specs unless one is otherwise specified.

Closes #3872

/cc @kevinsawicki since you are the lord of startup. :snowflake::boot: 
",770,True,en,0
3874,1,0,0,Internals,zcbenz,2014-10-17T11:43:04Z,1,1,1,0,"Fixes #3873
Fixes #3854 
",25,False,en,0
3867,6,0,0,Internals,kevinsawicki,2014-10-17T21:38:18Z,17,0,2,0,"Continuation of #3556

Fixes #3527 
",36,True,en,0
3860,9,0,0,Internals,kevinsawicki,2014-10-16T23:31:59Z,35,6,2,0,"Removing trailing whitespace from the current line and leading whitespace from the line below when joining and put the cursor to the left of the added space to make adding things like a `,` easy.

Continuation of #3739 

Fixes #3439
",233,True,en,0
3847,8,0,0,Internals,benogle,2014-10-16T18:04:15Z,125,18,3,0,"The settings view needs to know if a given scoped property is set to the 'default' then be able to reset said property back to the 'default'.

Defaults are strange with scoped properties because scoped properties are additive. You can set `some.setting` 10 times with similar scopes creating a chain of properties that need to be evaluated against a scoped descriptor. Which one of those set is the default? The path through those scoped properties depends on ordering and specificity when matched against a scopeDescriptor.

Defaults here rely on some simplifications based on our use of scoped settings.
1. Every value set in the property store has a `source` property indicating where it came from. Each scoped setting set via the user config file or `Config::set`, has this `source` property set to `user-config`. Scoped defaults can be any scoped property who's `source` property is not `user-config`. So anything set by a package's `scoped-properties.cson` is a default, and anything the user sets is an override.
2. The settings view needs to check and reset the default values with the same scope selector used to initially set the properties. Currently these selectors are language scopes: `'.source.js'`, etc. eg. The way it's written in this PR, we cannot reset the default for the scope descriptor `['.source.js', '.meta.function.name']`, but we can for `['.source.js']` because `'.source.js'` is the way it went in.

For reason number 2, all the methods; `isDefault`, `getDefault`, `restoreDefault`, `getSettings`; take a `scopeSelector`, not a `scopeDescriptor`.

Depends on https://github.com/atom/scoped-property-store/pull/5
",1642,True,en,0
3837,21,5,7,Internals,benogle,2014-10-20T20:25:48Z,618,33,15,5,"The implementation of #3680:

``` coffee
atom.workspace.addViewProvider
  modelClass: ProjectBrowser
  viewClass: ProjectBrowserElement
```

and 

``` coffee
panel = atom.workspace.addLeftPanel(item: new ProjectBrowser)
panel.hide() # Hide the panel
panel.show() # Show the panel
atom.workspace.addRightPanel(panel) # Move the panel to the right
panel.destroy() # Remove the panel entirely
```

TODO
- [x] Create `Panel` model
- [x] Create `PanelElement` custom element
- [x] Get basic panel addition working
- [x] Add panel container model / element
- [x] Add panel visibility control
- [x] Example package exercising for visual check
- [x] Implement priority system
- [x] addLeftPanel() 
- [x] addRightPanel()
- [x] addTopPanel()
- [x] addBottomPanel()
- [x] Tinker with a package using this api (status bar)
- [x] Docs
- [x] Deprecate the old stuff

Closes #3680
",866,True,en,0
3836,2,0,1,Externals,paulcbetts,2014-10-15T18:08:00Z,2,1,1,0,"This lets users create one-off installers locally without having to download every other release to create deltas.
",115,True,en,0
3831,5,0,5,Internals,benogle,2014-10-16T20:26:54Z,100,7,4,2,"These will go along with the blog post.
",40,True,en,0
3830,11,2,0,Internals,nathansobo,2014-10-18T00:11:16Z,327,69,9,3,"This is a step toward updating the text editor to use the shadow DOM (#3677).

Previously our style sheets were managed globally, but with the introduction of the shadow DOM we now need to be able to load stylesheets into specific contexts and not others. The theme manager was previously mutating the DOM directly when stylesheets were applied, which clashed with our requirement of loading specific stylesheets in specific contexts. This PR now introduces a new custom element `<atom-styles>`, which interacts with the style manager at `atom.styles` to render the stylesheets in our head.

The next step will introduce targeting stylesheets to specific contexts. When an `<atom-styles>` element is appended to a shadow root, it will only add child style elements that are targeted for that shadow root. If stylesheets are targeted with a specific context, they won't be loaded in the document's head.

Currently, the new style manager only focuses on _applying_ stylesheets. Loading is still handled in the theme manager. It should probably be moved so the theme manager only deals with themes, not stylesheet loading and compilation.
",1137,True,en,0
3828,1,1,0,Externals,zigal,2014-10-15T00:27:16Z,1,0,1,0,"see #3827 
",11,True,en,0
3825,3,0,0,Internals,zcbenz,2014-10-14T14:28:12Z,3,4,3,0,,0,False,en,0
3822,1,1,0,Externals,suda,2014-10-15T00:32:42Z,1,1,1,0,"xcopy [doesn't handle paths longer than 254 characters](http://www.terminally-incoherent.com/blog/2007/02/05/xcopy-insufficient-memory/) and it's recommended to use [robocopy](http://technet.microsoft.com/en-us/library/cc733145.aspx) (available on Windows 7, Windows 8, Windows Server 2008, Windows Server 2008 R2, Windows Server 2012) instead.
",345,True,en,0
3817,13,0,0,Internals,benogle,2014-10-14T00:25:49Z,172,152,14,0,"I'm sure people will be wondering ""WTF is a `scopes`?!"". This gives them their own name `scopeDescriptor`. Later on we can write a doc explaining what a scope descriptor is. For now, the docs point to `Config::get` which is a nice concrete usage of scopeDescriptors. 
",268,True,en,0
3815,50,10,2,Externals,paulcbetts,2014-11-14T01:53:29Z,123,23,7,31,"This PR sets up automatic updates for installations that use Squirrel for Windows by implementing `auto-updater` directly instead of using the one built into Atom Shell. Squirrel for Windows uses out-of-process updates, so wiring it up in Native Code would just mean extra suffering
",283,True,en,0
3814,1,0,0,Externals,DrPandemic,2014-10-14T00:27:16Z,4,3,1,0,"This PR adds Atom in the application title bar.
Closes #3805
![screenshot from 2014-10-13 17 10 57](https://cloud.githubusercontent.com/assets/3250155/4620223/7d02d57c-531d-11e4-81d9-2173584e44bf.png)
",201,False,en,0
3812,6,0,1,Internals,benogle,2014-10-13T20:26:45Z,37,21,4,0,"Turns out `atom.config.get()` is called a ton when rendering the editor. This pull fixed some of it: https://github.com/atom/scoped-property-store/pull/4

But it was still noticeably slower when opening a tab. Here are some profiles:

Before:
![screen shot 2014-10-10 at 12 33 45 pm](https://cloud.githubusercontent.com/assets/69169/4619076/f477ef64-5310-11e4-87bd-5df284015c60.png)

After. No more config junk at the top of the list
![screen shot 2014-10-13 at 12 35 03 pm](https://cloud.githubusercontent.com/assets/69169/4619086/013be066-5311-11e4-9acf-8c359f092450.png)

It also feels much better.
",602,True,en,0
3803,1,2,3,Externals,matttbe,2014-10-13T19:57:12Z,4,4,3,1,"Hello,

Thank you for developing and maintaining Atom!

I'm using it on GNU/Linux Ubuntu and it seems the launcher (`.desktop` file) has a capital letter in its name. It should be renamed to `atom.desktop` because a `.desktop` file should not contain capital letters as any other `.desktop` files that we can find in `/usr/share/applications`.

Note that we also have another problem because currently, the window's class of all Atom windows is `Atom Shell` but the launcher is named `Atom`. We should also add this line in your `.desktop` file:

```
StartupWMClass=Atom Shell
```

Because without that, it's not possible for a dock/panel (like Cairo-Dock) to link a launcher (`Atom`) with its window (`Atom Shell`).

But it's certainly better to rename the window's class and this is why I just created this pull request in the `atom-shell` project! => https://github.com/atom/atom-shell/pull/698

Best Regards,

Matt
",919,True,en,0
3797,4,6,1,Externals,ardeshirj,2014-10-15T23:30:16Z,102,0,5,3,"This pull request is referring to [issue #301](https://github.com/atom/atom/issues/3011)

The ""mkrpm"" grunt task will create the rpm package in red hat Linux (Fedora, CentOS, Red Hat)

This assumes that the build task is **done**, and the rpm build tools are installed,
which can be done with the yum package manager:
- sudo yum install @development-tools
- sudo yum install fedora-packager

**NOTE**: I have only tested in the Fedora-20 machine, but it should work in
CentOS and Red Hat Linux as long as the rpm build environment is installed.
",545,True,en,0
3773,1,1,0,Externals,matkoniecz,2014-10-09T15:56:10Z,1,1,1,0,"fixes #3771 
",13,True,en,0
3769,3,10,3,Externals,Maxhodges,2014-10-20T15:58:12Z,2,0,1,11,"improper trailing and leading spaces can cause your bindings to fail.Since cson has very little adoption relative to json, I think it's important to warn new users that they need to understand CoffeeScript notation or else a single space could break their file. I spent one full hour today trying to get an auto-indent mapping to work. The solution involved adding one leading space!
",384,True,en,0
3746,7,0,0,Internals,nathansobo,2014-10-09T14:58:54Z,175,185,56,0,"I was previously considering this part of the shadow DOM roadmap item, but I think it makes sense to be a bit more granular. This issue covers conversion of all the custom elements in core to use custom tag names. We can preserve their existing classes for now, so it should be a simple change.
",295,True,en,0
3761,89,28,5,Internals,kevinsawicki,2014-10-15T21:00:10Z,462,12,11,7,"## The Problem

Atom packages installed to `~/.atom/packages` do not share any requires with core or the packages bundled with Atom.

For example, imagine a package has a dependency on [underscore](http://underscorejs.org) 1.7.

When that package does a `require('underscore')`, underscore will be required and loaded out of the packages `node_modules` folder even if Atom core has this same dependency and has already required underscore@1.7.0. Two copies of the exact same module are required and loaded instead of them sharing that exact same dependency.

So if underscore 1.7 takes 10 milliseconds to require and 10 packages you've installed are using it, Atom will spend 100 milliseconds at startup requiring 10 identical copies, instead of requiring it once and sharing that copy among the 10 packages.

This has led package authors to do the following performance hacks:

``` js
require(path.join(atom.getLoadSettings().resourcePath, 'node_modules', 'underscore'))
```

This requires it directly out of core and so it will only loaded once since the full path is given to `require`.

This hack has the downside of packages breaking when Atom core upgrades or removes dependencies.
## The Solution

Patch node's [Module](https://github.com/joyent/node/blob/25702abc5638bbecffa92e8349d2a871a5f592c9/lib/module.js#L321) to allow packages to share modules.

So if a package is dependent on underscore `>= 1.5` and underscore `1.7` has already been loaded by core or another package, that already required underscore version will be used instead of loading a new copy out of the package's `node_modules` folder.

This is accomplished by doing the following:
- Precompute all the dependencies a package ships with when it is installed so Atom can track which version of modules are available across all packages and core.
- Precompute what modules each folder in a package depends on. That way when any file is required in that folder, Atom can immediately know what module versions it needs and return a version from the cache if a compatible version has already been required.

So by patching `Module._resolveFilename`, Atom can find a compatible version of a module already loaded without stat-ing or reading any files on disk.

It instead uses the precomputed dependency graph to be able to immediately resolve a module name and version to the path of a compatible version that has already been required.

Packages won't have to do anything to take advantage of this, it will be automatically detected during `apm install` and handled transparently.

Packages will still always get a version of the module that satisfies the dependency range listed in their `package.json` file.

The apm changes are in https://github.com/atom/apm/pull/200
## The Results

To verify that this approach improved startup time I decided to measure the load and activate time for several packages.  These packages were chosen because they are all dependent on at least one module and they have similar dependencies to the modules bundled with Atom and/or each other.
### Before

| Package | Load/Activate Time in Milliseconds |
| :-- | --: |
| [atom-color-highlight](https://atom.io/packages/atom-color-highlight) | 176 |
| [hex](https://atom.io/packages/hex) | 12 |
| [minimap](https://atom.io/packages/minimap) | 97 |
| [minimap-color-highlight](https://atom.io/packages/minimap-color-highlight) | 108 |
| [minimap-git-diff](https://atom.io/packages/minimap-git-diff) | 17 |
| [minimap-selection](https://atom.io/packages/minimap-selection) | 4 |
| **Total** | **414** |
### After

| Package | Load/Activate Time in Milliseconds |
| :-- | --: |
| [atom-color-highlight](https://atom.io/packages/atom-color-highlight) | 31 |
| [hex](https://atom.io/packages/hex) | 2 |
| [minimap](https://atom.io/packages/minimap) | 69 |
| [minimap-color-highlight](https://atom.io/packages/minimap-color-highlight) | 7 |
| [minimap-git-diff](https://atom.io/packages/minimap-git-diff) | 4 |
| [minimap-selection](https://atom.io/packages/minimap-selection) | 3 |
| **Total** | **116** |

/cc @abe33 since I used a bunch of your packages in my testing

Closes #3672
",4135,True,en,0
3750,1,1,0,Externals,mlloreda,2014-10-08T15:21:09Z,1,3,1,0,"`mkdir -p` is an idempotent operation.
",39,True,en,0
3745,2,1,0,Internals,thedaniel,2014-11-20T21:21:43Z,16,0,1,44,,0,False,en,0
3721,2,2,0,Internals,nathansobo,2014-10-08T18:35:36Z,31,16,1,0,"Status: PR ready for merge once we get a green build.

The workspace has already been converted to custom elements, but [`PaneElement::activeItemChanged`](https://github.com/atom/atom/blob/master/src/pane-element.coffee#L55) still expects all pane item views to have `.__spacePenView` shim properties and attaches, hides, and shows the views with jQuery. This needs to be converted to support raw custom elements that are attached, hidden, and shown via native DOM APIs. Whil doing this, it also still needs to support `afterAttach` and `beforeRemove` lifecycle hooks for any SpacePen wrappers for those elements. 
",615,True,en,0
3738,4,1,0,Externals,paulcbetts,2014-10-13T21:03:22Z,14,10,7,6,"This PR enables Squirrel delta packages, which basically consists of downloading the previous versions so that we can build deltas based on them. This PR also bumps the Squirrel version to 0.5.3 (since `SyncGitHubReleases` is part of Squirrel and version skew would be weird)
",276,True,en,0
3737,2,2,1,Externals,russlescai,2014-10-15T23:52:46Z,11,0,1,8,"Following from previous [PR](https://github.com/atom/atom/pull/3475), to allow merging.

This Pull Request adjusts the font size when the control key is held down and scroll wheel is used.

It ignores OSX(darwin) as this platform has a conflicting accessibility feature which should not be overwritten.
",303,True,en,0
3735,11,0,0,Internals,nathansobo,2014-10-08T21:12:35Z,328,228,9,1,"Closes #3732

This PR builds on #3734 to implement commands properly, so they should be merged in order.
",105,True,en,0
3734,11,0,0,Internals,nathansobo,2014-10-08T19:10:51Z,231,150,9,1,"Closes #3731

This PR applies some surgical patching to jQuery so that commands registered with `atom.commands.add` integrate smoothly with jQuery event handlers registered with `$::on` and `$::command`. Now a jQuery handler can stop propagation to a command registry handler and vice-versa.
",292,True,en,0
3718,26,12,17,Internals,benogle,2014-10-08T23:37:20Z,511,97,12,5,"Status: Donezo

Building on https://github.com/atom/atom/issues/3674, the plan is to allow for scoped configuration of editor settings. This solves the problem of ""I only want to soft wrap in markdown documents"", ""I need hard tabs for make"", ""I want 2 space tabs for ruby and 4 space tabs for python"", etc. 
### The settings

Here are the settings I plan on scoping:

``` coffee
# Scoping these is obvious to me
editor.softTabs
editor.tabLength
editor.softWrap
editor.softWrapAtPreferredLineLength
editor.showInvisibles
editor.showIndentGuide
editor.nonWordCharacters

# Scoping these seems good, but maybe not
editor.invisibles
editor.autoIndent
editor.normalizeIndentOnPaste
```

Language packages will be able to set these settings in their `scoped-properties` cson files. 

Comment if you have suggestions about settings that should / should not be scoped. 
### User config file format

The user will also be able to override these settings in their config file. The plan right now is to place all the current settings under a `global` key, then any overridden scoped settings under their scope. Check it:

``` coffee
'global':
  'editor':
    'fontSize': 14
    'fontFamily': 'monaco'
    'tabLength': 4
  'core':
    'themes': [
      'atom-light-ui'
      'atom-light-syntax'
    ]
'.source.gfm':
  'softWrap': true
'.source.gfm .code':
  'softWrap': false
'.source.ruby':
  'tabLength': 2
```

In this example, all languages other than ruby will use 4 space tabs, and ruby will use 2. Additionally, markdown files will be wrapped. One neat thing, because of scoping, is that code blocks in markdown will _not_ be wrapped in this case. 
### Backward compatibility

The config file will be read in as it is today. It will check for a `global` key, and if not there assume the old format. Upon writing the file back out, it will write out with global config under the `global` key.
### TODO
- [x] scope editor.tabLength
- [x] scope editor.softWrap
- [x] scope editor.softWrapAtPreferredLineLength
- [x] scope editor.preferredLineLength
- [x] scope editor.scrollPastEnd
- [x] scope editor.showInvisibles
- [x] scope editor.showIndentGuide
- [x] scope editor.nonWordCharacters
- [x] scope editor.invisibles
- [x] scope editor.autoIndent
- [x] scope editor.normalizeIndentOnPaste
- showLineNumbers (punting. Will scope and fix gutter hiding in one unit of work)
- scope editor.softTabs (punting for now. Later: https://github.com/atom/atom/issues/3719)
- [x] read / write new config format
- [x] Merge https://github.com/atom/scoped-property-store/pull/3
### Prior Art

Refs https://github.com/atom/atom/issues/2593, https://github.com/atom/language-make/issues/3, https://github.com/atom/atom/pull/2917
Depends on https://github.com/atom/atom/pull/3697, https://github.com/atom/scoped-property-store/pull/3
",2810,True,en,0
3697,28,3,25,Internals,benogle,2014-10-03T21:01:03Z,432,145,8,1,"Status: looking for feedback :eyes: 

This moves the scoped properties from syntax into config and merges them with the 'global' config. 
### TODO
- [x] Add optional selectors to `Config::get/set`
- [x] Forward deprecated writes to `atom.syntax` to `atom.config`
- [x] Forward deprecated reads on `atom.syntax` to `atom.config`
- [x] Read from `atom.config` instead of `atom.syntax`
- [x] Register scoped properties with `atom.config` instead of `atom.syntax` when loading packages.
- [x] Allow scoped settings to be observed
- [x] Update docs to explain the scope descriptors

Closes https://github.com/atom/atom/issues/3674
",626,True,en,0
3691,2,0,0,Internals,nathansobo,2014-10-01T17:14:30Z,95,61,11,0,"This changes all APIs concerning paths and repositories on the project to be plural, preparing us to switch to multi-folder projects. It doesn‚Äôt make any changes to actually support multiple folders. Instead we just wrap the previous return values in singleton arrays.
- constructor `path` params -> `paths`
- `getRootDirectory` -> `getDirectories`
- `getPath` -> `getPaths`
- `setPath` -> `setPaths`
- `getRepo` -> `getRepositories`

It also adds the `Project::onDidChangePaths` event.
",489,False,en,0
3690,1,2,0,Internals,benogle,2014-10-01T16:47:29Z,48,9,2,0,"Closes atom/settings-view#257

@kevinsawicki sanity check, please.
",67,True,en,0
3688,4,3,0,Internals,zcbenz,2014-10-01T14:04:34Z,3,2,3,0,,0,False,en,0
3671,3,0,0,Internals,nathansobo,2014-09-30T20:50:56Z,9,10,2,0,"This is part of the ""disposables everywhere"" initiative.
",57,True,en,0
3670,2,0,0,Internals,nathansobo,2014-09-30T20:50:46Z,7,1,1,0,"This is part of the ""disposables everywhere"" initiative
",56,True,en,0
3667,4,0,0,Internals,nathansobo,2014-09-30T19:10:35Z,55,36,5,0,"Part of the ""disposables everywhere"" API cleanup initiative.
",61,True,en,0
3663,2,0,0,Internals,benogle,2014-09-30T16:56:05Z,6,2,2,0,"We need to unsubscribe when the editor is removed. This causes #3651

On master see the issue by moving an editor from one pane to another. All the commands will be duplicated.
",177,True,en,0
3658,22,11,2,Internals,nathansobo,2014-09-30T22:38:58Z,415,340,14,0,"## Consistent API

I initially set out to return `Disposable` instances from `atom.contextMenu.add`, but then I noticed that the format for expressing items didn't match up with `atom.menu.add`. This PR corrects that. You can now add context menus with the same format as adding application menus, with selectors mapping to arrays containing menu items as follows:

``` coffee
atom.contextMenu.add '.editor': [
  {label: 'Undo', command: 'core:undo'}
  {label: 'Redo', command: 'core:redo'}
  {label: 'Other', submenu: [
    {label: 'Transpose', command: 'editor:transpose'}
    ]
  }
]
```
## Created and Should Display Hooks

There's also a new `shouldDisplay` hook to address a use case I saw in color-picker, which is currently digging into `ContextMenuManager` internals to conditionally display a menu item. This is a sketch of how the API could be used, but not real code from the actual color-picker.

``` coffee
atom.contextMenu.add '.editor': [{
  label: 'Pick Color',
  command: 'color-picker:',
  shouldDisplay: (event) -> # use the right click event to decide...
}]
```

The `executeAtBuild` hook has been replaced with `created`. I couldn't find anyone using this other than us because it wasn't exposed in our API, so I went ahead and just renamed it without shimming. Here's the `created` hook being used to add the `x` and `y` of the click event to the command.

``` coffee
atom.contextMenu.add '.workspace': [{
  label: 'Inspect Element'
  command: 'application:inspect'
  devMode: true
  created: (event) ->
    {pageX, pageY} = event
    @commandOptions = {x: pageX, y: pageY}
}]
```
## Dev Mode

Dev-mode-only items were formerly expressed with a trailing options hash on the entire call to `::add`. Now each individual item can contain a `devMode` field indicating whether it should only display in dev mode. You can see this in the `Inspect Element` example above.
## Disposables

Finally, `::add` now returns a disposable on which `::dispose` can be called to remove the added item descriptors.
## Outreach

We should probably talk to the author of color-picker and any other packages that dig into context menu internals to get them to switch to the new API. We may even want to send them a PR before merging this if the number is manageable.

/cc @atom/core 
",2285,True,en,0
3655,5,0,0,Internals,nathansobo,2014-09-30T18:05:11Z,78,4,2,1,"This is part of the initiative to return disposables in any place we add something we may later want to remove. I'll be opening PRs for each specific subsystem to keep things small.
",182,True,en,0
3635,1,1,0,Externals,paulcbetts,2014-09-25T20:47:33Z,2,2,1,0,"Copy/Cut/Paste always have the same accelerator in every app, '_Copy', 'Cu_t', '_Paste'
",88,True,en,0
3633,43,6,19,Internals,nathansobo,2014-10-02T22:00:31Z,708,526,27,7,"This is the next step in removing dependency on jQuery in core. It replaces all the SpacePen views with custom elements in the workspace. The SpacePen views are left in place as wrapper shims that we will deprecate, but they no longer contain essential logic. For now this uses the `is` attribute with the elements subclassing `div`s for styling compatibility. In another pass we will convert them to custom tag names. The following views have been converted:
- `WorkspaceView` => `WorkspaceElement`
- `PaneContainerView` => `PaneContainerElement`
- `PaneColumnView` and `PaneRowView` => `PaneAxisElement`
- `PaneView` => `PaneElement`
",636,False,en,0
3631,3,1,0,Internals,kevinsawicki,2014-09-25T17:57:52Z,9,1,1,0,"Mirrors behavior of other applications on Ubuntu that offer Open File and Open Folder commands.

Closes #3618
",110,True,en,0
3619,2,9,0,Internals,lee-dohm,2014-09-26T18:47:58Z,35,2,3,2,"Fixes #3592 

Since @thedaniel [suggested](https://github.com/atom/atom/issues/3592#issuecomment-56398349) that this should be part of the default behavior, I took some of the code from the [scroll-past-end package](https://atom.io/packages/scroll-past-end) and added the functionality.
",287,True,en,0
3613,77,11,51,Internals,benogle,2014-09-30T00:23:54Z,1267,252,20,5,"JSON Schema ([schema core](http://json-schema.org/latest/json-schema-core.html), and the [supported keys](http://json-schema.org/latest/json-schema-validation.html))

It will look like this:

``` coffee
@config:
  fontSize:
    type: 'integer'
    default: 16
  lineHeight:
    type: 'number'
    default: 1.3
  someArray:
    type: 'array'
    default: ['ok', 'yeah']
    items:
      type: 'string'
  invisibles:
    type: 'object'
    properties:
      eol:
        type: 'string'
        default: '\u00ac'
      space:
        type: 'string'
        default: '\u00b7'
```
### Notes
- If a value is passed to `::set` cannot be coerced, it will not be set (eg. passing `'omg'` to an integer type)
### TODO
- [x] support some of the fancy bits of the schema (minimum, maximum, enum)
- [x] deprecate the `getInt` style methods
- [x] use in our internal classes
- [x] read schema from loaded packages
- [x] figure out a reasonable notification when there are issues loading user's config
- [x] deprecate `configDefaults`
- [x] write a doc about it I can point to
- [x] write good docs into Config class
- [x] Move config schemas out of workspace and editor
- [x] convert a package to use schema in a PR https://github.com/atom/git-diff/pull/40
- [x] make sure settings view works
",1279,True,en,0
3611,14,0,4,Internals,nathansobo,2014-09-24T21:06:52Z,775,647,12,0,"## Remaining Work
- [x] Fix failing specs due to jQuery `trigger` being called for commands instead of native event dispatch.
## Description

This PR properly integrates the new global command registry (`atom.commands`) with package activation events. It does the following:
- Switches the syntax of `atom.activationEvents` to `atom.activationCommands`. This hash has mandatory selectors mapping to strings or arrays of strings as follows:

``` coffee
  activationCommands: {
    "".workspace"": [
      ""project-find:show"",
      ""project-find:toggle"",
      ""project-find:show-in-current-directory"",
      # ...
    ]
  }
```
- Uses `atom.commands` instead of `$::command` to listen for package activation. This means we won't need to use a deprecated API to support this behavior when we deprecate `atom.workspaceView` and `$::command`.
- Ensures that commands registered with `atom.commands` are invoked only once even when the activation command is replayed after activating the package.

This is delicate work but I'm pretty sure it preserves existing behavior. Specs pass and I tried a handful of baked-in packages without issues. The last remaining issue is to deal with specs that call `trigger` to invoke commands, which isn't picked up by our native handlers. I'd like to find a way to enhance jQuery's `trigger` to invoke real DOM events. One nice thing: Because the command registry uses the [capture phase](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener) of events, we don't need to disable the jQuery event listeners anymore to prevent them from being invoked twice. We stop propagation of the activation command and reinvoke it after activating the package. It's this second invocation that ends up calling listeners registered via jQuery.
",1785,False,en,0
3610,1,2,0,Externals,postcasio,2014-09-24T00:07:37Z,0,6,1,0,"Not sure if there is a reason for these.
",41,True,en,0
3606,2,0,2,Internals,benogle,2014-09-23T18:20:23Z,52,13,5,0,"Less dependence on the editorView!
",35,True,en,0
3605,7,0,0,Internals,benogle,2014-09-22T23:44:42Z,64,11,4,0,"`onDidChangeSelectionRange` and `onDidChangeCursorPosition` passed different data to their call backs. This makes them consistent.
",131,True,en,0
3603,11,3,0,Internals,benogle,2014-09-25T22:27:13Z,250,193,25,3,"Gonna be lots of deprecations in packages
",42,True,en,0
3601,4,0,0,Internals,benogle,2014-09-22T20:43:04Z,35,30,4,0,,0,False,en,0
3599,10,1,0,Internals,kevinsawicki,2014-09-23T19:59:35Z,23,3,3,1,"Correct errors generated when running lintian against the deb package.
- [x] arch-dependent-file-in-usr-share
- [x] changelog-file-missing-in-native-package
- [x] embedded-library
- [x] extended-description-is-empty
- [x] no-copyright-file
- [x] python-script-but-no-python-dep
- [x] shlib-with-executable-bit
- [x] unstripped-binary-or-object
- [x] wrong-file-owner-uid-or-gid

Closes #3596
",392,False,en,0
3587,18,0,0,Internals,nathansobo,2014-09-23T19:08:00Z,328,61,20,3,"/cc @atom/core Worth review since I'm adding a major API here.

This PR is another step in move away from SpacePen and towards HTML 5 custom elements. It adds two methods to `Workspace`:
## ::getView(object)

This method can be called with any object in the workspace in order to get a view. You can use it to get the view corresponding to the workspace itself, panes, or pane items.  It _always_ returns a DOM node rather than a SpacePen view. In the near future, it will return HTML 5 custom elements for all our views in core, but for now it just returns the root DOM node of SpacePen views with a `__spacePenView` expando property pointing back at the view. A branch is already in progress to convert core views to custom elements.

``` coffee
editorView = atom.workspace.getView(atom.workspace.getActiveTextEditor())
paneView = atom.workspace.getView(atom.workspace.getActivePane())

# this one is weird but worth it for consistency. getting the workspace view
# should be rare once the panel APIs are in place.
workspaceView = atom.workspace.getView(atom.workspace)
```
## ::addViewProvider

This is the other half of `::getView`. If you add a model object as a pane or panel item, the workspace's view needs to know how to present it on screen. This is how you teach workspace to do that:

``` coffee
atom.workspace.addViewProvider
  modelConstructor: TextEditor # Future name of Editor
  viewConstructor: TextEditorElement # Future custom element for TextEditor
```

Custom elements are required to have a `::setModel` method so the model can be assigned since element constructors don't take arguments.

You can also provide a `createView` factory method which is passed the model. This mechanism provides more flexibility but is less convenient if all you want to is build a custom element.
## Next Steps

Next up: converting our core views to custom elements, which includes workspace views and text editors. Every model object in the workspace should have its view constructed via the new provider API. After that, we'll be in position to switch to custom tag names and explore using the shadow DOM.
",2112,True,en,0
3585,1,1,0,Externals,deiga,2014-09-22T22:06:50Z,1,1,1,3,"I have this file on my Mac `/Users/timosand/Library/Application Support/com.github.atom.ShipIt/update.85PyXs3/Atom.app` and my `mdfind` returns it. It seems to be a common one, so I thought to remove it from the list to be sure that it selects the right Atom.app
",263,True,en,0
3583,13,0,0,Internals,benogle,2014-09-19T01:45:18Z,698,693,10,0,"This cleans up and reorganizes the docs based on the conversation @nathansobo and I had today. 

This is just docs changes. Mostly renaming sections, and moving methods between sections.
",187,True,en,0
3582,1,1,0,Internals,kevinsawicki,2014-09-18T23:16:17Z,9,0,1,0,"This ensures focused specs never end up as green builds on PRs and will fail master builds when focused specs are pushed to master.

/cc @nathansobo @benogle You guys okays with this? Today we had another focused spec checked in and it seems like it happens enough that we should just just fail them immediately on CI when they are checked in.
",344,True,en,0
3569,11,1,0,Internals,benogle,2014-09-18T23:14:35Z,483,314,7,0,"Also use the docs from the new core `Marker` class.
",52,True,en,0
3567,30,2,0,Internals,kevinsawicki,2014-09-18T20:30:59Z,130,2,7,0,"### Deprecated view events

The following events will now be deprecated when calling `.on` on these views with information about the corresponding model event that should be used instead.
#### WorkspaceView (atom.workspaceView)
- beep (added `Atom::onDidBeep`)
- cursor:moved
- editor:attached
- editor:detached
- editor:will-be-removed
- pane:active-item-changed
- pane:active-item-modified-status-changed
- pane:active-item-title-changed
- pane:attached
- pane:became-active
- pane:became-inactive
- pane:item-added
- pane:item-moved
- pane:item-removed
- pane:removed
- pane-container:active-pane-item-changed
- selection:changed
- uri-opened
#### EditorView
- cursor:moved
- editor:attached
- editor:detached
- editor:will-be-removed
- selection:changed
#### PaneView
- cursor:moved
- editor:attached
- editor:detached
- editor:will-be-removed
- pane:active-item-changed
- pane:active-item-modified-status-changed
- pane:active-item-title-changed
- pane:attached
- pane:became-active
- pane:became-inactive
- pane:item-added
- pane:item-moved
- pane:item-removed
- pane:removed
- selection:changed
### Remaining custom view events
#### EditorView
- editor:display-updated
",1176,True,en,0
3565,8,0,0,Internals,kevinsawicki,2014-09-17T17:58:44Z,113,57,4,0,"Expand support for high/low surrogate pairs by also supporting variation sequences so that they are treated as tokens with a screen delta of 1 but a buffer delta of 2. This allows them to be moved over and deleted as if they were a single character even though they have a string length of 2.

``` js
'‚úîÔ∏é'.length
2
'‚úîÔ∏é'.charCodeAt(0)
10004
'‚úîÔ∏é'.charCodeAt(1)
65038
```

http://www.alanwood.net/unicode/variation_selectors.html

Closes #3564
",453,True,en,0
3555,4,0,0,Internals,kevinsawicki,2014-09-17T17:15:34Z,46,0,2,0,"#2304 no longer cleanly merges but the issue is still present where leading/trailing hard tabs don't get a `trailing-whitespace` or `leading-whitespace` CSS class applied to them.

Closes #2304
",194,True,en,0
3549,77,1,10,Internals,benogle,2014-09-17T23:51:50Z,1987,1674,25,1,"For internal classes only in this PR. Some of these are pretty much finished already.
- [x] Atom
- [x] BufferedNodeProcess
- [x] BufferedProcess
- [x] Clipboard
- [x] Config
- [x] ContextMenuManager
- [x] Cursor
- [x] Decoration
- [x] DeserializerManager
- [x] Editor
- [x] EditorView
- [x] Git
- [x] MenuManager
- [x] PackageManager
- [x] Pane
- [x] PaneView
- [x] Project
- [x] ScrollView
- [x] SelectListView
- [x] Selection
- [x] Syntax
- [x] Task
- [x] ThemeManager
- [x] Workspace
- [x] WorkspaceView
",507,False,en,0
3545,2,1,0,Internals,nathansobo,2014-09-15T20:49:10Z,10,10,8,0,"I recently renamed `Editor::setSoftWrap` and `::getSoftWrap` to `::setSoftWrapped` and `::isSoftWrapped`. I also renamed the config setting and command to match, but we've decided that wasn't a good idea.

This PR renames the config setting back to `editor.softWrap` and the command back to `editor:toggle-soft-wrap`.

Fixes #3531
",331,True,en,0
3535,1,2,11,Externals,Bengt,2014-09-15T15:44:06Z,21,1,1,1,"The `git checkout` step from #3098 got removed by some merge, so here it is again.
",83,True,en,0
3528,19,0,0,Internals,kevinsawicki,2014-09-12T20:45:47Z,48,19,6,0,"This adds the ability to build and upload a  `atom-amd64.deb` file to the [releases page](https://github.com/atom/atom/releases).

This will enable packages to setup CI on Linux where they do a `dpkg -i` on the file downloaded from https://github.com/atom/atom/releases/download/latest/atom-amd64.deb on Travis.
",312,True,en,0
3519,5,2,7,Internals,kevinsawicki,2014-09-11T23:22:07Z,10,2,3,0,"While profiling I noticed that `EditorComponent::onStylesheetsChanged` was called around **25 times**, as each theme stylesheet was loaded, taking a total **200-300 milliseconds**, when an editor was open at startup.

Now the component waits for the initial theme load to complete before measuring so it is only called once at startup and removes **200-300 millseconds** from startup time when an editor is open.

/cc @nathansobo and @benogle for :eyes: 
",455,True,en,0
3518,3,0,0,Internals,benogle,2014-09-11T21:21:34Z,10,27,1,0,"In an effort to strip down the EditorView, these will be removed. 

Nothing really seems to use these anyway: https://github.com/atom/api/blob/master/current-api.txt#L160-L168
",176,True,en,0
3517,1,8,0,Internals,smashwilson,2014-09-11T16:35:23Z,5,0,1,0,"When an `EditorView` becomes attached, if hardware acceleration is enabled, the call to `pollDOM` is a no-op because there's already a refresh pending. This can cause problems, because then the initial measurements don't happen and (for example) the lineHeight is left as null - it'll be set on the next rendering, but not before subscribers to `workspaceView.eachEditorView` are notified.

I just ran into this working on smashwilson/merge-conflicts#77.

I left the original `pollDOM` call in so that everything else that it does still happens if there's no refresh waiting. If the other stuff should _also_ happen on that first render, a better solution might be to add a `force` parameter to `pollDOM`, instead? Let me know what you think.
",743,True,en,0
3514,10,3,6,Internals,benogle,2014-09-11T20:45:26Z,117,46,11,0,"This removes all of them but one major one: https://github.com/atom/atom/blob/master/src/pane-view.coffee#L159-L160

I wasnt sure how we wanted to handle this, as pane items can be anything. Do we still want to support the path-changed event on random pane items? Do we want to enforce an `onDidChangeTitle` method? This is one case where string events are really nice.
",370,True,en,0
3508,1,1,0,Externals,envygeeks,2014-09-10T01:45:50Z,1,1,1,0,"/cc @kevinsawicki 
",19,True,pl,0
3507,21,5,18,Internals,benogle,2014-09-10T19:11:26Z,228,82,14,0,,0,False,en,0
3499,2,2,3,Externals,envygeeks,2014-09-10T01:31:22Z,9,0,1,1,,0,False,en,0
3495,10,15,0,Internals,zcbenz,2014-09-09T18:43:42Z,11,4,4,1,,0,False,en,0
3472,1,1,0,Externals,pinak,2014-09-08T15:34:52Z,1,0,1,2,"This adds Atom in open with menu in KDE (possibly other DE's) for text files therefore providing better integration.
",117,True,en,0
3470,10,2,0,Internals,kevinsawicki,2014-09-08T17:09:06Z,48,42,3,2,"Previously jQuery was used, but using the DOM APIs directly takes 1/3 of the time.

For me this dropped the time taken to loads all stylesheets from `60ms` to `20ms` which is synchronously done at startup.
",206,True,en,0
3469,23,4,7,Internals,nathansobo,2014-09-17T20:55:19Z,322,6,6,11,"/cc @benogle
## Tasks
- [x] Command dispatching
- [x] Assign `atom.commands` global
- [x] Test out some basic commands
- [x] List commands registered via `atom.commands` and `$::command` in the
    command palette
- [x] Document `atom.commands`
- We should wait to deprecate `$::command` until our overall view strategy is
  in place.
## Background

Currently, to register a command in Atom you are forced to use jQuery. When you call `::command` on a jQuery-wrapped DOM node, it registers a custom event listener based on the command name with `::on` and adds some metadata to the element with `::data`, which we read out later to display a list of available commands for the focused element in the command palette.

This approach has a couple major issues. First, it forces users to use our jQuery extension to register any command. Second, it forces users to get references to view instances when they could otherwise get by operating entirely on the model. If we're going to move away from requiring jQuery to build packages, we need a new approach for registering commands.
## Basics

Commands will be registered via a new global, `atom.commands`, and all events will be handled via _event delegation_ rather than listening directly on specific view instances. Here's a basic example where we listen for increase/decrease font size commands on the workspace.

``` coffee
disposable = atom.commands.add '.workspace',
  'window:increase-font-size': -> @getModel().increaseFontSize()
  'window:decrease-font-size': -> @getModel().decreaseFontSize()

# to remove these commands later...
disposable.dispose()
```

First comes the `.workspace` CSS selector, indicating we want to handle these commands when they bubble through the workspace element. Then comes a hash mapping command names to handlers. Each handler is invoked in the context of the DOM element that matches the selector.

Eventually these will be HTML 5 custom elements with domain-specific methods, but for now we extend the element with a `::getModel()` method so the workspace model can be accessed from the view. Jumping straight to the model will probably be the most common pattern, since we don't want to perform logic in the view.

To remove the added commands, just call `.dispose()` on the disposable that's returned from add.
## Bubbling Semantics

Command events begin at the event target and bubble upward. As the event bubbles through each node, event listeners associated with matching selectors are called in order of specificity. In the event of a specificity tie, the most recently added listeners are called first, just like in CSS. To cancel bubbling, call `.stopPropagation()` on the event as normal. You can also call `.stopImmediatePropagation()` to stop bubbling and also stop invoking additional listeners on the current element.
## Command Palette (In Progress)

The command registry has a `::findCommands` method, named to blend in with `::findKeyBindings` on the `KeymapManager`. You call it with an element to get a list of all commands that can be dispatched on that element.

``` coffee
atom.commands.findCommands(element: document.activeElement)
### =>
[
  {
    name: 'window:increase-font-size'
    displayName: 'Workspace: Increase Font Size'
    selector: '.workspace'
  },
  {
    name: 'window:decrease-font-size'
    displayName: 'Workspace: Decrease Font Size'
    selector: '.workspace'
  }
  ...
]
###
```
## Backward Compatibility

The command registry can peacefully coexist with commands registered via our `$::command` method so long as `::findCommands` includes commands registered via jQuery in addition to those registered via the new model. We'll deprecate `$::command` and eventually remove it.
## Event Handling Strategy

The command registry currently listen for events with _capture semantics_, meaning it gets the first crack at all custom events. I'm not sure this is the best approach because it could interfere with listeners that are registered directly on elements, but on the other hand, this is sort of the point. It seemed like it might be a good idea so we can guarantee that people can always invoke commands they see in the command palette. With this approach, the command registry is always the source of truth.
## Future Possibilities

One issue we encounter is that people want to refer to a command in multiple ways when typing in the command palette. This is discussed in atom/command-palette#11. We could allow richer metadata to be provided instead of just a callback as follows.

``` coffee
atom.commands.add '.workspace',
  'window:increase-font-size':
    listener: -> @getModel().increaseFontSize()
    displayName: ""Window: Make Fonts Bigger""
    aliases: [""window:embiggen-fonts"", ""window:i-cant-read-that!""]
```

Just an idea. Don't want to do it in this PR.
",4805,False,en,0
3468,3,3,0,Internals,izuzak,2014-09-08T13:21:46Z,4,1,1,2,"Closes https://github.com/atom/atom/issues/3463. 

This adds a line to explicitly state that `ctrl-P` is interpreted as `ctrl-shift-p`, so that user don't get trolled. 
Also, added links to relevant guides where users can learn more about keymaps and keybindings. Should be helpful.
",283,True,en,0
3459,6,0,0,Internals,benogle,2014-09-05T00:44:22Z,80,30,5,0,"This adds a new `copyActiveItem` option to the `Pane::split*` methods, and suggest the users use that instead of the editorView implementations. 
",146,True,en,0
3458,2,2,0,Internals,kevinsawicki,2014-09-05T16:14:41Z,14,3,2,0,"I had been noticing a flicker sometimes when reopening Atom with open editors, tracked it down to files that had injection selector matches since previously we weren't store injection selector grammars in the active list.

Show below is a GIF of the issue, I'm refreshing and you notice the flicker after it reopens, caused by the hyperlink on the first line causing a re-tokenizing.

![injection-flicker](https://cloud.githubusercontent.com/assets/671378/4158142/330378ae-3488-11e4-9f79-5cf9265d8d14.gif)
",506,True,en,0
3457,7,0,0,Internals,benogle,2014-09-04T22:42:28Z,85,63,3,0,"This deprecates all the methods that already had counterparts in Editor. There is more to do, but they will be separate units of work. 
",136,True,en,0
3456,59,5,13,Internals,nathansobo,2014-09-09T20:40:45Z,809,495,21,4,"- [x] Add event subscription methods
  - [x] :wrench: Editor
  - [x] Cursor
  - [x] Selection
  - [x] Decoration
  - [x] DisplayBuffer
  - [x] TokenizedBuffer
- [x] Deprecate `::on`
  - [x] Editor
  - [x] Cursor
  - [x] Selection
  - [x] Decoration
  - [x] DisplayBuffer
  - [x] TokenizedBuffer
- [x] Document new methods
### Notes
- We should drop events on editor that can be replaced by methods on `Cursor`, `Selection`, `Decoration`
- Don't forget to dispose emitter instances on destruction of the owner
",509,False,en,0
3455,1,1,0,Internals,izuzak,2014-09-04T20:02:51Z,0,1,1,0,"This is causing CI to fail currently: see https://janky.githubapp.com/1664307/output

cc @kevinsawicki @benogle 
",113,True,en,0
3454,4,0,0,Internals,nathansobo,2014-09-04T21:17:55Z,29,27,10,0,"This continues the program of replacing string-based `::on` with explicit methods such as `TextBuffer::onDidChange`. Most of the work is in https://github.com/atom/text-buffer/pull/27. This just upgrades to a version of `text-buffer` with those changes and removes all deprecated calls in core.
",295,True,en,0
3453,18,15,0,Internals,kevinsawicki,2014-09-08T16:32:48Z,107,33,6,3,"Taking a look at the browser process startup time.

This is the time between when atom-shell require's Atom's [main](https://github.com/atom/atom/blob/d8be03850bb39f2b8472261fb47c610bbdfb509c/src/browser/main.coffee#L1) file and the [first window is created](https://github.com/atom/atom/blob/d8be03850bb39f2b8472261fb47c610bbdfb509c/src/browser/main.coffee#L51).

This includes the time taken to parse the command line arguments, create the native windows, setup the crash reporter, setup the system menus, and start the auto updater.

This does not include the time take to reopen editors, show the tree view, or anything that happens inside the opened window, just everything between app launch and when the window is created.

I added a new benchmark that starts the app 10 times and averages the app startup time.
### Before

```
Startup Runs: 10
First run time: 180ms
Max time: 196ms
Min time: 173ms
Average time: 181ms
```
### After

```
Startup Runs: 10
First run time: 138ms
Max time: 138ms
Min time: 117ms
Average time: 121ms
```

This is on a Macbook Pro on OS X 10.8.5 with 2.6 Ghz Intel Core i7 processors and 16 GB of memory.

Note that doing a `new BrowserWindow()` which creates the native window takes roughly `40ms` on my machine so that would be the absolute minimum that we would get these times down to.
### Running the benchmark

I'd be curious what results other people see so if you want to post your before and after results do the following:
#### On Mac OS X
- Pull down this branch
- Do a `git checkout d7106a6b4` to checkout the commit before the changes were made
- Run `script/build`
- Run `benchmark/browser-process-startup.coffee` to see the _before_ results
- Do a `git checkout ks-lower-browser-process-startup-time` to checkout the latest commit
- Run `script/build` again
- Run `benchmark/browser-process-startup.coffee` to see the _after_ results
#### On Linux/Windows
- Pull down this branch
- Do a `git checkout fbeb9ec` to checkout the commit before the changes were made
- Run `script/build`
- Run `atom -f .` and look for an output line in the terminal that starts with `App load time:`
- Quit Atom
- Do a `git checkout ks-lower-browser-process-startup-time` to checkout the latest commit
- Run `script/build` again
- Run `atom -f .` again and look for an output line in the terminal that starts with `App load time:`

The two times will be the _before_ and _after_ results.
### What changed

Much of the time spent on my machine was doing `require`s of lots of files that weren't used until later on or possible never at all, but the requires were at the top of the files and so the first window wasn't being shown until all these requires were complete.

Many of these were moved to be required right before use in response to an event or request from a render process.
",2814,True,en,0
3447,27,9,3,Externals,paulcbetts,2014-09-24T22:50:30Z,82,2,11,20,"This PR kicks off the work we need to do in order to create an installer / update framework for Atom on Windows:
## TODO:
- [x] Get an installer building
- [x] Make sure we don't bork builds on Mac / Linux
- [x] Handlebars the NuSpec file to drop in the current version from package.json
- [x] Codesign the installer in CI builds
- [x] Make sure that the RcEdit hacking doesn't stomp the Squirrel-aware tag (needs atom/atom-shell#614)
",435,False,en,0
3446,9,0,0,Internals,benogle,2014-09-04T00:36:31Z,146,21,4,0,"Closes #3125
",13,True,en,0
3445,14,1,0,Internals,benogle,2014-09-03T23:07:42Z,490,471,14,0,"On `Editor`, we had 

``` coffee
::lineForScreenRow # -> Private; returns a TokenizedLine
::lineForBufferRow # -> returns a String
::lineLengthForBufferRow # -> returns an int
```

Deprecated all those and now we have

``` coffee
::tokenizedLineForScreenRow # -> Private; returns a TokenizedLine
::lineTextForBufferRow # -> returns a String
::lineTextForScreenRow # -> returns a String
```

The length can be had via `lineTextFor*Row(row).length`

It also renames several methods in DisplayBuffer and TokenizedBuffer for clarity (eg. TokenizedBuffer had a set of methods named like `lineForScreenRow` even though it took a buffer row as a param). Those entire classes are not public, so there are no deprecations on those methods.

The most interesting stuff is in `editor.coffee` if you want to look / feedback.
",813,True,en,0
3443,2,1,0,Internals,kevinsawicki,2014-09-04T16:20:39Z,2,2,1,0,"This includes a fix on Windows so that the library that scores matches displayed in the fuzzy finder (and elsewhere) uses the right native path separator so it should now display the same results on all platforms.

This also includes many other fuzzy scoring fixes that have come in the last couple months: https://github.com/atom/fuzzaldrin/compare/v1.1.0...v2.1.0

The results displayed in the fuzzy finder may have changed due to fixes but hopefully all the changes are an improvement and the best matches are still shown first.

If anyone has a chance to try this out (on Windows, and other platforms), that would be great.

Please comment here if you see any weird ordering or slowness when using the fuzzy finder, command palette, etc.
",742,True,en,0
3440,1,0,0,Internals,nathansobo,2014-09-03T15:24:05Z,14,7,4,0,"This improves the behavior of #3433 by allowing selections to be dragged adjacent to other selections in the gutter.
",117,True,en,0
3433,7,17,4,Internals,izuzak,2014-09-04T19:35:31Z,91,10,4,3,"Closes https://github.com/atom/atom/issues/982.

This adds support for:
1. selecting entire rows by clicking the gutter. Previously, the whole row was selected only when the gutter was shift-clicked. See 8c36d26 for this change.
2. selecting multiple disjoint rows by meta-clicking (and dragging) over the gutter. Previously, this ability was not available. See 7f14965 for this change. 

:tv: time:

![clicky](https://cloud.githubusercontent.com/assets/38924/4110485/1017d520-31f3-11e4-8b6b-59670c5f1a77.gif)

cc @nathansobo @benogle for :microscope: :eyes:
",559,True,en,0
3420,29,3,0,Internals,benogle,2014-09-02T23:41:42Z,759,556,10,5,"This is the implementation of https://github.com/atom/api/pull/7

This will result in a pretty big slew of deprecations in external packages. I want to get this out there and see how people deal with it. 

Feedback if you wanna.
",229,True,en,0
3418,65,1,2,Internals,nathansobo,2014-09-04T13:47:55Z,1069,431,14,6,"In #3378 I discussed the idea of integrating RxJS observables for our event system. But in the interest of getting to the API freeze faster, I think we should avoid pulling a complex framework into core at this time. This PR focuses on simplifying and clarifying the events API without introducing observables, but the proposed changes are compatible with adding RxJS observables in the future.

The goal of this PR is to reform all the event APIs to use methods instead of strings for all the objects involved in everything in workspace.
## Tasks
- [x] Add New APIs
  - [x] Workspace
    - [x] Pane
    - [x] PaneAxis
    - [x] PaneContainer
- [x] Document New APIs
- [x] Deprecate Old APIs
  - [x] Deprecate theorist-dependent code paths
  - [x] Deprecate direct calls to `::on`
  - [x] Deprecate supplanted methods
## API Conventions
- All event subscriptions should occur through explicit methods rather than through strings passed to `::on`.
- Event subscription methods take callbacks as their final argument. In the future, we can add the ability to return an observable when no callback is provided.
- Event subscription methods return _disposables_. When you call `.dispose()` on the returned disposable the subscription is cancelled.
- Event callbacks are always invoked with a single object. If multiple pieces of information need to be passed, the object can be a hash with named entries.
- Event subscription methods conform to the following naming conventions:
  - Discrete events are named with `onDid[Verb][Noun]` or `onWill[Verb][Noun]`:
    - `onDidActivate`
    - `onDidAddItem`
    - `onWillDestroyItem`
  - Properties that change can have two kinds of methods:
    - Methods that invoke the callback the next time the property _changes_ take the form `onDidChange[PropertyName]`:
      - `onDidChangeActiveItem`
    - Methods that invoke the callback immediately with the current value and also whenever it changes take the form `observe[PropertyName]`:
      - `observeActiveItem`
  - Collections can be observed with `observe[CollectionName]`, which will invoke the callback with all current and future elements:
    - `observePanes`
## Usage Guidelines

I've created a simple npm called [event-kit](https://github.com/atom/event-kit). The goal is to provide a few building blocks for implementing and consuming evented APIs while maintaining maximal simplicity.
### Implementing Evented APIs

We want to move away from mixins and toward composition. Toward that end, `event-kit` exports a simple `Emitter` object that can be used to streamline evented APIs. Rather than mixing it in, you construct an `Emitter` instance and use it internally. Here's a sample of how you use it:

``` coffee
{Emitter} = require 'event-kit'

class Pane
  constructor: ->
    # implementation...
    @emitter = new Emitter

  onDidChangeActiveItem: (fn) ->
    @emitter.on 'did-change-active-item', fn

  setActiveItem: (activeItem) ->
    unless activeItem is @activeItem
      @activeItem = activeItem
      @emitter.emit 'did-change-active-item', activeItem
    @activeItem
```

This is similar to the existing emitter from emissary, but it's maximally simple and omits several features such as namespaces and support for multiple event arguments. The `::on` method also returns `Disposable` instances which unsubscribe when `.dispose()` is called on them.

Using emitters via _instances_ instead of mixins ensures users won't call `::on` directly and gives us leverage for deprecating existing direct usages of `::on`.

If needed, `Disposable` can be used directly. You build a disposable with a function that is called when the disposable is disposed. This intentionally follows the same API as RxJS.

``` coffee
{Disposable} = require 'event-kit'

disposable = new Disposable(=> @cleanUp())
```
### Consuming Evented APIs

We want to encourage users to dispose of subscriptions when they are done with them, and we now think the best way to do this is to make it _explicit_. So now rather than using the `Subscriber` mixin, we will encourage users to build their own `CompositeDisposable` instance and add subscriptions to it.

``` coffee
{CompositeDisposable} = require 'event-kit'

class TabBar
  constructor: (@pane) ->
    @subscriptions = new CompositeDisposable
    @subscriptions.add @pane.observeActiveItem -> # ...
    @subscriptions.add @pane.onDidAddItem -> # ...
    @subscriptions.add @pane.onDidRemoveItem -> # ...

  destroyed: ->
    @subscriptions.dispose()
```

Users will need to remember to dispose of the subscriptions, but we think that making it more explicit will help clarify what is going on in examples and increase the likelihood that package authors clean up.
",4699,True,en,0
3409,1,2,0,Externals,syndbg,2014-08-29T15:32:07Z,2,1,1,1,"Moved `application:open-dev` to _ctrl-alt-o_.

Now, should `window:toggle-dev-tools` remain on _ctrl-shift-i_ or be moved to _ctrl-alt-i_, which would make more sense if other dev keybinds are combined with alt.

![dev_tools](https://cloud.githubusercontent.com/assets/6031925/4074658/1bc1b2bc-2ea4-11e4-8c42-7f7b7f0db67e.png)
Note: in the screenshot, Atom isn't prebuilded yet.
",379,True,en,0
3396,1,3,0,Externals,syndbg,2014-08-27T17:17:25Z,1,0,1,0,"`'ctrl-,': 'application:show-settings'` exists in `win32.cson` and `darwin32.cson`, it makes sense to exist in `linux.cson` too.

Question is how are the menu bars updated? 

It updates fine if the above keybind is in the user's keymap.cson, but it doesn't update if it's in linux.cson. (done after rebuild/reinstall) 

**Unrelated to pull request**:

Suggestion: `ctrl-alt-o` should be binded to `application:open-folder`. It's useful and many people will benefit from having this by default.

Discussion: however, _ctrl-alt_ doesn't make the most sense, _ctrl-shift_ does. As we (kind of) want to open multiple files (implicitly a folder) and that's usually what _shift_ key is related to. However, `'ctrl-shift-o': 'application:open-dev'` and `'ctrl-shift-i': 'window:toggle-dev-tools'` exist already. 

If we really want to use `ctrl-shift-o` as open folder, it wouldn't make the most sense to have `ctrl-shift-i` as dev tools. We must change both _open-dev_ and _toggle-dev-tools_ to be combined with _alt_ instead of _shift_. What do you think of this?
",1059,True,en,0
3394,4,6,5,Internals,izuzak,2014-08-28T18:41:21Z,45,3,6,1,"Closes https://github.com/atom/atom/issues/1638

This change allows built-in context menu commands to be defined in Atom's menu config files (096255f) and adds the core copy/cut/paste commands to the context menu (776a8e9).

The built-in context menu commands are defined in the same way as they are in packages -- there's a `context-menu` key, and commands scoped to a selector. 

Here's the menu in action:

![copy](https://cloud.githubusercontent.com/assets/38924/4059313/487fc4fe-2de3-11e4-8a47-699219c332ab.gif)

cc @kevinsawicki for :eyes: 
",547,True,en,0
3389,3,2,0,Internals,kevinsawicki,2014-08-27T01:38:34Z,19,15,2,0,"Get `script/grunt test` running on Linux.

Closes #2273 
Refs #3312
",68,True,en,0
3388,1,1,0,Internals,benogle,2014-08-26T18:39:51Z,0,473,3,0,"With #3132 I didnt remove all the related editor views: cursor, selection, and gutter views.
",93,True,en,0
3376,1,0,0,Internals,benogle,2014-08-25T18:55:12Z,17,1,2,0,"This caused problems in the case of find-and-replace:select-all with multiple editors into the same file. #3364
- a marker is created on the TextBuffer capturing the selection
- DisplayBuffer:create-marker is fired from the first DisplayBuffer. The marker is turned into a selection which is merged into the current selection, deleting the marker that was created.
- DisplayBuffer::handleBufferMarkerCreated is called on the second DisplayBuffer. The marker has been destroyed at this point, so it emits DisplayBuffer:create-marker with undefined. 
- ERROR

Closes #3364
",571,False,en,0
3371,1,1,0,Internals,izuzak,2014-08-25T17:44:11Z,7,0,2,1,"Fixes https://github.com/atom/atom/issues/3308.

Ctrl+click on OSX brings up the context menu. In that case, handling the click event deselects any selection, and that shouldn't happen.

cc @nathansobo @benogle I don't have any better ideas about fixing these kinds of issues. If you have suggestions -- let me know.
",317,True,en,0
3369,3,2,1,Externals,khakionion,2014-08-29T16:34:01Z,3,3,1,5,"Check for the presence of a space, instead of the absence of a tab.
This ensures that Soft Tabs will not be activated on a file that (for
example) starts with a BOM or something, but is otherwise full of hard
tabs.

This issue is discussed on the Atom discussion board at:
https://discuss.atom.io/t/tabs-still-dont-work-package-related
",336,False,en,0
3355,11,36,0,Internals,kevinsawicki,2014-08-25T16:39:11Z,77,16,5,2,"## Summary

Instead of opening file paths in a new window based on the file's parent directory, open file paths in the current window.

Also open folders in the current window when the current window doesn't already have a project path. This will affect untitled windows that were launched from the dock or by pressing `cmd-shift-N`.

You can still always force a new window from the command line by running `atom -n package.json` or `atom --new-window package.json`.

Multi-folder project support is still planned though via #770.
## File behavior changes
### Files opened using the `atom` command open in the currently focused window

![file-cli](https://cloud.githubusercontent.com/assets/671378/4016849/7fd61c08-2a39-11e4-830a-1feab5b7161c.gif)
### Dropping a file onto a window opens it in that window

![file-drop](https://cloud.githubusercontent.com/assets/671378/4016139/5a16e7de-2a31-11e4-8dfb-151f7b8c7dc1.gif)
### Selecting a file from the path chooser (cmd-o) opens that path in the current window

![file-open](https://cloud.githubusercontent.com/assets/671378/4016161/a415b130-2a31-11e4-9b30-34b494dda2e0.gif)
### Files dropped on the Mac OS X dock icon will open in the last focused window

![file-dock](https://cloud.githubusercontent.com/assets/671378/4016825/3a0815d2-2a39-11e4-939e-be6a3bd86e46.gif)
## Folder behavior changes
### Folders opened using the `atom` command will open in the currently focused window if it doesn't already have a project path

![folder-cli](https://cloud.githubusercontent.com/assets/671378/4016877/e013f6e4-2a39-11e4-806a-8bc004a0a567.gif)
### Dropping a folder onto an untitled window sets that window's project path to the dropped folder's path

![folder-drop](https://cloud.githubusercontent.com/assets/671378/4016898/2dbc2c36-2a3a-11e4-9000-464e11963ba6.gif)
### Selecting a folder from the path chooser (cmd-o) opens that folder in the current window if it doesn't already have a project path

![folder-open](https://cloud.githubusercontent.com/assets/671378/4016912/514a7522-2a3a-11e4-9197-38bdaf71fc5f.gif)

Closes #1722
",2077,True,en,0
3353,4,2,0,Internals,nathansobo,2014-08-22T18:07:42Z,89,66,6,0,"This is attempting to bugs like the following:

```
src/lines-component.js:426:35 [object Object].module.exports.React.createClass.measureCharactersInLine
src/display-buffer.js:439:7 DisplayBuffer.module.exports.DisplayBuffer.batchCharacterMeasurement
src/editor.js:2145:33 Editor.module.exports.Editor.batchCharacterMeasurement
src/lines-component.js:392:21 [object Object].module.exports.React.createClass.measureCharactersInNewLines
src/lines-component.js:385:19 [object Object].module.exports.React.createClass.remeasureCharacterWidths
src/editor-component.js:1446:32 [object Object].module.exports.React.createClass.remeasureCharacterWidths
src/editor-component.js:290:14 [object Object].module.exports.React.createClass.performInitialMeasurement
src/editor-component.js:1354:16 [object Object].module.exports.React.createClass.pollDOM
src/react-editor-view.js:267:22 ReactEditorView.module.exports.ReactEditorView.pollComponentDOM
src/react-editor-view.js:257:19 ReactEditorView.module.exports.ReactEditorView.show
src/pane-view.js:301:14 PaneView.module.exports.PaneView.onActiveItemChanged
src/pane.js:172:32 Pane.module.exports.Pane.activateItem
```

It seems like in some cases we're remeasuring character widths for lines that aren't on the screen yet.
- Simplify scrollbar refresh and measurement by using imperative DOM
  manipulation instead of React to hide/show scrollbars.
- Rename `::performInitialMeasurement` to `::becameVisible`
- Break `::checkForVisibilityChange` out of `::pollDOM` and use it in
  to check for the element becoming visible in `componentWillUpdate`.
- Don't rely on stored visibility state anywhere. Always check again.
  This could potentially be cached for an update cycle but being wrong
  about this is disastrous so I'm being conservative.
",1785,True,en,0
3350,1,0,0,Internals,benogle,2014-08-21T19:01:53Z,27,0,2,0,"Fixes #3097
",12,True,en,0
3349,1,0,0,Externals,aaronshaf,2014-08-21T16:11:00Z,1,1,1,0,,0,False,en,0
3338,1,6,0,Internals,nathansobo,2014-09-15T18:15:59Z,1,1,1,27,"Considering that the entire Atom core team has ctrl-a bound to move to the first character and it's also the the default behavior of Sublime, this seems like a more sensible and useful default option even though it deviates from text editing norms on OS X.
",257,True,en,0
3315,1,1,0,Externals,dmnd,2014-08-18T14:07:07Z,1,1,1,0,"I got the following error when running `checkout-head-revision`:

```
Uncaught TypeError: undefined is not a function /Applications/Atom.app/Contents/Resources/app/src/editor-component.js:804
addCommandListeners.editor:checkout-head-revision /Applications/Atom.app/Contents/Resources/app/src/editor-component.js:804
(anonymous function) /Applications/Atom.app/Contents/Resources/app/src/editor-component.js:840
jQuery.event.dispatch /Applications/Atom.app/Contents/Resources/app/node_modules/space-pen/vendor/jquery.js:4676
elemData.handle /Applications/Atom.app/Contents/Resources/app/node_modules/space-pen/vendor/jquery.js:4360
module.exports.KeymapManager.dispatchCommandEvent /Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:400
module.exports.KeymapManager.handleKeyboardEvent /Applications/Atom.app/Contents/Resources/app/node_modules/atom-keymap/lib/keymap-manager.js:181
module.exports.WindowEventHandler.onKeydown
```

It looks like it was caused by a bad merge conflict resolution in 0eaec57.

Test Plan:

Built new Atom and pressed `cmd-alt-z` and didn't get an error.

Looked at a side-by-side diff to check for any other merge issues:

```
git difftool -t opendiff 32e59ce..32e59ce^ src/editor-component.coffee
```
",1273,True,en,0
3295,4,10,2,Externals,dmnd,2014-08-16T00:18:34Z,9,9,5,0,"coffeelint.json had some rules set to ignore, but since #3116 was merged there
are no violations of these rules in the code anymore. Tighten up the rules to
prevent those kinds of errors from creeping back in.

Test Plan:

Lint executes without finding any errors

```
$ ./script/grunt coffeelint
Running ""coffeelint:src"" (coffeelint) task
>> 80 files lint free.

Running ""coffeelint:build"" (coffeelint) task
>> 23 files lint free.

Running ""coffeelint:test"" (coffeelint) task
>> 40 files lint free.
Done, without errors.
```
",526,False,en,0
3289,1,1,0,Externals,abahgat,2014-08-19T16:03:15Z,5,4,1,3,"`dpkg` will fail or create packages that are not runnable if the default permissions for new files are somewhat restrictive (e.g. `umask` is `0027`).
",150,True,en,0
3286,1,0,0,Internals,zcbenz,2014-08-15T14:18:49Z,1,1,1,0,"Fixes the crash under Linux.
",29,True,en,0
3276,7,1,0,Internals,kevinsawicki,2014-08-14T22:55:53Z,12,5,1,0,"Restore the maximized state of the window on Windows and Linux, Mac OS X does not have a ""maximized"" state, just size and position that extends corner to corner.

Closes #2936
Closes #2951
",189,True,en,0
3264,9,2,5,Internals,kevinsawicki,2014-08-14T02:12:23Z,57,80,7,0,"Checkout head logic was incorrectly added to the Editor class instead of the Git class when the feature was originally added years ago.

This moves that logic into the Git class where it belongs.
",196,True,en,0
3261,2,0,0,Internals,benogle,2014-08-15T18:16:28Z,2,0,2,1,"All the bugs seems to have been fixed with these guys. Let's use them.
",71,True,en,0
3248,1,0,0,Internals,zcbenz,2014-08-13T12:25:03Z,1,1,1,0,"Fixes the crash of auto updater.
",33,True,en,0
3244,1,0,0,Internals,benogle,2014-08-13T00:08:22Z,8,2,1,0,"This is the real fix for #3075 
",32,True,en,0
3243,1,1,0,Externals,kaiserfro,2014-08-12T23:35:54Z,1,1,1,0,"The getScrollWidth function in editor.coffee has extra, unnecessary function parameters.
",89,True,en,0
3241,9,0,4,Internals,benogle,2014-08-12T23:03:10Z,73,9,4,0,"autocomplete and go-to-line both preempt the `textInput` event to prevent character insertion. 

This pull provides the editor with a `will-insert-text` event that passes a `cancel()` function as a param. The consumer can call `cancel()` when it wants to prevent the insertion. No more preempt!

This was originally in #3132, but was pulled out as it is necessary for proper mini-editor behavior. 

See atom/autocomplete#40 and atom/go-to-line#9 for package fixes.

Refs #3075
",477,True,en,0
3240,2,8,0,Internals,kevinsawicki,2014-08-12T22:02:15Z,1,6,5,0,"This was confusing to people and a burden to package authors to have number pad keys behave differently than their equivalent key elsewhere on the keyboard.

See https://github.com/atom/atom-keymap/issues/42 for more details.

Closes #2527
Closes #2921
Closes #2972
Closes #3232
",279,True,en,0
3230,8,0,0,Internals,kevinsawicki,2014-08-12T23:30:31Z,42,4,1,0,"Kills all the child processes of the buffered process on Windows.

Closes #3209
",80,True,en,0
3229,67,5,0,Internals,benogle,2014-08-27T18:33:05Z,2129,1810,30,15,"This moves away from biscotto and to generation of API doc json data.

Metadata JSON is generated by [donna](https://github.com/atom/donna), and then digested into something for easy html generation by [tello](https://github.com/atom/tello). The resulting JSON is committed here. I am not sure what exactly we want to do (likely just commit the tello.json).

This cannot be merged until we are ready to move away from the biscotto docs. This work has been started in https://github.com/github/atom.io/issues/638
### The Plan

I want to get the current API doc content out with a new docs site on atom.io. This should make the API changes much easier, as we can add things to the new docs site along with the API docs (eg. marking things essential + extended can all show up as public for a time). Here's how I think we should do it
### TODO
- [x] Convert all comments in core + packages to [atomdoc](https://github.com/atom/atomdoc) in this PR
  - [x] Atom
  - [x] BufferedNodeProcess
  - [x] BufferedProcess
  - [x] Clipboard
  - [x] Config
  - [x] ContextMenuManager
  - [x] Cursor
  - [x] Decoration
  - [x] DeserializerManager
  - [x] Directory
  - [x] Editor
  - [x] EditorView
  - [x] File
  - [x] Git
  - [x] Grammar
  - [x] GrammarRegistry
  - [x] KeymapManager
  - [x] Marker @benogle in text-buffer bo-atom-doc branch
  - [x] MenuManager
  - [x] PackageManager
  - [x] Pane
  - [x] PaneView
  - [x] Point
  - [x] Project
  - [x] Range
  - [x] ScrollView
  - [x] SelectListView
  - [x] Selection
  - [x] Syntax
  - [x] Task
  - [x] TextBuffer
  - [x] ThemeManager
  - [x] View
  - [x] Workspace
  - [x] WorkspaceView
- [x] Add generated `api.json` as a release asset @kevinsawicki
- [x] All external packages need newest grunt-atomdoc
- [ ] Generate docs from `api.json` on atom.io
- [x] Visual Changes
  - [x] Inline args
  - [x] :: instead of @, . for a class method, and gray it out maybe?
  - [x] move examples to be part of the description
  - [x] methods can have examples
  - [x] jump to sections
  - [x] Delineate sections a bit more / strengthen difference between categories
  - [x] just display the description, because the description will always contain the
     summary, or remove summary from description
  - [x] args can have children, e.g. callbacks that have arguments of their own
  - [x] The link to the class file should just use an icon
",2368,True,en,0
3223,5,0,0,Internals,kevinsawicki,2014-08-12T17:22:03Z,21,17,4,0,"The window `unload` event is now async in Chrome 36, see #3144 for more details, so saving needs to be done during a `beforeunload` to ensure that on window reload the new render process is using the state saved from the previous render process.

This splits unload into two steps, the serializing/saving is done in a `beforeunload` while the workspace view and project are destroyed in the `unload` handler.

Fixes #3144
",422,True,en,0
3219,1,0,0,Externals,wernight,2014-08-11T18:06:33Z,14,13,1,0,"Clarify the build steps. The most important is that initialy ""Create ..."" and ""Install ..."" could be interpreted as ""(User should) create/install ..."" while it should mean ""(To) create/install ... (do)"".
",204,True,en,0
3218,3,3,2,Externals,dmnd,2014-08-11T23:41:42Z,16,7,3,0,"Depends on atom/grunt-coffeelint#2

The motivation is for this is to allow `coffeelint` config to be shared by
`script/grunt coffeelint`, global `coffeelint` and inline linting via
`AtomLinter`.

Test Plan:

Made some deliberate lint errors then ran `script/grunt coffeelint` and
verified the output looked the same with and without this change.
",346,True,en,0
3208,1,4,2,Externals,luca-moser,2014-08-11T21:45:08Z,4,1,1,2,"Fixes issue https://github.com/atom/atom/issues/3200 by putting quotes on the 'command' var only if it contains white space. This allows command paths with white space to still be executed but at the same time allows also commands like 'grunt' to work by not putting unnecessary quotes around the command.

Signed-off-by: Luca Moser moser.luca@gmail.com
",354,True,en,0
3206,15,0,5,Internals,nathansobo,2014-08-13T22:59:11Z,289,113,17,4,"- [x] Get cursor position working correctly
- [x] Fix specs
- [x] Fix leading/trailing whitespace styling
- [x] Handle end of line invisibles in the model as well for consistency
- [x] Fix `editor:move-to-first-character-of-line`
- [x] Disable invisibles in mini editors

Fixes #3188
Fixes #2785 
",297,False,en,0
3196,4,3,0,Internals,zcbenz,2014-08-11T13:24:15Z,1,1,1,3,"In atom-shell I have added a new `auto-hide-menu-bar` option for `BrowserWindow`, which hides the menu bar on Windows and Linux unless <kbd>Alt</kbd> is pressed.

I activated this option in this PR, but I'm not sure whether it should be default. /cc @kevinsawicki @nathansobo 
",277,True,en,0
3186,2,3,2,Externals,nshtg,2014-08-11T21:51:14Z,17,2,3,6,"Closes #3173.
",14,True,en,0
3185,1,1,0,Externals,sryze,2014-08-05T17:17:24Z,13,0,1,0,,0,False,en,0
3171,4,7,5,Externals,dmnd,2014-08-14T00:41:57Z,26,7,2,10,"![image](http://i.imgur.com/0WCzYA7.gif)

Fixes #1891.

Test Plan:
- Opened Atom window in directory, verified directory icon shows up
- Opened a file and verified icon changed
- Right clicked icon, verified menu appears
- Drag file to terminal and it pastes the file path (yay)
- Opened a new Atom window and opened some files in that to make sure that
  it didn't change the original window

I didn't add any specs for this - advice welcome here. I also haven't tested
on Windows or Linux but it looks like `setRepresentedFilename` is a noop on
those platforms.
",564,True,en,0
3169,3,11,0,Internals,lee-dohm,2014-08-13T22:24:06Z,39,2,3,10,"There have been a few reports of files mysteriously going back to the last version in the tree. My theory is that it is because of people fat-fingering the Undo command because the default keyboard mapping is too similar. This will at least prevent most accidental data loss.

Fixes atom/atom#3168
",298,True,en,0
3164,1,1,0,Externals,Bengt,2014-08-04T17:39:12Z,7,7,1,1,,0,False,en,0
3146,4,0,0,Internals,nathansobo,2014-08-02T16:21:51Z,14,8,3,1,"This PR combines a few small optimizations I found. It saves 1-2 ms per keystroke by:
- Avoiding invoking React's synthetic event handler for `keydown` and `textInput` events.
- Allowing `Emitter::emit` to be optimized by v8 by removing `args...` from the common path.
- Using raw DOM APIs instead of jQuery to receive keydown events
- Avoiding some temp objects in `atom-keymap`'s `keystrokeForKeyboardEvent` method.
",418,False,en,0
3139,1,4,0,Externals,nshtg,2014-07-31T15:32:58Z,4,3,1,0,"Trying to update a module is quite a pain since you have to actually update the version before you can even see if you broke anything since atom will refuse to load the plugin.

I had to search quite a bit until I found the storage cache (since it's not under ~/.atom). I think it's okay if the load time in dev-mode is a little bit higher if we always check the native modules.
",379,True,en,0
3132,21,1,0,Internals,benogle,2014-08-25T21:59:30Z,232,4803,11,26,"Remove the old editor-view, and its specs

Closes #3040 
Fixes atom/find-and-replace#146
",89,True,en,0
3121,5,0,0,Internals,benogle,2014-07-29T20:39:49Z,10,7,3,0,"Makes the react mini editors behave just like they did before.
",63,True,en,0
3120,1,0,0,Internals,kevinsawicki,2014-07-31T15:32:53Z,0,3,3,1,"Do not merge until https://github.com/atom/atom-shell/pull/530 is merged and released.
",87,True,en,0
3116,2,18,4,Externals,nshtg,2014-08-15T20:52:15Z,151,151,13,17,"**324 warnings in 42 files** (coffeelint) have been fixed.

Mostly just unnecessary double quotes, unnecessary fat arrows, miss-spaced `->` and empty functions (`-> return`). I have not been able to run the specs on my setup, so please feel free to do so on your own (in case I broke something).

Greets
",304,True,en,0
3112,1,1,0,Internals,zcbenz,2014-07-29T06:44:34Z,1,1,1,0,,0,False,en,0
3106,4,1,3,Internals,nathansobo,2014-07-29T03:08:51Z,103,43,5,0,"/cc @benogle 

Previously, editors always assigned their font styles inline based on the config settings. We then had some mini-editor-specific styles for the line height and opted out of setting the line height inline for mini editors only. This was kind of a confusing mess.

This PR updates the editors to behave just like ordinary HTML elements, using whatever the computed font styles are on the root editor element as the basis of our rendering decisions. The setting of the font size, font family, and line height is now moved to a global stylesheet that is managed by the workspace view. This will allow us to style mini editors (or any other editor for that matter) in a manner specific to its context with normal CSS.

This sets us up for the last step before switching to React-based mini editors, which is @benogle fixing the styling in key locations where mini editors are used.
",892,True,en,0
3104,1,1,0,Externals,dmnd,2014-07-29T03:02:11Z,1,1,1,1,"Fixes #3099.

React development mode has a lot of useful warnings and exceptions. These don't
show up in production mode. This change puts React into dev mode when Atom is
run via `atom --dev`.
",194,True,en,0
3102,1,5,0,Externals,dmnd,2014-07-29T21:43:53Z,2,0,1,2,"Fixes #3101 and works around facebook/react#1939.

This is needed for packages to use React until that React bug is fixed. If packages bundle their own copy of React, it will generate `reactid`s that conflict with core editor components. This breaks events.
",258,True,en,0
3098,1,2,3,Externals,Bengt,2014-07-28T23:51:10Z,1,0,1,2,"Add step for checking out the latest release by git tag.
",57,True,en,0
3096,1,1,0,Externals,marcbachmann,2014-07-28T15:51:18Z,0,4,1,2,"I don't think that this was the desired behaviour.
I do not know if that caused a bug.
",87,False,en,0
3077,4,0,1,Internals,nathansobo,2014-07-25T00:37:54Z,63,13,4,0,"Fixes #3075
",12,True,en,0
3071,3,0,0,Internals,nathansobo,2014-07-24T21:36:38Z,39,28,4,0,"This PR fixes some issues related to using the React editor in select lists. We're not quite ready to switch over yet, because we still need to address some styling issues related to the React editor's dimensions when used as a mini editor, since this PR removes some of the previous explicit styling, which was interfering with measurement.
",342,True,en,0
3062,1,3,0,Externals,ehuss,2014-07-28T23:44:06Z,7,1,1,4,"The sourceURL needs to be a URL, not a file path.
",50,True,en,0
3049,1,1,0,Externals,dsandstrom,2014-07-23T17:08:02Z,2,0,2,0,"What she said.
",15,True,en,0
3044,7,3,4,Internals,benogle,2014-07-23T23:35:02Z,26,43,4,1,"Handles toggling of `editor.showLineNumbers` as well.

I moved the `gutterWidth` into the `EditorComponent` state as react takes care of forcing updates when the state changes.

Fixes #3039
",190,True,en,0
3042,1,1,0,Externals,kube,2014-07-22T21:46:09Z,1,0,1,0,,0,False,en,0
3038,4,1,0,Internals,kevinsawicki,2014-07-22T18:19:48Z,4,1,2,0,"Compliments the base16-tomorrow-dark-theme

Shoutout to @dgraham for making this happen.
",89,True,en,0
3032,62,23,0,Internals,zcbenz,2014-07-28T21:52:34Z,364,280,17,6,"This PR upgrades atom-shell to 0.14 which is based on Chrome35, and also updates modules to make them compilable with node v0.11.13.

All node modules and atom packages that rely on native modules had been bumped a major version to avoid version conflicts before this PR gets merged. 
",285,True,en,0
3031,10,0,1,Internals,kevinsawicki,2014-07-22T00:19:10Z,25,27,4,0,"Previously running `sudo script/grunt install` followed by `script/grunt mkdeb` would result in an error since the file created at `resources/linux/Atom.desktop` would be owned by root.

Now the control and desktop files are never written to the source tree and instead always written to the build folder and copied over.

Refs #2129
",334,True,en,0
3022,3,0,0,Externals,batjko,2014-07-21T17:58:54Z,15,5,1,0,"Just a few suggested changes to reflect experiences over a few months of building on several Windows machines.
- The Posix tools comment doesn't seem to be applicable (anymore)? 
- Added further instructions when using pre-installed Git.
- Added the frequent issue of first-time build failures (random `node-gyp` errors), which don't reoccur on second try.
- Added a few extra words on opening a new issue, to clarify that appropriate details should be provided, if the issue hasn't been reported before.

Feel free to amend or suggest further changes.
",553,False,en,0
3021,1,2,0,Externals,dmnd,2014-07-21T15:51:49Z,1,1,1,0,"destoryed -> destroyed
",23,True,fr,0
3014,3,0,4,Externals,Frozenfire92,2014-07-20T18:00:13Z,5,1,1,1,,0,False,en,0
3006,1,0,0,Internals,nathansobo,2014-07-18T01:17:00Z,1,1,1,0,"Closes atom/vim-mode#348. See that issue for more explanation.
",63,True,en,0
2996,7,11,4,Externals,thomasjo,2014-08-25T17:14:46Z,24,0,3,39,"**NOTE: This pull request is still work in progress. I just wanted to open it early to keep my intent and progress public, and discoverable.**

The sole purpose of this pull request is to add grammar scope information to `EditorView` instances, so that e.g. editor key bindings can trigger based on grammar. Useful if you want to invoke different build or formatting commands in various packages, for different types of grammars.

Right now I'm solving this by appending CSS classes to the view, but I'm leaning towards adding a `data-scope` attribute instead, to prevent pollution and potential conflicts that might cause all manner of mayhem.
",645,True,en,0
2994,1,1,0,Externals,jordanbtucker,2014-07-21T16:13:59Z,2,0,1,4,"fixes issue #2989
",18,True,en,0
2992,3,1,0,Externals,nshtg,2014-07-20T18:01:02Z,17,16,1,4,"Tested on a fresh install of `3.15.5-2-ARCH x86_64`.
",53,True,en,0
2982,31,1,0,Internals,kevinsawicki,2014-07-23T17:27:29Z,93,227,26,8,"After the Windows release, there were several comments/tweets about how many files are in the Atom app distro and it taking awhile to unzip.

This PR takes a look at what files are currently included and removes files that aren't actually needed to run Atom. The result being a smaller download and a faster install.
### Before

Version 0.115.0 on Mac OS X: **2,535 directories, 8,388 files**
### After

| File Type | File Count |
| :-- | --: |
| test | 1250 |
| example | 250 |
| .npmignore | 240 |
| .travis.yml | 150 |
| .h | 150 |
| build | 150 |
| default_app | 65 |
| benchmark | 50 |
| .cc | 40 |
| unused fixtures | 15 |

This PR on Mac OS X: **1,916 directories, 6,011 files**
",686,True,en,1
2977,1,1,0,Internals,izuzak,2014-07-15T22:22:37Z,15,4,3,0,"Fixes #2847 

This allows multiple separators in context menus by interpreting all objects with the value `-` as separators, rather than just objects which have `-` both as the key and the value. 

cc @kevinsawicki 
",216,True,en,0
2968,3,0,0,Internals,kevinsawicki,2014-07-14T15:03:19Z,8,2,2,0,"This seems to be required since wrapping the common `/root,` and `/select,` arguments in quotes causes them to not be interpreted correctly.

Refs atom/tree-view#180
",166,True,en,0
2955,24,1,0,Internals,nathansobo,2014-07-21T21:44:17Z,529,336,12,7,"This is basically working, but the biggest remaining obstacle is determining when React-mini-editors are hidden in a comprehensive way.
- [x] Don't show wrap guide in mini editors
- [x] Don't capture mouse wheel events in mini editors
- [x] Clean up all the DOM measurement sequences
- [x] Display placeholder/initial text correctly in settings view
- [x] Handle editors being mounted in an invisible state
- [x] Fix padding + colors combination
- [ ] Review old editor specs and make sure we cover everything
- [x] Check that styling matches
",543,False,en,0
2950,2,2,0,Internals,lee-dohm,2014-07-15T15:06:02Z,24,6,2,1,"Previously the indent guide was always showing on the whitespace only lines in the React editor. This is the same behavior as in the old editor and had the same fix, just ported to `LinesComponent`.

Still TODO:
- [x] Figure out how to port over the test from @kevinsawicki's change

See: 314833bbac33bdb7c45594550d8d10559dd2de9c
Fixes #2274
",342,True,en,0
2943,4,1,0,Internals,benogle,2014-07-15T15:45:13Z,34,5,4,3,"Fixes #2672 
Fixes #2722 

This is an extension of #2722 . I just added specs.
",79,False,en,0
2941,7,0,0,Internals,benogle,2014-07-11T22:16:30Z,54,8,9,0,"Previous to this, theme authors needed to replicate the entire `ui-variables` or `syntax-variables` files in their themes. This pull makes it so they can just include the variables they want to override in their version of the `*-variables` file.

It didnt work like this previously because we would just pass a stack of import directories to the less compiler, and the first variables file won. If something used a variable not defined in that winning `*-variables` file, it'd die. 

This pull always imports the [fallback variables](https://github.com/atom/atom/tree/master/static/variables) on all package / theme files before importing anything else.

Fixes #2892; Requires atom/less-cache#3
",696,True,en,0
2927,1,17,0,Externals,batjko,2014-07-11T15:01:29Z,2,2,2,0,"This behavior is standard WIndows and Linux for shift-delete.

Previously shift-delete was a redundant mapping, anyway. So this brings it further in line with expected behavior for Windows and Linux users.
![image](https://cloud.githubusercontent.com/assets/7287076/3550681/6cae3d78-08dc-11e4-8ea4-61e81a35d5d5.png)
",316,True,en,0
2920,1,0,0,Internals,benogle,2014-07-11T17:54:24Z,12,9,1,0,"When `editor.showLineNumbers` is toggled, the `ReactEditorView.gutter` member becomes stale. This moves it under an observer for `editor.showLineNumbers` so when it is toggled, the `gutter` member is reinstated. 

This is required for atom/git-diff#30. Ideally there would be a way to decorate a node similarly to decorations so we didnt have to do this hackery and related bs in git-diff. Something like `decorateObject('gutter', {class: 'blah'})`.
",450,True,en,0
2919,2,4,0,Internals,benogle,2014-07-22T19:42:49Z,5,3,2,11,"1. Enable softwrap on a longish md file. 
2. Scroll to the right
3. Editor twerk

![softwrap-wiggle](https://cloud.githubusercontent.com/assets/69169/3546128/d15e581e-087f-11e4-9356-9620c83851b7.gif)

`DisplayBuffer::getEditorWidthInChars()` is not taking into account the width of the scrollbar when the editor can vertically scroll.

This fix takes the scrollbar width into account all the time, even when it cannot scroll vertically. 

It might be cool to take the scrollbar into account only when the scrollbar is visible. But there are a couple problems:
- UX: when it switches from able to scroll to not able to scroll, it would reset the column, and reflow some lines. 
- It's a chicken and egg problem. Basically, to figure out if we need the scrollbar, we need to know all the screenlines, and to build the screenlines we need to know the softwrap column. But to figure out the softwrap column, we need to know if we show the scrollbar.

Here's what happens on resize of the editor in softwrap:

![screen shot 2014-07-10 at 3 29 37 pm](https://cloud.githubusercontent.com/assets/69169/3546309/b89fa66e-0881-11e4-93c7-310c8c499314.png)

`UpdateAllScreenLines` [deletes all the old screen lines](https://github.com/atom/atom/blob/master/src/display-buffer.coffee#L94) then [figures out the softwrap column](https://github.com/atom/atom/blob/master/src/display-buffer.coffee#L366), so it cannot know whether or not there should be a vert scrollbar. 

Here are the ways I can think to get the proper column:
- We keep the old screenlines around, and determine scrollability based on those. Though there might be cases where it does the wrong thing because the screen lines changed drastically (say a huge resize).
- We compute the screen lines twice. Once with the scrollbar, if it isnt scrollable, then compute again without the scrollbar.
- Just account for the scrollbar all the time (as this pull does)

I'd prefer to merge this pull. Curious about your thoughts
",1972,False,en,0
2915,3,0,0,Internals,kevinsawicki,2014-07-11T00:40:50Z,6,1,2,0,"Ship 32-bit node and build apm's modules in 32-bit mode.

Closes #2896
",71,True,en,0
2904,1,1,0,Externals,nshtg,2014-07-10T15:25:20Z,1,1,1,0,,0,False,en,0
2895,2,1,0,Internals,thedaniel,2014-07-10T21:26:21Z,35,8,1,0,"While adding docs for renaming packages, I noticed that only the version section had h3 titles for each action, so I added them to the other sections and adjusted the heading levels while I was at it.
",201,True,en,0
2889,5,0,0,Internals,kevinsawicki,2014-07-10T21:30:01Z,19,7,1,1,"Because of atom/atom-shell#473 there are invalid window dimensions in the serialized state for people using Atom on Windows.

Instead of bumping the version and throwing away the bad state, I'd rather just validate the dimensions on save/restore so that the Atom window is never shown off screen.

This PR adds two checks before using the dimensions, height and width greater than 0 and that the window isn't completely offscreen by checking if x+width and y+height are both greater than 0.

Closes #2872
",505,True,en,0
2888,1,2,3,Internals,benogle,2014-07-09T21:11:55Z,20,12,3,0,"@nathansobo good call on comparing by id.

Fixes #2848 
",56,True,en,0
2867,1,0,0,Internals,nathansobo,2014-07-09T02:54:41Z,46,5,3,0,"Fixes #2857

Including correct interleaving with indent guides.
",64,True,en,0
2865,1,0,0,Internals,nathansobo,2014-07-08T20:27:26Z,6,16,1,0,"Previously, I was just remeasuring characters whenever the stylesheets changed. I think there were situations in which the model changed, then I remeasured characters prior to updating the view to match the model, causing DOM exceptions. This switches the approach to only ever measure characters after an update, ensuring the view always matches the model.
",358,True,en,0
2859,4,1,0,Internals,probablycorey,2014-07-08T19:52:45Z,40,4,3,0,"Auto Updating won't work for Windows. This will update the AutoUpdateManager to emit the appropriate events when an update is available.
",137,True,en,0
2858,1,3,0,Internals,nathansobo,2014-07-08T00:07:36Z,18,15,4,0,"Fixes #2367
- The indent level of empty lines is the _max_ of the nearest non empty
  line, rather than favoring the level of the line below.
- An extra wrap guide is no longer rendered for empty lines

I didn't port the specs over because we already had good coverage at the
model level. It just needed to be updated for the preferred behavior.
",346,False,en,0
2855,1,1,0,Internals,nathansobo,2014-07-07T22:49:29Z,5,3,2,0,"Fixes #2694
Fixes #2853

Previously, we were storing an `active` boolean for each pane. We've had some strange bugs where every pane is serializing `active: false`, which causes exceptions when loading up the stored data.

This new approach serializes the activePaneId on the PaneContainer itself. Since the PaneContainer is the source of truth regarding the active pane, it makes more sense to handle it here.

This unfortunately changes the serialization version for the PaneContainer, so people won't have their pane state persisted after upgrading. But it seems better than leaving cruft to handle the old serialization situation.

/cc @kevinsawicki since this is a critical change.
",687,False,en,0
2852,1,0,0,Internals,nathansobo,2014-07-07T21:47:29Z,34,0,2,0,"Fixes #2845
",12,True,en,0
2851,1,0,0,Internals,nathansobo,2014-07-07T21:42:11Z,7,2,3,0,"Fixes #2815

This commit changes our autoscroll strategy for cursors significantly.

Originally, we were autoscrolling whenever the cursor's marker changed
positions. This worked well, except we didn't end up autoscrolling when
the user _attempted_ to move the cursor to an invalid position, such as
moving down at the end of the buffer, due to the fact that the marker
wouldn't change.

Then, we moved to always requesting an autoscroll whenever a position
change was requested via Cursor::changePosition. This missed out on
moving the cursor when inserting text, so we then also added an explicit
autoscroll call when inserting text.

This had the problem of not autoscrolling due to undo. So finally, this
solution combines explicit autoscroll in ::changePosition to capture
intent, as well as implicit autoscrolling whenever the cursor's marker
position changes due to a textual change in the buffer. This captures
undo/redo correctly.
",940,True,en,0
2850,2,0,0,Internals,nathansobo,2014-07-07T20:36:20Z,17,3,2,0,"Fixes #2844 
",13,True,en,0
2849,1,0,0,Internals,nathansobo,2014-07-07T19:31:15Z,19,1,2,0,"Fixes #2842
",12,True,en,0
2826,1,1,0,Internals,nathansobo,2014-07-04T16:53:55Z,7,7,1,0,"@benogle 

We went back and forth about these specs in your previous pull. Fine that you merged it as it wasn't worth holding up the presses on since the previous approach did work, but I think this approach is better. The previous tests would have passed even if there was nothing to cause a reflow in between the removal and re-addition of the flashed class. This means the behavior could break when flashes begin before the previous flash ended without breaking the specs.
",476,True,en,0
2819,6,1,0,Internals,benogle,2014-07-08T01:06:35Z,91,77,8,3,"Starting this PR super early. I want to layout what I am thinking before getting into it. 
### Editor / DisplayBuffer

The API is designed to be consistent with the marker API. The marker API has a `markBufferRange` function that returns a `Marker` object. Removal of the marker is done through a `destroy` method. The Decorations API takes on the same form:
- `(Decoration) decorateMarker(marker, decorationParams)`

These remain unchanged:
- `(Decoration) decorationForId(decorationId)`
- `(Object) decorationsForScreenRowRange(startScreenRow, endScreenRow)`
### Decoration

New:
- `(void) destroy()` - this just calls `displayBuffer::removeDecoration(this)`
- `(void) update(newParams)` - update the params with newParams. Lets the `displayBuffer` know there was an update, which will notify the `EditorComponent`.

Unchanged:
- `flash`
### TODO
- [x] `Decoration::destroy()` 
- [x] `Decoration::update()` 
- [x] `DisplayBuffer / Editor::decorateMarker()` 
- [x] Update packages using decorations
",1000,False,en,0
2816,2,0,0,Internals,benogle,2014-07-03T21:59:56Z,6,6,1,0,,0,False,en,0
2813,17,1,0,Internals,kevinsawicki,2014-07-05T18:48:39Z,19,7,2,1,"Closes #1034 
",14,True,en,0
2801,5,1,0,Internals,nathansobo,2014-07-02T16:34:01Z,38,22,2,0,"Fixes #2797
Refs #2769

I previously thought that using `setImmediate` instead of `nextTick` fixed our jitter issues when requesting updates from animation frames, but it seems I was wrong. This PR returns to a strategy of updating synchronously in animation frames, so we never mix calls to `requestAnimationFrame` with `setImmediate`.

This PR also fixes an issue where we would handle stale `scroll` events emitted by the scrollbar elements while we were in the middle of updates, which was another source of jitter. Now we no longer get this kind of unintentional feedback when setting the scroll position in the model.

@Flannelhead: Could you try this out when it lands to see if it addresses #2769 on Linux?
",715,False,en,0
2794,18,10,25,Internals,benogle,2014-07-04T00:48:08Z,181,54,14,1,"I really liked the ability of the old editor to flash selections at you when you cycled through the find results. This is an attempt at adding the same functionality to the react editor.

I want the flash to be temporary, so I'm using the same mechanism as the autoscroll:

``` coffee
editor.setSelectedBufferRange(marker.getBufferRange(), autoscroll: true, highlighted: true)
```

It's a bit awkward, though. @nathansobo take a look and let me know if you think this is on the right track.
",491,True,en,0
2792,4,2,0,Internals,thedaniel,2014-07-01T23:08:32Z,15,2,1,0,,0,False,en,0
2789,4,9,0,Internals,nathansobo,2014-07-01T18:48:34Z,50,18,6,0,"The following issues fixed by this PR have to do with using the GPU for rendering.
- Fixes #2511. Font rendering is a bit different on OS X when the GPU is employed due to issues with subpixel anti-aliasing, so this allows it to be disabled at the cost of performance if the user truly can't stand it. If we get a lot of complaints, we may want to auto-disable the GPU on non-retina displays.
- Fixes #2769. It seems like there are bugs on Linux with certain graphics drivers. A quick workaround is just disabling the GPU entirely. Hopefully these issues will be addressed as Chromium evolves.

![gpu-disabled](https://cloud.githubusercontent.com/assets/1789/3447052/1d6c4bd2-0149-11e4-9ee0-3048230eb77c.gif)
",709,False,en,0
2788,4,0,0,Internals,kevinsawicki,2014-07-01T18:48:12Z,5,0,1,0,"Fixes https://github.com/atom/chocolatey/issues/8
",50,True,en,0
2784,2,3,1,Externals,nshtg,2014-07-01T21:22:12Z,69,1,1,0,"That & I fixed the jasmine docs link since you redirected to the **2.0** docs. When I was reading your guide for the first time I was sad and angry at myself that I couldn't get my `done()` tests to work. :wink:
",212,True,en,0
2783,4,1,5,Internals,benogle,2014-07-01T17:45:27Z,24,4,5,0,"Right now, if find-and-replace / scandal encounters a bogus or unreadable file, it just doesnt finish. No good. This bubbles errors up from the new scandal to the consumer of the `project.scan` and `project.replace`.

I need help testing this. Testing the replace is easy as we pass in a list of paths, so I can just pass a bogus path in there. Testing `project.scan` is harder because it wont try to open any files that dont exist, and I dont know how to reliably (across machines) get it to scan a file the test user cant access. If you have ideas, let me know.

See atom/scandal#15 and atom/find-and-replace#243

Fixes atom/find-and-replace#192
Fixes atom/find-and-replace#197
Fixes atom/find-and-replace#242
",712,True,en,0
2779,2,0,0,Internals,thedaniel,2014-07-22T15:44:48Z,13,0,1,21,,0,False,en,0
2773,2,0,0,Internals,nathansobo,2014-07-01T15:27:59Z,14,1,2,1,"Fixes #2725
",12,True,en,0
2767,1,1,0,Internals,smashwilson,2014-07-01T16:50:11Z,2,0,1,2,"Running `sudo script/grunt install` from a fresh clone generates an untracked file in `resources/linux`:

``` bash
smash@winter ~/code/atom (master=) $ sudo script/grunt install
[sudo] password for smash: 
Running ""install"" task
Done, without errors.
smash@winter ~/code/atom (master %=) $ git status
# On branch master
# Untracked files:
#   (use ""git add <file>..."" to include in what will be committed)
#
#   resources/linux/Atom.desktop
nothing added to commit but untracked files present (use ""git add"" to track)
```

This is a tiny patch to `.gitignore` the generated resource. I added `resources/linux/debian/control` from `mkdeb` while I was at it.
",657,True,en,0
2763,1,0,0,Internals,nathansobo,2014-06-28T14:42:31Z,4,5,1,0,"Fixes #2723

The model-level autoscroll should always have sat next to the place we emit the 'autoscrolled' event. We should autoscroll even if the cursor doesn't actually move, for example when trying to move down at the end of the file.
",239,True,en,0
2760,1,0,0,Internals,thedaniel,2014-07-11T17:58:57Z,2,0,1,13,"This indicates that the Atom.io API is not frozen - this is describing the state
of things, not announcing a new policy.
",121,False,en,0
2757,14,2,0,Internals,nathansobo,2014-06-28T15:04:12Z,238,272,3,1,"Fixes #2701

This PR updates the decorations on lines and line numbers in the following way:
- When the cursor is on a certain line, its line and line number will have the `.cursor-line` class.
- When a selection spans lines, their line and line numbers will have the `.selection-line` class.
- If the selection is empty, the cursor's line will _also_ contain the `.cursor-line-no-selection` class. I'd prefer this to be synthesized with `.cursor-line:not(.selection-line)` but we need it for backward compatibility.

Previously, the `.cursor-line` class would be applied to every line number in a selection, but now it's only applied to the line containing the cursor for consistency with what we do on line elements. This means certain themes will need to switch `.line-number.cursor-line` to `.line-number.selection-line` for the same effect. To support these themes in the old editor, we now also add `.selection-line` to the line numbers in the gutter.

Here you can see the line highlight working again in the light theme.
![screenshot 2014-06-27 05 42 26](https://cloud.githubusercontent.com/assets/1789/3410971/23ee49b2-fdf0-11e3-9192-f708ac393ded.png)
",1161,True,en,0
2753,11,1,3,Internals,probablycorey,2014-06-30T18:09:05Z,36,21,4,3,"This will build the API docs and publish them to the [release](https://github.com/atom/atom/releases) page. It is the first step towards automating the API doc generation.
",172,True,en,0
2747,2,0,0,Internals,nathansobo,2014-06-26T00:48:47Z,169,171,2,0,"Everything I said before about `setImmediate` and `nextTick` was exactly backwards. After trying `setImmediate` again for updates, I see no performance degradation for typing and cursor movement and no flicker when using it within animation frames, so it's a winner. Now we don't need special-case logic for batching updates in animation frames.
",346,True,en,0
2740,1,1,0,Internals,benogle,2014-06-25T15:45:47Z,4,4,1,0,"I was getting partial pixels for `scrollTop`/`Left` which were making things really blurry. This does a `Math.round`. Check it:

![screen shot 2014-06-24 at 6 10 11 pm](https://cloud.githubusercontent.com/assets/69169/3380409/84bdb06c-fc05-11e3-946e-1ef0a591d747.png)

I was able to consistently repro on an external display, full height with `display-buffer.coffee` open, and doing a symbol search for `pixelPositionForScreenRow`.
",432,True,en,0
2739,1,0,0,Internals,nathansobo,2014-06-25T01:08:11Z,15,10,1,0,"To fix jitter, commit d57119793bf3f01c94700e2ad4208eac2a71879f changed `requestUpdate` to always perform updates synchronously inside of a `requestAnimationFrame` callback to avoid the use of `nextTick`. However, that changed exposed us to performing multiple redundant updates inside of an animation frame, which hurts performance.

This PR updates the strategy to pause all updates during the animation frame. Then, after the frame's callback, if any updates were requested we perform a single synchronous update. This ensures a maximum of 1 update per frame no matter what.
",577,True,en,0
2738,7,3,0,Internals,benogle,2014-06-26T01:16:32Z,73,11,5,1,"This should fix #2666 

It basically calculates the scrollWidth by measuring the longest line. 

It feels dirty, though, because I have to change a bunch of tests to first call `DisplayBuffer.updateAllScreenRows`. Why is this? It seems `updateAllScreenRows` is called in the DisplayBuffer's constructor. I'm looking more into this. How can I make this not suck @nathansobo?

It fixes #2666 except in one case: initial load. I assume this is because lines are measured before styling has been applied. Looking into this as well...
",530,True,en,0
2737,11,21,16,Internals,benogle,2014-07-01T20:46:25Z,122,1,5,6,"This fixes the indent guide when lines around the whitespace lines change. It will check whitespace lines surrounding a change. If their indent level changes, it will invalidate the whitespace lines.

Fixes this issue:

![ba4df5ea-f898-11e3-9fcd-686fe9e0ea2c](https://cloud.githubusercontent.com/assets/69169/3378927/0bd7fa88-fbea-11e3-8427-0256ec8fa576.png)

@nathansobo will you check the changes in tokenized-buffer and make sure it's legit? Also, let me know if there are benchmarks I can run to make sure typing is ok.

ref #2367
",535,True,en,0
2735,7,0,0,Internals,nathansobo,2014-06-24T19:34:56Z,54,32,5,0,"Fixes #2726

Previously, we were passing the screen ranges of highlights and cursors into their components, then using editor to convert these ranges to pixel positions. This worked for the most part, but when the cursor blinked it could sometimes get out of sync with changes to the model, meaning we asked for a pixel position for a screen position that didn't exist.

This PR changes things to precompute the raw pixel positions for cursors and highlights in the root component and pass it down. When the cursor blinks, we don't need to recompute a pixel position because it's a property that is passed in from the outside and doesn't change in this case.

This kind of approach seems to be what React wants: Compute an immutable snapshot of the model in the root component and pass it down from the top.
",808,True,en,0
2727,3,0,0,Internals,benogle,2014-06-24T18:15:47Z,45,18,4,0,"This actually subscribes to marker changes. 

Fixes #2705 
",59,True,en,0
2713,2,1,1,Externals,Theswweet,2014-06-23T16:32:01Z,4,0,1,1,"I ran into this when I installed today, and the inscribed method allowed me to complete my atom install on CrunchBang. I've seen a few issues having to do with this, so it might be advisable to have it in the troubleshooting section!
",234,True,en,0
2708,2,0,0,Internals,nathansobo,2014-06-21T08:52:51Z,39,59,9,0,"This PR reverts atom/atom#2699, which was not feeling very good.

The cause of the artifact is the last highlight being removed, so this PR instead adds a dummy highlight to the highlights div that is never removed.
",216,True,en,0
2702,1,0,0,Internals,nathansobo,2014-06-20T23:03:12Z,18,1,2,0,"Fixes #2698
",12,True,en,0
2700,22,10,3,Internals,benogle,2014-06-24T15:26:57Z,71,2,4,3,"While digging into #2679, I noticed that all files are loaded with the null grammar until the specific grammar is loaded. This creates the issue in #2679, but also makes the editor feel dumpy on load as there is a sizable chunk of time where files are not colorized. 

So this preloads / sync loads the grammars needed by deserialized buffers. 

I just serialize the grammar name, and on deserialize, the `TokenizedBuffer` calls `atom.syntax.requestGrammarPreload`, which emits an event, which the relevant package handles and loads its grammars sync. This whole process happens _right_ before the soon-to-be-new TokenizedBuffer chooses its grammar. 

The biggest issue is that nowhere do we map grammar names to the name of the package, so I have a shitty hardcoded line in there to do this work until I have a legit solution. Options for solving this issue:
1. on serialize, serialize the name of the package, rather than the grammar name
2. add a package.json field specifying the grammar names that the package provides. Since grammars are not activated right away, I have no other way to read the name of the grammar. 

I'm leaning toward 1 because it will be hard to get people to change their package.json's and people will forget to add this field anyway.

What do you guys think about all this?

Will fix #2679 if we decide to go down this route.
",1356,True,en,0
2699,3,0,0,Internals,nathansobo,2014-06-20T23:03:26Z,59,31,9,0,"Previously, when the last highlight div was removed from the lines layer, chunks of the lines would sometimes disappear. Since we've discovered that giving the lines an opaque background doesn't help with subpixel anti-aliasing anyway, I've found that rendering highlights on their own layer behind the lines and making the lines layer transparent avoids the artifacts.

Unfortunately, _now_ removing the last highlights causes rendering artifacts on the wrap guide, which is also mounted on the highlights layer. So this PR also breaks out a separate layer for the underlayer.
",578,True,en,0
2693,4,1,2,Internals,benogle,2014-06-20T19:52:22Z,20,12,2,0,"If some operation (folding?) changes the screen rows and the decorations at the same time, the previous decorations can no longer be diffed against the decorations to-be-rendered to figure out what to classes to add/remove.

So rather than index by screenRow, this indexes by `lineNumberId`.

@nathansobo check it out
",318,True,en,0
2692,5,0,0,Internals,kevinsawicki,2014-06-20T20:22:05Z,57,3,7,0,"Continuation of #2361
",22,True,en,0
2687,1,1,0,Externals,grenade,2014-06-20T15:04:05Z,1,0,1,0,"In order to alert users that the Atom build scripts expect to find Python in the default installation folder.
",110,True,en,0
2682,4,0,2,Internals,benogle,2014-06-20T18:02:35Z,116,18,4,0,"This adds support for `type: 'line'` decorations. Decorations of `type: 'line'` will add a class to the relevant screen lines.

Closes #2569
",141,True,en,0
2681,5,4,11,Internals,nathansobo,2014-06-20T21:20:25Z,310,219,6,0,"Fixes #2642 #2635 

Previously, I was trying to explicitly batch editor updates together with the `batchUpdates` method, but it was going to be impossible to catch everything. The bugs referenced were caused by cases where we were forgetting to batch, which caused massive redundant work to be performed. This PR updates the update mechanism to always wait until the end of the current synchronous code block with `process.nextTick`. It seems to be more responsive than `setImmediate`, so this also supplants the mechanism that delayed updates for decorations.
",561,True,en,0
2680,1,6,0,Externals,Bengt,2014-07-29T01:46:51Z,19,8,1,39,"The proposed style allows properly formatted descriptions and leaves more vertical space to the commands.
",106,True,en,0
2676,2,1,1,Internals,benogle,2014-06-19T22:10:18Z,15,3,2,0,"Works like the old editor.

Fixes #2657 
",41,True,en,0
2675,6,0,0,Internals,kevinsawicki,2014-06-19T23:27:38Z,4,0,3,0,"Ship a couple DLLs needed to run the app without installing Visual Studio first.

Closes #2651 
",96,True,en,0
2667,2,0,0,Internals,nathansobo,2014-06-19T12:34:07Z,90,31,7,0,"Fixes #2641

This PR delays character-by-character measurement in the lines component when the editor is hidden, just like we delay measurement of the line height and default character width already. This also updates the cursor position as soon as character widths are updated by emitting a `character-widths-changed` event with a change count integer. Using an integer was the easiest way to communicate to the cursors and highlights components that the scoped character widths have changed.
",494,True,en,0
2665,8,6,0,Internals,benogle,2014-06-19T20:48:40Z,169,19,4,0,"Handles:
- clicking on gutter row
- shift clicking on gutter row
- dragging on gutter row
- shift dragging on gutter row

Fixes #2636 
",135,False,en,0
2662,13,3,0,Internals,kevinsawicki,2014-06-19T16:41:15Z,101,24,6,0,"Continuation of  #2225 

Fixes #1845 

![screen shot 2014-06-18 at 5 20 30 pm](https://cloud.githubusercontent.com/assets/671378/3322292/9bb88264-f747-11e3-9370-bf3267c6fdde.png)
",179,True,en,0
2661,4,0,2,Internals,benogle,2014-06-18T21:58:32Z,33,0,4,0,"And you can click them to unfold.

Fixes #2634
",47,True,en,0
2656,2,0,0,Internals,benogle,2014-06-18T20:11:11Z,6,6,1,0,,0,False,en,0
2653,2,1,2,Externals,deprint,2014-06-22T03:42:21Z,6,4,1,3,"Continues  #2630
Fixes #2647
Installs desktop file with respect to `INSTALL_PREFIX`.
- `sudo script/grunt install` will install `Atom.desktop` to `/usr/local/share/applications` instead of `/usr/share/applications/`
- When a custom `INSTALL_PREFIX` is set the user will have to install the desktop file manually by copying `$INSTALL_PREFIX/share/applications/Atom.desktop` to `/usr/local/share/applications`
- Fix when `INSTALL_PREFIX` ends with `/`
",450,False,en,0
2630,2,11,1,Externals,deprint,2014-06-18T00:58:51Z,22,3,3,0,"Fixes #1969
Running `sudo script/grunt install` also installs a desktop-file for atom in `/usr/share/applications`
",115,False,en,0
2629,6,0,0,Internals,kevinsawicki,2014-06-16T22:04:00Z,9,2,1,0,"This reduces the built `.zip` file from ~100MB to ~65MB.

Previously the ignored paths weren't properly being escaped so they weren't matching any of the paths.

Also I added ignoring of `build/Release/obj` and `build/Release/*.pdb` similar to the `build/Release/obj.target` ignore that was already done on Mac OS X.

Fixes #2624 
",331,True,en,0
2627,9,0,0,Internals,kevinsawicki,2014-06-16T19:34:29Z,3,6,2,0,"This updates the remaining failing specs to pass on the Windows CI machine.

Unfortunately I still don't know why they failed, they passed on both my Windows 8 vm and on a Windows 8 Samsung Ultrabook.

So instead the specs were massaged a bit to get them passing consistently but functionally be the same.
",306,True,en,0
2626,1,1,0,Internals,izuzak,2014-06-16T19:29:37Z,4,0,2,0,"Fixes https://github.com/atom/atom/issues/2350

This adds a check to the classic and react editor so that mousedown events are handled only for the left mouse button. Currently, handling events for the right mouse button causes selections to be canceled after a right click.

cc @nathansobo 
",292,True,en,0
2615,3,4,4,Externals,adnelson,2014-06-18T16:46:49Z,45,0,5,2,"This adds a command to delete text to the end of the line, without modifying the clipboard. This is the behavior in Sublime Text and what I was used to.

I'm not sure how to run the tests (`npm test` throws a whole bunch of weird errors unrelated to this commit). Perhaps someone familiar with this can run them, and/or tell me how to, in case I need to fix something? It does have the behavior I expected using it on my own.
",426,True,en,0
2609,1,1,0,Externals,Bengt,2014-06-14T14:41:27Z,1,0,1,0,"I derived the installation step for Fedora from the contents of the required Debian package. My Fedora 20 has all the listed packages installed and can compile atom, so this is an upper bound for the necessary packages in this step. Uninstalling any of the listed packages would require uninstalling a lot of other packages, so I did not test that.

References:
- [Debian's ""Build-Essential"" package](https://packages.debian.org/de/wheezy/build-essential)
- [StackOverflow Q&A on a ""Build-Essential"" equivalent on Fedora](http://unix.stackexchange.com/questions/1338/what-is-the-fedora-equivalent-of-the-debian-build-essential-package)
",636,True,en,0
2608,3,8,2,Externals,philschatz,2014-07-01T17:08:18Z,29,1,2,17,"Fixes atom/tree-view#131 and refs #2601.

I was unable to reproduce #2601 but this may fix the problem in general. atom/tree-view#131 occurs when disabling the Tree View package, re-enabling it, and then context clicking in the Editor pane.
",241,True,en,0
2606,19,4,0,Internals,kevinsawicki,2014-06-13T22:53:08Z,30,13,3,0,"This gets green Windows master builds publishing to [atom/atom releases](https://github.com/atom/atom/releases)

Closes #2444
",126,True,en,0
2605,44,3,14,Internals,benogle,2014-06-18T00:42:18Z,446,455,14,4,"This adds the ability to highlight ranges in the buffer tracked by markers. Just like find and replace does when you search for something, only more efficient. You write a little code:

``` coffee
marker = editor.markBufferRange([[4, 13], [5, 17]], invalidate: 'inside')
editor.addDecorationForMarker(marker, type: 'highlight', class: 'sweet-view')

marker = editor.markBufferRange([[12, 16], [12, 19]], invalidate: 'inside')
editor.addDecorationForMarker(marker, type: 'highlight', class: 'sweet-view')
```

``` css
.sweet-view .region {
  border-radius: 2px;
  background: rgba(255, 0, 0, 0.5);
}
```

And get this:
![screen shot 2014-06-17 at 11 46 53 am](https://cloud.githubusercontent.com/assets/69169/3304959/8da0d2dc-f650-11e3-834c-08027ecd98b6.png)
### Changes

Some things changed from the previous iteration of decorations
- All decorations are marker based. It made storage and rendering easier. There are 2 functions on editor that you need to be concerned with: `addDecorationForMarker` and `removeDecorationForMarker`
- There are no more typeless decorations. You can apply to multiple decoration types by using an array: `{type: ['gutter', 'line'], class: 'sweet-view'}`
- Rather than an option to handle softWrapped lines in gutter / line types, you specify a range of `[[4, 0], [4, Infinity]]` to apply it to the wrapped rows, and `[[4, 0], [4, 0]]` to only apply to the initial row. 

See #2507 for the original decorations
",1443,True,en,0
2603,12,12,0,Internals,probablycorey,2014-06-18T16:19:43Z,28,15,2,4,"This updates the editor's height/width when the editor component's height/width changes. This fixes the problem of tool-panels covering up the cursor position.

Closes #2578
",174,True,en,0
2602,1,1,0,Externals,joliv,2014-06-13T17:55:00Z,3,0,1,0,"Pretty simple, but doesn't come on a clean install.
",52,True,en,0
2588,1,0,0,Internals,benogle,2014-06-12T00:30:59Z,16,3,2,0,"This moves the cursor on pageUp / pageDown

Previously it was only moving the scrollTop, but not the cursors. 

Refs #2423
",123,True,en,0
2587,2,0,0,Internals,nathansobo,2014-06-17T16:11:34Z,34,34,3,5,"Fixes #2318

This commit also changes input handling to be more like it was in the previous editor. We're using textInput rather than input events because they are emitted _before_ characters are inserted, enabling much simpler detection of characters inserted via the accented-character menu on OS X.

We're also handling these events on the editor instead of the input component, which allows events to bubble from autocomplete-plus's hidden input element.

Previously I avoided this because something about it was causing reflows in the old editor, but in this editor that doesn't seem to be a problem, and it's actually faster.
",632,True,en,0
2584,2,6,0,Internals,izuzak,2014-06-12T15:39:23Z,10,1,2,0,"Fixes https://github.com/atom/atom/issues/2560. 

When outdenting, the `leadingTabRegex` currently matches spaces only at the beginning of the line, while tabs are matched anywhere in the line. As a result, the outdent method would eat up legit characters on lines which contain tabs after the beginning of the line.

This change tweaks the regex so that tabs are matched only at the beginning of the line.

cc @probablycorey @kevinsawicki  
",442,True,en,0
2577,1,2,0,Externals,jrsconfitto,2014-06-10T21:38:04Z,3,0,1,0,"I think npm verification is failing unfairly on me when I try to build Atom on my Windows machine.

```
C:\Users\james_000\Documents\src\atom> .\script\bootstrap
npm 1.4 is required to build Atom. An error (Error: spawn ENOENT) occured when checking the version.
C:\Users\james_000\Documents\src\atom> npm -v
1.4.9
```

After a `script/clean` on my machine, there's no local copy of npm and therefore the npm verification script defaults to `npm`, which for some reason doesn't seem to resolve correctly to the `npm.cmd`. I'm not sure why but that seems to be the behavior I'm seeing.

Using my proposed changes I see:

```
C:\Users\james_000\Documents\src\atom> .\script\bootstrap
Node: v0.10.28
npm: v1.4.9
Python: v2.7.6
```
",728,True,en,0
2571,3,2,2,Internals,lee-dohm,2014-06-12T15:45:47Z,9,6,2,2,"Fixes #2526

This slightly alters the heuristic for deciding whether to uncomment or to comment blocks of code. Previously, it would key off the first line of code and only if that was commented would it check the other lines. Now it checks all lines of code and uncomments the block if all non-blank lines are commented out.
",326,True,en,0
2567,2,6,0,Internals,benogle,2014-06-11T20:44:20Z,48,15,3,1,"Folks have been complaining about the mousewheel scroll speed -- it's too fast. It is really really sensitive. Turns out the deltas from the mousewheel event are generally regarded as [too fast](https://github.com/brandonaaron/jquery-mousewheel/issues/36). 

In my tests, the browser scroll speed is somewhere between 30 and 40% of atom's scroll speed. So I've slowed it down by that much. It feels way better. 

[MDN](https://developer.mozilla.org/en-US/docs/DOM/DOM_event_reference/mousewheel) says the values are different depending on system and attached mouse. Anyone have an actual windows machine they can test this out on? @kevinsawicki are you using a real windows machine?

It is an option called `editor.scrollSensitivity`. Not sure what the units should be. I have it as a percentage of the original value, so the default is 40. It depends on what this feels like on windows.

Refs #1906
",900,True,en,0
2561,1,4,0,Externals,batjko,2014-06-09T16:06:18Z,4,0,2,0,"For issue:  ""Paste via Shift+Insert not working (Windows)"" #2546
This has been added to the linux and win32 keymaps.

:memo: 

```
Ctrl+Insert: Copy
Shift+Insert: Paste
```

![image](https://cloud.githubusercontent.com/assets/7287076/3217351/9eef6c88-efde-11e3-9e26-3e04d7b06bac.png)
",284,False,en,0
2532,2,6,0,Externals,karlin,2014-06-11T11:39:30Z,52,0,5,4,,0,False,en,0
2531,1,1,0,Externals,radum,2014-06-06T15:52:39Z,1,1,1,0,"Now `script/clean` uses `del /F /Q /S` to cleanup the folders but `del /S` deletes specified files from all subdirectories, so if we pass a folder as a parameter it will only delete the files within the folder and all subfolders recursively but not the actual folders. And this can cause problems, see Issue #2487

A better way is to use `rmdir /S /Q` as it takes care of the folder itself and it's contents.
/S - removes all directories and files in the specified directory in addition to the directory itself. (removes the directory tree)
/Q - obvious this is quite mode

I tested this approach on a couple machines that needed a clean before building and works OK with `rmdir`. It might give a warning in the console like `The system cannot find the file specified.` because not all of them are there but it can be ignored as the script will finish running.
",861,True,en,0
2529,1,1,0,Externals,strugee,2014-06-06T18:03:00Z,6,0,1,0,"Fixes issue #2200
",18,True,en,0
2524,4,0,0,Internals,zcbenz,2014-06-07T07:25:57Z,18,11,5,1,"This PR updates atom-shell to v0.13.0 which has support for 32bit Linux, it also enables `./script/grunt mkdeb` to generate `i386` package.
",140,True,en,0
2522,3,2,2,Internals,probablycorey,2014-06-06T15:54:44Z,2,0,1,0,"This fixes the bug, but it raises some concerns as well. I'll go though how I debugged this in case it helps shed some more light on the problem.

TL;DR it is fixed but I don't know what was causing it.

Atom handles text input using a hidden input field. I suspected that the problem was this hidden input field was losing focus, so I added `setInterval((-> console.log document.activeElement), 1000)` to my `~/.atom/init.coffee` file. This logs if the hidden input loses focus. After double clicking around awhile the hidden input would lose focus and the body element would become focused.

I noticed the mouseDown event was being caught in an unknown parent of EditorComponent and would focus the body element. When the dev tools are used to look at what is bound to the mouseDown event you can see a react component is bound (expected) and a jquery object (unexpected):

![editor-component coffee - _users_corey_github_atom](https://cloud.githubusercontent.com/assets/596/3195476/3429481c-ed11-11e3-8a6a-0f7ac5467b94.jpg)

I solved this by making sure the mouseDown event in EditorComponent doesn't bubble. But I still wanted to know what event handler was causing this problem. I searched in Atom Core for mousedown handlers but none of those caused the problem. This led me to believe the problem was in a package, so I ran Atom in safe mode (`atom --safe`), which will start Atom with out any downloaded packages. In safe mode I could still recreate the problem. But the jquery mousedown event was no longer in the dev tools event viewer. I found out it was the color-viewer package that was adding the mousedown event handler to body, but removing that package didn't fix the problem.

So I'm left wondering what the problem was and why it only happened with the react editor.

Closes #2459
",1800,True,en,0
2515,3,0,2,Internals,thedaniel,2014-06-05T23:24:03Z,27,0,1,0,,0,False,en,0
2510,2,5,0,Externals,wulftone,2014-06-05T05:12:33Z,9,0,1,0,,0,False,en,0
2508,1,1,0,Externals,onkrot,2014-06-05T03:34:58Z,2,2,1,0,,0,False,en,0
2507,45,30,44,Internals,benogle,2014-06-09T23:30:48Z,715,23,9,4,"A decoration is an object attached to a buffer row. Here's a decoration:

``` js
{type: 'gutter', class: 'my-sweet-class'}
```

And here is how to attach it to a buffer row:

``` coffee
editor.addDecorationToBufferRow(1, {type: 'gutter', class: 'my-sweet-class'})
```

Currently the only thing that renders a decoration is the `GutterComponent` and it only cares about decorations with `type: 'gutter'`. It will add the decoration's `class` property as a class to the proper line-number node in the gutter. 

The neat thing is that the `GutterComponent` handles all the bs with updating as line number nodes are added and removed. So no more watching the `display-updated` event and manually updating classes in packages like `git-diff` and `bookmarks`.
### Markers

There is a marker API as well. Packages like `bookmarks` should not be watching the markers and updating their decorations manually. 

``` coffee
marker = editor.displayBuffer.markBufferRange([[2, 13], [3, 15]], class: 'my-marker', invalidate: 'inside')
decoration = {type: 'gutter', class: 'marker-class'}
editor.addDecorationToMarker(marker, decoration)
```

The class `marker-class` will properly track the marker's rows on the gutter.
### Options

Sometimes you might want a decoration to show on wrapped lines (git-diff), and sometimes you dont (bookmarks), so there is an option: `softWrap`. Like so: `{type: 'gutter', class: 'marker-class', softWrap: true}`. If you have ideas on how better to pass options, let me know.
### Removing decorations

Currently you can only remove them on each buffer row. Like finding markers, it will remove any decoration that matches the pattern.

``` coffee
editor.addDecorationToBufferRow(1, {type: 'gutter', class: 'my-sweet-class', namespace: 'cats'})
editor.addDecorationToBufferRow(1, {type: 'gutter', class: 'my-other-class', namespace: 'cats'})

# this will remove the previous two
editor.removeDecorationFromBufferRow(1, {namespace: 'cats'})

# usually you'll probably just have one class and do this
editor.removeDecorationFromBufferRow(1, {type: 'gutter', class: 'my-other-class'})
```

The api works the same for marker decorations. 
### TODO
- [x] Deprecate the old gutter methods
- [x] Figure out where to put this api. @nathansobo on the `ReactEditorView`? Now its on `Editor`.
- [x] Maybe pull the folds out to be decorations??
- [x] Docs
- [x] Tests for `cursor-line` decoration
- [x] Add a `cursor-line-no-selection` decoration
- [x] Tests for 'typeless' decorations

Fixes #1984
",2505,True,en,0
2506,1,1,0,Externals,Bengt,2014-06-05T16:56:02Z,5,2,1,0,,0,False,en,0
2502,2,5,8,Internals,izuzak,2014-06-05T20:22:36Z,100,0,1,1,"This is the first part of a guide on debugging problems and errors in Atom. I'll add more stuff to this PR (e.g. starting Atom in safe mode), but there's enough text already in here to get some feedback. 
",205,True,en,0
2500,1,2,0,Externals,jrsconfitto,2014-06-04T18:10:29Z,66,24,2,0,"Hey @probablycorey, i took a stab at adding a python version check onto #2457.

i'm not entirely happy with it at the moment... i don't like that i threw a callback in there, but i couldn't find a way of executing `python` synchronously that wouldn't require me pulling in a ton more code from other npm modules.

i doubt this is perfect, but i gave this a try and figured i'd share what i came up with. i'm still learning :smile:.
",432,True,en,0
2497,65,13,0,Internals,probablycorey,2014-06-11T16:06:40Z,216,78,14,7,":game_die: WIP :game_die:

If there are other parts of the API that break please respond to this issue with the package and the API it relies on.
### EditorView
- [x] `scrollView` outlet is missing.
- [x] getEditor
- [x] getFirstVisibleScreenRow
- [x] getFontFamily
- [x] getFontSize
- [x] getLastVisibleScreenRow
- ~~getPageRows~~ Ignoring this method, [I couldn't find it used anywhere](https://github.com/search?q=pageRows+extension%3Acoffee+extension%3Ajs+path%3A%2Flib&type=Code&ref=searchresults)
- [x] getPane
- [ ] highlightFoldsContainingBufferRange ([could probably be removed from the API](https://github.com/search?q=highlightFoldsContainingBufferRange+extension%3Acoffee+extension%3Ajs&type=Code&ref=searchresults) but it needs to be replaced in [SelectionView](https://github.com/atom/atom/blob/e3641286e71447a79666682edf04570b156b67cc/src/selection-view.coffee#L25))
- [ ] isScreenRowVisible  ([could probably be removed from the API](https://github.com/search?q=isScreenRowVisible+extension%3Acoffee+extension%3Ajs&type=Code&ref=searchresults))
- [x] pageDown
- [x] pageUp
- [x] pixelPositionForBufferPosition
- [x] pixelPositionForScreenPosition
- [x] redraw
- [x] scrollToBottom
- [x] scrollToBufferPosition
- [x] scrollToCursorPosition
- [x] scrollToPixelPosition
- [x] scrollToScreenPosition
- [x] setFontFamily
- [x] setFontSize
- [ ] setInvisibles (I think we could ignore this one, its [not used](https://github.com/search?q=setInvisibles+extension%3Acoffee+extension%3Ajs&type=Code&ref=searchresults) and can be set via config)
- [x] setLineHeight
- [ ] setPlaceholderText (this is only used by mini-editors and we are going to [wait on implementing it](https://github.com/atom/atom/commit/be201485188cb8583bbfe0a2dd239a20efa8cbd9#commitcomment-6621306))
- [x] setShowIndentGuide
- [x] setShowInvisibles
- [x] setSoftWrap
- [x] splitDown
- [x] splitLeft
- [x] splitRight
- [x] splitUp
- [x] toggleSoftTabs
- [x] toggleSoftWrap

Based on feedback from @abe33 and @smashwilson and anything I've run into personally.
Closes #2428
",2051,True,en,0
2493,1,0,0,Internals,izuzak,2014-06-03T18:45:58Z,9,0,3,0,"Adds search links to build docs for Linux/Windows/OSX so that it's easier to find other build error reports.
",109,True,en,0
2492,1,2,0,Externals,p-e-w,2014-06-03T17:37:43Z,1,1,1,0,"In Chrome on Linux, the Developer Tools open with <kbd>Ctrl+Shift+I</kbd>. Since many Linux devs have that shortcut hardwired into their brain, it makes a lot of sense for Atom to use it too.
",192,True,en,0
2481,15,0,0,Internals,nathansobo,2014-06-03T10:15:40Z,192,128,8,0,"In addition to fixing selection/cursor updates, this PR aims to clean up measurement and perform the minimal number of updates in response to changes that affect the line height and character width.

My goal is to centralize all decisions about measurement in the `EditorComponent` rather than scattering them through `componentDidUpdate` callbacks like they are currently. This will allow us to perform measurements when the line height, font size, and font family change without updating any components except the root component. Previously we were updating the lines component just to perform measurement, which resulting in multiple wasted update passes per change. This PR also batches the updates resulting from measurement together.
",740,True,en,0
2477,2,1,0,Internals,nathansobo,2014-06-02T15:02:49Z,291,330,3,1,"It isn't carrying its weight as a separate component. Every component adds overhead in React, and I actually think a shallower component tree feels a bit more straightforward.
",176,True,en,0
2474,1,1,0,Internals,benogle,2014-06-02T17:58:02Z,4,0,3,1,"Fixes #2468 

Is there any reason why these weren't in there? Especially for linux? @kevinsawicki @probablycorey?
",114,True,en,0
2463,5,2,0,Internals,nathansobo,2014-05-31T10:52:35Z,97,35,4,0,"I tracked down the source of occasional duplicate lines. To prevent jerking to a stop when the target of a mouse wheel event is removed from the DOM, I preserve the screen row associated with the latest mouse wheel.

There were some situations in which the `mouseWheelScreenRow` wasn't getting cleared or was being set unnecessarily, so I fixed those. I also never preserve a line associated with the `mouseWheelScreenRow` if it's in the rendered row range.

It's still possible to set the `mouseWheelScreenRow` without it getting cleared by scrolling up/down at the beginning/end of the file and not actually causing the scroll position to change. I'd like to get a fix in for that before merging this.
",704,True,en,0
2462,15,0,0,Internals,kevinsawicki,2014-06-02T17:25:09Z,73,119,22,2,"Gets the **core** specs green again on Windows, package specs will be handled separately.

![screen shot 2014-06-02 at 10 07 59 am](https://cloud.githubusercontent.com/assets/671378/3150752/c1330b16-ea79-11e3-825f-40ae932076f4.png)
",232,True,en,0
2461,3,1,0,Internals,probablycorey,2014-05-30T22:25:52Z,2,2,2,0,"This makes git-diff work again by fixing the gutter.addClassToLine shim.

@nathansobo I thought it mad sense to have data-buffer-row and data-screen-row on the node. Let me know if it doesn't.
",193,True,en,0
2457,18,22,7,Internals,probablycorey,2014-06-04T21:43:31Z,114,31,2,5,"This moves the build verifications to a separate file. It also allows Windows users to set the PYTHON env var if Python27 is not installed in SYSTEM_DRIVE:\Python27.

The PYTHON env var is used by [node-gpy](https://github.com/TooTallNate/node-gyp/blob/56dcb889091a6a0594854ccc517e498b21078d5f/lib/configure.js#L25) to determine the python executable location.
",361,True,en,0
2449,1,1,0,Externals,jsomers,2014-05-30T15:22:35Z,1,1,1,0,"With the original URL, git would throw this error:

```
fatal: unable to access 'https://github.com/atom/atom/': The requested URL returned error: 500
```
",155,True,en,0
2432,3,1,0,Internals,kevinsawicki,2014-05-29T01:50:58Z,3,2,2,0,"Builds are failing again due to npm `1.3` being on CI.

This PR make sure npm `1.4+` will be preinstalled and used by `script/bootstrap`.
",138,True,en,0
2431,6,0,0,Internals,probablycorey,2014-05-29T22:19:14Z,78,1,6,0,"`TokenizedBuffer` (and `DisplayBuffer`) now emit a `tokenized` event once a buffer is fully tokenized. They also emit a `tokenized` event when the buffer's grammar changes and is re-tokenized.

`Editor` uses this event as a trigger to determine if a file should use hard or soft tabs. The tokenization event is needed because comments at the top of a file may contain different tab styles than the code and should not be used to determine the tab state. This information is only available after the buffer is tokenized.

Closes #2421
",534,True,en,0
2423,1,22,1,Internals,probablycorey,2014-07-22T15:59:26Z,1,1,1,55,"This will make react the default editor.

All issues related to the react editor: https://github.com/atom/atom/issues?labels=react-editor-bug
## Todo

These are the blockers to releasing the react editor as the default
- [ ] Do a pass on React updates and see if we can boost cursor and text insertion performance
## Completed Tasks
- [x] Show code folding markers in gutter #1984 #2464
- [x] Shift + Backspace renders deleted characters #2159 
- [x] Lines sometimes duplicated or not removed #2429
- [x] Make autocomplete-plus work with the react editor #2318
- [x] Fix broken context menus #2442
- [x] Missing API on ReactEditorView #2428 (PR #2497)
- [x] React editor cannot open this file  bug react-editor #2392 
- [x] Closing find occasionally causes buffer rendering issues #2237 
- [x] Get the build green with react turned on in specs
- [x] Fix selection problems #2459
- [x] Fix problems with spellcheck #2460
- [x] Fix issues with find and replace atom/find-and-replace#232
- [x] Scroll speed is too fast
- [x] Selections become hidden behind tool-panels #2578 
- [x] Add back IME composition events 184068dc55d2cc2f3aaa9e43c7aa9aa54946b53d
- [x] Add highlight decorations #2605 
- [x] Gutter styles don't extend to the bottom of the editor #2596 
- [x] With React editor turned on line numbers are always on #2707 
- [x] Decorations not updated when markers move #2705 #2727 
- [x] ctrl+click to add a cursor doesn't work on linux #2105 
- [x] ReactEditorView has no method resetDisplay #2674 
- [x] Mouse selection seems to be off-by-one in React Editor #2668
- [x] Editor scroll width is miscalculated when longest line has variable-width characters #2666 
- [x] Cursor line highlights don't go full width and show with selections #2701 #2757  
- [x] Create blog post about the React Editor change atom/blog.atom.io#48
- [x] Soft wrap issues #2842 #2844 
- [x] Character widths aren't invalidated when stylesheets are changed #2845 
- [x] Not autoscrolling when cursor moves due to undo #2815
- [x] Indent guide is wrong #2367
- [x] Update the decoration API #2819
- [x] Characters are measured as 0 width when editor is hidden during theme change #2856 
- [x] Accent circonflexe removes previous char #2716 
- [x] End-of-line invisibles not visible on empty lines with indent guides in React editor #2857
- [x] Scrolling is sluggish when there a large numbers of folds #2848 
## Fixes these issues

Fixes #2443
Fixes #1850
Fixes #1790 
Fixes #1711
Fixes #2778
Fixes #2764
Fixed #2710 
Fixed #2785
Fixed atom/find-and-replace#245
Fixes #2375
",2556,True,en,0
2419,1,1,0,Internals,benogle,2014-05-27T19:45:33Z,1,1,1,0,"Cursor was invisible when over the indent guides. Super frustrating! Not sure if this is the best way to do this @nathansobo 
",126,True,en,0
2400,1,3,0,Externals,Gaelan,2014-05-27T15:50:42Z,1,0,1,1,,0,False,en,0
2399,1,1,0,Externals,nshtg,2014-05-27T15:51:28Z,1,1,1,1,"Should be self explanatory.
",28,True,en,0
2387,2,0,0,Internals,nathansobo,2014-05-27T18:20:51Z,5,1,2,3,"Fixes #2343

Had to detect whether the view was an editor using a class check rather than `instanceof` in `find-and-replace` and add 3 shim methods. We should still switch `find-and-replace` over to marker views but it's no longer a blocker for switching.

![screenshot 2014-05-23 18 57 52](https://cloud.githubusercontent.com/assets/1789/3073231/6040706e-e2e0-11e3-90d3-56c312cdb4db.png)
",389,True,en,0
2386,4,0,2,Internals,kevinsawicki,2014-05-27T20:53:26Z,3,2,2,3,"Reloading of the grammar when the editor's path changed regressed in the react editor since it doesn't handle these events yet.

This probably should have always happened at the model anyway.

Closes #2385
",206,True,en,0
2380,4,3,2,Externals,ddavison,2014-05-23T23:14:30Z,17,3,1,0,,0,False,en,0
2371,1,5,0,Externals,karlin,2014-05-23T16:24:10Z,77,0,3,0,,0,False,en,0
2370,3,0,0,Internals,nathansobo,2014-05-23T18:54:15Z,56,26,3,0,"Because we need to draw content before scrolling to it, the editor's scrolling behavior is completely synthetic. We use `translate3d` to move the `.lines` div around and never actually set the `scrollTop` or `scrollLeft` of the `.scroll-view` that contains them.

However, if the hidden input field ever gets out of the visible area of the scroll view, the browser tries to be helpful and scroll it into view, which changes the `scrollTop` and `scrollLeft` and ruins everything. This PR tries to stop that.
- If we do scroll, we log a warning and auto-correct the problem. I'd like to remove this stop gap once we don't see warnings for a long enough time, but it's better than leaving the editor in a busted state.
- When the editor is blurred, we always park the hidden input at 0, 0. This eliminates some cases where the editor could autoscroll after changing size while unfocused and then being focused.
- Allow 2px for the hidden input when the cursor reaches the end of the longest line. This ensures we don't autoscroll to the right when moving the cursor to the right edge of the editor.
",1096,True,en,0
2368,1,4,0,Internals,izuzak,2014-05-22T23:41:50Z,4,0,1,0,"Closes #1828 

cc @kevinsawicki @probablycorey 
",48,True,en,0
2364,2,16,0,Externals,themaninthesuitcase,2014-05-29T16:51:46Z,2,1,1,6,"TabView uses getLongTitle to provide a less ambiguous file title should multiple files have the same name.  However if these files also happen to be in a sub folder of the same name the ambiguity remains.

By increasing the long title to be relative from the project root this ambiguity is removed.

Before:
![screen shot 2014-05-22 at 21 33 36](https://cloud.githubusercontent.com/assets/196630/3060049/902dcd96-e1f3-11e3-91d0-d98b71bed480.png)

After:
![screen shot 2014-05-22 at 21 38 46](https://cloud.githubusercontent.com/assets/196630/3060054/9d317b14-e1f3-11e3-9632-94b7253c32e1.png)

Applies to atom/tabs#57
",617,True,en,0
2362,1,1,0,Externals,CoolOppo,2014-05-22T22:55:36Z,1,1,1,0,"This could be mildly confusing to some who are unfamiliar with using bash.
",75,True,en,0
2360,2,1,2,Internals,thedaniel,2014-05-23T17:18:06Z,192,0,2,0,"This adds docs for the REST API used by apm & Atom's update system. I was going to just add it to the atom.io site, but figured it made sense here (and will end up on the site this way anyway).
",194,True,en,0
2359,3,0,0,Internals,probablycorey,2014-05-23T15:57:06Z,14,3,1,0,"On Windows 7 there are extra requirements to build Atom with 64bit node. This adds information about those steps and simplifies the Windows  8 requirements.
",157,True,en,0
2356,2,1,0,Externals,klorenz,2014-05-22T18:34:50Z,26,0,1,0,"I run into issue #2082.  I think solution to this issue belongs into documentation.
",84,True,en,0
2353,1,1,0,Externals,aaronraimist,2014-05-22T15:13:18Z,1,1,1,0,":memo: 
Was originally fixed by #1927 but was overwritten by this [commit](https://github.com/atom/atom/commit/12116809980e390f1f5044a45e5e6ba367b2cad4).
",154,False,en,0
2345,1,0,0,Internals,kevinsawicki,2014-05-22T16:35:44Z,20,6,4,0,"This ensures that the wrap guide extends the entire height of the
editor.

Fixes #2053
",87,False,en,0
2344,9,0,0,Internals,nathansobo,2014-05-22T16:56:43Z,152,73,14,0,"Previously, if a property that affects line height was changed while the editor was hidden, an exception was thrown due to the line height being assigned to 0. This defers measurement until the editor is shown again.

Fixes #1998
",230,True,en,0
2339,2,0,0,Internals,probablycorey,2014-05-22T15:51:02Z,64,0,3,0,"Add basic spec writing and running documentation.

Closes #2233
",64,True,en,0
2327,1,2,0,Internals,nathansobo,2014-05-22T16:41:26Z,25,25,13,1,"The default version of React reads the current selection when an input element is focused during reconciliation. This happens on every keystroke in the React editor, causing an extra reflow. I have a PR open at https://github.com/facebook/react/pull/1439 to add the ability to opt out of this to React-proper, but until then, we'll have to use a fork. The PR comes from my account a few weeks ago, but the fork actually lives at https://github.com/atom/react/tree/selection-restoration-opt-out. It includes changes to `package.json` so it could be published that we wouldn't want to merge into React.

I'm not sure if this is the best approach structure-wise. The helper library `reactionary` depends on the requiring library having `react` available in its `node_modules`. So I published our fork of `react` as `react-atom-fork` and also published `reactionary-atom-fork` which requires `react-atom-fork` instead of `react`. Not beautiful but it works. Hopefully these fork packages are temporary.
",999,True,en,0
2319,2,0,0,Internals,nathansobo,2014-05-20T21:09:50Z,46,44,7,0,"I'm going to test this locally for a while, but I'm pretty sure that using a CSS animation for cursor blink is introducing weird delays when moving the cursor and typing. It's forcing a re-composite at 60 frames per second, which is about 30x more than required for a cursor that blinks 2x a second.
",300,True,en,0
2317,20,5,7,Internals,probablycorey,2014-05-21T04:10:12Z,90,9,4,0,"This allows invisibles to be visible when the react editor is enabled.

To do:
- [x] Make toggling the **show invisibles**  option update the editor view.
",155,True,en,0
2312,2,5,0,Externals,zelon,2014-05-22T16:30:58Z,1,1,1,2,"Many people are confused by indicating just Visual Studio 2010 Express without SP1
",83,True,en,0
2295,2,7,1,Internals,lee-dohm,2014-05-21T19:38:23Z,112,183,3,2,"Both documents had some really great stuff to them, but there was too much overlap. I did my best to unify them into one document, taking the best features of each.
",165,True,en,0
2290,1,1,0,Externals,varesa,2014-05-19T17:06:16Z,1,1,1,1,"Move the line number for the variable close to the actual current location.
Add a note to not to include unescaped backward slashes as they would appear in normal Windows paths.
",178,False,en,0
2284,1,1,0,Externals,pritambaral,2014-05-20T17:50:26Z,4,0,1,2," Fixes #2186
",13,True,en,0
2278,1,3,0,Externals,GeoffreyFrogeye,2014-05-17T19:39:55Z,2,2,1,0,"Fixes #2251 for good
",21,True,en,0
2269,4,6,6,Externals,pritambaral,2014-05-19T19:20:50Z,17,28,7,3,"`/tmp` isn't always available, is on precious [RAM-backed fs that is cleared at boot](https://www.kernel.org/doc/Documentation/filesystems/tmpfs.txt) or simply not
what the user has set his `$TMPDIR` to. According to specifications, we
should use `$TMPDIR`, which node lets us find through `os.tmpdir()`.

Also, [contributing.md](https://github.com/atom/atom/blob/master/docs/contributing.md#code-guidelines) isn't in favour of using platform-dependent code.

This PR focuses only on Linux for now, and invites discussion for OS X code's use of `/tmp`.
",553,False,en,0
2258,59,4,0,Internals,nathansobo,2014-05-19T20:42:18Z,667,377,16,3,"This PR improves scrolling performance dramatically over the existing React editor. We're still a bit slower than the original editor for large scrolls, but I have some optimizations in mind that I think can put us over the top. Fundamentally, I think getting the lines on the GPU will be the key to feeling smooth, but the GPU is not without its own corner cases and overhead that needs to be overcome. Here are some of my findings in reaching the current design:
- Putting each line and line number on the GPU as its own layer and moving each line individually rather than their containing layer feels really smooth. But unfortunately GPU layers with text on them need to have opaque backgrounds to handle sub-pixel antialiasing correctly on non-retina displays. This means selections can no longer be easily rendered behind the text, and have to be broken up into individual nodes on each line layer. This is really complex, hurts the performance of selecting pretty badly, and causes rendering artifacts on the GPU when we remove selections from lines due to bugs in Chromium. Layer-per-line is a non-option.
- This puts us back to moving a single large `.lines` layer on the GPU that contains the visible lines absolutely positioned in the correct location. We actually need to render ~8 lines above and below the visible viewport in order to prevent Chromium from grouping the repaints when adding removing lines while scrolling.
- Removing the last background selection from the lines layer causes rendering artifacts on the GPU, so we need to leave an empty selection div on the DOM even if there are no selections. This would be fine, except it seems to worsen layer compositing time for some reason. I think this might be caused by the GPU considering the entire region that encompasses both the empty selection and the visible lines, which can be quite large when scrolling far into the document. I want to experiment with moving the selection into the range of the visible lines and see if that improves this.
- The overhead of React's virtual DOM seems to be prohibitive for the lines and line numbers. I've opted to update the DOM manually in the `componentDidUpdate` hook for the `GutterComponent` and `LinesComponent`. I manually construct and parse the HTML, then add and remove nodes from the DOM. Since everything is absolutely positioned, the actual location of lines in the DOM doesn't matter, so I just append them to the end always. This cuts our JS time pretty significantly, but I still think there's room for improvement by recycling DOM nodes by changing their absolute position and `innerHTML` rather than creating and discarding so many nodes when scrolling. Despite needing to resort to such low-level operations, I'm still pretty happy about React. The virtual DOM is a fantastic tool, and it's really easy to drop down to low-level DOM manipulation where needed.

This PR improves the React editor, but it's not yet the holy grail of performance I'm hoping for. That will come next. There's a few more things to do before merging:
- [x] Fix an issue that causes the gutter to be the wrong width in certain situations.
- [x] Get specs passing again after tearing everything apart for performance.
- [x] Update line numbers when max line number digits changes
- [x] Update gutter width when max line number digits changes
- [x] Fix the go-to-line view.
- [x] Preserve the scroll target to prevent sudden halting of velocity scrolling.
",3465,False,en,0
2246,1,5,0,Externals,flannelhead,2014-05-15T17:24:15Z,1,1,1,0,"In Chromium the metaKey property of a mousedown event might never get set to true on Linux and Windows as there is no special, well defined meta key on the keyboard (see this [issue](https://code.google.com/p/chromium/issues/detail?id=95874)). Hence I made editor-view.coffee check for e.ctrlKey instead if the platform is not Mac, which makes ctrl+click to add a cursor as desired.
",383,True,en,0
2243,1,1,0,Internals,lee-dohm,2014-05-15T17:13:35Z,4,3,1,0,"Found a couple more documentation issues.
",42,True,en,0
2240,1,1,0,Internals,lee-dohm,2014-05-15T03:05:41Z,25,0,2,0,"@ProbablyCorey documented this process on Discuss and I figured it should be added to the official documentation. I hope that I was able to match the documentation practices the Atom team uses for general documentation.

See: http://discuss.atom.io/t/how-to-setup-development-for-core-modules-like-atom-keymap/9221/18?u=leedohm
",328,True,en,0
2239,16,1,8,Internals,probablycorey,2014-05-20T16:58:45Z,22,21,2,5,"I fired up Windows 8.1 today went through the build instructions. I removed some steps there weren't needed and I also added some requirement verifications to script/bootstrap.

Closes #2265

/cc @paulcbetts 
",209,True,en,0
2232,1,1,0,Externals,cameronmcefee,2014-05-15T17:12:06Z,4,0,4,0,"This adds a shortcut to the Terms of Use to the help menu.

Presumptions:
- When I run this with `--dev`, it doesn't include the release notes in the menu. I assume that get added automatically when it is published?
- I assume the `&` characters indicate hotkeys for those items? I tried to follow what I saw elsewhere.
",320,True,en,0
2213,1,13,3,Externals,dyross,2014-05-16T14:36:27Z,9,1,2,2,"Implements @bhuga's suggestion here: https://github.com/atom/atom/issues/2204

Allows packages to override the default hiding of the cursor when selecting text.
",161,True,en,0
2198,5,10,12,Externals,hkdobrev,2014-05-16T22:37:00Z,6,0,1,3,"Suggested Emoji for:
- Fixing something on Mac OS
- Fixing a bug
- Burning whitespace
- Fixing the CI build
- Adding tests
- Refactoring
- Security
",148,False,en,0
2194,1,1,0,Externals,aureliojargas,2014-05-13T05:46:23Z,1,1,1,0,,0,False,en,0
2189,2,1,0,Internals,zcbenz,2014-05-12T15:10:38Z,1,14,2,0,"Changelog:
- Fix emitting unresposive event too early when closing window
- Fix crash when closing a crashed window

**Linux**
- Fix disappearing menubar (fixes #1961, fixes #2007)
- Ship system dynamic libraries (fixes #1955)
",227,False,en,0
2185,4,13,0,Externals,jrsconfitto,2014-05-14T00:10:27Z,7,1,1,1,"Similar to #2166, this tries to get Win32 bindings feeling a more native for me.
- [x] `ctrl-home` should go to the beginning of the file
- [x] `ctrl-end` should go to the end of the file
- [x] `ctrl-delete` should delete the _next word_, not the previous word. i've used this for a long time, but i had to find some proof to make sure it wasn't something i just customized for myself. Here's a [reference](http://blogs.msdn.com/b/saraford/archive/2007/09/21/did-you-know-ctrl-delete-deletes-the-preceding-word-and-ctrl-backspace-deletes-the-proceeding-word.aspx) to back up that ctrl-delete should delete the following word and not the previous one.
- [x] `ctrl-pageup` goes to next tab
- [x] `ctrl-pagedown` goes to previous tab
",731,False,en,0
2176,1,2,0,Externals,Locke23rus,2014-05-14T00:18:30Z,2,0,1,1,"Also requested in https://github.com/atom/atom/pull/2111#issuecomment-42770432
",79,True,en,0
2173,3,6,1,Externals,Locke23rus,2014-05-16T22:13:44Z,52,32,10,4,"Rename functions:
`Editor::backspaceToBeginningOfWord` => `Editor::deleteToBeginningOfWord`
`Editor::backspaceToBeginningOfLine` => `Editor::deleteToBeginningOfLine`
`Selection::backspaceToBeginningOfWord` => `Selection::deleteToBeginningOfWord`
`Selection::backspaceToBeginningOfLine` => `Selection::deleteToBeginningOfLine`

Rename commands:
`editor:backspace-to-beginning-of-word` => `editor:delete-to-beginning-of-word`
`editor:backspace-to-beginning-of-line` => `editor:delete-to-beginning-of-line`

Fix #1791

/cc @probablycorey
",535,False,en,0
2171,1,1,0,Externals,avdg,2014-05-14T00:12:53Z,1,0,1,2,"Just a small note:
- The full screen option in darwin.cson is located under `#sublime-parity`
- However, the full screen option in linux.cson is located under `#atom-specific`

This is making me feel a bit unorganized. There is nothing major though, so I guess its all fine for now...
",285,False,en,0
2170,2,1,1,Externals,skardach,2014-05-13T05:49:25Z,1,1,1,1,"Fix #2152: path.resolve() was throwing an exception if given path was not a string.
When iterating through all given paths, each entry is casted by JS to
most suitable type and paths in form of a number (i.e. '1234') were
cast to Number, hence the bug.
",253,False,en,0
2164,1,12,1,Externals,steffengy,2014-06-03T19:01:44Z,10,0,2,23,"## Commit Summary

If you press ENTER before a line, a new line is introduced by appending ""\n"" before it.
Therefor a previous line of """" is appended before the <TAG>-line.
This line remains unindented, causing a wrong indentation for the next line.
Basically this is fixed by indenting this line (oldBuffer.end.row = newBuffer.start.row).
## Bug Description

As in #1294: If you put the cursor before a tag and press ENTER the indentation get's messed up.
## Current Behavior

![current_behavior](https://cloud.githubusercontent.com/assets/1194855/2938230/e0334d08-d8fb-11e3-80f3-3896fdc44896.gif)
## Expected (Fixed) Behavior

![fixed_and_expected_behavior](https://cloud.githubusercontent.com/assets/1194855/2938232/075e9018-d8fc-11e3-925a-34176bcaae63.gif)
",761,True,en,0
2162,1,1,0,Externals,teddybradford,2014-05-12T15:31:04Z,1,1,1,1,,0,False,en,0
2160,1,4,0,Externals,dyross,2014-05-11T19:58:39Z,4,2,1,0,"Addresses https://github.com/atom/atom/issues/1925 and https://github.com/atom/atom/issues/2140
",96,True,en,0
2144,1,1,0,Externals,aureliojargas,2014-05-10T20:06:42Z,6,6,1,0,"Currently both `...` and `$(...)` are used for command substitution. It's better to chose just one and stick to it, to avoid confusion.

Some arguments favoring `$(...)`:
- **Easier to read.** The backtick is easily confused with apostrophes and quotes.
- **Easier to nest.** Nesting backticks commands is an escaping nightmare. Using parenthesis is natural: `$(foo $(bar))`
",375,True,en,0
2142,1,1,0,Externals,aureliojargas,2014-05-10T22:53:21Z,1,1,1,0,"This option is not handled by the next `case` command.
",55,True,en,0
2134,10,19,4,Externals,erikhakansson,2014-06-03T17:13:37Z,50,5,4,24,"When creating a Package for Atom, I realized I needed submenus in Context menus.

This mod allows Context menus to accept the same JSON/CSON structure as regular menus, while still allowing the old structure.

Example:

```
'context-menu':
  '.workspace': [
    { 'type' : 'separator' }
    {
      'label' : 'Test submenu'
      'submenu': [
        { 'label': 'test', 'command': 'test-submenu:toggle' }
      ]
    }
    { 'type' : 'separator' }
    { 'label' : 'Lala', 'command': 'test-submenu:toggle'}
  ]
```

Feel free to comment. This is my first time ever touching Coffeescript.

Tested on Ubuntu 14.04.

![Screenshot](https://cloud.githubusercontent.com/assets/2339213/2934564/b22c2902-d7d4-11e3-9044-7b8f4728a5bd.png)
",728,True,en,0
2133,2,1,0,Externals,aaronhalford,2014-05-10T00:19:07Z,6,3,1,0,"Cleaned up typos in Linux build instructions. Added troubleshooting section that can be expanded upon as Fedora, CentOS, Mint, and other distro fixes come rolling in.
",167,True,en,0
2128,1,1,0,Externals,alfredxing,2014-05-09T18:36:40Z,1,0,1,0,"Add a `fullscreen` class to body when full screen is triggered, as suggested
by in #1694.

This would allow for specific styles when in full screen mode.
",154,False,en,0
2117,1,0,2,Externals,sophearak,2014-05-09T18:30:39Z,12,0,1,0,,0,False,en,0
2114,1,2,0,Externals,Someguy123,2014-05-09T18:29:50Z,15,0,1,0,"Add troubleshooting to Windows build instructions
",50,True,en,0
2113,1,1,0,Externals,MScottBlake,2014-05-09T18:25:46Z,2,0,1,0,,0,False,en,0
2112,1,1,0,Externals,paulcbetts,2014-05-09T02:21:53Z,4,0,1,0,"Some people ask why we need GitHub for Windows, let's explain a bit
",68,True,en,0
2111,1,7,0,Externals,Locke23rus,2014-05-09T18:13:13Z,19,7,4,0,,0,False,en,0
2108,5,0,0,Internals,probablycorey,2014-05-08T23:42:34Z,67,45,4,0,"Moved the build documentation out of the readme and into the docs dir.
",71,True,en,0
2081,1,1,0,Externals,xcvd,2014-05-09T00:03:25Z,1,0,1,0,"Within windows build shift-backspace currently does nothing. Behaviour
untested in linux (perhaps linux.cson should be modified too?)
",134,False,en,0
2074,2,7,0,Externals,dertuxmalwieder,2014-05-10T15:37:17Z,24,1,3,2,"Signed-off-by: Cthulhux zeug@tuxproject.de
",43,True,xh,0
2073,1,1,0,Externals,captn3m0,2014-05-08T23:53:31Z,1,1,1,0,"This is to get install to work behind firewalls where `git://` is blocked.
",75,True,en,0
2071,1,1,0,Internals,lee-dohm,2014-05-08T17:21:00Z,5,3,2,0,,0,False,en,0
2067,1,17,0,Externals,paulcbetts,2014-05-09T01:06:16Z,1,3,1,0,"GitHub for Windows makes a lot of the path issues easier, but we left out the part where they need to click 'Git Shell'
",120,True,en,0
2059,2,3,1,Externals,bradgearon,2014-05-08T22:14:37Z,4,1,1,0,"avoids NOENT error when searching for packages
",47,True,en,0
2052,1,1,0,Externals,AngelEzquerra,2014-05-08T17:23:40Z,1,1,1,0,"atom already ignored git and svn directories. It makes sense to ignore
mercurial (.hg) directories as well.
",108,False,en,0
2050,1,10,0,Externals,Spice-King,2014-05-09T16:12:31Z,8,1,1,1,"ChildProcess.spawn only will run .exe files on Windows, not .cmd, .bat, .anythingElse.

See joyent/node#2318 for more information.
",131,True,en,0
2047,4,1,5,Externals,cameronmcefee,2014-05-08T22:10:39Z,2,8,1,1,"This is designed to reduce the word repetition in the into of the readme. The overall goal was to improve the cadence, but I also wanted to give some credit to the sources of inspiration. I also opted to leave out ""modern"" and ""approachable"" as these should be standards, rather than selling points.
",300,True,en,0
2045,4,0,0,Internals,probablycorey,2014-05-08T22:09:32Z,26,1,3,1,"Previously, block commits would screw up tab prediction. For example:

```
/**ruby
  * I'm a docblock directly at the start of a file with a space to line up the docblock
  */
```

Atom would previously assume this file uses softTabs because of the block comment using leading spaces. Now Atom will ignore comments when figuring out if a file uses soft or hard tabs.
",367,True,en,0
2013,1,1,0,Externals,pborreli,2014-05-07T15:56:19Z,21,21,10,0,,0,False,en,0
2006,1,2,0,Externals,mpkh,2014-05-07T15:48:49Z,1,1,1,0,"else-way there will be ""failure during conversion to COFF""
description on StackOverflow: http://stackoverflow.com/questions/10888391/error-link-fatal-error-lnk1123-failure-during-conversion-to-coff-file-inval
",209,False,en,0
1995,1,2,0,Externals,dpen2000,2014-05-07T21:37:53Z,1,1,1,0,"Change 2010 express edition link because old one redirects to a general page about Visual Studio
",97,True,en,0
1993,1,1,0,Externals,mattbelland,2014-05-07T02:30:08Z,3,3,1,0,"This is just a little typo fix in docs/publishing-a-package.md.
Atom also auto-removed some whitespace, so I figured I'd wrap that in this commit too.
",151,False,en,0
1991,1,1,0,Externals,evinugur,2014-05-07T16:05:56Z,1,2,2,0,"Since you ignore `.DS_Store` I think it's appropriate to ignore `Thumbs.db` in the editor too now since Windows users can also use Atom. These two files are functionally identical between the operating systems and are just clutter.

I also threw Thumbs.db into the gitignore since Windows developers could accidentally commit it when contributing to Atom. (which you might see more of since it's open source now)
",413,True,en,0
1988,1,1,1,Externals,Ferk,2014-05-07T16:12:49Z,1,1,1,0,"The current source tarballs fail to build when the 'set-version' task wants to obtain the version number through git.
This fix attempts to avoid this, using the package.json version when no .git directory is found in the root of the sources.
",242,False,en,0
1978,1,1,0,Externals,kelunik,2014-05-06T22:03:49Z,3,3,1,0,"Allows users to link to their OS's instructions.
",49,True,en,0
1977,3,11,0,Externals,1ace,2014-05-14T00:33:40Z,5,3,1,7,"`script/bootstrap` reads `if (nodeMinorVersion !== '10') {`, shouldn't that be a `< 10`?

This script currently prevents me from building `atom` with nodejs v0.11, but I doubt that was intended.
",195,True,en,0
1975,1,1,0,Externals,giodamelio,2014-05-06T21:53:24Z,1,0,1,0,,0,False,en,0
1972,1,1,0,Externals,dsine-de,2014-05-06T21:32:17Z,1,1,1,0,,0,False,en,0
1971,11,14,7,Externals,abe33,2014-05-12T18:10:37Z,56,6,3,5,"It provides the fix for #1928.

Includes:
- Passing the selection index in the `Editor::mutateSelectedText`
  method callback
- Storing all the selections content on many calls of
  `Selection::copy` with `maintainClipboard = true` in a metadata
  `selections` array
- Handling clipboard with a `selections` metadata in
  the`Editor::pasteText` method
",352,True,en,0
1957,2,1,1,Externals,bogdan-kulynych,2014-05-06T19:48:16Z,2,1,1,0,,0,False,en,0
1951,1,1,0,Externals,jeffbonhag,2014-05-06T18:16:36Z,1,0,1,0,"gyp/npm uses /usr/bin/python to build, which is a problem on systems where
/usr/bin/python is Python 3 or higher.  Fortunately, you can tell npm which
Python to use.
",166,False,en,0
1941,1,7,0,Externals,qJake,2014-05-06T17:34:38Z,2,0,1,0,"Windows instructions were missing ""Git"" prerequisite (users were getting ""Git not found in PATH"" errors from npm).
",115,True,en,0
1935,1,1,0,Externals,tombh,2014-05-06T20:32:17Z,7,1,1,0,"This is the only way I could figure out how to get the exit code from `nohup` _and_ still suppress output whilst notifying of the actual error.

EDIT: BTW this is useful because `atom` just silently fails if something goes wrong.
",230,True,en,0
1929,1,1,0,Externals,pierredup,2014-05-06T15:31:18Z,1,1,1,0,,0,False,en,0
1927,1,1,0,Externals,aaronraimist,2014-05-06T15:26:38Z,1,1,1,0,":memo:
Updates Jasmine link in CONTRIBUTING.md
",47,False,en,0
1926,1,1,0,Externals,0b10011,2014-05-06T15:24:00Z,5,5,1,0,"Touch screens without `:hover` are unable to see the tooltip.
",62,True,en,0
1924,12,0,9,Internals,probablycorey,2014-05-06T14:48:05Z,40,7,1,0,"Make it easier for people to build Atom from scratch.
",54,True,en,0
1923,19,3,0,Internals,nathansobo,2014-05-09T17:46:35Z,403,45,13,3,"The previous editor had a host of scrollbar-related issues that are addressed in this PR:
- The horizontal scrollbar would obscure the last line.
- The vertical scrollbar would obscure the last character.
- The horizontal scrollbar didn't extend the entire width of the editor.
- The dummy scrollbars were always 15px wide rather than the true width of a scrollbar based on the stylesheet.
- The dummy scrollbars remained visible even when content was not scrollable, interfering with mouse clicks.
- Scrollbars didn't respond to stylesheet changes until they were hidden and redisplayed.
",589,False,en,0
1921,3,0,0,Internals,kevinsawicki,2014-05-05T18:36:24Z,49,5,2,0,"The pane sibling methods were throwing errors when the left or rightmost sibling was a `PaneAxis` instead of a `Pane`.

Closes #1917
",133,True,en,0
1920,10,3,0,Externals,cameronmcefee,2014-05-05T17:29:27Z,2,2,5,0,":warning: Don't merge until Tuesday :warning:

This adds the new logo.
",71,True,en,0
1915,3,1,0,Internals,kevinsawicki,2014-05-01T22:30:44Z,34,22,5,1,"Adds `--safe` command line option to not load any packages from `~/.atom/packages` or `~/.atom/dev/packages`.

Closes atom/settings-view#67
",140,True,en,0
1914,4,1,0,Internals,kevinsawicki,2014-04-30T23:21:49Z,37,20,6,0,"Adds an `initialColumn` option to `Workspace::open`

Fixes #1880
",65,True,en,0
1913,1,0,0,Internals,kevinsawicki,2014-04-30T16:35:42Z,7,58,1,0,"This PR cleans up the infrastructure setup to build packages against the latest master build which is no longer used.
- [x] Delete the `atom-public` team
- [x] Remove the `atom-public` user from the atom org.
- [x] Merge this PR
- [x] Delete the `atom-master-builds` repo
",272,False,en,0
1912,4,0,0,Internals,kevinsawicki,2014-04-30T17:10:26Z,28,4,2,0,"I'm assuming `Cursor::isSurroundedByWhitespace` is supposed to only check the character directly before and directly after the cursor.

Previously it was always checking starting at column 0 for whitespace surrounding the cursor since `Math.min` was being used with `0`.

Now I've removed all range bounds corrections since `TextBuffer::getTextInRange` handles that automatically.

Fixes #1901
",394,True,en,0
1911,1,0,0,Internals,kevinsawicki,2014-04-30T16:58:18Z,4,3,2,0,"This was already happening when there was only a comment start pattern, but not when there was a comment end pattern.

Fixes atom/language-html#23
",147,True,en,0
1907,3,0,0,Internals,zcbenz,2014-04-29T07:49:45Z,48,49,6,0,,0,False,en,0
1904,4,0,0,Internals,kevinsawicki,2014-04-24T23:21:49Z,13,11,7,0,"apm is now published: https://www.npmjs.org/package/atom-package-manager
",73,True,en,0
1903,37,0,0,Internals,probablycorey,2014-04-24T22:36:53Z,685,465,24,0,"This removes all deprecated method calls from core. It also adds a 'feature' that will fail any spec that calls a deprecated method.

The packages still are calling deprecated specs, but those can be handled in a separate pull request.
",236,True,en,0
1898,9,9,4,Internals,probablycorey,2014-05-05T19:59:19Z,41,8,6,11,"# To do
- [x] Update Readme [minor updates(https://github.com/atom/atom/commit/3d2dedb49fdb319f3711f1e2574657f4ad6511a5)
- [x] Write a blog post atom/blog.atom.io#36
- [ ] Review atom/atom issues (start at issue ~~#846~~ #1369 )
- [x] Review atom/atom-shell issues (~~start at issue #1~~)
- [ ] Check with legal about the Atom icon/name github/legal#263
- [x] Settle the icon debate github/atom.io#442
- [x] Update the icon in the Atom
- [x] Update the logo in Atom
- [x] Update the logo in the Atom docs
- [x] Update the logo on atom.io
- [x] Update the logo on blog.atom.io
- [x] Update the logo in the blog post
- [x] Update the logo in the settings view
- [x] Contact pr for pr suggestions github/press#47
- [ ] Remove atom-bot from atom org.
- [x] Delete obsolete branches
- [x] Update License
- [x] Update [Feedback package](https://github.com/atom/feedback) to point users to the issue trackers in public repos github/support#373
- [x] Update [FAQ](https://atom.io/faq) github/atom.io#486
### Monday, May 6th
- [ ] Make atom/atom-shell public https://github.com/atom/atom-shell/pull/235
- [ ] atom/grunt-download-atom-shell public and merge atom/grunt-download-atom-shell/pull/3
- [ ] Make sure Atom can be built by people not in the github and atom org.
### Tuesday, May 6th
- [ ] Publish blog post
- [ ] Make atom/atom public
",1335,False,en,0
1883,179,1,0,Internals,nathansobo,2014-04-23T16:06:00Z,2546,94,36,4,"Yesterday I merged PR #1863 but then decided to undo it until I get the new editor more usable. Here's what I know I have to fix before merging. This list may grow a little but it's pretty close.
- [x] Make autocomplete work.
- [x] Fix corner cases that scroll the scroll view when the hidden input is focused.
- [x] Fix corner cases measuring character widths that occur with certain kinds of leading and trailing whitespace.
- [x] Reintroduce scroll to cursor command
- [x] Reintroduce page up and page down commands
- [x] Be explicit about parameters in new delegators
",572,False,en,0
1879,7,2,0,Internals,kevinsawicki,2014-04-18T01:54:30Z,9,15,3,0,"Storing it in `/tmp` hurts people using multiple user accounts on the same machine.

The cache is important enough to warrant storing in ~/.atom, mine was only `12M` and I last cleaned it out months ago, so we aren't talking about a lot of space. Compare that with `~/.atom/.node-gyp` which for me is `250M` and `~/.atom/.npm` which is `373M`

If space does become an issue we can always reap old files.

Fixes #1787
",417,True,en,0
1878,2,0,2,Internals,kevinsawicki,2014-04-18T01:31:42Z,6,0,1,0,"Someone wanted to use this in a bracket-matcher PR and was asking why it wasn't doc'ed.

Seems useful to have in the public API since it handles the transaction for you.

https://github.com/atom/bracket-matcher/pull/25
",219,True,en,0
1876,9,2,6,Internals,kevinsawicki,2014-04-17T20:33:39Z,79,20,2,0,"This will allow the settings view to know the default value so atom/settings-view#104 can be fixed.

I believe also fixes a longstanding bug where defaults sometimes were written to the config file.  Looks like previously we were using `==` to compare the new value against the default value to know whether it should be omitted from the stored settings when it should be using `_.isEqual` instead to handle objects, arrays, etc.
### New Public APIs
- `atom.config.getDefault(keyPath)` - returns a clone of the default value
- `atom.config.isDefault(keyPath)` - returns `true` if the key path value is its default
",614,True,en,0
1875,4,0,0,Internals,kevinsawicki,2014-04-17T19:00:25Z,26,8,4,0,"Use the window that the menu was created on when sending commands.

Previously this would fail since `focusedWindow()` would be null.

Closes atom/tree-view#102
",161,True,en,0
1872,2,2,0,Internals,probablycorey,2014-04-15T23:55:25Z,1,14,2,0,"We don't use these right now. Let's remove these methods until we need them.
",77,True,en,0
1871,10,1,0,Internals,probablycorey,2014-04-16T16:02:41Z,32,19,5,0,"This removes deprecated method calls from core and packages. It also adds a few missing methods and deprecates others.
",119,True,en,0
1868,13,6,0,Internals,probablycorey,2014-04-18T23:08:32Z,55,54,13,4,"This adds [deprecation cop](https://github.com/atom/deprecation-cop) as a package dependency. It will show all deprecated calls sorted by the number of calls.

The thing that annoys me about this deprecation stuff is that it relies on [a global var](https://github.com/atom/grim/blob/master/src/grim.coffee#L4) to store deprecated method calls. But I can't figure out a better alternative.

![https://camo.githubusercontent.com/65d13c7fb7aff362472cb1cdc4c6cd64bbd175bd/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f736b697463682f4465707265636174696f6e5f436f705f2d5f5f55736572735f636f7265795f6769746875625f6465707265636174696f6e2d636f702d32303134303431342d3134343631382e6a7067](https://camo.githubusercontent.com/65d13c7fb7aff362472cb1cdc4c6cd64bbd175bd/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e6177732e636f6d2f736b697463682f4465707265636174696f6e5f436f705f2d5f5f55736572735f636f7265795f6769746875625f6465707265636174696f6e2d636f702d32303134303431342d3134343631382e6a7067)
",1025,True,en,0
1863,155,2,7,Internals,nathansobo,2014-04-18T00:05:55Z,2332,93,35,6,"This PR is about making it easier to optimize the editor view and harder to introduce changes that de-optimize it.
### Problems with the existing editor

Experience building the original editor view taught us that avoiding extra reflows is essential to good performance. We can optimize the shit out of our JS, but if we read from the DOM after touching it, performance is going to suck. If we want to be fast. It's critical that we batch all reads and writes in a reflow-minimizing way, and the less we access the DOM the better. The DOM needs to be treated with kid gloves.

Another hurdle in optimization is the complexity of the original editor implementation. To minimize DOM updates, we had a headache-inducing region invalidation routine. Combine that with lots of ad-hoc DOM updates for various aspects of the view that have evolved over time, and it's pretty difficult to reason about the behavior of the editor.

The editor is one of Atom's most essential components. It needs to be as fast as possible, and we can't afford to get mired in complexity every time we work on it.
### How React.js helps

The core idea behind React is that you express the state of the DOM at a given point of time declaratively, allowing React to compute a minimal set of DOM updates based on a diff with the previous state. This is great, because one source of confusion in the old editor is the sequence of actions that update the DOM. Now that's all abstracted away. React makes DOM programming similar to traditional server-side web programming, where you get to assume a page refresh in between view states.

Rewriting the editor view was also an opportunity to make other improvements, which were easier thanks to the simplicity afforded by starting with a clean slate and using a superior tool:
- Autoscroll is handled entirely in the model layer, which will avoid expensive DOM reads when moving the cursor and allow us to implement page up, page down, etc as methods on the model.
- The model is now aware of the display width of characters, allowing pixel positions to be computed in the model and paving the way for optimization of extremely long lines. We'll be able to break long lines into smaller chunks and only render what's on screen, just like we only render what lines are on screen in the vertical direction. This is only possible if we know how wide characters are. This also paves the way for soft-wrap based on pixel dimensions rather than wrapping at a specific number of characters, which will address a number of issues with soft wrap with non latin characters. It would also make Atom viable as a more general word processor with first class support for variable width fonts.
- The ""plate glass window"" called the overlayer has been removed. It was present to capture mousewheel events so velocity scrolling didn't jerk to a halt when the target of the scroll event was removed. We now delay removal of lines until after mousewheel events stop firing. Now users can access tokens directly with the DOM inspector, and a bunch of complexity involved in relaying click events between layers can be removed.
- The hidden input is now absolutely positioned relative to the scroll view rather than the content inside it and is never allowed to stray out of the visible bounds of the scroll view. This eliminates code required to avoid Chromium's native autoscroll behavior when the input is focused.
- Detecting of insertion of accented characters has been simplified.
### Deployment plan

Changing editor rendering is a pretty huge deal and there are bound to be issues. This editor view has a superior design for the future, but the existing editor view has been battle tested and is stable. We need feedback about the new editor without forcing people to use it, so my plan is to initially deploy it behind a feature flag. The new editor will only be used if `core.useReactEditor` is true.

Steps:
- [x] Get the test suite green with the feature flag turned off. There were a few small changes to the model layer that affect the original editor that need to work.
- [ ] Get the test suite green with the feature flag turned on. This ensures that shims are in place to at least support Atom's default packages. We can learn what else is missing based on feedback from users.
- [x] Do an optimization pass on the React editor. I satisfied myself that React could be fast enough early on, but then added a bunch of features without paying attention to performance. I don't want to roll it out until it's faster than what exists, so we provide an incentive for people to try it.
- Merge this PR, with some features missing
- Implement additional features in subsequent PRs
  - Invisibles
  - IME character composition support
  - fold decoration
  - page up / page down / etc
- Make the react editor the default when it's stable
",4840,False,en,0
1859,1,0,0,Internals,kevinsawicki,2014-04-11T17:39:50Z,13,2,2,0,"Closes #1858 
",14,True,en,0
1857,3,0,0,Internals,kevinsawicki,2014-04-10T20:59:18Z,2,2,1,0,"See atom/text-buffer#17 and atom/text-buffer#18 for more details

Fixes atom/find-and-replace#151
",98,True,en,0
1856,2,0,0,Internals,zcbenz,2014-04-11T03:38:14Z,23,7,6,0,"On Linux and Windows a open dialog can only choose either files or folders, and never both, so we have to provide a separate menu item to open folders.
",152,True,en,0
1855,10,2,0,Internals,probablycorey,2014-04-10T23:39:02Z,37,27,4,1,"When you open Atom directly from Finder (instead of the cli) the default window position is always used. This PR stores the last used window dimensions and uses them when opening a new window.

Fixes #1269 
Waiting on atom/atom-shell#227
",238,True,en,0
1851,5,0,0,Internals,probablycorey,2014-04-15T18:45:47Z,74,85,5,6,"A continuation of https://github.com/atom/atom/pull/1844

There was a deserialization problem. Workspace stores editor instances using `Workspace::addEditor`. But when a workspace is deserialized, editors are created before the `atom.workspace` variable is created, so `Editor` can't call `atom.workspace.addEditor`. This worked before because project is separate from editor creation.

It makes me think storing editors on Workspace isn't a good idea, but I'm not sure of a better place to store them. An alternative is to decouple Pane deserialization from Workspace deserialization. 
",587,True,en,0
1848,22,0,1,Internals,probablycorey,2014-04-10T21:52:21Z,116,75,5,2,"Previously menu items and events were only available from the window that initiated the update method. It was :poop:. This PR creates an AutoUpdateManager class that holds the update state and handles notifying AtomWindows of changes to the AutoUpdate processes.

Fixes #1834, #1846
",283,True,en,0
1844,16,0,8,Internals,probablycorey,2014-04-08T16:52:29Z,78,82,5,3,"Openers and editors were still being stored in Project. This moves the specs and the variables themselves over to Workspace.

Moving Buffers over is something else we could do, but I'm not sure how that fits with our multi-project plans.
",238,True,en,0
1840,2,0,0,Internals,kevinsawicki,2014-04-04T17:59:06Z,29,2,2,0,"Previously newline above with empty lines preceding the current line didn't use the correct indent level.

http://discuss.atom.io/t/insert-line-above-should-respect-indentation/6919
",182,True,en,0
1837,1,0,0,Internals,kevinsawicki,2014-04-04T16:30:05Z,14,1,2,0,"Fixes #1758
",12,True,en,0
1833,1,0,0,Internals,kevinsawicki,2014-04-04T16:28:52Z,14,2,2,0,"Steps to reproduce issue:
-  Create a file with the text (leading whitespace before the `var`):

```
    var sort
```
- Put cursor before the `v`
- Press `alt-delete` (editor:backspace-to-beginning-of-word)
- Whitespace isn't deleted
",234,False,en,0
1832,1,0,0,Internals,kevinsawicki,2014-04-04T16:18:24Z,8,1,2,0,"Previously `Config::setDefaults` called `Config::update` which calls `Config::save`.

This was being called roughly ~30 times during startup since many packages have default values, adding about ~30ms to startup.

I think `Config::update` was being called for the emitting of an `update` event so instead just emit it directly from `Config::setDefaults`.
",355,True,en,0
1826,10,2,3,Internals,probablycorey,2014-04-02T23:14:06Z,4,3,2,0,"This is in preparation for moving the opener functionality from project to workspace. Since we add atom.project to every spec, it also makes sense that atom.workspace should be there as well.
",192,True,en,0
1824,11,17,6,Internals,probablycorey,2014-04-04T22:08:12Z,50,10,10,2,"I think we should start communicating which methods are going to be deprecated to users in a more obvious way. This change will warn users about deprecated methods in the console:

```
WorkspaceView.module.exports.WorkspaceView.getActivePaneItem (/Users/corey/github/atom/src/workspace-view.coffee:353:5) is deprecated. Use Workspace::getActivePaneItem instead

Error: Deprecated Method
  at exports.deprecate (/Users/corey/github/atom/node_modules/grim/lib/grim.js:5:13)
  at WorkspaceView.module.exports.WorkspaceView.getActivePaneItem (/Users/corey/github/atom/src/workspace-view.coffee:353:5)
  at TreeView.module.exports.TreeView.getActivePath (/Users/corey/github/atom/node_modules/tree-view/lib/tree-view.coffee:440:42)
  at TreeView.module.exports.TreeView.selectActiveFile (/Users/corey/github/atom/node_modules/tree-view/lib/tree-view.coffee:220:26)
  at HTMLDivElement.<anonymous> (/Users/corey/github/atom/node_modules/tree-view/lib/tree-view.coffee:88:8)
  at HTMLDivElement.jQuery.event.dispatch (/Users/corey/github/atom/node_modules/space-pen/vendor/jquery.js:4676:9)
  at HTMLDivElement.elemData.handle (/Users/corey/github/atom/node_modules/space-pen/vendor/jquery.js:4360:28)
  at Object.jQuery.event.trigger (/Users/corey/github/atom/node_modules/space-pen/vendor/jquery.js:4594:12)
  at HTMLDivElement.<anonymous> (/Users/corey/github/atom/node_modules/space-pen/vendor/jquery.js:5119:17)
  at Function.jQuery.extend.each (/Users/corey/github/atom/node_modules/space-pen/vendor/jquery.js:590:23)
  at PaneContainerView.jQuery.fn.jQuery.each (/Users/corey/github/atom/node_modules/space-pen/vendor/jquery.js:237:17)
  at PaneContainerView.jQuery.fn.extend.trigger (/Users/corey/github/atom/node_modules/space-pen/vendor/jquery.js:5118:15)
  at PaneContainerView.module.exports.PaneContainerView.onActivePaneItemChanged (/Users/corey/github/atom/src/pane-container-view.coffee:49:6)
  at /Users/corey/github/atom/src/pane-container-view.coffee:1:1
  at /Users/corey/github/atom/node_modules/emissary/lib/emitter.js:133:30
  at Array.forEach (native)
  at Signal.module.exports.Emitter.emit (/Users/corey/github/atom/node_modules/emissary/lib/emitter.js:132:47)
  at Signal.module.exports.Signal.emitValue (/Users/corey/github/atom/node_modules/emissary/lib/signal.js:82:19)
  at /Users/corey/github/atom/node_modules/emissary/lib/behavior.js:81:29
  at /Users/corey/github/atom/node_modules/emissary/lib/emitter.js:133:30
  at Array.forEach (native)
  at Behavior.module.exports.Emitter.emit (/Users/corey/github/atom/node_modules/emissary/lib/emitter.js:132:47)
  at Behavior.module.exports.Behavior.emit (/Users/corey/github/atom/node_modules/emissary/lib/behavior.js:44:38)
  at Behavior.module.exports.Signal.emitValue (/Users/corey/github/atom/node_modules/emissary/lib/signal.js:82:19)
  at /Users/corey/github/atom/node_modules/emissary/lib/signal.js:252:38
  at /Users/corey/github/atom/node_modules/emissary/lib/emitter.js:133:30
  at Array.forEach (native)
  at Behavior.module.exports.Emitter.emit (/Users/corey/github/atom/node_modules/emissary/lib/emitter.js:132:47)
  at Behavior.module.exports.Behavior.emit (/Users/corey/github/atom/node_modules/emissary/lib/behavior.js:44:38)
  at Behavior.module.exports.Signal.emitValue (/Users/corey/github/atom/node_modules/emissary/lib/signal.js:82:19)
  at /Users/corey/github/atom/node_modules/emissary/lib/signal.js:173:28
  at /Users/corey/github/atom/node_modules/emissary/lib/emitter.js:133:30
  at Array.forEach (native)
  at Behavior.module.exports.Emitter.emit (/Users/corey/github/atom/node_modules/emissary/lib/emitter.js:132:47)
  at Behavior.module.exports.Behavior.emit (/Users/corey/github/atom/node_modules/emissary/lib/behavior.js:44:38)
  at Behavior.module.exports.Signal.emitValue (/Users/corey/github/atom/node_modules/emissary/lib/signal.js:82:19)
  at Pane.module.exports.Model.set (/Users/corey/github/atom/node_modules/theorist/lib/model.js:166:21)
  at Pane.accessor.set (/Users/corey/github/atom/node_modules/theorist/lib/model.js:57:23)
  at Pane.module.exports.Pane.activateItem (/Users/corey/github/atom/src/pane.coffee:131:7)
  at Pane.module.exports.Pane.activateItemAtIndex (/Users/corey/github/atom/src/pane.coffee:125:6)
  at Pane.module.exports.Pane.activatePreviousItem (/Users/corey/github/atom/src/pane.coffee:115:8)
  at PaneView._results.push._this.(anonymous function) [as activatePreviousItem] (/Users/corey/github/atom/node_modules/delegato/lib/delegator.js:67:61)
  at HTMLDivElement.<anonymous> (/Users/corey/github/atom/src/pane-view.coffee:63:45)
  at HTMLDivElement.jQuery.event.dispatch (/Users/corey/github/atom/node_modules/space-pen/vendor/jquery.js:4676:9)
  at HTMLDivElement.elemData.handle (/Users/corey/github/atom/node_modules/space-pen/vendor/jquery.js:4360:28)
  at Keymap.module.exports.Keymap.dispatchCommandEvent (/Users/corey/github/atom/node_modules/atom-keymap/lib/keymap.js:388:16)
  at Keymap.module.exports.Keymap.handleKeyboardEvent (/Users/corey/github/atom/node_modules/atom-keymap/lib/keymap.js:171:22)
  at Keymap.module.exports.Keymap.handleKeyEvent (/Users/corey/github/atom/node_modules/atom-keymap/lib/keymap.js:441:12)
  at HTMLDocument.<anonymous> (/Users/corey/github/atom/src/window-event-handler.coffee:58:19)
  at HTMLDocument.jQuery.event.dispatch (/Users/corey/github/atom/node_modules/space-pen/vendor/jquery.js:4676:9)
  at HTMLDocument.elemData.handle (/Users/corey/github/atom/node_modules/space-pen/vendor/jquery.js:4360:28)
```

It can get pretty noisy, but I think this will be helpful as we rev the API.
",5574,True,en,0
1822,11,1,0,Internals,zcbenz,2014-04-02T15:52:06Z,16,10,5,0,,0,False,en,0
1821,4,0,0,Internals,zcbenz,2014-04-02T06:37:48Z,6,7,4,0,"Upgrade to atom-shell@0.11.5 which fixed a few Linux related problems.
",71,True,en,0
1819,8,0,2,Internals,kevinsawicki,2014-04-02T16:08:02Z,5,1,4,0,"Addresses some things in #1814
",31,True,en,0
1817,2,2,0,Internals,probablycorey,2014-04-02T20:15:53Z,1,1,1,0,"I was going to try and write a package in pure ES6 and wanted to use more of the harmony features v8 gives.

Using the --harmony flag gives us all of the harmony functionality and it didn't affect start time (~1360ms for both) or spec run time (~1:10 for both).
",262,True,en,0
1811,3,0,1,Internals,nathansobo,2014-04-01T16:25:02Z,44,43,12,0,"Previously, we referred to the global that contains all the key bindings as the ""keymap"". But there are folders in our packages called `keymaps/`, implying that these files are called keymaps. It's confusing to have one global thing called keymap that contains a bunch of smaller things that are _also_ called keymaps.

Instead, this PR updates `atom.keymap` to become `atom.keymaps` and the class to be called `KeymapManager`. Methods have been renamed to enforce the idea that files containing bindings are called keymaps.

I've left `atom.keymap` in place as a deprecated property. I'd like to merge this so I can publish the blog post and then start working on a deprecation mechanism that we can use to keep track of where we are using deprecated code paths.
",764,True,en,0
1803,12,3,0,Internals,kevinsawicki,2014-03-28T21:21:08Z,50,19,4,0,"`atom.project.getPath()` can sometimes not equal `atom.project.getRepo().getWorkingDirectory()` since libgit2 always provides the path is the case on disk while `atom.project.getPath()` may differ in case to the path on disk on case insensitive filesystems.

Most of the fixes will be in underlying libraries to handle this but a few bundled packages need updating.
- [x] Update status-bar
- [x] Update tree-view
- [x] Update fuzzy-finder
### New Public APIs
- `Git::getCachedPathStatus(path)` - This replaces using `atom.project.getRepo().statuses` directly by adding an API that properly relativizes paths since statuses are now stored relative to the repository root to prevent casing problems.
",698,True,en,0
1799,4,0,1,Internals,probablycorey,2014-03-26T22:58:17Z,19,2,2,0,"Previously the cursor position could get f'd up because of leading whitespace. This happened if invisibles were turned on and the invisible character was a different size that the actual character. This PR fixes all that.
",222,True,en,0
1796,1,0,0,Internals,zcbenz,2014-03-25T12:20:40Z,1,1,1,0,"Changelog:
- mac: Fix crash caused by closing window when showing context menu.
- Fix wrong unresponsive event caused by blocking js call.
",139,False,en,0
1795,8,2,3,Internals,Caged,2014-03-24T20:42:41Z,15,4,2,0,"supersedes #1768.  Head over there for details.

/cc @nathansobo @kevinsawicki 
",80,True,en,0
1789,11,4,0,Internals,zcbenz,2014-03-25T07:42:01Z,104,20,15,0,"This PR added a `mkdeb` task to create a `.deb` package under `/tmp/atom-build` on Debian variants.
",100,True,en,0
1786,1,0,0,Internals,zcbenz,2014-03-24T09:58:16Z,1,1,1,0,"Changelog:
- gtk: Ask whether window is active from WM.
- mac: Build .dSYM for node modules.
- Close devtools completely instead of hiding it.
",143,False,en,0
1781,11,6,0,Internals,nathansobo,2014-03-27T18:04:20Z,28,57,3,5,"WIP: One failure remaining.

Have a keystroke down to ~12ms on my cinema display. Still need to profile the orange area, but as you can see we're < 3ms for the `keydown` and `textInput` processing now. The rest is parsing HTML, layout, and repaint.

![screenshot 2014-03-21 18 37 44](https://f.cloud.github.com/assets/1789/2489284/b039688a-b15a-11e3-98f3-9db995436b51.png)

Seems like starting to approach the limits of chromium here for typing performance. The purple could be faster if we could somehow better contain layout boundaries, but it's not straightforward¬†to do that. The last purple region (recalculate style) and its surrounding whitespace probably can be eliminated by reordering the gutter update that causes it. The green repaint covers a region encompassing both the edited line and the status bar, which seems to be a bad choice on the browser's part.
",872,True,en,0
1777,2,2,0,Internals,nathansobo,2014-03-21T19:12:54Z,12,11,1,0,"- We were reading the scrollView's width after touching the DOM. That's a reflow.
- We were also allocating an options object that didn't really need to exist.

Before:
![screenshot_2014-03-20_17_46_54](https://f.cloud.github.com/assets/1789/2478902/47208c8c-b08a-11e3-9924-2d24e0458bb3.png)

After:
![screenshot_2014-03-20_17_50_21](https://f.cloud.github.com/assets/1789/2478914/90b2ecf0-b08a-11e3-9446-319e21b32bea.png)
",423,False,en,0
1774,12,0,0,Internals,kevinsawicki,2014-03-21T00:32:16Z,108,24,3,0,"Several repos have issues about things not working properly for files in submodules such as line diffs, status bar, checkout head revision, open on GitHub, etc.

This adds core API support for it by taking a `path` argument to the `Git` class methods that will use the right underlying repository if the parent repository has submodules in it.

This PR plus a few minor changes to the packages should get submodules working pretty well.

The underlying `git-utils` library now auto-opens submodules when the parent repository is opened.
### In action

A submodule inside a submodule with line diffs displaying:

![screen shot 2014-03-20 at 4 37 07 pm](https://f.cloud.github.com/assets/671378/2478842/9e677872-b088-11e3-8a24-90d06dcecfa3.png)
",743,True,en,0
1772,3,1,0,Internals,nathansobo,2014-03-20T16:01:08Z,47,0,4,0,"This PR adds a `stylesheets-changed` event to `atom.themes`. In the next commit, the editor view subscribes to this event and recalculates `::lineHeight` and `::charWidth` whenever the stylesheets change. If either value changes, the `Editor.charWidthCache` is cleared and a display update is requested.

Fixes #354
",316,True,en,0
1771,7,3,4,Internals,kevinsawicki,2014-03-19T17:24:05Z,25,8,4,0,"See atom/language-less#1 for more details.

When inserting a newline, don't remove leading whitespace already on the line when auto-indenting.
",143,True,en,0
1769,1,2,0,Internals,thedaniel,2014-03-20T16:04:09Z,1,1,1,1,"does what it says on the tin
",29,True,en,0
1762,18,15,0,Internals,zcbenz,2014-03-19T01:40:11Z,341,32,14,1,,0,False,en,0
1761,1,2,0,Externals,lstoll,2014-03-16T01:17:53Z,2,0,1,0,"Atom currently forces my Macbook Pro to use the discrete graphics card 100% of the time. This has a non-insubstantial impact on battery life, and probably isn't necessary for an editor.

This PR allows the app to use the integrated GPU, as per [Apple's docs](https://developer.apple.com/library/mac/qa/qa1734/_index.html)

Chromium itself also [sets this now](https://chromium.googlesource.com/chromium/chromium/+/trunk/chrome/app/app-Info.plist), so I can't see why we wouldn't.
",480,True,en,0
1760,19,0,18,Internals,nathansobo,2014-03-18T04:40:38Z,44,751,10,3,"- The Keymap's handling of multi-keystroke bindings needed to be overhauled due to atom/vim-mode#129. It now implements the algorithm I described there.
- In addition, if we're ever going to make jQuery optional it's imperative that our Keymap emit native DOM events rather than using jQuery's `.trigger` which won't call handlers registered with the native `.addEventListener` method.

I took the opportunity to address both these issues while extracting the Keymap to its own [npm](https://github.com/atom/atom-keymap) that we can open source. This was basically a ground-up rewrite that heavily borrowed from the previous implementation. Shims are in place so that the old keymap specs were green at the time of deletion.

There are a few methods that weren't appropriate to extract into a generic library for dealing with the built-in and user key bindings. As with the TextBuffer extraction, this is a bit awkward. I opted to add the to the Keymap prototype in `keymap-extensions.coffee`. Other ideas are welcome.

Remaining:
- [x] Iron out broken bindings via manual testing (not a ton of test coverage on key bindings)
- [x] Ensure documentation generates correctly
- [x] Update docs for Keymap class in atom-keymap module
- [x] Test going into pending states recursively
",1279,False,en,0
1757,2,0,6,Internals,probablycorey,2014-03-14T00:42:19Z,15,3,2,0,"This redirects stderr to /dev/null when the --help or --version arguments are used. It also shortens the help text so it fits within 80 chars.
",143,True,en,0
1756,5,0,0,Internals,kevinsawicki,2014-03-13T18:36:11Z,46,20,2,0,"https://bugsnag.com/atom/atom/errors/52c1da0783a277d9f7ed0eef

Closes #1755
",76,True,en,0
1753,4,2,3,Internals,probablycorey,2014-03-13T18:26:16Z,14,8,1,0,"It now looks in /Applications, ~/Applications, /Applications/Utilities, ~/Applications/Utilities/, and ~/Downloads

Sorta closes #1595
",135,True,en,0
1742,1,0,0,Internals,zcbenz,2014-03-11T14:21:43Z,1,1,1,0,"Changelog:
- Make iframe sandboxed by default.
- Fix a crash caused when calling BrowserWindow.isWebViewFocused.
",113,False,en,0
1741,1,0,0,Internals,zcbenz,2014-03-11T17:10:36Z,22,15,2,0,"Fixes https://github.com/atom/atom-shell/issues/203 and fixes https://github.com/atom/atom/issues/1670 which is a duplicate.
",125,True,en,0
1740,1,0,0,Internals,kevinsawicki,2014-03-11T01:56:36Z,1,1,1,0,"A [cson parser](https://github.com/groupon/cson-safe) now exists so no more `CoffeeScript.eval` to ""compile"" CSON file.

This updates the `grunt-cson` version to one that uses the new parser.
",192,True,en,0
1738,1,1,0,Internals,izuzak,2014-03-10T17:34:34Z,1,1,1,0,"See: https://github.com/atom/underscore-plus/commit/31c7cb6d50922a5237523f1282f0607679eff563
",93,True,de,0
1728,1,0,0,Internals,zcbenz,2014-03-07T14:11:24Z,1,1,1,0,"Enable accelerated composition.
",32,True,en,0
1717,3,1,0,Internals,probablycorey,2014-03-06T19:24:56Z,4,10,2,0,"The [release-notes](https://github.com/atom/release-notes) package had a bug where people would see `undefined` for the release notes. This is because when a new window opened after Atom was updated the release notes were unavailable. 

In the future we can store the release notes, but since anything related to updates and the browser process takes a lot of time to fix I'm holding off on that improvement because it seems like a low priority.
",446,True,en,0
1716,1,1,0,Internals,probablycorey,2014-03-06T17:41:05Z,2,1,1,0,"This adds a little note to telling people to avoid naming packages with `atom-` as the prefix.
",95,True,en,0
1710,18,2,7,Internals,nathansobo,2014-03-07T02:01:59Z,150,100,13,0,"Closes #1707
",13,True,en,0
1706,1,0,0,Internals,kevinsawicki,2014-03-06T00:18:26Z,1,1,1,0,"This updates first-mate to fully support `contentName` in grammars which was causing major issues for people using the PHP package since it heavily uses `contentName` in the grammar.
",183,True,en,0
1702,11,9,4,Internals,ptoomey3,2014-03-08T00:20:22Z,41,34,5,2,"This PR aims to enable CSP for Atom to prevent XSS that leads to command execution via Node.  This initial pass unfortunately requires us setting the `unsafe-eval` value for the `script-src` directive.  This seems to be needed in order for the dev spec tests to be able to auto-generate some JS via `eval()`.  The stack trace can be found below. So, it would be nice if we could come up with a way to allow unit tests to run without having to directly inherit the CSP policy.  Also, I still need to add a few unit tests.  I just wanted to post the PR early so that folks could chime it regarding anything they think might break, workarounds for any issues that come up, etc.

@nathansobo @thedaniel @mastahyeti @gregose 

```
EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: ""script-src 'self'"".

  at compile (/Users/ptoomey3/github/atom/node_modules/pegjs/lib/compiler/passes/generate-javascript.js:538:30)
  at generateRuleFunction (/Users/ptoomey3/github/atom/node_modules/pegjs/lib/compiler/passes/generate-javascript.js:633:12)
  at /Users/ptoomey3/github/atom/node_modules/pegjs/lib/compiler/passes/generate-javascript.js:947:26
  at Object.utils.each (/Users/ptoomey3/github/atom/node_modules/pegjs/lib/utils.js:52:7)
  at module.exports (/Users/ptoomey3/github/atom/node_modules/pegjs/lib/compiler/passes/generate-javascript.js:946:11)
  at runPass (/Users/ptoomey3/github/atom/node_modules/pegjs/lib/compiler.js:40:7)
  at Object.utils.each (/Users/ptoomey3/github/atom/node_modules/pegjs/lib/utils.js:52:7)
  at Object.module.exports.compile (/Users/ptoomey3/github/atom/node_modules/pegjs/lib/compiler.js:52:15)
  at Object.module.exports.buildParser (/Users/ptoomey3/github/atom/node_modules/pegjs/lib/peg.js:44:26)
  at Function.module.exports.KeyBinding.parseKeystroke (/Users/ptoomey3/github/atom/src/key-binding.coffee:34:23)
  at /Users/ptoomey3/github/atom/src/key-binding.coffee:21:15
  at Array.map (native)
  at Function.module.exports.KeyBinding.normalizeKeystroke (/Users/ptoomey3/github/atom/src/key-binding.coffee:20:50)
  at new KeyBinding (/Users/ptoomey3/github/atom/src/key-binding.coffee:41:29)
  at Keymap.module.exports.Keymap.bindKeys (/Users/ptoomey3/github/atom/src/keymap.coffee:169:24)
  at Keymap.module.exports.Keymap.add (/Users/ptoomey3/github/atom/src/keymap.coffee:162:8)
  at Keymap.module.exports.Keymap.load (/Users/ptoomey3/github/atom/src/keymap.coffee:158:6)
  at Keymap.module.exports.Keymap.loadDirectory (/Users/ptoomey3/github/atom/src/keymap.coffee:155:8)
  at Keymap.module.exports.Keymap.loadBundledKeymaps (/Users/ptoomey3/github/atom/src/keymap.coffee:120:6)
  at Object.<anonymous> (/Users/ptoomey3/github/atom/spec/spec-helper.coffee:25:13)
  at Object.<anonymous> (/Users/ptoomey3/github/atom/spec/spec-helper.coffee:1:1)
  at Module._compile (module.js:455:26)
  at Object.requireCoffeeScript [as .coffee] (/Users/ptoomey3/github/atom/src/coffee-cache.coffee:38:10)
  at Module.load (/Users/ptoomey3/github/atom/node_modules/coffee-script/lib/coffee-script/register.js:45:36)
  at Function.Module._load (module.js:311:12)
  at Module.require (module.js:363:17)
  at require (module.js:379:17)
  at Object.<anonymous> (/Users/ptoomey3/github/atom/spec/spec-suite.coffee:5:1)
  at Object.<anonymous> (/Users/ptoomey3/github/atom/spec/spec-suite.coffee:1:1)
  at Module._compile (module.js:455:26)
  at Object.requireCoffeeScript [as .coffee] (/Users/ptoomey3/github/atom/src/coffee-cache.coffee:38:10)
  at Module.load (/Users/ptoomey3/github/atom/node_modules/coffee-script/lib/coffee-script/register.js:45:36)
  at Function.Module._load (module.js:311:12)
  at Module.require (module.js:363:17)
  at require (module.js:379:17)
  at module.exports.runSpecSuite (/Users/ptoomey3/github/atom/spec/jasmine-helper.coffee:30:3)
  at Object.<anonymous> (/Users/ptoomey3/github/atom/spec/spec-bootstrap.coffee:16:3)
  at Object.<anonymous> (/Users/ptoomey3/github/atom/spec/spec-bootstrap.coffee:2:1)
  at Module._compile (module.js:455:26)
  at Object.requireCoffeeScript [as .coffee] (/Users/ptoomey3/github/atom/src/coffee-cache.coffee:38:10)
  at Module.load (/Users/ptoomey3/github/atom/node_modules/coffee-script/lib/coffee-script/register.js:45:36)
  at Function.Module._load (module.js:311:12)
  at Module.require (module.js:363:17)
  at require (module.js:379:17)
```
",4446,True,en,0
1701,1,0,0,Internals,zcbenz,2014-03-05T14:23:08Z,1,1,1,0,"Atom-Shell Changelog:
- Fix crashes caused by dialog API.
- Disable undocked devtools.
- Fix web security.
- Disable node integration in iframes by default.
- Add `activate-with-no-open-windows` event for app.
- Provide debug symbols on Linux.
",244,False,en,0
1700,4,1,0,Internals,kevinsawicki,2014-03-05T01:57:09Z,4,6,3,0,"Now that `apm` ships node we no longer need to copies of it distributed with atom, one for the CLI and one when spawned from the settings view, package generator, etc.

This breaks backwards compatibility since `atom.packages.getApmPath()` now requires spawning it using `BufferedProcess` instead of a `BufferedNodeProcess`.
",325,True,en,0
1699,4,5,0,Internals,probablycorey,2014-03-05T23:00:42Z,37,5,3,0,"Currently, keystrokes that use shift and an alpha char aren't handled correctly. For example, if you put...

``` coffeescript
'.editor':
  'cmd-shift-u': 'editor:select-line'
```

...into your keymap file it wouldn't trigger, but `cmd-U` would. This pull normalizes all keystrokes that use alpha chars and the shift key so they match the pattern `modifier-capitalLetter`
",371,True,en,0
1698,1,1,0,Internals,nathansobo,2014-03-05T01:16:07Z,10,2,2,0,"Fixes #1681
",12,True,en,0
1697,2,2,0,Internals,kevinsawicki,2014-03-05T23:18:21Z,4,1,2,0,"This retains the cursor position across reloads/restarts of Atom
",65,True,en,0
1695,2,0,0,Internals,nathansobo,2014-03-04T23:52:19Z,16,1,2,0,"Fixes #1342 

Still in progress. Need to add some specs.

![soft-wrap-scrollbars](https://f.cloud.github.com/assets/1789/2327428/ae8cacb8-a3ef-11e3-93fd-9c79b786e3db.gif)
",171,True,en,0
1693,5,0,0,Internals,probablycorey,2014-03-04T22:03:38Z,31,23,3,0,"Click ""Check for update"" was causing Atom to crash when the dialog appeared. I wasn't able to fix the dialog problem because it seems to be a deeper atom-shell issue. Instead I replace the ""Check for Update"" menu item with a ""Downloading Update"" menu item.
",257,True,en,0
1683,4,0,0,Internals,kevinsawicki,2014-03-04T18:32:53Z,8,4,3,0,"In a rush to get things working again when the [npm cert](http://blog.npmjs.org/post/78085451721/npms-self-signed-certificate-is-no-more) issue happened I disabled strict ssl checking since the jankys use the version of npm that was broken.

After more research we could just use a custom `.npmrc` file during the atom bootstrap that sets `ca` to an empty string and also starts caching modules in `~/.atom/.npm` so that it can be cleaned when we want to reset CI.
",465,True,en,0
1680,5,1,3,Internals,izuzak,2014-03-04T17:26:38Z,14,5,2,0,"A few tweaks to the docs:
- fixed one instance where ""+"" was used instead of ""-"" in a keybord shortcut
- added links to CSON and CoffeeScript to the docs (a link to LESS was already there)
- removed a public link to the apm repository which is currently private
- added a short init.coffee example, to go with the [short styles.less example](https://atom.io/docs/latest/customizing-atom#stylesless)
",399,False,en,0
1674,3,1,4,Internals,nathansobo,2014-03-04T18:08:25Z,18,0,3,0,"As is discussed in #1672, styling scrollbars forces them to be visible. We want to be able to _only_ style scrollbars if the user's has chosen to have them always be visible to begin with, and otherwise leave the overlay behavior.

This PR adds a `scrollbars-visible-always` or `scrollbars-visible-when-scrolling` class to the workspace view so we can only enable scrollbar styles when scrollbars are visible ""always"". This should help us merge PRs like atom/atom-dark-ui#12.
",476,True,en,0
1671,5,0,2,Internals,nathansobo,2014-03-04T18:18:34Z,170,78,3,0,"This just cleans up all the public method docs on these two classes and improves their overview.

One potentially controversial change was the removal of the command summary from `WorkspaceView`, since I think people should call methods rather than triggering commands programmatically.

I've also started exporting `Workspace` from the `atom` module so people can construct only a model in specs.
",398,True,en,0
1660,1,0,0,Internals,zcbenz,2014-03-02T10:54:31Z,1,1,1,0,"- Fix unresponsive window when using alert().
- Suppress CFAllocator warning, fixes #1627.
- Fix a crash from node.
",116,False,en,0
1657,2,0,0,Internals,nathansobo,2014-03-01T22:50:12Z,18,24,3,0,"If `open` is called with no uri, we should always open a new unsaved buffer.

Refs #1600
",89,True,en,0
1644,8,3,9,Internals,benogle,2014-03-03T22:21:28Z,32,11,2,2,"My proposal for new syntax variables. Fixes #1609 
- New syntax themes would have this file generated for them

I want your feedback on naming. Am I missing something? I will be updating all the themes to include these...

Part of me wants to have things like `@comment-color` and `@string-color`, but maybe we stick to only colors that are common in every syntax theme. 
",372,False,en,0
1623,1,0,0,Internals,nathansobo,2014-02-28T18:38:08Z,11,4,2,0,"Fixes #1574
",12,True,en,0
1622,2,1,0,Internals,nathansobo,2014-02-28T18:33:10Z,7,0,2,0,"This should fix at least some of the translation errors in display buffer. Hopefully all of them.
",98,True,en,0
1618,6,6,0,Internals,zcbenz,2014-03-01T11:31:59Z,102,38,4,1,"This PR adds the `dump-symbols` task which would generate debug symbols for all the native modules, and the symbols would be uploaded to GitHub Release when publishing build.

/cc @kevinsawicki I don't know how the official build is deployed, can you help make sure the `atom-mac-symbols.zip` is uploaded when publishing a release in atom/atom?
",345,True,en,0
1617,1,1,0,Internals,gjtorikian,2014-02-28T22:10:41Z,2,3,1,0,"From support/d444cb549f4c11e38d9e02537bbc77fe

The prose and the syntax in this article don't match.
",101,True,en,0
1611,4,2,4,Internals,benogle,2014-02-28T01:13:52Z,19,12,1,0,"I want the naming conventions to be clear for themes, so this.
",63,True,en,0
1610,4,0,3,Internals,nathansobo,2014-02-27T23:50:47Z,15,7,2,0,"Previously, lots of situation-specific information was being baked into the error message, which is also used as the grouping mechanism for errors on bugsnag. This PR adds a custom error class for translation errors and pushes situation specific information into a metadata field which is now sent to Bugsnag by [exception-reporting 0.16.0](https://github.com/atom/exception-reporting/releases/tag/v0.16.0).
",408,True,en,0
1607,1,1,0,Internals,kevinsawicki,2014-02-27T23:39:11Z,2,2,1,0,"336 people have tried to open a file larger than 1MB 1345 times, let's bump it to 2MB and see what happens.
",108,True,en,0
1599,2,0,0,Internals,zcbenz,2014-02-27T17:18:32Z,1,1,1,0,"Fixed some crashes.
",20,True,en,0
1583,16,0,0,Internals,nathansobo,2014-02-28T01:12:49Z,709,335,12,2,"This PR does the following:
- Adds complete and correct documentation to all public methods on `Editor`
- Privatizes methods on `Editor` that we can all agree on. Kept a few methods private that need to be changed to handle multiple cursors.
- Renames `::joinLine` to `::joinLines`
- Removes metaprogrammed delegators for a few methods that need documentation.
- Make `::unfoldBufferRow` destroy all folds containing the given row, which I think would be the expected behavior.

Can you guys take a look and feel free to merge it in if you think it's ready? I think it's a big improvement overall.
",598,False,en,0
1581,1,0,0,Internals,zcbenz,2014-02-25T14:19:43Z,1,1,1,0,,0,False,en,0
1578,5,1,0,Internals,kevinsawicki,2014-02-24T01:35:38Z,26,21,17,0,"Packages are now directly depending on these via their `package.json` so they can be safely removed from the main `atom` exports object.

Closes #1479
",151,True,en,0
1575,1,0,0,Internals,leereilly,2014-02-23T06:18:01Z,1,1,1,0,"Per the Style Guide @ https://github.com/styleguide/words.

<img src=""http://themavesite.com/TMS-Pictures/Epic/Memes/Monocle.png"" height=""150"">
",144,True,en,0
1572,6,0,6,Internals,kevinsawicki,2014-02-23T01:41:10Z,55,52,2,1,"Bring it up to date

Refs #1537 
",33,True,en,0
1561,6,0,0,Internals,nathansobo,2014-02-21T00:09:47Z,52,49,13,0,"This PR uses and updated version of Biscotto (atom/biscotto#27) that interprets method references as follows:
- `Foo.bar` is a class method
- `Baz::quux` is an instance method

This blends in cleanly with the CoffeeScript literal syntax and brings much joy. The new syntax is used both in the interpretation of `{}` links in method comments and in the generated docs.
",368,False,en,0
1558,5,0,0,Internals,kevinsawicki,2014-02-20T01:51:31Z,2,2,2,0,"Updates apm and settings-view to be able to show featured packages/themes and search.

New apm commands
- `apm featured` to see the featured packages/themes
- `apm view <package_name>` to see info for a specific package
- `apm search <query>` to search for packages/themes
",273,True,en,0
1557,7,0,0,Internals,kevinsawicki,2014-02-19T19:03:44Z,6,13,4,0,"Packages now directly depend on `pathwatcher` to obtain `File` and `Directory` classes.

Follow on to #1553 
",109,True,en,0
1556,7,0,11,Internals,nathansobo,2014-02-19T22:14:38Z,140,0,1,0,"We need to make the contributing guide available on atom.io since the current `CONTRIBUTING.md` in the atom/atom repository root won't be publicly visible. This guide focuses on contributing to packages since the core code won't be available until the end of the beta. It's intended to be linked from the `CONTRIBUTING.md` file of each public package.

In addition to revised content from the original `CONTRIBUTING.md`, there's now a guide to the basic workflow for hacking on a package, including a review of `apm develop`, `apm link -d`, and running in development mode.
",574,True,en,0
1555,3,0,0,Internals,probablycorey,2014-02-20T22:10:13Z,12,5,1,1,"This is a minor bug fix and moving parts of the Pane API to Workspace (so we don't need workspace view to handle with panes)
",125,True,en,0
1554,7,0,0,Internals,probablycorey,2014-02-20T22:00:06Z,74,71,5,1,"This renames methods on WorkspaceView that return PaneViews. Previously it appeared like the methods returned Pane objects. Now the methods are named so it is clear that they return PaneViews.
",193,True,en,0
1553,18,1,0,Internals,kevinsawicki,2014-02-19T17:26:48Z,32,2078,17,0,"- [x] Extract File class
- [x] Extract Directory class
- [x] Extract TextBuffer class
- [x] Add back Atom size limit on opened files
- [x] Add back `runas` support for saving files privileges 
",193,False,en,0
1552,13,2,0,Internals,kevinsawicki,2014-02-18T00:21:23Z,15,15,6,0,"Stop these from happening in the CI output:

```
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/vendor/apm/node_modules/npm/node_modules/npm-registry-client requires semver@'^2.2.1' but will load
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/vendor/apm/node_modules/npm/node_modules/semver,
npm WARN unmet dependency which is version 2.2.1
npm WARN package.json github-url-from-git@1.1.1 No repository field.
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/apm/node_modules/atom-package-manager/node_modules/npm/node_modules/npm-registry-client requires semver@'^2.2.1' but will load
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/apm/node_modules/atom-package-manager/node_modules/npm/node_modules/semver,
npm WARN unmet dependency which is version 2.2.1
npm WARN package.json nslog@0.4.0 No description
npm WARN package.json github-url-from-git@1.1.1 No repository field.
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/fs-plus requires season@'~0.14.0' but will load
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/season,
npm WARN unmet dependency which is version 1.0.0
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/oniguruma requires nan@'0.7.0' but will load
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/nan,
npm WARN unmet dependency which is version 0.8.0
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/snippets requires season@'~0.13.0' but will load
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/season,
npm WARN unmet dependency which is version 1.0.0
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/spell-check/node_modules/spellchecker requires nan@'0.7.0' but will load
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/nan,
npm WARN unmet dependency which is version 0.8.0
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/terminal/node_modules/pty.js requires nan@'0.7.0' but will load
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/nan,
npm WARN unmet dependency which is version 0.8.0
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/symbols-view/node_modules/ctags requires nan@'0.7.0' but will load
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/nan,
npm WARN unmet dependency which is version 0.8.0
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/atom-package-manager/node_modules/npm/node_modules/npm-registry-client requires semver@'^2.2.1' but will load
npm WARN unmet dependency /private/var/lib/jenkins/workspace/atom-615ee4b3dc03/node_modules/atom-package-manager/node_modules/npm/node_modules/semver,
npm WARN unmet dependency which is version 2.2.1
```
",3188,True,en,0
1551,47,10,0,Internals,nathansobo,2014-02-21T22:57:52Z,181,45,14,4,":lantern: **In Progress** :lantern:

Refs #1535

This PR should not go green until all bundled modules have a known permissive license. The following issues still need to be resolved:

**Determine whether licenses added in subsequent versions are sufficient or upgrade the following:**
- [x] domutils@1.0.1 (~~submitted a PR to gjtorikian/task-lists-js#2 to upgrade to a licensed dependency~~ now waiting on gjtorikian/roaster#5)

**Add licenses to all libraries controlled by GitHub:**
- [x] clear-cut
- [x] isbinaryfile
- [x] tasks-lists (asked @gjtorikian to publish w/ license in gjtorikian/task-lists-js#1)
- [x] packages derived from permissively-licensed TextMate bundles

**Convince author to add a license or switch to an alternative for the following libraries:**
- [x] replace (requested in harthur/replace#33)
- [x] slug (~~requested in dodo/node-slug#15~~ requested to drop the dependency in gjtorikian/roaster#6)
- [x] specificity (requested via PR in keeganstreet/specificity#7)
- [x] unicode (requested in dodo/node-unicodetable#13)

**Convince authors of unlicensed TextMate bundles we derive from to add licenses.**
- [x] coffee-script-tmbundle (requested in jashkenas/coffee-script-tmbundle/issues/153) just going to allow it for now and work it out later.
",1276,True,en,0
1550,62,2,0,Internals,kevinsawicki,2014-02-17T23:06:42Z,395,518,16,0,"This updates all the `language-*` package to use Atom's package layout, allowing us to remove `TextMatePackage` from core.

`apm init --convert` now generates a package using the standard Atom package layout as well.
",217,True,en,0
1549,4,7,0,Internals,kevinsawicki,2014-02-20T02:26:28Z,0,4,1,2,"Closes #1477
Refs #1537
",24,False,fr,0
1547,1,5,0,Internals,kevinsawicki,2014-02-15T01:03:21Z,0,5,1,0,"Noticed this occurs often if you close Atom with two editors open:

```
TypeError: Cannot call method 'getBufferPosition' of undefined
  at Editor.module.exports.Editor.getCursorBufferPosition (/Users/kevin/github/atom/src/editor.coffee:992:18)
  at CursorPositionView.module.exports.CursorPositionView.updateCursorPositionText (/Users/kevin/github/atom/node_modules/status-bar/lib/cursor-position-view.coffee:17:5)
  at HTMLDivElement.<anonymous> (/Users/kevin/github/atom/node_modules/status-bar/lib/cursor-position-view.coffee:1:1)
  at HTMLDivElement.jQuery.event.dispatch (/Users/kevin/github/atom/node_modules/space-pen/vendor/jquery.js:4676:9)
  at HTMLDivElement.elemData.handle (/Users/kevin/github/atom/node_modules/space-pen/vendor/jquery.js:4360:28)
  at Object.jQuery.event.trigger (/Users/kevin/github/atom/node_modules/space-pen/vendor/jquery.js:4594:12)
  at HTMLDivElement.<anonymous> (/Users/kevin/github/atom/node_modules/space-pen/vendor/jquery.js:5119:17)
  at Function.jQuery.extend.each (/Users/kevin/github/atom/node_modules/space-pen/vendor/jquery.js:590:23)
  at CursorView.jQuery.fn.jQuery.each (/Users/kevin/github/atom/node_modules/space-pen/vendor/jquery.js:237:17)
  at CursorView.jQuery.fn.extend.trigger (/Users/kevin/github/atom/node_modules/space-pen/vendor/jquery.js:5118:15)
  at CursorView.module.exports.CursorView.updateDisplay (/Users/kevin/github/atom/src/cursor-view.coffee:56:8)
  at EditorView.module.exports.EditorView.updateCursorViews (/Users/kevin/github/atom/src/editor-view.coffee:935:20)
  at EditorView.module.exports.EditorView.updateDisplay (/Users/kevin/github/atom/src/editor-view.coffee:920:6)
  at EditorView.module.exports.EditorView.resetDisplay (/Users/kevin/github/atom/src/editor-view.coffee:900:6)
  at EditorView.module.exports.EditorView.afterAttach (/Users/kevin/github/atom/src/editor-view.coffee:492:6)
  at callAttachHook (/Users/kevin/github/atom/node_modules/space-pen/lib/space-pen.js:323:107)
  at [object Object].jQuery.fn.(anonymous function) [as append] (/Users/kevin/github/atom/node_modules/space-pen/lib/space-pen.js:339:9)
  at PaneView.module.exports.PaneView.onActiveItemChanged (/Users/kevin/github/atom/src/pane-view.coffee:138:16)
  at /Users/kevin/github/atom/src/pane-view.coffee:1:1
  at /Users/kevin/github/atom/node_modules/emissary/lib/emitter.js:134:30
  at Array.forEach (native)
  at Behavior.module.exports.Emitter.emit (/Users/kevin/github/atom/node_modules/emissary/lib/emitter.js:133:47)
  at Behavior.module.exports.Behavior.emit (/Users/kevin/github/atom/node_modules/emissary/lib/behavior.js:44:38)
  at Behavior.module.exports.Signal.emitValue (/Users/kevin/github/atom/node_modules/emissary/lib/signal.js:82:19)
  at Pane.module.exports.Model.set (/Users/kevin/github/atom/node_modules/theorist/lib/model.js:166:21)
  at Pane.accessor.set (/Users/kevin/github/atom/node_modules/theorist/lib/model.js:57:23)
  at Pane.module.exports.Pane.activateItem (/Users/kevin/github/atom/src/pane.coffee:132:7)
  at Pane.module.exports.Pane.activateItemAtIndex (/Users/kevin/github/atom/src/pane.coffee:126:6)
  at Pane.module.exports.Pane.activatePreviousItem (/Users/kevin/github/atom/src/pane.coffee:116:8)
  at Pane.module.exports.Pane.removeItem (/Users/kevin/github/atom/src/pane.coffee:172:10)
  at /Users/kevin/github/atom/src/pane.coffee:39:43
  at /Users/kevin/github/atom/node_modules/emissary/lib/emitter.js:134:30
  at Array.forEach (native)
  at Editor.module.exports.Emitter.emit (/Users/kevin/github/atom/node_modules/emissary/lib/emitter.js:133:47)
  at Editor.module.exports.Model.destroy (/Users/kevin/github/atom/node_modules/theorist/lib/model.js:226:19)
  at EditorView.module.exports.EditorView.beforeRemove (/Users/kevin/github/atom/src/editor-view.coffee:763:14)
  at jQuery.cleanData (/Users/kevin/github/atom/node_modules/space-pen/lib/space-pen.js:375:16)
  at Function.jQuery.cleanData (/Users/kevin/github/atom/src/space-pen-extensions.coffee:11:3)
  at EditorView.jQuery.fn.extend.remove (/Users/kevin/github/atom/node_modules/space-pen/vendor/jquery.js:5494:12)
  at EditorView.module.exports.EditorView.remove (/Users/kevin/github/atom/src/editor-view.coffee:757:5)
  at WorkspaceView.module.exports.WorkspaceView.remove (/Users/kevin/github/atom/src/workspace-view.coffee:296:16)
  at Atom.module.exports.Atom.unloadEditorWindow (/Users/kevin/github/atom/src/atom.coffee:289:20)
  at /Users/kevin/github/atom/src/atom.coffee:274:10
  at jQuery.event.dispatch (/Users/kevin/github/atom/node_modules/space-pen/vendor/jquery.js:4676:9)
  at elemData.handle (/Users/kevin/github/atom/node_modules/space-pen/vendor/jquery.js:4360:28)
```
",4660,True,en,0
1545,41,0,10,Internals,kevinsawicki,2014-02-14T23:03:52Z,196,112,3,0,"Cleaning up `SelectListView` based on reviewing the `grammar-selector` package.
",80,True,en,0
1544,18,0,2,Internals,kevinsawicki,2014-02-14T01:27:34Z,112,5,4,0,"A guide to publishing a package, feedback welcome.

Refs #1537
",63,True,en,0
1543,9,1,0,Internals,zcbenz,2014-02-13T22:51:45Z,40,37,6,0,"This PR uses node-runas to run command with privilege when got EACESS error while installing command, fixes #1463.

One problem is that Atom tries to install command on startup, so Atom would keep asking for user's password on startup if current user doesn't have write permission to '/user/local/bin', which is quite annoying.
",328,True,en,0
1542,1,0,0,Internals,zcbenz,2014-02-13T06:14:50Z,1,1,1,0,"Fixes #1086 and a few other Windows quirks.
",44,True,en,0
1539,12,0,0,Internals,probablycorey,2014-02-13T22:23:12Z,180,178,5,0,"This moves methods from Project to Workspace where they make more sense.

We should also move all buffer and editor state out of project, but there aren't any public API's that reference those. So I left them out of the PR.

Closes #1533
",238,True,en,0
1536,7,1,0,Internals,kevinsawicki,2014-02-12T21:07:39Z,27,21,1,0,"Prevents cursor blink from going out of sync by using a single interval to update all current cursors.

Closes #1504 
",118,True,en,0
1534,11,0,0,Internals,kevinsawicki,2014-02-12T00:06:23Z,147,18,2,0,"Fixes for moving folded lines up/down and moving lines around folded lines.

Closes #1210
",90,True,en,0
1532,3,2,0,Internals,kevinsawicki,2014-02-11T23:55:10Z,29,2,6,0,"- [x] Make increase/decrease font size commands consistent
- [x] Add `cmd-0` keybinding to reset the font size to the default

Closes #1462
",140,False,en,0
1529,5,2,1,Internals,zcbenz,2014-02-12T12:47:01Z,19,2,3,1,"Fixes #310.
",12,True,en,0
1528,29,0,0,Internals,kevinsawicki,2014-02-11T17:33:31Z,215,229,2,0,"- [x] Use tweaks from jasmine-focused to simplify stack traces
- [x] Use bootstrap styles
- [x] Show package name at top of runner
- [x] Prefix failure descriptions with _it_ so that they read better
- [x] Use fold/unfold octicons

The motivation here is that this is a piece of the Atom UI that package authors will use constantly so let's give it a little polish.
### Before

![screen shot 2014-02-10 at 6 43 45 pm](https://f.cloud.github.com/assets/671378/2133511/6dd42bae-92c6-11e3-8afb-4ba9a299f995.png)
### After

![screen shot 2014-02-10 at 7 20 13 pm](https://f.cloud.github.com/assets/671378/2133691/83fc6c84-92cb-11e3-9084-260e620646f9.png)
",651,False,en,0
1527,12,1,1,Internals,probablycorey,2014-02-11T19:27:03Z,164,167,11,0,"I am [cleaning up](https://github.com/atom/markdown-preview/tree/cj-package-cleanup) Markdown Preview so it can be used as an example for package creators. While doing this I ran into a few things that I want to change in core. Originally this was going to be several pull requests, but yada yada yada I'm just going to do it all in this PR.
1. Remove deferred package deserializers. Markdown Preview was the only package using this and it added unneeded complication to the code.
2. Add WorkspaceView::getActivePaneView (to replace WorkspaceView::getActivePane)
3. Add `expect(something).toHaveFocus()` jasmine expectation
4. Remove Workspace::openSingletonSync and add its functionality to Workspace::open
",708,False,en,0
1526,29,0,0,Internals,kevinsawicki,2014-02-12T00:56:49Z,183,135,12,1,"Follow on to #1518 

Closes #1525 
",35,True,en,0
1524,3,0,0,Internals,kevinsawicki,2014-02-11T16:52:48Z,31,10,2,0,"This is a problem I see happen occasionally but I only recently found reproduction steps to make it happen consistently.
1. Open a file that is in a Git repo
2. Modify the buffer
3. Save the buffer
4. Modify the buffer
5. Run `cmd-option-z` (Git reset command)
6. Hit cancel from the dialog prompting you to reload
7. Save the buffer
8. Run `cmd-option-z` (Git reset command)
9. Reload dialog shows appears again

I'm assuming the reload dialog in step 9 shouldn't appear since once you save a buffer it should no longer report being in conflict, so the next reset command should occur cleanly.
",595,False,en,0
1523,7,0,0,Internals,kevinsawicki,2014-02-07T18:13:04Z,30,4,9,0,"Closes #1494 
",14,True,en,0
1520,30,2,0,Internals,kevinsawicki,2014-02-07T17:16:10Z,328,421,24,0,"Currently in this repo there are several styles of documentation formats going on. This stems from the doc format changing over time and not having a clear styleguide for how the API should be documented.
- [x] Add documentation styleguide to `CONTRIBUTING.md`
- [x] Update parameter/return docs in public API to conform to TomDoc
",331,False,en,0
1519,8,0,0,Internals,kevinsawicki,2014-02-06T22:06:10Z,16,66,7,0,"Now that you can subscribe to the return value of an `Emitter.on` this class offers very little utility.

Removing it allows us to use the same pattern for subscriptions everywhere and not have this one-off case of a custom mixin for one specific subscription type.
### Before

``` coffee
@observeConfig 'core.themes', -> console.log('themes changed')
```
### After

``` coffee
@subscribe atom.config.observe 'core.themes', -> console.log('themes changed')
```
",461,True,en,0
1518,53,5,0,Internals,probablycorey,2014-02-10T22:18:28Z,425,268,9,4,"- [x] Move all async methods from load to activate
- [x] Remove the need to send `sync` or `immediate` to atom.packages.activatePackage by using promises.

~~Remove unloadPackages~~

Closes #1357
",196,False,en,0
1517,5,0,0,Internals,kevinsawicki,2014-02-06T18:49:29Z,103,207,45,0,"- [x] Remove empty `# Private:` comments (private is the new default)
- [x] Remove `# Private:` prefix (private is the new default)
- [x] Remove `# Internal:` prefix
- [x] Remove `### Public ###` blocks
- [x] Remove `### Internal ###` blocks
- [x] Remove `### Private ###` blocks

Closes #1512 
",295,False,en,0
1509,1,0,0,Externals,mojombo,2014-02-04T02:59:29Z,3,3,1,0,,0,False,en,0
1508,3,0,3,Externals,mojombo,2014-02-05T00:14:24Z,20,15,1,1,"Just a few changes I think should happen from going through the tutorial and looking to clarify anything that might trip up a first time reader.
",145,True,en,0
1507,6,2,2,Internals,probablycorey,2014-02-06T00:08:59Z,60,36,5,2,"Atom will use squirrel to update instead of sparkle. 

Needs:
- [x] https://github.com/atom/atom-shell/pull/173 to be merged and published
- [x] Atom.io to use the squirrel update API
- [x] Atom to use the Atom.io update endpoint

Closes #1245
",244,True,en,0
1506,11,0,0,Internals,kevinsawicki,2014-02-03T19:55:12Z,15,15,8,0,"Closes #1505 
",14,True,en,0
1503,11,1,5,Internals,zcbenz,2014-02-04T08:32:02Z,86,28,6,0,"Saves about 200ms of window load time.
",39,True,en,0
1499,10,0,0,Internals,kevinsawicki,2014-01-31T23:31:26Z,11,15,2,0,"Follow on to #1498 

Updates packages to require `SelectListView` instead of `SelectList`
",90,True,en,0
1498,4,0,0,Internals,kevinsawicki,2014-01-31T23:00:09Z,12,8,4,0,"Closes #1468 
",14,True,en,0
1497,10,0,0,Internals,kevinsawicki,2014-01-31T22:20:40Z,10,9,4,0,"Follow on to #1489 

This upgrades the grunt plugins and other deps to all move to a base of coffeescript 1.7
",110,True,en,0
1493,6,0,0,Internals,kevinsawicki,2014-01-31T16:38:53Z,31,19,5,0,"Matches naming scheme of `keymap.cson`, `snippets.cson`, `config.cson`.

Fixes #1471 
",86,True,en,0
1492,7,4,4,Internals,nathansobo,2014-02-14T16:35:13Z,342,446,6,15,"This PR adds:
1. An editor spec that randomly mutates a buffer and toggles soft wrap on and off, then compares the screen lines to a simple reference implementation to ensure everything stays in a correct state.
2. A new and radically simpler implementation of `RowMap` that eliminates all observed failures in the randomized test.

I feel pretty good about this now. The `RowMap` is way simpler now and I can't manage to get any of the failures I was previously driving out with the random spec. It's up to you guys whether you want to merge it while I'm gone. I think it might be worth it. I packaged it as a single commit so you can revert it if unexpected behaviors start cropping up.

It's worth noting that I added a dev dependency for an npm I'm using in the random spec. I'm not actually sure that's a thing. @kevinsawicki perhaps you can make an adjustment if necessary?
",880,False,en,0
1491,2,0,0,Internals,kevinsawicki,2014-01-30T22:57:25Z,6,2,1,1,"Closes atom/settings-view#25
",29,True,en,0
1489,2,2,0,Internals,probablycorey,2014-01-29T17:09:37Z,4,4,4,0,"I want to upgrade mostly because it will fix this https://github.com/atom/atom/pull/899

http://coffeescript.org/#changelog
",124,True,en,0
1487,6,0,0,Internals,kevinsawicki,2014-01-28T01:19:22Z,22,49,6,0,"- [x] Include `snippets.cson` instead of a snippets folder in the template `.atom` folder
- [x] Add _Open Your Snippets_ menu item
- [x] Upgrade snippets package
- [x] Move coffee script snippets to language-coffee-script repo

Fixes atom/snippets#6
",250,False,en,0
1486,19,7,15,Internals,probablycorey,2014-01-28T21:51:16Z,101,290,2,1,"This uses https://github.com/atom/ascii-art as the first package example.

What's left:
- [ ] Create a `update-package-dependencies` package (which has a command that calls `apm update`)
- [ ] Make a gif for the ascii art readme
",229,True,en,0
1485,1,1,0,Internals,zcbenz,2014-01-27T10:53:41Z,1,1,1,0,,0,False,en,0
1484,10,7,6,Internals,jasonrudolph,2014-02-05T21:29:45Z,187,30,5,9,"I originally implemented this as a package in https://github.com/atom/house-of-pane/pull/1, but following @nathansobo's [suggestion](https://github.com/atom/house-of-pane/pull/1#issuecomment-32731663), I'm opening this PR as an attempt to bake that package's functionality directly into [atom/atom](https://github.com/atom/atom).

---

Currently, Atom lets you switch focus to the **next** or **previous** pane.

![default-commands](https://f.cloud.github.com/assets/2988/1945935/64dc0f20-7fdf-11e3-8646-6375aada1d20.png)

When I find myself making the most of split panes (especially on a large display), I often want to be able to quickly move directionally to another pane. I want to tell Atom to move :arrow_up:, or :arrow_down:, or :arrow_left:, or :arrow_right:.

![new-commands](https://f.cloud.github.com/assets/2988/2005298/c059e814-86dc-11e3-8b4f-f3892a1b8fb7.png)

Kinda like this:

![house-of-pane-demo](https://f.cloud.github.com/assets/2988/1945880/3ac8c680-7fdd-11e3-8813-1d11c1833927.gif)

This PR is an attempt to provide those commands. As always, I'd appreciate any and all feedback!
",1103,True,en,0
1480,14,13,0,Internals,kevinsawicki,2014-02-03T21:56:17Z,104,90,12,9,"Shims an array with properties for now, will remove once packages are updated.

Closes #1465
",93,True,en,0
1473,3,0,0,Internals,zcbenz,2014-01-27T04:05:15Z,71,8,5,2,"This PR uses node-runas to install Atom to `%PROGRAMFILES%\Atom` with administrator privilege, and also creates a desktop shortcut to `atom.exe`.
",146,True,en,0
1467,2,0,0,Internals,zcbenz,2014-01-23T13:33:21Z,1,5,2,0,,0,False,en,0
1464,15,3,5,Internals,probablycorey,2014-01-23T20:40:57Z,68,58,6,0,"On startup Atom will try and install `apm` and `atom` to /usr/local/bin. If it can't a warning is logged to the console.

If the command `window:install-shell-commands` is triggered or the `Atom > Install Shell Commands` menu item is clicked a dialog will pop-up on success or failure.

![menubar-3](https://f.cloud.github.com/assets/596/1980314/72857696-83bf-11e3-9ddd-871549e45982.jpg)

![menubar](https://f.cloud.github.com/assets/596/1980300/2f608518-83bf-11e3-8b12-76208b7c34f1.jpg)

Fixes #1270
",501,True,en,0
1459,1,2,0,Internals,zcbenz,2014-01-22T07:00:44Z,4,1,1,0,"The translated js files would be shown under `(no domain)` and original coffee script source would be shown under `file://` in devtools' sources panel. Fixes #1448.

![source-map](https://f.cloud.github.com/assets/639601/1971567/0d6f976a-8332-11e3-80b3-4cee9c26b614.gif)
",271,True,en,0
1457,1,1,0,Externals,shama,2014-01-22T03:58:03Z,1,1,1,0,"Just a small typo when perusing the docs trying to catch up. :)
",64,True,en,0
1456,6,2,3,Internals,probablycorey,2014-01-22T01:59:55Z,36,10,5,0,"For Example: On OS X, keymap files named `keymap.cson` and `darwin.cson` would load, but `win32.cson` would not load.
",118,True,en,0
1455,12,3,0,Internals,nathansobo,2014-01-29T01:38:58Z,251,275,5,7,"This moves a lot of specs from the view layer to the model layer and cleans up workspace a bit. This is in preparation for the multiple-folders feature. There's still some more cleanup to do but I'd like to move on to other things.
",232,True,en,0
1451,16,3,1,Internals,kevinsawicki,2014-01-21T00:05:10Z,97,20,10,0,"- [x] Remove doc warnings
- [x] Download includes instead of assuming they are already cloned
- [x] Include `Model` from theorist
- [x] Include `View` from space-pen
- [x] Add `docs/README.md`
",193,False,en,0
1449,1,4,0,Internals,BinaryMuse,2014-01-20T22:46:51Z,23,7,3,0,"I'm guessing that this is more of a personal preference thing, but it's bugged me several times so I thought I'd start a conversation around it.

I think it would be more natural for the tab to the _left_ of your active tab to activate when you close your active tab instead of the one to the right. This is especially true when you open a file with `cmd+t`, make a quick change, and then close it; I would expect to be back where I was before I opened the file, but instead I'm a tab over.
",491,True,en,0
1443,5,2,0,Internals,zcbenz,2014-01-23T07:18:03Z,10,12,4,4,":no_bicycles: Not done yet :no_bicycles: 
- [x] Terminal package install failure.
- [x] Node-unzip doesn't work under node v0.11.x. (https://github.com/atom/node-ls-archive/issues/1 <del>https://github.com/atom/grunt-download-atom-shell/issues/2</del>)
- [ ] Use named pipe instead of unix file socket in the startup code on Windows
- [ ] It's very  hard to open command palette by key
- [ ] Some key shortcuts seem to be invoked for twice when typing
- [ ] The keybindings' icon in command palette doesn't show
- [ ] Add `atom.cmd`
- [ ] Make `grunt install` work
- [ ] Terminal package doesn't work
- [ ] High-DPI support
- [ ] Make all specs pass.
",651,False,en,0
1441,25,15,4,Internals,nathansobo,2014-01-20T21:53:30Z,186,117,9,2,"Left to do:
- [x] Rename `fold` class to `folded` to match `foldable`
- [x] Indicate that multi-line comment blocks are foldable
- [x] Update foldable indicators when the indentation of a line changes
- [x] Update foldable indicators when a line is commented / uncommented
- [x] One last look at the CSS. Can it be simpler?
- [x] Fix positioning of the end of line fold indicators
- [x] Don't mark a commented line as foldable just because the next line is indented
- [x] Fix apm ""base"" theme
- [x] Publish new bookmarks package and upgrade to it
- [x] Remove backward-compatible shims from syntax themes after merging

![fold-indicators](https://f.cloud.github.com/assets/1789/1945171/43a38e8a-7fc8-11e3-8c2c-c284141a6ffd.gif)

I changed the layout of the gutter a bit to make the fold icon a real element rather than using pseudo elements. This is because I needed to detect if the icon specifically was clicked. I also opened up a bit more space in the gutter so things don't feel too squished.
",998,False,en,0
1439,12,17,0,Internals,kevinsawicki,2014-01-20T18:45:34Z,59,15,8,2,"Makes opening `~/.atom/user.cson`, `~/.atom/user.less`, and `~/.atom/keymap.cson` easier.
",90,True,en,0
1437,4,0,2,Internals,kevinsawicki,2014-01-17T20:48:18Z,48,9,2,0,"Follow on to #1355 to watch the `~/.atom/user.less` and reload it automatically.

Closes #1356
",95,True,en,0
1434,26,2,0,Internals,kevinsawicki,2014-01-17T02:43:05Z,24,23,2,0,"This updates our dependencies on our own libraries to use `1.x` style version strings so we can reduce duplication in the `node_modules` folder when installing and running `apm dedupe`.

This will speed up require time (and therefore startup time) since more dependencies will be shared and only need to be required once such as:
- underscore-plus
- fs-plus
- theorist
- emissary
### Results

Modules installed in 0.46.0: **759** totaling **137M**

Modules installed on this branch: **653** totaling **127M**
",509,True,en,0
1423,1,0,0,Internals,nathansobo,2014-01-15T21:28:00Z,0,1,1,0,"We used to assign a pane view's model to null when removing it, but I'm not sure why anymore. Something has changed in the order of operations post pane models that is leading the nulled out model to be a probable cause of #1422.
",230,True,en,0
1420,12,1,0,Internals,kevinsawicki,2014-01-15T23:55:18Z,17,14,5,0,"- Install a single version of `git-utils`
- Dedupe `roaster`
- Don't include less.js's dist and test folders
- Don't include bootstrap's docs folder
- Don't include spellchecker's vendor folder
- Consolidate specs to just use jasmine-tagged instead of jasmine-tagged, jasmine-focused, and jasmine-node
- Remove unused support folders from php, ruby, and ruby on rails language packages
### Results

Uncompressed `node_modules` folder goes from 159M in the 0.45.0 release down to 79M.

Compressed atom-mac.zip goes from 96M in the 0.45.0 release down to 61M.

Closes #1376 
",573,False,en,0
1417,18,13,0,Internals,nathansobo,2014-01-16T18:21:44Z,315,357,13,1,"This is based on PR #1415. When that merges it will look smaller.
- [x] Add a `core.destroyEmptyPanes` config option which defaults to false
- [x] Allow empty panes to be split via keyboard commands
- [x] Allow items to be dragged to an empty pane
- [x] Fix package specs
- [x] Only destroy empty panes on deserialization if `core.destroyEmptyPanes` is enabled
- [x] Destroy empty panes from the `core:close` event
- [x] Give empty panes a background color
- [x] Always preserve the root pane
- [x] Populate singular empty pane with atom tips now that the workspace background is obscured
- [x] Visually indicate when an empty pane has focus
",642,False,en,0
1416,23,0,0,Internals,nathansobo,2014-01-15T02:11:34Z,221,219,13,0,"This is the same thing as #1411 but I merged that one prior to the release which I didn't actually want to do.
",111,True,en,0
1415,19,1,0,Internals,nathansobo,2014-01-15T23:06:43Z,455,510,3,0,"This should speed things up and make it easier to change the behavior of panes going forward. I'm doing it as a prerequisite to changing the behavior of empty panes.
",166,True,en,0
1413,13,1,0,Internals,kevinsawicki,2014-01-14T21:39:59Z,48,51,8,0,"- Sign all CI builds
- Upload latest master build to draft release
",67,False,en,0
1411,22,3,8,Internals,nathansobo,2014-01-15T00:44:02Z,221,219,13,1,"- [x] Drop a model out of workspace view
- [x] Move non-view-related methods to the model
- [x] Construct view with deserialized model rather than deserializing the view
- [x] Make an `atom.workspace` global pointing at the model
",230,False,en,0
1410,6,0,0,Internals,nathansobo,2014-01-13T21:39:13Z,828,521,17,0,"I delayed doing this on the previous PR to maximize clarity of the diff. This just renames everything so the un-suffixed names belong to the model.
",148,True,en,0
1408,23,5,2,Internals,probablycorey,2014-01-15T22:01:10Z,602,958,10,4,"Here is the idea: Packages should use Editor and its methods the main API to manipulate text. This PR removes functionality from EditorView that was being used to manipulate text.
",180,True,en,0
1403,7,0,0,Internals,kevinsawicki,2014-01-10T20:44:27Z,35,12,4,0,"- Precompile the keystroke pattern pegjs
- Cache calculated specificities
",74,False,en,0
1400,1,3,0,Internals,benogle,2014-01-10T01:09:59Z,1,1,1,0,,0,False,en,0
1398,3,1,0,Internals,probablycorey,2014-01-09T22:40:01Z,27,2,3,0,"When the CI servers have low disk space, things get cray. This will log either an error or warning depending on how much disk space is left.

``` sh
Running ""output-disk-space"" task
>> /dev/disk1 is at 96% capacity!
```
",220,True,en,0
1380,1,0,0,Internals,kevinsawicki,2014-01-09T01:15:23Z,6,1,2,0,"This allows the selection to grown line-wise as you hit `cmd-l` multiple times.
",80,True,en,0
1379,93,7,18,Internals,probablycorey,2014-01-13T20:08:34Z,1047,750,23,4,":dancer: work in progress :dancer:

Pulling out models from the pane system so panes are easier to deal with.
",110,True,en,0
1378,4,0,0,Internals,probablycorey,2014-01-09T00:36:41Z,68,138,9,0,"Doesn't effect typing speed by using the ""absolute positioning flexbox repaint hack""

![license md - _users_corey_github_apm](https://f.cloud.github.com/assets/596/1873190/9c8d9b54-78b5-11e3-834f-916dd2895b85.jpg)
",214,True,en,0
1375,1,2,0,Internals,nathansobo,2014-01-09T23:08:56Z,4,2,2,1,"This PR fixes two problems:
- When a render process crash occured in specs, we were trying to exit via an undefined atom global and throwing a confusing exception in the process.
- We probably don't want to exit the application unless we're running _headless_ specs, so I've switched this to check the ::exitWhenDone setting.
",326,False,en,0
1374,5,0,0,Internals,kevinsawicki,2014-01-08T23:36:43Z,41,0,5,0,"Take a multi-line selection and break it apart to create multiple single line selections covering the same area.

Refs #1365
",125,True,en,0
1373,4,0,0,Internals,kevinsawicki,2014-01-07T23:09:52Z,1,1,1,0,"Has some performance upgrades that make view creation faster

See atom/space-pen#21 for details.
",97,True,en,0
1371,4,6,1,Internals,nathansobo,2014-01-08T18:38:09Z,4,167,2,1,"Since I've introduced the [text-buffer](https://github.com/atom/text-buffer) npm, I took the opportunity to to take another pass at documenting TextBuffer and cleaning up its API a bit. I've improved the documentation of text-related methods and moved them out of Atom into the npm. I've also tuned some of the methods to minimize allocations by eliminating options hashes, removing intermediate array representations of points and ranges, normalizing line endings without using replace, etc.
### Proposed API changes

The old methods are all still present as deprecated shims for now.
- `::change` -> `::setTextInRange`

I think it would be nice to move all the text-related methods into the npm and only deal with the backing of the file system here.
",753,False,en,0
1367,3,1,0,Internals,probablycorey,2014-01-08T19:17:04Z,4,3,2,1,"This lets packages listen for unhandled exceptions. The only reason I made it a pull request was in case there are going to be issues with Atom emitting events.
",161,True,en,0
1366,6,0,0,Internals,kevinsawicki,2014-01-07T02:06:30Z,61,18,3,0,"Renames `getEntries` to `getEntriesSync`.

This will enable adding a little :racehorse: to the tree view.

Also updates `getRealPath` to `getRealPathSync` for consistency since under the hood it uses `fs.realpathSync`.
",219,True,en,0
1360,3,2,0,Internals,probablycorey,2014-01-04T00:34:16Z,61,35,4,0,"This fixes the problem of Tool Panels appending themselves below the status bar. It also adds other convenience methods so to make adding Tool Panels to the top/left/right more understandable (and also let's us get away with leaving the horizontal and vertical divs undocumented)
",280,True,en,0
1355,4,1,1,Internals,probablycorey,2014-01-02T21:56:53Z,43,4,3,1,"With this PR, when `~/.atom/keymap.cson` is saved it is now automatically loaded with the new contents.

Fixes #1250
",117,True,en,0
1354,19,0,0,Internals,kevinsawicki,2014-01-01T00:20:09Z,95,1327,12,0,"Extract the textmate parser to [first-mate](https://github.com/atom/first-mate)
",80,True,en,0
1350,5,0,0,Internals,probablycorey,2013-12-31T16:50:22Z,58,17,7,0,"This fixes a few keybinding issues people have opened. 

One change that might be annoying is `ctrl-a` now triggers `editor:move-to-beginning-of-line` instead of `editor:move-to-first-character-of-line`. But this matches the default OS X keybinding behavior.
",259,True,en,0
1348,26,3,7,Internals,nathansobo,2014-01-06T23:45:11Z,302,640,36,6,"Summary of changes

Having decided via painful experience that putting telepath into core was a bad idea, this PR removes it. I've replaced non-replication oriented features that were previously handled by telepath with smaller npm packages.
- **[text-buffer](https://github.com/atom/text-buffer)** This handles the storage of text and markers that was previously dealt with in telepath strings. It also implements the undo system for buffers.
- **[theorist](https://github.com/atom/theorist)** This provides a `Model` superclass that will provide the reactive features that proved to be valuable from Telepath models. Model subclasses allow you to subscribe to $-prefixed reactive behaviors for any property, declare derived reactive properties with `.behavior`, and will soon include facilities for defining reactive collections with relational operators. It took me a couple tries to find a good name, so if you see references to `reactionary` or `atomic-model` in commits, that's this library.
- **[serializable](https://github.com/atom/serializable)** This provides a convenient mixin for implementing `::serialize` and `.deserialize`. It's completely optional, meaning anyone can implement those methods on their own, but it removes a lot of the boilerplate. I think this package should also provide the deserializer manager and eventually incorporate support for migrations.

**What's the plan for replication going forward?**

I think I had it exactly backwards. Instead of wrapping a replication layer with the application's model, we should wrap the application's model with a replication layer. I think Telepath should be transformed into an unobtrusive wrapper library that can wrap any JavaScript object graph and automagically replicate it to another site. I think we can pull off something seamless by combining the new ES6 `Object.observe` API, ES5 `WeakMap`s, and everything I learned implementing references in the last attempt. I'd like something like this to be possible:

``` coffee
{Replicant} = require 'telepath'

# start with a plain old javascript object
atomA = new Atom(mode: 'editor') 

# build a replicant wrapper based on this object
replicantA = new Replicant(atomA) 

# replicate it (this is for tests, across the wire we'd serialize)
replicantB = replicantA.replicate(siteId: 2) 

 # extract a fresh plain-old object from the replica
atomB = replicantB.root
```

The end user never needs to interact with telepath. They just modify properties on the plain objects and telepath picks up their changes and replicates them transparently. This keeps telepath out of the critical path for the single-user case because it's bolted on from the outside only when needed. It also means we can expand the scope of replication in an ad-hoc fashion, starting with a single buffer and moving outward.

Finer-grained control of what properties are replicated is still possible on a per-object and per-class basis. Here's a sketch of what I'm thinking:

``` coffee
# exclude instances of an entire class from being replicated
replicant.disable(TreeView)

# only replicate particular properties for instances of a certain class
replicant.enable(Pane, 'items')

# dynamically enable / disable replication for certain instances
replicant.enable(focusManager)
```

Again, the key is we can start small and only pay for what we use.
",3347,True,en,0
1347,48,16,0,Internals,zcbenz,2014-01-16T16:49:55Z,32,20,9,16,"- [ ] Make native modules compile on Windows
- [x] Make native modules compile on Mac
- [x] Fix sandbox of coffee script
- [x] Web view is blank on the first run
- [ ] The `CFBundleVersion` field of `Info.plist` is sometimes empty
- [x] Make specs pass
- [x] Initial size is sometimes `{width: 0, height: 0}`
- [x] Crash caused by setTimeout in third party native modules (https://github.com/atom/atom-shell/issues/153)
- [x] process.nextTick does not work sometimes (https://github.com/atom/atom-shell/pull/154)
- [x] Task can not receive messages from child process sometimes (https://github.com/atom/atom-shell/issues/156)
- [x] FATAL ERROR: v8::HandleScope::CreateHandle() Cannot create a handle without a HandleScope (https://github.com/atom/atom-shell/commit/931182b677e81c4bf6922193478af861193d952c)
",807,False,en,0
1343,1,1,0,Internals,jasonrudolph,2013-12-30T18:27:44Z,1,1,1,3,"Update the keymap to use the [default OS X keyboard shortcut](http://support.apple.com/kb/ht1343) (Command+Option+h) to hide other apps.

![](https://f.cloud.github.com/assets/2988/1814619/660d8cc0-6efa-11e3-99d0-d755b426f8f2.png)
",231,True,en,0
1340,6,22,0,Internals,benogle,2013-12-21T00:09:34Z,6,2,2,0,"A search might need to be cancelled. This pull does 2 things
- When project scan is run again, any previous search is cancelled
- `Project::cancelScan()` function was added
",173,False,en,0
1337,2,2,0,Internals,nathansobo,2014-01-03T19:58:03Z,19,21,7,15,"Previously, we were overriding Editor::destroy, which is now provided
by telepath. Since the real destroy wasn't being called, we were failing
to remove editors associated with mini editor views.
",196,False,en,0
1335,34,4,0,Internals,mcolyer,2014-01-07T00:34:19Z,17,15,4,19,"Things have degraded since #1074 this branch will get us back on track.
## Specs to be fixed
- [ ] Core
- [x] Find and replace (atom/find-and-replace#114)
- [x] Link
- [x] Settings View
- [ ] Terminal

There are also a few other issues I'd like to solve here:
- [x] Fix error messages getting truncated in the output
- [x] Determine why atom-shell doesn't seem to cache on windows
- [x] Dig into spec parallelization issues
",424,False,en,0
1334,1,5,0,Internals,nathansobo,2013-12-18T16:40:20Z,1,0,1,0,"This is an interim solution which enables atom/image-view#4 to correctly
deserialize when the path has been deleted both on atom master and in
atom/atom#1326.
",159,False,en,0
1329,1,2,0,Internals,probablycorey,2013-12-17T20:38:34Z,4,4,1,0,"Changes the default bindings for `alt-left` and `alt-right` to better match the default behavior of Sublime and TextMate.

Closes #1253
",136,True,en,0
1327,32,7,6,Internals,mcolyer,2013-12-18T20:07:05Z,88,30,9,1,"So this pull includes the necessary changes for running atom on windows.
",73,True,en,0
1326,7,0,0,Internals,nathansobo,2013-12-19T00:04:53Z,37,38,11,1,"This PR is a first step toward fully telepathic panes. It's only goal is to remove manual serialization / deserialization of pane items and instead rely on Telepath to give us correctly deserialized objects directly in the document.
- [x] Core specs green and basic editors working
- [x] Make markdown preview serialize correctly
- [x] Convert state-backed pane items from packages to telepath models on master so they are forward-compatible with this PR
  - Settings view
  - Image Editor
  - Archive View
- [x] Verify that all pane item types serialize correctly
",565,False,en,0
1325,1,5,0,Internals,probablycorey,2013-12-17T16:30:45Z,0,34,2,0,"Were there any holdouts on removing the movement menu command?
",63,True,en,0
1324,2,0,0,Internals,kevinsawicki,2013-12-18T01:03:49Z,16,6,5,1,"Allows apm to start referencing native module such as keytar.

`vendor/apm` now installs to `apm/node_modules` during `script/bootstrap` instead of to `node_modules/`.
",168,True,en,0
1322,3,2,8,Internals,benogle,2013-12-16T23:56:22Z,10,0,2,0,"On soft-wrapped lines with hard tabs, it would convert the hard tabs to soft tabs when it split the tokens into multiple lines.

Fixes #1318
",141,True,en,0
1320,4,4,0,Internals,kevinsawicki,2013-12-16T21:46:18Z,19,0,1,0,"This gets copy, paste, etc. working again in elements with the `native-key-bindings` class.

This does duplicate some code with the browser process but that still needs to handle the first responder forwarding for the spec window and when the dev tools is focused.

Closes #1203
",279,True,en,0
1309,4,5,5,Externals,shama,2013-12-17T01:59:22Z,39,0,2,3,"Fixes #1248
",12,True,en,0
1308,3,5,4,Internals,benogle,2013-12-16T19:12:44Z,61,33,4,3,"When focused on places like the tree-view and find and replace, we should be able to use a few commands like `cmd-w` and `cmd-s`. This pull moves these things to be handled in the workspaceView.
",195,True,en,0
1307,1,0,0,Internals,nathansobo,2013-12-13T01:11:27Z,8,0,1,0,"Addresses #1306

We still need to know why this is happening, so I left an exception in
non-release builds. Since the pane system is about to change a lot I
think this is good enough for now.
",192,True,en,0
1305,26,13,19,Internals,nathansobo,2013-12-17T23:56:34Z,202,213,19,5,"This PR gets rid of windowState and just makes the entire `atom` global synonymous with window state. It can be thought of as the atom ""environment"", and can be serialized to disk and replicated to other people. This is important because I want to move the management of all serialization into Telepath.

This is the first step in making the Atom environment something that's easy to encapsulate and instantiate anywhere. My ultimate dream, which I think isn't actually that far off, is to make it easy to instantiate an Atom model in headless specs.
",551,True,en,0
1298,1,0,0,Internals,mcolyer,2013-12-12T02:53:31Z,1,1,1,0,"Integrates @shama's progress bar from atom/grunt-download-atom-shell#1
",71,True,en,0
1297,8,2,21,Internals,benogle,2013-12-12T18:40:47Z,120,3,3,0,"Previously, it would blindly read from disk on reload, and set the text into the editor. This was problematic as it would mess with markers and folds. No longer. 

Fixes #1285 and fixes atom/bookmarks#3
",203,True,en,0
1296,1,0,0,Internals,nathansobo,2013-12-12T01:03:35Z,1,1,1,0,"This upgrades the serialization version of telepath documents because
for a window of time we were storing undefined timestamps. It also
adds dev-mode assertions that raise when the index of a solo marker
exceeds the array length. I think that issue should actually be resolved
and if we don't see an assertion failure here for a while we can remove
the Math.min shim.

Closes atom/telepath#7
",393,False,en,0
1292,4,0,0,Internals,nathansobo,2013-12-11T23:31:09Z,17,2,3,0,"This enables a dev mode flag on Telepath when we aren't on releases to help us diagnose how markers are getting into a state where they don't have a timestamp to begin with. These won't run on official releases, and I added a null guard that should hopefully shield end users from this issue.
",293,True,en,0
1286,6,2,3,Internals,nathansobo,2013-12-11T19:20:45Z,136,196,14,0,"This depends on #1283. I've added some features to telepath to make it easier to convert serialization specs. You can now call `replicate` on any document, even orphans.
",170,True,en,0
1284,2,0,0,Internals,mcolyer,2013-12-11T01:32:15Z,1,1,1,0,"Fixed a missing unzip dependency so that we can download atom-shell on windows again.

@paulcbetts this should get you back to building atom master again.
",155,True,en,0
1283,3,3,0,Internals,nathansobo,2013-12-11T19:04:06Z,57,91,5,0,"Serializing and deserializing closed pane items was turning into a pain
with the new telepath changes that are phasing out this kind of on the
fly serialization. Reopening by uri saves memory and simplifies panes
enormously. If we want non-uri reopening we can revisit it later when
telepath models are better integrated.
",322,False,en,0
1282,4,0,0,Internals,kevinsawicki,2013-12-11T01:45:35Z,79,28,2,0,"Makes them reachable on travis, see them [here](https://github.com/atom/atom-master-builds/releases).

Previously they were uploaded to the draft release in this repo which made them inaccessible by travis since only people with push access can see draft releases, and the travis ci team only has pull access.
",310,True,en,0
1281,15,0,0,Internals,kevinsawicki,2013-12-10T22:01:54Z,86,1,3,0,"This uploads the build for the master branch to releases, associated with the latest draft release.
",100,True,en,0
1276,1,1,0,Internals,nathansobo,2013-12-10T09:16:12Z,1,1,1,0,"I now have a real solution in place. Whenever we invert a patch that updates a non replicated array, we also include updates for any markers with timestamps that are newer than the patch being inverted. This prevents us from failing to update markers that are newer than the operation we are undoing.
",301,True,en,0
1271,19,3,22,Internals,probablycorey,2013-12-12T23:15:47Z,73,38,9,3,"Previously, if a file was open in Atom but deleted from the command line (or git, etc...) Atom would keep that buffer open and mark it as modified. This was annoying because when closing Atom it would prompt to be saved. This PR makes Atom treat deleted files as unmodified (unless the file was modified prior to deletion.)

One caveat still exists. The edit session for the deleted file will still be serialized. So a file that doesn't exist on disk will persist when you restart Atom until you explicitly close it. I'd like to wait and fix this problem after we decide on the future of panes.

Created to solve https://github.com/atom/atom/issues/693
",653,True,en,0
1266,13,4,7,Internals,nathansobo,2013-12-10T09:44:19Z,111,140,12,2,"Doing this incrementally is going to take a few weeks off my lifespan, but here's the first step.
",98,True,en,0
1265,1,1,0,Internals,nathansobo,2013-12-07T21:52:12Z,9,9,1,0,"The spec suite has been overwriting my config directory in weird cases.
While investigating it I noticed that we mock writeFileSync directly in
these specs, but we actually use season to write the config cson. This
makes this spec a bit simpler because it doesn't have to parse the CSON
in the spec. Lower level assertions belong on the season package itself.
",360,False,en,0
1259,1,0,0,Internals,thedaniel,2013-12-06T22:16:06Z,1,1,1,0,"update url in help menu from herokuapp link to atom.io link
",60,True,en,0
1258,1,0,0,Internals,kevinsawicki,2013-12-07T19:38:32Z,4,1,1,0,"This ensures the import paths for themes contain the stylesheet directories

Closes #1225
",90,True,en,0
1249,2,1,0,Internals,nathansobo,2013-12-07T22:09:53Z,29,31,8,1,"This version adds a bunch of reactive primitives and ensures we destroy documents when they are no longer referenced.
",118,True,en,0
1247,1,0,0,Internals,kevinsawicki,2013-12-07T19:52:18Z,15,2,3,1,"Closes #1224
",13,True,en,0
1246,9,11,0,Internals,kevinsawicki,2013-12-06T21:06:52Z,35,1,3,0,"@benogle This felt like it belonged in `editor.less` since it just used the variables directly, instead of in each syntax theme independently, let me know what you think.

The colors just match the ones used in the gutter by the git-diff package, feedback welcome.

![screen shot 2013-12-06 at 9 46 24 am](https://f.cloud.github.com/assets/671378/1694282/63eefe86-5e9e-11e3-92f4-bbb9ac0e090c.png)
",397,True,en,0
1240,3,9,0,Internals,benogle,2013-12-06T20:04:52Z,13,0,2,0,"So more and more packages are using the auth token. I want a unified way to deal with this thing. So far, what I have (`atom.getGitHubTokenName()`) is the minimum IMO I want in there. But we could include keytar and have access to the token in the core. Like:

``` coffeescript
setGitHubAuthToken: (token) ->
  keytar.replacePassword('Atom GitHub API Token', 'github', token)

getGitHubAuthToken: ->
  keytar.getPassword('Atom GitHub API Token', 'github')

deleteGitHubAuthToken: ->
  keytar.deletePassword('Atom GitHub API Token', 'github')
```

WDYT? Good? Bad? Ugly?
",570,True,en,0
1237,10,0,0,Internals,kevinsawicki,2013-12-06T16:55:08Z,30,20,3,0,,0,False,en,0
1236,4,2,1,Externals,cameronmcefee,2013-12-06T20:27:54Z,10,0,1,0,"The Atom package pages currently link to the Atom package installation section of the docs to explain how to install specific versions of packages. This adds that content.

cc @gjtorikian for quality
",200,True,en,0
1220,1,6,4,Externals,shama,2013-12-11T16:37:01Z,7,6,3,6,"It is more reliable to use the `grunt` binary created by npm in the `node_modules/.bin/` folder. This way if the path or name of the binary gets updated or installed another way (see gruntjs/grunt#943), the path `node_modules/.bin/grunt` will always remain the same.
",267,True,en,0
1219,5,1,2,Internals,zcbenz,2013-12-09T09:00:24Z,36,26,3,3,,0,False,en,0
1218,1,3,0,Externals,shama,2013-12-05T05:12:10Z,2,2,2,0,"Just a couple typo fixes I saw while perusing the docs.
",56,True,en,0
1208,1,0,0,Internals,kevinsawicki,2013-12-04T23:34:11Z,20,3,2,0,"@cameronmcefee found an infinite loop crash over in atom/language-ruby-on-rails#1
",82,True,en,0
1193,1,1,0,Externals,mattgraham,2013-12-03T19:30:43Z,1,1,1,0,"Its the little things that get the designers. This simply moves the dev icon up to adjust for the new default tab styles.

**Before**
![](http://c.gr4m.com/image/0p0Q0b311c2J/image)

**After**
![](http://c.gr4m.com/image/1o412J1k233m/image)
",241,True,en,0
1192,4,1,0,Internals,zcbenz,2013-12-04T06:07:35Z,18,214,4,0,"I separate the update-atom-shell task to a third party grunt task, so it would be easier for other applications to download atom-shell. 

However since it's a private repository, I cannot publish it to npm registry. I tried to use `git+ssh://` URLs to set it as private package in `package.json`, but it seems that the CI doesn't have necessary credentials to clone the private repositories:

(using `git+https://`):

```
npm ERR! git clone https://github.com/atom/grunt-download-atom-shell.git Cloning into bare repository '/var/lib/jenkins/.atom/.node-gyp/.atom/.apm/_git-remotes/https-github-com-atom-grunt-download-atom-shell-git-424746b3'...
npm ERR! git clone https://github.com/atom/grunt-download-atom-shell.git 
npm ERR! git clone https://github.com/atom/grunt-download-atom-shell.git fatal: could not read Username for 'https://github.com': Device not configured
```

(using `git+ssh://`):

```
npm ERR! git clone git@github.com:atom/grunt-download-atom-shell.git Cloning into bare repository '/var/lib/jenkins/.atom/.node-gyp/.atom/.apm/_git-remotes/git-github-com-atom-grunt-download-atom-shell-git-4a6c63fe'...
npm ERR! git clone git@github.com:atom/grunt-download-atom-shell.git 
npm ERR! git clone git@github.com:atom/grunt-download-atom-shell.git ERROR: Repository not found.
npm ERR! git clone git@github.com:atom/grunt-download-atom-shell.git fatal: Could not read from remote repository.
npm ERR! git clone git@github.com:atom/grunt-download-atom-shell.git 
npm ERR! git clone git@github.com:atom/grunt-download-atom-shell.git Please make sure you have the correct access rights
npm ERR! git clone git@github.com:atom/grunt-download-atom-shell.git and the repository exists.
npm ERR! Error: Command failed: ERROR: Repository not found.
npm ERR! fatal: Could not read from remote repository.
npm ERR! 
npm ERR! Please make sure you have the correct access rights
npm ERR! and the repository exists.
```

Finally instead of working around npm, I published `grunt-download-atom-shell` to apm registry and treated it like other atom packages, and it works. Though it's not beautiful and causes some confusions, it's the easiest way I can think out, or maybe there is a better way?
",2196,True,en,0
1191,2,0,0,Internals,zcbenz,2013-12-03T04:55:09Z,8,4,4,0,,0,False,en,0
1190,3,3,0,Internals,kevinsawicki,2013-12-03T19:06:32Z,35,21,2,0,"Wrapped lines were previously causing incorrect offsets to be cached causing the cursor to appear out of place as shown in #1096 
",130,True,en,0
1184,7,0,0,Internals,kevinsawicki,2013-12-02T17:49:41Z,15,15,8,0,"- `#workspace` :arrow_right: `.workspace`
- `#horizontal` :arrow_right: `.horizontal`
- `#vertical` :arrow_right: `.vertical`
- `#panes` :arrow_right: `.panes`

Closes #1179
",174,False,en,0
1182,1,0,0,Externals,mattgraham,2013-12-04T19:26:06Z,0,7,1,5,"Removing .focusable-pannel from the core app and adding to default themes with a more subtle transition. cc @benogle 
",118,True,en,0
1180,2,7,0,Internals,zcbenz,2013-11-29T06:56:57Z,8,4,4,0,"From atom-shell v0.7.2 we are using the new [breakpad](https://code.google.com/p/google-breakpad/wiki/GettingStartedWithBreakpad) crash reporter on both Windows and OS X, it doesn't require any symbol files to be present on users' machine, and we can generate nice stack traces on the server.

The crash reports submission url is temporarily set to the default one (http://54.249.141.255:1127), which is my ec2 machine running the [atom/mini-breakpad-server](https://github.com/atom/mini-breakpad-server).

Currently the operating system libraries' symbols were not resolved on the server side, since we need to generate breakpad symbols for all system libraries on all versions of operation systems. On Windows it's possible to generate the symbols from Microsoft's debugging symbols server, and Mozilla [has a script to do it](https://wiki.mozilla.org/Breakpad:Symbols#Windows_system_symbols). On OS X we can just manually generate the symbols on 10.9 and 10.8.
",964,True,en,0
1174,12,1,17,Internals,probablycorey,2013-12-04T17:17:17Z,34,71,3,6,"Update the readme, building and contributing docs.
",51,True,en,0
1169,32,1,0,Internals,kevinsawicki,2013-11-27T03:43:53Z,360,367,10,0,"Continuation of #1132 to packages and remaining core methods.

Refs #950 
",74,True,en,0
1168,8,0,0,Internals,probablycorey,2013-11-27T19:33:00Z,2,62,8,1,"This gives users a simple in-app way to give us feedback. Feedback is send directly to the atom repo with the label `feedback`.

![feedback-form-view coffee - _users_corey_ atom_packages_feedback](https://f.cloud.github.com/assets/596/1625377/24251850-56d1-11e3-97b6-cdf17ae4f29a.jpg)

Will result create [this issue](https://github.com/atom/feedback/issues/2).

I punted on using the asset api to upload images, but at some point I will circle back and get that working.
",472,True,en,0
1166,14,0,0,Internals,kevinsawicki,2013-11-26T20:28:10Z,324,330,30,0,"- `{RootView} = require 'atom'` :arrow_right:  `{WorkspaceView} = require 'atom'`
- `atom.rootView` :arrow_right: `atom.workspaceView`

Refs #950
",146,False,fr,0
1161,1,1,0,Internals,benogle,2013-11-26T19:01:43Z,54,3,3,0,"Will add more info to mini editors

![screen shot 2013-11-25 at 2 48 24 pm](https://f.cloud.github.com/assets/69169/1617887/b7a7b5e6-5623-11e3-9329-ee991847f366.png)
",166,True,en,0
1155,1,7,0,Internals,kevinsawicki,2013-11-28T17:26:23Z,19,0,2,5,"We should probably decide on a license before the private alpha starts.

This PR is an attempt at that with an initial choice of the MIT license.

Once we agree on one for atom/atom, I'll update all other package repos with the same license.

/cc @hoolio @defunkt 
",265,True,en,0
1151,6,0,0,Internals,kevinsawicki,2013-11-22T18:26:36Z,89,94,6,0,"This removes the last remaining `window` global functions.

After this PR all that will be left on `window` (besides the `atom` global) will be:
- `measure(description, fn)`
- `profile(description, fn)`

These could go on the `Atom` class as well but they seem to make sense to have on `window` since they are only for debugging.
",330,True,en,0
1149,1,0,0,Internals,kevinsawicki,2013-11-22T00:26:18Z,5,5,1,0,"We support config.cson and config.json, user.css and user.less, so we should also support a user.js as well as user.coffee.
",124,True,en,0
1148,3,0,0,Internals,kevinsawicki,2013-11-22T00:19:42Z,8,8,3,0,"Forgot to remove this in the previously clean up PRs.
",54,True,en,0
1147,2,1,0,Internals,mcolyer,2013-11-22T14:19:36Z,3,2,1,0,"vim-mode needs access to the original keystroke that triggered the event.

@probablycorey is this cool with you? I need it for atom/vim-mode#42.
",145,True,en,0
1146,4,1,0,Internals,kevinsawicki,2013-11-22T00:07:04Z,23,4,1,0,"Previously the bindings to include used direct string comparison for inclusion.

This excluded things that were now using `body.platform-darwin editor:not(.mini)` since it wasn't an exact match such as move line up/down.

![screen shot 2013-11-21 at 2 21 59 pm](https://f.cloud.github.com/assets/671378/1596419/75e1e878-52fb-11e3-90c4-9e08a3f0bfd6.png)

Now the selector is directly tested against an `.editor` element or the actual `document.body` so the string comparisons aren't needed.

/cc @mcolyer Would love your thoughts on this.
",538,True,en,0
1145,31,2,0,Internals,kevinsawicki,2014-01-03T18:20:55Z,129,85,26,43,"- grunt tasks and the `Gruntfile.coffee` are now in build
- modules used by the build are stored in `build/node_modules`
- `grunt` command no longer works from the root of the repository since it isn't in the root `node_modules` anymore.
  - You can do: `script/build lint` to just run a single grunt task.

Closes #1067 
",322,False,en,0
1142,10,0,0,Internals,kevinsawicki,2013-11-21T02:26:09Z,8,18,2,0,"Refs #1126 
",12,True,fr,0
1141,2,0,2,Internals,benogle,2013-11-21T01:11:21Z,23,0,1,0,"space-pen-extensions was the best place for it...
",50,True,en,0
1140,19,0,0,Internals,kevinsawicki,2013-11-21T01:34:44Z,451,463,34,0,"Refs #1126 
",12,True,fr,0
1138,13,0,0,Internals,kevinsawicki,2013-11-20T22:51:03Z,44,52,21,0,"Refs #1126
",11,True,fr,0
1137,2,0,2,Externals,paulcbetts,2013-11-20T23:14:21Z,3,3,3,0,"Most people don't have Inconsolata or Monaco installed on their boxes, here's a hack at getting the Windows equivalents (ignore my unactivated Windows install lol):

**Settings:**
![image](https://f.cloud.github.com/assets/1396/1586463/560129f6-5229-11e3-9f1c-2682083a8e5e.png)

**Main View:**
![image](https://f.cloud.github.com/assets/1396/1586473/7d0649b4-5229-11e3-9bbd-822873efa631.png)
",392,True,en,0
1135,2,2,0,Internals,mcolyer,2013-11-20T02:50:43Z,3,3,3,0,"Integrating this change will require users to update their keymaps to reference `.workspace` where they previously referenced `body`. That way our new platform specific key bindings won't override user configured bindings.
",223,True,en,0
1134,1,0,0,Internals,nathansobo,2013-11-21T00:12:33Z,1,1,1,0,"The telepath changes are discussed here: https://github.com/atom/telepath/pull/4

This is going to make working with the document a lot easier, because you'll be able to have cyclic references. This is all getting really close to fruition.

![image](https://f.cloud.github.com/assets/1789/1578450/00ac5bfe-517c-11e3-88a6-bee69f51d062.png)
",339,True,en,0
1132,16,4,3,Internals,probablycorey,2013-11-20T18:11:10Z,9132,9127,32,0,"This renames `Editor` to `EditorView` and `EditSession` to `Editor`, and renames all instance variables as well. I ignored namespace events because we've discussed removing the namespace.

This should not affect packages because `exports/atom` still exports classes using the previous names.
",292,True,en,0
1131,37,0,0,Internals,kevinsawicki,2013-11-20T21:42:11Z,162,194,20,0,"This PR removes the shims that have built over over the last few core refactors/extractions.

The packages will be updated in this PR and the shims dropped from core.

Refs #1126 
",180,True,en,0
1130,10,15,4,Internals,mcolyer,2013-11-21T20:41:31Z,195,138,7,1,"After merging, `meta` will no longer have any meaning in keymaps. One must use `cmd` instead.

Fixes #682.
",107,True,en,0
1119,35,1,10,Internals,probablycorey,2013-11-15T22:42:20Z,235,383,13,1,"This cleans up the keymap code for the [keybinding resolver package](https://github.com/atom/keybinding-resolver). The UI for the keybinding resolver could use work, but here is what it looks like now: 

![task-helpers coffee - _users_corey_github_atom-1](https://f.cloud.github.com/assets/596/1545262/b40ec482-4d73-11e3-8ba6-a1e6c4544e2c.jpg)

There is still some cleanup I'd like to do (get rid of some redundant methods used by packages) but I've tried to minimize  changes that would effect packages in this PR. Only atom/settings-view will need to be updated.
",565,True,en,0
1118,8,1,0,Internals,probablycorey,2013-11-15T17:05:12Z,96,78,8,0,"It is hard to figure out which specs fail when looking at our CI output. Here is a [gist of our current output](https://gist.github.com/probablycorey/b5768c69297ca7898c12), 2100 lines. Here is what a [failing run looks like using this PR](https://gist.github.com/probablycorey/096a09e03ad834166781), 62 lines.
",310,True,en,0
1117,6,4,3,Internals,mcolyer,2013-11-19T22:10:53Z,151,89,4,5,"Currently keybindings are a bit of a mess on Windows (you can't access large pieces of functionality due to the limitations on chord keys). I think the best approach here is to again split keybindings by platform.

I've added a platform class to the body element of the Atom window like so `platform-win32` or `platform-darwin`. I'm not sure how everyone feels about this but it's nice in that we can leverage the css selectors we already use for many things.

I've also gone ahead and attempted to implement some of the core bindings that we have on Windows. However it'd be great if @paulcbetts could review/improve those.

@probablycorey I know you've worked on this area a bit recently, any thoughts here?
",710,True,en,0
1116,5,1,0,Internals,mcolyer,2013-11-18T19:08:04Z,186,8,3,4,"So this splits out the base menu configuration based on platform. Since the manner in which platforms handle menus is sufficiently different I think that part is necessary. That said, I would prefer to keep the menu configuration in packages cross platform.

This presents a bit of a challenge because Windows uses `&` to allow navigation through menus via the keyboard. The way that it works is that a user presses `alt` and then windows focuses the menu and underlines characters which indicates the next selection. This means that there needs to be an underlined character for each menu item and it has to be unique within the currently visible menu.

So I propose that during The Great Package Rewrite, that one of the steps that we do is specify an underlined character for all menu items and then strip it on platforms that don't support it (ie darwin and linux). I've worked around this for now by adding a `normalizeLabel` function which allows us to specify top-level menu item's underline character and packages can still merge their menu items appropriately.

@paulcbetts if you'd like to go into menus/win32.cson and add ampersands where you think most appropriate that would be :cool:
",1198,True,en,0
1115,4,1,2,Internals,mcolyer,2013-11-19T18:54:44Z,23,1,3,5,"Ref #1112

So this changes the behavior slightly of normalizeIdentOnPaste, so that it's less confusing when pasting single lines onto an existing line in the editor.

I'm not sure what to do about this spec, https://github.com/atom/atom/blob/master/spec/edit-session-spec.coffee#L2546 which is somewhat at odds with this behavior (original written, here https://github.com/atom/atom/commit/b9accadb70ced2a47e1a25f7b383f851aedd8e4f I believe)
",442,True,en,0
1111,49,0,1,Internals,kevinsawicki,2013-11-15T21:43:23Z,128,232,17,3,"First cut as getting a few things extending `telepath.Model`.
- [x] Extend `Model` in `Project`
- [x] Extend `Model` in `TextBuffer`
- [x] Get specs :green_apple: 
",164,False,en,0
1107,1,2,0,Internals,kevinsawicki,2013-11-11T20:48:09Z,11,0,2,0,"### Problem
1. Open a file that scrolls in the editor
2. Move the cursor to the bottom
3. Focus the find and replace view (cmd-f)
4. Scroll the editor to the top without focusing it (using the scroll wheel)
5. Hit escape to close the find and replace view
6. Editor goes blank with only line numbers displaying
### Solution

Bring the hidden input into view when the editor gets focus since the scroll position may have changed since the last `focusout` event.
",461,False,en,0
1106,5,2,2,Internals,zcbenz,2013-11-12T03:43:41Z,7,2,4,0,"Closes #1105, #1042.
",21,True,en,0
1102,3,0,0,Internals,benogle,2013-11-09T00:57:38Z,130,1,5,0,"Add a `replace()` function to both the `Project` and the `TextBuffer`. For use in find-and-replace
- Replaces out of process using scandal for unopened paths.
- Replaced in process by using `buffer.change` on opened buffers. 
  - Make the changes in a transaction
  - Saves the buffer when it's not modified, leaves it modified if it's already modified
",353,False,en,0
1099,19,0,0,Internals,mcolyer,2013-11-13T00:07:34Z,14,12,3,4,"Fixes #1097 
- [x] UIWatcher
- [x] ProjectFindView
- [x] FuzzyFinder
- [x] ReleaseNotesView
- [x] Spellcheck
- [x] Statusbar
- [ ] TerminalSession
- [x] GitHubFile
- [x] TreeView
",179,False,en,0
1095,4,2,0,Internals,kevinsawicki,2013-11-07T18:13:50Z,14,11,3,0,"![](http://26.media.tumblr.com/tumblr_m2swmcxJqH1r15otbo1_r1_500.gif)

See details about the new mode in atom/telepath-next#1

Closes #1073
Closes #1082
",153,True,en,0
1091,4,0,0,Internals,kevinsawicki,2013-11-07T17:17:10Z,11,0,2,1,"The editor does not autoscroll on undo/redo since telepath was introduced.

This is one possible approach to fixing it by marking the last cursor for autoscroll when calling undo/redo on the edit session.

Closes #984 
",219,True,en,0
1089,3,4,0,Internals,zcbenz,2013-11-07T01:07:46Z,43,9,6,0,"This PR implement tasks to set development version and exe icon on Windows. The editor window still doesn't have a icon because of atom-shell bug: https://github.com/atom/atom-shell/issues/123.
",194,True,en,0
1088,6,0,0,Internals,benogle,2013-11-06T22:38:34Z,10,9,4,0,"In the tomorrow dark theme, the code is jammed up against the gutter. We should be able to use padding on the scroll view and have the editor gracefully handle. 

This: 
![screen shot 2013-11-05 at 6 41 45 pm](https://f.cloud.github.com/assets/69169/1479756/0d482d38-468d-11e3-97a7-e9072d5906ff.png)

Not this:
![screen shot 2013-11-05 at 6 42 04 pm](https://f.cloud.github.com/assets/69169/1479757/11acc564-468d-11e3-9955-f968515cd52f.png)

Here are some changes that need to happen in order to make this happen.
",514,True,en,0
1087,5,0,0,Internals,kevinsawicki,2013-11-06T02:30:36Z,27,25,2,0,"This brings back some specs that are now working again with telepath@0.21.0
",76,True,en,0
1078,3,2,0,Internals,kevinsawicki,2013-11-05T17:06:21Z,23,1,3,0,"Use the `overflowchanged` event to detect when the editor's size changes and update the soft wrap column accordingly.

The soft wrap column should now update properly when resizing the window, hiding/showing/resizing the tree view, and when splitting the editor.
",263,True,en,0
1077,5,4,0,Internals,thedaniel,2013-11-07T19:16:46Z,18,15,4,2,"A couple simple changes to build the docs into the atom.io repo:
- check if `../atom.io` exists
- skip building guides as they get imported into the DB and indexed for search
",175,False,en,0
1074,29,3,11,Internals,mcolyer,2013-11-07T22:48:39Z,138,81,15,3,"They aren't passing but atleast they run now.
## Tests to Fix
- [x] EditSession
- [x] Editor
- [x] File
- [x] Git
- [x] Keymap
- [x] Project
- [x] RootView
- [x] Syntax
- [x] TextBuffer
- [x] TextMateGrammar
- [x] ThemeManager
",227,False,en,0
1069,7,1,0,Internals,kevinsawicki,2013-11-01T21:01:55Z,12,4,4,0,":tada: 
![screen shot 2013-11-01 at 12 48 07 pm 1](https://f.cloud.github.com/assets/671378/1456580/efd7b90a-432e-11e3-951e-34514e774728.png)
",142,False,en,0
1066,13,2,0,Internals,probablycorey,2013-11-01T20:45:45Z,212,220,10,0,"I went through all of [Sublime's default key bindings](https://gist.github.com/probablycorey/33d2e164d74b6acd45b0) and adjusted our default bindings and some of the packages key bindings.

This may cause mass confusion, but I think it is a good move forward.

*\* TODO **
- [x] Publish packages with new key bindings
- [x] Update package.json
",343,True,en,0
1062,17,0,0,Internals,kevinsawicki,2013-11-01T16:14:58Z,254,827,40,0,"fs-utils is now the [fs-plus](https://github.com/atom/fs-plus) module.

Refs #950 
",83,True,en,0
1061,2,0,0,Internals,mcolyer,2013-10-31T19:00:34Z,36,0,2,0,"A fix for quitting the browser process when the last window closes on windows (#1060)

Also adds a first cut at build documentation for our different platforms.
",161,True,en,0
1057,10,2,0,Internals,nathansobo,2013-11-01T00:42:27Z,75,492,19,1,"- [x] Get serialization working
- [x] Make sure there's no horrible performance regressions
- [x] Add `persist: false` option for markers

This PR updates Atom to a brand new version of [Telepath](https://github.com/atom/telepath-next). It's a ground-up rewrite and better in a number of ways, but the biggest feature is the ability to move subdocuments around in the overall document. That requirement was radical enough that the design assumptions in the original Telepath were worth burning to the ground. This branch drops support for collaboration and deletes the replication specs. They were just too far away from the vision of where we're going and too painful to get working on the new Telepath. I'd like to revisit them after improving the health of the View <=> Model <=> Document correspondence.

Now that we're on a solid foundation that supports moves, we can iterate on this new version of Telepath from here on out. I promise no more rewrites :smile_cat:. Once this lands I'm excited to do an optimized, non-replicated solo mode for arrays and see if it saves us some memory on large documents. Then I plan to resume the ideas discussed in #920.
",1162,False,en,0
1055,7,0,0,Internals,kevinsawicki,2013-10-30T17:43:00Z,5,5,2,0,"Pretty minor change, just did a PR to make sure CI was :green_apple: and to discover if any packages broke which markdown-preview and whitespace did since they activate that package in some of the specs.
",204,True,en,0
1054,5,0,7,Internals,zcbenz,2013-10-31T00:28:57Z,23,10,6,0,"This fixed some errors when running `grunt`, `build`, `test` and `bootstrap` on Windows.
",89,True,en,0
1053,10,7,3,Internals,benogle,2013-10-30T19:21:20Z,143,45,9,0,"Allows me to open a resource as a singleton: only one of them can be open in any of the panes. 
- also add `split` option to `openSync()` that will open the resource in the rightmost split, or create the split if it doesnt already exist.

Suggestions welcome.
",260,False,en,0
1052,18,4,2,Internals,gjtorikian,2013-10-30T22:59:29Z,575,354,6,1,"Resolves #1024.

This brings the [Changer](https://github.com/atom/changer) package tutorial a bit up-to-date. A few things to note:
- I feel pretty strongly about keeping the general package creation docs separate from the ""creating your first package!"" docs. One is a reference, the other is a tutorial. In the interest of not keeping a giant page, I split the two parts.
- I wouldn't merge just yet. I'll still likely need to update _theme-variables.md_ and the companion ""Your first theme!"" docs
- Not that my code is perfect and marvelous, but it might be time to use [panda-docs](https://github.com/gjtorikian/panda-docs) (or some other module) to handle the creation of a mini-docs site, complete with a TOC, anchors for headings, and all that jazz

/cc @benogle @mcolyer 
",780,True,en,0
1041,5,0,0,Internals,probablycorey,2013-10-29T20:27:50Z,5,79,6,0,"Also fixed issue #633
",22,True,en,0
1040,10,1,0,Internals,kevinsawicki,2013-10-29T20:47:11Z,50,17,8,1,"Recently noticed the start time for me was trending back to `1.5s`.

This is a PR to get it down to the normal `800ms-1000ms` I usually see.

:racehorse::racehorse::racehorse:
",176,True,en,0
1039,4,0,0,Internals,kevinsawicki,2013-10-26T22:20:25Z,25,25,1,0,"`async` isn't requirable until `script/bootstrap` is done so don't require it until then.
",90,True,en,0
1038,9,4,6,Internals,probablycorey,2013-10-28T22:13:45Z,23,9,4,2,"Using a keymap file in ~/.atom will make it more obvious how to edit keymaps. We can also document the file so users can discover how to edit keymaps without having to search through docs.
",189,True,en,0
1037,10,0,3,Internals,probablycorey,2013-10-28T16:48:43Z,81,39,6,2,"Scenario:

There are two branches, `master` and `another-branch`. `another-branch` has modified `README.md`
1. Open Atom and modify `README.md` on the `master` branch and **don't** save it.
2. Close Atom.
3. Checkout `another-branch`
4. Open Atom.
5. Atom opens `README.md` but uses the disk contents instead of the serialized changes from the `master` branch.

Previously `README.md` would be opened as modified and contain the serialized changes from `master`. This was terribly annoying. 
",492,True,en,0
1035,69,5,0,Internals,mcolyer,2013-10-29T16:15:59Z,112,78,10,3,":rotating_light: The staging area for windows support. :rotating_light: 
- [x] Get core dependencies installable
  - ~~bootstrap fails on clone~~
  - ~~git-utils builds in windows atom/git-utils#7 (enables git-utils, scandal and collaboration)~~
  - ~~pathwatcher builds in windows atom/node-pathwatcher#1 (enables pathwatcher)~~
- [x] Get dev dependencies installable
- [x] Get core packages installable
  - ~~keytar builds in windows atom/node-keytar#2 (enables github-sign-in, gists and release-notes)~~
  - ~~spellchecker builds in windows atom/node-spellchecker#1 (enables spell-check)~~
  - ~~ctags builds in windows atom/node-ctags#1 (enables symbol-view)~~
- [x] Get `language-*` packages installable
- [x] Get atom's bootstrap to complete
## Issues
- [ ] atom/apm/src/auth.coffee ""security"" doesn't exist on windows.
- [ ] grunt-coffeelint/node_modules/coffeelint/package.json:    ""install"": ""[ -e lib/commandline.js ] || npm run compile"", 
  You can't use bash in your install script.
- [ ] Convert backslashes to forward slashes (git icon doesn't appear in tree-view)
- [ ] Fuzzy finder doesn't load
- [ ] Crashes after several seconds when `autocomplete`, `archive-view` and `bookmarks` are loaded (but not each package independently.
## Development Environment Notes
- Install Visual C++ 2010 Express - English from Microsoft
- Install the latest node 0.10.x from http://nodejs.org, 32bit
- Install the latest python 2.7.x from http://python.org, 32 bit
- Install Github for Windows
- Add `C:\Python27;C:\Program Files\nodejs;C:\Users\IEUser\Documents\GitHub\atom\node_modules\` to your PATH
- Set ATOM_ACCESS_TOKEN to your oauth2 credentials (run `security -q find-generic-password -ws 'GitHub API Token'` on OSX to get your credentials).
- Launch Github for Windows, sign in, clone Atom.
- Use the git shell and cd into your atom checkout.
- Run `script/bootstrap`
",1880,False,en,0
1033,2,2,0,Internals,probablycorey,2013-10-25T22:19:53Z,25,2,2,0,"`Project::scan` will scan a buffer's contents (instead of on disk contents) if the buffer is modified.

Fixes issue #487 
",122,True,en,0
1032,3,0,0,Internals,kevinsawicki,2013-10-26T22:26:31Z,19,1,2,1,"Previously commenting on hard tabs lines with soft tabs enabled would corrupt the text being commented.

See atom/language-c#1 for deets.
",138,True,en,0
1029,1,1,0,Externals,aroben,2013-10-24T16:21:57Z,1,1,1,0,"Passing --no-color to grunt should get rid of these.
",53,True,en,0
1028,3,0,0,Internals,kevinsawicki,2013-10-25T23:21:37Z,2,3,1,1,"Less 1.5.0 does proper exports/requires now so we no longer need our fork with [this fix](https://github.com/nathansobo/less.js/commit/6c666c22aa22b2a9118db4adbd19c25376e24d0a).

Closes #751 
",192,True,en,0
1023,4,1,0,Internals,mcolyer,2013-10-22T21:54:11Z,3,6,2,0,"This has been deprecated and I've now removed it. If you're currently using `{_} = require 'atom'` and then calling `_.nextTick` you should use node's `setImmediate` instead.
",175,True,en,0
1021,9,0,0,Internals,kevinsawicki,2013-10-22T20:52:41Z,7,14,2,0,"Follow on to #1012 

Remove the package activation shim and update all the packages that were previously activating packages using the `*-tmbundle` scheme.
",156,True,en,0
1020,15,6,13,Internals,probablycorey,2013-10-23T21:30:41Z,14,1,4,1,"This makes Space Pen's `flashError` method functional again and adds an option for a `visual beep`
",99,True,en,0
1019,14,0,0,Internals,mcolyer,2013-10-24T20:54:04Z,248,94,6,2,"This is another pass at documenting our public API. I'm going to focus on what's directly exported via `require 'atom'`
",120,True,en,0
1012,36,0,0,Internals,kevinsawicki,2013-10-22T20:02:07Z,237,131,14,1,"- [x] Add new `packageDependencies` field to `package.json`
- [x] Publish packages to atom.io
- [x] Publish converted TextMate bundles to atom.io
- [x] Upgrade APM
- [x] :copyright::information_source:  is :green_apple: 

Closes #912
### What's changed
- If you are adding a new Atom package as a dependency it now goes in `packageDependencies` instead of `dependencies`
- You need to have a keychain token or `ATOM_ACCESS_TOKEN` set now to bootstrap packages from atom.io (similar to how atom-shell downloads work).
- Bundled Textmate bundles have been converted and pushed to new repos using the `language-*` naming convention.
- `apm publish minor` now automatically pushes the tag (and `HEAD`)
",698,False,en,0
1011,9,1,0,Internals,zcbenz,2013-10-22T00:37:04Z,115,63,20,0,"On OS X there are two kinds of temporary directories: `/tmp` and `process.env.TMPDIR`, the latter is the one returned by `os.tmpdir()` or `temp.dir`, and doesn't have a permanent path. In this PR the `/tmp` is used for storing various caches, and `temp.dir` is used for storing temporary files.

On Windows we just use `temp.dir` for everything.
",346,True,en,0
1004,2,0,0,Internals,kevinsawicki,2013-10-21T15:29:51Z,23,12,2,1,"See https://github.com/atom/node-oniguruma/commit/01823244be6f0a3150082862e0805bdb6e2ef609 for the fix and #980 for details
",124,True,en,0
1003,8,2,0,Internals,zcbenz,2013-10-22T00:36:33Z,120,42,6,2,"Scripts converted:
- script/bootstrap
- script/build
- script/cibuild
- script/test

Errors got when `apm install` on Windows:

```
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192581401-0.7585285515524447\package\snippets\#include """" (inc).json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192581401-0.7585285515524447\package\snippets\#include """" (inc).json
npm ERR! code ENOENT
npm ERR! errno 34
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/mustache-tmbundle/-/mustache-tmbundle-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/property-list-tmbundle/-/property-list-tmbundle-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/java-tmbundle/-/java-tmbundle-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/puppet-textmate-tmbundle/-/puppet-textmate-tmbundle-1.0.0.tgz
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192584339-0.24995634844526649\package\preferences\SymbolList (class|node|define).json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192584339-0.24995634844526649\package\preferences\SymbolList (class|node|define).json
npm ERR! code ENOENT
npm ERR! errno 34
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/php-tmbundle/-/php-tmbundle-1.0.0.tgz
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192581636-0.056228541769087315\package\snippets\background-attachment: scroll:fixed (background).json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192581636-0.056228541769087315\package\snippets\background-attachment: scroll:fixed (background).json
npm ERR! code ENOENT
npm ERR! errno 34
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/ruby-on-rails-tmbundle/-/ruby-on-rails-tmbundle-1.0.0.tgz
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192584683-0.25869841827079654\package\snippets\<_php $this->‚Ä¶ _>.json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192584683-0.25869841827079654\package\snippets\<_php $this->‚Ä¶ _>.json
npm ERR! code ENOENT
npm ERR! errno 34
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/objective-c-tmbundle/-/objective-c-tmbundle-1.0.0.tgz
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192584699-0.8597134053707123\package\snippets\#import """" (imp).json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192584699-0.8597134053707123\package\snippets\#import """" (imp).json
npm ERR! code ENOENT
npm ERR! errno 34
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/html-tmbundle/-/html-tmbundle-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/sass-tmbundle/-/sass-tmbundle-1.0.0.tgz
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192584886-0.3901462631765753\package\snippets\Wrap in <_= ‚Ä¶ _>.json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192584886-0.3901462631765753\package\snippets\Wrap in <_= ‚Ä¶ _>.json
npm ERR! code ENOENT
npm ERR! errno 34
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192585027-0.8104720045812428\package\snippets\background-attachment: scroll:fixed.json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192585027-0.8104720045812428\package\snippets\background-attachment: scroll:fixed.json
npm ERR! code ENOENT
npm ERR! errno 34
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/python-tmbundle/-/python-tmbundle-1.0.0.tgz
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192585074-0.5557537979912013\package\macros\Inside Inheritance List: Overtype Closing ):.json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192585074-0.5557537979912013\package\macros\Inside Inheritance List: Overtype Closing ):.json
npm ERR! code ENOENT
npm ERR! errno 34
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/sql-tmbundle/-/sql-tmbundle-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/source-tmbundle/-/source-tmbundle-1.0.0.tgz
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192585511-0.6161916572600603\package\commands\Move to EOL and Insert "";"".json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192585511-0.6161916572600603\package\commands\Move to EOL and Insert "";"".json
npm ERR! code ENOENT
npm ERR! errno 34
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/shellscript-tmbundle/-/shellscript-tmbundle-1.0.0.tgz
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192585558-0.46963041042909026\package\snippets\#!:usr:bin:env (!env).json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192585558-0.46963041042909026\package\snippets\#!:usr:bin:env (!env).json
npm ERR! code ENOENT
npm ERR! errno 34
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/textmate-clojure/-/textmate-clojure-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/todo-tmbundle/-/todo-tmbundle-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/xml-tmbundle/-/xml-tmbundle-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/ruby-tmbundle/-/ruby-tmbundle-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/yaml-tmbundle/-/yaml-tmbundle-1.0.0.tgz
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192586339-0.345666924957186\package\macros\each_char { |chr| .. }  (eac).json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192586339-0.345666924957186\package\macros\each_char { |chr| .. }  (eac).json
npm ERR! code ENOENT
npm ERR! errno 34
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/text-tmbundle/-/text-tmbundle-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/perl-tmbundle/-/perl-tmbundle-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/pegjs-tmbundle/-/pegjs-tmbundle-1.0.0.tgz
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192587558-0.03808748512528837\package\snippets\#!:usr:bin:env perl.json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192587558-0.03808748512528837\package\snippets\#!:usr:bin:env perl.json
npm ERR! code ENOENT
npm ERR! errno 34
npm ERR! Error: ENOENT, open 'C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192584683-0.23252682946622372\package\snippets\get :on => :member.json'
npm ERR! If you need help, you may report this log at:
npm ERR!     <http://github.com/isaacs/npm/issues>
npm ERR! or email it to:
npm ERR!     <npm-@googlegroups.com>

npm ERR! System Windows_NT 6.2.9200
npm ERR! command ""C:\\Program Files\\nodejs\\node.exe"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\node_modules\\npm\\bin\\npm-cli.js"" ""--userconfig"" ""C:\\cygwin\\home\\zcbenz\\codes\\atom\\vendor\\apm\\.apmrc"" ""install"" ""--target=0.10.18"" ""--arch=ia32"" ""--msvs_version=2012""
npm ERR! cwd C:\cygwin\home\zcbenz\codes\atom
npm ERR! node -v v0.10.21
npm ERR! npm -v 1.3.9
npm ERR! path C:\cygwin\tmp\npm-2452-YYH-yp_o\1382192584683-0.23252682946622372\package\snippets\get :on => :member.json
npm ERR! code ENOENT
npm ERR! errno 34
npm ERR! fetch failed https://atom.cloudant.com/registry/_design/app/_rewrite/git-tmbundle/-/git-tmbundle-1.0.0.tgz
npm http GET https://atom.cloudant.com/registry/_design/app/_rewrite/git-tmbundle/-/git-tmbundle-1.0.0.tgz
npm http 200 https://atom.cloudant.com/registry/_design/app/_rewrite/git-tmbundle/-/git-tmbundle-1.0.0.tgz
npm

```
",14526,False,en,0
1001,8,2,8,Internals,probablycorey,2013-10-21T22:38:13Z,27,11,2,2,"This fixes two problems based on #979 

1) Chrome doesn't render lines with more than 2^16 chars in a single span.
2) Moving the cursor on long lines (> 1,000 chars) created a long pause or crashed Atom.
",204,True,en,0
1000,12,3,2,Internals,mcolyer,2013-10-22T23:14:07Z,117,9,5,4,"Make our default keybindings similar to Sublime's.
## Highlights
- Adds missing accelerators to menus that weren't on `.body`
- Adds `Edit > Lines`, we had the functionality but not the menu.
- Delete line `meta-d` -> `ctrl-K`
- Join line `ctrl-J` -> `meta-j`
## TODO
- Folding, Upper Case and Lower Case all use compound bindings, do we want to follow that?
",359,False,en,0
998,1,0,0,Internals,kevinsawicki,2013-10-18T16:40:25Z,5,270,5,0,"New library is [clear-cut](https://github.com/atom/clear-cut) with the extracted `slick.js` and `specificity.js`.

Refs #950 
",126,True,en,0
997,16,1,0,Internals,kevinsawicki,2013-11-11T18:19:19Z,448,423,40,24,"Updates core to not use any shims.
- [x] Remove dimension shims
- [x] Don't use `window.config`
- [x] Don't use `window.keymap`
- [x] Don't use `window.pasteboard`
- [x] Don't use `window.site`
- [x] Don't use `window.syntax`

Refs #950 
",238,False,en,0
994,27,11,25,Internals,benogle,2013-10-22T22:14:50Z,365,176,13,4,"- adds `PackageManager.enablePackage`
- adds `PackageManager.disablePackage`
- Themes are activated through the package manager just like regular packages. 
- `core.disabledPackages` is watched by the `PackageManager` now, so themes can be enabled and disabled at runtime.

Motivation: In the package generator, I want the package to be activated on creation. I don't want to have the logic for activating themes vs packages in the package-generator package. 
",460,False,en,0
991,34,3,13,Internals,mcolyer,2013-10-18T20:04:37Z,65,29,7,0,"Implements the changes discussed in #960
",41,True,en,0
989,11,0,4,Internals,probablycorey,2013-10-17T18:52:25Z,68,34,6,0,"This finalizes some low level asynchronous file reading calls and ensures that Atom fails (but does not crash) when opening files larger than 1MB.
",147,True,en,0
988,6,0,5,Internals,benogle,2013-10-17T20:43:56Z,79,35,2,0,"Still some incorrect or strange things in the docs, which I will update after fixing in the respective parts of the code:
- The package example now uses bad practices with styling
- The steps to create a theme are a bit incorrect
",230,False,en,0
987,2,0,0,Internals,kevinsawicki,2013-10-17T16:55:28Z,3,148,5,0,"This uses the new [fuzzaldrin](https://github.com/atom/fuzzaldrin) library for core scoring and fuzzy filtering so it can be used in packages freely.

Refs #950 
",162,True,en,0
977,21,0,0,Internals,kevinsawicki,2013-10-16T22:27:33Z,71,9662,37,0,"[space-pen](https://github.com/atom/space-pen) 2.0.0 exports jquery so let's use it through there instead of from `vendor/`

This upgrades us from jquery `1.7.1` to `2.0.3`.
### Things learned
- jquery focused rules changed a bit and a couple specs needed to be updated to be attached to the DOM. [:link:](http://jquery.com/upgrade-guide/1.9/#order-of-triggered-focus-events)
- [triggerHandler](http://api.jquery.com/triggerHandler/) has to be used for triggering focus/blur events on the `window` in specs.
- The old hacks for getting jquery to work headless no longer work.  We used to have a fake window object in `task-bootstrap` that shimmed just enough to have it requireable without throwing an error.  These shims no longer work and we shouldn't be used jquery tasks anyway so this has been removed.
- Doing `$(window).trigger 'beforeunload'` in specs causes jquery 2.0 to blow up, wrapping it up in a legit event works.
### Going forward

Packages should now feel free to rely on `space-pen` directly in their `package.json` since it now exports `$`/`jQuery` complete with all [these](https://github.com/atom/space-pen/blob/master/src/jquery-extensions.coffee) extensions.

Refs #950
",1193,True,en,0
974,15,0,0,Internals,probablycorey,2013-10-16T19:32:58Z,237,225,28,1,"This renames methods like `RootView::open` to `RootView::openSync` and `RootView::openAsync` to `RootView::open`.

Doing this required a lot of package changes, which are complete and on `cj-make-async` branches for affected packages.

Todo:
- [x] Merge all pacakge `cj-make-async` branches into master
- [x] Bump version and publish packages
- [x] Update Atom's package.json
",376,True,en,0
973,9,3,0,Internals,kevinsawicki,2013-10-15T21:48:18Z,55,342,48,0,"[atom/underscore-plus](https://github.com/atom/underscore-plus) is the new home for the utilities previously known as `underscore-extensions.coffee`.  This also upgrades us to the latest underscore release, `1.5.2`.

This also replaces the `MessageChannel` based implementation of  `_.nextTick` with a shim to `setImmediate` since that original method predates us having node support. `_.nextTick` should no longer be used

New packages should depend on this library directly when needed.

:mega::mega::mega:
The only thing that was weird upgrading was that `_.max` now returns a different value if multiple values in the same array produce the same value and that value is the max.  Previously it returned the last element with the max value, now it returns the first element.  We only had one place this mattered, when selecting a grammar in one spec we were relying on the last grammar in the list having precedence when they both generated the same path score.
https://github.com/jashkenas/underscore/pull/1124
:shell::shell::shell:

Refs #950 
",1049,True,en,0
970,15,0,1,Internals,kevinsawicki,2013-11-11T20:18:29Z,44,35,11,27,"Removes paths from `config.coffee` and place them in appropriate locations, i.e `ThemeManager`, `PackageManager`, etc.

This PR was originally going to extract config but instead now just cleans it up and it can be extracted later.

Refs #950 
",244,True,en,0
968,27,1,0,Internals,kevinsawicki,2013-10-15T00:51:51Z,171,586,31,0,"Removes the internal `EventEmitter` and `Subscriber` classes and uses [emissary](https://github.com/atom/emissary) instead.
- Shims `one` to `once`
- Shims `trigger` to `emit`
- Shims `subscriptionCount` to `getSubscriptionCount`

Going forward, `emit` will be used for non-UI classes and `trigger` will be used for UI classes (things on the DOM).

New packages should  directly depend on `emissary` instead of trying to access the `Emitter` and `Subscriber` classes through `require 'atom'`.

Refs #950
",504,False,en,0
965,10,4,30,Internals,mcolyer,2013-10-16T19:10:34Z,424,499,7,1,"Here's my best guess of minimum viable theme documentation.

@mattgraham I'd love to get your feedback as you've recently had to go through this process. What am I missing? What should be changed?
",197,True,en,0
959,5,0,2,Internals,kevinsawicki,2013-10-14T17:00:38Z,5,89,3,2,"Having jquery dependencies just for promises is bad, classes that do that sort of thing can't be required in the browser process or the build.

@probablycorey used `Q` for the new async stuff, this PR gets us completely off of `$.Deferred` and onto the new Q  hotness.

Refs #950
",280,True,en,0
956,2,0,0,Internals,mcolyer,2013-10-11T19:55:53Z,32,18,6,0,"Previously, if your package contained an error in any of the files read/parsed on load it would cause Atom to crash. This branch fixes that by not requiring metadata and initializing instance variables to proper default values.

Fixes #951 
",241,True,en,0
955,1,0,0,Internals,mcolyer,2013-10-11T18:20:38Z,27,9,2,0,"This correctly replaces the Atom version string in the application menu.
",73,True,en,0
954,4,1,1,Internals,mcolyer,2013-10-11T18:20:53Z,63,0,1,0,"Someone mentioned in our meeting the other day that it isn't super clear what our current documentation format is. I've done my best to distill it into `docs/proposals/atom-docs.md`. 

@nathansobo can you double check me here and make sure this includes all of the stuff we banged out before?
",293,True,en,0
953,52,1,0,Internals,kevinsawicki,2013-10-14T18:49:39Z,144,625,25,3,"- [x] Run package specs via `apm test`
- [x] Parallelize the core and package specs
- [x] Get all specs :green_apple:
- [x] Remove unused fixtures from core
- [x] Update spec runner UI to use fixtures dir from packages when running package specs

This brings the build time down to around 3 minutes again.

Refs #950
",317,False,en,1
949,3,0,0,Internals,zcbenz,2013-10-10T15:52:25Z,4,2,3,0,,0,False,en,0
947,9,3,0,Internals,benogle,2013-10-11T00:12:17Z,54,63,4,1,"Depends on #946 

Gets rid of the `viewsByClassName` approach from the pane. Just uses `viewsByItem`.
",102,True,en,0
946,6,0,4,Internals,benogle,2013-10-10T17:33:26Z,8,5,2,0,"In the speedup work i've been doing, I changed the `editor.hiddenInput` to use the cursorView's style attribute rather than `$.offset()` because it is much faster. However the hiddenInput and the cursorView had different parents, so was placing the hidden input in the wrong spot. Occasionally the hiddenInput would get focus and scroll the `scrollView` which blanks the editor window.

Soooo, this moves the hiddenInput to the underlayer, and places it in the visible area when it's focused, keeping the speedup and mitigating the editor blank screen.
",553,True,en,0
945,12,1,1,Internals,mcolyer,2013-10-11T15:56:19Z,21,22,7,1,"This is a proposal to make it more clear/explicit which environment a specific source file executes within. I've found myself confused countless times when working across the browser/process boundary.

@kevinsawicki mentioned that this `browser` might not be the best name and that @probablycorey had a proposal for different better names than `browser` and `renderer`. Let's discuss as I'm not wedded to `browser` but if we change it, I'd like to also change atom-shell to match our new names.

Refs #950
",506,True,en,0
941,4,11,0,Internals,kevinsawicki,2013-10-09T16:33:18Z,28,8,3,1,"New windows now open at the same size as the current window and centered.

The default default size has also be increased from 800 x 600 to 1024 x the total screen height.

Feedback welcome
",190,True,en,0
940,2,1,4,Internals,benogle,2013-10-08T23:10:27Z,54,15,1,0,"The gutter rendering is the last piece in the editor rendering :racehorse: puzzle. Most of the time we just need to add or remove few lines form the ends, but currently all the line numbers are re-rendered all the time

This pull detects the case when we can partially render, and does just that. 

Scrolling is smoother! Less work is being done when a newline is added or a line is removed! It's much better.
",410,True,en,0
939,36,1,11,Internals,probablycorey,2013-10-10T20:15:50Z,404,87,11,2,"The goal of this PR is to make opening large files possible. It adds an async pathway to open a file but keeps the existing synchronous path around for tests and compatibility.

The slow part now appears to be telepath. When opening a 1 meg file this is the profile:
![file-1m txt - _users_corey_desktop_files-1](https://f.cloud.github.com/assets/596/1285198/a9085faa-2fa3-11e3-99b6-513eb8865def.jpg)

If you try and open a 5 meg file Atom will still crash because it runs out of memory. I'm not sure the proper way forward here. We either need to make telepath work well with large files, or we need to make large files not use telepath.
",639,True,en,0
938,15,0,4,Internals,kevinsawicki,2013-10-07T23:19:21Z,60,37,5,0,"Packages can now register a `urlMain` that will be loaded as the bootstrap script for new windows spawned from opening urls.

The basic idea is that the host of the url being opened is mapped to the package name.  If that package has a `urlMain` registered then a new window is created with that `urlMain` as the bootstrap script.

So `atom://collaboration/12345` would load the collaboration package's `./lib/bootstrap.coffee` when opened.

The goal of this PR is to get collaboration URLs working again without Atom core knowing about the collaboration package.

See https://github.com/atom/collaboration/pull/14 for a reference implementation.
",647,True,en,0
935,6,1,7,Internals,benogle,2013-10-07T22:35:19Z,152,4,4,0,"A current point of slowdown is the gutter handling done by the git-diff and bookmarks modules. The profiler tells me that most time is spent in `jQuery.find` trying to match attributes.

I want to have an api for changing classes on gutter rows that make it easy to do the right thing. 

I've removed the `lineNumber` attribute and opted instead for a `line-number-[0-9+]` approach. Then I use the nodes directly. 

Nearing finish. 
",433,True,en,0
931,5,2,0,Internals,gjtorikian,2013-10-08T16:39:23Z,23,4,3,2,"Well, also update _to_ `0.26.0`.

/cc @kevinsawicki 
",53,True,en,0
927,13,4,3,Internals,mcolyer,2013-10-08T23:30:15Z,183,110,17,4,"Implements the design that we discussed in https://github.com/atom/atom/discussions/873.

The goal of this pull is to allow packages to append static menu items that utilize commands to the application menu. I'm sure we'll need more flexibility in the future but our philosophy is to add when we need it rather than guess.
## TODO
- [x] Create MenuManager class
- [x] Move menu template out of ApplicationMenu
- [x] Load menu templates from packages
- [ ] Add Specs
",466,True,en,0
923,4,0,2,Internals,mcolyer,2013-10-03T18:47:30Z,9,5,2,0,"Previously, if you attempted to run a spec window and an Atom process was already running it would run the specs in the already running process which prevented the spec output from being seen.

This also updates the bundled version of apm to include `apm test`.
",262,True,en,0
922,1,2,0,Internals,kevinsawicki,2013-10-03T01:52:13Z,1,1,1,0,"During a little startup profiling I noticed that all package stylesheets were being loaded twice.

This change fixes that but I just wanted to check with @benogle  and @mcolyer to double check that this is okay to do. Stylesheets aren't loaded until packages are activated as of pull #880 so this seemed safe to me.
",316,True,en,0
921,2,1,0,Internals,kevinsawicki,2013-10-03T16:46:43Z,10,41,3,0,"Previously this involved finding/creating/removing and style tag which took up some time in specs and this seemed functionally equivalent.
",139,True,en,0
919,6,6,0,Internals,mcolyer,2013-10-03T17:57:40Z,3,3,4,0,"I'd like to prevent the window from showing when just running tests from the command line.
",91,True,en,0
917,3,1,4,Internals,mcolyer,2013-10-02T20:25:01Z,8,6,3,0,"This is useful for implementing `apm test` from atom/apm#5.

To run tests from the command-line you can now do `atom -t --spec-directory=""<dir-to-specs>""` the output will be in the console and a return code of 0 indicates success.

@kevinsawicki thoughts?
",256,True,en,0
915,2,1,2,Internals,gjtorikian,2013-10-02T04:50:04Z,2,2,2,0,"Closes #909.
",13,True,en,0
914,1,0,0,Internals,kevinsawicki,2013-10-02T18:02:26Z,1,3,1,0,"Packages now specify their dependencies in package.json so they should no longer rely on the availability of modules in the main node_modules folder.

Any package passively using atom's `node_modules` folder for requires will now fail to run when linked.
",255,True,en,0
913,7,0,0,Internals,kevinsawicki,2013-10-01T22:20:16Z,48,48,2,0,"Our iriscouch.com DB has been inaccessible for over 24 hours over HTTPS so let's switch to cloudant.com until atom.io is ready to :roller_coaster:
",147,True,en,0
908,1,0,0,Internals,kevinsawicki,2013-10-01T22:36:01Z,16,4,2,0,"This has been a long standing Atom issue where the editor only renders a certain number of lines based on its current height, but if that height changes because another view is hidden or removed then the editor will display missing lines.

The proposed fix is to render enough lines to fill the window since the editor does get a window resize event for when it shrinks/grows.
### Steps to reproduce
1. Open Atom with no editors open
2. Do a project find for something with a lot of results so that the view takes up most of the vertical space
3. Open an editor
4. Close the find and replace view
5. The editor is now missing rendered lines

The following screenshot shows this bug, the editor has 37 lines but after the find and replace view is closed only 29 lines are rendered.  Clicking in the editor causes the remaining lines to render.

![screen shot 2013-09-30 at 4 13 12 pm](https://f.cloud.github.com/assets/671378/1241758/e9a47d10-2a25-11e3-8513-ff94b4ebb905.png)
",975,True,en,0
901,43,15,36,Internals,benogle,2013-10-07T17:36:38Z,407,173,10,9,"Scrolling is really laggy/choppy on my machine. So I did a bunch of profiling:
- [x] When scrolling, the Editor updates the position of the cursors and selection, calling `Editor.positionLeftForLineAndColumn`. When the cursor or selection is on an unrendered line, `Editor` creates the line! 
  - I added a check to only update the cursors and selections when they are within the rendered range (7f83b38)
- [x] `positionLeftForLineAndColumn` is _crazy slow_
  - When scrolling, the cursor doesn't move and the lines dont change, but the Editor still uniquely calculates the left pixel value.
  - I added a cache of line-and-column:pixel-value (the beginnings in 5448da9, finished in 4852f0c)
  - I wrapped each character in a span and changed `positionLeftForLineAndColumn` to get all the character spans, then sum the widths of them. This turned out take ~40% the time of the previous implementation. Yay! See  de9bfb4
- [x] Gutter rendering is slow. It rerenders all gutter numbers when scrolling. The editor only renders the dirty lines. We should rework it so the Editor tells the Gutter to only render the dirty lines. Note: I tried reusing the current nodes rather than regenerating everything all the time and it is marginally faster.
  - Implemented in fdd9e30
- [x] `isVisible` is still slow. Turns out calculating the width and height is slow. In my previous tests the browser must have been caching the size. I want to find another way to calc it or eliminate it from the updateDisplay calcs.
  - Using `css('display') != 'none'` again in de1346d
- [ ] GitDiff rendering is slow when there are changes. There is a lot of querying the gutter nodes
- [ ] Bookmarks rendering is slow. There is a lot of querying the gutter nodes

I would like feedback in approach and other places to look for speedups.
",1811,False,en,0
900,7,3,0,Internals,mcolyer,2013-10-01T23:41:56Z,10,1,3,3,"This is a proposal for how we can communicate from the browser process to the render process that a new update is available. This was my best guess about how to do it but I'm definitely open to suggestions.
### Summary
- Sparkle triggers 'ready-for-update-on-quit' in the browser process
- The browser process forwards that event as a command to all of it's render processes.
- Each render process receives that event as a command and triggers it on a rootView.
- Packages that would like to know when an update is available listen to `window:update-available`

Note this branch also adds `updateAvailable` to loadSettings which is passed to AtomWindow (which is available in a browser process by calling `atom.getLoadSettings().updateAvailable`).

This enables atom/release-notes#1
",783,False,en,0
898,4,0,0,Internals,kevinsawicki,2013-09-27T23:06:48Z,69,8,3,0,"Changes `Selection.selectWord()` to not match on non-word characters if the cursor is currently between and word and non-word character.
",137,True,en,0
896,2,9,0,Internals,benogle,2013-09-27T22:05:48Z,16,2,2,0,"Moving between tabs is slow for me, and it's frustrating.

I did some profiling and it turns out `isVisible()` is slow. `Editor.updateDisplay` and `Editor.pixelPositionForScreenPosition` both call it every time they are called. And when you switch panes, bookmarks and git-diff use it to check for gutter visibility. 

So, I changed it to not use the `:visible` filter, and just check the display property instead. 
- Are there cases where an editor is not visible, but display is not none? Maybe there are cases I'm not thinking about.

This even makes scrolling feel snappier for me. Win, provided there arent any cases where this fails.
",640,True,en,0
890,7,5,0,Internals,zcbenz,2013-10-04T17:04:53Z,127,22,3,7,"- [x] Find atom-shell's download URL with releases API.
- [x] Get the access token from OS X keychain.
- [x] Make it work on CI
",128,False,en,0
886,6,3,1,Internals,probablycorey,2013-09-26T21:33:11Z,20,4,4,0,"It would be nice to add this to the window chrome. But I don't think we can do that yet with atom-shell. For now I've added a little warning triangle to the upper right when the window is in dev mode. Is this too annoying?

![atom - _users_corey_github_atom](https://f.cloud.github.com/assets/596/1214567/3c5f51f2-2642-11e3-9880-12511fd7768a.jpg)
",347,True,en,0
885,20,0,0,Internals,benogle,2013-09-25T23:46:20Z,152,127,17,0,"- Uses [scandal](http://github.com/atom/scandal)
- Add a couple of additions to results from `buffer.scan` to match `project.scan`
",131,False,en,0
884,3,0,0,Internals,nathansobo,2013-09-25T20:30:53Z,17,20,3,0,"This supplants #882, which had a way too optimistic name.

The new version of telepath provides telepath.Model, document-based property resolution, and relational operators. Nothing much has changed yet except for the serialization of the window state, but this upgrade begins a process that will eventually eliminate all manual (de)serialization and manual management of telepath state documents.
",398,True,en,0
883,5,3,0,Internals,kevinsawicki,2013-09-25T23:31:46Z,10,0,2,0,":black_large_square::black_medium_small_square::black_large_square:
:black_medium_small_square::black_large_square::black_medium_small_square:
:black_large_square::black_medium_small_square::black_large_square:

Fix the regression where the editor sometimes goes blank introduced in #852 

Basic idea is that now that the hidden input has an offset it needs to be reset to `0,0` on blur so the next focus event doesn't cause the editor to scroll.

Steps to reproduce:
1. Open atom with no editors open
2. Open a large file (something the size of jquery.js or editor.coffee works consistently)
3. Click the tab icon
4. Editor goes blank
",636,False,en,0
881,40,0,0,Internals,kevinsawicki,2013-10-02T20:45:37Z,627,511,16,7,":earth_africa: :earth_americas: :earth_asia:
- [x] Move all stylesheet helpers from `window` to `ThemeManager` accessible via `atom.themes`
- [x] Make `atom.coffee` export an `Atom`  class that will be instantiated in  `window-bootstrap.coffee`
- [x] Move all package helpers from `window`/`atom` to `PackageManager` accessible via `atom.packages`
- [x] Move deserializer helpers from `window` to `atom.deserializers`
- [x] Move `syntax` from `window` to `atom.syntax`
- [x] Move `keymap` from `window` to `atom.keymap`
- [x] Move `config` from `window` to `atom.config`
- [x] Move `project` from `window` to `atom.project`
- [x] Move `rootView` from `window` to `atom.rootView`
- [x] Move `pasteboard` from `window` to `atom.pasteboard`

Feedback welcome.
:earth_africa: :earth_americas: :earth_asia:

Once this is merged, the packages will be migrated to use these new globals and then the old `window` globals and shim methods will be removed.
",947,False,en,0
880,1,1,0,Internals,kevinsawicki,2013-09-25T17:28:05Z,5,2,1,0,"Atom currently loads a package's stylesheets when activated even for packages using activation events.

This can cause atom to have a delayed startup since it is too eagerly loading things it might not even use.  Now that we have less caching going on it is even more important to only load stylesheets when needed.

If packages are using activation events it should signal that they don't need their stylesheets actually loaded until right before `activate` is called on their package main.

A good example of where this can speed things up is the markdown preview.  It has a pretty hefty stylesheet that is loaded immediately at startup even though it isn't used until a markdown file is previewed.
",701,True,en,0
879,2,0,0,Internals,kevinsawicki,2013-09-25T02:50:52Z,1,2,1,0,"Gets it back working
",21,True,en,0
878,7,0,3,Internals,mcolyer,2013-09-26T20:26:02Z,81,1,4,1,"Adds several getter methods required to view the keymap. Corresponds to atom/settings-view#9.
",94,True,en,0
875,2,3,6,Internals,benogle,2013-09-24T17:30:29Z,8,1,2,0,"Multiple new buffers with cmd+n!

This does the minimum. All buffers have the title 'untitled'. We could number them?

See #679 
",129,True,en,0
874,11,0,0,Internals,benogle,2013-09-23T23:34:24Z,61,6,7,0,"This fixes a bunch of style issues that have come up since the new theme system, and a few things that have been annoying me. 
",127,True,en,0
871,1,0,0,Internals,kevinsawicki,2013-09-23T19:59:14Z,1,1,1,0,"Fixes #794 
",12,True,en,0
870,6,3,0,Externals,paulcbetts,2013-10-11T22:34:54Z,57,12,9,18,"Most of the `evil-files` are so evil, that they are invalid on Win32. Let's generate these files in the test instead so that we can make them per-platform
",155,True,en,0
869,2,0,0,Internals,mcolyer,2013-09-24T16:56:11Z,1,0,1,0,"So atom/exception-reporting reports our runtime errors to Octolytics under the 'error' event. Currently it only reports whether it's in devMode and the error and the line on which the failure occurs and the user-agent (Atom version). I believe even this minimal information will be valuable to us in two cases:
- If errors spike after releasing we know we've regressed
- We can examine individual errors by version and attempt to find bugs
- Possibly provide explanations if users stop using atom

I originally proposed sending this data to haystack but there was some concern about the security of doing that since any secret key we would include would be easily snoopable by others.

Also the reason we don't include a backtrace is that we can't until atom/atom-shell#86 lands. I think we should merge this and if there aren't any objections/suggestions I plan on doing so in the next day or so.
",898,False,en,0
868,4,9,0,Internals,kevinsawicki,2013-09-23T23:14:11Z,5,0,2,1,"Adds a new package that displays information about where time is spent in Atom.

Currently includes 2 things, package loading, and package activation.

Just wanted to get a plugin going where we surface this information so if people are finding atom startup sluggish they have a place to look for the possible cause.

![screen shot 2013-09-22 at 3 32 32 pm](https://f.cloud.github.com/assets/671378/1188525/f6e41940-23d6-11e3-8c99-c70e62587c6c.png)
",449,True,en,0
862,1,1,0,Internals,zcbenz,2013-09-20T12:41:18Z,1,1,1,0,"Should fix previous random crash on startup.
",45,True,en,0
860,2,0,0,Internals,probablycorey,2013-09-19T21:44:36Z,16,13,3,0,"Commands like `editor:newline` and `editor:outdent-selected-rows` aren't applicable for mini-editors. But those keybindings where still being captured by mini-editors.

This pull ensures only the key bindings that mini-editors use are captured. It  also removes irrelevant commands that mini editors shouldn't respond to.
",322,True,en,0
857,1,0,0,Internals,kevinsawicki,2013-09-17T22:22:07Z,2,5,4,0,"Use a package.json level dependency instead
",44,True,en,0
855,2,1,0,Internals,probablycorey,2013-09-18T23:26:37Z,1,1,1,1,"This replaces the [Command Panel](https://github.com/atom/command-panel) with [Find and Replace](https://github.com/atom/find-and-replace). Find and Replace now has same functionality as the Command Panel, so I think now is a good time to switch it to be the default.

The Command Panel has the potential to be very powerful, but it has a syntax most people are unaware of. The reason for moving to the Find and Replace package is to give people a more familiar interface.

![atom - _users_corey_github_atom](https://f.cloud.github.com/assets/596/1160349/6db52810-1fd7-11e3-949c-eab3ad1a4fe3.jpg)

![atom - _users_corey_github_atom-1](https://f.cloud.github.com/assets/596/1160355/8bfe7772-1fd7-11e3-8aa3-353da8fd504f.jpg)
",723,True,en,0
853,89,2,0,Internals,kevinsawicki,2013-09-20T19:55:12Z,714,730,111,3,"This is a pull request to get the public Atom API going.

Basically it adds an `exports` folder on the `NODE_PATH` that can be used by packages to require things from core.

`src` will eventually be removed from the `NODE_PATH` so every internal class will no longer be visible to packages.

Packages would do things like `{$, RootView} = require 'atom-api'` to access classes from the public API. 

`atom-api` will be renamed to `atom` once it doesn't clash with the existing `atom.coffee` in `src/`.
- [x] Add `exports/` to `NODE_PATH`
- [x] Update core specs to use relative require paths
- [x] Update core classes to use relative require paths
- [x] Remove `src/` from `NODE_PATH`
- [x] Remove `vendor/` from `NODE_PATH`
- [x] Remove `static/` from `NODE_PATH`
- [x] Remove `spec/` from `NODE_PATH`
- [x] Remove resource path from `NODE_PATH`
- [x] Rename `atom-api` to `atom`
- [x] Convert all packages to `require 'atom'`
- [x] Doc all classes/methods in the public API
# What's in the public API?
- [BufferedNodeProcess](https://github.com/atom/atom/blob/master/src/buffered-node-process.coffee)
- [BufferedProcess](https://github.com/atom/atom/blob/master/src/buffered-process.coffee)
- [Editor](https://github.com/atom/atom/blob/master/src/editor.coffee) :triangular_flag_on_post:
- [Directory](https://github.com/atom/atom/blob/master/src/directory.coffee)
- [EventEmitter](https://github.com/atom/atom/blob/master/src/event-emitter.coffee)
- [File](https://github.com/atom/atom/blob/master/src/file.coffee)
- [Git](https://github.com/atom/atom/blob/master/src/git.coffee)
- [fs](https://github.com/atom/atom/blob/master/src/fs-utils.coffee)
- [RootView](https://github.com/atom/atom/blob/master/src/root-view.coffee) :triangular_flag_on_post:
- [ScrollView](https://github.com/atom/atom/blob/master/src/scroll-view.coffee)
- [SelectList](https://github.com/atom/atom/blob/master/src/select-list.coffee) :triangular_flag_on_post:
- [Subscriber](https://github.com/atom/atom/blob/master/src/subscriber.coffee)
- [Task](https://github.com/atom/atom/blob/master/src/task.coffee) :triangular_flag_on_post:
- [pathForRepositoryUrl()](https://github.com/atom/atom/blob/master/src/project.coffee)  :triangular_flag_on_post:
- `$` as jquery with our extensions
- `_` as underscore with our extensions
- `$$`, `$$$`, and `View` from SpacePen with our extensions
- `Point` and `Range` from telepath
- `stringscore` from vendor

:triangular_flag_on_post: Not exported when running as node child process
",2502,True,en,0
852,9,3,0,Internals,zcbenz,2013-09-18T06:09:18Z,35,5,3,1,"- Make IME's input bubble follow the cursor.
- Fix OS X's accented character suggestion. (https://github.com/atom/atom-shell/issues/50)
- Show IME's composition text in the editor (https://github.com/atom/atom/issues/795)
",222,False,en,0
850,12,9,16,Internals,mcolyer,2013-09-20T21:36:11Z,347,13,17,3,"A discussion with code.

So we'd like to have context menus which populate with menu items based on the DOM element that was right clicked. This branch is a working proposal that does that (there's a corresponding tree-view branch).

I'm thinking that it should follow the pattern we've put forth with keybindings, use a css selector to specify the relevant elements and then list the label and it's corresponding command to trigger. I'd be open to adding this as a dedicated file in the atom package format like keymaps but I feel like it might be nicer to register another export function in packages (something like `registerContextMenus`). Or maybe packages should call onto globals like is done currently. Thoughts?
## TODO
- [ ] Clean up the inspect element stuff and register it in the proper place
- [ ] Write tests once, after agreement on approach.
",859,True,en,0
848,20,0,0,Internals,kevinsawicki,2013-09-17T00:02:37Z,94,28,9,0,"- [x] Use [less-cache](https://github.com/atom/less-cache) to cache compiled LESS files to `/tmp/atom-compile-cache/less`.
- [x] Bundle pre-built caches for light/dark ui/syntax combinations

This makes opening a dev window go from 3 seconds to 1 second on my machine.
",269,False,en,0
844,6,1,2,Internals,zcbenz,2013-09-17T01:44:22Z,59,1,5,3,"See #197 for the original issue.

This PR adds protocol handler for the `atom` protocol, so network (or file) requests with URLs of `atom` protocol would respect the load path similar to `require` and `requireStylesheet`. For example, `atom://archive-view/images/zip.png` would be resolved to `~/.atom/packages/archive-view/images/zip.png` or `/Applications/Atom.app/Contents/Resources/node_modules/archive-view/images/zip.png`.

But also note that we have to explicitly specify package's name in the URL, since it's very difficult to find out from which file the request was sent. More discussions can be found at https://github.com/atom/atom-shell/pull/65.
",659,True,en,0
843,1,1,0,Internals,benogle,2013-09-13T18:05:55Z,5,4,1,0,"Mini editor capture the mousewheel events. This fixes it. See #838 
",68,True,en,0
842,2,1,2,Internals,benogle,2013-09-17T01:15:49Z,7,2,2,4,"Right now theme loading order is a bit non-intuitive. Visually in the settings, themes are stacked vertically. My expectation is that the top most theme should override any styles defined in themes below.

This is currently true for the `ui-variables` loading -- the top-most theme's `ui-variables` are picked to override any other `ui-variables` files.

But theme loading is currently the opposite -- themes are loaded top to bottom, so the bottom theme can override things on the top theme.

This pull reverses the order of theme loading so the top-most theme is loaded last. That way, the top-most theme's styles can override any styles defined by themes below/after it. 
",675,True,en,0
841,1,0,0,Internals,benogle,2013-09-12T20:54:19Z,3,3,1,0,"It was selecting .blocks in the highlighted syntax. See #836
",61,True,en,0
839,20,0,0,Internals,benogle,2013-09-12T21:09:08Z,158,16,16,0,"It looked terrible with the addition of the new theme. This adds components in the themes to make the settings look reasonable. 

Depends on #810.
",147,True,en,0
837,6,1,4,Internals,mcolyer,2013-09-13T18:56:45Z,2401,2378,6,1,"So this was inspired by #704. I'm open to feedback here as to how this should be done, this was my best guess as to how to properly implement this.

The proposed syntax is as follows, `atom file.coffee:12` would open the file.coffee at line 12. @paulcbetts is it a bad idea to use a colon as a the separator here (not sure about what's valid in windows)?
",355,True,en,0
810,16,1,17,Internals,benogle,2013-09-12T21:03:50Z,177,107,9,1,"There were a number of additions I needed to get https://github.com/atom/dev-live-reload to work. I tried to minimize my changes. The theme API could be better, but I think this is the first package that accesses it.

This could conceivably be split into a couple of pull requests:
- theme API updates
- stylesheet reloading updates
- fix to file.coffee
",354,True,en,0
807,1,0,0,Internals,mcolyer,2013-09-11T16:50:12Z,2,2,1,0,"I don't think documentation urls should have patch versions in them (ie I think it should be `/v26.0/` and _not_ `/v26.0.0/`).

I'll leave this open for a day and see if anyone disagrees, if not I'll merge it.
",210,True,en,0
806,1,1,0,Internals,gjtorikian,2013-09-10T18:41:13Z,1,1,1,0,"Fixes #551.
",12,True,en,0
805,4,0,2,Internals,kevinsawicki,2013-09-09T18:02:24Z,38,8,7,0,"The coffee-cache module is no longer working for us since when you sync back to an older version of a module the cache thinks the file is older than the cached version and therefore doesn't recompile it.

This PR brings back our old pre-node strategy of using the digest of a file's content to determine its cache path.
",320,True,en,0
803,1,0,0,Internals,mcolyer,2013-09-10T18:52:30Z,1,0,1,4,"This allows us to collect some basic metrics about our users. See atom/metrics for more details.

I think we should install this be default so that's why I've included in the bundled packages. If we're cool with this I'll merge.
",229,True,en,0
802,3,1,0,Internals,zcbenz,2013-09-06T01:28:30Z,8,3,3,0,,0,False,en,0
800,3,1,0,Internals,probablycorey,2013-09-10T21:51:58Z,11,1,3,4,"We lost benchmark running in the atom-shell purge, this brings them back.
",74,True,en,0
799,1,0,0,Internals,mcolyer,2013-09-09T17:25:12Z,2,2,2,3,"So we should use being ssl hosted assets in our guides to prevent content warnings.
",84,True,en,0
798,3,0,4,Internals,probablycorey,2013-09-13T16:16:23Z,18,18,4,7,"This is useful when developing a package outside of Atom core. I still need to handle the case where there is no `spec/fixtures` directory.
",140,True,en,0
797,11,2,0,Internals,kevinsawicki,2013-09-09T17:47:30Z,80,43,4,3,"Currently atom builds against the latest version of atom-shell.

This can cause issues when you push an innocent atom change and your build automatically pulls in a new atom-shell and fails because of something related to the atom-shell upgrade.

We should version atom-shell like we do all our other dependencies, locked to a version specified in the `package.json` file.

Now atom-shell upgrades can be staged on a branch or pr before merging and also branches now build against the same version each time unless explicitly upgraded.
",536,True,en,0
796,1,0,0,Internals,kevinsawicki,2013-09-05T18:56:56Z,1,1,1,0,"gjtorikian/nak#24 fixes #784 
",30,True,hu,0
790,3,0,0,Internals,kevinsawicki,2013-09-05T19:03:18Z,3,6,1,1,"This removes `~/.atom/packages` from the `NODE_PATH`, I couldn't think of any good reason it should be on there as packages can resolve each other via the `atom` global.

This also only puts `spec` on the `NODE_PATH` when running a spec window.
",245,True,en,0
787,23,13,8,Internals,benogle,2013-09-04T20:56:04Z,251,24,22,0,"A pull to implement #775.
### Notes
- Importable files are now in `/static/less-imports`. This is necessary so atom.less does not import the `ui-variables` from the current directory, but instead looks on the less import path.
- Bootstrap is only loaded once
- Theme swapping doesn't feel any slower
- Should not affect current look and feel as ui-colors is still in there.
",374,False,en,0
786,1,1,0,Internals,kevinsawicki,2013-09-04T15:54:24Z,1,0,1,0,"@jasonrudolph created a cool package to open files on .com, let's bundle it by default.

https://github.com/atom/to-the-hubs
",125,True,en,0
783,4,1,0,Internals,kevinsawicki,2013-09-03T21:29:47Z,15,8,4,0,"This allows people using Atom from speakeasy to still be able to run the spec runner for packages they are developing.

Fixes #678
",131,True,en,0
781,3,1,0,Internals,kevinsawicki,2013-09-03T21:24:48Z,4,4,3,1,"# Background

Long ago CI was a bit flaky as we integrated the building of node modules and atom-shell into atom's build process.

To get it consistently building we decided to have `script/cibuild` be as aggressive as possible in deleting cached files between builds. Everything went, the coffee cache, the local `atom-shell` folder, cached atom-shell zips, the local `node_modules` folder, and the cache of previously downloaded modules.

Things are now significantly less flaky; atom-shell tags releases, we are tagging and publishing our own atom packages, apm rebuilds native modules when atom-shell gets upgraded, and therefore I am proposing we now favor faster build times over a pristine atom build environment.

This will not impact the deploy script, we will still do the super clean and make sure everything builds with fresh copies of all the modules and atom-shell.
# Results

The non-spec portion of atom's build goes from ~4 minutes to ~1 minute.

The last master build when this branch started was [380 seconds](https://janky.rs.github.com/atom/master), the latest build of this branch was [218 seconds](https://janky.rs.github.com/atom/less-clean).
",1167,True,en,0
780,1,1,0,Internals,jasonrudolph,2013-08-31T20:13:08Z,11,0,1,0,"As discussed in [atom/to-the-hubs#1](https://github.com/atom/to-the-hubs/pull/1#discussion_r5995319), it's useful to have `Git` provide a delegator for `#getUpstreamBranch`, in addition to the other delegators that it provides.

Note: Based on the [numerous other delegators](https://github.com/atom/atom/blob/34f16c58e80678d65b9ba19bb35f556bdcfaffa6/src/git.coffee#L214-L224) in this class, it looks like we've chosen not to add [specs](https://github.com/atom/atom/blob/34f16c58e80678d65b9ba19bb35f556bdcfaffa6/spec/git-spec.coffee) for simple delegators. So, I've followed that convention. However, if it would be helpful to have a spec for this method, I'd be happy to add one. (We'd likely need to add a [fixture repo](https://github.com/atom/atom/tree/34f16c58e80678d65b9ba19bb35f556bdcfaffa6/spec/fixtures/git) that includes an upstream branch.)
",853,True,en,0
779,6,1,0,Internals,kevinsawicki,2013-09-03T21:12:29Z,47,7,4,3,"This is a :earth_americas: that @jbarnette wants to live in.
- [x] Upgrade to latest `coffee-script-tmbundle` for latest Literate grammar
- [x] Upgrade `oniguruma` to support named capture groups (the exception shown in #776)
- [x] Tokenize empty lines
- [x] Add markdown styles to light and dark themes

We need to tokenize empty lines since the grammar matches empty lines to denote the end of a paragraph section.

Fixes #776 

![screen shot 2013-08-30 at 4 20 43 pm](https://f.cloud.github.com/assets/671378/1061265/cc81f744-11ca-11e3-84af-83da38c0c776.png)
",562,False,en,0
778,15,8,2,Internals,mcolyer,2013-09-16T20:19:36Z,179,2126,64,16,"Currently if a user wants to use a 3rd party theme it's necessary to copy it into ~/.atom/themes/. However we can make that easier by leveraging our handy packaging system, apm. 

This is the proposed implementation of #766.
## TODO
- [x] Make the theme loader aware of apms containing themes.
- [x] Implement `index.css/less` entry point.
- [ ] Implement theme-spec in atom-package-spec.
",389,True,en,0
773,0,2,9,Internals,probablycorey,2013-09-03T21:49:25Z,0,0,0,4,"Whenever the active pane item changes, this event will be triggered. 

This is will make things easier in the find and replace package.
",136,True,en,0
772,2,3,0,Internals,mcolyer,2013-08-30T18:53:39Z,21,4,2,0,"So currently our ruby highlighting of string interpolation looks something like this:

![screen shot 2013-08-16 at 1 53 30 pm](https://f.cloud.github.com/assets/64050/978173/fb718198-06b5-11e3-85d3-bfcc95ee895c.png)

This fixes that but I'm unsure what else I might be breaking as I don't know an example of what `.punctuation.section.embedded` is. Can someone else confirm that this won't break something else?
",412,True,en,0
769,1,0,0,Internals,kevinsawicki,2013-08-29T04:03:55Z,12,100,3,0,"This switches over atom to use the console reporter from [jasmine-node](https://github.com/mhevery/jasmine-node) with own [special branch](https://github.com/kevinsawicki/jasmine-node/tree/short-stacks) that organizes the output in the same hierarchy as the specs and removes much of the noise from stack traces.

For example:

```
atom (jasmine-node =)> grunt test
Running ""shell:kill-atom"" (shell) task

Running ""shell:test"" (shell) task
[0828/204525:INFO:renderer_main.cc(212)] Renderer process started
[0828/204528:INFO:CONSOLE(353)] ""spec suite require time"", source: /Users/kevin/github/atom/src/window.coffee (353)


TextBuffer
  constructor
    when given a path
      when no file exists for the path
        it is modified and is initially empty
          Expected true to be falsy. (spec/text-buffer-spec.coffee:42:10)


Finished in 0.45 seconds
1 test, 3 assertions, 1 failure, 1701 skipped

Warning: Specs failed Use --force to continue.

Aborted due to warnings.
```
",2683,True,en,0
766,2,9,17,Internals,mcolyer,2013-08-30T22:16:46Z,72,1,1,3,"Following in the tradition of README driven development, I've outlined roughly how I think themes could work with APM.

Just to be clear, there is no code to support this currently but I felt that it was best to get my thoughts out after developing: https://github.com/atom/solarized-dark-syntax

Basically I think there are two things that make an APM package a theme:
- It has a `theme` attribute which is `true` in the `package.json` file.
- It can have a `stylesheets` attribute which indicates the loading order of the stylesheets.

Feedback is welcome (especially @benogle for the ui-variables stuff)
",607,True,en,0
748,19,6,11,Internals,kevinsawicki,2013-08-24T01:18:24Z,174,126,11,1,"- [x] Store soft wrap state on `DisplayBuffer` instead of `EditSession`
- [x] Listener for soft wrap state changes in `Editor`
- [x] Always calculate the soft wrap column and set it on the display buffer
- [x] Remove edit session defaults from `Project`, just put them in their appropriate locations
- [x] Rename `softWrapColumn` to `editorWidthInChars`
- [x] Add preference to always soft wrap at preferred line length (`editor.softWrapAtPreferredLineLength`)

Fixes #703, #721
",479,False,en,0
747,36,23,0,Internals,mcolyer,2013-08-27T17:17:54Z,1190,817,31,4,"So the goal of this is PR is to do a first pass at updating the API docs. I know that the APIs will change between now and when we ship however I think documentation is the best way to have a concrete discussion of the API that we will ultimately expose to our plugin authors.
## TODO
- [x] Fix Biscotto warnings so that we can trust them again.
- [x] Determine if everything that is currently public should still be public and if not make it private.
",452,False,en,0
743,2,7,2,Internals,probablycorey,2013-08-23T16:04:20Z,41,27,5,1,"Running specs while writing a package is painful. This lets you only run the specs from the package you are working on.
",120,True,en,0
742,0,0,2,Internals,probablycorey,2013-08-21T23:21:36Z,0,0,0,0,"Previously, browser process always loaded files from the application path `/Application/Atom.app`. `aa` would get around this problem by compiling certain coffee files needed by the browser process into the application path.

Now, when atom is run in dev mode all files (excluding main.coffee) are loaded from the resource path. I also added the command line flag -f or --foreground to keep the browser processes in the foreground. This allows us to see the output from the browser process.
",491,True,en,0
739,147,21,15,Internals,benogle,2013-09-10T21:03:44Z,1749,1251,74,19,"This is the beginnings of a theme approach rework. I want to extract the most general components possible. Things like panels, colors, selected states, highlighted states, etc. We should be able to reduce the complexity of the themes, the package css, and make it easier for a new package to get an interface up and running.

I've created a theme from scratch with inspiration from the dark-ui theme. The new theme is `neue-dark-ui`. So far, I feel like I am headed down the right path. Please look through it. I want opinions. 

In using general classes, we should be able to get really far by adding general classes to our package interface components (like `warning`, `info`, `tool-panel`) etc. This is a little less semantic class naming in some cases (see the treeview pull: https://github.com/atom/tree-view/pull/4)

So far, I've spent the most time with the tree view. See the pull here: https://github.com/atom/tree-view/pull/4

@mdo if you wanna, I'm here. I'm already looking at bootstrap as inspiration.
- [x] Make tabs use this 
- [x] Make find and replace use this (preview-list is complicated)
- [x] Create a `ui-test` package that uses all the components
",1170,True,en,0
735,8,1,0,Internals,mcolyer,2013-08-21T21:54:58Z,566,932,18,0,"So I'm attempting to update and simplify the guides that we currently have available. In general I'm favoring fewer longer task specific guides. In the future we can break these apart when they become unwieldy.

The current architecture has four guides:
- Getting Started
- Customizing Atom
- Creating a Package
- Creating a Theme

And four topics concerning Atom internals:
- Configuration
- Keymaps
- Serialization
- View System
",431,True,en,0
733,3,0,0,Internals,benogle,2013-08-20T18:22:27Z,98,24,13,0,,0,False,en,0
728,6,4,3,Internals,mcolyer,2013-08-20T22:05:29Z,275,11,13,0,"So this does several things:
- Adds an index.md file which references all of currently available guides.
- Adds a grunt task `markdown:guides` which builds the current guides.
- Update the grunt `deploy-docs` task so that it includes guides and it uses the latest tag for versioning purposes in the atom-docs repo. Now urls look like `/v20.0/api/index.html`, so people can reference `/v19.0/api/index.html` if they desire.

Future Work
- `docs/built-in-packages` should probably be split out into each project's separate repo. I also think there is a bigger question about where this documentation should, I imagine it will be exposed through the web package list so that users could browse it before be installed.
- I realize the generated markdown isn't pretty for now I'm focused on the content.
",799,False,en,0
727,1,0,0,Internals,mcolyer,2013-08-19T22:40:25Z,24,18,1,0,"Ensure if a command fails, the other steps don't fire. This should have gone into #712 
",88,True,en,0
718,0,1,1,Internals,probablycorey,2013-08-20T19:30:15Z,0,0,0,3,":construction:under construction:construction:

Atom's menu bar was sucky. This needed to be fixed because many people use the menu bar to discover application commands. This pull doesn't add many commands to what we already had (although that is easier to do now). This pull does make the menu commands integrate better with Atom.
- [x] Menu items such as Copy/Paste/Undo/Etc... work in Atom/DevTools/Specs
- [x] Keybord shortcuts such as Copy/Paste/Undo/Etc... work in Atom/DevTools/Specs
- [x] Menu items display the keybord shortcuts set in Atom
- [x] When all windows are closed, menu items that require a window are disabled
- [x] When all windows are closed, menu items that act upon the application still work
- [x] ""Download Update"" menu item is added when an update is available
- [x] Application level commands (like `application:run-specs` don't show up in the command pallete
- [ ] Only the first key binding is shown for commands with multiple key bindings (selector scoring is also ignored)
- [ ] Triggering window:toggle-dev-tools outputs annoying messages on the browser processes

```
[0816/143959:ERROR:render_widget_host_impl.cc(2147)] We seem to have a different key type sent from the renderer. (7 vs. 10). Ignoring event.
[0816/143959:ERROR:render_widget_host_impl.cc(2144)] Got a KeyEvent back from the renderer but we don't seem to have sent it to the renderer!
```
",1391,True,en,0
715,1,2,0,Internals,benogle,2013-08-16T01:26:41Z,14,0,2,0,"There is already a `pane:became-active` event. This adds the corresponding `pane:became-inactive` event.
",105,True,en,0
714,4,2,0,Internals,kevinsawicki,2013-08-20T03:20:08Z,6,6,104,5,"Now that [src/packages is gone](/github/atom/pull/700) it seems appropriate to clean up the `src` directory further.
- [x] Move `src/app/keymaps/` to `keymaps/`
- [x] Move `src/stdlib/` to `src/`
- [x] Move `src/app/` to `src/`
- [x] Remove `src/app` and `src/stdlib` from `NODE_PATH`
- [x] Move `spec/stdlib/` to `spec/`
- [x] Move `spec/app/` to `spec/`

Any concerns or feedback?
",383,False,en,0
712,1,2,2,Internals,mcolyer,2013-08-16T17:11:47Z,30,0,1,2,"So in order to make the Atom API docs more available I put together https://github.com/atom/atom-docs which powers https://atom-docs.githubapp.com (which is oauth protected to the atom and github owner teams).

However since the app is so basic it's necessary to pre-generate the docs and republish them. Ideally this would be done automatically at release time but for now it's just a simple grunt task that needs to be run by hand after releasing. In the future this can be more fully automated. Note: You'll need the atom-docs repo checked out as a sibling to your atom repository otherwise the relative paths in these scripts will fail.

This setup should be considered the precursor to the documentation that will be available on atom.io. If there's interest, I'd also consider generating static versions of the available guides and also placing them on atom-docs.githubapp.com.
",884,True,en,0
709,2,0,0,Externals,tnm,2013-08-14T18:04:04Z,3,1,1,0,"cc @probablycorey 
",19,True,es,0
706,19,7,2,Internals,benogle,2013-08-20T01:03:55Z,373,122,35,6,"This is a first pass at getting variables from the themes into packages. We decided today that we shouldnt have to write special theme specific css for each package. We didnt want to have a package author open pull requests on each theme, or have to support each theme in their package. Most of the things different between themes is colors. 

So we decided to have some set of variables available to the packages. This pull just adds a colors.less file to each theme, and a fallback less file so packages dont panic when there is no ui theme set. 

Basically, it allows you to import anything from any currently loaded theme that is made of a directory. So

``` css
@import ""colors"";

.my-plugin { background: @background-color-1; }
```

I'm not sure how best to group the colors. Thinking along the lines of this:

``` scss
// Colors get generally darker as the number increases
@background-color-1: #333;
@background-color-2: #202123;
@background-color-3: #1b1c1e;

// Info colors are generally blue
@accent-color-info-1: #66a6ff;
@accent-color-info-2: #0098ff;
@accent-color-info-3: #5293d8;

// Error colors are generally red
@accent-color-error-1: #f78a46;
...

// Success colors are green
@accent-color-success-1: #46f78a;

...
```

Not entirely sure what colors we need yet. 

See #701 for the original pull request.

HACK
- It reloads all the package css each time you add/change a theme. Not fast. Not ideal. 

TODO
- [x] pull all the colors out into the colors.less files, use in respective places when we settle on a naming convention.
",1548,True,en,0
700,46,0,0,Internals,kevinsawicki,2013-08-14T17:38:14Z,118,16777,219,1,"Fixes #662 
### Pulling out
- [x] [archive-view](/atom/archive-view)
- [x] [autocomplete](/atom/autocomplete)
- [x] [autoflow](/atom/autoflow)
- [x] [bookmarks](/atom/bookmarks)
- [x] [bracket-matcher](/atom/bracket-matcher)
- [x] [collaboration](/atom/collaboration)
- [x] [command-logger](/atom/command-logger)
- [x] [command-palette](/atom/command-palette)
- [x] [command-panel](/atom/command-panel)
- [x] [editor-stats](/atom/editor-stats)
- [x] [fuzzy-finder](/atom/fuzzy-finder)
- [x] [gfm](/atom/gfm)
- [x] [gists](/atom/gists)
- [x] [git-diff](/atom/git-diff)
- [x] [github-sign-in](/atom/github-sign-in)
- [x] [go-to-line](/atom/go-to-line)
- [x] [grammar-selector](/atom/grammar-selector)
- [x] [image-view](/atom/image-view)
- [x] [link](/atom/link)
- [x] [markdown-preview](/atom/markdown-preview)
- [x] [package-generator](/atom/package-generator)
- [x] [settings-view](/atom/settings-view)
- [x] [snippets](/atom/snippets)
- [x] [spell-check](/atom/spell-check)
- [x] [status-bar](/atom/status-bar)
- [x] [symbols-view](/atom/symbols-view)
- [x] [tabs](/atom/tabs)
- [x] [toml](/atom/toml)
- [x] [tree-view](/atom/tree-view)
- [x] [whitespace](/atom/whitespace)
- [x] [wrap-guide](/atom/wrap-guide)
### Other things
- [x] Add Campfire hook to each repo
- [x] Compile `.cson`, `.less`, and `.coffee` files in bundled Atom packages during build task.
- [x] Remove `src/packages` from `NODE_PATH`
- [x] Update `CONTRIBUTING.md`
- [x] Remove bundled packages section from spec reporter
",1496,False,en,0
699,5,0,0,Internals,kevinsawicki,2013-08-12T22:50:27Z,29,10,3,0,"Fixes #625 
",12,True,en,0
697,5,3,0,Internals,zcbenz,2013-08-13T07:05:18Z,30,18,6,2,"Not done yet.
",14,True,en,0
690,1,6,4,Internals,mcolyer,2013-08-09T17:24:09Z,27,11,1,1,"@kevinsawicki I think this is what you were suggesting to fix the issue. Let me know what you think.
",101,True,en,0
687,250,1,0,Internals,nathansobo,2013-08-19T21:13:55Z,1510,2229,70,12,"This is basically what we demoed at the Summit, but it's not ready to merge until:
- [x] Undo works
- [x] All the specs pass (and we reenable any specs that were disabled)
- [x] Single-user performance is acceptable
- [x] Use `~/.atom/storage` instead of `~/.atom/.storage` for storage path
",291,False,en,0
681,7,5,0,Internals,nathansobo,2013-08-07T19:14:00Z,106,12,10,0,"Ready to merge. Fire at will.

@jasonrudolph and I worked on a lot of this at summit. We built out a toggle-quotes feature and wanted to be able to find the range of a string containing the cursor's current position. I'd like to replace the arrays of simple tokens in `TokenizedBuffer` with a proper concrete syntax tree, with the tokens as its leaves. But for now I just scan left and right on the current line to find the limits of the scope. Definitely worth revisiting.
",474,True,en,0
677,2,0,0,Internals,probablycorey,2013-08-06T21:05:32Z,93,57,2,0,"I'm not sure if all of these are needed, but here is a list of line commands that I'd like to make work better when a buffer is soft wrapped.
- [x] `editor:move-to-end-of-line`
- [x] `editor:move-to-beginning-of-line`
- [x] `editor:move-to-first-character-of-line` 
- [x] `editor:cut-to-end-of-line`
- [x] `editor:newline-below`
- [x] `editor:newline-above`
- [ ] `editor:delete-line` (ignoring because sublime and textmate do)
- [ ] `editor:move-line-up`  (ignoring because sublime and textmate do)
- [ ] `editor:move-line-down`  (ignoring because sublime and textmate do)
- [ ] `editor:duplicate-line`  (ignoring because sublime and textmate do)

Fixing #673 so @briandoll can make this money.
",696,False,en,0
661,1,0,0,Internals,benogle,2013-07-24T22:29:08Z,1,1,1,0,"When you hit enter/newline, the default indent choice, when no lang specific indent was the last non blank row's indent. For me, this would often indent more than I wanted (say, I'm creating a new function after some other function).

So this pull changes the default indent to be the last line's indent instead. That way I can tab back a few, and hit enter as many times as I want without it messing up my tabbing.
",416,True,en,0
660,1,0,0,Internals,benogle,2013-07-24T22:12:37Z,4,1,1,0,"Will fix #634 
",15,True,sv,0
659,15,6,1,Internals,benogle,2013-07-24T22:04:56Z,255,68,10,1,"- Update autoflow to have same structure as other plugins (in lib dir)
- Add key shortcut
- Dont attach with root view so it now only shows in meta+p panel when editor is focused.
- Make it indent aware
- Make it handle comment chars at the beginning 
  - it is dumb -- doesnt actually use info from lang mode...yet
  - maybe could do checking to see if it is inside of a comment block and handle accordingly?
  - or could just use the actual single comment char.
",464,False,en,0
658,0,0,0,Internals,benogle,2013-07-24T18:56:34Z,0,0,0,1,"In other editors, when you have something selected, and you move the cursor left or right, the cursor goes to the respective end of the selection. In atom, it would ignore the selection and just move the cursor irrespective of selection state. 

On cursor up and down, the cursor should go to the line above the selection or to the line below the selection, respectively. This is the way other editors work, including web textareas.

The crappiest thing I added was an options hash to the `move*` functions. There is now a `moveToEndOfSelection` option. The `moveToEndOfSelection` is properly set by the `EditSession`. 
",620,True,en,0
655,0,6,6,Internals,benogle,2013-07-24T19:08:40Z,0,0,0,2,"Uses markers, so this will have to change when collaboration stuff is out.

Key combos

```
  'meta-f2': 'bookmarks:toggle-bookmark'
  'f2': 'bookmarks:jump-to-next-bookmark'
  'shift-f2': 'bookmarks:jump-to-previous-bookmark'
```

Please give advice. Am I using the right functions from `EditSession`? Am I hooking things in the right way? Should I optimize something?
",370,True,en,0
646,2,0,0,Internals,benogle,2013-07-23T22:32:52Z,2,3,1,4,"The text selection was less visible than the current line highlight. And when selecting, then unselecting text, the current line highlight would pop in and out making me think the current line was selected.
",207,True,en,0
645,7,1,0,Internals,benogle,2013-07-23T22:38:37Z,159,0,5,4,"Moving between words with `editor:move-to-end-of-word` and `editor:move-to-beginning-of-word` confuse me. So I'm adding new commands that work more like sublime. They will be:
- [x] `editor:move-to-previous-word-boundary`
- [x] `editor:move-to-next-word-boundary`
- [x] `editor:select-to-previous-word-boundary`
- [x] `editor:select-to-next-word-boundary`

Basically, my issues are:
- Moving around wordwise messes with my expectations
  - expect it to stop at end of line
  - expect it to stop at begin of line
  - `(@somevar|, omg)` cursor at pipe, move word left x2, expect it to be `(|@somevar, omg)` but is `|(@somevar, omg)`
- Moving around wordwise should be consistent backward to forward
  Cursor is at pipe
  
  ```
    @scrollView.on 'scroll', =>|
      if @scrollLeft() == 0
  ```
  
  Then move right one word, it does this:
  
  ```
    @scrollView.on 'scroll', =>
      if| @scrollLeft() == 0
  ```
  
  I expect cursor to land at pipes when moving right from initial
  
  ```
    @scrollView.on 'scroll', =>|
  |  |if| @scrollLeft() == 0
  ```
",1060,False,en,0
644,2,0,0,Internals,benogle,2013-07-23T22:31:39Z,2,2,2,4,"I whined about them in #640. 
- [x] the treeview resize handle covers the scrollbar
- [x] the scrollbar in the editor is covered up
",132,False,en,0
639,0,2,0,Internals,benogle,2013-07-24T19:06:25Z,0,0,0,6,"- [x] Fold comments when in `foldAll()`
- [x] Fold all at some indent level
- [x] Clean up fold code a bit
- [x] Think about where to put the tests: `LanguageMode` or `EditSession`?
",182,False,en,0
635,12,1,3,Internals,benogle,2013-07-18T17:13:29Z,54,20,4,0,"``` coffeescript
class Something
  whatev: (items) ->
    while items.length > 0
      # current = items.shift()
      # if current < pivot
      #   left.push(current)
      # else
      #   right.push(current);
```

Rather than

``` coffeescript
class Something
  whatev: (items) ->
    while items.length > 0
#       current = items.shift()
#       if current < pivot
#         left.push(current)
#       else
#         right.push(current);
```
",448,False,en,0
610,1,0,0,Internals,gjtorikian,2013-07-02T18:13:21Z,3,3,2,0,"This prevents doc builds from occuring when you're only interested in stats/missing

/cc @kevinsawicki 
",104,True,en,0
609,31,1,5,Internals,probablycorey,2013-08-05T20:56:58Z,574,669,36,34,":construction: in progress :construction:
- [x] Make config a pane item
- [x] Filter package lists
- [x] Dynamically load settings
- [ ] Add/remove keybindings
- [ ] Display and search existing keybindings
- [ ] Simplify theme editor (only allow one UI and Syntax theme to be set)
- [ ] Determine why the config pane closes so slowly
",334,False,en,0
605,7,0,0,Internals,zcbenz,2013-06-27T14:33:35Z,89,116,11,0,"See https://github.com/github/atom/issues/566 for the reason on this.
",70,True,en,0
596,20,4,0,Internals,probablycorey,2013-06-21T00:16:25Z,54,352,25,0,"Our shell scripts aren't cross-platform compatible. To fix this we are switching from rake to grunt (which is build on node and so it will be cross-platform compatible.) It also means we can get rid of xcode as a build requirement :tada: 

If you get your Atom updates from Speakeasy, this change will mean nothing to you. If you DO build Atom from source you will need to run `./script/bootstrap` again. From then on you will use `./script/build` to install Atom
",464,True,en,0
595,37,3,0,Internals,kevinsawicki,2013-06-28T16:28:12Z,2900,299,37,7,":name_badge: It starts :name_badge: 

There are many possibilities with collaboration. This issue covers a simple case, where one user can invite another user to share their entire workspace. The host will start a session which will copy an identifier to their clipboard. Other people can paste that id to connect to the host and share their session. For now we will assume that the joiners already have a copy of the repository they are joining at a standard location on disk, checked out at the correct location.
- [x] Create concurrently mutable document library
- [x] Share basic pane splits and items peer to peer via copied/pasted guid
- [x] Open a new window when joining a sharing session
- [x] Share active pane item
- [x] Share scroll position in editor
- [ ] Share buffer contents
- [ ] Make absolute paths relative to repository for sharing on different machines
- [ ] Share cursor positions in buffers
- [ ] Assign numeric site ids to documents instead of guids
",975,True,en,0
583,51,0,0,Internals,kevinsawicki,2013-06-13T16:45:13Z,699,766,53,0,"- [x] Use `path.join()` instead of `fsUtils.join()`
- [x] Use `path.basename()` instead of `fsUtils.base()`
- [x] Use `path.dirname()` instead of `fsUtils.directory()`
- [x] Use `path.extname()` instead of `fsUtils.extension()`
- [x] Use `rimraf` from `fsUtils.remove()`
- [x] Use 'mkdirp' from `fsUtils.makeTree()`
- [x] Remove unused `split()` and `makeDirectory()` methods.
- [x] Remove `Async` label from async method name
- [x] Add `Sync` to sync method names

Fixes #525  and #530 
",488,False,en,0
581,18,0,0,Internals,kevinsawicki,2013-06-10T21:19:18Z,387,1,14,0,"Browse `.zip` and `.tar.gz` in an editor and open compressed files in a temp file when clicked.

![s1](https://f.cloud.github.com/assets/671378/634061/13e5adc4-d210-11e2-9180-ff837bb5e838.png)
![s2](https://f.cloud.github.com/assets/671378/634062/1a675a9e-d210-11e2-84ba-c003e2e98cc4.png)
",289,True,en,0
569,7,0,0,Internals,kevinsawicki,2013-06-04T20:55:22Z,224,18,8,0,"Break out surrogate pairs as atomic tokens so they can be edited and navigated around.
",87,True,en,0
564,4,0,0,Internals,kevinsawicki,2013-05-28T16:48:09Z,45,115,33,0,,0,False,en,0
561,3,5,4,Internals,gjtorikian,2013-05-22T17:11:22Z,2,2,2,0,"Fixes an issue @dgraham was seeing within Chat.
",48,True,en,0
559,3,0,0,Internals,gjtorikian,2013-05-21T18:36:20Z,2,2,2,0,"From https://github.com/gjtorikian/roaster/issues/1

Roaster was updated to properly handle a null `options` argument.
",119,True,en,0
558,66,0,0,Internals,kevinsawicki,2013-05-22T22:57:37Z,744,170,51,1,"- [x] List available packages from APM
- [x] Install/upgrade packages
- [x] Uninstall packages
- [x] Update package registration to be id-based in `atom.coffee`
- [x] Unify installed and available package views
- [x] Show message while loading
- [x] Render installed package descriptions as markdown
- [x] Render installed package readmes as markdown
- [x] Show badge with new available version
- [x] Update installed packages tab when one is is installed from the available tab
- [x] Remove installed package from installed tab when uninstalled
- [x] Add more metadata for bundled packages
- [x] Add retry link when available packages don't load
",647,False,en,0
552,4,0,6,Internals,nathansobo,2013-05-15T15:55:07Z,135,107,16,0,"Originally, `Project.open` only ever returned `EditSession`s. Now, we also return `ImageEditSession`s if you're opening a path that ends with an image file extension. In my rework of @mutle's terminal package, I want to be able to call `rootView.open(""terminal://~"")` to open a terminal with `~` as its working directory using the same mechanism that I use to open anything else. This makes it possible:

To register a custom opener, call `Project.registerOpener(fn)` with a function that takes a `uri`a and an optional `options` hash as parameters. Whenever anything is opened, the project will attempt all openers in the order they are registered. If your function returns a resource, it will short-circuit the opening process and `Project.open` will return it.

You can also call `Project.unregisterOpener(fn)` with the same function to unregister it, which you should do upon deactivation of your package.
",910,True,en,0
547,250,4,0,Internals,zcbenz,2013-06-04T15:14:29Z,2270,7625,267,23,":rotating_light: WORK IN PROCESS :rotating_light: 
- [x] Download atom-shell and copy compiled sources to Atom.app/Content/Resources/app
- [x] Show a basic Atom editor
- [x] Rewrite native startup code in javascript with atom-shell's APIs
- [x] Opening paths in existing windows
- [x] Make sure javascript code behaves the same with cefode-based Atom
- [x] `--wait` flag
- [x] Drag and drop folders and file onto Atom icon in dock
- [x] The skull icon on dev mode
- [x] Auto-updater
- [x] Crash reporter
",504,False,en,0
544,13,1,0,Internals,gjtorikian,2013-05-15T20:37:37Z,690,183,11,6,"Just a PR for some of the work I've been doing as I've been learning Atom package creation.

There's a new ""Creating a Package"" section that steps you through creating a package, including adding keybindings, working with stylesheets, appending to panes, _e.t.c._. Companion code [is in its own repo](https://github.com/atom/changer).

There's still more I want to do--how to do snippets, how to do highlighting, more information for the _internals_ section, but I'll scope that in different branches/PRs.
",506,True,en,0
543,2,0,0,Internals,kevinsawicki,2013-05-14T19:50:08Z,10,11,4,6,,0,False,en,0
542,0,2,0,Internals,probablycorey,2013-05-13T21:31:57Z,0,0,0,5,"Based on this bug #372, auto-indentation isn't something everyone wants. But there are different types of auto-indenting. I've divided them up into three parts **auto-indenting when typing**, **auto-indenting-when-pasting** and **normalizing-pasted-text**
### Auto-indenting when typing
- Pressing 'return' will auto-indent the line following the '\n'
- If a line matches a decrease indent pattern (such as a closing bracket) it will auto-outdent 
- Pressing 'tab' at the in the leading whitespace of a line will auto-indent to the correct position
### Auto-indenting when pasting
- All pasted text will be auto-indented based on the indention level of the proceeding line
### Normalizing pasted text
- When text is copied from Atom, we store the the indentation level of the first line in the metadata. When pasting that text, we use that data to increase or decrease the indentation level of the pasted text.

All three of these will be editor config settings, previously they were coupled together.
",1002,False,en,0
540,27,0,0,Internals,nathansobo,2013-05-10T19:25:36Z,670,370,13,3,"I've found a way to make mapping performance O(fold-count + wrapped-line-count + 1) instead of O(line-count). For all conceivable cases, the number of folds and wrapped lines will be vastly smaller than the number of lines in the buffer, so this is a big win in performance with extremely large files. We can still use a variant of a skip list to make it O(ln(fold-count + wrapped-line-count)), but this puts off the need to do that since it will only become an issue with huge numbers of folds.

The basic idea is to build a row map that supports the ability to map a buffer or screen row range to a smaller number of rows in the other coordinate system. So a fold of rows 5-10 would look like this (note that the end row is exclusive... it's simpler that way).

``` coffeescript
rowMap.mapBufferRowRange(5, 11, 1)
```

That says that we intend to represent buffer rows 5-11 (end-exclusive) as a single row on screen.

To express a wrapped line, we do the reverse, passing a screen row count (3rd argument) that is larger than the number of buffer rows spanned by the first two arguments:

``` coffeescript
rowMap.mapBufferRowRange(2, 3, 2)
```

That says that rows 2 and 3 on screen actually represent the same row in the buffer, which is what happens when a single buffer line wraps to multiple lines on screen.

And finally, to fold some buffer lines _completely_ away, making them invisible, we'd store tho following mapping:

``` coffeescript
rowMap.mapBufferRowRange(5, 11, 0)
```
### To Do
- [x] Merge adjacent isomorphic regions in the RowMap
- [x] Delete LineMap
- [x] Refactor `DisplayBuffer.updateScreenLines` into a few methods. It's too long.
- [x] Simplify ScreenLine and possibly rename to TokenizedLine
",1720,True,en,0
521,1,2,0,Internals,gjtorikian,2013-04-26T21:29:05Z,153,9,6,0,"/cc @nathansobo 

part one of upcoming doc fixes
",49,True,en,0
516,65,1,0,Internals,nathansobo,2013-05-06T14:35:47Z,920,1087,28,11,"This PR bases folds on markers. Previously, folds were tracked in the display buffer with a custom data structure that had a lot of duplication with the marker code. Now, to create and track folds, we create markers with a class of ""fold"" on the buffer. The markers also have a display buffer id so that folds aren't shared between edit sessions for the same buffer.

This PR also improves marker behavior around undo and redo, ensuring that events are never triggered before the buffer change event is emitted and always restoring the ranges of markers to the state they had before the change being undone / redone. I take advantage of this behavior to restore the selection range around undo/redo automatically, allowing the transaction code in edit session to be simplified.
- [x] Unify DisplayBuffer's handling of fold creation / destruction with its buffer change handling code.
- [x] Make it possible to create markers with attributes
- [x] Make it possible to query for markers based on attributes and other properties such as startRow
- [x] Make marker API object-oriented (you're currently forced to do everything with the serializable marker id, which is annoying)
- [x] Base all tracking of fold ranges on markers with the 'fold' class
- [x] Restore folds when operations that invalidated their markers are undone
- [x] Restore ability to destroy a fold by clicking on it
- [x] Ensure that fold markers from one edit session don't result in folds in another edit session

---

For another pull request:
- Add invisible folds
- Allow fold preview lines to be freely edited
- Allow folds to be copied/cut and pasted
- Serialize folds across refreshes
",1660,True,en,0
513,18,6,0,Internals,kevinsawicki,2013-04-24T17:17:51Z,184,80,13,0,"These changes reduced the load time with no open editors on my machine from `~650ms` to `~515ms`.
- [x] Precompile theme `.less` files to `.css`
- [x] Precompile theme `.cson` files to `.json`
- [x] Load TextMate bundle preferences asynchronously like grammars
- [x] Install `atom` executable asynchronously
- [x] Defer a few requires here and there
- [x] Install folders into `~/.atom` directory asynchronously
",412,False,en,0
512,37,5,0,Internals,gjtorikian,2013-05-02T20:50:07Z,1230,1749,48,9,"The block status commenting has changed. It's now:

```
### STATUS ###
```

You can continue to apply descriptions if you like:

```
### STATUS: A bunch of words describing why life is the way it is. ###
```

Regular block tags are unaffected:

```
###
Public: this does absolutely nothing for documentation.
###
```
",317,True,en,0
511,6,7,9,Internals,gjtorikian,2013-04-24T00:22:38Z,32,2,3,1,"In GFM it's perfectly valid (and sometimes necessary) to end a line with two whitespaces, then line break. This spits out a <`br/>` instead of a closing `<p>`.

I noticed most grammar manipulation works around `editSession.getGrammar().scopeName`. I'm not totally convinced that using `scopeName` is better than `name` in this (or other) cases. For consistency, I can change it, I just happen to think `GitHub Markdown` is easier to remember than `scope.gfm`. Though I'd like to hear thoughts one way or the other.
",515,True,en,0
510,14,0,0,Internals,kevinsawicki,2013-04-23T16:08:27Z,293,92,17,0,"- [x] Add [hyperlink helper](https://github.com/textmate/hyperlink-helper.tmbundle) bundle
- [x] Support pattern names with embedded groups (i.e `markup.underline.link.$2.hyperlink`)
- [x] Support grammars with an `injectionSelector` value
- [x] Add command to open current link (`ctrl-O`)
",290,False,en,0
508,7,0,1,Internals,nathansobo,2013-04-22T17:37:16Z,214,45,13,0,":rotating_light: Almost Done :rotating_light: 

This fixes issue #505. Whenever a grammar is added / removed, any grammars that include it are updated and their buffers are re-tokenized.

There's one more thing to do: I'm currently updating grammars when their included grammars are added or removed, but I _also_ need to update them if any grammars they include are _updated_. This will allow for transitive cases, like reloading an ERB file if the SQL grammar is loaded, because the Ruby grammar includes the SQL grammar inside of certain kinds of here-doc strings.

@kevinsawicki This is pretty similar to what we discussed last Thursday evening. I'll finish out the transitive include case tomorrow.
",704,True,en,0
507,12,13,2,Internals,gjtorikian,2013-05-03T23:59:00Z,226,153,11,14,"Fixes https://github.com/github/atom/issues/501

I think a render pipeline isn't a bad idea, actually. I think the next piece to add is @mention transformation, and repo/PR truncation. But that's for later.
",207,True,en,0
503,32,0,0,Internals,kevinsawicki,2013-04-19T18:03:54Z,427,48,9,1,"Would love some review on this.

Specifically targeted getting the PHP grammar working for issue #387 

The new PEG for scope selectors is based on the grammar documented [here](https://github.com/textmate/textmate/blob/master/Frameworks/scope/src/parse.cc#L4-L11).
",266,True,en,0
499,22,3,0,Internals,nathansobo,2013-04-16T02:46:40Z,664,5511,31,0,"In attempting to style the forms in the configuration UI, I was really annoyed at having to start from square one with all the styling of really basic elements. I've used Bootstrap on other projects, and really enjoyed having some baseline styles for forms, typography, etc. So far, everything has been super custom so this hasn't come up, but for something like a configuration UI it makes total sense to build on an existing vocabulary.

The main downside is that we're now _normalizing_ the styles of basic elements instead of resetting them completely. But I actually see this as an upside in certain situations. It's easy to zero out styles when they aren't wanted, but harder to supply basic styles over again every time you want elements to look halfway decent.

I realize this decision may be controversial, so what I'd like to do is live with Bootstrap for a while and see how it feels. If it causes problems, we can rip it out. If a designer crafts something better suited to our needs that's better, we can switch. But for now, I want _something_. I imagine we'll end up thoughtfully diverging from it over time, and developing our own vocabulary. But having something to grow off of is a win. Most of its styling is completely opt-in, aside from its default styling of various elements such as headers, but those are really easy to opt out of. I can easily see thoughtfully forking it over time, but I think it gives us a good starting point for a solid CSS vocabulary.

This PR also introduces improvements to our LESS infrastructure, allowing `@import` directives to function properly. It introduces an `octicon-mixins.less` file that makes it dead-simple to apply icons to any element with a mixin, like so: `.mini-icon(octocat)`. Also, where I needed to fix styling that was slightly incompatible with Bootstrap, I took the opportunity to convert CSS files to LESS syntax and clean them up.
## To Do
- [x] Editor renders cleanly
- [x] Fix tree view styling
- [x] Fix tabs styling
- [x] Fix styling of the test runner
- [x] Fix styling of the mini editor, it looks whack
- [x] Get specs passing
- [x] Make precompilation work
- [x] Enable the rest of bootstrap stylesheets
",2188,True,en,0
498,59,12,1,Internals,gjtorikian,2013-04-19T01:58:41Z,3282,177,54,4,"This is an initial drop of API documentation for _/src/app_. Future drops in different branches will cover _/src/packages_ and _/src/stdlib_.

As discussed in #222, I'm using [Biscotto](https://github.com/gjtorikian/biscotto) here. Biscotto relies on TomDoc notation for classes and methods. It'll parse your set of files, creating an internal AST, then generate documentation from that. GFM is supported, and you can do [simplified linking](https://github.com/gjtorikian/biscotto#automatically-link-references) to other parts of the code.

At the end, you get a neat summary:

```
Parsed files:            53
Classes:                  51 ( 31 undocumented)
Mixins:                    0
Non-Class files:        3
Methods:                  1133 (545 undocumented)
Constants:                0 (  0 undocumented)
 51.35% documented
 0 errors
```

Those are actual results--this PR is currently covering 51% of _src/app_.

---

You can find a list of what's remaining by running `biscotto --listMissing ./src/app/`. The majority of stuff that's not listed is simply stuff I didn't understand. For example:
- I'm not really clear on how markers work--and the distinction between buffer-markers and display-buffer markers. Do they just define the start/tail and end/head of a selection?
- Does anything in _atom-package_, _atom-theme_, or _atom_ need to be marked as `Public`?
- I'm not sure what `LineMap` does.
- I skipped a majority of the `LanguageMode` / grammar stuff since I'm not sure if that ought to be marked public either. Would people want to mess with the tokenization?

I'll try to find one of you this week to answer some questions about how some of these internals work? Or should some of them indeed be simply `Internal`?

Some other assumptions:
- In most cases, I marked `constructor`, `initialize`, and `destroy` as `Internal`. I used my best judgement here. For example, a user would probably never initiate a new `Fold`--they'd use `createFold` instead.
- By the same logic, _serialize_ and _deserialize_ are marked `Internal`. My understanding is that these are called internally so there's no need to run them by yourself.
",2142,True,en,0
485,2,0,0,Internals,zcbenz,2013-04-07T12:50:43Z,21,386,12,0,"WIP
",4,True,en,0
484,4,0,0,Internals,zcbenz,2013-04-09T07:45:09Z,60,15,4,3,"- [x] Drag a tab to other applications should have the same effect of dragging the actual file.
- [x] Drag a file from Finder to Atom should make Atom open it (in current window or in new window).
- [x] When tab is dropped out of Atom, the blue marker should disappear.
- [x] When there is only one tab, it should be able to be dragged out of Atom.
- [ ] <del> Tabs should be able to be dragged between different windows of Atom if the file belongs to both projects.</del>
- [ ] <del> Drag a tab out of Atom and not drop it in other applications should open the tab in a new window.</del>
",589,False,en,0
482,22,1,0,Internals,nathansobo,2013-04-05T21:04:46Z,298,25,14,0,"The goal of this branch is to enable intuitive ""columnar"" selection from the keyboard. The actual commands I'll be implementing are `add-selection-below` and `add-selection-above`. They take whatever is currently selected and attempt to select the same region on the line below / above.
- [x] Basic version of `add-selection-below`
- [x] Honor the range of the original selection when repeating the command across multiple lines of different lengths
- [x] Clear the goal range when a selection's cursor is moved intentionally
- [x] Ensure the goal range is honored when merging selections
- [x] Skip lines that would force an empty selection if the selection is non-empty
- [x] Skip blank lines if the selection is empty if it isn't on column 0
- [x] Figure out how this interacts with folding
- [x] Implement `add-selection-above` as well
- [x] Clear multiple selections with `escape`
- [ ] Optimize for large numbers of selections
",933,False,en,0
480,12,4,0,Internals,mutle,2013-04-09T17:43:02Z,79,0,6,4,"These are a few things that were missed when moving the vim package to its own repo.
",85,True,en,0
478,3,2,0,Internals,zcbenz,2013-04-06T06:39:43Z,34,0,3,1,"Fixes #339.

/cc @nathansobo @kevinsawicki @probablycorey
",58,True,en,0
475,8,0,0,Internals,nathansobo,2013-04-04T00:35:46Z,94,98,15,0,"Previously, we emitted a `grammars-loaded` event once all the TextMate packages were loaded, and then selected a grammar for each open edit session. Now, we emit a `grammar-added` event whenever a grammar is added, and every grammar can return a ""score"" for a given file, saying how good a match it is for that file. Whenever a grammar is added (at any time, not just startup), we will switch to it if it is has a higher score than the file's current grammar.
",460,True,en,0
468,5,0,0,Internals,probablycorey,2013-04-01T17:47:40Z,32,18,6,0,"StripTrailingWhitespace package renamed to Whitespace (and other changes). I created a pull request so people with `config.stripTrailingWhitespace.singleTrailingNewline` will take notice.

Closes #399
",201,True,en,0
460,62,5,9,Internals,gjtorikian,2013-04-03T21:21:07Z,52,2820,11,6,"> nak blah blah no native components blah blah fast.

In addition to swapping out `ag`, this PR introduces more huzzahs:
- Streaming search results. `populateSingle` is called each time the `BufferedProcess` gets another chunk of information. (This is guaranteed to always be a path followed by the results, so there's no risk of lost information.)
- The fuzzy file finder now implements `nak` as well. It takes about a second to perform a full retrieve on `~/github/github`, without includes. (The dir-walker I wrote is actually the fastest part, and you can also set up file/dir ignores.)
- By default, `nak` includes your ignore files. `config.set(nak.addVCSIgnores, true)` if you need them excluded.

My questions:
- I'm not particularly proud of `project.previewList = @previewList` in _command-panel-view.coffee_, but I didn't know how else to pass the previewList object to _select-all-matches-in-project.coffee_.
- There's a lot of leftover `@operations` crud in _preview-list.coffee_--should I get rid of it? I didn't know if it did anything else.
- I don't know how to run the tests :crying_cat_face:. `rake test` started downloading the `node` tar and that seemed like a waste of time.
- In addition to _.gitignore_, you can also set up a _.nakignore_. That's not in the code here but it's something to consider.
",1324,True,en,0
454,10,4,0,Internals,mutle,2013-04-02T21:45:54Z,90,58,6,8,"Stores the contents of a unsaved text buffer when the window is reloaded.
",74,True,en,0
450,43,0,0,Internals,nathansobo,2013-03-26T23:36:11Z,687,795,91,3,"This PR improves the API for loading, activating, and deactivating packages.
- Packages can be activated or deactivated by name at any time, decoupled from the startup of the window.
- We initially don't activate any packages, and specs that depend on certain packages being loaded need to activate those packages themselves.
- Any active packages are always deactivated at the end of each spec, leaving us with a clean environment.
- When a package is deactivated, its keymaps, grammars, stylesheets, properties, etc are all removed from the global environment.
- Packages are loaded only once, then cached from there on out. Loading a package has no side effects. It just performs the I/O necessary to load all its resources, which are later installed when the package is activated.
",785,False,en,0
448,11,0,0,Internals,nathansobo,2013-03-22T23:39:01Z,231,192,26,0,"This isn't quite how I'd like it because it still emits a global 'grammars-loaded' event after all the packages have been loaded. It uses a queue to serialize the loading of each package's grammars, then emits this event when the queue is empty. Instead, I'd like to fire an event every time a grammar is added and have a `LanguageMode` switch to that grammar if it is a better match. Then any time a grammar is added we can respond appropriately with the currently open edit sessions. But I want to clean up package loading first so this was a good way to get this merged to master now.
",588,True,en,0
444,11,5,0,Internals,zcbenz,2013-03-27T06:00:04Z,47,77,14,4,"ProcessTask is equivalent to Task except that ProcessTask starts a new process instead of a new thread.

ProcessTask is using child_process.fork to start a new node process to start the task, the node binary used by ProcessTask is built with the V8 shipped by Chromium, so native modules compiled for cefode is compatible with the node binary.

/cc @kevinsawicki @nathansobo  
",377,True,en,0
443,2,1,0,Internals,jbarnette,2013-03-22T20:56:58Z,0,159,4,1,,0,False,en,0
436,7,4,0,Internals,mutle,2013-04-03T00:09:35Z,54,12,3,12,"So you don't have to press meta-m all the time.
",48,True,en,0
431,123,0,0,Internals,nathansobo,2013-03-21T17:17:32Z,961,36558,208,0,"Resumes #383 against master.

To do before merging
- [ ] Any variable reference to 'fs-utils' module should be `fsUtils` instead of `fs` to avoid confusion
- [ ] Eliminate I/O oriented workers (leave Git worker until we have worker process alternative)
- [ ] Affix ""Sync"" to all synchronous fsUtils methods for consistency with fs module
",338,True,en,0
429,5,0,0,Internals,nathansobo,2013-03-19T18:17:37Z,134,1390,11,0,"Most of the time we were saving was from the blocking read operations, so this avoids that blocking without requiring us to use a worker thread. We're trying to get rid of all background workers for now so we can drop Cheng's support for using Node in worker threads since it introduces thread-safety problems that could crash Atom.
",333,True,en,0
427,8,4,0,Internals,probablycorey,2013-03-19T18:31:34Z,98,31,8,0,"Search is slow, but the bottleneck is not on the native side. The major speed killer is creating the Dom result elements. While searching for `repo` in github/github, executing the search takes ~51ms, creating the operations\* takes ~5200ms and rendering the results to the Dom takes ~25,000ms.

Here is what needs to be done:
- [x] Incrementally build and append result elements
- [x] Make operation creation quicker
- Operations are JS objects that hold data for each result
",477,True,en,0
422,6,6,0,Internals,jbarnette,2013-04-02T15:50:28Z,3,3,2,17,"This also enables source map generation even though we're not using it yet.
",76,True,en,0
416,9,0,0,Internals,jbarnette,2013-04-02T20:15:16Z,24,25,5,18,"Continuing #410.
",17,True,en,0
413,5,3,0,Internals,jbarnette,2013-03-14T17:36:08Z,82,22,3,0,"This PR changes `jQuery.fn.command` from a straight `on` passthrough to something a little more specific.

The new signature is `command(eventName, selector, options, handler)`. This signature clarifies usage a bit: Unlike `on`, `command` takes a single event name. `selector` and `options` are optional.

The `options` object can have two keys:
- `data`, an Object passed through to `on`. This isn't used very often, but it's there.
- `doc`, a String to replace the auto-generated docstring for an event.

The `doc` key is only used to replace the portion of an event name after the `:`.

Before:

``` coffeescript
@command ""testing:show-alert"", ->
  # => ""Testing: Show Alert
```

After:

``` coffeescript
@command ""testing:show-alert"", doc: ""Hi!"", ->
  # => ""Testing: Hi!""
```

I also dropped a little tweak in to always change `github` to `GitHub` if it's an event namespace. :octocat: 
",891,True,en,0
400,20,1,0,Internals,nathansobo,2013-03-12T00:04:51Z,433,233,35,0,"This is the first feature to leverage the power of the new generic panes.

![Screen Shot 2013-03-11 at 5 39 19 PM](https://f.cloud.github.com/assets/1789/246564/43ab8248-8aa5-11e2-83ca-3dd11ae61511.png)
",203,True,en,0
393,1,1,0,Externals,benburkert,2013-03-11T15:34:28Z,1,0,1,0,"I was trying to hook into atom's grammer loading stuff and dump the plist to CSON, but it was failing because the underscore library didn't have a `multiplyString` function. It looks like that function is defined in the `underscore-extensions` library. Adding the `require 'underscore-extensions'` at the top of the CSON library fixed it.
",339,True,en,0
390,24,0,0,Internals,kevinsawicki,2013-03-15T01:08:24Z,316,65,21,6,,0,False,en,0
360,8,4,0,Internals,probablycorey,2013-03-06T00:10:51Z,36,2,3,0,"Add a skull and a html visual indicator when running in dev mode.

![index html _Users_corey_github_atom](https://f.cloud.github.com/assets/596/224912/1e40c192-85e3-11e2-8f67-eb7148f1c7f7.jpg)

Closes #350
",206,True,en,0
347,0,8,0,Externals,aroben,2013-03-05T22:42:14Z,0,0,0,1,"This PR makes Atom buildable by Constructicon.

Depends on github/constructicon#7.
",83,True,en,0
346,2,2,0,Internals,josh,2013-03-04T23:46:05Z,10,2,2,0,"Theres only 2 hard coded binary paths related to boxen.

Fixes #334.

/cc @probablycorey 
",90,True,en,0
342,3,0,0,Externals,aroben,2013-03-04T17:25:48Z,162,86,19,0,"Instead of finding and compiling all `.coffee`/`.cson` files in `script/copy-files-to-bundle`, we now tell gyp how to do this for us. It works like this:
1. `Rakefile` invokes the new `script/generate-sources-gypi` script to generate `sources.gypi`. This file lists all the `.coffee`/`.cson` files in the `src`, `static`, and `vendor` directories, as well as a new `compiled_sources_dir` variable that specifies where the compiled versions of the files should be placed.
2. `atom.gyp` includes `sources.gypi`.
3. `atom.gyp` has a new target, `generated_sources`, which contains all the `.coffee`/`.cson` files, and uses two rules to tell gyp how to compile them. The rules invoke the new `script/compile-coffee` and `script/compile-cson` files once for each file.
4. gyp generates one `Makefile` for each rule to actually perform the compilation.
5. `script/copy-files-to-bundle` now takes the `compiled_sources_dir` variable as an argument, and copies files both from there and from the repository into the `Resources` directory.

By putting the compilation into a different target, we can do it in parallel with compiling/linking our binaries. And gyp automatically runs `make` using `-j$(sysctl -n hw.ncpu)`, so compilation of `.coffee`/`.cson` files happens in parallel, too.

These changes reduce clean build time on my MacBook Pro from 55 seconds to 31 seconds.
",1368,False,en,0
336,2,0,0,Internals,maddox,2013-03-01T18:14:44Z,3,4,1,0,"Updated this section to include the new (albeit wierd!) key commands
for creating splits and moving through them.
",114,False,en,0
330,22,3,1,Internals,probablycorey,2013-03-11T17:07:32Z,6118,827,49,10,"Write your css using less! I'd like a @caged or a @jonrohan to try this out and see if it meet their needs.
### How to use

Create a less file with the extension `.less` and use requireStylesheet like normal.

Closes #224
",222,False,en,0
326,3,5,0,Externals,aroben,2013-03-04T14:10:27Z,166,135,9,3,"All our native code now gets built into `Atom.framework`. `Atom.app` and `Atom Helper.app` both link against this framework. All resources other than a couple of main-bundle-only ones (e.g., `atom.icns`) go into `Atom.framework`.

Note that this means that there's no compile- or link-time separation between main process code and helper process code. We could introduce a compile-time separation by building main process and helper process code into separate static libraries with mutually exclusive include paths, if we want.

Atom.framework exports a single symbol: `AtomMain()`. `Atom.app` and `Atom Helper.app` contain a single source file: `main.cpp`. `main()` just calls `AtomMain()`.

All frameworks are placed in `Atom.app/Contents/Frameworks`. We now link against all frameworks using `@rpath`-based install names, which allows `Atom.app` and `Atom Helper.app` to find them automatically based on their own `LD_RUNPATH_SEARCH_PATH` settings. We use `install_name_tool` at build time on each of our three binaries (`Atom.app`, `Atom Helper.app`, `Atom.framework`) to set the install names.

By reducing duplication of code and resources between `Atom.app` and `Atom Helper.app` (and the `EH`/`NP` copies of `Atom Helper.app`), this reduces the size of the total `Atom.app` bundle from 145MB to 82MB. By compiling `.coffee` and `.cson` files only once, clean build time drops from 114 seconds to 79 seconds on my MacBook Pro.
",1434,True,en,0
324,9,0,0,Externals,aroben,2013-02-28T13:37:04Z,6,7,4,0,"This PR makes Atom work with the new Mac Janky slave.
",54,True,en,0
318,5,2,0,Internals,gjtorikian,2013-02-28T04:12:05Z,20,0,6,0,"For great victory.

Represents a set of [popular languages](https://github.com/languages), plus some stuff that's required for github/github and github/atom. 

As far as ""required"" packages I think this is it.
",210,True,en,0
317,1,5,0,Internals,gjtorikian,2013-02-27T23:00:02Z,4,0,2,0,"'Cause, you know.

Maybe I should just bite the bullet, do a sweep of all popular languages on GitHub, and add them submodules. Or even replicate the default list that comes out of ST2. Would that be useful?
",208,True,en,0
316,38,0,0,Internals,kevinsawicki,2013-03-05T05:51:27Z,624,79,30,5,"Now that we have web worker support we can level-up all the Git things.

This is not ready to merge yet.
",105,True,en,0
314,16,1,0,Internals,kevinsawicki,2013-02-27T18:50:15Z,580,59,21,0,"- Displays corrections on `meta-0`
- Initially enabled for:
  - Plain text files
  - Markdown files
  - Git commit messages
- Can be styled with the `.misspelling` class.

![Screen Shot 2013-02-26 at 6 52 39 PM](https://f.cloud.github.com/assets/671378/199516/d521333e-8088-11e2-8291-33697b2667dc.png)
",302,False,en,0
311,1,1,0,Externals,wfarr,2013-02-26T17:13:21Z,4,0,2,0,,0,False,en,0
306,109,0,0,Internals,kevinsawicki,2013-02-28T17:54:44Z,1293,392,94,5,"# Highlights
- TOML support
- clojure bundle now included by default
- yaml bundle now included by default
- another new icon
- Spell checking
",143,False,en,0
293,0,8,0,Internals,nathansobo,2013-03-07T17:37:27Z,0,0,0,14,"Work in progress ‚Äì Not ready to be merged

The central idea of this pull request is that anybody should be able to add items to panes. Right now, panes, tabs, and other functionality is very hard-coded to the editor use case. But what about opening an image viewer / editor or a markdown preview? Or something else? Our current arrangement falls down.

Now, panes are a much more central part of the view system. Panes have multiple items, and pane items can either be regular views _or_ they can be model objects. When you add a model object as a pane item, that object needs a `getViewClass` method to instruct the pane on how it should be rendered.

So now, instead of editors managing multiple edit sessions, edit sessions will just be added as pane items, and the pane will attach an editor and assign its edit session when it needs to render an edit session item. Any other types of items can follow a similar course.

Everything is ripped apart right now, but that's the goal.
- [x] Extract a pane container view for dealing with pane layout and other pane-spanning behavior
- [x] Make pane-splitting general, so that editor / edit session don't need to know about it
- [x] Rename Pane.currentItem/View to activeItem/View
- [x] Remove pane-splitting code from editor
- [x] Remember which pane was last focused (activePane)
- [x] Handle core:close event on pane
- [x] Revamp tabs to work with panes / pane items instead of editors / edit sessions
- [x] Support reordering items
- [x] Support moving items from one pane to another
- [x] Remove code for dealing with multiple edit sessions on editor
- [x] Make fuzzy finder work without reliance on editors having multiple edit sessions
- [x] Fix fuzzy finder splitting
- [x] Remove getActiveEditor. Root view should speak in terms of panes / items
- [x] Replace edit-session-removed events with their pane-item equivalent
- [x] Set the project path in the model layer when one of its edit sessions is first saved, not in the root view when focus shifts
- [x] Make tabs indicate when something is modified
- [x] Prompt when closing modified pane items
- [x] Handle save / save as on panes instead of editor
- [x] Handle saveAll on pane container
- [x] Move autosave to panes
- [x] Support destroying pane items other than the current
- [x] Support destroying all pane items and closing the pane
- [x] Numeric bindings for tab-switching should work
- [x] eliminate fixturesProject
- [x] Support reopening of most recently closed pane item
- [x] Title is not updating when an untitled file is saved for the first time
- [x] Restore root view serialization specs
- [x] Version the serialized window state and blow it away or migrate it if it gets stale
",2706,True,en,0
288,3,5,0,Internals,kevinsawicki,2013-02-20T20:20:42Z,180,69,4,0,"![Screen Shot 2013-02-19 at 3 13 28 PM](https://f.cloud.github.com/assets/671378/173866/5ad4ae42-7aea-11e2-9be4-44665b0a8366.png)
",130,True,en,0
285,2,2,5,Externals,aroben,2013-02-18T21:08:05Z,17,59667,532,1,"We now use [github/prebuilt-cef](https://github.com/github/prebuilt-cef) to download CEF from S3, then build against that. This means we no longer need to have CEF committed to the repo.

Fixes #280.
",200,True,en,0
283,7,6,0,Internals,Caged,2013-02-15T18:46:31Z,66,29,3,0,"WIP:  Fix for #282 

/cc @nathansobo @jonrohan 
",48,True,en,0
278,2,6,0,Internals,nathansobo,2013-02-15T17:40:18Z,6,4,1,0,"I wanted to give people a chance to comment on this before merging it in. Relates to discussion in issue #214.

/cc @probablycorey
",131,True,en,0
272,8,1,0,Internals,probablycorey,2013-02-13T19:03:30Z,372,58,25,0,"Based on Issued #130.

Calling the `package-generator:generate` command will create a basic package in ~/.atom/packages. I tried to keep the package as simple as possible but enforce conventions that we use. For example, the generated `package.cson` file includes `activationEvents` so the package won't be loaded synchronously on launch. Hopefully this will feel more natural than a CLI based generator.

I'd like to talk to @jonrohan and @Caged about adding theme generator support.
",485,True,en,0
271,53,9,0,Internals,Caged,2013-02-14T18:13:41Z,453,119,13,0,"WIP
- [x] - Loading progress spinner.  Fix for #147 
- [x] - Polish design
- [x]  - Expand/Collapse file matches
- [x] - Expand All / Collapse All
- [x] - Fix broken specs
- [x] - Fix automatic scrolling when keying through the operations list
",244,False,en,0
270,1,0,0,Internals,jonrohan,2013-02-13T17:06:59Z,45,41,6,0,"The markdown styles shouldn't be in the ui themes.

![Screen Shot 2013-02-13 at 8 47 57 AM](https://f.cloud.github.com/assets/54012/153602/df4e6b0a-75fd-11e2-98c7-57947fa243cb.png)

The pull moves them to the `*-syntax.css` files. cc @Caged 
",242,True,en,0
264,5,4,2,Internals,defunkt,2013-02-13T20:51:02Z,65,5,3,0,"This orders the buffers in `meta-b` by the time they were opened. The most recently opened buffer is at the top. The currently opened buffer is at the bottom. This means you can keep hitting `meta-b` to toggle between two files you're working on.
",247,True,en,0
257,6,4,0,Internals,Caged,2013-02-12T21:59:01Z,53,0,7,0,"![Screen Shot 2013-02-12 at 11 59 17 AM](https://f.cloud.github.com/assets/25/150365/10d2a182-754f-11e2-97f8-379392b2982b.png)

![Screen Shot 2013-02-12 at 12 09 21 PM](https://f.cloud.github.com/assets/25/150407/2bed8710-7550-11e2-9c9a-cd6b545c5378.png)

/cc @kevinsawicki @jonrohan 
",285,True,en,0
256,250,0,0,Internals,kevinsawicki,2013-02-21T20:58:56Z,3930,61870,717,9,"# Highlights
- Tabs can now be dragged and dropped to reorder or move between splits
- Undo closing a tab with `cmd-T`
- Package to generate new packages
- Comments are now foldable
- `cmd-b` now shows buffers sorted by most recently opened
- Sexy command panel
- Indent guide
- Support for variable width fonts
",312,False,en,0
255,49,4,5,Internals,Caged,2013-02-12T16:38:53Z,375,59,15,2,"![drag-drop-optimized](https://f.cloud.github.com/assets/25/142896/561f3608-7336-11e2-9ed2-15fcf651a5ec.gif)

WIP :construction: :construction_worker: :  Allow tabs to be resorted/dragged among themselves and across different panes.  There's still quiet a bit of work left to do, but I want to push this up so we can iterate on it and get some feedback.  

I feel like `Tabs` might be the wrong place for this since `Tabs` represents a single instance of a tab panel.  This has to work across multiple tab instances.  Maybe the drag and drop callbacks would fit better in `RootView`?  Should we trigger some custom events (`tab:dragged`, etc.) here?
- [x] Drag and drop tabs
- [x] Drag and drop between panes
- [x] Prevent duplicate files/edit-sessions from occupying the same editor
- [ ] ~~Make the tab bars drop targets~~ [PUNTING]
- [x] Remove pane after last tab is dragged from it
- [x] Be smarter about determining the new active tab if you drag the current pane's active tab to another pane
- [x] Improve visual feedback
- [x] Write specs

/cc @nathansobo @kevinsawicki @probablycorey @jonrohan 
",1104,True,en,0
254,10,6,0,Internals,nathansobo,2013-02-13T00:16:40Z,157,56,7,3,"The new atom-light-syntax theme makes use of bold, and since not all fixed-width fonts have the same width for bold and non-bold characters, this really forces our hand to support this.
- [x] make sure the whole build passes
- [x] investigate performance implications
- [x] optimize if necessary

![variable-width](https://f.cloud.github.com/assets/1789/142742/d2dd5088-7315-11e2-9211-564434c048af.gif)
",403,False,en,0
252,58,1,0,Internals,kevinsawicki,2013-02-09T01:32:58Z,897,834,121,0,,0,False,en,0
250,6,16,0,Internals,Caged,2013-02-08T00:46:17Z,0,0,1,0,"The current icon looked a little sad in my dock.  This icon looks a little less sad until @jeejkang or someone else can come up with a really kick ass one. 

![Screen Shot 2013-02-07 at 12 26 37 PM](https://f.cloud.github.com/assets/25/137192/6297d200-7165-11e2-9c3f-ebb7a10660b5.png)
",285,True,en,0
246,3,4,0,Internals,nathansobo,2013-02-08T16:53:32Z,336,320,6,1,"This fixes #169. I lifted it out of the `LanguageMode` class and dropped it into the brackets package in a fairly straightforward way. Cool with it?
",149,True,en,0
244,7,4,0,Internals,Caged,2013-02-07T02:33:51Z,52,36,10,0,"- Reverts the bracket matching animation.  Sorry for the temporary whiz bang.
- Adjusts some colors.  Slowly tweaking things that are full grey so they won't be full grey.
-  Use mini overlay style for grammar

/cc @jonrohan @kevinsawicki @nathansobo 
",252,False,en,0
243,69,0,0,Internals,nathansobo,2013-02-07T01:16:34Z,1366,707,27,0,"**Status: Almost there... still need to run some benchmarks to ensure there's no performance hit.**

Markers are stored in the buffer, and are kept in the same logical location when the buffer changes just like anchors and anchor ranges were previously. Markers combine anchors and anchor ranges into a single construct... basically you can think of a marker as being like a selection. It marks a region of the buffer, with a head and an optional tail. In fact, each cursor / selection pair is now just another layer on top of a single marker in the buffer.

Markers are identified with a label string, which is currently auto-generated whenever you add a marker. In the future, we plan on allowing you to specify your own marker names, and even scoping them (`name.scope`) like you can with jQuery events.

One cool thing about markers is that if they are invalidated, undoing the operation that invalidated them will restore the marker. This will help with nested snippet tab stops, because if you type in the outer tab stop and then undo your change, the inner tab stops will be restored.

You can observe a marker at the buffer level or the display buffer level, and your callback will be fired whenever the head or tail positions change. If you observe at the display buffer level (via `EditSesson`), you'll be notified if either their buffer or screen positions change.

This is just a first step in what I think will become a very important core facility in Atom. I want markers to closely follow the regions of the buffer they mark. For example, if you cut and paste a region with markers, the markers should go with it. If you duplicate a line with markers, you should duplicate the markers. I want this to be the basis of determining what regions of the code are folded, so that you can copy and paste folded lines.
",1826,True,en,0
241,3,0,0,Internals,Caged,2013-02-07T04:34:14Z,20,11,1,0,"- Rename `cmd` to `meta`
- Add treeview shortcuts
",50,False,en,0
240,2,6,0,Internals,Caged,2013-02-06T18:30:08Z,4,452,4,0,"WIP
- [x] Consolidate duplicate Markdown styles into the markdown package
- [x] Match .com's style a little more

/cc @kevinsawicki @jonrohan 
",143,False,en,0
239,220,0,0,Internals,kevinsawicki,2013-02-12T01:47:36Z,3188,2677,198,5,"# Highlights
- Better looking tabs
- GitHub Flavored Markdown syntax highlighting and snippets now included
- CSON snippets and grammars are now supported
",155,False,en,1
238,19,7,0,Internals,Caged,2013-02-06T17:05:10Z,123,243,9,0,"WIP:  This uses a list for tabs and also updates the look of atom-dark-ui tabs. I wasn't really ever able to get the `box-shadow`-based rounded tab look just right so I started tweaking them and I think it looks great without those corners. 

![Screen Shot 2013-02-05 at 5 35 01 PM](https://f.cloud.github.com/assets/25/130060/39723f72-6ffe-11e2-9731-2d9647c00693.png)

/cc @jonrohan 
",385,True,en,0
236,4,0,1,Internals,Caged,2013-02-05T20:57:54Z,17,5,2,0,"This allows us to simulate the effects of blur and focus in testing.

/cc @nathansobo @kevinsawicki 
",101,True,en,0
232,14,3,0,Internals,Caged,2013-02-05T17:13:33Z,99,108,15,0,"WIP:  Change `.is-focused` to `.is-blurred`.  This allows the normal (focused) state to be the default which means we don't need `.is-focused` prefixes for most things.  This also adds a `blurred.css` (got a better name?) file which you can easily group all your blurred state styles in.

/cc @jonrohan 
",304,True,en,0
227,71,6,3,Internals,Caged,2013-02-04T23:39:22Z,611,1185,57,2,"WIP:  This pull will abstract any CSS that we can.  For instance, autocomplete uses what could become a fairly common UI construct.  Let's abstract this to `popover-list`.  I'm going to document the pieces here as I abstract them.   Once we get a real styleguide, we can add images for these things.

``` scss
// Any single-line ""input.""  These are usually present in panels that appear over the main editor
.editor.mini
```

``` scss
// A list of items that appears in a panel which has a single active selection.  Each item occupies a single row or single column in the list.
.select-list
```

``` scss
// A version of a select list which is usually smaller and appears to hover above the main editor view.  This list is usually automatically hidden when it loses focus.
.select-list.popover-list
```

``` scss
// An element which appears from the edge of Atom.  For example, go-to-line.
.overlay
.overlay.mini
```

``` scss
// An element that temporarily appears over the editor similar to OSX's notifications. 
.notification
```

/cc @probablycorey @jonrohan @kevinsawicki @nathansobo 

PS: Let me know if you'd rather not be @ mentioned on things like this.  
",1165,True,en,0
168,3,7,0,Internals,jonrohan,2013-02-02T01:50:29Z,136,44,13,0,"I was thinking that the atom window need some indication when it doesn't have focus. When I'm working, and meta-tab to finder, it may look like the editor still has focus, but it doesn't. 

My first thought was to see if webkit has something like a bubbling up :focus property. Alas I can't tell if it does, looks like no.

So I think that the app should add a `.is-focused` class to `body`. so that I can engineer some color changes to indicate the editor is not focused.
",473,True,en,0
226,3,1,0,Internals,Caged,2013-02-01T22:29:18Z,9,16,2,0,"Cleans up the visual style of the command panel to match the rest of the dark theme.

![Screen Shot 2013-02-01 at 2 23 26 PM](https://f.cloud.github.com/assets/25/119965/1fe2e93c-6cbe-11e2-8a16-5d5197114e27.png)

/cc @jonrohan 
",228,True,en,0
221,21,16,0,Internals,jonrohan,2013-02-01T21:53:20Z,483,25,47,0,"This base is right now stolen from Twilight/IR_White. Pull requests encouraged.

The idea being here, that when Atom launches, we'll have GitHub colors instead of a textmate theme. Of course the app is still highly modifiable.

@Caged 
",236,True,en,0
220,9,3,0,Internals,Caged,2013-02-01T19:26:02Z,16,9,6,0,"This provides a better .atom when you first `rake install`.  
- Copies over entire .atom/ template directory
- Creates additional folder for templates/
- Creates a default config.json file with some sane defaults [1].
- Doesn't copy over Atom -Dark and IR_Black because those are loaded by default

```
config.json
user.coffee 
user.css
packages/
   Readme.md
snippets/
   coffee.cson
themes/
   Readme.md
```

1:  Here's what the default config.json looks like:

``` json
{
  ""editor"": {
    ""fontSize"": 12
  },
  ""core"": {
    ""themes"": [
      ""Atom - Dark"",
      ""IR_Black""
    ]
  }
}
```

I bumped the default fontSize down to 12, but I'm curious if anyone thinks it should be as large as it previously was?

Finally, I included the default Atom themes/styles.  One reason I did this was because I would end up getting Atom in a bad state while trying to add my custom editor theme since it's cascading.  Simply setting themes to `[""My Theme""]` will remove all default styles.  This makes it more obvious that you're relying on built in themes by default.
",1063,False,en,0
217,1,0,0,Internals,Caged,2013-01-31T20:10:11Z,6,6,1,0,"We're now refocusing the preview list instead of the editor.

/cc @kevinsawicki 
",81,True,en,0
216,11,3,0,Internals,Caged,2013-01-31T18:36:24Z,33,6,6,0,"This renames `atom.coffee` to `user.coffee` and also creates a `user.css` that is loaded after all themes and packages are loaded.  `user.css` is intended for small tweaks or any style overrides you want to apply to atom.  It's a great way to make changes without the overhead of creating a theme.

/cc @nathansobo @probablycorey 
",331,True,en,0
215,1,1,0,Internals,jonrohan,2013-01-31T16:29:28Z,4,5,2,0,"I don't think we should add a `font-family` to the head when the user **doesn't** have it set in their `config.json`.

Without it there, the theme can bundle it's own monospaced font with it. If we put a default value at the bottom, then it over writes the theme font-family and makes it difficult to override.

@probablycorey @Caged 
",335,True,en,0
213,1,0,0,Internals,jonrohan,2013-01-31T16:29:47Z,2,0,2,0,"Since we can change the font-family now, not having a line-height makes things a bit crazy.

I just took a stab at `line-height: 1.3;` and it looks good. 

@Caged
",163,True,en,0
208,9,2,0,Internals,probablycorey,2013-01-30T21:23:45Z,89,19,6,0,"Based on issue #67. `editor.fontFamily` is now a config setting. I decided not to make `lineHeight` a config option because it feels like a theme setting more than an editor setting. 

Following @jonrohan's advice, `editor.fontSize` and `editor.fontFamily` are now stored in the html's head. Although, there may be a better way of doing this https://github.com/github/atom/blob/font-config/src/app/editor.coffee#L685
",417,True,en,0
204,2,1,0,Internals,Caged,2013-01-31T18:39:25Z,1,1,1,0,"escape closes most dialogs except the command panel.  This allows you to use `esc` to get out of the command panel when it's focused.
",134,True,en,0
202,59,6,5,Internals,Caged,2013-02-01T18:51:20Z,239,1,7,2,"This branch adds realtime stats about your activity to the bottom of your editor.  As you work in your editor (typing and mouse clicking) those events will be tracked and grouped on a per-minute basis and shown in the graph which is updated about every 5 seconds automagically.

Insanely big and fast GIF incoming....
![atom](https://f.cloud.github.com/assets/25/111931/04af8e38-6b09-11e2-96f6-2bb155b3c679.gif)
",412,True,en,0
200,13,2,0,Internals,probablycorey,2013-01-30T16:40:20Z,94,53,4,0,"Issued #82 caused me to rethink how Atom defines words. The config option `editor.nonWordCharacters` now determines words. I found it easier to understand and describe what is **not** a word rather than what **is** a word. This also changes Atom's word movement behavior to match Vim's instead of TextMates, because I think Vim has a better mechanic.
",351,True,en,0
199,1,1,0,Internals,jonrohan,2013-01-29T19:49:11Z,1,1,1,0,"The bullets for the space invisible were soooo chunky. I thought this might be nicer.

Before:

![Screen Shot 2013-01-29 at 2 37 10 PM](https://f.cloud.github.com/assets/54012/108358/89cae3d8-6a4b-11e2-8cd2-9833a4e2fc6f.png)

After:

![Screen Shot 2013-01-29 at 2 36 48 PM](https://f.cloud.github.com/assets/54012/108361/8fe4be1a-6a4b-11e2-9d49-dfacbd4b0240.png)
",363,True,en,0
196,12,3,0,Internals,Caged,2013-01-29T19:10:41Z,36,14,6,0,"WIP:  This branch cleans up the look of the faux mini editor input.   Gives it some depth and matches the look and feel of the Light and Dark themes. 

![Screen Shot 2013-01-29 at 10 14 06 AM](https://f.cloud.github.com/assets/25/108022/bec61bae-6a3f-11e2-8a12-14a0a6acdea9.png)
![Screen Shot 2013-01-29 at 10 13 41 AM](https://f.cloud.github.com/assets/25/108023/bf26e7a4-6a3f-11e2-97e8-c631baf4c745.png)

/cc @jonrohan 
",422,True,en,0
179,250,0,0,Internals,kevinsawicki,2013-02-05T21:26:41Z,5515,3244,231,9,"### Highlights
- Faster launch
- Web worker support
- Move lines up and down with `ctrl-cmd-up/down`
- Python bundle now included
- `CRLF` support
- New folding decorations
- Mouse/keyboard usage stats graph via `cmd-alt-s`
- Bracket pair highlighting of `([{}])` and jump to matching bracket with `ctrl-j`
- Config file can now be CSON at `~/.atom/config.cson`
- Toggle full screen mode with `ctrl-cmd-f`
- Duplicate current line with `cmd-D`
",444,False,en,0
178,2,0,0,Internals,defunkt,2013-01-27T18:23:24Z,1,0,1,0,"`ctrl-tab` mirrors the browser behavior of tab jumping between inputs.

It also opens the door to having ctrl-shift-tab jump back to the previous pane, though I haven't touched in this PR.

I kept `ctrl-w w` for the vim people but would prefer we view that as compat - Atom shouldn't force you to use two keystrokes for core functionality.
",340,True,en,0
135,5,15,0,Internals,jonrohan,2013-02-12T19:22:47Z,59,1,3,17,"I‚Äôd love to have `cmd` + `shift` + `t` restore the last closed tab(s) like Sublime does. No idea what that would entail.
",123,True,en,0
177,1,3,0,Internals,jonrohan,2013-01-26T02:53:53Z,13,11,3,0,"Through the power of `-webkit-box-flex` I've re-written the tabs so that the current tab will flex larger to show of it's sexy tab name.

![animated-2013-01-25_16h-28m-58s](https://f.cloud.github.com/assets/54012/99233/6a81f4a2-674f-11e2-81bd-e198d1594c9f.gif)
",261,True,en,0
172,44,7,0,Internals,kevinsawicki,2013-01-28T22:03:10Z,1309,1042,54,3,"work hard, web hard.
",21,True,en,0
170,3,0,1,Internals,nathansobo,2013-01-25T00:15:52Z,117,106,8,0,"Here are some ideas for the new `Task` system. More details in the commit messages...
",86,True,en,0
167,4,1,0,Internals,mutle,2013-01-24T17:56:51Z,10,1,3,0,"Fixes github/atom#165
",22,True,en,0
162,3,0,0,Internals,probablycorey,2013-01-23T23:30:03Z,734,14,151,0,"Atom binaries can be automatically updated (via Speakeasy)!

Currently we download updates in the background and install on quit. You have no choice in the matter. We plan on displaying an indicator if an update is pending, for now we don't.
",242,True,en,0
158,29,0,0,Internals,nathansobo,2013-01-25T01:24:07Z,1214,1014,44,1,"## WIP

We currently use the `CefRegisterExtension` API to inject our native code into the window context. Unfortunately, this doesn't work with WebWorkers contexts. This PR is for converting all the native code over to use window bindings instead.
",249,True,en,0
155,5,0,0,Internals,kevinsawicki,2013-01-23T02:32:26Z,394,225,46,0,,0,False,en,0
154,6,7,0,Internals,nakajima,2013-01-23T00:39:16Z,62,36,3,0,"Without position fixed, the resizer breaks when the tree view is scrolled.

Also needed to add https://github.com/github/atom/pull/new/restore-fixed-position-for-resizer#L0L39 to make sure the resizer was in the right place when the window was restored. If that's not the right way to do this, teach me.
",304,True,en,0
151,137,0,0,Internals,kevinsawicki,2013-01-26T00:24:09Z,6964,2707,586,4,,0,False,en,0
146,34,8,0,Internals,jonrohan,2013-01-22T21:35:26Z,2162,1349,77,4,"I really wanted to move the stylesheets out of `src/` and into it's own theme. ""Atom - Dark""

The reason being, having the style easily findable will facilitate users creating their own theme more quickly.
- [x] Fix specs (that this branch broke)
- [x] Create Atom - Light

@Caged @nathansobo @probablycorey @kevinsawicki 
",323,True,en,0
138,11,1,0,Internals,kevinsawicki,2013-01-18T00:50:48Z,50,13,15,0,"Tweaks to make launch of initial window quicker.
- No more white window
- Pre-compile cson to json
- Inline large requires until needed
- Re-use PEG parsers
",157,False,en,0
136,12,2,1,Internals,nakajima,2013-01-21T18:42:37Z,32,2,4,3,"Currently, the sidebar width is determined by the width of its content. So if you close a very wide directory, the sidebar shrinks, and whatever code you're looking at jumps on the page. This PR allows drag and drop resizing.

![resize-demo](https://f.cloud.github.com/assets/483/76256/a68ff89a-60e7-11e2-9664-c795afd0f6ea.gif)
## Issues
- [x] If you drag too fast, the names of your tabs get highlighted
- [x] The size of the window is off by 12px because of padding in the tree view
- [x] The resize area is very small so it's easy to miss.
- [x] The behavior/styles are being applied to the package browser
",610,True,en,0
133,1,0,0,Externals,derekgr,2013-01-17T21:14:01Z,1,1,1,0,"On OS X, I expect to be able to cmd-d in a Save confirmation and have it choose ""Don't Save"". You can either set the key binding when adding the `NSButton`, or if your button is ""Don't Save"" (with a capital S), OS X automagically turns it on for you.
",251,True,en,0
128,34,0,0,Internals,kevinsawicki,2013-01-19T18:56:22Z,290,143,42,5,,0,False,en,0
127,17,0,0,Internals,kevinsawicki,2013-01-14T00:04:59Z,189,54,13,2,,0,False,en,0
126,87,0,0,Internals,kevinsawicki,2013-01-11T19:39:41Z,1320,639,75,0,,0,False,en,1
124,9,0,0,Internals,probablycorey,2013-01-10T19:02:55Z,107,57,7,0,"This adds two config options (default settings shown below)

``` coffeescript
editor:
  autoIndent: true
  autoIndentOnPaste: false
```

We use TextMate grammars to predict the appropriate indentation level. 

`editor.autoIndent` will use use this indentation level when you insert a newline or when you press tab on at the beginning of a line.

`editor.autoIndentOnPaste` will using the predicted indentation level to indent pasted text (duh.)

These config options can be toggle by the commands `window.auto-indent` and `window:auto-indent-on-paste`
",552,True,en,0
119,5,1,0,Internals,kevinsawicki,2013-01-04T16:22:02Z,57,32,17,0,"Moves textmate bundles currently cloned to `~/.atom/packages` during `rake install` to `vendor/packages` as submodules.
",120,True,en,0
117,4,4,5,Internals,jonrohan,2012-12-28T06:29:18Z,33,1,3,0,"![Screen Shot 2012-12-27 at 8 59 26 PM](https://f.cloud.github.com/assets/54012/33629/d310524e-50ab-11e2-86a9-ac50d2eb993c.png)

The style is slightly a rip off, but more importantly it adds a `file-modified` class to the tab, which can be styled whatever way.
",261,True,en,0
116,18,0,0,Internals,kevinsawicki,2012-12-29T01:15:01Z,8066,0,5,1,"Cumulatively store all commands executed and display in tree map broken down by component allowing drill-down.
# Zoomed out

![Screen Shot 2012-12-27 at 5 10 09 PM](https://f.cloud.github.com/assets/671378/33436/8dfa259c-508b-11e2-803c-97b44ec6a637.png)
# Zoomed in

![Screen Shot 2012-12-27 at 5 10 28 PM](https://f.cloud.github.com/assets/671378/33437/95db0b3c-508b-11e2-9d4e-d439bd52d645.png)
",396,False,en,0
115,1,5,0,Internals,jonrohan,2012-12-27T05:27:43Z,1,1,2,0,"I just don't like Apple's linen look. Not really much more I can say.

![_Users_jonrohan_github_atom](https://f.cloud.github.com/assets/54012/32049/e3789ecc-4fdc-11e2-982d-9e63be1bab13.png)
### Some eventual ideas.

One of my favorite editor backgrounds is from [espresso app](http://macrabbit.com/espresso/). It's just a beautifully done illustration. Maybe @tonyjaramillo can draw something awesome in the vein of the 60s atomic esque.

![github](https://f.cloud.github.com/assets/54012/32050/23eca3fe-4fdd-11e2-851b-413ec0a2d441.png)

Another idea would be to have some actionable things. github related. Here's an idea from chocolate app. Where they have a new file form.

![ gitignore github](https://f.cloud.github.com/assets/54012/32051/ae305664-4fdd-11e2-94d5-dfbcef0c53d5.png)

Anyways, I don't want to bog this PR down with what we want to do, this will just replace the linen with a simple color. But for the future we could do something cool.

@github/atom 
",970,True,en,0
114,5,0,0,Internals,jonrohan,2012-12-26T21:12:10Z,45,34,2,1,"![](http://24.media.tumblr.com/tumblr_m57fhrZ7xe1r086u8o1_400.gif)

> I've been working so hard
> I'm punching my card
> Eight hours for what?
> Oh, tell me what I got

I styled up the status bar. So the footloose is going from 

![Screen Shot 2012-12-25 at 11 22 10 AM](https://f.cloud.github.com/assets/54012/30593/70d6cd40-4ec8-11e2-93f7-9a0585194f00.png)

To

![Screen Shot 2012-12-25 at 11 21 51 AM](https://f.cloud.github.com/assets/54012/30594/74904ed4-4ec8-11e2-91d9-cc1bae78f4ad.png)

@github/atom 
",508,True,en,0
113,16,2,2,Internals,jonrohan,2012-12-27T01:13:47Z,174,48,7,1,"I wanted to clean up the treeview. Mainly what was buggin me was the highlight not going straight across the selected file.

Here's the result. I also created a video http://screencast.com/t/oSbCPnROq

![Screen Shot 2012-12-24 at 5 17 26 PM](https://f.cloud.github.com/assets/54012/30178/f69d2e6c-4e30-11e2-8b8a-81a61e44acb0.png)

@nathansobo @probablycorey @kevinsawicki
",372,True,en,0
112,2,3,0,Internals,jonrohan,2012-12-26T18:59:06Z,2,1,2,1,"This pull request sets the global font to the system font. ""Lucida Grande"" on mac. And sets only the `.editor` to have the fixed width font.

I believe this helps the user distinguish the code from the rest of the UI.

![atom css _Users_jonrohan_github_atom](https://f.cloud.github.com/assets/54012/30090/6a419e5a-4e10-11e2-9729-70c783fa753c.png)

@nathansobo @probablycorey @kevinsawicki 
",390,True,en,0
111,8,5,0,Internals,jonrohan,2012-12-26T19:13:55Z,72,22,2,1,"I want the tab layout to not wrap. Having multiple rows of tabs is distracting and takes up valuable real estate. 

This pull request makes the tabs layout in a `table-cell` format.

Before:

![Screen Shot 2012-12-24 at 11 25 43 AM](https://f.cloud.github.com/assets/54012/30021/bf5cd942-4dff-11e2-86ba-0f245a7c35d9.png)

After:

![Screen Shot 2012-12-24 at 11 23 53 AM](https://f.cloud.github.com/assets/54012/30020/a7b04ebe-4dff-11e2-8397-314063d474b6.png)

@probablycorey @kevinsawicki @nathansobo 
",502,True,en,0
110,5,0,0,Internals,kevinsawicki,2012-12-21T22:35:51Z,137,23,7,0,"Updates grammar support for replacing anchors and matching the trailing newline character included with a line.
# Git commit messages
## Before

![Screen Shot 2012-12-21 at 1 24 21 PM](https://f.cloud.github.com/assets/671378/27934/f6001286-4bb4-11e2-9067-cd13c98b7ec6.png)
## After

![Screen Shot 2012-12-21 at 1 25 13 PM](https://f.cloud.github.com/assets/671378/27937/fe907c24-4bb4-11e2-8bc5-245c9826327c.png)
# Objective-C files
## Before

![Screen Shot 2012-12-21 at 1 27 01 PM](https://f.cloud.github.com/assets/671378/27946/cf3228a0-4bb5-11e2-93bb-6d50c6d00ece.png)
## After

![Screen Shot 2012-12-21 at 1 31 16 PM](https://f.cloud.github.com/assets/671378/27948/e7835096-4bb5-11e2-8db5-03be5a39261a.png)
",712,False,en,0
108,1,1,0,Externals,cobyism,2012-12-18T16:44:56Z,1,0,1,0,"This makes the cursor change to the hand/pointer thingy when you hover over the close tab icon. Currently, the only indication on hover is the change in icon color with the cursor staying as an arrow.
",201,True,en,0
107,68,1,0,Internals,probablycorey,2012-12-19T03:37:06Z,925,302,103,4,"Plans for this PR can be found in the [documentation page for configuring and extending Atom](https://github.com/github/atom/blob/config/docs/configuring-and-extending.md)

Tasks:
- [x] use `config` system for everything we currently hack `atom.coffee` to do
- [x] switch to `config.core.disabledExtensions` rather than `config.core.extensions`
- [x] switch to `config.get` & `config.set` rather than favoring direct access
- [x] change `window.requireExtension` to `atom.loadPackage`
- [ ] don't load a package twice with the same name

:point_up: We can merge early after these, then continue on to :point_down:
- [x] make textmate bundles work in the packages directory
- [x] load themes from `~/.atom/themes` (or the bundle's default themes), based on the `core.themes` config key
- [x] add scoped configuration facility

There's still some fuzziness about the following:
- Grammars in non-TextMate atom extensions
- Should we convert some of Atom's default bundles away from TextMate for easier maintenance?
",1013,True,en,0
99,16,1,0,Internals,nathansobo,2012-11-23T20:05:20Z,382,185,8,0,"The rendering cascade looks like this: `Buffer => TokenizedBuffer => DisplayBuffer => Editor View`

Previously, we were tokenizing the entire file when we constructed the `TokenizedBuffer`, but for big files this was really slow. It locked up the UI thread for like 5-6 seconds loading jQuery. This PR makes that process asynchronous. We render lines in an untokenized form initially, then tokenize them one chunk at a time in the background while yielding back to the UI thread between chunks.

**This still isn't good enough, but it's a start.** This approach still consumes a lot of time on the UI thread, so even though we haven't locked it completely, performance is still pretty crappy during tokenization. To _truly_ tokenize in the background, we need to use a worker thread or another process. That will allow the UI to be super responsive even while we are tokenizing. I'll give it a try if we can manage to switch to [node-webkit](https://github.com/rogerwang/node-webkit).
",985,True,en,0
98,15,1,0,Internals,nathansobo,2012-11-20T23:44:52Z,235,17,13,0,"At long last, Atom now has a tabs extension. Tabs are built on top of the editor's existing concept of edit sessions. You can use tabs to change edit sessions, and the tab strip updates depending on the state of the editor's current edit sessions.

![Screenshot](https://s3.amazonaws.com/github/assets/1789/eb/12/eb1230d6-336b-11e2-9de1-83c694e01e96.png)
",355,True,en,0
97,49,0,0,Internals,nathansobo,2012-11-15T04:03:03Z,444,338,28,0,"Finally, we've gotten to the bottom of our elusive typing performance issues.

The big deal here is that we know update the editor's display on `nextTick`, which we implement with a MessageChannel hack. This means that when an event triggers multiple changes, (like a change in the selection, the cursor position, and the lines in the editor, for example) we don't touch the DOM at all until the end of the event cycle. To do these, we needed to batch up update events on the editor and then have a way of rendering them all at once. Now typing a character updates the screen without any extraneous reflows.

Also, it turns out that blinking the cursor with a CSS animation causes Atom to be less responsive because WebKit is busy sampling the editor's display 60 times a second and sometimes our keystrokes miss a frame. Blinking with a timer is better, so that's what we do now.
",881,True,en,0
94,17,0,0,Internals,probablycorey,2012-11-06T19:56:39Z,211,173,18,0,"Soft tabs behave similarly to hard tabs in regard cursor placement and movement. Also, setting a new tab length will rerender the buffer.
",138,True,en,0
93,17,12,0,Externals,wfarr,2012-11-19T19:10:32Z,63,6,8,16,"WIP

Seems to work really well and skips a TON of noise in the finder.

Needs specs still.
",91,True,en,0
91,4,1,0,Internals,nathansobo,2012-10-29T22:54:42Z,96,35,9,0,"This pull request hides the cursor when there's a selection, and adjusts commenting and indent behavior to exclude the last line of the selection if the selection ends on column 0.
## Before:

![Before](http://f.cl.ly/items/1X1A1S0q131x0z28322O/Screen%20Shot%202012-10-29%20at%204.46.47%20PM.png)
## After:

![After](http://f.cl.ly/items/3E0p3w2I3l2q203W2A3N/Screen%20Shot%202012-10-29%20at%204.46.11%20PM.png)
",411,False,en,0
90,7,3,1,Externals,wfarr,2012-11-03T00:53:38Z,61,12,5,4,"Still an outstanding spec failure on the editor spec I haven't been able to fix up yet.
",88,True,en,0
89,6,0,0,Internals,nathansobo,2012-10-26T18:27:41Z,209,91,10,0,"This includes ""auto-indent"" and ""indent selected lines"". You can toggle soft tabs on or off with the event palette using the ""Editor: Toggle Soft Tabs"" event.
",159,True,en,0
88,46,2,2,Internals,kevinsawicki,2012-11-02T22:54:06Z,8630,25,76,7,"## Adds a branch label indicator to the status bar

![](http://cl.ly/image/32391L2X3M2F/Screen%20Shot%202012-10-25%20at%204.42.05%20PM.png)
## Color ignored files/folders in the tree view

![](http://cl.ly/image/25132E0V171J/Screen%20Shot%202012-10-26%20at%204.33.07%20PM.png)
",277,True,en,0
86,17,11,0,Internals,kevinsawicki,2012-10-26T00:54:27Z,229,1,8,1,"Quick outline view that uses `ctags` to be able to jump to method definitions in the open editor.
- Activated by `ctrl + o`
- Add the following to your `~/.ctags` file to get coffeescript support:

```
--langdef=coffee
--langmap=coffee:.coffee
--regex-coffee=/^[ \t]*(@?[a-zA-Z$_]+)[ \t]*(=|\:)[ \t]*(\([^\)]*\))?[ \t]*(-|=)>/\1/f,function/
```

Once this is ready to merge I will add `ctags` as a brew dependency for atom so the correct version is available.

![](http://cl.ly/image/1D1R0J1W2Z01/Screen%20Shot%202012-10-24%20at%208.25.30%20AM.png)
",549,False,en,0
83,15,0,1,Internals,nathansobo,2012-10-25T16:50:16Z,655,64,11,1,"Here's a video, which will be the clearest explanation:
http://f.cl.ly/items/3x3U190T3q3o3T0k140l/Normalize%20Indentation%20on%20Paste.mov

Still to do:
We always normalized based on the indent of the first pasted line. I'd like to store metadata about the indent level of the code block when it is copied to the clipboard. That way, even if the user doesn't copy _all_ of the first line, we'll still normalize indentation correctly.
",434,False,en,0
69,13,2,1,Internals,probablycorey,2012-10-18T21:45:57Z,156,96,19,6,"This adds invisibles to Atom.
# Things that need to be done
- I'd like to add the ability to have a zero-width token. Currently I add the newline character when atom builds the html line, but if we could add this at the tokenized-buffer layer it would match how we create tab and space tokens. The alternative is to move the invisible rendering out of tokenized-buffer and do it when we build the html line.
- Never show space invisibles unless they are at the beginning or end of a buffer line.
",496,False,en,0
64,8,0,0,Internals,kevinsawicki,2012-10-12T17:09:23Z,31,56461,951,2,"- Removes the [gyp](http://code.google.com/p/gyp/) tree from the `tools/` folder
- Add installation of gyp to `script/bootstrap`
",129,False,en,66
61,3,1,1,Internals,defunkt,2012-10-09T18:03:34Z,27,0,4,0,"When nothing is selected, swaps the letters around the cursor.

When text is selected, reverses all of it (TextMate-style).
",124,True,en,0
55,48,11,0,Internals,nathansobo,2012-10-19T20:08:03Z,641,308,29,15,"The event palette is similar to Sublime's command palette. It displays a list of all contextually-available events with fuzzy-filtering, allowing you to trigger an event without a keybinding.
",192,True,en,0
51,10,5,5,Externals,wfarr,2012-10-09T16:36:47Z,66,7,4,9,"Displays an `*` next to the name of the file being edited in the status bar.

![](http://f.cl.ly/items/110D2X2X2m3o381D2h0r/Screen%20Shot%202012-09-29%20at%207.26.10%20PM.png)
",176,True,en,0
37,9,1,0,Internals,jbarnette,2012-09-18T22:22:17Z,40,23,6,5,"Make Atom work well with The Setup. This doesn't work yet. /cc @probablycorey 
",79,True,en,0
36,2,2,0,Internals,kevinsawicki,2012-08-23T17:47:52Z,105,13,3,0,,0,False,en,0
33,33,6,0,Internals,nathansobo,2012-08-10T00:58:10Z,3269,64290,267,0,"The timing of this PR has **nothing** to do with the recent open sourcing of TextMate 2. Complete coincidence. We started on it before that happened.
# Screenshots

In the following two screen shots, you see Atom loading the theme it is in.

![IR Black Theme](https://www.evernote.com/shard/s199/sh/34eda86d-f4b8-418c-86d4-203835e2eeaa/eb918e8c476a97805d75b63909eb1056/res/e38cb799-8312-424d-b2fc-955016331414/_Users_nathansobo_code_atom_src_app_root-view.coffee-20120809-184450.jpg.jpg)

![Cobalt Theme](https://www.evernote.com/shard/s199/sh/24f9bf02-f8d2-4102-90e5-f746788617d8/01e218bbe07ada026d4490287d559cf4/res/dfde9a51-01ff-48f5-9d79-c7de4a27b1e4/_Users_nathansobo_code_atom_src_app_root-view.coffee-1-1-20120809-184558.jpg.jpg)
# Motivation

When we added support for automatic insertion of paired characters, we only wanted to perform auto-insertion in certain syntactic scopes. For example, we didn't want to insert a matching single quote if we were already inside a string, since in a string a single quote is more likely an apostrophe. 

Previously, we were relying on the tokenizer from the Ace editor to do all of our syntax highlighting, but we didn't want to start building editor features like scope-aware character insertion based on Ace's grammar and scopes. They just didn‚Äôt seem well-designed and ubiquitous enough to really serve as the foundation for other serious features.

We‚Äôd been thinking about supporting TextMate for a while, but it just seemed like a lot to bite off when Ace already had a tokenizer we could use. But now the time felt right: TextMate feels like a better solution in the long term based on its well-designed vocabulary of scopes and vast array of language grammars available. There are also a ton of TextMate themes out there that use these same scopes as the basis of their highlighting. SublimeText 2 also uses TextMate language bundles. All in all, supporting TextMate bundles allows us to tap into a vibrant, well-designed ecosystem for language support. If we proceed to develop more sophisticated syntax-awareness, the coherent vocabulary of syntactic scopes could be a viable foundation.
# Implementation Details

So, with this pull request, we say goodbye to Ace. We‚Äôre not sad about it. Now we have 100% ownership of all of our critical code, and no longer have areas that feel like an Atom-Ace-Frankenstein. Tokenization is now handled completely by our own code, using TextMate language property lists for its rules. Because TextMate grammars rely on special features of the Oniguruma regular expression engine (also used by Ruby 1.9), we needed to add a native extension that gave us access to `OnigRegExp` objects. Our Oniguruma regexes are a bit slower than we‚Äôd like, despite extensive profiling and optimization. A newer version of CEF allows us to allocate JavaScript arrays with a non-zero initial size, which should help a bit more. But we‚Äôre pretty sure we‚Äôre going to need to handle tokenization asynchronously due to the slowness of our regexes. This is something we needed to do anyway to load extremely large files quickly, even with our previous tokenizer based on the faster stock regex engine.

We‚Äôre also parsing TextMate themes and converting them to CSS, with TextMate‚Äôs CSS-like scope selectors making this a natural process. One difference: TextMate supports dotted scope selectors and matches on prefixes. For example, a scope of `variable.assignment.coffee` in the grammar can match the selector of `variable` in a theme. Our solution is to expand out every potential prefix when rendering elements. So the span representing the variable assignment token would have `variable`, `variable-assignment`, and `variable-assignment-coffee` as classes. That way any level of specificity in the translated theme stylesheets can match it.
# Anybody There?

This is more than I‚Äôve ever written for a pull request. If you read this far, could you please leave a comment saying so? I only want to write this much if people are actually reading it.
",4039,False,en,39
31,105,0,0,Internals,nathansobo,2012-07-25T20:32:35Z,4394,474,62,0,"This is the initial implementation of search in project. It integrates with the same command-oriented interface that we use to search a single document. In the _Sam command language_, `X` is composed with other commands to run a search across multiple files, like this:

```
X/.*\.c/ /void/  # find all occurrences of 'void' in files with a .c extension
X s/vim/atom # substitute vim with atom in all files
```

`X` is the analog of `x`, which loops over matches in a single file. `X` loops over files in the project.

We've implemented only an extremely small subset of this so far: `Xx`. This composes scanning the file system with selecting all matches in a file. Whenever we detect a multi-file operation, we automatically display the results of the operation in a preview pane above the command panel's mini-editor, like this:

![Screenshot](https://www.evernote.com/shard/s199/sh/73d4510e-f6a2-4013-b354-7d77687a6d1a/da0894a7fbe9aae931b5ba543e4c0b5e/res/1ffc5064-fe6e-4e53-a683-be0c707f15c3/_Users_nathansobo_code_atom_src_app_edit-session.coffee-20120725-142519.jpg.jpg)

Clicking any of these operations will open the associated file and select the match in the active editor. We still need to add features to this menu, which will include a tree-like display based on file's location in the project tree and the ability to include / exclude results once we enable find/replace in addition to just find.

This feature is implemented in terms of a search program written in C called _The Silver Searcher_. We include a compiled version inside the app bundle. We'll have to include alternate version for different platforms when the time comes. This pull request also includes the first API for running a child process, which we had to use to run the search program.
",1773,True,en,1
30,14,0,0,Internals,probablycorey,2012-07-06T19:23:56Z,283,133,17,0,"Undoing a snippet expansion was leaving stale tab stops in the edit session, which occasionally caused artifacts when pressing `tab` after the undo. We realized that the undo manager potentially needed to undo/redo more than just changes to the buffer, but also state associated with those changes. In this case, when you remove the text inserted by the snippet, you also need to destroy the snippet's extra state.

This led to an overhaul of the UndoManager class. Previously, it was tightly coupled to Buffer, observing its changes. Now UndoManager takes generic operation objects, which have optional `do`, `undo`, and `redo` methods. The `do` and `redo` methods are similar, except `redo` is only triggered when redo-ing, whereas do is triggered on the initial push to the undo manager as well.

We used this new generic facility to manage selection state as well. Previously, each ""transaction"" object in the undo manager was associated with an array of ranges that were selected before / after the transaction. Now, `EditSession` has a `transact` method that pushes operations before / after the rest of the transaction to manage selection state on undo / redo.

One further detail is that the undo and redo methods take an optional `editSession` argument. This can be used to contextualize _where_ the undo/redo is being performed. This is necessary, for example, when we undo a change to the same buffer in another editor. We don't want to restore the selection in the other editor, but in the current editor.
",1518,True,en,0
29,6,0,0,Internals,nathansobo,2012-06-29T16:15:13Z,457,213,12,0,"One cool thing... when the buffer you select is not open in the current editor, this automatically switches to an editor that _does_ have the buffer and switches to the buffer there. I think this helps you keep buffers organized. You can put all the specs on the right pane, for instance, but still quickly jump to an open spec from any pane without opening it there. It eliminates having to switch first to the desired pane before opening the desired buffer. Now, you only have to decide which pane to put a buffer in when you open it, and then quick-find to switch to it there in the future.

To implement this, I added an option to RootView.open called 'allowActiveEditorChange'. If this is true (defaults to false), the call to open may switch to another editor to recycle an existing edit session for the given path. It will always try to recycle edit sessions on the current active editor.
",896,True,en,0
24,9,0,0,Internals,probablycorey,2012-06-20T22:51:47Z,219,212,15,0,"I moved all settings (tabText, softWrap, autoIndent...) to the Project class. I think most settings will be set on a per-project basis, but you can still override project settings by directly changing properties on an edit session.

I also changed Project.open to return an EditSession instead of a Buffer. Because Project.open is the only way a EditSession should be created in Atom, a project now has access to all edit sessions and buffers open in the window.

I still need to do a run through of the specs again and make sure have good coverage.
",550,True,en,0
23,8,0,0,Internals,nathansobo,2012-06-19T02:59:17Z,225,95,6,0,"Here we add the `ctrl-w w` binding to switch between split panes. Basically if no binding explicitly matches a keystroke, the keymap looks for partial prefix matches. If there are prefix matches, it enqueues the keystroke, then appends the next keystroke on the next key event.

Pane switching is supported by RootView. It queries all panes, then finds which pane currently has focus and length-modulo-increments its index to determine the next pane to focus. This will work with split panes containing editors, or any other view that can accept focus.
",553,True,en,0
22,3,1,0,Internals,probablycorey,2012-06-14T21:07:31Z,38,8,7,0,"Searching text using the command panel expands folds. Previously, when the found text was inside of a fold you couldn't really do much with it, because it was hidden. Now the fold auto-expands so you can see what you found.
",224,True,en,0
21,10,0,0,Internals,nathansobo,2012-06-14T01:57:57Z,344,400,18,0,"Previously, we interacted with Ace in a few different classes. One place was in our `Selection` class (this was the most egregious, because it's mixing Ace interaction with our own implementation code). Other places were in classes dedicated to language-specific features, like the `FoldSuggester`, `LineCommenter`, and `Highlighter`. This branch unifies all interaction with Ace behind a single `LanguageMode` class, and also unifies all the adaptor code into `AceAdaptor`. I think it's a good practice to keep the surface area with Ace minimal and contained.
",561,True,en,0
20,10,0,0,Internals,probablycorey,2012-06-12T21:14:25Z,138,20,10,0,"### We don't want Atom to lose changes, obvs.

This code keeps track of a buffer's modification state. If you try and close an edit session and the buffer has modifications, it prompts you to save. If you try to reload Atom, and a modified buffer exists, it gives you the opportunity to cancel.
",295,True,en,0
18,27,0,0,Internals,nathansobo,2012-06-11T16:24:06Z,1009,807,18,0,"Before this refactoring, all the logic associated with cursors and selections lived in the view. But as those views have become quite complex, it's clear that these concepts warrant their own model objects. EditSession is now the model object that represents the state of an editor's selection, cursors, screen lines, folds, etc.
",330,True,en,0
17,85,5,0,Internals,kevinsawicki,2012-08-01T19:46:25Z,1649,0,19,53,"gedit is dead to me.

![atom on linux](http://img.skitch.com/20120616-d13edhkb3khu45hxwq71bs1uy9.png)
",102,True,en,0
16,2,0,0,Internals,kevinsawicki,2012-06-29T17:04:48Z,18,7,3,21,"I had previously clicked on this area a couple times now expecting the same behavior as the
tree view meaning the file would open when selected.
",145,False,en,0
15,2,0,0,Internals,kevinsawicki,2012-06-11T21:49:52Z,2,0,1,3,"I don't want to live in a world where atom doesn't support Java & XML.
",71,True,en,0
12,10,0,0,Internals,nathansobo,2012-06-04T18:09:52Z,118,10,12,2,"Meta-/ now toggles commenting of selected lines. Again, it's based on Ace's language modes, with an adaptor to insulate their assumptions about our code.

One minor issue that I'm not going to address for now: If a selection starts at the beginning of a line, the comment characters don't end up getting included inside the selection. Instead they push it over. I think this isn't the end of the world. We can come back to it.
",427,True,en,0
9,7,0,0,Internals,probablycorey,2012-05-31T23:08:02Z,146,52,12,1,"Taking a page from .coms `shift-?` cheatsheet, Atom uses `ctrl-shift-?` to display all keybindings for the focused element. This is handy because you only see the keybindings that are available **right now** for a specific element. Menu bars are typically used for this, but they use the mouse, and I don't like using the mouse. 

Things left to do.
- Make it pretty
- Ignore keybindings that elements aren't listening for
- Link the key commands up to some documentation
",472,True,en,0
8,2,1,0,Internals,nathansobo,2012-05-30T17:19:19Z,5,3,2,0,"This makes a couple simple adjustments to improve scroll performance. Disabling inset box shadows on frames cuts repaints time by 30-40%, and caching cursor visibility state avoids an extra DOM hit. More avoidance of DOM hits could be possible by caching the height / width and scroll position of the scrollView, but I'm concerned that we'll have trouble keeping the cached value in sync.
",389,True,en,0
7,11,0,0,Internals,nathansobo,2012-05-29T22:05:44Z,180,153,2,3,"This isn't finished yet, but getting closer. The idea is to render more lines than we need on the dom so we don't have to manipulate the dom on every scroll.
",158,True,en,0
6,5,6,0,Internals,probablycorey,2012-05-25T20:12:04Z,28,10,8,1,"This converts our previous free-form folds to line-wise folds. Before, arbitrary regions could be folded into a single token that could be anywhere in the buffer. But this made it possible for multiple folds to be on one screen line and had evil interactions with line wrapping. Instead of battling corner cases to death, we've decided to simplify it. You can only fold entire buffer lines now. It's actually easier to see where your folds are, because we have a more obvious UI treatment.
### TODO
- When Input events occur on a folded line they cause the fold to be destroyed.
- When the cursor is on a fold line, the fold line should be highlighted
### Pictures!

_Unfolded_
![](https://img.skitch.com/20120524-mjj58g999dwhg1j7bgfn2a9fby.jpg)

_Folded_
<img src=""https://img.skitch.com/20120524-kxtrwt1tkahnjkyip8ikiw7b92.jpg"" alt=""/Volumes/github/code/Atom/src/app/editor.coffee"" />
",887,False,en,0
4,1,1,0,Externals,aroben,2012-03-06T21:42:10Z,1,1,1,0,"Presumably this also indicated infinite recursion, but I don't believe Atom is
ever actually deallocated.
",106,False,en,0
3,48,1,0,Internals,probablycorey,2012-03-02T00:26:04Z,33928,327190,2653,0,"Chromium has much better developer tools (native stack traces, function names in profiler.) It also has the ability to share closures across JavaScripts execution contexts enabling a single top-level application object.
",220,True,en,0
1,3,0,0,Internals,josh,2012-01-23T17:33:21Z,22,5,4,1,"Just wanted to see how this worked.
",36,True,en,0
