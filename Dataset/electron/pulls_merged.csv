pull_request,number_of_commits,number_of_comments,number_of_reviews,user_type,user_login,merged_at,number_of_additions,number_of_deletions,number_of_files_changed,number_of_days,message,number_of_characters,second_line_is_blank,language,number_of_test_files
11621,1,0,0,Internals,jkleinsc,2018-01-14T04:02:10Z,0,8,1,2,"It appears that the arm build failing with a core dump is a false positive.  Testing the latest arm build from master on a raspberry pi 2, it does not core dump, so I am removing that check from the arm tests.",209,False,en,0
11597,1,0,0,Internals,zcbenz,2018-01-08T12:26:19Z,1,1,1,0,"Backports https://github.com/electron/electron/pull/11589 to 1.8.x.

Refs https://github.com/electron/libchromiumcontent/pull/431.",132,True,en,0
11589,1,1,0,Internals,zcbenz,2018-01-08T07:15:29Z,1,1,1,0,"Refs https://github.com/electron/libchromiumcontent/pull/430.
Close https://github.com/electron/electron/issues/11429.",119,False,en,0
11584,4,0,5,Externals,TiagoDanin,2018-01-12T15:24:48Z,91,93,28,5,"# Summary
- Using HTTPS if available
- Replaced offline URLs
- Replace `electron.atom.io` >> `electronjs.org`
- Fix paths
- Removed double spaces
-----

# ~~WIP~~
I can't get an equivalent reference in:
- https://github.com/TiagoDanin-Forks/electron/blame/df26e51f3decf90d24cccea6ab1f8af19949c707/docs/development/upgrading-node.md#L55
- https://github.com/TiagoDanin-Forks/electron/blame/df26e51f3decf90d24cccea6ab1f8af19949c707/docs/api/app.md#L1080
- https://github.com/TiagoDanin-Forks/electron/blame/df26e51f3decf90d24cccea6ab1f8af19949c707/docs/tutorial/accessibility.md#L9
- https://github.com/TiagoDanin-Forks/electron/blame/df26e51f3decf90d24cccea6ab1f8af19949c707/docs/tutorial/accessibility.md#L33

Suggestions?",737,False,en,0
11574,1,1,0,Externals,deepak1556,2018-01-07T07:54:53Z,1,1,1,1,"Pulls in:
- https://github.com/electron/libchromiumcontent/pull/421
- https://github.com/electron/libchromiumcontent/pull/387
- https://github.com/electron/libchromiumcontent/pull/415
- https://github.com/electron/libchromiumcontent/pull/408",245,False,en,0
11557,1,11,1,Externals,josimi,2018-01-11T16:28:54Z,5,3,1,8,"Fixes issue #11556 

Uses 0-padding and a set width 8 characters of ensure that RGBA hexadecimal colors string representations are unambiguous.

e.g. (A: 00, R: 0, G: 0, B: 255) is now unambiguously printed as `0000FF00`, not `FF00`.

Replaces janky string substring and concatenation based ARGB -> RGBA shifting logic with bitwise operations to fix several bugs.

The previous code resulted in colors with low-alpha or R-channel values being printed incorrectly. For example, previously

(A: 0, R: 0, G: 160, B: 0) (ARGB: 0x0000A000) would be rendered as RGBA `00A0` which is not correct. Meanwhile, (A: 0, R: 0, G: 0, B: 0) would not render at all in RGBA leading to an exception. Please review the previous code's use of string operations to understand why.
  ",774,True,en,0
11547,1,7,0,Externals,deepak1556,2018-01-07T12:15:51Z,13,7,6,5,"This fixes a regression where draggable regions stopped working after chromium 61 upgrade, it is now frame based https://github.com/electron/electron/commit/9b29aa897b501386696c8c076c0150cc28f73f27

For more history on the transition https://bugs.chromium.org/p/chromium/issues/detail?id=304341

Also I am working on the remaining ipc transitions as a part of chromium 63 upgrade https://github.com/electron/electron/pull/11459/commits/35c918dc85f029de1fc8f4098eab216ed8bcc6fd",480,True,en,0
11546,10,4,0,Internals,zcbenz,2018-01-02T07:20:59Z,69,80,12,0,"Close https://github.com/electron/electron/issues/9441.

This PR also removes the `closed` event of `Menu`, since the `callback` parameter already covers its use case and the `closed` event is not requested by any user. ",222,True,en,0
11545,1,8,0,Externals,m1guelpf,2018-01-10T17:19:13Z,1,1,1,9,"TO DO:

- [x] Wait to the next year (100% done, depends on timezone)
- [ ] Merge!

:octocat:",97,True,en,0
11538,1,0,0,Externals,TiagoDanin,2018-01-05T16:43:09Z,1,1,1,7,Issue related [electronjs.org/issues/983](https://github.com/electron/electronjs.org/issues/983),96,False,en,0
11532,3,5,0,Externals,sethlu,2018-01-04T17:53:59Z,28,24,4,7,"Migrating MenuItem roles to be in camelCase while keeping backward lowercase compatibility.

Closes #10372
CC: @zeke",119,True,en,0
11527,2,0,0,Internals,zcbenz,2017-12-27T12:45:33Z,15,1,2,0,"This ports https://github.com/electron/electron/pull/11526 to master branch.

Note that the patch on Node is slightly different, I also patched the code in `src/node_http2.cc`.",178,True,en,0
11526,2,0,0,Internals,zcbenz,2017-12-27T12:45:22Z,15,1,2,0,"Node.js added a few new C++ code in the crypto module, which passes some memory allocated with Node's allocator to blink, while blink then would try to free the memory with Chromium's allocator.

This is fixed by patching Node's code to use Chromium's allocator.

The patch on Node can be found at https://github.com/electron/node/commit/b6a9b918264d3e1df491cf0e2d32a1ed9686ec3f.

Close https://github.com/electron/electron/issues/11457.",443,True,en,0
11511,1,2,0,Externals,HayateLaTech,2017-12-22T15:05:38Z,1,1,1,0,fixed typo,10,False,en,0
11510,2,1,0,Internals,zcbenz,2017-12-22T14:40:19Z,22,18,7,0,"The default V8 platform of gin relies on Chromium's message loop, which has not been initialized when Node.js is loaded.

This PR should be able to fix the startup hang on Windows x64.

/cc @alexeykuzmin The commits are picked up from the Chrome62 branch and will cause conflicts.",284,True,en,0
11507,10,2,0,Internals,codebytere,2018-01-06T15:58:25Z,133,98,44,15,"üôÖ  do not merge üôÖ 

/cc @alexeykuzmin 
  ",50,True,pl,0
11504,1,2,0,Externals,kylecorry31,2017-12-22T04:57:55Z,1,1,1,0,"Similar to this PR: https://github.com/electron/electron/pull/10355 , Pop!_OS suffers from the same problem. Using Ubuntu AppIndicator will not show the icon currently unless the XDG_CURRENT_DESKTOP variable is modified. This commit will add support for pop so that this workaround is not needed. 

Ref: https://github.com/pop-os/pop/issues/84",345,True,en,0
11499,1,1,0,Externals,deepak1556,2018-01-02T07:21:48Z,47,17,2,11,"Backports https://github.com/electron/electron/pull/11385

Refs https://github.com/electron/electron/issues/11376

I skipped some of the tests from the original PR that would default to the sync menu in this branch.",219,True,en,0
11495,2,1,0,Internals,zcbenz,2017-12-21T07:59:47Z,29,8,4,0,"The close callback passed to MenuRunner should only do cleanup job, e.g. erase the runner from map. While the ClosePopupAt API should only cancel the menu, and let the close callback do cleanup job. Merging the two jobs together would crash under edge cases.

This PR also fixes the problem that closing a popup menu without focused window does not work.

This should fix the Windows CI failure.",399,True,en,0
11493,1,1,0,Internals,zcbenz,2017-12-21T02:52:54Z,1,1,1,0,Refs https://github.com/electron/libchromiumcontent/pull/420.,61,False,en,0
11489,1,3,0,Externals,deepak1556,2017-12-20T22:12:27Z,32,2,1,0,"Backports https://github.com/electron/electron/pull/11238

Refs https://github.com/electron/electron/issues/11147",115,True,en,0
11487,1,0,6,Internals,jkleinsc,2018-01-08T16:01:56Z,206,2,6,18,"This PR adds testing for our arm, arm64 and ia32 linux builds on CircleCI.

For ia32, we can simply run the tests we run for x64 because a 32 bit executable can run in the 64 bit VM.

For arm and arm64, we need to use qemu to emulate those architectures.  We are doing so by building custom docker images on top of the [multiarch/debian-debootstrap](https://github.com/multiarch/debian-debootstrap) docker images.

At this point, we can only run the executable and verify that the version is correct.  The tests also check to make sure there isn't a core dump when running the executable.  Please note that right now the arm build in master does throw a core dump, so you will see that test failing. ",706,True,en,0
11482,1,1,0,Externals,MarshallOfSound,2017-12-20T16:46:40Z,1,1,1,0,"After figuring this out I found out this code change is already in master so this just needs to go to the 1-8-x branch üëç 

Fixes #11430",140,True,en,0
11481,2,2,4,Externals,teiles,2018-01-06T04:43:27Z,0,2,1,17,"Noticed during failed compiles that the electron.d.ts getBlobData( ) return type `Blob` was not found.  A small oversight in documenting the API docs which are used to generate electron.d.ts.

To play around with this workflow, you can change the API documentation then `npm run create-typescript-definitions`
#",314,True,en,0
11476,1,0,0,Internals,ckerr,2017-12-19T16:52:19Z,8,1,1,0,"Cherry-pick of @catalin's https://github.com/electron/electron/commit/6af18895c31a5eb8aed4e2365b36fffaeb0aa328 for 1-8-x 

cc @alexeykuzmin ",142,True,en,0
11470,2,1,1,Internals,codebytere,2017-12-20T01:08:10Z,3,2,1,0,"Add a few sentences to the beginning of the node upgrade doc to make more clear how the initial branch is made. 

/cc @alexeykuzmin ",134,True,en,0
11467,1,0,0,Externals,leo,2017-12-18T22:17:15Z,3,7,1,0,"This improves the information around what Hazel is and what it's here for. Now that it supports private repositories, I also included that!

Furthermore, I made sure the dashes are all `‚Äî` (em dashes).

**BEFORE**

<img width=""859"" alt=""screen shot 2017-12-18 at 21 19 06"" src=""https://user-images.githubusercontent.com/6170607/34126236-30a5003c-e439-11e7-8090-7daa5626dfec.png"">

**AFTER**


<img width=""846"" alt=""screen shot 2017-12-18 at 21 18 43"" src=""https://user-images.githubusercontent.com/6170607/34126253-38ff31d0-e439-11e7-8ffa-c938a4ddfda1.png"">",570,True,en,0
11466,13,0,0,Internals,ckerr,2017-12-20T16:55:50Z,77,49,1,2,"`scripts/cpplint.py` currently runs on our entire codebase, which is perfect for CI but slow for a human who wants to check a few changes they just made pre-commit. This PR adds a command-line option to run only on changed files, making it faster to use during iterative development.

It also adds a 'verbose' mode to handle for the use case of having perfect files the first time through *cough* such that cpplint returns no output. With verbose mode, you know something did indeed get checked :)

These two new flags are for human use and don't affect CI.

Sample use from command line: `./scripts/cpplint.py -cv`",621,True,en,0
11465,9,6,9,Internals,ckerr,2018-01-04T19:16:07Z,35,4,2,17,"This PR tries to ensure that a Worker's event loop has no pending business before the loop is closed. It does this by
 1. calling `uv_stop()` on the loop
 2. walking the event loop to close() all active handles
 3. calling [`uv_loop_run(UV_RUN_DEFAULT)`](http://docs.libuv.org/en/v1.x/loop.html#c.uv_run) so that pending handles can be disposed of properly

This is related to #11243

In addition, since `uv_loop_new()` and `uv_loop_destroy()` are deprecated API, this patch replaces those with `uv_loop_init()` and `uv_loop_close()`",540,False,en,0
11448,1,2,0,Externals,TheDancingCode,2017-12-15T21:06:38Z,1,1,1,0,"While browsing the docs I git a mixed content warning on https://electronjs.org/docs/tutorial/desktop-environment-integration:

> `Mixed Content: The page at 'https://electronjs.org/docs/tutorial/desktop-environment-integration' was loaded over HTTPS, but requested an insecure image 'http://i.msdn.microsoft.com/dynimg/IC420539.png'. This content should also be served over HTTPS.`

I replaced the insecure request with a secure one.",438,True,en,0
11431,5,3,0,Externals,felixrieseberg,2017-12-19T15:06:13Z,75,5,6,5,"We at Slack were about to switch to Electron's very own notifications for macOS, but we're seeing some trouble with notifications just silently not showing up. Debugging this is currently very difficult - we don't actually know where exactly things are going wrong ‚Äì¬†and without attaching a debugger on our customer's machines, it might continue to be difficult.

This PR adds logging statements to Electron's native notifications for macOS and Windows 10. It doesn't change any logic and _only_ starts logging if the environment variable `ELECTRON_DEBUG_NOTIFICATIONS` is set, together with the already existing `--enable-logging` parameter.

Output looks roughly like this:

```
[24035:1213/163133.070393:VERBOSE1:CONSOLE(8192)] ""Main._createAppUI: 70.869873046875ms"", source: chrome-devtools://devtools/bundled/inspector.js (8192)
[24035:1213/163133.372009:VERBOSE1:CONSOLE(8192)] ""Main._showAppUI: 83.883056640625ms"", source: chrome-devtools://devtools/bundled/inspector.js (8192)
[24035:1213/163133.380724:VERBOSE1:CONSOLE(8192)] ""Main._initializeTarget: 13.277099609375ms"", source: chrome-devtools://devtools/bundled/inspector.js (8192)
[24035:1213/163136.552704:INFO:cocoa_notification.mm(41)] Notification created (ElectronNotification1)
[24035:1213/163136.659964:INFO:cocoa_notification.mm(114)] Notification displayed (ElectronNotification1)
[24035:1213/163149.003999:INFO:cocoa_notification.mm(41)] Notification created (ElectronNotification2)
[24035:1213/163149.107720:INFO:cocoa_notification.mm(114)] Notification displayed (ElectronNotification2)
[24035:1213/163152.011869:INFO:notification_center_delegate.mm(33)] Notification activated (ElectronNotification2)
[24035:1213/163152.012128:INFO:cocoa_notification.mm(114)] Notification replied to (ElectronNotification2)
```",1805,True,en,0
11428,1,6,0,Externals,TechnicalSoup,2018-01-05T16:42:10Z,2,2,1,22,"Explicitly list the possible string return values for the updated and done events so that the typescript declaration file can model them more accurately. At present they are represented as a string type.

Fixes : https://github.com/electron/electron-typescript-definitions/issues/71",284,True,en,0
11427,2,1,0,Internals,jkleinsc,2017-12-18T18:20:32Z,1190,117,9,5,"1. Update libcc to latest from electron-1-7-x
2. Add release scripts to 1-7-x branch.",86,False,en,0
11426,1,2,0,Externals,mikoto2000,2017-12-13T15:21:42Z,1,1,1,0,"""Electron versioning""'s link is broken.",39,False,en,0
11422,4,2,0,Internals,codebytere,2017-12-13T21:32:01Z,2,2,2,0,"This PR upgrades submodule references for Node to v.8.9.3.

Should NOT be merged until https://github.com/electron/libchromiumcontent/pull/416 is merged. 

/cc @alexeykuzmin ",178,True,en,0
11421,1,2,0,Externals,lurch,2017-12-13T03:36:36Z,3,3,1,0,,0,False,en,0
11420,3,11,0,Externals,joeydlee95,2018-01-05T16:39:34Z,114,2,2,23,"#11368 

Checks all relative links from every .md file in to see if it points to an existing file or existing file and header location. Prints the file name of where the links are broken and the tabbed output are the broken links within that file.

Does not check for valid remote links. 

",296,True,en,0
11419,12,4,3,Externals,felixrieseberg,2017-12-13T02:56:41Z,69,13,2,0,"This is exactly the same as #11385, but rebased on top of master. It didn't hang for me, so I'm reopening this PR to see how CI behaves now.",140,False,en,0
11418,4,0,0,Internals,codebytere,2017-12-13T21:48:21Z,72,0,5,1,"Fixed hanging issues in previous PR.

/cc @ckerr @alexeykuzmin ",65,True,en,0
11415,1,1,0,Externals,alexeykuzmin,2017-12-12T14:56:12Z,12,76,2,0,"Reverts electron/electron#11385

cc @felixrieseberg, @ckerr ",62,True,de,0
11414,1,1,0,Externals,alexeykuzmin,2017-12-12T14:46:48Z,0,63,5,0,"Reverts electron/electron#11395

cc @codebytere, @ckerr ",58,True,ca,0
11409,6,5,3,Externals,felixrieseberg,2017-12-28T11:18:34Z,101,52,4,16,"This PR allows you to run `npm run test -match=menu`, which will then only run spec modules matching `menu`. This is crazy useful for anyone who's working on tests that would otherwise be at the very end of the testing cycle.

Also: I've used the opportunity to upgrade the JavaScript in `index.html` to ES6 and StandardJS, in line with our coding standards.",360,True,en,1
11406,2,2,0,Externals,xxczaki,2017-12-11T23:48:34Z,1,0,1,0,Available here: electronpl.github.io,36,False,en,0
11396,44,4,13,Externals,deepak1556,2018-01-04T12:19:12Z,426,222,54,24,"ToDo:
~~Refactor JsAsker class to avoid dereferencing weakPtr on a sequence it wasn't created on https://github.com/electron/electron/blob/master/atom/browser/net/js_asker.h#L83~~

~~Fix and enable stream protocol specs after https://github.com/electron/electron/pull/11357~~

~~Remove ThreadRestrictions::ScopedAllowIO usage where possible. Currently we are doing some blocking IO tasks on UI thread~~

Debug Build:
- [x] MacOS
- [x] Linux
- [x] Windows
  ",468,False,en,0
11395,12,1,33,Internals,codebytere,2017-12-11T23:45:33Z,63,0,5,1,"Implements feature requested in https://github.com/electron/electron/issues/11305.

To-Do:
- [x] Add test for `systemPreferences.registerDefaults()` success
- [x] Add test for `systemPreferences.registerDefaults()` failure 
- [x] Update `systemPreferences` docs",266,True,en,0
11385,11,4,14,Externals,felixrieseberg,2017-12-12T00:02:34Z,76,12,2,3,"This PR does three things:

‚Ä¢¬†Calling `menu.popup({})` used to be okay, but broke in the last beta. This fixes that.
‚Ä¢¬†We assigned defaults incorrectly, overriding user input üò± 
‚Ä¢¬†Tests!

Closes https://github.com/electron/electron/issues/11376",262,True,en,0
11380,1,0,0,Externals,cifratila,2017-12-08T16:09:34Z,8,1,1,0,"Security Improvement: Enable Control Flow Guard compile flag on Windows

https://docs.microsoft.com/en-us/cpp/build/reference/guard-enable-control-flow-guard",159,True,en,0
11379,2,0,0,Externals,TiagoDanin,2017-12-08T16:08:44Z,28,40,2,0,,0,False,en,0
11370,2,0,0,Externals,deepak1556,2017-12-07T20:55:33Z,42,30,5,0,"Fixes https://github.com/electron/electron/issues/11319 , https://github.com/electron/electron/issues/11318",107,False,en,0
11367,3,0,0,Internals,zeke,2017-12-06T23:05:01Z,158,162,6,0,This will let us put off the problem of dealing with renames / redirects until another day.,91,False,en,0
11365,1,2,0,Internals,jkleinsc,2017-12-06T21:26:33Z,0,25,1,0,This configuration isn't used anymore - appveyor setup is defined on server,75,False,en,0
11364,2,0,3,Internals,groundwater,2017-12-06T23:00:43Z,2,2,1,0,"I think we're making links relative within the docs, and not directly pointing to the electronjs.org website.",109,False,en,0
11359,1,0,11,Externals,alespergl,2017-12-11T16:18:28Z,55,33,2,5,"The class didn't save the V8 context for the spell checking JS function. When
it later tried to call the JS function and there was no active context, V8
crashed.

I also optimized the spell checking loop by introducing `SpellCheckScope` and
reusing the V8 handles throughout the whole loop.",295,False,en,0
11356,2,0,0,Internals,simurai,2017-12-07T21:53:45Z,0,0,3,1,"This PR replaces the app icons with a new version:

Before | After
--- | ---
![128](https://user-images.githubusercontent.com/378023/33656797-87390d90-daba-11e7-8f90-05ba479b3931.png) | ![128-1](https://user-images.githubusercontent.com/378023/33656802-8ad82076-daba-11e7-9f8a-adc0ead8b5a9.png)


### Benefits

Matches Electron's avatar, website etc.


### Applicable issues

Closes https://github.com/electron/design/issues/9
",442,True,en,0
11355,1,2,0,Internals,zcbenz,2017-12-06T10:31:04Z,1,1,1,0,The bump of docs linter module is breaking our CI,49,False,en,0
11342,1,3,0,Internals,jkleinsc,2017-12-06T06:02:28Z,15,9,3,0,This is a followup to #11306 which enables testing of the powerMonitor events on CircleCI.,90,False,en,0
11330,1,0,0,Internals,jkleinsc,2017-12-04T19:49:32Z,12,8,1,0,Added timeout to Jenkins CI builds to abort if they take longer than 1 hour.,76,False,en,0
11329,10,4,0,Externals,felixrieseberg,2017-12-06T23:31:51Z,107,6,3,2,"As it turns out, when I first built `removeAsDefaultProtocolClient`, I didn't _really_ cleanup after ourselves. This PR fixes that, ensuring that calling those two commands doesn't leave garbage in the registry:

:one: `setAsDefaultProtocolClient('foo')`
:two: `removeAsDefaultProtocolClient('foo')`

Thanks to @juturu for noticing.

Closes https://github.com/electron/electron/issues/9944

",400,True,en,0
11327,1,0,0,Externals,MarshallOfSound,2017-12-04T16:43:50Z,1,1,1,0,Cherry picks #10540 to unblock the `1-7-x` branch from linting üëç ,68,False,en,0
11321,2,3,0,Internals,codebytere,2017-12-07T19:49:19Z,7,11,2,5,"This PR adds back the deprecation warning removed in https://github.com/electron/electron/pull/11013. 

/cc @alexeykuzmin ",124,True,en,0
11317,1,0,0,Externals,alespergl,2017-12-02T14:26:13Z,0,0,1,0,"I cut the video to 3 seconds and removed the audio track, which makes the test
finish a lot sooner. Also the asar file is 160 kB instead of 1 MB.",146,False,en,0
11316,2,1,0,Externals,felixrieseberg,2017-12-06T05:50:13Z,13,17,1,4,"We've received reports that _some_  users see a `Update.exe` window flash on screen whenever you run `autoUpdater` operations. That makes sense: Node allows us to explicitly ask for the window to be hidden, which we didn't do.

Also, I sprinkled some ES6 across the file - we don't need all that `var` anymore üòâ 

Closes https://github.com/electron/electron/issues/11269",377,True,en,0
11315,1,2,0,Externals,insideGen,2017-12-02T14:27:43Z,1,1,1,0,,0,False,en,0
11314,1,0,0,Internals,zeke,2017-12-02T01:03:17Z,1,1,1,0,"The electron website gets its docs from the [electron-i18n](https://github.com/electron/electron-i18n) repo, which concerns itself with text, not assets like image files. Rather than trying to preserve the image file and its relative URL across this transition, I think it would be easier to just use URL references that are guaranteed to work in any context.",359,False,en,0
11312,3,0,0,Internals,codebytere,2017-12-01T22:03:52Z,271,237,3,0,"Split `api-ipc-spec.js` into three files:
1. `api-ipc-renderer-spec.js`
2. `api-ipc-main-spec.js`
3. `api-remote-spec.js`

This is being done for clarity, to reduce specs with huge numbers of tests, and to make it easier in the future to sort tests by categorization into `renderer`, `browser`, and `common`.",313,False,en,0
11311,1,0,0,Internals,zeke,2017-12-03T14:34:08Z,2,2,2,1,Reported by a translator in Crowdin: https://crowdin.com/translate/electron/150/en-uk#11450,91,False,en,0
11306,2,16,13,Externals,tarruda,2017-12-05T15:17:00Z,300,2,9,4,"Since this is very platform-specific, I see no way to test this other than manually (which I did).",98,False,en,1
11302,1,2,0,Externals,deepak1556,2017-12-01T10:57:25Z,1,1,1,0,Fixes https://github.com/electron/electron/issues/11289,55,False,en,0
11301,1,2,0,Externals,wlbentley,2017-12-01T16:48:47Z,2,2,1,0,,0,False,en,0
11300,8,4,1,Internals,zcbenz,2017-12-05T01:35:50Z,199,47,10,3,"Close #3177.

### `contents.setDevToolsWebContents(devToolsWebContents)`

* `devToolsWebContents` WebContents

Uses the `devToolsWebContents` as the target `WebContents` to show devtools.

The `devToolsWebContents` must not have done any navigation, and it should not
be used for other purposes after the call.

By default Electron manages the devtools by creating an internal `WebContents`
with native view, which developers have very limited control of. With the
`setDevToolsWebContents` method, developers can use any `WebContents` to show
the devtools in it, including `BrowserWindow`, `BrowserView` and `<webview>`
tag.

An example of showing devtools in a `<webview>` tag:

```html
<html>
<head>
  <style type=""text/css"">
    * { margin: 0; }
    #browser { height: 70%; }
    #devtools { height: 30%; }
  </style>
</head>
<body>
  <webview id=""browser"" src=""https://github.com""></webview>
  <webview id=""devtools""></webview>
  <script>
    const browserView = document.getElementById('browser')
    const devtoolsView = document.getElementById('devtools')
    browserView.addEventListener('dom-ready', () => {
      const browser = browserView.getWebContents()
      browser.setDevToolsWebContents(devtoolsView.getWebContents())
      browser.openDevTools()
    })
  </script>
</body>
</html>
```

An example of showing devtools in a `BrowserWindow`:

```js
const {app, BrowserWindow} = require('electron')

let win = null
let devtools = null

app.once('ready', () => {
  win = new BrowserWindow()
  win.loadURL('https://github.com')
  win.show()
  devtools = new BrowserWindow({show: false})
  devtools.show()
  win.webContents.setDevToolsWebContents(devtools.webContents)
  win.webContents.openDevTools({mode: 'detach'})
})
```

![screen shot 2017-12-01 at 11 59 10](https://user-images.githubusercontent.com/639601/33466097-21e7fd72-d68f-11e7-9cab-8b6eed624f1d.png)
",1940,True,en,0
11297,3,1,7,Internals,jkleinsc,2017-12-04T16:56:54Z,9,1114,9,3,"Since we are no longer using Travis for CI, this PR removes unneeded references to Travis.

Resolves #11288 ",110,True,en,0
11292,17,19,7,Externals,AdrienFery,2018-01-10T10:42:04Z,701,0,15,40,"In order to release a commercial application on the Mac Apple Store, it must use in-app purchase (see [App Store Guidelines](https://developer.apple.com/app-store/review/guidelines/#in-app-purchase)). It is why I have added the in-app purchase feature for MacOS into Electron. I have tested the build and it works well but I didn't implement automatic tests.

Let me know if you see some modifications to do.

See [in-app-purchase.md](https://github.com/AdrienFery/electron/blob/in-app-purchase-macos/docs/api/in-app-purchase.md) for the module documentation.

<img width=""901"" alt=""screen shot"" src=""https://user-images.githubusercontent.com/8200795/33381878-7dec43d8-d51f-11e7-9d0d-7232c6dc707b.png"">
",710,True,en,0
11291,1,0,0,Internals,zcbenz,2017-11-30T18:43:59Z,1,1,1,0,"The latest version of coffee-script released a few hours ago has some regression causing our test to fail. Did not look into the root cause, but this test is to ensure we don't have a regression, instead of checking the compatibility with coffee-script, so locking the version is fine.

The failing log is https://windows-ci.electronjs.org/project/AppVeyor/electron/build/1.0.1309/job/rtetst3ovldt9286, seems to be a Windows-only thing.

```
not ok 770 modules support third-party module coffee-script can be registered and used to require .coffee files
  AssertionError [ERR_ASSERTION]: Got unwanted exception.
      at innerThrows (assert.js:653:7)
      at Function.doesNotThrow (assert.js:665:3)
      at Context.it (C:\projects\electron\spec\modules-spec.js:61:16)
      at callFn (C:\projects\electron\spec\node_modules\mocha\lib\runnable.js:348:21)
      at Test.Runnable.run (C:\projects\electron\spec\node_modules\mocha\lib\runnable.js:340:7)
      at Runner.runTest (C:\projects\electron\spec\node_modules\mocha\lib\runner.js:443:10)
      at C:\projects\electron\spec\node_modules\mocha\lib\runner.js:549:12
      at next (C:\projects\electron\spec\node_modules\mocha\lib\runner.js:361:14)
      at C:\projects\electron\spec\node_modules\mocha\lib\runner.js:371:7
      at next (C:\projects\electron\spec\node_modules\mocha\lib\runner.js:295:14)
```",1377,True,en,0
11283,1,6,0,Externals,tarruda,2017-12-12T01:49:18Z,7,0,1,12,,0,False,en,0
11282,4,1,0,Externals,Toinane,2017-12-03T15:01:24Z,317,317,39,4,"hey folks, when I translate the documentation, I see a lot of sentences without dots at the end. some double spaces and things like that. A few ""(optional)"" wording was after the ""-"" and others before.
So I've fixed that üëç ",227,False,en,0
11279,1,1,0,Externals,sethlu,2017-12-19T06:28:03Z,2,0,1,20,"Something a little trivial that I realized: It may be better to also update the singleton submenu's title to have the same as that of the replaced submenu.

Following https://github.com/electron/electron/pull/11166, the change introduced here updates the title of the submenu.",278,True,en,0
11272,3,7,3,Externals,matt-way,2018-01-10T04:13:11Z,9,3,1,42,"When the tray icon is destroyed, sometimes a `mouseExited` event is triggered late, causing a crash. This is fixed by explicitly removing the tracking area when removing the tray icon.",184,False,en,0
11271,6,3,0,Externals,deepak1556,2017-12-04T15:33:48Z,27,10,8,6,"This pulls and tests https://github.com/electron/libchromiumcontent/pull/403

Refs https://github.com/electron/libchromiumcontent/issues/359

/cc @alexeykuzmin @alespergl @zcbenz @ckerr ",190,True,en,0
11268,1,6,0,Externals,alespergl,2017-11-27T18:20:45Z,12,7,1,0,Fixing crash introduced by https://github.com/electron/electron/commit/2c063f93ff97cd3478f2020ab343b6249fe12546,111,False,en,0
11264,6,6,9,Externals,brenca,2017-12-20T10:37:45Z,61,5,8,23,"Fixes #10464 

The pepper flash menu seems to send the commands to the plugin when the context menu is closed. Currently, we instantly send the context menu close event when the flash context menu is opened, which causes the menu to not work properly.",253,True,en,0
11257,1,4,0,Externals,alexeykuzmin,2017-11-27T15:41:57Z,0,3,1,2,"All menus have become async after the Chromium 61 upgrade.
Fixes #11242.

@zeke, should I do anything else besides updating that menu.md file?",145,False,en,0
11256,2,3,0,Externals,alexeykuzmin,2017-11-30T18:48:00Z,6,3,1,5,"Fixes #11244.

_The test is simply enabled, is still has to be fixed._
/cc @deepak1556 ",90,True,en,0
11255,3,1,0,Externals,alexeykuzmin,2017-11-30T18:48:11Z,21,7,2,5,"Fixes #11245.

_Tests are simply enabled, they still have to be fixed._",73,True,en,0
11254,1,2,0,Externals,alexeykuzmin,2017-11-30T17:55:50Z,8,16,1,5,"Fixes #11246.

_Tests are simply enabled, they still have to be fixed._
/cc @codebytere ",91,True,en,0
11253,1,3,0,Externals,alexeykuzmin,2017-11-26T07:00:47Z,1,1,1,1,"[upgrading-node.md](https://github.com/electron/electron/blob/master/docs/development/upgrading-node.md) doesn't look good now. It also fails `npm run lint-docs`.

**Now**
<img width=""946"" alt=""screen shot 2017-11-25 at 00 58 25"" src=""https://user-images.githubusercontent.com/607250/33225643-d554f20c-d17b-11e7-9b59-3e0541374d81.png"">

**Should be**
<img width=""944"" alt=""screen shot 2017-11-25 at 13 02 29"" src=""https://user-images.githubusercontent.com/607250/33230299-f5af721a-d1e0-11e7-8e94-b71eb4cc7108.png"">


/cc @codebytere, @ckerr ",550,True,en,0
11250,1,0,0,Internals,codebytere,2017-11-25T05:05:27Z,2,3,1,0,Fixes failing tests resultant of missing code-language flag in `upgrading-node.md`,82,False,en,0
11249,5,1,0,Internals,ckerr,2017-11-27T23:55:13Z,88,60,2,3,,0,False,en,0
11247,3,1,0,Internals,ckerr,2017-11-24T10:38:11Z,74,74,16,0,"Does what it says on the tin.

Not the most complicated patch in the world, more of a since-we're-in-the-neighborhood with all the documentation work and I keep seeing `bash`, I was reminded of [this discussion](https://github.com/electron/electron/pull/11178#issuecomment-345773553) with @zeke, @vanessayuenn  and me on this topic",333,True,en,0
11241,1,0,0,Externals,alexeykuzmin,2017-11-27T08:49:06Z,1,1,1,2,"Use a commit from the libcc's `master`, not from a feature branch.",66,False,en,0
11240,5,0,0,Internals,codebytere,2017-11-24T10:16:18Z,338,171,4,0,"Cherry-pick over from @ckerr's branch https://github.com/electron/electron/pull/11228 that i may or may not have accidentally rebased üôà. 

",144,True,en,0
11238,1,1,5,Externals,deepak1556,2017-12-21T08:00:02Z,32,2,1,27,"Since the spellchecker has been refactored for OOPIF to be frame based instead of view based https://bugs.chromium.org/p/chromium/issues/detail?id=638361 , we need to make sure that its enabled for the sub frames.

Fixes https://github.com/electron/electron/issues/11147",272,True,en,0
11235,8,1,0,Externals,felixrieseberg,2017-11-27T06:42:53Z,105,43,27,3,"We're currently using `standard` v8, but v10 is what's current. Before the changes become too big for us to easily merge them, I upgraded our codebase to v10.

‚ö†Ô∏è Conveniently, this PR doesn't touch any of the files in the Chromium 61 Upgrade PR. They can both be merged on top of each other without any conflicts.

### Non-style changes
`new Buffer()` is deprecated in Node core. I replaced the few use cases with the official Node recommendation (`Buffer.from()` and `Buffer.alloc()`). This should have no impact on the logic, but goes beyond a mere style-change.

### Style changes
The only notable new rule is `standard/no-callback-literal`, which forces us to use callbacks in the style of `callback(new Error('message')` instead of `callback('message')`. That'd be a breaking change - and most of our callbacks don't even have an error argument. That's a bit unfortunate, but without dwelling on this for too long, I disabled this rule where appropriate. If we want to change all our callbacks into one uniform format, we can always do so in Electron v2!

### Errors before this PR

#### Non-spec:

<details>

```
/electron/default_app/main.js:309:5: Unreachable code.
/electron/default_app/main.js:309:5: Unnecessary return statement.
/electron/lib/browser/api/auto-updater/squirrel-update-win.js:31:14: Unexpected literal in error position of callback.
/electron/lib/browser/api/auto-updater/squirrel-update-win.js:71:14: Unexpected literal in error position of callback.
/electron/lib/browser/api/auto-updater/squirrel-update-win.js:96:14: Unexpected literal in error position of callback.
/electron/lib/browser/api/net.js:83:1: Block must not be padded by blank lines.
/electron/lib/browser/api/net.js:105:42: Block must not be padded by blank lines.
/electron/lib/browser/api/net.js:358:1: Block must not be padded by blank lines.
/electron/lib/browser/api/session.js:29:9: Unexpected literal in error position of callback.
/electron/lib/browser/api/web-contents.js:9:1: Expected an assignment or function call and instead saw an expression.
/electron/lib/browser/chrome-extension.js:314:12: Unexpected literal in error position of callback.
/electron/lib/browser/chrome-extension.js:322:14: Unexpected literal in error position of callback.
/electron/lib/common/asar.js:370:9: Unexpected literal in error position of callback.
/electron/lib/common/asar.js:485:42: 'new buffer.Buffer()' was deprecated since v6. Use 'buffer.Buffer.alloc()' or 'buffer.Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/lib/common/asar.js:493:22: 'new buffer.Buffer()' was deprecated since v6. Use 'buffer.Buffer.alloc()' or 'buffer.Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/lib/common/asar.js:522:18: 'new buffer.Buffer()' was deprecated since v6. Use 'buffer.Buffer.alloc()' or 'buffer.Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/lib/common/asar.js:541:22: 'new buffer.Buffer()' was deprecated since v6. Use 'buffer.Buffer.alloc()' or 'buffer.Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/lib/common/asar.js:614:22: 'new buffer.Buffer()' was deprecated since v6. Use 'buffer.Buffer.alloc()' or 'buffer.Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/lib/renderer/chrome-api.js:150:9: Unexpected literal in error position of callback.
/electron/lib/renderer/extensions/storage.js:54:7: Unexpected literal in error position of callback.
/electron/lib/renderer/extensions/storage.js:85:39: Unexpected literal in error position of callback.
/electron/script/ci-release-build.js:34:9: Expected the Promise rejection reason to be an Error.
/electron/script/merge-release.js:34:10: Redundant use of `await` on a return value.
/electron/script/merge-release.js:42:10: Redundant use of `await` on a return value.
/electron/script/merge-release.js:70:10: Redundant use of `await` on a return value.
/electron/script/merge-release.js:77:10: Redundant use of `await` on a return value.
/electron/script/merge-release.js:85:10: Redundant use of `await` on a return value.
/electron/script/release.js:216:10: Redundant use of `await` on a return value.
/electron/script/release.js:251:10: Redundant use of `await` on a return value.
/electron/script/release.js:448:10: Redundant use of `await` on a return value.
```

</details>

#### Spec:

<details>

```
/electron/spec/api-browser-window-spec.js:30:16: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/api-browser-window-spec.js:156:15: Missing space before *.
/electron/spec/api-browser-window-spec.js:273:20: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/api-browser-window-spec.js:1059:9: Unexpected literal in error position of callback.
/electron/spec/api-browser-window-spec.js:3028:7: Unexpected literal in error position of callback.
/electron/spec/api-ipc-spec.js:148:19: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/api-ipc-spec.js:198:9: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-ipc-spec.js:242:19: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/api-native-image-spec.js:112:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:113:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:114:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:115:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:116:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:117:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:118:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:121:9: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:136:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:215:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:250:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:281:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:288:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:295:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:326:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:356:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:367:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:426:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:472:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-native-image-spec.js:507:7: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-net-spec.js:858:13: Unexpected literal in error position of callback.
/electron/spec/api-net-spec.js:862:13: Unexpected literal in error position of callback.
/electron/spec/api-net-spec.js:910:11: Unexpected literal in error position of callback.
/electron/spec/api-net-spec.js:914:11: Unexpected literal in error position of callback.
/electron/spec/api-net-spec.js:1157:9: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-net-spec.js:1190:11: Unexpected literal in error position of callback.
/electron/spec/api-net-spec.js:1194:11: Unexpected literal in error position of callback.
/electron/spec/api-net-spec.js:1226:9: Expected an assignment or function call and instead saw an expression.
/electron/spec/api-protocol-spec.js:31:17: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/api-protocol-spec.js:170:9: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:207:20: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/api-protocol-spec.js:243:9: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:321:46: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:396:48: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:413:46: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:461:48: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:497:46: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:516:46: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:541:46: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:564:9: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:726:9: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:749:9: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:770:55: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/api-protocol-spec.js:855:9: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:858:9: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:920:13: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:1014:11: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:1032:46: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:1043:46: Unexpected literal in error position of callback.
/electron/spec/api-protocol-spec.js:1054:46: Unexpected literal in error position of callback.
/electron/spec/api-session-spec.js:245:24: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/api-session-spec.js:274:21: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/api-session-spec.js:404:7: Unexpected literal in error position of callback.
/electron/spec/api-session-spec.js:500:11: Unexpected literal in error position of callback.
/electron/spec/api-session-spec.js:548:9: Unexpected literal in error position of callback.
/electron/spec/api-session-spec.js:562:11: Unexpected literal in error position of callback.
/electron/spec/api-session-spec.js:575:11: Unexpected literal in error position of callback.
/electron/spec/api-session-spec.js:600:9: Unexpected literal in error position of callback.
/electron/spec/api-session-spec.js:715:13: Unexpected literal in error position of callback.
/electron/spec/api-web-contents-spec.js:357:9: Unexpected literal in error position of callback.
/electron/spec/api-web-contents-spec.js:437:9: Unexpected literal in error position of callback.
/electron/spec/api-web-contents-spec.js:637:15: Missing space before *.
/electron/spec/api-web-frame-spec.js:114:9: Unexpected literal in error position of callback.
/electron/spec/api-web-frame-spec.js:121:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:44:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:62:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:87:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:110:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:124:11: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:126:11: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:149:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:166:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:183:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:226:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:242:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:257:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:273:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:288:9: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:338:11: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:340:11: Unexpected literal in error position of callback.
/electron/spec/api-web-request-spec.js:390:9: Unexpected literal in error position of callback.
/electron/spec/asar-spec.js:18:18: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/asar-spec.js:494:20: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/asar-spec.js:515:24: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/chromium-spec.js:145:9: Unexpected literal in error position of callback.
/electron/spec/chromium-spec.js:454:9: Unexpected literal in error position of callback.
/electron/spec/chromium-spec.js:807:11: Unexpected literal in error position of callback.
/electron/spec/node-spec.js:277:17: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/node-spec.js:285:17: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/node-spec.js:291:20: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/node-spec.js:293:16: 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
/electron/spec/node-spec.js:301:9: Expected an assignment or function call and instead saw an expression.
/electron/spec/node-spec.js:335:9: Expected an assignment or function call and instead saw an expression.
/electron/spec/static/main.js:35:1: Expected an assignment or function call and instead saw an expression.
/electron/spec/static/main.js:38:1: Expected an assignment or function call and instead saw an expression.
/electron/spec/static/main.js:381:5: Unexpected literal in error position of callback.
/electron/spec/webview-spec.js:977:20: Unexpected literal in error position of callback.
/electron/spec/webview-spec.js:981:11: Unexpected literal in error position of callback.
/electron/spec/webview-spec.js:1061:30: Unexpected literal in error position of callback.
/electron/spec/webview-spec.js:1426:9: Expected an assignment or function call and instead saw an expression.
/electron/spec/webview-spec.js:1445:9: Expected an assignment or function call and instead saw an expression.
/electron/spec/webview-spec.js:1615:9: Unexpected literal in error position of callback.
```
</details>",17129,True,en,0
11233,3,11,0,Externals,brenca,2017-12-20T06:35:10Z,18,14,1,26,"- Fixed a crash accidentally introduced during the merging of my latest OSR pr by @zcbenz (the `devtools`'s `web_contents` doesn't have a `WebContentsPreferences` object apparently).
- Fixed a bug where if you closed the `devtools` which was in a detached state (only seen this on 1.8.x), the window's background would be set to white. This might be a bug deeper down in chromium code, I'll try to find out where it was introduced, and send a bug report. In the meantime, I've added a workaround that sets the background of the `RenderWidgetHostView` to the background it believes it has.",589,False,en,0
11231,1,0,0,Externals,Toinane,2017-11-23T13:39:52Z,2,2,1,0,"Change ""Resumes"" to ""Returns""",29,False,en,0
11229,1,0,0,Internals,codebytere,2017-11-23T10:27:57Z,4,8,3,0," Progress on fixing compilation errors when building against the brightray target.

/cc @ckerr @alexeykuzmin @gavignus ",121,True,en,0
11227,1,4,0,Externals,emmkimme,2017-11-28T06:25:35Z,10,1,1,4,"My first MR ;-)

In sandbox mode the preload is setup in each iframe. This is not consistent with other modes.
It impacts the performance and may generate unexpected side effects as well.",190,True,en,0
11225,6,0,0,Externals,felixrieseberg,2017-11-23T08:49:12Z,43,0,4,0,"Users used to throwing around `BrowserWindows` were limited by having less features available on the `BrowserView`. This PR brings them up to par.

- `BrowserView.getAllViews()` and `BrowserView.getFromWebContents()`, both implemented exactly like their BrowserWindow counterparts.
- Docs and tests.

Closes #https://github.com/electron/electron/issues/11132",363,True,en,0
11224,5,0,2,Externals,felixrieseberg,2017-11-23T13:41:37Z,38,1,3,0,"It's currently not clear how one would access the current window from within a `browserView`. This makes that a little bit easier. I put this API onto `BrowserWindow` to mimic the similar `BrowserWindow.fromWebContents`, but we could move the API if people felt strongly that it should live somewhere else.

‚Ä¢¬†`BrowserWindow.fromBrowserView(browserView)` API
‚Ä¢ Tests
‚Ä¢¬† Docs",386,True,en,0
11218,1,2,0,Externals,him2him2,2017-11-22T17:11:01Z,8,7,1,0,"Added Missing code-language flags
",35,True,en,0
11217,1,4,0,Externals,him2him2,2017-11-23T09:08:44Z,5,5,1,0,"Updating HTTP protocol to HTTPS on applicable URLS
",52,True,en,0
11208,16,25,0,Internals,zcbenz,2017-11-24T01:54:20Z,207,46,17,1,"To build:

```
env LIBCHROMIUMCONTENT_MIRROR=https://s3.amazonaws.com/gh-contractor-zcbenz/libchromiumcontent ./script/bootstrap.py -v -d --target_arch mips64el
./script/build.py -c D
```",192,True,de,0
11207,5,2,0,Externals,kstar0714,2017-11-23T09:17:12Z,6,6,2,1,http -> https,13,False,en,0
11204,1,3,0,Externals,andykog,2017-11-21T22:11:49Z,1,0,1,0,"The library: https://mobx.js.org/
Extension's repo: https://github.com/andykog/mobx-devtools

![screen shot 2017-11-21 at 21 26 56](https://user-images.githubusercontent.com/6760207/33092951-53e0aaaa-cf04-11e7-90aa-4861bee5288a.png)
",237,False,en,0
11203,1,0,0,Internals,zeke,2017-11-22T05:10:47Z,14,1,1,0,Just copying some wisdom from @deepak1556 and putting it into the docs. :),74,False,en,0
11199,3,2,0,Externals,duswlsgur,2017-11-21T13:01:36Z,2,2,1,0,"electron/electron/blob/master/README.md
",41,True,en,0
11191,3,0,0,Internals,codebytere,2017-11-22T07:16:37Z,107,45,1,1,"This guide proposes an update to the current set of steps for updating Chromium within Electron. 
Please feel free to leave feedback and propose more changes!

/cc @cifratila @alexeykuzmin @ckerr @alespergl ",210,False,en,0
11187,4,0,0,Externals,felixrieseberg,2017-11-20T19:38:57Z,5,7,2,0,"Node has [decided to deprecate all `util.is*` methods in v5, actually shipped the deprecation in v6](https://nodejs.org/api/util.html#util_deprecated_apis), and now recommends that users either use userland modules or build their own implementations.

I only found four references and decided that we don't need another module for four calls, especially if we're only checking for `string` and `object`. The replacements are identical with what Node core used to do. `isObject` technically also checks if the target is `!== null`, but we make that check in both cases higher up.

Also deprecated: `util._extend`, which we were never meant to use anyway. It's been replaced in core by `Object.assign`.

Props to @ckerr for being on the ball here.",751,True,en,0
11186,1,5,0,Internals,zeke,2017-12-01T16:47:30Z,2,2,1,11,"This PR bumps `electron-docs-linter` and `electron-typescript-definitions` to latest versions.

cc @marshallofsound @felixrieseberg",133,True,en,0
11185,1,1,0,Externals,felixrieseberg,2017-11-20T16:57:31Z,4,0,1,0,"Node documents `options` in `fs.readFile`/`fs.writeFile` operations as optional. We have done so for almost all operations, but made a mistake in `fs.readFile` - if you don't pass options, you'll get a `TypeError` that shouldn't be there.

This tiny PR fixes that.

Closes https://github.com/electron/electron/issues/11182",326,True,en,0
11184,1,1,0,Externals,felixrieseberg,2017-11-20T16:51:10Z,1,0,1,0,"@MarshallOfSound did a thing and is just sending around DMs, but I think this deserves to be in the official docs üè∑ ",119,False,en,0
11178,3,2,3,Internals,vanessayuenn,2017-11-21T12:38:47Z,91,69,20,1,"This PR adds two rules to enforce proper code block styles (i.e. fenced with ```, and have a language specified per block), and fixes the resulting lint errors in our current docs. This will resolve electron/electronjs.org#868 where improper code blocks are not being styled on the website. ",291,False,en,1
11176,1,0,0,Externals,mgc,2017-11-20T11:15:03Z,11,6,1,0,"#11134 seems to be a very delicate race condition. No luck making an isolated demo, but here is a working theory:

- `URLRequest` hits a proxy while running on an IO thread
- `LoginHandler` is constructed, captures `render_process_host_id_`/`render_frame_id_` [at that moment, then posts a task to the UI thread](https://github.com/electron/electron/blob/master/atom/browser/login_handler.cc#L40)
- The original process or render frame dies somehow. Maybe the Window is closed, or navigation happens. *This is the race*
- The `RequestLogin` task finally executes on the UI thread
- [`App::OnLogin`](https://github.com/electron/electron/blob/master/atom/browser/api/atom_api_app.cc#L638) calls [`LoginHandler::GetWebContents()`](https://github.com/electron/electron/blob/master/atom/browser/login_handler.cc#L64) which returns null, either because `render_process_host_id_`/`render_frame_id_` are no longer valid, or because `RenderFrameHost` can't be mapped to a `WebContents`
- `App::OnLogin` tries to [construct a wrapper](https://github.com/electron/electron/blob/4d364fa27a6fa5803a25a343e40a2fe68e27b27f/atom/browser/api/atom_api_web_contents.cc#L1968) around the null `web_contents`, and ends up [crashing here](https://github.com/electron/electron/blob/4d364fa27a6fa5803a25a343e40a2fe68e27b27f/atom/browser/api/atom_api_web_contents.cc#L291)

This seems like a plausible race, and there are [already places in the code where we convert host and frame ids into a webcontents then guard against exactly this case](https://github.com/electron/electron/blob/master/atom/browser/api/atom_api_app.cc#L662). How do people feel about handling the null `web_contents` gracefully and just cancelling the auth request? 
",1725,True,en,0
11171,1,2,0,Externals,him2him2,2017-11-20T12:05:14Z,28,28,13,0,Update electron.atom.io -> electronjs.org to reduce redirects and speed navigation.,83,False,en,0
11170,3,1,1,Externals,him2him2,2017-11-20T19:45:10Z,4,4,1,1,Small changes to standardize formatting.,40,False,en,0
11168,1,1,0,Externals,sethlu,2017-12-06T05:45:37Z,0,0,1,16,"The existing icns is missing color profiles for a few sized images; this update should address an issue on the faded color.

Note: I'm not sure but the `iconutil` on High Sierra seems to be only generating an `icns` with 8 images, rather than 10 images provided in the `iconset`. Probably running it with a previous Xcode tools will yield a different `icns`? Since September, the latest Atom's shipped with `icns` that only contains 8 images ([see here](https://github.com/atom/atom/blob/05a81485ca85598e7e22d6902df86923f8c0d8f2/resources/app-icons/stable/atom.icns)); haven't heard complaints from users on older macOS.

Related issue with Atom: https://github.com/atom/atom/pull/15760
& PR: https://github.com/atom/atom/pull/15760

A little unrelated: The Wikipedia entry for Electron has an observable faded color as well, probably due to a same reason.",863,True,en,0
11167,1,4,0,Externals,simast,2017-11-20T19:28:38Z,2,3,1,1,"Minor improvement to menu module documentation. This fixes issue with generated TypeScript typings, where previously you had to use `any` as a workaround:

```typescript
// Before:
Menu.setApplicationMenu(null as any);

// After:
Menu.setApplicationMenu(null);
```",272,True,en,0
11166,18,5,7,Externals,sethlu,2017-11-28T01:55:14Z,106,6,4,8,"üöß Adds a special (& singleton) role for menu items that allow macOS to display recent documents (which should work in App Sandbox too, to be tested). New documents can be added through the existing API `app.addRecentDocument(path)`.

~~The existing API design allows a label format of `${OPEN_RECENT_LABEL}` (where the clear menu button will be hidden) or `${OPEN_RECENT_LABEL}\t${CLEAR_MENU_LABEL}` (terms separated with a tab). In cases of `Open Recent\tClear Menu\tBlah Blah Blah`, the terms beyond a second `\t` will be ignored.~~

*If there are a multiple of menu items with the role `openrecent`, only the last in the menu will be displayed (because we only have one instance of such menu ~~for now~~).*


Usage (updated ~~11/20~~ 11/27):

```js
const template = [
  {
    label: 'File',
    submenu: [
      {
        role: 'recentdocuments',
        submenu: [
          {
            role: 'clearrecentdocuments'
          }
        ]
      }
    ]
  }
]
```

Resolves: https://github.com/electron/electron/issues/4028

cc: @taivu

---

Amend: Currently recently opened documents are only accessibly by the user through the dock icon.",1179,True,en,0
11164,2,4,3,Externals,felixrieseberg,2017-11-21T06:51:48Z,8,2,1,2,"I _think_ this fixes https://github.com/electron/electron/issues/11150, but I _know_ that it doesn't break anything.",116,False,en,0
11158,5,0,5,Externals,felixrieseberg,2017-11-20T15:14:05Z,53,1,4,2,"When you reject a Promise from a `executeJavaScript` call, we pass on the rejection. That's good! However, [if you write JavaScript as recommended by the pros](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject), you'll be rejecting with an instance of `Error`, which results in an broken result of `{}`.

The reason is simple: `Error` objects don't serialize. This is true for all of them (`ReferenceError`, `TypeError`, `URIError`, etc).

```js
const myError = new Error('Something went wrong')
JSON.stringify(myError) === '{}' // true
```

The result is this, which makes no sense to developers who haven't studied Error objects and the IPC:
```js
webContents.executeJavaScript('Promise.reject(new Error(""Something went wrong""));')
  .catch((error) => {
     console.log(error) // This will log '{}'
  })
```

This PR provides a fix: Let's serialize known and common Error objects for these calls in the renderer and recreate them in the main process. Also: Tests!

With this PR:
```js
webContents.executeJavaScript('Promise.reject(new Error(""Something went wrong""));')
  .catch((error) => {
     console.log(error)
     // This will now log:
     // Error: Something went wrong
     //     at <anonymous>:1:16
     //     at EventEmitter.electron.ipcRenderer.on(...
     //     ...
  })
```

Closes #11155 ",1387,True,en,0
11154,2,0,2,Internals,jkleinsc,2017-12-19T06:30:52Z,10,9,1,31,"Also, fixed links",17,False,en,0
11153,3,0,0,Internals,jkleinsc,2017-11-17T20:52:20Z,201,48,4,0,"Instead of relying on the word ""Bump"" to build a release build, this PR will enable us to run the release builds via node.js scripts.",133,False,en,0
11152,1,0,0,Internals,zeke,2017-11-17T20:26:44Z,1,1,1,0,,0,False,en,0
11145,1,4,0,Externals,OuYancey,2017-11-17T15:54:18Z,4,3,1,0,"I see #11039 and #11100 .
Maybe we just forget the link in the top. The old links lead to 404. 
I think it's better to delete all the link, only left the link [electron-i18n](https://github.com/electron/electron-i18n).  
But now, i just modify it to the right link.",268,False,en,0
11144,5,1,0,Externals,dittos,2017-11-27T08:02:58Z,152,27,10,10,"Land #10856 again (which was reverted in #11140)

Changes are cherry-picked from original PR to master with test fix commit https://github.com/electron/electron/commit/d9481430dfa07c1028285d5aee56f55ed6f8dabf.",211,True,en,0
11141,3,0,0,Externals,MarshallOfSound,2017-11-17T20:31:55Z,91,2,4,1,,0,False,en,0
11140,1,0,0,Externals,alexeykuzmin,2017-11-16T17:20:47Z,18,138,9,0,Reverts electron/electron#10856,31,False,ca,0
11139,2,3,0,Externals,alexeykuzmin,2017-11-16T15:14:37Z,107,100,2,0,/cc @codebytere ,16,False,en,0
11135,6,0,13,Internals,codebytere,2017-11-16T21:47:35Z,1099,18,3,0,"This PR adds tests for `common/api/callbacks-registry`
I also did some cleanup of `callbacks-registry.js` from old converted coffeescript code",143,False,en,0
11133,1,3,0,Externals,alexeykuzmin,2017-11-21T09:13:19Z,666,253,19,5,"I guess marking them as passed of ignoring them at all is not the best idea =)

/cc @codebytere ",98,True,en,0
11131,5,13,12,Externals,hugomano,2017-12-19T02:03:29Z,149,1,4,33,"_Following #10404 and #9494_

**Background**

For extension's content scripts injection, Chromium relies on ""isolated world"".

> Content scripts execute in a special environment called an isolated world. They have access to the DOM of the page they are injected into, but not to any JavaScript variables or functions created by the page. It looks to each content script as if there is no other JavaScript executing on the page it is running on. The same is true in reverse: JavaScript running on the page cannot call any functions or access any variables defined by content scripts.

In Electron, the current implementation relies on `vm.runInThisContext` that does not have the same isolation properties.

**Objective**

This PR wants to add the necessary APIs to deal with isolated world and use it in content scripts injection.

**Done**

- Add `webframe.executeJavaScriptInIsolatedWorld`
- Add `webframe.setIsolatedWorldContentSecurityPolicy`
- Add `webframe.setIsolatedWorldHumanReadableName`
- Add `webframe.setIsolatedWorldSecurityOrigin`

**Todo**

- [x] Add documentation
- [x] Use plain JS object with optional properties instead of `code` and `url` parameters in `executeJavaScriptInIsolatedWorld` for map with [WebScriptSource](https://cs.chromium.org/chromium/src/third_party/WebKit/public/web/WebScriptSource.h?q=WebScriptSource&dr=CSs&l=31) functionalities 
- [x] Allow an array of WebScriptSource as parameter in `executeJavaScriptInIsolatedWorld`

**Need help**

For the last two todo, due to my poor skills with C++, I can't easily implement features. Any help is welcome  ‚ù§Ô∏è 

_Thanks to @alexstrat for the perfect exploration, analyses and first implementation üëå_",1721,True,en,0
11127,3,0,0,Internals,jkleinsc,2017-11-15T15:47:37Z,1,9,1,0,The DISPLAY environment variable needs to set to ':99.0' before xvfb starts because xvfb uses that variable,107,False,en,0
11126,1,2,0,Externals,numaanashraf,2017-11-15T18:00:15Z,1,1,1,0,,0,False,en,0
11125,1,5,8,Externals,tarruda,2017-11-17T15:53:56Z,49,50,10,2,"Close #10051

@juturu can you confirm if this PR fixes the issue for you?",75,True,en,0
11124,1,3,0,Externals,tarruda,2017-11-16T22:36:40Z,10,0,1,1,"`nativeImage` is a dependency of `desktopCapturer`, so it has to be exposed as well.",84,False,en,0
11117,4,0,6,Internals,codebytere,2017-11-20T15:07:07Z,95,69,2,5,"Improve coverage in `common/deprecate.js`
This module also appears to be copied over from another project, so there are several implemented methods which we do not use or reference anywhere. I've commented them out.

To Do:
- [x] `deprecate.rename`
- [x] `deprecate.warn`
",278,False,en,0
11108,17,5,2,Externals,oktapodia,2017-11-29T09:37:53Z,261,23,8,15,"Fix #11107 

I did not add a test, this is my first objC PR and I have not seen any test about the tray menu


`\033[34mI \033[32mam \033[31ma \033[33mtest \033[0m` will be ![rr](https://i.gyazo.com/745c0883905ec538f093d44fe1bc67dd.png)",241,True,en,0
11103,7,5,0,Externals,felixrieseberg,2017-11-15T01:18:04Z,12,15,3,1,"‚Ä¢¬†Outputs the full and correct version from `process.version`
‚Ä¢¬†Updates the `bump_version.py` script to not break it in the future

Closes https://github.com/electron/electron/issues/11101

![screen shot 2017-11-12 at 10 29 26 pm](https://user-images.githubusercontent.com/1426799/32712603-5d5e4a9e-c7fa-11e7-8a36-2618f1bf54f4.png)
",344,False,en,0
11100,1,1,0,Externals,Raul6469,2017-11-14T16:57:48Z,1,12,1,2,"After the `/docs-translations` deprecation in #11039, here is an updated README with a link to the [electron/electron-i18n](https://github.com/electron/electron-i18n) repository.
I replaced the old links with a very simple line, maybe we should add more informations to it.

/cc @zeke @electron/i18n ",303,False,en,0
11099,6,1,8,Externals,MarshallOfSound,2017-11-16T21:57:08Z,12,2,1,4,"This is very similar to my original fix but is now semantically correct and I can actually explain how it fixes it üëç 

Basically the return of `node::MakeCallback` will be empty if the method threw an exception.  Turns out that any call to `emit('error')` on an `EventEmitter` that didn't have an error handler threw a synchronous error inline with the emit call (wut......).  This simply handles the empty case by claiming the method returned `false` (the event was unhandled) which is semantically correct in regards to the `EventEmitter` documentation.

See https://github.com/nodejs/node/blob/master/lib/events.js#L176 for the relevant EventEmitter code.

Fixes #10433 

/cc @bpasero ",699,True,en,0
11097,5,5,4,Externals,brenca,2017-11-24T09:04:44Z,25,15,4,12,"Currently, Windows can resize the `BrowserWindow` if the taskbar is resized, and the window no longer fits inside the new working area, even if resizable is set to false. This small change will prevent this from happening.",222,False,en,0
11093,1,0,0,Internals,zeke,2017-11-14T13:54:17Z,12,11,1,2,Fixes a formatting error discovered in https://github.com/electron/electron-i18n/issues/143,91,False,en,0
11092,4,6,4,Externals,MarshallOfSound,2017-12-20T03:56:01Z,72,11,6,39,"Fixes #11075

This adds a `details` parameter to the permission request callback that when the request is an `openExternal` request provides the scheme and url of the request.  This can allow users to whitelist certain schemes and such.

/cc @gerges ",254,True,en,0
11088,1,1,0,Internals,zeke,2017-11-16T15:35:39Z,2,2,1,5,"A followup to #11039 

project, not projects.",47,True,en,0
11087,1,1,0,Externals,felixrieseberg,2017-11-11T03:47:46Z,9,2,1,0,"This tiny PR brings back the `--abi` option, used by various tools to determine how to rebuild.

@codebytere I don't know if it was removed on purpose - let me know if it was and I'll just close this PR üòä 

Closes https://github.com/electron/electron/issues/11084",270,True,en,0
11079,2,2,0,Externals,sdj01044,2017-11-10T17:04:09Z,1,0,1,0,"Korean Community was Pull Request #10997.

But There is a Korean Community in Slack!

So I Added it.",104,True,en,0
11060,1,1,0,Externals,MarshallOfSound,2017-11-09T04:01:10Z,7,0,1,0,This makes verifying docs changes easier,40,False,en,0
11059,3,11,0,Externals,felixrieseberg,2017-11-21T00:50:18Z,4,3,2,12,"We never documented how to clear a permissions request handler, leaving developers believing that we forgot to find a way to remove 'em (https://github.com/electron/electron/issues/11057).

We didn't, we just never documented it :wink:

Closes #11057",254,True,en,0
11058,1,0,0,Externals,MarshallOfSound,2017-11-08T06:57:19Z,10,1,1,0,Fixes the master build,22,False,en,0
11056,5,5,2,Externals,ajmacd,2017-11-11T03:34:39Z,25,1,3,3,The Slack app has cases of BrowserWindows without an accompanying WebView/BrowserView that we'd like to capture logs from. This change permits that.,148,False,en,0
11055,4,4,3,Externals,felixrieseberg,2017-11-11T03:33:19Z,17,10,2,3,"We found a little bug that snuck in during the ES6 transition. This PR ensures that calling `setApplicationMenu(null)` (which removes the current menu) doesn't crash.

Also: A spec!

Fixes #11052",199,True,en,0
11054,1,1,0,Internals,jkleinsc,2017-11-07T21:43:55Z,44,0,1,0,"This change will allow us to use a Jenkins pipeline to do builds in Jenkins.  This will finally give us the capability of rerunning builds on demand in Jenkins.

This intentionally only runs debug/test builds as we are going to move to running release builds on demand instead of looking for a ""bump"" commit.",310,True,en,0
11048,1,0,0,Externals,Toinane,2017-11-07T14:14:36Z,1,1,1,0,"A really little fix of #10738 in the documentation :)
change link [Page Visibility API][#page-visibility] to [Page Visibility API](#page-visibility)",149,False,en,0
11039,4,8,0,Internals,zeke,2017-11-10T19:54:52Z,36,45160,396,3,"The `/docs-translations` directory was a home-grown effort to translate Electron's docs. It has undoubtedly helped many folks learn Electron, but we never had a real process for keeping the translations up to date and consistent across locales. Until now!

The [new Electron website](https://github.com/electron/electron.atom.io/pull/758) is internationalized, and it consumes translated (and source) content from electron/electron-i18n, a repo that syncs with Crowdin, our new localization service.

This PR:

- removes all existing content in the `/docs-translations` directory
- keeps the directory around, and adds an explanatory README with info about the new translation process
- documents steps for getting good-ol-days raw, offline, localized, Markdown docs.

@electron/i18n  @electron/docs @sethlu",817,True,en,2
11038,1,6,0,Externals,dashersw,2017-11-07T07:18:53Z,37,1,2,0,"Depending on whether a ScrubberItem has text or an icon, this changeset calculates the actual width and sizes the TouchBar items accordingly. Previously, all ScrubberItems, regardless of their content, had a static width of 50px.

This commit also fixes #10539.

It simply turns this:

![1](https://user-images.githubusercontent.com/698308/32469025-177f27a8-c351-11e7-9f09-4e6ad6d8eb88.jpg)

into this:

![2](https://user-images.githubusercontent.com/698308/32469031-1d52214e-c351-11e7-995d-3484e9a7a2c2.jpg)
",520,True,en,0
11032,11,3,12,Internals,groundwater,2017-12-05T22:45:51Z,168,125,15,29,"This is the output document after working with many of our maintainers, and major app publishers. Please ask questions if anything is unclear. We will attempt to modify the document to answer common questions.

We will hold this PR open for clarification purposes, and communication. While we probably will not consider others _similar_ proposals, we do welcome hearing about problems that may not have been considered in the included proposal. If you feel your needs would not be met by the new versioning policy, please outline the problem you will experience as clearly as possible.

There is no specific timeline around this, rather we intend to switch to the new versioning policy from 2.0 onward. The most likely candidate for this occurring is our Chrome 61 upgrade, but that is not a guarantee.

I would like to thank the following people for working extremely hard to come to a mutually agreed solution: @Tyriar @MarshallOfSound @tonyganch @jkleinsc @ckerr @mgc @alexeykuzmin and anyone else I forgot to mention.

There are a few lingering TODOs

- [x] change examples to 2.x because having them say 1.x.x is confusing
- [x] link to this from main documentation
- [x] remove any links to _tutorial_ doc
- [x] transfer anything from _tutorial_ I may have missed
- [x] add *escape hatch* for folks just looking to know what to do i.e. a tl;dr 
- [x] correct cherry-picks to be consistent with *time arrow*
",1429,True,en,0
11022,1,2,0,Externals,ChangJoo-Park,2017-11-06T16:32:08Z,1,1,1,0,,0,False,en,0
11020,1,0,0,Externals,pfrazee,2017-11-16T15:36:38Z,3,1,1,10,"We got this fix merged into the 1.8.x branch with https://github.com/electron/electron/pull/10918

I wanted to make sure the fix landed in 1.7.x as well, in case I (or somebody else) cant jump to 1.8.x yet",207,True,en,0
11013,2,0,0,Externals,alexeykuzmin,2017-11-04T14:41:38Z,9,5,1,0,"It caused a couple of Crash Reported tests to timeout on Mac.
Task to enable it back: https://github.com/electron/electron/issues/11012

/cc @codebytere ",156,False,en,0
11009,1,2,0,Externals,felixrieseberg,2017-11-07T14:15:25Z,1,0,1,3,Another tiny one-line fix I came across in our documentation.,61,False,en,0
11008,9,7,14,Externals,tarruda,2017-11-14T15:31:58Z,913,16,15,10,"This is an alternative to the existing functions in `protocol` module: Instead of returning buffer/string/filepath/httprequest, the user should return a node.js stream to provide the response body.

This new function is more flexible than the existing ones, since Files/HttpRequests/Buffers/Strings can all easily be converted into Streams using node.js standard API. Also, it should be more efficient than String/Buffers if the user wants to fetch data from the network.

Overview of changes:

- Add infrastructure code to allow C++ classes to handle JS events.
- Pass HTTP request headers to protocol handlers.
- Implement {register,intercept}StreamProtocol (which also allows the user to return response headers)

While I'm still going to add tests, reviewers are welcome.

Close #4303 #8503",806,True,en,0
11007,2,1,1,Externals,felixrieseberg,2017-11-05T00:36:56Z,1,1,1,1,"I know, silly to make a PR for one character, but also silly to leave it in.",76,False,en,0
11005,2,3,0,Internals,ckerr,2017-11-05T23:55:35Z,1,1,1,2,"undo last week's dependency bump as per discussion at https://github.com/electron/electron/pull/10922

dependency was bumped @ 0c9e106502018a03d25c76a068d8741463a24fed",169,True,en,0
11004,1,5,0,Externals,poiru,2017-11-07T14:04:56Z,1,1,1,4,Needed for electron/electron-typescript-definitions#80,54,False,en,0
11001,11,2,8,Internals,vanessayuenn,2017-11-05T02:22:05Z,140,29,4,1,"This PR adds a script that can trigger circle CI to build release versions of electron for testing and development purposes, without interfering with the release cutting process. It _does not_ create a draft release nor upload assets to github releases page; instead, it puts the mock release assets on s3. 

The script can be run using `npm run mock-release -- [--job=CI_JOB_NAME] BRANCH_NAME`. It looks for env variable `CIRCLE_TOKEN` which can be obtained from circle ci if you have permission). And the resulting artifacts can be accessed via `https://gh-contractor-zcbenz.s3.amazonaws.com/electron-artifacts/{version}/{filename}`.

cc: @alexeykuzmin ",659,True,en,0
11000,1,6,0,Externals,sdj01044,2017-11-07T15:33:36Z,4,4,1,4,I fixed wrong words & wrong translations.,41,False,en,0
10997,1,4,0,Externals,xxczaki,2017-11-08T15:46:04Z,0,1,1,5,"Meetup Group doesn't exist.

https://www.meetup.com/electron-kr/",66,True,en,0
10995,1,4,0,Internals,ckerr,2017-11-03T01:22:28Z,14,0,7,0,"This follows up on a discussion that @mgc, @MarshallOfSound, and I had this week tracking down the root of the AutoUpdater error case crash.

### First try

At the end of that debugging session we'd decided to defer the singletons' instantiation until after `Object.setPrototypeOf(AutoUpdater.prototype, EventEmitter.prototype)` was called so that the newly-created AutoUpdater would have its EventEmitter parent fields initialized.

Unfortunately that's not going to work. Calling `new AutoUpdater()` in JS doesn't actually create a C++ AutoUpdater object because AutoUpdater and the other singletons don't insert a constructor into the JS bindings: (a) it's unnecessary binding code to (b) give clients the ability to create multiple instances of things designed to be singletons. So, while we _could_ add constructor bindings to make this possible, it opens up more potential problems.

### Second try

EventEmitter() defers its initialization to an `init()` helper function, and Samuel suggested that would work as well. I'm going to chalk this up to my inexperience with JS but I wasn't able to get `autoUpdater.init()` to work (and it _is_ defined a little differently from other members, ie `EventEmitter.init = function(){...}` vs. `EventEmitter.prototype.setMaxLixteners = function(){...}`) but IMO this is just as well because the approach I used is cleaner & should work even if Node [changes](https://github.com/nodejs/node/issues/10680) EventEmitter's internals.

### Third try

So after much prologue (and more digging and learning how native_mate works), we actually wind up with a pretty small & simple patch. after reparenting the singletons' prototypes, we call the parent's constructor...",1721,True,en,0
10992,2,7,0,Internals,codebytere,2017-11-02T23:51:29Z,1,1,1,0,"It appears the timeout issues was only apparent in my other branch; i removed it here and all tests are well and green again in that module :)

/cc @alexeykuzmin @ckerr ",171,True,en,0
10990,2,9,0,Externals,alexeykuzmin,2017-11-08T14:55:41Z,45,3,2,6,"The tests were disabled in #10989, task to enable them ‚Äì #10988.

_There is no fix for now, the tests are simply enabled. They are expected to fail on Mac._",160,True,en,0
10989,1,1,0,Externals,alexeykuzmin,2017-11-02T00:13:55Z,3,1,1,0,"Task to enable them:
https://github.com/electron/electron/issues/10988",71,False,en,0
10987,2,0,0,Internals,codebytere,2017-11-01T18:30:55Z,516,681,2,0,"Typed app, meant shell, whoops. 
Upgraded last two specs to ES6.",65,False,en,0
10977,1,1,0,Externals,alexeykuzmin,2017-11-02T02:00:01Z,210,51,1,1,"The primary goal is to avoid using the same data URLs in several places,
all other changes are just a cosmetic improvements.

/cc @codebytere ",145,False,en,0
10974,21,4,21,Internals,codebytere,2017-11-02T05:45:40Z,251,90,9,2,"This PR is an effort to upgrade Crash Reporter testing for fuller coverage. In my first few additions, i've noticed some parts of the native implementation for crash reporter that I think should be changed, which are the following:
- Change `SetExtraParameter`, which right now performs both addition and removal of a new parameter depending on the values passed to it, into two methods, `SetExtraParameter` and `RemoveExtraParameter`. 
- Add a function to return all existing parameters (`GetParameters`), so that the aforementioned functions may be tested.

Please let me know if you think there's a better way to do this, and if you see any other implementation details that might merit changes for better testing.
",723,False,en,0
10972,4,4,3,Externals,felixrieseberg,2017-11-02T15:16:11Z,8,0,1,2,"This isn't really a solution, this is more a workaround in case we can't find any real solution. 

On Windows, multiple screens with different scaling factors result in the _first_ call to `setBounds` being incorrect. Subsequent calls will place the window correctly. This dirty fix simply does that.

Ref https://github.com/electron/electron/issues/10862",359,True,en,0
10954,1,0,0,Externals,felixrieseberg,2017-10-27T23:36:45Z,9,0,1,0,"On Windows, the system doesn't keep track of idle wakeups the same way Unix does - so Chromium throws a nasty `NOTIMPLEMENTED()` every single time we call `getAppMetrics()` on Windows. Nothing crashes, but it pollutes the log with lines like these:

```
[1288:1003/084000.939:ERROR:process_metrics.cc(99)] NOT IMPLEMENTED
```

This PR makes sure that we don't even attempt this not implemented call. Instead, we return 0, keeping the current behavior around.

We've done this before for the explicit call (https://github.com/electron/electron/pull/10680), but missed this one.",584,True,en,0
10953,3,0,1,Externals,felixrieseberg,2017-10-27T20:05:52Z,19,0,2,0,"The code is already there, it just wasn't documented or tested.

Fixes #10921",79,True,en,0
10945,21,1,0,Internals,codebytere,2017-10-27T20:45:58Z,1713,1946,11,0,"More progress in updating old specs before beginning to add new tests.

Upgraded:
- [x] IPC spec
- [x] Crash Reporter Spec
- [x] Menu Spec
- [x] Net Spec
- [x] Module spec
- [x] Session Spec
- [x] Chromium Spec
- [x] Web Contents Spec
- [x] Web Request Spec",268,True,en,0
10944,3,3,0,Externals,MarshallOfSound,2017-10-27T23:33:31Z,17,0,3,0,Fixes #10227,12,False,en,0
10943,1,0,0,Externals,MarshallOfSound,2017-10-27T23:35:08Z,1,1,1,0,Fixes #10940,12,False,en,0
10942,13,0,2,Internals,codebytere,2017-10-27T02:12:19Z,165,201,10,0,"Remove all relics of older nonstandard code in the smaller specs in the first few steps of the testing suite improvement process.

Upgraded:
- [x] Clipboard Spec
- [x] Crash Reporter Spec
- [x] Desktop Capturer Spec
- [x] Global Shortcut Spec
- [x] Process Spec
- [x] System Preferences Spec
- [x] Screen Spec
",320,True,en,0
10941,2,0,2,Internals,codebytere,2017-10-27T01:17:36Z,26,26,1,0,"move away from use of vars and other old js standard things 
Some tests use arrow functions and some don't, so i also moved to consistent use. ",144,False,en,0
10938,1,0,0,Internals,codebytere,2017-10-27T13:48:34Z,292,484,1,0,"Upgrade earlier tests in protocol module to match ES6 style of later tests added in `api_protocol_spec.js`

/cc @zeke",119,True,en,0
10936,1,5,0,Externals,robinwassen,2017-11-03T06:08:44Z,2,2,1,7,"Title and content was marked as optional, but the API throw error if they are not defined. 

See: https://github.com/electron/electron/blob/master/atom/browser/api/atom_api_tray.cc#L185",187,True,en,0
10923,2,2,0,Internals,jkleinsc,2017-11-14T00:00:38Z,1,1,1,18,"This fix pulls in a patch to fix rendering issues with Nvidia GPU on High Sierra.

See https://bugs.chromium.org/p/chromium/issues/detail?id=773705 for more details",166,True,en,0
10922,1,10,0,Externals,Siilwyn,2017-10-27T19:56:07Z,1,1,1,1,Respects the OS cache location and be able to set he cache location by setting the environment variable `ELECTRON_CACHE`.,121,False,en,0
10918,1,5,0,Externals,pfrazee,2017-10-26T09:35:32Z,3,1,1,0,"I'm proposing this solution to the crash bug that we've been experiencing in Beaker when using custom protocols.

History:

 - There was a PR by @deepak1556 to solve this: https://github.com/electron/electron/pull/9358. That got reverted due to a regression (https://github.com/electron/electron/issues/9587).
 - Robo's suggested cause was ""Race between destruction of source and sink buffers caused UAF crash."" I wasn't able to confirm or disprove that (I'm still pretty new at this codebase).
 - This is the function in the chromium source that crashes:

```cpp
// url_request_job.cc
void URLRequestJob::ReadRawDataComplete(int result) {
  DCHECK(request_->status().is_io_pending());
  DCHECK_NE(ERR_IO_PENDING, result);

  // The headers should be complete before reads complete
  DCHECK(has_handled_response_);

  GatherRawReadStats(result);

  // Notify SourceStream.
  DCHECK(!read_raw_callback_.is_null());

  base::ResetAndReturn(&read_raw_callback_).Run(result);
  // |this| may be destroyed at this point.
}
```
 - It's being called by `URLRequestFetchJob::OnURLFetchComplete()` in electron. Through logging, I found that the crashes only occurred when `ReadRawDataComplete()` was called when `request_->status().is_io_pending() == false`.
 - Based on my read of `URLRequestJob`, I **believe** `ReadRawDataComplete()` only needs to be called if an async `ReadRawData()` is still in progress. I think the crash is occurring because there's no async read in progress, and `ReadRawDataComplete()` is blindly calling `read_raw_callback_` when it's a null reference. (However, because `read_raw_callback_` is private and I dont know how to do custom libchromiumcontent builds yet, I couldn't check its value to confirm that.)
 - The DCHECK against `is_io_pending()` at the top of `ReadRawDataComplete()` seems to confirm the check I'm doing.

Test case: https://github.com/pfrazee/electron-bug-video-stream-crash

```
git clone https://github.com/pfrazee/electron-bug-video-stream-crash
npm install
npm start
```

Closes https://github.com/electron/electron/issues/9342. (Related: https://github.com/electron/electron/issues/8871 https://github.com/electron/electron/issues/9635)",2222,True,en,0
10912,3,5,8,Externals,Ajeey,2017-12-19T07:22:26Z,7,3,1,54,Missing documentation on the issue https://github.com/electron/electron/issues/10903,84,False,en,0
10911,6,3,9,Internals,codebytere,2017-10-26T05:01:43Z,6,10,1,0,"https://github.com/electron/electron/issues/10910 informed me that`%HOMEPATH%` and `%HOMEDIR%` weren't correctly evaluating per https://github.com/electron/electron/blob/master/brightray/browser/browser_main_parts.cc#L171, so I switched to using _wgetenv to get windows env variables and using them to build the path instead.


/cc @MarshallOfSound ",352,True,en,0
10909,7,1,26,Internals,codebytere,2017-11-03T13:16:28Z,98,134,1,8,"Remove relics of automatically converted coffeescript from `remote.js`

**Nota Bene**: This file does not have a spec",119,True,en,0
10902,1,0,0,Externals,mattlyons0,2017-10-26T14:43:35Z,2,2,1,1,"Waiting for xdg-open to return freezes Electron application.
Some file managers (ex: Nemo) don't return until some time after they are closed, this freezes the Electron application until the process returns.
The same is true about any application that can potentially be opened with OpenItem.

Is there any reason why this was set to true initially? It was introduced in [this commit](https://github.com/sneakypete81/electron/commit/79ba8feaf8485a0c7a94e717281d1e13deff9e6c) and it seems that it was just sent to true because the author didn't have a problem with applications opened with OpenItem or ShowItemInFolder hanging. It turns out this is easily reproducible when Nemo is the default file manager or you open a item with a default application that does not return from the xdg-open call immediately. 

I have seen this in mattlyons0/Assessorator#4 and verified this PR fixes the behavior. Additionally I believe this fixes Foundry376/Mailspring#156 (although I cannot verify because I can't get it to build with a different electron version successfully).",1070,False,en,0
10900,1,0,0,Externals,felixrieseberg,2017-10-25T00:21:09Z,1,2,1,0,"Starting with 1.8, we activated `interactive` mode for the `-r` parameter, which according to docs should just require a module.

I think that was just a typo that we all missed, but I'll let @codebytere confirm.

Fixes #10877 ",231,True,en,0
10899,1,0,0,Internals,jkleinsc,2017-10-26T13:46:31Z,1,1,1,1,This fix pulls in a patch that fixes a security vulnerability in V8's Turbofan engine.,86,False,en,0
10898,1,2,0,Internals,jkleinsc,2017-11-13T23:49:31Z,1,1,1,20,"This fix pulls in a patch to fix rendering issues with Nvidia GPU on High Sierra in 1.7.x

See https://bugs.chromium.org/p/chromium/issues/detail?id=773705 for more details",174,True,en,0
10896,5,1,29,Internals,codebytere,2017-10-25T12:56:31Z,54,64,2,0,"This PR removes unnecessary relics from original ‚òïÔ∏èscript conversion of the main and render process APIs for desktopCapturer

/cc @zeke ",142,True,en,0
10893,1,0,0,Externals,maxibanki,2017-10-24T14:52:15Z,1,1,1,0,`thrid-party` => `third-party`,30,False,en,0
10890,1,0,0,Externals,demopark,2017-10-26T04:03:11Z,1,1,1,1,Add a little translation for zh-CN,34,False,en,0
10889,5,2,2,Externals,mgc,2017-10-27T15:39:50Z,12,5,5,3,"This is an attempt to avoid #10527, in which notification events like `close` and `show` sometimes cause a crash.

First, the `close` event was a bit of a lie, as it was being dispatched somewhat randomly when the notification was GCed, not when the user actually dismissed it. Fixing this means not having to deal with emitting the event inside the destructor.

Second, it seems like there are some subtle bugs in native-mate. I'm not sure what is going on, but in reading through how Muon does things I noticed a few sensible looking changes from @bridiver: https://github.com/brave/muon/commit/58c0ec0e00d52a6c8cf31a837433b6b5eb23a8ff#diff-a31bffb28ca1eed32c06c2d6b8b53f45 https://github.com/brave/muon/pull/323

Here is an additional native-mate PR: https://github.com/electron/native-mate/pull/15",807,True,en,0
10888,21,0,22,Internals,codebytere,2017-10-26T04:31:48Z,276,323,2,2,"Improve human readability of `menu.js` before more features are added to it.

Todo:
- [x] clean `generateGroupId`
- [x] remove switch case from `insert`
- [x] remove parameter reassignment from `popup`, as this can introduce side effects
- [x] clean `api_menu_spec.js`
- [x] add some more unit tests

/cc @zeke @MarshallOfSound ",337,True,en,0
10874,2,2,0,Externals,Toinane,2017-10-23T22:54:32Z,4,2,1,2,I've added some details about OSR :),36,False,en,0
10873,1,0,0,Externals,ahmedmohamedali,2017-10-23T13:32:29Z,15,6,2,1,"This PR is to fix the crash described in the issue #10697.
The root cause is  zoom_controller_ is not initialized for dev tools.",129,False,en,0
10856,2,6,4,Externals,dittos,2017-11-14T12:34:50Z,138,18,9,25,"Fixes #7312.

It creates `Electron Login Helper.app` and copies the helper app into `Electron.app/Contents/Library/LoginItems/`.
When `setLoginItemSettings` is called, `SMLoginItemSetEnabled` API is used to register the login item.
Login helper launches the main app (`Electron.app/Contents/Library/LoginItems/Electron Login Helper.app/../../../..`, which is `Electron.app`) and exits.

Note:

* I did not tried to submit this to Mac App Store. I just tested it locally.
* `CFBundleIdentifier` of the login helper should be changed to `(main bundle id).loginhelper`.
* The login helper should be signed with parent entitlements as it is launched independently.
* The app should be installed in `/Applications` to be tested. ([Apple docs](https://developer.apple.com/library/content/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW29)) Try to install generated installer package with `sudo installer -store -pkg path-to-package.pkg -target /`
",1040,True,en,0
10839,1,1,0,Externals,qazbnm456,2017-10-19T03:35:11Z,1,1,1,0,"As suggested here (https://github.com/electron/electron/issues/10837), I removed the labels `_macOS_` and `_Windows_` at app.md.",128,False,en,0
10834,3,5,5,Externals,Vehemos,2017-10-18T14:06:27Z,7,12,1,0,"Added more info, to clarify things.",35,False,en,0
10829,3,2,2,Externals,zombieleet,2017-10-18T13:33:58Z,8,0,1,0,,0,False,en,0
10827,10,4,8,Internals,jkleinsc,2017-10-23T15:02:51Z,841,247,10,5,New scripts to automate our release process.,44,False,en,0
10825,1,0,0,Internals,vanessayuenn,2017-10-17T21:53:03Z,1,1,1,0,,0,False,en,0
10812,1,1,0,Externals,alespergl,2017-10-17T07:27:36Z,1,1,1,0,"The names of symbol files on Linux are based on the names of the `.so` files found by `ldd` as dependencies. Usually these are just symlinks and the actual binaries loaded into the process are named differently, e.g. `libstdc++.so.6` resolves to `libstdc++.so.6.0.24`. When the symlink name is used for the symbol file name, the symbol file will not be matched with the real file name when symbolicating a crash dump. Therefore the real name needs to be used for naming the symbol file.",486,False,en,0
10810,1,2,0,Externals,qazbnm456,2017-10-18T13:33:38Z,7,2,5,2,"This PR adds `errorCode` value to the request object, so ppl can directly get the error code value, not just the verification result string.",140,False,en,0
10804,1,1,0,Externals,robinwassen,2017-10-17T07:26:49Z,9,1,1,1,See #10593 for the discussion regarding this,44,False,en,0
10795,1,3,0,Externals,samthomson,2017-10-17T02:32:09Z,1,1,1,2,"added the max limit for a parameter to help people who don't know why it silently fails.
closes https://github.com/electron/electron/issues/9987",145,False,en,0
10793,16,13,8,Externals,ahmedmohamedali,2017-11-20T02:37:42Z,130,39,9,37,"This PR enable the PDF rendering in sub frame (Issue https://github.com/electron/electron/issues/9192). 
 It work with the chromium changes described in the PR https://github.com/electron/libchromiumcontent/pull/374.


",223,False,en,0
10777,1,5,0,Externals,revi,2017-10-13T22:42:13Z,5,6,3,1,"Mostly spacing error, one Markdown error.

WIP, I plan to have a look at the whole translation this weekend or later next week.",129,True,en,0
10773,1,2,0,Externals,jeroenvisser101,2017-10-12T15:09:06Z,2,0,1,0,Link was broken,15,False,en,0
10762,1,3,0,Externals,nuriu,2017-10-26T04:04:33Z,5,5,1,13,Minor typo changes.,19,False,it,0
10759,1,2,0,Internals,jkleinsc,2017-10-11T19:37:03Z,1,1,1,0,"Release builds are not currently building with official build, so we are going to revert back to the ""non official build"" of libchromiumcontent.

Fixes #10722",160,True,en,0
10758,2,1,0,Externals,felixrieseberg,2017-10-11T22:18:12Z,1,1,1,0,"Currently, users don't see any indiciation for the download progress of electron. That's especially confusing to newcomers with less-than-stellar internet connections, because neither npm nor Node are telling them that anything is happening. That's bad.

At the same time, the reasoning for the original PR was to ensure that automated build environment logs aren't polluted with tons of progress bar updates. This new solution hides the progress bar in two cases:

 * `npm`'s loglevel is set to `silent`
 *  A `CI` environment variable is set (Automatically set on [Travis](https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables),  [AppVeyor](https://www.appveyor.com/docs/environment-variables/), [CircleCI](https://circleci.com/docs/1.0/environment-variables/), [GitLab](https://docs.gitlab.com/ee/ci/variables/), and probably every other CI provider, too)

Closes https://github.com/electron/electron/issues/10747",954,True,en,0
10756,1,0,0,Internals,jkleinsc,2017-10-11T15:12:24Z,1,1,1,0,,0,False,en,0
10749,1,0,0,Externals,demopark,2017-10-17T01:03:33Z,19,0,1,5,Add notification-action.md file in Chinese,42,False,en,0
10748,1,0,0,Externals,demopark,2017-10-17T01:07:23Z,57,0,1,5,Add notifications.md file in Chinese,36,False,en,0
10746,1,0,0,Externals,poiru,2017-10-12T13:08:58Z,35,4,5,1,"This can be used to restore the default or global value of a `key`
previously set with `setUserDefault`.",105,False,en,0
10744,1,1,0,Externals,robinwassen,2017-10-10T19:51:17Z,1,1,1,0,The previous link pointed to VS 2017 download location.,55,False,en,0
10743,1,0,0,Internals,jkleinsc,2017-10-10T19:04:30Z,1,1,1,0,Fix RCE that turbofan fix didn't address for 1.7,48,False,en,0
10740,1,1,4,Externals,demopark,2017-10-17T01:16:48Z,109,0,1,6,Add notification.md file in Chinese,35,False,en,0
10731,1,1,0,Externals,excfergodst,2017-10-09T19:54:58Z,11,0,1,0,,0,False,en,0
10730,10,1,0,Externals,excfergodst,2017-10-09T19:56:04Z,16,0,4,0,,0,False,en,0
10728,1,0,0,Externals,excfergodst,2017-10-09T19:56:27Z,82,0,1,0,,0,False,en,0
10727,7,5,1,Externals,MarshallOfSound,2017-10-11T23:02:08Z,113,0,5,2,"This is useful for fetching macOS specific images for things like the touchbar.

Fixes #9414",94,True,en,0
10725,1,0,0,Externals,MarshallOfSound,2017-10-10T06:07:05Z,1,0,1,0,Fixes #10442 ,13,False,en,0
10719,1,4,0,Externals,yunzhenhuan,2017-10-09T19:55:30Z,1,1,1,0,,0,False,en,0
10715,1,1,1,Externals,alespergl,2017-10-09T19:56:46Z,8,6,2,0,Fixes #9665,11,False,en,0
10713,1,0,0,Externals,felixrieseberg,2017-10-07T17:04:50Z,3,1,1,0,"A little performance optimization for @alespergl :wink:

",59,True,en,0
10712,1,0,0,Internals,codebytere,2017-10-08T05:03:33Z,0,3,1,0,"per conversation with last night, move to remove deprecation warning and simply show help information alongside opening default app when `electron` is run with no args

/cc @MarshallOfSound @zeke ",198,True,en,0
10711,1,0,0,Externals,yuya-oc,2017-10-26T01:55:50Z,43,1,4,18,"The event is emitted with a webContents when a webview has been attached to an existing webContents. For example, it would be useful to handle 'will-navigate' event in the main process.

```js
win.webContents.on('did-attach-webview', (event, webContents) => {
  webContents.on('will-navigate', (event, url) => {
    if (url !== TRUSTED_URL) {
      event.preventDeefault()
    }
  }
}
```",398,True,en,0
10709,1,2,0,Externals,MarshallOfSound,2017-10-17T07:18:53Z,6,1,2,10,Fixes #10655 ,13,False,en,0
10708,2,2,0,Externals,felixrieseberg,2017-10-06T23:17:52Z,9,0,1,0,"I'm concerned about more and more users loading remote content with `nodeIntegration` enabled. To make sure that developers are educated, I'd like to add the following warning:

![screen shot 2017-10-06 at 1 02 41 pm](https://user-images.githubusercontent.com/1426799/31296353-d59f0a42-aa96-11e7-9027-dbafad372f11.png)
",322,True,en,0
10696,2,13,0,Externals,primalmotion,2017-10-17T14:24:11Z,3,2,1,11,"Previously, the macro was ensuring the` MAC_OS_X_VERSION_10_12` was not defined to decide to compile a `NSWindow` category back porting native tabs or not.

This patch ensures to compile the `NSWindow` category only if the min required version is lesser than 1012 (`MAC_OS_X_VERSION_10_12`)

fixes #10657",308,True,en,0
10694,1,4,0,Internals,zcbenz,2017-10-05T13:48:50Z,1,1,1,0,,0,False,en,0
10693,1,2,0,Externals,makerGeek,2017-10-05T01:21:10Z,3,3,1,0,"nwjs now supports a js script as entrypoint.
cf. http://docs.nwjs.io/en/latest/References/Manifest%20Format/#main",114,False,en,0
10690,1,0,0,Internals,jkleinsc,2017-10-04T18:29:39Z,4,3,1,0,"Newly added test was leaving window open causing tests to fail.

Fixes #10685",79,True,en,0
10688,2,1,2,Internals,jkleinsc,2017-10-10T13:46:21Z,24,6,1,5,"When doing a release, sometimes the GitHub upload fails, so try to retry it once before bailing.",96,False,en,0
10687,1,2,0,Internals,jkleinsc,2017-10-04T14:41:11Z,17,3,3,0,"Improve CircleCI test results for 1-7-x
![screen shot 2017-09-28 at 1 02 47 pm](https://user-images.githubusercontent.com/609052/31180858-bbf04016-a8ed-11e7-8b22-67011602d16b.png)
",182,False,en,0
10683,1,0,0,Internals,jkleinsc,2017-10-03T20:07:25Z,21,19,1,0,,0,False,en,0
10681,4,4,2,Externals,fplucas,2017-10-04T19:45:38Z,92,1,2,1,,0,False,en,0
10680,2,3,0,Externals,felixrieseberg,2017-10-04T05:04:56Z,9,1,2,0,"On Windows, the system doesn't keep track of idle wakeups the same way Unix does - so Chromium throws a nasty `NOTIMPLEMENTED()` every single time we call `process.getCPUUsage()` on Windows. Nothing crashes, but it pollutes the log with lines like these:

```
[1288:1003/084000.939:ERROR:process_metrics.cc(99)] NOT IMPLEMENTED
```

This PR makes sure that we don't even attempt this not implemented call. Instead, we return 0, keeping the current behavior around.",470,True,en,0
10677,1,1,0,Externals,rhysd,2017-10-03T14:16:40Z,8,7,2,0,"I found that return type of `webContents.findInPage()` and `webview.findInPage()` are `void` in `electron.d.ts` (electron v1.7.8).

But from document, they should return `number` which represents request ID. Although I'm not sure how the documents are converted into type definitions, return types don't seem to be recognized from the document correctly. I fixed documents to correct the return types.
",405,True,en,0
10676,1,0,0,Externals,qazbnm456,2017-10-03T11:18:52Z,17,9,2,0,"As https://github.com/electron/electron/pull/10429 got merged in Electron v1.8.x, I've discovered that we didn't check if `wrapped` is a valid object or not [here](https://github.com/electron/electron/blob/master/atom/browser/api/trackable_object.cc#L53-L59).
This will then cause the Electron to crash if the `wrapped` object doesn't belong to a valid memory we can touch.

In this PR, I've added a check before calling the `SupportsUserData::GetUserData` function and also modified the code of `TrackableObjectBase::AttachAsUserData` to call from SupportsUserData with `std::unique_ptr` rather than `raw-pointer` as suggested [here](https://chromium.googlesource.com/chromium/src.git/+/a86f3e33aeeb1e7d0d98319c8000ebd0a20bcabf%5E%21/#F0).

Thanks!",754,False,en,0
10670,8,1,9,Internals,codebytere,2017-10-07T15:07:02Z,74,6,1,5,"Tracking progress for implementation of https://github.com/electron/electron/issues/6440

**Todo:**
- [x] Replace `GetChromeVersionOfScript` in `SetAsDefaultProtocolClient` and `IsDefaultProtocolClient` appropriately",219,True,en,0
10667,4,3,4,Externals,dittos,2017-10-04T06:03:46Z,92,0,12,2,"This PR adds support for controlling the opacity of BrowserWindow. It makes the entire window transparent - including system window borders.

Implemented on Windows and macOS.",177,True,en,0
10661,2,1,0,Externals,felixrieseberg,2017-10-03T23:09:12Z,39,1,1,4,"When implementing the BrowserView drag behavior, I was _clever_ and added logic to prevent the window from being dragged underneath the menubar. Downside: If there's a screen _above_ the menubar, users won't be able to drag the window there.

This code change is only relevant when Electron is built with an SDK < 10.11 (which Electron currently does, sadly). If built with >= 10.11, you'll get native drag behavior. Below, you'll get this fix: It'll check if there's a screen above the menubar, and if so, allow dragging it there.

If you're wondering why all of this is necessary: The BrowserView is _above_ everything else, including all the layers that NSApplication and NSWindow add to our window.  ",708,True,en,0
10660,3,4,3,Internals,codebytere,2017-09-29T23:47:09Z,35,0,2,0,let's talk about what we'd like to implement around marking and closing stale issues!,85,False,en,0
10647,2,0,0,Internals,jkleinsc,2017-09-28T17:05:43Z,234,9,3,0,"Fixes running release builds in CircleCI
Enables better reporting on tests in CircleCI
![screen shot 2017-09-28 at 1 02 47 pm](https://user-images.githubusercontent.com/609052/30979971-5ea322f6-a44d-11e7-84b5-e129e04200b9.png)
",230,False,en,0
10644,2,0,2,Internals,jkleinsc,2017-09-29T20:11:43Z,6,5,1,1,Minor doc change to point to correct CI locations,49,False,en,0
10643,3,0,0,Internals,jkleinsc,2017-09-28T14:48:03Z,277,3,3,0,"Add prerelease script to verify release.
Update CircleCI config to properly run releases",89,False,en,0
10639,1,0,0,Externals,enlight,2017-09-29T18:17:01Z,1,1,1,1,,0,False,en,0
10633,15,8,7,Internals,codebytere,2017-10-07T04:08:24Z,245,195,4,9,"Tracks progress on https://github.com/electron/electron/issues/5345

Tasks:
- [x] Make help response the response for no args specified
- [x] Make default app a flagged option
- [x] show Chrome, Node, and V8 versions
- [x] link to `electron-forge`
- [x] remove references to prebuilt 
- [x] link the logo to the website
- [x] Add more information to `default-app`, maybe some links to resources and examples? 

Please feel free to add input!

Thought it could use some design sprucing:

<img width=""805"" alt=""screen shot 2017-09-27 at 11 56 18 pm"" src=""https://user-images.githubusercontent.com/2036040/30948970-a4ed4f0a-a3e1-11e7-8880-653345fe7be6.png"">

(I'm aware of some of the spacing/padding issues and am working on them)

/cc @zeke ",759,True,en,0
10631,1,0,0,Externals,poiru,2017-09-27T18:20:31Z,3,3,2,0,"This cherry-picks #10483 to fix #5057.

cc @zcbenz",52,True,en,0
10630,1,0,0,Externals,poiru,2017-09-27T18:20:22Z,3,3,2,0,"This cherry-picks #10483 to fix #5057.

cc @zcbenz",52,True,en,0
10628,1,1,0,Externals,poiru,2017-09-27T13:06:04Z,1,1,1,0,This cherry-picks #10298 for `1-7-x`.,37,False,en,0
10627,2,0,1,Externals,felixrieseberg,2017-09-27T15:08:08Z,8,0,1,0,"When using `webkit-app-region: drag` together with BrowserViews, one is able to move the window even when in fullscreen mode. Trippy, right?

The reason is that we're moving the window manually on older versions of macOS that do not support the native `performWindowDragWithEvent`. This PR adds a quick check if we're in fullscreen mode - which cancels a move when in fullscreen mode.",386,True,en,0
10620,2,0,0,Internals,zcbenz,2017-09-27T03:11:27Z,3,1,2,0,"Update libchromiumcontent for https://github.com/electron/libchromiumcontent/pull/363.

Close https://github.com/electron/electron/issues/10571.",146,True,en,0
10618,9,0,3,Internals,codebytere,2017-09-27T02:33:06Z,41,0,3,0,"Adds the feature requested in https://github.com/electron/electron/issues/10440

Ability to fetch a menu items by passing in `MenuItem`s and an `id`. 

Called like: `const fsc = menu.getMenuItemById('fullScreen');`",218,True,en,0
10614,5,2,2,Internals,zcbenz,2017-09-27T04:56:38Z,50,11,2,1,,0,False,en,0
10612,1,0,0,Externals,felixrieseberg,2017-10-17T02:31:47Z,1,1,1,21,"Tiny fix: The docs suggest `NativeImage` for `icon`, but a string is also allowed.",82,False,en,0
10611,1,0,0,Externals,felixrieseberg,2017-09-26T00:54:44Z,10,1,1,0,"The browser-process notifications are either missing or reusing images from the last notification. The reason is simple: In [atom_api_notification, we set the](base::TimeTicks::Now()) `icon_url` to `GURL()`, but in the notification presenter, [we assume an okay and unique path](https://github.com/electron/electron/blob/master/brightray/browser/win/notification_presenter_win.cc#L68-L73).

This PR ensures that our ""download icon"" logic handles non-valid or empty URLs, using a timestamp as an alternative. The timestamp is guaranteed to be increasing.

Closes #10610",572,True,en,0
10609,1,0,0,Externals,alespergl,2017-09-26T01:50:46Z,10,11,1,0,,0,False,en,0
10602,2,1,0,Internals,zcbenz,2017-09-25T02:44:01Z,9,12,2,0,,0,False,en,0
10592,1,0,0,Internals,zeke,2017-09-24T02:29:55Z,0,1,1,0,"Reverts electron/electron#9603

When I run `npm run lint` (or more specifically `npm run lint-docs`) on master, I get a failure:

```
Error: Ruh roh, ""Options"" is already declared
    at Object.keys.sort.forEach (/Users/z/Desktop/electron/node_modules/electron-typescript-definitions/lib/dynamic-param-interfaces.js:77:17)
    at Array.forEach (<anonymous>)
    at Object.flushParamInterfaces (/Users/z/Desktop/electron/node_modules/electron-typescript-definitions/lib/dynamic-param-interfaces.js:70:142)
    at module.exports (/Users/z/Desktop/electron/node_modules/electron-typescript-definitions/index.js:69:19)
    at apiPromise.then.then.API (/Users/z/Desktop/electron/node_modules/electron-typescript-definitions/cli.js:56:18)
    at <anonymous>
    at process._tickCallback (internal/process/next_tick.js:188:7)
    at Function.Module.runMain (module.js:611:11)
    at startup (bootstrap_node.js:158:16)
    at bootstrap_node.js:598:3
```

I don't think this was actually fixed. Given that there are green PRs opened since this was merged, I'm inclined to believe that the linter may not be running on CI.

cc @MarshallOfSound ",1154,True,en,0
10591,2,1,0,Internals,zeke,2017-09-24T01:25:58Z,2,2,1,0,"It seems these tests keep getting turned on and off. Not sure of the history here but we want to get a new 1.7 release out and this is blocking.

https://github.com/electron/electron/commit/68e0fbfd60bbc2fe8a33694f118555922c9c5b5a#diff-6428a7ecb6a3a2831eae23aee7efeac5
https://github.com/electron/electron/commit/a7cb89aeb54dca1e97c419fef0448d049f86f565#diff-6428a7ecb6a3a2831eae23aee7efeac5
https://github.com/electron/electron/commit/5ccae79ea725b945815d222a79c1d963aefd1280#diff-6428a7ecb6a3a2831eae23aee7efeac5

cc @zcbenz ",533,True,en,0
10587,1,0,0,Internals,jkleinsc,2017-09-23T09:14:51Z,1,1,1,0,,0,False,en,0
10586,12,0,0,Externals,MarshallOfSound,2017-09-23T22:27:08Z,108,11,13,0,"Pulls in:

* [x] https://github.com/electron/electron/pull/10469
* [x] https://github.com/electron/electron/pull/10518

/cc @jkleinsc ",139,True,en,0
10585,1,0,0,Internals,jkleinsc,2017-09-23T07:06:35Z,1,1,1,0,,0,False,en,0
10573,1,0,0,Internals,zeke,2017-09-25T19:40:46Z,3,0,1,3,üìù ,5,False,he,0
10558,1,6,0,Externals,Tyriar,2017-09-24T01:16:29Z,158,55,2,3,cc @zeke @cifratila @jkleinsc @tonyganch @vanessayuenn,54,False,nl,0
10555,3,7,0,Internals,zeke,2017-09-27T16:07:38Z,21,0,1,7,"This PR introduces a [CODEOWNERS](https://help.github.com/articles/about-codeowners/) file, and is the result of a Tokyo MiniSummit mob programming session. Rather than assigning individuals, we've created a team for each pattern.

See [gitignore](https://git-scm.com/docs/gitignore) docs for details on how the pattern matching works.",337,True,en,0
10552,1,0,0,Internals,codebytere,2017-09-20T02:00:41Z,9,86,1,0,"Provides a fix for https://github.com/electron/electron/issues/10477

Update `shell.openItem(/path/to/dir)` so that it uses NSWorkspace instead of the AE api, which is now deprecated.",185,True,en,0
10550,1,3,0,Externals,ColMugX,2017-09-24T00:32:51Z,1,1,1,4,"zh-CN doc had a typo.

And fix it.",36,True,en,0
10542,1,3,0,Externals,EthianWong,2017-09-24T00:33:44Z,0,4,3,5,More details: https://github.com/electron/electron/commit/8d3e09747a778b54317c9446f9da6db2fa27c1bd,98,False,it,0
10540,1,0,0,Externals,bpasero,2017-09-18T03:01:03Z,1,1,1,0,It seems like this property can be optional.,44,False,en,0
10537,3,1,6,Externals,qazbnm456,2017-10-26T15:51:44Z,29,9,1,39,"This commit is a security improvement for https://github.com/electron/electron/pull/10076, as @javan suggested, we should use `textContent` instead. Besides, I also revise some code to improve code quality.

Ref: https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet",283,True,en,0
10534,3,4,0,Externals,robbix1206,2017-10-18T13:32:31Z,6,0,1,32,"Add the npx command to quickstart guide
It avoids going to the node_modules folder to execute",94,False,en,0
10520,1,7,0,Externals,Alex-D,2017-09-22T03:20:38Z,1,1,1,7,,0,False,en,0
10518,7,2,3,Externals,MarshallOfSound,2017-09-20T03:54:48Z,95,9,12,5,"Wait for the IO thread to be a thing before attempting to listen on the socket

Fixes #9880",93,True,en,0
10517,1,3,3,Externals,yuya-oc,2017-09-25T15:04:08Z,6,1,1,11,"[Control Panel] -> [Ease of Access] -> [Make it easier to focus on tasks] -> [Adjust time limits and flashing visuals] can set the duration to show a balloon. In this PR, desktop notifications would follow the setting as well. So users can set the desired duration (default value is 5 seconds).",294,False,en,0
10516,1,1,0,Externals,alespergl,2017-09-22T03:29:54Z,1,0,1,7,"There's a potential crash when iterating over toast instances where a null pointer is dereferenced in case an instance's HWND has already been destroyed.

This is a backport candidate to previous releases which have Windows 7 notifications.",242,True,en,0
10514,1,0,0,Internals,zcbenz,2017-09-14T08:21:54Z,3,7,1,0,"It is also crashing on mac, but just not as frequent as other platforms.",72,False,en,0
10510,17,15,3,Externals,brenca,2017-11-13T09:04:35Z,170,69,23,60,"This PR aims to fix the following bugs:
 - devtools on Windows would crash when the user typed anything in the console (in detached state). This was related to the datalist element support that I added a while back. The normal window with the devtools  of an offscreen one, trying to show suggestions (this is where the datalist comes into play) confused the system enough to crash.
 - devtools for an offscreen window wouldn't render properly on MacOS
 - any dialogs (alert, confirm, download) would show the hidden dummy window on MacOS because these were modal dialogs. I fixed this by forcing the dialogs to be detached from any window in case the parent is offscreen.
 - datalist elements on windows wouldn't properly set the input's value when a suggestion was accepted. ( #9860 )
- datalist elements didn't render at the proper position ( #11035 )",859,False,en,0
10509,1,2,0,Externals,kewde,2017-09-17T10:26:28Z,3,3,1,3,w -> win,8,False,en,0
10508,2,0,0,Externals,danielma,2017-10-03T11:16:51Z,36,0,8,19,"Add support for the [`NSWindow addTabbedWindow`][nsw] method on MacOSX

This plays nicely with the changes from #9052 and #9725

Usage samples available in [this commit][c] in my fork of`electron-quick-start`

[nsw]: https://developer.apple.com/documentation/appkit/nswindow/1855947-addtabbedwindow
[c]: https://github.com/danielma/electron-quick-start/commit/79f06591dff0bf71530f5a2205b906dc11327d0c

Fixes #9094 ",423,True,en,0
10505,1,1,0,Externals,qazbnm456,2017-09-24T00:36:23Z,10,2,1,10,Update the `web-request.md` to follow up the changes https://github.com/electron/electron/commit/2048a1a638cbba8903052087dc50b3345d3e358c recently made. Some typos were revised as well.,185,False,en,0
10502,4,0,0,Internals,jkleinsc,2017-09-23T21:26:04Z,37,13,3,11,"There were some issues with the upload script when running on our Appveyor Enterprise install at https://windows-ci.electronjs.org.

This PR refactors our upload script on releases to use the GitHub API through the [Node.js github  package](https://www.npmjs.com/package/github).",281,True,en,0
10499,1,0,0,Internals,miniak,2017-09-12T14:04:18Z,1,1,1,0,"`getGPUFeatureStatus` is incorrectly documented as `getGpuFeatureStatus`, therefore electron.d.ts contains an incorrect method signature.

in atom/browser/api/atom_api_app.cc
```
      .SetMethod(""getGPUFeatureStatus"", &App::GetGPUFeatureStatus)
```",254,True,en,0
10497,3,1,0,Externals,Toinane,2017-09-12T15:49:36Z,5,5,2,0,"- add markdown linking when missing
- fix ""incompatible"" word in notification-action.md",88,False,en,0
10492,2,0,0,Internals,zcbenz,2017-09-12T07:18:48Z,1,3,2,0,It was using a branch that had been deleted.,44,False,en,0
10487,1,3,0,Externals,Toinane,2017-09-11T17:08:02Z,1,1,1,0,"Just fix the word ""directory"" in the Touch Bar API docs! :)",59,False,en,0
10483,1,7,0,Externals,jublo,2017-09-27T17:26:25Z,3,3,2,16,Avoid downloading updates twice. Fix #5057.,43,False,fr,0
10481,1,3,0,Externals,John2143,2017-09-11T00:28:57Z,1,1,1,0,"The link previous link exists in the wayback machine (http://web.archive.org/web/20151030063902/https://strongloop.com/strongblog/whats-new-node-js-v0-12-multiple-context-execution/), however on the live page the link is dead. This is the commit message for node that summarizes it well, but maybe the better option is just to remove the link entirely.",352,False,en,0
10472,1,3,0,Externals,lucaslopes,2017-09-09T19:38:08Z,2,2,1,0,,0,False,en,0
10469,1,12,0,Externals,poiru,2017-09-08T14:22:18Z,4,2,1,0,"Previously, when triggering the save dialog through e.g. `<a download>`
links (e.g. http://jsfiddle.net/koldev/cW7W5/), the extension was only
saved if Finder was set to show all extensions by default. We now always
display the extension to make sure that it is saved.

If we want to keep the extension hidden, we could also populate the
allowed file types array with the extension from the default filename,
but that would have interfered with how we set the filters.",475,False,en,0
10454,2,3,0,Externals,MarshallOfSound,2017-09-08T04:45:25Z,9,9,2,1,"Fixes https://github.com/electron/electron-typescript-definitions/issues/75

/cc @bpasero ",92,True,en,0
10453,1,1,0,Externals,bpasero,2017-09-07T04:19:18Z,1,0,1,0,This helps for electron.d.ts containing this property. See https://github.com/electron/electron/issues/10448,108,False,en,0
10450,1,0,0,Internals,jkleinsc,2017-09-06T15:25:15Z,1,1,1,0,"Fix the issue (#9173) of Backspace can not erase the last one character during Japanese IME conversion (macOS) for 1.6.x

",124,True,en,0
10430,12,13,12,Externals,MarshallOfSound,2017-12-05T10:15:11Z,212,9,18,93,"This adds three new instance methods to `session` objects that allow you to set preload scripts, these scripts will be executed before normal preload scripts and you can have as many as you want.  

API:
```markdown
#### `ses.addPreload(preloadPath)`

* `preloadPath` String - An absolute path to the preload script

Adds a script that will be executed on ALL web contents that are associated with
this session just before normal `preload` scripts run.

#### `ses.removePreload(preloadPath)`

* `preloadPath` String - An absolute path to the preload script

Removes the given script from the list of preload scripts

#### `ses.getPreloads()`

Returns `String[]` an array of paths to preload scripts that have been registered
```",748,True,en,0
10429,7,2,3,Externals,qazbnm456,2017-09-13T13:23:44Z,19,7,3,10,"This PR is a mitigation to https://github.com/electron/electron/issues/10061, and therefore ppl can use the webContentsGetId to track the origin requester. The variable name `webContentsGetId` is taken from https://github.com/electron/electron/commit/a64978b812848e037a9ff81b1b4e2555aff8ad87.

In addition, it would be convenient if we can have a `webContents.fromGetId` api to get the corresponding `WebContents`, just like what `webContents.fromId` does. How do you think?",476,True,en,0
10403,7,4,5,Internals,vanessayuenn,2017-10-03T18:23:34Z,84,24,3,33,"Modify the `bump-version` script to reflect changes in naming convention as per #10336.
New usage would be:
- `npm run bump-version -- --bump=patch` to increment patch version, or
- `npm run bump-version -- --stable` to promote current beta to stable, or 
- `npm run bump-version -- --version=1.8.1-beta.1` to set version number directly.

Note:
- you can use both `--bump` and `--stable` simultaneously.
- not all the version numbers will be affected due to certain format restrictions
- this will change `process.versions.electron` as well

To do:
- [x] kick off a round of fake builds with this new naming convention to make sure nothing is broken as a result
- [x] document changes ",699,False,en,0
10396,1,0,0,Externals,alespergl,2017-08-30T10:05:06Z,4,27,4,0,"As we've switched to dynamic CRT on Windows, the function wrappers exposed from `node.dll` are no longer necessary. This PR removes the wrappers.

Also, I noticed that when the static build is built in debug mode, it crashes because some ATL static objects don't get initialized. I included the `atlbase.h` header which ensures that the initialization happens correctly.",372,True,en,0
10395,1,0,0,Externals,alespergl,2017-08-30T08:43:47Z,19,0,1,0,"Forward-porting the same fix from 1.7
Ref. #10365",50,False,en,0
10394,1,0,0,Internals,zcbenz,2017-08-30T08:42:04Z,1,1,1,0,,0,False,en,0
10393,1,3,0,Externals,j3l11234,2017-09-12T07:19:09Z,37,0,1,13,"I patch the fix from 
https://chromium.googlesource.com/chromium/src.git/+/9984518a9c261026b5d2c4b82c7fd7372a06f1c2
https://chromium.googlesource.com/chromium/src.git/+/1eb85221f8f0805a5172ea603dddc706fd4d90a4
And it works!
Fix the issue https://github.com/electron/electron/issues/7551

",294,False,en,0
10390,2,0,0,Internals,jkleinsc,2017-08-30T01:52:35Z,1,1,1,0,"Corresponding Electron PR for electron/libchromiumcontent#331

Backports https://chromium-review.googlesource.com/c/575445/

Refs https://bugs.chromium.org/p/chromium/issues/detail?id=695427

Fixes electron/electron#9413",226,True,en,0
10389,1,0,0,Internals,zeke,2017-08-29T20:26:28Z,0,0,1,0,"We now have a `.github` directory thanks to #10283. This PR moves the GitHub issue template there to keep the top-level project directory a little cleaner.

See https://github.com/blog/2111-issue-and-pull-request-templates",224,True,en,0
10380,1,0,0,Externals,MarshallOfSound,2017-08-29T20:22:41Z,2,2,1,0,Fixes #10379,12,False,en,0
10377,1,1,0,Internals,zcbenz,2017-08-29T14:50:33Z,1,1,1,0,"```
win, fs: support unusual reparse points

Allow for running uv_fs_stat and uv_fs_lstat on all reparse points. One
of such points is new OneDrive drive with ""files on demand"" feature
enabled.
```

cc @jkleinsc ",220,False,en,0
10375,1,0,0,Externals,felixrieseberg,2017-08-29T14:52:27Z,35,1,5,0,"This PR backports #10293, adding support for `sound` to macOS notifications.

The cherry-pick had zero conflicts and the feature still works fine üçí

cc @jkleinsc @CharlieHess",181,True,en,0
10374,1,0,0,Externals,felixrieseberg,2017-08-29T13:34:59Z,167,1,6,0,"This PR backports #10232, adding `-webkit-app-region` support to BrowserViews.

The cherry-pick had zero conflicts and the feature still works fine üçí 

cc @jkleinsc @MarshallOfSound ",189,True,en,0
10366,1,2,0,Externals,syohex,2017-09-12T07:22:38Z,3,0,1,15,"A parent window is not closed if a child modal window still exists on macOS.
So a child window should be closed before parent window closed.

### Reproduce code

https://github.com/syohex/electron-app-quit-issue

`npm install && npm run start`

This example shows a window and show its child modal window. And then it calls `app.quit()` after three seconds. I expect that all windows are closed by `app.quit()` but parent window is not closed.

I checked this behavior by `lldb`. `NSWindow#performClose` does nothing(also delegate methods are not called) if child modal window still exists. Taking such behavior into consideration, a child window should be closed before parent window closed. (I could not find about this behavior from `NSWindow` document)

###  Gif animations

#### Original code(A parent window is not closed)

![before](https://user-images.githubusercontent.com/554281/29759943-e52ab5a2-8bfa-11e7-855d-73b1e931f138.gif)

#### This version(Both parent and child windows are closed)

![after](https://user-images.githubusercontent.com/554281/29759726-020419fe-8bf9-11e7-88f5-110ed1ca5e71.gif)
",1133,False,en,0
10365,2,5,1,Externals,alespergl,2017-08-29T15:55:13Z,72,0,2,1,"This is a fix for #10188 which was introduced by switching to dynamically linked CRT on Windows. The problem went unnoticed because it is mostly harmless other than recording the app crash in the Windows Event Log. It is desirable to merge this to master and to the 1.7 stream as well.

### Description:

Chromium has its own TLS subsystem which supports automatic destruction of thread-local data, and also depends on memory allocation routines provided by the CRT. The problem is that the auto-destruction mechanism uses a hidden feature of the OS loader which calls a callback on thread exit, but only after all loaded DLLs have been detached. Since the CRT is also a DLL, it happens that by the time Chromium's `OnThreadExit` function is called, the heap functions, though still in memory, no longer perform their duties, and when Chromium calls `free` on its buffer, it triggers an access violation error. 

The workaround is to invoke Chromium's `OnThreadExit` in time from within the CRT's atexit facility, ensuring the heap functions are still active. The second invocation from the OS loader code will be a no-op.",1128,True,en,0
10361,3,3,0,Externals,sbannigan,2017-10-05T03:20:01Z,54,10,8,39,Similar to #9760 - Adds API for listening to mouse-move events for Tray. Also adds position for the Tray click event. This allows for more precise hover states and click events on the tray icon.,194,False,en,0
10356,2,0,0,Internals,vanessayuenn,2017-08-27T03:03:55Z,2,1,1,1,"Add a note about the subtle difference between `window.onbeforeunload = handler` and `window.addEventListener('beforeunload', handler)`. This closes #10259. ",157,False,en,0
10355,1,2,0,Externals,owais,2017-09-12T06:22:32Z,1,1,1,17,"Ubuntu is switching to Gnome in 17.10 but it's not going to be the stock Gnome session. It's going to support the existing Unity APIs. Support has already landed for application indicators and likely other APIs (Launcher,etc) will be supported soon. The Ubuntu Gnome session will have `XDG_CURRENT_DESKTOP=ubuntu:GNOME` environment variable.

Ref: https://didrocks.fr/2017/08/23/ubuntu-gnome-shell-in-artful-day-7/",416,True,en,0
10344,1,0,0,Internals,jkleinsc,2017-09-13T13:48:19Z,70,0,2,19,Use CircleCI for Linux builds so that they are publicly viewable.,65,False,en,0
10336,12,8,3,Internals,zeke,2017-10-07T05:14:43Z,231,88,5,44,This PR is an attempt to document our new (as of yet unused) strategy for doing pre-release versions of Electron. This content is optimistically projecting that we'll start using this approach with 1.8.0.,204,False,en,0
10333,2,0,2,Internals,zeke,2017-08-30T14:43:00Z,18,3,1,7,wrote this last week and forgot to make a PR of it.,51,False,en,0
10328,1,0,0,Internals,zeke,2017-08-22T22:03:05Z,1,1,1,0,"Electron 1.8 will use Node 8. https://github.com/electron/electron/pull/9992

 This PR bumps the TypeScript definition file in the `electron` npm module to match.",164,True,en,0
10326,3,4,2,Externals,develar,2017-09-27T22:14:45Z,7,0,1,36,,0,False,en,0
10321,1,0,0,Externals,kaylanm,2017-09-11T09:49:57Z,179,0,8,20,Adds methods to the Window object allowing control of macOS native tab functionality.,85,False,en,0
10318,1,0,0,Internals,zcbenz,2017-08-22T01:02:16Z,1,1,1,0,"As discussed with the maintainers, we are using 57 as node module version in Electron 1.8. This matches Node v8, which uses 57 for V8 5.8 - 6.0.

```JSON
{""version"":""v8.4.0"",""date"":""2017-08-15"",""npm"":""5.3.0"",""v8"":""6.0.286.52"",""uv"":""1.13.1"",""zlib"":""1.2.11"",""openssl"":""1.0.2l"",""modules"":""57"",""lts"":false},
{""version"":""v8.3.0"",""date"":""2017-08-08"",""npm"":""5.3.0"",""v8"":""6.0.286.52"",""uv"":""1.13.1"",""zlib"":""1.2.11"",""openssl"":""1.0.2l"",""modules"":""57"",""lts"":false},
{""version"":""v8.2.1"",""date"":""2017-07-20"",""npm"":""5.3.0"",""v8"":""5.8.283.41"",""uv"":""1.13.1"",""zlib"":""1.2.11"",""openssl"":""1.0.2l"",""modules"":""57"",""lts"":false},
{""version"":""v8.2.0"",""date"":""2017-07-19"",""npm"":""5.3.0"",""v8"":""5.8.283.41"",""uv"":""1.13.1"",""zlib"":""1.2.11"",""openssl"":""1.0.2l"",""modules"":""57"",""lts"":false},
{""version"":""v8.1.4"",""date"":""2017-07-11"",""npm"":""5.0.3"",""v8"":""5.8.283.41"",""uv"":""1.12.0"",""zlib"":""1.2.11"",""openssl"":""1.0.2l"",""modules"":""57"",""lts"":false},
{""version"":""v8.1.3"",""date"":""2017-06-29"",""npm"":""5.0.3"",""v8"":""5.8.283.41"",""uv"":""1.12.0"",""zlib"":""1.2.11"",""openssl"":""1.0.2l"",""modules"":""57"",""lts"":false},
{""version"":""v8.1.2"",""date"":""2017-06-15"",""npm"":""5.0.3"",""v8"":""5.8.283.41"",""uv"":""1.12.0"",""zlib"":""1.2.11"",""openssl"":""1.0.2l"",""modules"":""57"",""lts"":false},
{""version"":""v8.1.1"",""date"":""2017-06-13"",""npm"":""5.0.3"",""v8"":""5.8.283.41"",""uv"":""1.12.0"",""zlib"":""1.2.11"",""openssl"":""1.0.2l"",""modules"":""57"",""lts"":false},
{""version"":""v8.1.0"",""date"":""2017-06-08"",""npm"":""5.0.3"",""v8"":""5.8.283.41"",""uv"":""1.12.0"",""zlib"":""1.2.11"",""openssl"":""1.0.2l"",""modules"":""57"",""lts"":false},
{""version"":""v8.0.0"",""date"":""2017-05-30"",""npm"":""5.0.0"",""v8"":""5.8.283.41"",""uv"":""1.11.0"",""zlib"":""1.2.11"",""openssl"":""1.0.2k"",""modules"":""57"",""lts"":false},
```",1670,True,en,0
10308,1,0,0,Internals,zcbenz,2017-08-22T00:19:27Z,12,0,2,0,"It would allow for some interesting things, let's keep it a private API first.",78,False,en,0
10307,4,2,6,Externals,liusy182,2017-09-11T09:40:36Z,28,2,4,21,"fixes #10240

A followup PR from #10247",41,True,en,0
10306,1,3,0,Externals,lisurc,2017-08-21T16:14:57Z,15,17,1,1,"Also fix some grammar and typing mistakes.
[ci skip]",53,False,en,0
10305,5,6,7,Externals,ivmirx,2017-09-11T08:58:21Z,58,2,5,22,"In the issue [#7206](https://github.com/electron/electron/issues/7206) we were discussing that Electron apps are inaccessible unless VoiceOver is enabled. While it's a working solution for users with vision impairment, all other users and apps that require accessibility can't interact with Electron-based software because they don't keep VoiceOver running.

I suggest adding `AXManualAccessibility` for programmatically enabling it in Electron apps. The reason for a new attribute is that `AXEnhancedUserInterface` is already reserved by VoiceOver.

Adding this attribute will allow both Electron developers and 3rd party developers to enable and disable accessibility from their code by calling `accessibilitySetValue:forAttribute:` on the application.

It will be also possible to create a small utility app to switch accessibility in Electron-based apps until there's a native UI solution (like the accessibility settings page in Chrome).",948,True,en,0
10304,1,3,0,Externals,kyo-ago,2017-08-21T16:17:27Z,1,1,1,2,"Original text
```
The proxyRules has to follow the rules below:
```

To japanese text
```
`proxyRules`„ÅØÊ¨°„ÅÆ„É´„Éº„É´„Å´Âæì„ÅÑ„Åæ„Åô„ÄÇ
```
Ôºà`„Å§„Åµ„ÅÉ` is not japanese wordÔºâ",190,False,ja,0
10303,1,2,0,Externals,MathieuDebit,2017-08-31T18:49:17Z,6,2,1,12,"Based on MDN example:
https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Examples",106,False,en,0
10298,1,9,0,Internals,joshaber,2017-08-24T10:29:13Z,1,1,1,5,This is to pick up the fix to https://github.com/Squirrel/Squirrel.Mac/issues/212.,82,False,en,0
10293,4,4,3,Externals,CharlieHess,2017-08-21T23:15:48Z,35,1,5,4,"In order for Slack to use the new main process notifications, we need support for the `soundName` property. Fortunately this is a cinch to add. To test this, open the default app and in the console, make a notification like:

```
remote = require('electron').remote;
Notification = remote.Notification;
new Notification({ title: 'Bonk', sound: 'Submarine' }).show();
```

You can also play custom sounds, but you'll need to copy the sound files into the app bundle or one of these locations:

* `~/Library/Sounds`
* `/Library/Sounds`
* `/Network/Library/Sounds`
* `/System/Library/Sounds`


",607,True,en,0
10289,1,0,0,Internals,zcbenz,2017-08-17T08:41:13Z,2,2,2,0,It was broken by #10183.,24,False,en,0
10283,2,2,0,Internals,vanessayuenn,2017-08-16T19:56:20Z,29,0,1,0,"This PR adds the config file needed for [the probot plugin](https://github.com/behaviorbot/welcome) that would welcome users to the Electron repo. 
‚ú® @hiimbex @bkeepers
üçê @zeke 

Screenshot here shows the message for someone opening their first issue:
![image](https://user-images.githubusercontent.com/6842965/29380619-5a172438-8294-11e7-9ac3-581ac2f186fa.png)
",373,False,en,0
10280,3,1,0,Externals,alexeykuzmin,2017-08-21T10:28:14Z,15,4,2,4,"It was disabled during Chromium 59 upgrade, see #9946.",54,False,en,0
10279,2,1,0,Externals,alexeykuzmin,2017-08-22T06:25:38Z,14,10,7,5,"It was disabled during Chromium 59 upgrade, see #9946.",54,False,en,0
10277,12,5,0,Externals,alespergl,2017-08-29T10:22:38Z,90,33,15,13,See https://github.com/electron/libchromiumcontent/pull/345,59,False,en,0
10275,2,0,6,Externals,juturu,2017-08-19T03:58:56Z,4,1,1,3,Fixes #10274 ,13,False,en,0
10273,2,2,2,Externals,rhysd,2017-08-18T10:07:56Z,3,3,2,2,"While moving from DefinitelyTyped's `electron/index.d.ts` to official `electron.d.ts`, I found some args should be optional. Fixed them in this PR.",147,False,en,0
10271,1,7,0,Externals,kaylanm,2017-09-11T08:41:31Z,10,0,2,26,"Fixes #9086, #10064.

![image](https://user-images.githubusercontent.com/1063516/29323157-05578ffa-81ae-11e7-9d31-7117002a4076.png)",133,True,en,0
10266,1,0,0,Internals,zeke,2017-08-14T18:34:44Z,1,0,1,0,"Reverts electron/electron#10250

See #10265 ",46,True,ca,0
10264,1,0,0,Externals,tarruda,2017-08-17T06:57:30Z,3,2,1,2,"When a link is clicked with the middle mouse button, chrome opens a window with
""background-tab"" disposition. This is not currently handled in sandbox mode,
causing an api::WebContents to leak leading to eventual crash(since it has no
wrapper).

Also fix the event handler for ""-add-new-contents"" by having it call
`event.preventDefault()` when the window creation should be cancelled.",391,False,en,0
10254,5,8,5,Externals,zachflower,2017-09-14T00:39:50Z,141,1,10,31,"Modern implementations of macOS utilize desktop spaces to implement fullscreen functionality, which presents a less-than-ideal interaction for users who use multiple monitors (and prefer to keep those monitors within the same space), or prefer to have more control over their ability to multitask while using a fullscreen application.

Prior to the release of Lion, fullscreen functionality on Mac OS X acted similarly to the current fullscreen functionality on Windows and Linux. This PR provides functionality to simulate that same style of pre-Lion fullscreen on macOS for Electron applications.

**Full Disclosure: This is my first attempt at writing Objective-C... ever... so _any_ feedback would be greatly appreciated!** üòÑ

### Usage

Simple fullscreen support can be enabled by passing `simpleFullscreen: true` to the `BrowserWindow` constructor which, when enabled, will override the default macOS fullscreen functionality with the new simple fullscreen functionality.

Additionally, two new methods (`setSimpleFullScreen()` and `isFullScreen()`) have been added for more granular usability.

### Demonstration

Here is a short animation that demonstrates what simple fullscreen support looks like (pay attention to the window, as it stays on the current space rather than moving to a new one, which is the default functionality).

![](https://user-images.githubusercontent.com/920019/29246939-75df5668-7fc4-11e7-9d7e-63e8dd923c73.gif)

### Background

Because popular desktop applications like Sublime Text 3, MacVim, and iTerm2 provide support for pre-Lion fullscreen, this particular feature has been requested many times over in several popular open source Electron projects (including the Electron core itself):

- Electron Core Feature Request - https://github.com/electron/electron/issues/8218
- Visual Studio Code Feature Request - https://github.com/Microsoft/vscode/issues/5344
- Hyper Feature Request - https://github.com/zeit/hyper/issues/526
- Atom Feature Request - https://github.com/atom/atom/issues/967 ",2057,True,en,0
10253,1,3,6,Externals,tarruda,2017-08-15T10:40:06Z,144,25,7,2,"This makes use of the new options in https://github.com/electron/libchromiumcontent/pull/344

- Add `--debug_libchromiumcontent` to build libchromiumcontent for debugging
  (shared library build).
- By default, only invoke `gclient sync` the first time to checkout chromium
  source tree. Add `--force_update_libchromiumcontent` switch to force updating.
- Document new options.

The goal is to allow faster edit/compile cycles when debugging/making changes
to libchromiumcontent. I have tested on all three desktop platforms and everything seems to be OK, but it would be great if other developers try it too.",619,True,en,0
10251,21,5,14,Externals,leo,2017-08-21T22:22:43Z,103,24,3,9,"As discusssed with @zeke on Slack, we concluded that:

- The API docs for `autoUpdater` should really only be API docs, not contain a guide
- There needs to be a guide on how to implement updates

Both of these issues are resolved with this PR.",249,True,en,0
10250,1,0,0,Internals,zeke,2017-08-14T04:19:29Z,0,1,1,2,"Apparently this script was needed for old versions of npm. It is presumably safe to remove it now.

cc @MylesBorins @vanessayuenn @malept ",140,True,en,0
10246,1,0,0,Internals,zeke,2017-08-11T13:50:09Z,7,1,1,0,"I went ahead and did this for 1.7.5 just now, since we promoted it yesterday.",77,False,en,0
10232,16,7,8,Externals,felixrieseberg,2017-08-24T00:30:56Z,167,1,6,14,"This PR adds support for `-webkit-app-region` to the experimental BrowserView API. Major downside right now: This PR ensures that the draggable regions of the HTML content in the window are respected, it does not implement draggable regions for the content of the BrowserView.

#### NSView Implementation Overview
*Before*
:three: BrowserView (not draggable)
:two: Multiple exclusion zones
:one: Window's RenderView (contains a NSView that's draggable)
:zero: Window

*After*
:five: Multiple exclusion zones
:four: Draggable NSView
:three: BrowserView (not draggable)
:two: Multiple exclusion zones
:one: Window's RenderView (contains a NSView that's draggable)
:zero: Window

This PR uses `performWindowDragWithEvent` where supported (10.11 and up) and good ol' window moving code on versions below. This PR also didn't have to do anything on Windows, where the window's `webkit-app-region` are already respected regardless of a BrowserView presence.

#### Why the window's draggable regions?
Despite my best efforts, I was completely unable to get the `-webkit-app-region`-regions for the content of the actual BrowserView. In addition, the BrowserView uses `inspectable_web_contents` instead of `web_contents`, which has a minor difference in the precise `NSView` class that is being returned from `GetNativeView()`. Long story short: I was unable to make it work, but this alternative ensures that you can use the BrowserView and still build apps with a custom frame and `webkit-app-region`.

*Also: This mirrors the behavior on Windows, where the window's drag regions also take control over dragging in the BrowserView*. Truly cross-platform :wink:",1676,True,en,0
10230,3,4,0,Internals,zeke,2017-08-11T20:41:09Z,115,0,2,2,"This adds a check to ensure that a draft release has the right version, is a prerelease, has release notes, and includes all the expected assets.

The `prerelease` npm script will be run automatically when `npm run release` is run.

üçê @vanessayuenn ",256,True,en,0
10225,2,0,3,Internals,zeke,2017-08-09T03:55:15Z,23,1,1,0,"@benjibee added some helpful tips to the README in  electron-userland/electron-prebuilt#265, electron-userland/electron-prebuilt#266, and electron-userland/electron-prebuilt#267 but we didn't get to them before we [merged electron-prebuilt into this repo](https://github.com/electron/electron/pulls/10172).

This PR adds those tips to the new installation guide.",364,True,en,0
10223,1,0,0,Externals,ajmacd,2017-08-10T12:28:32Z,6,0,2,1,"After an app calls `desktopCapturer.getSources` on macOS, the screen sharing icon will appear on the lock screen until the app is closed:
<img width=""242"" alt=""mac-lock-screen-icon"" src=""https://user-images.githubusercontent.com/920663/29093453-c23efa2e-7c3e-11e7-8562-d635ab9c5f75.png"">

This happens because we currently never destroy the desktop capturers that are created upon `getSources`. This change has `NativeDesktopMediaList` destroy them when its user indicates it is finished by returning `false` from `OnRefreshFinished`.

To see this occur, run the demo app in this repo on macOS:
https://github.com/ajmacd/desktop-capturer-demo

and check the lock screen after capturing the screen once. The screen share icon will be present until the app is killed. By replacing Electron with one built from this PR, the screen share icon is no longer present.
  ",872,False,en,0
10219,4,11,0,Externals,HAMIDx9,2017-08-22T08:02:23Z,1036,184,9,14,"This PR has patches to build arm64 electron package successfully. 
I've also provided unofficial packages for download until official releases prepared for the community.
This build has been tested successfully on Odroid C2 (arm64). Unfortunately support for electron-packager is not provided here.
You may just copy your resources to the `electron-v1.7.5-linux-arm64.zip` and run `electron` there.

libcromiumcontent build instructions:

```bash
$ git clone https://chromium.googlesource.com/chromium/src.git
$ cd libcromiumcontent
$ ./script/bootstrap
$ ./script/update -t arm64
$ ./script/build -t arm64
$ ./script/create-dist -t arm64
$ mkdir -p linux/arm64/7a9d4a1c9c265468dd54005f6c1920b2cc2c8ec3 # HACK for using later for electron build process
$ mv libchromiumcontent* linux/arm64/7a9d4a1c9c265468dd54005f6c1920b2cc2c8ec3
```



electron + arm64 support build instruction:
```bash
$ git clone https://github.com/HAMIDx9/electron.git
$ cd electron
$ ./script/bootstrap.py -v --target_arch=arm64 -u file:///home/hamidx9/dev/electron/libchromiumcontent/
$ ./script/build.py -c R
$ ./script/create-dist.py
$ ls ./dist/electron-v1.7.5-linux-arm64.zip
```


**Unofficial Builds**:
[electron-v1.7.5-linux-arm64-symbols.zip](https://www.hamidx9.ir/dl/electron_arm64/electron-v1.7.5-linux-arm64-symbols.zip)
[electron-v1.7.5-linux-arm64.zip](https://www.hamidx9.ir/dl/electron_arm64/electron-v1.7.5-linux-arm64.zip)
[ffmpeg-v1.7.5-linux-arm64.zip](https://www.hamidx9.ir/dl/electron_arm64/ffmpeg-v1.7.5-linux-arm64.zip)
[libchromiumcontent/libchromiumcontent-static.zip](https://www.hamidx9.ir/dl/electron_arm64/libchromiumcontent/libchromiumcontent-static.zip)
[libchromiumcontent/libchromiumcontent.zip](https://www.hamidx9.ir/dl/electron_arm64/libchromiumcontent/libchromiumcontent.zip)

**sha256sum**:
```bash
2d3fe036b4fa1efdb99b8fa15e03f11b9829428529640fa9db4794c8cd2babf7  electron-v1.7.5-linux-arm64-symbols.zip
2df42153e59d40ca03bc281cc515db3331d4facd9d2cdc7fe66aa660b76d43a2  electron-v1.7.5-linux-arm64.zip
4528e28412e5d1074b35e6bcb6198e07f0e4b6ef3434565b4d294124f9e01dbd  ffmpeg-v1.7.5-linux-arm64.zip
b4e8d028d34ce5a9010d4900140466e1f55c835ad7e64c0c7403d82ea41c44bf  libchromiumcontent/libchromiumcontent-static.zip
afa2486256ce561fd3a815e08a0dfee4841a7cbe467f3e518a4712aae48e25fe  libchromiumcontent/libchromiumcontent.zip
```
",2387,False,en,0
10215,3,2,6,Externals,alexeykuzmin,2017-08-28T15:42:15Z,60,40,1,20,"/cc @kevinsawicki, @tonyganch ",30,False,pl,0
10214,4,3,6,Externals,psh0628,2017-08-29T04:20:05Z,73,21,9,21,Fixes #9971 ,12,False,en,0
10213,128,40,19,Externals,alexeykuzmin,2017-11-24T09:17:53Z,899,625,147,108,"## Current state
This branch depends on libcc from https://github.com/electron/libchromiumcontent/pull/335.

Compilation and linking work on all platforms.
There is a couple of failing and temporary disabled tests.

## TODOs
- [x] Remove async menu from docs? **Fix it in #11242**
- [x] Check Release builds
- [x] Fix Release build on ARM https://circleci.com/gh/electron/electron/2895
- [x] Resolve merge conflicts
- [x] [_Skip for now, it's broken is master_] Fix `--inspect-brk` [_deepak1556_]
- [x] Revert ""FIXME: Inscrease compilation errors limit to 99""
- [x] `Assertion failed: (err == 0), function uv_loop_delete, file ../../vendor/node/deps/uv/src/uv-common.c, line 661.` when running the ""chromium feature > web workers > Worker has node integration with nodeIntegrationInWorker"" test **Fix it in #11243**
- [x] FIXME: Remove ""async"" option from menu.popup() (4c284cc8edfd7b26e005611d43d7b8e25cd6bb99)
- [x] `relayKey` ‚Üí `relay_key` (14e33dad8db32b0de7c2ff3b954c502c86b2f20e)
- [x] Fix arm64 build
- [x] Change target branch to *master* once Chromium 59 is merged.
- [x] Enable OSR.
- [x] _(taken by @alexeykuzmin)_ Fix linking on Mac
- [x] Fix lint errors
- [x] _(taken by @tonyganch)_ Fix compilation errors on Linux
- [x] Fix compilation errors on Windows

## For review

### Done
a3438e73f FIXME: DesktopNotificationDelegate has been removed
9a08f4233 REVIEW: Reporting: Wire ReportingDelegate into ChromeNetworkDelegate
24dbc393d FIXME: Refactor client cert private key handling. [_deepak1556_]
44d1fd2c9 FIXME: Use `sk_tool_utils::copy_to()` instead of `.deepCopyTo()`.
9b29aa897 REVIEW: Move handling of DraggableRegionsChanged notification from ""view"" to ""frame"".
49d2d98e6 REVIEW: Remove obsolete Blink popup blocker.
1bed73ab9 FIXME: Remove ""async"" option from `menu.popup()`
54a6d1480 REVIEW: Fix 'constructor cannot be redeclared' error
4f20949f3 REVIEW: Move MediaDeviceIDSalt from ProfileIOData to ProfileImpl.
ae62ad46c FIXME: Remove `corsEnabled` option from `webFrame.registerURLSchemeAsPrivileged()`

## Tests

### Disabled
- [x] **\<webview> tag** > found-in-page event > emits when a request is made **Fix it in #11244**
- [x] **nativeImage module** > addRepresentation() > * (3 tests) _2357b7c91 fix doesn't seem to work, it makes ""nativeImage module > toDataURL() returns a PNG data URL"" fail; /cc @alespergl_ **Fix it in #11245**
- [x] **crashReporter module** > {with,without} sandbox > should send minidump when renderer crashes **Fix all crashReporter tests in #11246**
- [x] **crashReporter module** > {with,without} sandbox > should send minidump when node processes crash
- [x]  **crashReporter module** > {with,without} sandbox > should send minidump with updated extra parameters
- [x]  **crashReporter module** > {with,without} sandbox > should not send minidump if uploadToServer is false 

### Failing
- [x] **modules support** > third-party module > ffi > does not crash
- [x] **\<webview> tag** > loads devtools extensions registered on the parent window
- [x] **BrowserWindow module** > extensions and dev tools extensions > works when used with partitions
- [x] **BrowserWindow module** > extensions and dev tools extensions > BrowserWindow.addDevToolsExtension > when the devtools is docked>  creates the extension
- [x] **BrowserWindow module** > extensions and dev tools extensions > BrowserWindow.addDevToolsExtension > when the devtools is undocked >  creates the extension
- [x] **BrowserWindow module** > nativeWindowOpen option > loads native addons correctly after reload
- [x] **crashReporter module** > without sandbox > should send minidump when node processes crash
- [x] **crashReporter module** > with sandbox > should send minidump when node processes crash
- [x] **ipc module** > remote listeners > detaches listeners subscribed to destroyed renderers, and shows a warning
- [x] **asar package** > node api > child_process.fork > opens a normal js file
- [x] **asar package** > node api > child_process.fork > supports asar in the forked js
- [x] **asar package** >  node api > process.env.ELECTRON_NO_ASAR > disables asar support in forked processes
- [x]  **asar package** > node api > process.env.ELECTRON_NO_ASAR > disables asar support in spawned processes
- [x] **asar package** > original-fs module > is available in forked scripts
- [x] **modules support** > third-party module > runas > can be required in renderer
- [x] **modules support** > third-party module > runas > can be required in node binary
- [x] **node feature** > child_process > child_process.fork > * (9 tests)
- [x] **node feature** > child_process>  child_process.spawn > supports spawning Electron as a node process via the ELECTRON_RUN_AS_NODE env var
- [x] **node feature** > net.connect>  emit error when connect to a socket path without listeners
- [x] **\<webview> tag** > nodeintegration attribute > loads native modules when navigation happens",4963,False,en,0
10209,5,3,0,Internals,jkleinsc,2017-08-07T22:21:50Z,46,93,7,0,"Given that #10203 still didn't fix the issue of Linux CI builds failing, this PR simply rolls back the debug mode changes made.",127,False,en,0
10204,1,3,0,Internals,zcbenz,2017-08-07T18:14:47Z,3,15,1,0,"Reverts electron/electron#9961

@MarshallOfSound The change is reliably causing following tests to fail:

```
not ok 125 BrowserWindow module ""webPreferences"" option nativeWindowOpen option should inherit the nativeWindowOpen setting in opened windows
  Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves.
      at C:\e\workspace\electron-win-ia32\spec\node_modules\mocha\lib\runnable.js:232:19
not ok 126 BrowserWindow module ""webPreferences"" option nativeWindowOpen option should open windows with the options configured via new-window event listeners
  Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves.
      at C:\e\workspace\electron-win-ia32\spec\node_modules\mocha\lib\runnable.js:232:19
not ok 127 BrowserWindow module ""webPreferences"" option nativeWindowOpen option retains the original web preferences when window.location is changed to a new origin
  Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves.
      at C:\e\workspace\electron-win-ia32\spec\node_modules\mocha\lib\runnable.js:232:19
```

I haven't figured out why, but I'm reverting it for now to avoid blocking new releases.",1359,True,en,0
10191,17,4,14,Internals,codebytere,2017-09-29T18:11:30Z,41,1,6,56,"Adds the ability to get logs via `app.getPath('logs')`, implementing feature requested in https://github.com/electron/electron/issues/10118. 

- [x] MacOS
- [x] Linux
- [x] Windows

**Nota Bene:** Unlike MacOS, Linux & Windows do not create log folders until a log-worthy event happens, so this implementation lets the app developer ensure the directory exists. If anyone has an idea for an alternate way this could be dealt with please let me know!",455,True,en,0
10190,2,0,0,Internals,zeke,2017-08-04T20:52:26Z,117,6,1,1,"@vanessayuenn, @jkleinsc, and I are working on getting a backported 1.6.12 release out, with 1.7.6 and 1.8.0 soon to follow. This PR updates the releasing guide with some discoveries we've made during the process today.",219,False,en,0
10183,7,1,6,Externals,andens,2017-08-17T06:54:22Z,156,7,8,14,"For top-level windows, setting the WS_EX_LAYERED and WS_EX_TRANSPARENT as done in `setIgnoreMouseEvents` styles effectively bypasses hit tests. This works great if the entire window should ignore mouse messages, but if we want to enable and disable bypassing based on where we are in the web page we are left in the dark since the browser window doesn't get any mouse messages anymore.

This PR solves this problem by adding a method `setForwardMouseMessages` to `BrowserWindow`. A low-level mouse hook manually sends WM_MOUSEMOVE messages to the browser window if it's in a state where it's forwarding mouse messages. This is enough for Chromium to generate events when entering/leaving HTML elements even when input is otherwise routed to underlying windows. Ultimately this allows us to stop forwarding when appropriate so that we may once again interact with the browser.

As a concrete example of where this was used, I made a transparent canvas that represents a hole the web page. Inside this area the window is treated as if it never existed. Moving out of the canvas once again acknowledges the window after disabling forwarding in the `mouseleave` event of the canvas.

Off-topic:
This is my very first PR so something has likely gone awry. Any feedback, minor or major, is greatly appreciated to improve quality of future ones.",1345,True,en,0
10181,1,0,0,Internals,kevinsawicki,2017-08-02T18:03:35Z,7,2,1,0,This regressed when I added the argument parser to `script/test.py` in #9589 ,77,False,en,1
10175,8,0,0,Internals,zcbenz,2017-08-02T10:03:14Z,23,8,8,0,,0,False,en,1
10173,1,1,0,Internals,zeke,2017-08-01T20:19:42Z,20,10,1,0,,0,False,en,0
10172,250,3,8,Internals,vanessayuenn,2017-08-08T17:59:38Z,359,24,9,7,"This is an effort to allow publishing electron to npm directly from the main repo, with the goal of eventually decommissioning the [electron-prebuilt-updater heroku app](https://github.com/electron/electron-prebuilt-updater). The vast majority of the code is ported over from the existing [electron-prebuilt repo](https://github.com/electron-userland/electron-prebuilt). ",371,False,en,0
10166,4,1,0,Internals,zeke,2017-08-02T20:58:15Z,11,3,3,1,"This PR backports the following fixes to the 1.6 release line.

- https://github.com/electron/libchromiumcontent/pull/310 - linux appIndicator submenu fix 
- https://github.com/electron/libchromiumcontent/pull/323 - accented letter input resulting double letters in webview 
- https://github.com/electron/electron/pull/10099 - Leak the Node environment when context is released 

üçí",390,True,en,0
10164,1,0,0,Internals,jkleinsc,2017-08-01T17:10:19Z,22,0,1,1,Backport #10070 to 1.6.  Fixes #8455 in 1.6. ,45,False,en,0
10162,5,1,0,Internals,zcbenz,2017-07-31T08:11:29Z,19,11,4,0,"Saw it when running tests on Linux:

```
Objects involved in the operation:
sequence ""this"" @ 0x0x7ffce7459758 {
}
Received signal 6
#0 0x7f7cd6955afb base::debug::StackTrace::StackTrace()
#1 0x7f7cd695106c base::debug::StackTrace::StackTrace()
#2 0x7f7cd695560f <unknown>
#3 0x7f7cbfe8bcb0 <unknown>
#4 0x7f7cb992a035 gsignal
#5 0x7f7cb992d79b abort
#6 0x7f7cba2265ad __gnu_debug::_Error_formatter::_M_error()
#7 0x000000fc6195 std::__debug::vector<>::front()
#8 0x000000fc22e8 atom::api::NativeImage::ToJPEG()
#9 0x000000fcba34 _ZN4base8internal13FunctorTraitsIMN4atom3api11NativeImageEFN2v85LocalINS5_5ValueEEEPNS5_7IsolateEiEvE6InvokeIPS4_JSA_iEEES8_SC_OT_DpOT0_
#10 0x000000fcb95b _ZN4base8internal12InvokeHelperILb0EN2v85LocalINS2_5ValueEEEE8MakeItSoIRKMN4atom3api11NativeImageEFS5_PNS2_7IsolateEiEJPSA_SC_iEEES5_OT_DpOT0_
#11 0x000000fcb8d0 _ZN4base8internal7InvokerINS0_9BindStateIMN4atom3api11NativeImageEFN2v85LocalINS6_5ValueEEEPNS6_7IsolateEiEJEEEFS9_PS5_SB_iEE7RunImplIRKSD_RKSt5tupleIJEEJEEES9_OT_OT0_NS_13IndexSequenceIJXspT1_EEEEOSF_OSB_Oi
#12 0x000000fcb7d3 _ZN4base8internal7InvokerINS0_9BindStateIMN4atom3api11NativeImageEFN2v85LocalINS6_5ValueEEEPNS6_7IsolateEiEJEEEFS9_PS5_SB_iEE3RunEPNS0_13BindStateBaseEOSF_OSB_Oi
#13 0x000000fcb68f base::internal::RunMixin<>::Run()
#14 0x000000fcb4b4 _ZN4mate8internal7InvokerINS0_13IndicesHolderIJLm0ELm1ELm2EEEEJPN4atom3api11NativeImageEPN2v87IsolateEiEE18DispatchToCallbackINS8_5LocalINS8_5ValueEEEEEvN4base8CallbackIFT_S7_SA_iELNSG_8internal8CopyModeE1ELNSK_10RepeatModeE1EEE
#15 0x000000fcb298 mate::internal::Dispatcher<>::DispatchToCallback()
#16 0x7f7ce4cddf6b <unknown>
#17 0x7f7ce4d9e7ff <unknown>
#18 0x7f7ce4d9d59c <unknown>
#19 0x35634c684204 <unknown>
  r8: 00007f7ce6f44980  r9: 00007ffce7459258 r10: 0000000000000008 r11: 0000000000000202
 r12: 00007ffce74594e0 r13: 0000000000000000 r14: 0000000000000001 r15: 0000000000000000
  di: 0000000000005607  si: 0000000000005607  bp: 0000000000000001  bx: 00007ffce74594a8
  dx: 0000000000000006  ax: 0000000000000000  cx: ffffffffffffffff  sp: 00007ffce74592a8
  ip: 00007f7cb992a035 efl: 0000000000000202 cgf: 0000000000000033 erf: 0000000000000007
 trp: 000000000000000e msk: 0000000000000000 cr2: 00007f12f232a700
[end of stack trace]
```",2294,True,en,0
10161,1,0,0,Internals,zcbenz,2017-07-31T06:34:40Z,2,2,1,0,`_GLIBCXX_DEBUG` is only needed for x64 build.,46,False,en,0
10160,2,1,0,Externals,liusy182,2017-08-08T01:42:15Z,22,14,2,8,fixes #10128,12,False,en,0
10157,1,1,0,Externals,runinspring,2017-08-04T17:46:16Z,82,0,1,5,,0,False,en,0
10148,1,0,0,Internals,jkleinsc,2017-07-31T02:16:21Z,11,3,1,2,"The ARM builds on CI are failing because of a conflict between the `gcc-multilib` package and the `g++-arm-linux-gnueabihf` package.
This PR changes the cibuild script to install different packages depending upon whether or not the ARM build is being run.",256,False,en,0
10143,1,0,0,Externals,alespergl,2017-07-28T13:06:26Z,19,17,1,0,,0,False,en,0
10142,6,16,4,Externals,MarshallOfSound,2017-08-31T14:37:13Z,440,0,7,34,"Closes #1692

This adds two methods:

* `app.isInApplicationsFolder()` - Is the app currently in the system applications folder
* `app.moveToApplicationsFolder()` - Attempt to move the app to the Applications folder and relaunch on success

Any UX for asking the user if they want to move the app should be implemented by the app either through HTML/CSS or using the `dialog` module.",390,True,en,0
10138,2,0,0,Internals,zeke,2017-07-28T20:36:05Z,33,19,1,1,This PR fixes a few typos and adds a few links to the linux build instructions doc.,83,False,en,0
10133,1,1,0,Externals,MarshallOfSound,2017-07-27T17:19:37Z,1,1,1,0,"Fixes #10132

`false || true === true`....

Basically `continuous` would always be a truthy value...",104,True,en,0
10131,1,1,0,Externals,alopix,2017-07-27T18:09:11Z,6,6,1,0,The API documentation mentioned SegmentedControl even though it's a scrubber. Just a minor docs change.,103,False,en,0
10127,1,1,0,Internals,zeke,2017-07-26T21:16:22Z,4,3,3,0,"This updates some of the API docs to use the HTML heading levels expected by electron-docs-linter.

Ideally these files would be starting at H1 instead of H2, but there are historical reasons for this. There are a handful of files that define a Module and a Class of the same name, like `session.md` and `native-image.md`

https://github.com/electron/electron-docs-linter/pull/77 explains the challenge:

> To allow these APIs to coexist in this way, the Class definitions still use an H2 heading, even when they are atop their own document. If we want to switch to all files starting with an H1 heading, we'll need to figure out a way to separate the session module from the Session class. Obviously they can't have the same filename, so we'd have to do something like session.md and session-class.md... I'm open to ideas about how to do that.",850,True,en,0
10126,1,5,0,Internals,jkleinsc,2017-07-27T21:21:24Z,3,0,1,1,"This PR fixes the ""No module named google_compute_engine"" error on Travis",73,False,en,0
10125,6,1,4,Internals,codebytere,2017-07-27T06:49:09Z,27,3,4,0,"Fixes https://github.com/electron/electron/issues/7868

Prepends NSError `code` and `domain`  to `localizedErrorDescription` such that the value seen on error is `code:domain:localizedError Description`.

Edited File: `electron/atom/browser/auto_updater_mac.mm`",265,True,en,0
10116,4,0,0,Internals,zeke,2017-07-26T15:05:18Z,28,25,1,0,"It looks like [check-for-leaks](https://github.com/electron/electron/pull/9989) is doing its job!

This PR sorts the gitignore patterns alphabetically for readability and adds `.env`, `.npmrc`, and `vendor/node/deps/node-inspect/.npmrc` to the ignore list.

```
~/git/electron/electron
‚ùØ git push origin HEAD
husky > npm run -s prepush (node v8.1.4)

warning: vendor/node/deps/node-inspect/.npmrc is not in your .gitignore file

husky > pre-push hook failed (add --no-verify to bypass)
error: failed to push some refs to 'https://github.com/electron/electron'
```",578,True,en,0
10113,1,2,0,Externals,lsegal,2017-07-26T00:04:14Z,2,2,1,0,"This change makes the `subtitle` and `actions` options optional to the
Notification constructor, since they are only available on macOS.",137,False,en,0
10103,1,1,0,Externals,fab1an,2017-07-25T23:23:12Z,22,22,8,1,,0,False,en,0
10099,1,0,0,Internals,zcbenz,2017-07-31T01:41:45Z,6,1,1,6,"This reverts the change of #8811.

So when the Node environment is destroyed, there are still libuv async tasks running that may reuse that Node environment, even though Node should have cleared all libuv handles. It might caused by Node missing some corner cases, but even if Node has covered all cases on its side, it is still possible that some native modules just assume Node environments can live forever.

Close #9538, close #9303.",441,True,en,0
10097,1,1,0,Externals,liusy182,2017-07-27T22:27:48Z,20,1,3,3,#10039 ,7,False,en,0
10085,1,0,0,Internals,zeke,2017-07-25T23:30:19Z,1,1,1,4,Another typo found by @Toinane while translating.,49,False,en,0
10081,1,3,4,Externals,renaesop,2017-08-17T06:56:03Z,30,8,4,26,"The `webContents.print` is async but does not support a callback.
And see #9712 ",81,False,en,0
10076,1,1,2,Externals,alexstrat,2017-09-14T12:19:11Z,22,9,2,55,,0,False,en,0
10075,1,1,0,Externals,alexstrat,2017-07-24T06:27:56Z,1,3,1,3,Script was injected only if the current URL matched the first item of `content_scripts[].matchs` ignoring the following items,125,False,en,0
10071,1,7,0,Internals,joshaber,2017-07-21T16:04:51Z,1,1,1,1,"Update to [1.2.1](https://github.com/electron/electron-frameworks/releases/tag/v1.2.1).

This is to update to Squirrel.Mac [0.3.1](https://github.com/Squirrel/Squirrel.Mac/releases/tag/0.3.1) which üôè I believe üôè fixes long-standing issues around update permissions and non-admin users.",293,True,en,0
10070,2,8,0,Internals,zcbenz,2017-07-31T01:42:09Z,22,0,1,10,"The dbus menu implementaion of KDE would send the about-to-show signal whenever the menu has been changed, resulting in infinite loop on our side.

Close #8455.",162,True,en,0
10062,1,1,0,Externals,joe-re,2017-07-25T23:32:24Z,90,0,2,6,translate tutorial/keyboard-shortcuts.md to Japanese üáØüáµ,61,False,en,0
10058,1,0,0,Internals,zeke,2017-07-19T16:35:27Z,15,0,1,0,"People often open issues about how they're unable to `npm install electron`. Usually it's a network issue. This PR adds a distilled version of the installation advice we often repeat on repos like
[electron-quick-start](https://github.com/electron/electron-quick-start/issues) and [electron-prebuilt](https://github.com/electron-userland/electron-prebuilt/issues). 

This gives us something to link to so we don't have to keep repeating ourselves.",450,False,en,0
10053,3,4,0,Externals,alespergl,2017-07-22T22:44:46Z,46,6,4,4,"Another attempt at enabling debug mode (the first was #9934). I disabled an assert in libcc which caused some Electron tests to fail. This PR is identical to #9934, it only references an updated libcc.",201,False,en,0
10052,2,0,1,Externals,poiru,2017-09-25T05:12:32Z,24,23,1,69,Please see individual commits for description.,46,False,en,0
10050,1,0,0,Internals,kevinsawicki,2017-07-17T19:45:04Z,3,1,1,0,"This API was introduced in 1.7.x which is still in beta.

This pull request marks it as still experimental motivated by #9928 and #9961 

Refs #8963",152,True,en,0
10049,1,1,0,Internals,zeke,2017-07-17T19:39:15Z,1,1,1,0,"Reported by @Toinane 

https://crowdin.com/translate/electron/19/en-fr#q=739x",79,True,en,0
10048,2,0,0,Internals,kevinsawicki,2017-07-17T18:54:26Z,5,45,3,0,"Reverts https://github.com/electron/electron/pull/9934, seems to be causing build failures on CI.

```
ok 192 BrowserWindow module offscreen rendering creates offscreen window with correct size
abort() has been calledTraceback (most recent call last):
```

/cc @alespergl ",279,True,en,0
10046,1,1,0,Externals,omerfarukozdemir,2017-07-17T16:48:20Z,1,1,1,0,Typo fix,8,False,it,0
10015,1,0,0,Internals,kevinsawicki,2017-07-18T16:10:12Z,23,1,1,3,"This pulls in some code from https://cs.chromium.org/chromium/src/chrome/browser/file_select_helper.cc?l=366 to add a open dialog filter description for the common accept types when doing something like:

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset=""utf-8"">
  </head>
  <body>
    <input type=""file"" name=""pic"" accept=""image/*"">
  </body>
</html>
```

Noticed this while comparing Chrome and Electron input file dialog behavior while reviewing #9745 

| Before | After |
| --- | --- | 
| <img width=""594"" alt=""screen shot 2017-07-14 at 11 33 44 am"" src=""https://user-images.githubusercontent.com/671378/28225666-5227c8f2-6888-11e7-9385-649ad428baf1.png""> | <img width=""593"" alt=""screen shot 2017-07-14 at 11 06 42 am"" src=""https://user-images.githubusercontent.com/671378/28225614-292e02fe-6888-11e7-8e10-b9ee71025529.png""> |
",859,True,en,0
10008,4,4,2,Externals,qazbnm456,2017-07-18T16:10:55Z,40,3,3,4,This PR should resolve https://github.com/electron/electron/issues/10007.,73,False,en,0
10004,1,1,0,Externals,TiagoDanin,2017-07-16T04:47:37Z,34,34,14,2,"All the documents on `\docs-translations\pt-BR\*` verified

Wrong words | Correct words |
-|-|
exten√ß√£o | extens√£o |
possiblidade | possibilidade |
criar uma nova | criar uma |
pra | para |
renderiza√ß√£p | renderiza√ß√£o |
inclu√≠ndo | incluindo |
rendezi√ß√£o | renderiza√ß√£o |
nivel |  n√≠vel |
incluisiva | inclusiva |
politicos | pol√≠ticos |
permamentemente | permanentemente |
comprir | cumprir |
for (EN) | para o  |
descompacatar | descompactar |
aplicac√µes | aplica√ß√µes |
binarios | bin√°rios |
construidos | constru√≠dos |
Atenc√£o | Aten√ß√£o |
construidas | constru√≠das  |
construido | constru√≠do |
distruibuic√£o | distruibui√ß√£o |
construc√£o | constru√ß√£o |
blibliotecas | bibliotecas |
contru√≠das | contru√≠das |
Igonorando | Ignorando |
probema | problema |
locamente | localmente |
op√ßao | op√ß√£o |
Epecifica | Especifica |
documentac√£o | documenta√ß√£o |",922,True,pt,0
10003,1,1,0,Externals,poiru,2017-07-14T13:40:28Z,31,0,4,0,"By default, Chromium disables 3D APIs (e.g. WebGL) until restart on a
per domain basis if the GPU processes crashes too frequently. This
function disables that behaviour.",172,False,en,0
9992,5,3,0,Internals,kevinsawicki,2017-07-31T21:09:12Z,8,6,6,18,"Pull request to upgrade the chrome 59 pull request to Node 8.2.1 (from 7.9).

Node patches applied against 8.2.1 via https://github.com/electron/node/pull/23

Fixes #9970 ",175,True,en,0
9991,1,0,0,Internals,kevinsawicki,2017-07-13T15:55:07Z,15,2,1,0,"If `require('runas')` failed because the module was compiled using the wrong module version the the

> BrowserWindow module ""webPreferences"" option nativeWindowOpen option loads native addons correctly after reload

spec would timeout since the `answer` message would never get sent.

This pull request updates it to send the error message so it will fail with something like:

> AssertionError: 'The module \'/Users/kevin/github/electron/spec/node_modules/runas/build/Release/runas.node\'\nwas compiled against a different  == 'function'

This will then make it easier to know that you should re-run  `npm test` with `--rebuild_native_modules` so the modules get re-built.

Noticed this while switching between master and #9946 ",741,True,en,0
9989,1,1,0,Internals,zeke,2017-07-18T22:30:03Z,4,0,1,6,"This PR adds some lifecycle scripts to prevent `.env` and `.npmrc` files from being inadvertently pushed to GitHub or published to npm. If a user tries to `git push` or `npm publish` when these secret files exist but are not gitignored and npmignored, warnings are displayed and the process exits:

```
warning: .env is not in your .gitignore file
```

This is using the [husky](http://ghub.io/husky) module to set up the `prepush` git hook (without replacing any existing hooks). If this proves to be cumbersome or problematic, we can remove the husky git hook and only apply the check to npm operations.",611,True,en,0
9988,1,3,0,Externals,kant2002,2017-08-08T03:37:27Z,1,1,1,26,See https://github.com/electron/electron-typescript-definitions/issues/25,73,False,en,0
9983,2,3,0,Externals,juturu,2017-07-14T16:41:57Z,23,6,4,2,"Fixing devtools open in mixed sandbox. Added UTs to validate.

cc: @fasterthanlime @chandrachivukula",102,True,en,0
9975,1,0,0,Externals,wayne-kim,2017-07-24T07:07:44Z,9,11,1,13,"So If you do not care bubbling equally, I think it should change like this.",75,False,en,0
9974,1,1,0,Externals,wan-qy,2017-07-11T18:31:40Z,1,1,1,0,,0,False,en,0
9972,13,2,4,Internals,kevinsawicki,2017-07-17T19:38:50Z,244,56,13,6,"Previously both `nativeWindowOpen` and `sandbox` options did not support overriding `webPreferences` via `new-window` events. The preferences from the opener window were used instead when launching render processes for the new windows.

This pull request changes this behavior to set configured `webPreferences` when creating new windows with an existing `webContents`. These preferences are then used when the render process is launched for the `webContents` (if applicable).

- [x] Reset `webContents` web preferences with the configured options when creating a new window with an existing contents.
- [x] Track pending render process launches via `RenderFrameHost` instead of `RenderProcessHost` so that lookup via `WebContents` can be done later on.
- [x] Register `sandbox` as an inherited option in `guest-window-manager.js` so windows opened from sandboxed windows have it enabled by default.
- [x] Register `nativeWindowOpen` as an inherited option in `guest-window-manager.js` so windows opened from native window open windows have it enabled by default.
- [x] Add specs for inherited options behavior
- [x] Add specs `new-window` option overriding for `sandbox`/`nativeWindowOpen` windows.
- [x] Add spec for reload bug from #9928 

Refs #9961 
Closes #9928 ",1281,True,en,0
9967,1,0,0,Internals,kevinsawicki,2017-07-10T21:31:29Z,1,1,1,0,"Pulls in:

* https://github.com/electron/libchromiumcontent/pull/314
* https://github.com/electron/libchromiumcontent/pull/316
* https://github.com/electron/libchromiumcontent/pull/318

Closes #9495
Closes #9709
Reopens #9173",233,True,en,0
9964,2,1,2,Externals,Raul6469,2017-07-09T22:21:16Z,20,20,4,0,"Hello there,
When I was reading the french documentation, I noticed some mistakes, so here is a PR proposes to fix it. I might have missed some, but I think it's still better ! üòÑ ",183,False,en,0
9963,1,1,0,Externals,wayne-kim,2017-07-10T15:19:54Z,1,1,1,1,"i think should remove a ""s"" in tutorial""s""/mac-app-store-submission-guide.md",76,False,en,0
9962,1,0,0,Externals,ferreus,2017-07-17T07:49:19Z,2,1,1,8,"Calling show() on an already open modal causes the parent to become unusable

Because SetEnabled tracks number of calls and re-enables the window only when counter is back to 0,
Calling Show() on already visible window would prevent the modal lock to be released when modal is closed. This PR fixes it, by calling SetEnabled only when window is invisible. Preventing duplicate calls to SetEnabled.",400,True,en,0
9961,3,8,3,Externals,MarshallOfSound,2017-08-04T12:18:48Z,15,3,1,26,"Fixes #9581 #8100 #9533

Not 100% sure if this is the correct fix but (a) it works and (b) it looks right to me üòÜ 

/cc @zcbenz @kevinsawicki Can you make sure this isn't doing something silly",199,True,en,0
9959,1,1,0,Internals,zeke,2017-07-11T00:56:05Z,4,0,1,3,(off-screen rendering),22,False,nl,0
9953,2,1,2,Externals,alexstrat,2017-07-14T21:16:42Z,2,2,1,7,`content_scripts[].matches` are tested against page URL without fragment part.,78,False,en,0
9951,6,5,2,Externals,alexstrat,2017-07-24T05:01:16Z,103,60,2,17,Fixes #9949 ,12,False,en,0
9950,2,1,3,Externals,alexstrat,2017-09-15T11:45:57Z,16,0,1,70,"Loading content from `chrome-extension` is considered as mixed-content.

<img width=""775"" alt=""screenshot 2017-07-07 02 24 23"" src=""https://user-images.githubusercontent.com/687961/27938055-c2c3b9cc-62bb-11e7-8e34-f6bc6f57c5c9.png"">
",236,True,en,0
9947,2,1,0,Externals,njbmartin,2017-07-14T21:10:23Z,11,0,1,8,Gives users a better heads-up of their app being rejected due to the sandbox restriction around `shell.openItem()`. #9005 ,122,False,en,0
9946,84,103,4,Externals,alexeykuzmin,2017-08-16T14:00:34Z,927,849,100,41,"Instead of #9766.

**Failing tests**:
- [x] [Windows] BrowserWindow module ""webPreferences"" option ""sandbox"" option can print to PDF
- [x] [Windows] BrowserWindow module window states resizable state works for a frameless window

*Both failing tests were disabled*
Tasks to fix them: #10279, #10280.",306,True,en,0
9934,2,1,0,Externals,alespergl,2017-07-17T15:59:42Z,45,5,3,12,"This PR complements https://github.com/electron/libchromiumcontent/pull/317
It enables true debug builds with diagnostics from the runtime library as well as libchromiumcontent.",178,False,en,0
9931,1,1,0,Externals,fasterthanlime,2017-07-05T19:41:42Z,3,0,1,1,"Just noticed today that in 1.7.4, enabling mixed sandbox mode makes `openDevTools` become a no-op.

  * If it's expected behavior - that's cool! Here's a PR ready to merge to document it.
  * If it's not - I'll happily close this & open an issue instead

üåü 

*edit: my commit summary is snafu, I need more ‚òïÔ∏è*",323,True,en,0
9929,1,1,0,Externals,alexeykuzmin,2017-07-05T16:08:15Z,1,1,1,1,"Is it only me, or
`""x value of 102 [actual] was not within 1 of 100 [expected]""`
actually sounds better than
`""x value of 100 [expected] was not within 1 of 102 [actual]""`?",175,False,en,0
9918,6,7,0,Externals,alexstrat,2017-08-08T00:06:23Z,97,19,3,35,"With the objective to load some Chrome extensions in an Electron app, I introduce here an API to add/remove/get extensions. It's the same mechanism than the one used in `addDevToolsExtension` except the loaded [extensions are not persisted](https://github.com/electron/electron/blob/master/lib/browser/chrome-extension.js#L331).

- [x] documentation
- [x] tests

_Related: #1498_",384,True,en,0
9903,2,0,0,Internals,miniak,2017-06-30T17:08:51Z,34,16,5,0,,0,False,en,0
9899,1,0,0,Externals,alespergl,2017-06-30T10:28:02Z,3,3,1,0,,0,False,en,0
9896,4,4,0,Externals,ferreus,2017-09-12T06:02:44Z,8,1,1,74,"I tracked down the crash to a place in libchromiumcontent: https://chromium.googlesource.com/experimental/chromium/src/+/58.0.3029.110/ui/base/clipboard/clipboard_win.cc#814

For some reason, even so the image is cropped, getSize() and getPixels() return the actual size of original image, and also the original pixels, so obviously memcpy is crashing, since the size is way to big.
Surprisingly width() and height() does return correct cropped dimensions.

I tried to set the correct size for memcpy, but since the actual pixels are also from original image, this resulted in garbage image being put into clipboard.

The only solution that i found, is to deep copy the image inside Clipboard::WriteImage, this results in the correct image being passed to DrawBitmap, and everything works correctly.
",808,True,en,0
9892,4,0,0,Internals,kevinsawicki,2017-06-28T21:05:03Z,10,12,3,0,Pulls in https://github.com/electron/pdf-viewer/pull/3,54,False,en,0
9883,1,0,0,Internals,zeke,2017-06-28T15:03:27Z,2,0,1,0,Fixes https://github.com/electron/electron/issues/9775,54,False,en,0
9881,1,0,0,Internals,zeke,2017-06-28T15:02:58Z,1,1,1,0,Props to @zombieleet for noticing it.,37,False,en,0
9870,1,1,0,Internals,zeke,2017-06-26T20:31:46Z,6,0,1,0,"I noticed the term ""IME"" in https://github.com/electron/electron/issues/9709 and didn't know what it was, so I added it to the glossary.",136,False,en,0
9869,8,14,4,Externals,rafaelnobrepd,2017-09-14T08:18:15Z,275,4,9,79,"Hi guys, thanks for the amazing project!
I'm taking a stab at improving Handoff support as in #9622 
My C++ and Js skills are close to zero, so please bear with me!
I attempted mimicking the change points of a few PRs and added what we needed: support for invalidating the current activity, updating the current activity user info and a few delegate callbacks as events.
It looks to work when running the app with command `electron ./electron-source`

```javascript
    const electron = require('electron');
    const { app } = electron;

    [...]

    console.log(app.invalidateCurrentActivity);
    //output: function invalidateCurrentActivity() { [native code] }
```

However, Handoff will only work when the app is properly signed with the Team ID, and in this case my implementation doesn't seem to work:
Running App after package with `electron-packager`

```javascript
    const electron = require('electron');
    const { app } = electron;

    [...]

    dialog.showMessageBox(mainWindow, {
      message: app.invalidateCurrentActivity.toString()
    });
    /**
    A JavaScript error occurred in the main process
    Uncaught Exception:
    TypeError: Cannot read property 'toString' of undefined
        at EventEmitter.<anonymous> (/Users/Shared/myApp/releases/mas-preview/MyApp-mas-x64/My App.app/Contents/Resources/app.asar/js/main.min.js:1:385981)
        at emitTwo (events.js:106:13)
        at EventEmitter.emit (events.js:191:7)
        at WebContents.<anonymous> (/Users/Shared/myApp/releases/mas-preview/My App-mas-x64/My App.app/Contents/Resources/electron.asar/browser/api/web-contents.js:247:37)
        at emitTwo (events.js:106:13)
        at WebContents.emit (events.js:191:7)
    */
```

It would be awesome to get some feedback on what may be missing here to work. I downloaded libchromium-static and ran bootstrap with the -u option as it would never finish downloading within the script itself.
I took the out/R/Electron.app and replaced the one in the dist folder when packaging.",2055,False,en,0
9867,2,0,0,Internals,kevinsawicki,2017-06-27T06:02:26Z,1,1,1,0,"Pulls in https://github.com/electron/libchromiumcontent/pull/315

Refs https://github.com/electron/electron/issues/9854

/cc @alespergl ",140,True,en,0
9857,5,9,2,Externals,alexeykuzmin,2017-06-29T19:30:44Z,89,10,9,3,"It would be great to have an ability to turn certain features off for custom builds.
It could also help with upgrades to new Chromium versions.

**Issue to address**:
Disable the tests if the flag is turned off.",215,False,en,0
9856,1,1,0,Externals,paulcbetts,2017-06-26T15:55:52Z,2,11,1,0,That thing is deprecated for _sure_,35,False,en,0
9855,1,1,0,Externals,paulcbetts,2017-07-14T21:33:39Z,6,5,1,18,"We should point people to electron-forge, it's the modern way to package Electron apps",86,False,en,0
9853,1,0,0,Internals,zeke,2017-06-26T16:38:55Z,4,0,1,0,"A small bit of documentation from https://github.com/electron/electron/issues/7737#issuecomment-310920444

cc @poiru ",119,True,en,0
9852,3,2,0,Externals,poiru,2017-06-28T17:35:02Z,61,19,8,2,"This allows you to disable application menu shortcut handling on a per
web contents basis.",91,False,en,0
9847,2,1,0,Externals,timfish,2017-06-26T15:50:50Z,4,4,2,1,Fixes electron/electron-typescript-definitions/issues/63,56,False,ca,0
9837,7,5,4,Externals,MarshallOfSound,2017-06-28T19:59:10Z,192,105,16,5,"Adds support for ""notification actions"" to the main process Notification API.

The only supported action at the moment is ""button"" on macOS.  In theory this could be expanded to support windows as well in a future PR along with other types of actions (like dropdowns in windows)",280,True,en,0
9834,4,1,2,Externals,shubham2892,2017-07-18T17:21:08Z,7,1,4,25,"Fixes #8948 
Added the flag that enables treating file packages as directories.",80,False,en,0
9828,1,2,0,Externals,poiru,2017-06-26T16:54:31Z,36,6,6,4,The crash was a segfault caused by a null `WebDialogHelper::window_`.,69,False,en,0
9826,1,1,0,Externals,ccnokes,2017-06-26T15:07:16Z,6,6,1,4,"`app.setLoginItemSettings` documented arguments are misleading -- `path` and `args` should be passed in the `settings` object, not as separate params, like the code sample below it or in the test file here: https://github.com/electron/electron/blob/9250b559f91c3c1654484df46a8ba83f9bdbecd2/spec/api-app-spec.js#L336
and in the actual C++ function declaration here: https://github.com/electron/electron/blob/f5a75c4e87a73a802c41e9fb3608e10772dbe600/atom/browser/browser.h#L104",476,False,en,0
9824,2,0,0,Internals,jkleinsc,2017-06-26T02:16:34Z,52,28,1,4,"Resolves #9139
For certain node command line options, those options can be set via the
process object, so there isn't a need to add them to Electron's command line options.
The following properties were added to the documentation:

- `process.noDeprecation` to set the `--no-deprecation` flag
- `process.throwDeprecation` to set the `--throw-deprecation` flag
- `process.traceDeprecation` to set the `--trace-deprecation` flag
- `process.traceProcessWarnings` to set the `--trace-warnings` flag

Also, sorted properties and methods alphabetically for easier readability.",580,False,en,0
9819,2,0,3,Externals,ferreus,2017-07-19T02:15:31Z,17,0,3,27,"I tracked down this crash to https://chromium.googlesource.com/experimental/chromium/src/+/58.0.3029.110/content/browser/browser_plugin/browser_plugin_guest.h#153
```
WebContentsImpl* embedder_web_contents() const {
    return attached_ ? owner_web_contents_ : nullptr;
}
```

Which results in null pointer access on LoadURL when the view is hidden (Because it's detached).
This is actually not a matter of race condition. As it's simply enough to hide the webview, then issue LoadURL to crash it.

This will avoid the crash by simply refusing to navigate when the view is not attached.",596,False,en,0
9814,250,1,0,Externals,shubham2892,2017-09-13T00:20:20Z,6528,1928,312,84,"Fixes #8166 
Set Resizable to `false` on `windowWillEnterFullScreen` function and restore it in `windowDidExitFullScreen` function.",132,False,en,1
9808,1,1,0,Externals,Gryff,2017-06-20T16:48:59Z,2,2,1,0,"Documentation only
[ci skip]

When referenced as a bash script this displays with what looks like escaped characters: 
![image](https://user-images.githubusercontent.com/3209691/27338580-88cc056c-55cd-11e7-8622-9e378a54e993.png)

After removing the `bash` from code snippet it looks like this:
![image](https://user-images.githubusercontent.com/3209691/27338644-af2ead36-55cd-11e7-9a21-36e5aa9d88dd.png)
",412,False,en,0
9801,1,1,0,Internals,zeke,2017-06-20T03:45:46Z,5,5,5,0,This PR updates various docs to point to the (not very) new electron@github.com support email address.,102,False,en,0
9800,1,0,0,Internals,zeke,2017-06-19T20:20:59Z,1,1,1,0,Found by @Toinane while translating docs to French.,51,False,en,0
9798,1,3,0,Externals,tonyganch,2017-06-22T21:27:23Z,1,3,1,3,"Should fix #9711.
From https://developer.apple.com/library/content/releasenotes/AppKit/RN-AppKit/index.html:

> Previously NSWindow would make the titlebar transparent for certain windows with NSWindowStyleMaskTexturedBackground set, even if titlebarAppearsTransparent was NO. When linking against the 10.13 SDK, textured windows must explicitly set titlebarAppearsTransparent to YES for this behavior.

I checked the behaviour on 10.12 and 10.13.
Are there any possible downsides on 10.12 i don't see?

/cc @poiru ",523,False,en,0
9788,4,3,2,Externals,shubham2892,2017-07-14T18:58:13Z,19,2,5,26,"Fixes #8126 
Add a flag `alwaysShowTitleTextInFullscreen` which enables to show title when `titleBarStyle` is set to `hiddenInset`. Default value is `false`. 

Screenshot with flag enabled:
![image](https://user-images.githubusercontent.com/6316389/27257301-10f743f6-539f-11e7-812d-00a35e04a634.png)
",305,False,en,0
9784,5,7,0,Externals,calmandniceperson,2017-06-16T23:32:14Z,127,1,3,0,"This PR contains German translations for README and the Contributor Covenant (copied from [here](http://contributor-covenant.org/version/1/4/de/code_of_conduct.md)).

Even though I'm not sure translations for the code of conduct are even supposed to exist for each language (since the other languages seemingly don't contain it), but there are translations of it freely available and I figured that it only made sense to allow *everyone* to understand how they are expected to behave when working on Electron.",511,True,en,0
9782,1,1,0,Externals,jotafeldmann,2017-06-16T22:06:58Z,1,1,1,0,Why: this can mislead interpretation of the rest of the document. The `NSIS` is just one more topic at the same level of Process and Native Modules.,148,False,en,0
9778,2,2,1,Externals,lepinay,2017-06-26T15:36:43Z,5,4,1,10,"I found out that after trying to putting some long text in my extra properties that it was truncated, digging around I found these:

https://github.com/electron/electron/blob/897d58bde1414d73529a526a4f3fbc237683d9be/atom/common/crash_reporter/crash_reporter_win.cc
const int kNameMaxLength = 64;
const int kValueMaxLength = 64;",331,True,en,0
9772,2,1,2,Internals,zeke,2017-06-26T15:37:12Z,7,0,1,10,"Something I had to look up after viewing https://github.com/electron/electron/pull/9764, knowing it probably wasn't Cathode Ray Tube. :)",136,False,en,0
9769,1,0,0,Internals,kevinsawicki,2017-06-15T20:13:02Z,10,0,1,0,Should use `hiddenInset` instead.,33,False,en,0
9768,1,1,0,Internals,zeke,2017-06-15T20:50:37Z,24,0,1,0,"This PR updates the list of things that we plan to change in 2.0:

- deprecate `*-arm.zip` release asset
- look for FIXME comments",133,True,en,0
9767,1,2,0,Externals,poiru,2017-06-15T17:25:17Z,4,0,1,0,,0,False,en,0
9764,3,4,0,Externals,alespergl,2017-06-23T06:03:47Z,51,4,3,7,"This addresses #9443 
Depends on [libchromiumcontent#312](https://github.com/electron/libchromiumcontent/pull/312)
",117,False,en,0
9760,4,4,0,Externals,shubham2892,2017-06-28T19:15:32Z,69,1,7,13,"Fixes #7616 
Add API for listening to mouse-enter and mouse-exit events for Tray.",82,False,en,0
9755,4,2,0,Externals,Nirmal4G,2017-06-14T21:10:44Z,4,4,4,0,"Replace ""Windows 8"" to ""Windows 10""

**Windows 10** introduced **UWP**, although **WinRT** the API had been since Windows 8.

Application Containerization/Virtualization within UWP called _Project Centennial_ aka **Desktop Bridge** introduced _Windows 10 Build 14393_ aka **Anniversary Update**.

I think this should clarify some things...",345,True,en,0
9754,2,1,1,Externals,t-hofmann,2017-06-26T15:53:45Z,5,5,1,12,clarification in respect of execution structure,47,False,en,0
9751,1,1,0,Internals,zeke,2017-06-15T17:12:15Z,16,16,6,1,A little followup to #9750 that favors lowercase `(optional)` over `(Optional)` in API documentation.,101,False,en,0
9750,1,0,0,Externals,MarshallOfSound,2017-06-13T20:48:11Z,3,3,1,0,Fixes #9749,11,False,en,0
9745,1,1,0,Externals,yuya-oc,2017-07-14T17:41:12Z,6,0,1,31,"The dialog would filter files as well as Chrome, especially when using webview or BrowserView.",94,False,en,0
9743,2,4,2,Externals,MarshallOfSound,2017-06-26T18:20:52Z,6,1,1,13,"Before this fix if you had an accelerator.

```
CommandOrControl+Shift+1
```

It would be represented in menus as ""Command+!"" which although is correct in regards to keycodes it isn't semantically correct from a users perspective, nor from the intention of the shortcut in most cases.

This fix will unmutate the character if it is a number",348,True,en,0
9741,3,2,0,Internals,kevinsawicki,2017-06-14T22:22:56Z,47,12,2,2,"There seems to be a possible race condition where `window-setup.js` is loading and cannot receive IPC events and if the window changes visibility during that time, the `<webview>`'s `document.visibilityState` will be out of sync with the window.

This pull requests listens for `dom-ready` and sends the visibility state to the webview page then to make sure they are in sync.

Closes #9717",394,True,en,0
9739,2,2,0,Externals,deepak1556,2017-06-12T21:23:33Z,46,2,4,0,Fixes https://github.com/electron/electron/issues/9696,54,False,en,0
9738,1,0,0,Internals,kevinsawicki,2017-06-12T17:30:36Z,1,1,1,0,"Pulls in https://github.com/electron/crashpad/pull/4

/cc @cifratila ",71,True,en,0
9733,1,2,0,Externals,qazbnm456,2017-06-13T18:44:35Z,1,1,1,1,Use Buffer.from instead of deprecated new Buffer.,49,False,en,0
9725,1,10,0,Externals,danielma,2017-06-26T06:07:10Z,61,1,14,14,"Adds responders for `newWindowForTab` to `AtomApplicationDelegate` and
`NativeWindowMac`, so that `BrowserWindow`s with a `tabbingIdentifier`
will get the new tab button, and both `app` and `window` will emit a
`new-tab-for-window` event.

This builds on the work done in https://github.com/electron/electron/pull/9052

Testing app: https://github.com/danielma/electron-quick-start/tree/native-new-tab-button
Video: https://cl.ly/1W1i2K0c0509

<img width=""940"" alt=""screen shot 2017-06-11 at 2 24 07 am"" src=""https://user-images.githubusercontent.com/993340/27009837-11e29628-4e4d-11e7-8736-e3e9d399d710.png"">
",621,False,en,0
9724,4,0,0,Internals,zeke,2017-06-15T00:26:54Z,6,9,9,4,"This updates `standard-markdown` to a new version that lints with `standard` v10 and fixes some issues that were detected by the update.

> 'new Buffer()' was deprecated since v6. Use 'Buffer.alloc()' or 'Buffer.from()' (use 'https://www.npmjs.com/package/safe-buffer' for '<4.5.0') instead.
",295,True,en,0
9721,2,1,0,Externals,brianfajardo,2017-06-13T18:53:49Z,4,4,1,3,"`typeError` is shown when floating point values are passed to the rectangle object. 

For example, `BrowserWindow.setBounds(5, 10, 15.5, 20.5)` results in `typeError`

Added a small note in rectangle.md to add clarity.",222,True,en,0
9716,2,1,3,Externals,dakira,2017-06-09T22:01:32Z,2,2,1,0,"Starting with 17.04, Ubuntu sets XDG_CURRENT_DESKTOP to `Unity:Unity7` which prevents tray icons from being displayed. There already is a workaround for a similiar situation (for ElementaryOS).

I tested [this fix](https://github.com/electron/electron/issues/9046#issuecomment-296169661) by @MarshallOfSound in Ubuntu 17.04, and regression-tested it on older releases. Everythings works as expected.

Fixes #9046 ",417,True,en,0
9706,1,1,0,Externals,KagamiChan,2017-06-09T15:43:07Z,1,1,1,0,"According to current [implementation](https://chromium.googlesource.com/chromium/src/base/+/master/process/process_metrics_mac.cc#141) in upstram chromium, the `peakWorkingSetSize` value will always be 0 on macOS (and freebsd, but seems we don't have freebsd releases). I think it is worth noting down for avoid confusions.",323,False,en,0
9704,1,0,0,Internals,kevinsawicki,2017-06-08T16:39:43Z,1,1,1,0,"Pulls in https://github.com/electron/libchromiumcontent/pull/296

Which allows `webgl` configuration with a `powerPreference`:

```js
document.createElement('canvas').getContext('webgl', {powerPreference: ""low-power""});
```

/cc @miniak ",245,True,en,0
9703,2,1,0,Externals,MarshallOfSound,2017-06-08T17:43:42Z,1,3,1,0,/cc @zeke ,10,False,eu,0
9700,4,1,2,Externals,brenca,2017-06-14T10:15:29Z,210,34,5,6,"I've ported some code from the chromium zoom controller implementation to make the native PDF plugin work like it would in chromium - on zoom change only the document is zoomed, not the UI. ",190,False,en,0
9695,4,1,4,Externals,shubham2892,2017-07-14T17:09:14Z,26,0,2,37,"Fixes #9170 
Reset the custom level when windowWillMiniaturize fires and then restores it when windowDidDeminiaturize fires as suggested in issue.

Before: 
![Before Gif](http://i.imgur.com/81KX0Nm.gif)

After:
![After Gif](http://g.recordit.co/KNSZ7jDrhw.gif)

",271,False,en,0
9694,1,1,0,Externals,yuit,2017-06-08T13:56:34Z,1,1,1,0,,0,False,en,0
9687,3,4,0,Externals,poiru,2017-06-07T01:54:05Z,58,67,1,0,,0,False,en,0
9686,1,1,0,Externals,awaigand,2017-06-06T21:33:26Z,1,1,1,0,Fixed a simple typo in the docs.,32,False,en,0
9682,1,0,0,Internals,kevinsawicki,2017-06-06T20:37:49Z,1,1,1,0,"Support other release configurations that may have the architecture in them like `R_x64`.

Closes #9651",105,True,en,1
9674,1,3,0,Externals,deepak1556,2017-06-05T17:21:19Z,16,139,4,0,"There are edge cases involving pending navigation entries that weren't accounted for in the original PR. https://github.com/electron/electron/issues/8700 can be fixed with plznavigate move.

Fixes https://github.com/electron/electron/issues/9121",247,True,en,0
9667,1,1,0,Externals,solinium,2017-06-05T17:00:08Z,1,1,1,0,"https://nodesecurity.io/advisories/request_remote-memory-exposure
dependency 'request' has a security vulnerability for versions earlier than 2.68.0",149,False,en,0
9657,2,1,0,Externals,MarshallOfSound,2017-06-05T15:55:58Z,3,2,1,2,"This removes the weird required syntax in menu docs that tricked the parser

Fixes electron/electron-typescript-definitions/issues/54",135,True,en,0
9645,5,5,3,Externals,dharders,2017-06-14T21:10:00Z,44,0,2,13,"Fixes #6036

**Summary**

In **Windows only**, starting an app in the fullscreen state i.e. with the BrowserWindow options `{ fullscreen: true }` produces an unresponsive window after toggling to the normal window state. e.g. Pressing F11 or `setFullScreen(false)`. See issue #6036

The window visibility flag `WS_VISIBLE` is never set for the `GWL_STYLE` when we start in fullscreen mode. This fix simply detects the fullscreen->normal window state transition and checks if the window is visible (which it always should be). If it isn't, it sets the visibility to true. i.e. :

```cpp
void NativeWindowViews::SetFullScreen(bool fullscreen) {
   bool fullscreen_to_normal_detected = IsFullscreen() && !fullscreen;
   ...
   if (fullscreen_to_normal_detected && !IsVisible()) {
       LONG frame_style = ::GetWindowLong(GetAcceleratedWidget(), GWL_STYLE);
       frame_style |= WS_VISIBLE;
       ::SetWindowLong(GetAcceleratedWidget(), GWL_STYLE, frame_style);
   }
   ...
}
```

Includes tests (this branch passes, old behavior fails)

Fixes #6036",1071,True,en,0
9644,23,14,0,Externals,juturu,2017-06-28T17:10:26Z,209,8,14,27,Fixes #9611 ,12,False,en,0
9640,1,3,0,Internals,zeke,2017-05-31T22:16:56Z,1,1,1,0,"Explicit bump to get TypeScript file generation working on master for everyone.

Details at https://github.com/electron/electron-typescript-definitions/pull/61",161,True,en,0
9636,1,1,0,Internals,kevinsawicki,2017-05-31T20:22:30Z,1,1,1,0,Noticed this was listed as `void` in the `electron.d.ts` file.,62,False,en,0
9634,1,0,0,Internals,kevinsawicki,2017-05-31T16:52:23Z,53,53,1,0,"Seeing a flaky spec on CI:

```
not ok 349 net module ClientRequest API should follow redirect chain when no redirect mode is provided
  AssertionError: false == true
      at Server.<anonymous> (C:\Users\electron\workspace\electron-win-x64\spec\api-net-spec.js:1029:13)
      at emitTwo (events.js:106:13)
      at Server.emit (events.js:194:7)
      at parserOnIncoming (_http_server.js:563:12)
      at HTTPParser.parserOnHeadersComplete (_http_common.js:99:23)
Error: net::ERR_EMPTY_RESPONSE 'Error: net::ERR_EMPTY_RESPONSE
```

This pull request updates the spec to use `assert.fail` with a message containing the URL instead of `assert(false)`.",663,True,en,0
9630,1,1,0,Externals,cifratila,2017-05-31T15:10:06Z,1,1,1,0,"Small PR.
It seems we forgot to bump the Node.JS version in the Electron repo.",79,False,en,0
9627,1,0,0,Internals,kevinsawicki,2017-05-31T15:09:51Z,0,0,1,0,üî• Noticed this file was empty and not referenced from `filenames.gypi` üî• ,79,False,en,0
9623,4,5,8,Internals,miniak,2017-05-31T15:11:50Z,50,0,5,0,"This method returns the **Graphics Feature Status** from chrome://gpu/ as JSON.
It allows detecting the status of GPU acceleration without having to open a hidden `BrowserWindow` and parsing the data from HTML.

Example output:
```
{  
   ""2d_canvas"":""enabled"",
   ""flash_3d"":""enabled"",
   ""flash_stage3d"":""enabled"",
   ""flash_stage3d_baseline"":""enabled"",
   ""gpu_compositing"":""enabled"",
   ""multiple_raster_threads"":""enabled_on"",
   ""native_gpu_memory_buffers"":""enabled"",
   ""rasterization"":""enabled"",
   ""video_decode"":""enabled"",
   ""video_encode"":""enabled"",
   ""vpx_decode"":""enabled"",
   ""webgl"":""enabled"",
   ""webgl2"":""enabled""
}""
```

The list of possible values can be found in `chrome://gpu/gpu_internals.js` (`statusMap`).",752,False,en,0
9615,4,3,0,Externals,iamsingla9,2017-06-05T17:03:49Z,2,0,1,7,,0,False,en,0
9610,3,3,0,Externals,shubham2892,2017-06-15T17:29:11Z,9,4,1,17,"Running `[dialog setAllowedFileTypes:file_types];` replaces the extension in `nameFieldStringValue` with first value in `file_types` variable however if `[dialog setNameFieldStringValue:default_filename];` is run after setting the `allowedFileTypes` the extension initially passed with the default filename is retained. Explicitly setting `setExtensionHidden` makes sure that extension is shown everytime. 
Screenshots to confirm that issue is fixed:

Code:
 ```
    const {dialog} = require('electron')
    dialog.showSaveDialog(mainWindow, {
      defaultPath:'/tmp/test.jpg',
      filters: [
        { name: 'Image', extensions: ['jpg', 'jpeg', 'png', 'gif'] }
      ]
    }, function(filename) {})
```
Result:
![image](https://cloud.githubusercontent.com/assets/6316389/26531626/9a33c4d6-43ba-11e7-83fc-9d22b7d5a4ff.png)

#9455 ",849,False,en,0
9603,1,0,0,Internals,kevinsawicki,2017-09-14T06:49:41Z,1,0,1,110,"This was reverted in commit 385d6faf1ab6867f04b9d2b5e66b0921d4b71cd4 before the 1.7.2 release to get it out the door.

This pull request adds it back to further investigate the error below:

```
npm run create-typescript-definitions
```

```
Error: Ruh roh, ""Options"" is already declared
    at Object.keys.sort.forEach (/Users/kevin/github/electron/node_modules/electron-typescript-definitions/lib/dynamic-param-interfaces.js:77:17)
    at Array.forEach (native)
    at Object.flushParamInterfaces (/Users/kevin/github/electron/node_modules/electron-typescript-definitions/lib/dynamic-param-interfaces.js:70:142)
    at module.exports (/Users/kevin/github/electron/node_modules/electron-typescript-definitions/index.js:69:19)
    at apiPromise.then.then.API (/Users/kevin/github/electron/node_modules/electron-typescript-definitions/cli.js:57:18)
    at process._tickCallback (internal/process/next_tick.js:103:7)
    at Module.runMain (module.js:607:11)
    at run (bootstrap_node.js:420:7)
    at startup (bootstrap_node.js:139:9)
    at bootstrap_node.js:535:3
```",1088,True,en,0
9602,2,0,0,Internals,kevinsawicki,2017-05-26T21:28:48Z,4,4,3,0,"Changes the typescript definitions from:

```ts
getAppMemoryInfo(): void;
getAppMetrics(): void;
getPrinters(): void;
```

to:

```ts
getAppMemoryInfo(): ProcessMetric[];
getAppMetrics(): ProcessMetric[];
getPrinters(): PrinterInfo[];
```",252,True,en,0
9599,3,5,0,Externals,CharlieHess,2017-06-07T16:21:47Z,2,6,1,11,"These are turning up in `electron.d.ts` as:

``` ts
getCPUUsage(CPUUsage: Electron.CPUUsage): void;
getIOCounters(IOCounters: Electron.IOCounters): void;
```",162,True,en,0
9597,1,0,0,Internals,kevinsawicki,2017-05-26T17:09:37Z,76,104,5,0,"Reverting https://github.com/electron/electron/pull/9358 for now, will reopen #9342

/cc @deepak1556 

Closes #9587",119,True,en,0
9596,1,0,0,Internals,kevinsawicki,2017-05-26T16:47:12Z,2,2,1,0,Create prereleases by default and add beta to the name. This was previously manually done in the UI before publishing.,118,False,en,0
9592,1,0,0,Externals,poiru,2017-05-26T04:10:23Z,1,1,1,0,This pulls in electron/libchromiumcontent#306.,46,False,en,0
9591,1,0,0,Internals,kevinsawicki,2017-05-30T16:13:23Z,0,24,3,4,"While looking into #9589 I was looking at what was still using `runas` that was referenced as an optional dependency in the root `package.json`.

It looked like the only thing using it was `tools/win/register_msdia80_dll.js` which is no longer called by `script/dump-symbols.py` starting in https://github.com/electron/electron/commit/a1bb0d4d66679d2b49733a74aee15f82d995803e

If this is unused then it would seem worth it to remove since bootstrap would be a bit quicker since it is one less native module to install/compile.

It is still listed as a dependency in `spec/package.json` since it is used by the specs still.",628,True,en,0
9590,1,0,0,Internals,kevinsawicki,2017-05-25T23:57:25Z,3,0,1,0,Extracted from #9570 since this needs to be committed before the re-enable build runs.,86,False,en,0
9589,13,0,0,Internals,kevinsawicki,2017-05-30T16:50:15Z,229,119,11,4,"Native modules used by specs used to be recompiled against the published headers hosted from https://atom.io/download/electron. This created issues whenever the node module version was bumped since the headers downloaded would be for a previous release and so the specs would fail with a message like: 

```
Error: The module 'runas' was compiled against a different Node.js version using NODE_MODULE_VERSION...
```

This problem would go away once the release was published since the correct headers would be downloaded in future builds.

In https://github.com/electron/electron/pull/9116 this was changed to compile the native modules against the local headers done via running `create-node-headers.py` during bootstrap and pointing `npm_config_nodedir` to that location.

That worked well on Linux and macOS, but failed on Windows since the `node.dll.lib` file needed to compile against was missing at bootstrap time since it is created by the build.

This pull request updates bootstrap to no longer install the spec modules and instead install them at test time or when explicitly requested via `npm run rebuild-test-modules`. Since tests are run after a build this should resolve the issue with the `.lib` file being present now.

### Summary

- `npm run bootstrap` is now faster since it does not install the `spec/node_modules` so people only building and not testing will have a quicker experience.
- `npm run rebuild-test-modules` is added that can be run at any time and will rebuild the test modules against the current headers, useful when switching branches.
- `npm test` will install/build the test modules when `spec/node_modules` does not exist yet.
- `npm test -- --rebuild_native_modules` will be run by `script/cibuild` so modules are always rebuilt on every CI run.
- Consolidate logic in specs where native modules support is checked for with new `nativeModulesEnabled` global.

Closes #9442",1935,True,en,2
9588,1,1,0,Externals,poiru,2017-06-14T21:41:45Z,16,6,4,19,"Prior to this change, attempting to use `dialog.showSaveDialog({ defaultPath: 'foo.png' })` would open the save dialog to the current directory with the default file name set to `foo.png`. We now use the last selected directory instead of the current directory.

Absolute paths are not affected by this change.",312,True,en,0
9586,2,0,0,Internals,kevinsawicki,2017-05-25T17:55:26Z,2,2,2,0,"Pulls the following libchromiumcontent fixes into 1.6.x:

* https://github.com/electron/libchromiumcontent/pull/303
* https://github.com/electron/libchromiumcontent/pull/304
* https://github.com/electron/libchromiumcontent/pull/305",235,True,en,0
9582,1,1,0,Externals,EnterTheNameHere,2017-05-25T15:52:34Z,1,1,1,0,Spelling correction.,20,False,pt,0
9580,1,1,0,Externals,iamsingla9,2017-05-24T23:31:07Z,2,2,1,0,Fixes #9277,11,False,en,0
9579,1,0,0,Internals,kevinsawicki,2017-05-25T15:51:14Z,2,0,1,0,"Master is currently failing to link the macOS release builds.

Reported by @TimNZ over in https://github.com/electron/electron/issues/9548#issuecomment-303666608

Probably related to the changes in #8596 ",208,True,en,0
9572,7,3,10,Externals,shubham2892,2017-06-05T17:35:17Z,41,0,6,12,"Added an API to get MACOS X menubar height in the screen module using the `[NSApp mainMenu] menuBarHeight` API provided.
#8029
",129,False,en,0
9570,1,2,0,Internals,kevinsawicki,2017-05-26T00:05:31Z,0,7,1,2,Reverts #9476 now that setting `LIMIT_OUTPUT_IGNORE_SEGFAULTS` will cause segfaults (expected in crash reporter specs) to not be detected as build failures.,156,False,en,0
9568,20,16,0,Internals,kevinsawicki,2017-05-26T18:11:33Z,222,13,17,2,"Support setting `webpreferences=""nativeWindowOpen=1""` on `<webview>` tags.

- [x] Don't crash when using `nativeWindowOpen` on a `<webview>` tag
- [x] Return `null` from native `window.open` when called from a `<webview>` tag that does not have `allowpopups` set
- [x] Add more specs

Refs #8963 
Fixes #9556 ",316,True,en,0
9564,8,1,3,Externals,rreimann,2017-05-24T16:04:34Z,51,7,4,1,"This PR backports [#9507](https://github.com/electron/electron/pull/9507#issuecomment-303226315) to the 1.6.x branch.

üçí ",126,True,en,0
9557,1,0,0,Internals,kevinsawicki,2017-05-23T15:58:46Z,1,1,1,0,"Pulls in the following:

* https://github.com/electron/libchromiumcontent/pull/300
* https://github.com/electron/libchromiumcontent/pull/301",143,True,en,0
9554,1,1,0,Externals,javan,2017-05-22T17:43:16Z,2,2,1,0,,0,False,en,0
9551,3,0,0,Internals,kevinsawicki,2017-05-22T16:59:05Z,19,10,4,0,"Pulls in the following:

* https://github.com/electron/libchromiumcontent/pull/295
* https://github.com/electron/libchromiumcontent/pull/297
* https://github.com/electron/libchromiumcontent/pull/298
* https://github.com/electron/libchromiumcontent/pull/299

Also switches the build to download prebuilds using the SHA-1 from the `vendor/libchromiumcontent` submodule instead if storing it two places.",407,True,en,0
9547,9,3,0,Internals,zcbenz,2017-05-24T07:25:40Z,157,114,6,1,"This is to match Chromium's build settings, and it is also a requirement for arm64 build.

Note that the sysroot scripts in Electron and debian-sysroot-image-creator have been updated to Chromium's upstream ones, and assets are now stored in S3 instead of GitHub Releases to minimize the diffs with upstream.

/cc @kolach.",326,True,en,0
9544,1,1,0,Externals,kyokutyo,2017-05-22T15:56:31Z,1,1,1,0,,0,False,en,0
9540,1,2,0,Externals,RevoluPowered,2017-05-22T15:55:59Z,4,1,1,2,"Fixes app.getPath(""userData"") pointing to the wrong folder. (electron in %appdata%)

The old debugger essentially runs:
.\node_modules\.bin\electron main.js

Which makes userData incorrect and various other things wrong related to app launch.

The new version correctly executes:
.\node_modules\.bin\electron .

Which means when you call app.getPath(""userData"") it will return the correct folder name, and not 'electron', which is what my app was doing even though the folder was named properly.",505,True,en,0
9535,8,3,11,Externals,brenca,2017-05-29T07:01:40Z,1701,52,22,9,"Resolves #360 
Also fixes menubar inkdrop animations appearing at an incorrect location in RTL layout mode.

![image](https://cloud.githubusercontent.com/assets/1690458/26265017/73ba16e8-3cdf-11e7-94b3-88db40ce98cc.png)",222,False,en,0
9527,16,0,0,Internals,kevinsawicki,2017-05-19T16:07:36Z,350,391,123,0,"This pull request does some follow-on cleanup to the brightray import done in #9423 

- [x] Enable `build/header_guard` linter rule and remove existing violations
- [x] Enable `build/include_what_you_use` linter rule and remove existing violations
- [x] Enable `build/include_alpha ` linter rule and remove existing violations
- [x] Enable `runtime/references` linter rule and remove existing violations
- [x] Remove unused classes
- [x] Add `brightray/` prefix to include paths to match other Electron code",514,True,en,0
9519,1,0,0,Internals,zcbenz,2017-05-19T08:49:03Z,5,145,11,1,"This PR cleans up our patches on Chromium and Node by using `v8::ArrayBuffer::Allocator` inside Node, previously we were adding new APIs to Chromium and Node, and glueing them together in Electron.

The new patches should be easier to understand, and they would be easier to be upstreamed.

Corresponding patches in Chromium and Node are:
https://github.com/electron/node/commit/dfa72e2c73e0442d27746e0f8716d0427f7f9b27
https://github.com/electron/libchromiumcontent/blob/master/patches/v8/array_buffer.patch
",516,True,en,0
9518,1,1,0,Externals,TingPing,2017-05-19T15:44:56Z,4,0,1,1,Ideally this will become the default as `gvfs-trash` is deprecated and nothing more than a wrapper to `gio` but at least allow easily opting into the modern method.,164,False,en,0
9516,1,0,0,Internals,kevinsawicki,2017-05-18T00:11:03Z,7,4,1,0,"This spec failed on CI once:

```
not ok 471 webContents module getOSProcessId() returns a valid procress id
  AssertionError: superior to 0
      at Context.<anonymous> (C:\Users\electron\workspace\electron-win-x64\spec\api-web-contents-spec.js:334:7)
```

Wait until load finishes before asserting the PID of the renderer process.",340,True,en,0
9514,1,0,0,Internals,kevinsawicki,2017-05-17T22:25:15Z,7,0,1,0,Backport https://github.com/electron/electron/pull/9476 to 1.6.x so the linux specs are green there.,100,False,en,0
9513,1,0,0,Internals,kevinsawicki,2017-05-17T23:58:12Z,1,1,1,0,This URL was updated a bunch of other places in https://github.com/electron/electron/pull/7881 but this one was missed.,119,False,en,0
9508,1,0,0,Internals,kevinsawicki,2017-05-17T17:51:42Z,2,2,2,0,"Pulls in the following:

- https://github.com/electron/libchromiumcontent/pull/291
- https://github.com/electron/libchromiumcontent/pull/293",143,True,en,0
9507,7,2,9,Externals,rreimann,2017-05-22T21:34:35Z,51,18,4,5,"Suppress dispatching pdf resource requests to the native pdf viewer if plugins are disabled in `BrowserWindow.webPreferences` as suggested by @deepak1556 in https://github.com/electron/electron/issues/9412#issuecomment-300208701.

Note to the reviewer(s):
Since i've no clue about writing C++ code i tried to keep the changes as small as possible and skipped the following potential improvements:
* `web_contents_getter.Run()` is now called twice during the request at [ShouldInterceptResourceAsStream](https://github.com/rreimann/electron/blob/2f08b55a8a21cdc6a340ec663afcb79b6f48b6fc/atom/browser/atom_resource_dispatcher_host_delegate.cc#L128) and at [OnPdfResourceIntercepted](https://github.com/rreimann/electron/blob/2f08b55a8a21cdc6a340ec663afcb79b6f48b6fc/atom/browser/atom_resource_dispatcher_host_delegate.cc#L69). If i'd known the required syntax i would have called it just once and passed the resulting `WebContents` to `OnPdfResourceIntercepted`

* After adding `IsPluginsEnabled` to the existing methods `IsSandboxed` and `UsesNativeWindowOpen` there are now [three methods](https://github.com/rreimann/electron/blob/2f08b55a8a21cdc6a340ec663afcb79b6f48b6fc/atom/browser/web_contents_preferences.cc#L202-L246) that seem widely redundant. I did't know if the preexisting redundancy was intentional so i didn't try to extract a common method for all of them.

Fixes #9412",1392,True,en,0
9505,2,3,1,Externals,tarruda,2017-05-17T18:19:25Z,106,5,7,0,,0,False,en,0
9499,1,0,0,Internals,kevinsawicki,2017-05-17T18:07:21Z,1,1,1,0,"This pull request cherry-picks 3 commits from node that were released in 7.6 and 7.8.

This makes https requests via node behave the same as Chrome in terms of rejecting certs from StartCom/WoSign.

This was addressed in Node 7.6 but Electron 1.6.x still runs on Node 7.4.

### Before

<img width=""798"" alt=""screen shot 2017-05-16 at 4 38 55 pm"" src=""https://cloud.githubusercontent.com/assets/671378/26132677/bc7bb61a-3a56-11e7-9b98-005cc1f41bac.png"">

### After

<img width=""794"" alt=""screen shot 2017-05-16 at 4 40 16 pm"" src=""https://cloud.githubusercontent.com/assets/671378/26132676/bc7ad308-3a56-11e7-8f3e-c54ad0d1a8dc.png"">

### Background

* https://security.googleblog.com/2016/10/distrusting-wosign-and-startcom.html
* https://wiki.mozilla.org/CA:WoSign_Issues

### Commits

* https://github.com/nodejs/node/commit/5e98e34648e2e1924fb0b5de0ef811a790dc8f50
* https://github.com/nodejs/node/commit/7af03ba3f67ae2074701fe2af66ddbbf968b8d5d
* https://github.com/nodejs/node/commit/a64aa442c18e7ea498bb9a03d150a5e0a56be509

/cc @ikkisoft


Refs https://github.com/nodejs/node/pull/9469
Fixes  #9457 ",1134,True,en,0
9491,1,1,0,Externals,iamkun,2017-05-16T17:13:52Z,1,1,1,0,"In Documentation Translations - Simplified Chinese Section, the link to mac os debug instruction was broken.

[document link](https://github.com/electron/electron/tree/master/docs-translations/zh-CN#ÂºÄÂèë) 

[previous broken link](https://github.com/electron/electron/blob/master/docs-translations/zh-CN/development/debug-instructions-macos.md) 

I replaced with the new link [here](https://github.com/electron/electron/blob/master/docs-translations/zh-CN/development/debugging-instructions-macos.md).",508,True,en,0
9489,2,3,0,Externals,paulinaika,2017-05-16T17:13:30Z,263,1,3,0,,0,False,en,0
9486,13,3,4,Externals,juturu,2017-05-26T16:28:22Z,186,36,9,10,"- [x] TODO: Need to deprecate getAppMemoryInfo. What is the process of deprecation?

New API getAppMetrics will return something like below
```
    {  
      ""memory"":{  
         ""workingSetSize"":64920,
         ""peakWorkingSetSize"":0,
         ""privateBytes"":21300,
         ""sharedBytes"":68552
      },
      ""cpu"":{  
         ""percentCPUUsage"":0,
         ""idleWakeupsPerSecond"":0
      },
      ""pid"":85123,
      ""type"":""Tab""
   },
   {  
      ""memory"":{  
         ""workingSetSize"":78604,
         ""peakWorkingSetSize"":0,
         ""privateBytes"":17488,
         ""sharedBytes"":84520
      },
      ""cpu"":{  
         ""percentCPUUsage"":0.40786608393219276,
         ""idleWakeupsPerSecond"":0
      },
      ""pid"":85092,
      ""type"":""GPU""
   },
   {  
      ""memory"":{  
         ""workingSetSize"":77032,
         ""peakWorkingSetSize"":0,
         ""privateBytes"":29612,
         ""sharedBytes"":80568
      },
      ""cpu"":{  
         ""percentCPUUsage"":0.7511017533585603,
         ""idleWakeupsPerSecond"":4
      },
      ""pid"":85091,
      ""type"":""Browser""
   }
```",1114,True,en,0
9484,11,3,2,Internals,zeke,2017-05-16T17:15:30Z,29,23,8,0,"This PR cherry picks some fixes to the API docs, the docs linter, and the typescript generator to bring 1.6's `electron.d.ts` file up to snuff.

üçí 

cc @kevinsawicki ",173,True,en,0
9483,3,0,0,Internals,kevinsawicki,2017-05-15T21:01:00Z,7,11,4,0,"Follow on to #9222 

* Return `base::ProcessId` typedef instead of `int`
* Assert pid is 0 for `webContents` with no URL
",125,True,en,0
9481,3,1,0,Externals,djpereira,2017-05-15T19:23:29Z,21,6,1,0,"1. Change deprecated webkitGetUserMedia for MediaDevices.getUserMedia.
1. Fix constraints for audio sharing",108,False,en,0
9480,1,0,0,Externals,poiru,2017-05-15T18:57:31Z,2,2,1,0,,0,False,en,0
9476,1,0,0,Internals,kevinsawicki,2017-05-15T19:19:01Z,7,0,1,0,Having some internal issues with our CI where any process crashing fails the build so this pull request disables the crash reporter specs on Linux CI until this issue is resolved to get the build green again.,208,False,en,0
9473,12,2,0,Internals,kevinsawicki,2017-05-16T22:38:08Z,55,1037,18,1,"Enables node inspector agent when `--inspect`/`--inspect-brk` is specified so you can debug the the main process from chrome://inspect

![inspect](https://cloud.githubusercontent.com/assets/671378/26068341/0557efee-3952-11e7-8fbe-f4abbdc7012b.gif)

Fixes #6634 ",265,True,en,0
9470,1,1,0,Externals,MarshallOfSound,2017-05-15T15:47:09Z,2,0,1,0,Fixes #9469,11,False,en,0
9468,4,4,0,Externals,tonyganch,2017-06-05T21:47:50Z,28,12,2,21,"This should fix #9296.
Test repo: https://github.com/tonyganch/electron-quick-start/tree/history-regression

**TL;DR:** Current implementation of NavigationController does not allow using
`history.pushState()` if page url is not changed.
I think it worked by mistake in versions < 1.3.6 and got visible after fix 180a77e6.

**The issue:** live.com website uses `history.pushState()` and `history.back()` to navigate between different views of login form. Click on ""Sign in"" button calls `history.pushState({viewId: viewId}, '')` and click on ""Back"" button calls `history.back()`.
On `history.pushState()` NavigationController checks if the url of the page has changed and if not, then it doesn't push new state to history, meaning that `history.pushState()` called from js does absolutely nothing.
When the page then tries to call `history.back()`, NavigationController checks if the history is empty, sees that it is and does nothing (which makes sense).

Electron has its implementation of NavigationController which was introduced by this commit: 0143a4548869c1e8201ef3c3b6c2e098d5dd5140.
You can see that on line 19 we added the check if the page has the same url or a new one:
https://github.com/electron/electron/commit/0143a4548869c1e8201ef3c3b6c2e098d5dd5140#diff-35a86eec0f3148dfbe7621bd8f9bab7cR19
I don't see such check in previous code which makes me think that maybe it was introduced by mistake?

Commit after which everything ""broke"" is 180a77e6, but i honestly think that it just made the situation obvious and the things didn't work properly even before that.",1592,False,en,0
9460,2,1,0,Externals,poiru,2017-05-14T11:17:13Z,9,9,3,0,"These are needed for electron/electron-docs-linter#95.

cc @zeke @MarshallOfSound ",84,True,en,0
9450,1,2,0,Externals,akost,2017-05-12T21:16:17Z,5,5,1,0,Fixed capitalization and punctuation in /ru-RU/README.md,56,False,en,0
9448,1,1,0,Externals,xaverh,2017-05-12T16:48:14Z,1,0,1,0,Added a link to the clang-format extension for Visual Studio Code.,66,False,en,0
9440,3,1,0,Externals,brenca,2017-05-17T08:14:27Z,28,8,4,5,"I've re-added the removed `GetSizeForNewRenderView` method since it is now required to initialize the size of OSR views (otherwise html pages won't see a proper window size, and will not render properly initially). I only saw this happening once I started testing a bit more with the release build, so this is why I didn't include this commit in the - now merged - PR.

Also fixes a scale factor change in the compositor affecting high DPI Macs.",447,True,en,0
9436,2,1,0,Internals,kevinsawicki,2017-05-15T15:47:53Z,0,16,3,3,"Looks like the old v8 debugger protocol was removed in v8 5.8, https://github.com/nodejs/node/issues/9789 and the debug agent of node was also removed in https://github.com/nodejs/node/pull/12197.

Right now running `electron --debug` is crashing since there is no debug context available from v8 and so it fails when assigning the context to the node env.

This pull request removes the use of the `NodeDebugger` class to stop this crash from happening.

This would be a stopgap solution until we can ship support for `--inspect`/`--inspect-brk` via #6634.

I've left the classes in there for now, they are just no longer created on startup.

Refs https://github.com/nodejs/node/issues/11421
Refs https://github.com/nodejs/node/pull/12197

Closes #9434",766,True,en,0
9435,4,2,0,Internals,kevinsawicki,2017-05-15T18:09:38Z,15,1,4,4,"simply parse the command line arguments and pass to `net::HttpCache::DefaultBackend`

Refs https://github.com/electron/brightray/issues/290
Ported over from https://github.com/electron/brightray/pull/291

/cc @cjld",219,True,en,0
9432,1,1,0,Externals,MarshallOfSound,2017-05-11T15:43:12Z,2,0,1,0,,0,False,en,0
9430,2,5,0,Externals,suryast,2017-05-12T15:48:51Z,85,0,2,1,,0,False,en,0
9429,2,0,0,Internals,zeke,2017-05-11T07:03:26Z,3,1,1,0,"This PR updates `electron-typescript-definitions` to a new version that includes `@types/node` as a dependency and runs additional `tsc` checks on `electron.d.ts`

I've also added two new npm scripts. Their purpose is to make it easier for folks to hack on Electron's API docs and preview the resultant `electron.d.ts` without intimate knowledge of the tooling.

cc @shiftkey @MarshallOfSound @poiru 

Related:

- https://github.com/electron/electron-typescript-definitions/issues/39
-  https://github.com/electron/electron-typescript-definitions/pull/41
- https://github.com/electron/electron-typescript-definitions/issues/43
- https://github.com/electron/electron-typescript-definitions/pull/45",707,True,en,0
9427,1,1,0,Externals,MarshallOfSound,2017-05-10T23:30:04Z,1,1,1,0,/cc @kevinsawicki @zeke ,24,False,hu,0
9425,3,1,0,Internals,kevinsawicki,2017-05-10T23:25:18Z,6,6,2,0,Covers a few of the things mentioned in https://github.com/electron/electron-typescript-definitions/issues/39,109,False,en,0
9423,250,0,0,Internals,kevinsawicki,2017-05-11T15:35:41Z,13547,82,168,0,"This pull imports the source code from https://github.com/electron/brightray into this repository.

Brightray started as a submodule/separate codebase because it was planned to be used by other projects but this never really panned out and so having it separated has no benefit to Electron, makes contributions more difficult, and makes Chrome upgrades more complicated.

This pull request includes the original history so blame/log/etc. should work still.

You can browse the imported history from https://github.com/electron/electron/tree/brightray-import/brightray

/cc @electron/maintainers 

## After Merging

- [x] Migrate brightray pull requests to this repository
- [x] Move brightray to electron-archive organization
",740,True,en,0
9415,1,0,0,Internals,zeke,2017-05-09T23:52:39Z,1,4,2,0,"As of 1.2.0, `electron-typescript-definitions` lints its own output.

https://github.com/electron/electron-typescript-definitions/pull/38

cc @MarshallOfSound @kevinsawicki ",177,True,en,0
9408,1,1,0,Externals,Hum4n01d,2017-05-09T15:57:04Z,4,4,1,0,It was previously inconsistent,30,False,en,0
9404,1,4,0,Externals,tom-james-watson,2017-05-16T19:39:23Z,2,2,1,8,"Potentially this is a bug and not intended functionality (in my case it is useful), but passing a custom array of `buttons` into `dialog. showMessageBox` will mean that the process is no longer blocked by the dialog. I've updated the documentation to make this explicit.

I have also opened https://github.com/electron/electron/issues/9405 with a suggestion to add a new parameter to make blocking/non-blocking more explicit.

[ci skip]",440,True,en,0
9400,1,1,0,Externals,brianzelip,2017-05-08T15:57:50Z,2,2,1,1,[ci skip],9,False,pl,0
9397,18,9,4,Externals,juturu,2017-05-19T17:58:11Z,159,19,16,12,,0,False,en,0
9396,1,0,0,Externals,drulm,2017-06-26T05:48:45Z,2,2,1,50,"‚Ä¶ptions to prevent error on display.

In reference to #9361, Math.ceil()'ed the height and width parameters. Tested on Ubuntu 16.04 as working. 

## Proposed solution:
in /lib/browser/api/web-contents.js

```
// Translate the options of printToPDF.
WebContents.prototype.printToPDF = function (options, callback) {
...
      printingSetting.mediaSize = {
        name: 'CUSTOM',
        custom_display_name: 'Custom',
        // Add Math.ceil() to page height and width.
        height_microns: Math.ceil(pageSize.height),
        width_microns: Math.ceil(pageSize.width)
      }
```
",605,True,en,0
9389,2,6,2,Externals,tarruda,2017-05-17T07:20:27Z,106,5,7,11,"This is required to ensure page reloads are handled properly.

Close #9387",76,True,en,0
9388,2,0,0,Internals,zeke,2017-05-08T22:42:10Z,3,1,1,3,"This is a followup to https://github.com/electron/electron/pull/7857 that passes config to `tslint`. Without it, the create-dist process will print a bunch of warnings and exit nonzer√∏. üî•

cc @kevinsawicki @MarshallOfSound ",229,True,en,0
9385,1,1,0,Externals,sergeysova,2017-05-05T17:34:07Z,1,0,1,0,,0,False,en,0
9383,1,1,0,Externals,johangp,2017-05-05T15:11:49Z,1,1,1,0,"Google Chrome isn't an open source project. Chromium is an open source project, so I think that is more precise say ""and is used in Chromium, the open source browser from Google"" or something like these.",203,False,en,0
9381,1,1,0,Externals,juturu,2017-05-05T23:03:26Z,8,9,2,0,"CPU Usage was returning zero always as metrics object was created every time from API. CPU usage saves the last time GetCPUUsage method was invoked to calculate the kernel/user time.

Converting to getCPUUsage API to be instance method.",238,True,en,0
9373,8,3,11,Externals,juturu,2017-05-04T22:30:20Z,90,0,6,0,,0,False,en,0
9360,3,6,0,Externals,deepak1556,2017-05-11T23:01:15Z,48,4,3,8,"Service worker registration requires a successful response code https://cs.chromium.org/chromium/src/content/browser/service_worker/service_worker_write_to_cache_job.cc?l=285, until https://bugs.chromium.org/p/chromium/issues/detail?id=688481 gets landed we have to provide a default success response code.

Fixes https://github.com/electron/electron/issues/9354",364,True,en,0
9358,1,4,0,Externals,deepak1556,2017-05-18T16:58:06Z,106,76,5,15,"Race between destruction of source and sink buffers caused UAF crash. This PR changes the way data is passed from the fetcher to request job.

~~Depends on https://github.com/electron/brightray/pull/293~~

Fixes #9342 ",222,True,en,0
9353,1,1,0,Externals,kainjow,2017-05-02T16:08:07Z,1,1,1,0,,0,False,en,0
9348,1,1,0,Externals,tsekityam,2017-05-04T18:32:12Z,1,1,1,2,"The translation of `license` should not be `ÊÜëË≠â`.
`ÊÜëË≠â` means certificate but not license in Chinese.

For example, [Symantec](https://www.symantec.com/zh/tw/security_response/glossary/define.jsp?letter=d&word=digital-certificate) translated `digital certificate` as `Êï∏‰ΩçÊÜëË≠â`; [Chrome Support](https://support.google.com/chrome/a/answer/3505249?hl=zh-Hant) used the teams `ÊÜëË≠âÊéàÊ¨äÂñÆ‰Ωç` and `SSL ÊÜëË≠â` to describe `CA` and `SSL Certificate`. These are all proving that the word `ÊÜëË≠â` is commonly used in the translation of `certificate`, but not `license`

I googled for a while, and found that the team `ÊéàÊ¨äÊ¢ùÊ¨æ` is commonly used to describe `license` in Traditional Chinese. The user of the translation `ÊéàÊ¨äÊ¢ùÊ¨æ` includes governments ([Taiwan Government](https://www.tipo.gov.tw/ct.asp?xItem=365132&ctNode=6885&mp=1), [Hong Kong government](http://www1.itfest.gov.hk/sc/event/supplements/0415_BIP_Asia_Seminar_Series_%28eDM%29.pdf)), communities ([Open Source Hong Kong](https://freehkfonts.opensource.hk/download/) and [OpenFoundry](https://www.openfoundry.org/of/download/openlegal/Analyses_and_applying_policies_of_FOSS_licenses_2parts_2/20131118_d.pdf)), and businesses ([Google](https://www.google.com/intl/zh-TW/chromebook/termsofservice.html)).

So I suggest we should use `ÊéàÊ¨äÊ¢ùÊ¨æ`, which has been widely adopted  as translation of `license`, instead of a wrong translation `ÊÜëË≠â`.",1438,False,en,0
9344,1,1,0,Externals,rafbm,2017-05-04T18:31:32Z,75,72,1,2,"I‚Äôm not sure where the locale list from the [original commit](https://github.com/electron/electron/pull/6324/commits/bbaab9b35536691ad4c8effab147c8797e629fbe) came from, but it clearly wasn‚Äôt copied from `l10n_util`. It was missing Spanish, Portuguese, Polish, Vietnamese, to name a few‚Ä¶

This commit overwrites the whole list with [`l10n_util` as-is](https://github.com/adobe/chromium/blob/61cfc2b0a8508649bf99c5f842d8184fc35e8a01/ui/base/l10n/l10n_util.cc#L41-L175).",476,True,en,0
9343,8,5,6,Externals,xaviergonz,2017-09-14T06:50:14Z,45,14,3,135,"Basically, there's no way for OSX child windows to be hidden if they are added to a parent. To fix this child windows will be attached when they are shown and detached when they are hidden. This however does not modify the public api (getParentWindow() and getChildWindow()), since the relationship is properly kept on the NativeWindow.

This fixes #8836 ",357,True,en,0
9338,2,1,0,Externals,mcizol,2017-05-04T21:14:22Z,12,12,7,3,"I will update all links to turkish community with auto invite link, this is better. ",84,False,en,0
9333,2,1,0,Externals,tarruda,2017-05-04T21:17:44Z,120,45,7,3,Also added a test to verify something like #9191 won't happen again.,68,False,en,0
9331,2,2,1,Externals,22222,2017-05-11T16:04:40Z,88,17,9,10,"This change is based on my [comment in issue 2579](https://github.com/electron/electron/issues/2579#issuecomment-297879503).  I have very little experience with the Electron code, so I hope that ""help/beginner"" tag still applies.


Restructure
===========
The biggest part of this change is getting access to the event emitting methods of the `atom::api::WebContents` class from the `atom::AtomJavaScriptDialogManager` class.  That requirement led me to shuffling around a couple dependencies.

I based the changes to `atom::AtomJavaScriptDialogManager` on the existing `atom::BluetoothChooser` class: have a constructor that accepts an `api::WebContents*` object, save a reference to it, and use its `Emit` method later.

The second part of that change is in constructing the `atom::AtomJavaScriptDialogManager` object.  Right now creating and managing that `dialog_manager` object happens in the `atom::CommonWebContentsDelegate` base class, which isn't ideal for this change since it doesn't have access to any of the Emit methods.  So I moved that (including all references to `atom::AtomJavaScriptDialogManager`) into the `atom::api::WebContents` class.

One thing that makes me a little nervous about that change is this comment from `common_web_contents_delegate.h`:

```cpp
  // The stored InspectableWebContents object.
  // Notice that web_contents_ must be placed after dialog_manager_, so we can
  // make sure web_contents_ is destroyed before dialog_manager_, otherwise a
  // crash would happen.
  std::unique_ptr<brightray::InspectableWebContents> web_contents_;
```

The `dialog_manager_` field is in a subclass now, so it should still be destroyed before `web_contents_` field.  But this change does affect the destruction order, so if there are any other dependencies on the destruction order then it's possible that some other problem could come from this.


Reloads
=======
One additional piece of information that the `RunBeforeUnloadDialog` method has is an `is_reload` flag.  The Chromium browser uses that to choose a different title for the confirmation dialog if the unload is for a reload (`Do you want to reload this site?` instead of `Do you want to leave this site?`).

Originally I planned to make that `is_reload` flag available in the new `will-prevent-unload` event.  But in my testing the flag was always false, even for a reload (using the reload menu option from the default app).  So at least for now, I left the `is_reload` flag out since it would be misleading to provide it if it doesn't work, and it would probably be possible to add later if there's a demand for it.",2638,True,en,0
9322,3,3,0,Internals,kevinsawicki,2017-05-01T17:44:15Z,53,5,2,2,"This pull request switches the debugger to parse protocol messages using `v8::JSON::Parse` instead of `base::JSONReader::Read`.

`base::JSONReader::Read` has strict range parsing of escape characters and is currently failing to parse the following debug protocol message:

```json
{""id"":2,""result"":{""body"":""\uFFFF"",""base64Encoded"":false}}
```

Fixes #9257",363,True,en,0
9315,3,7,0,Externals,MarshallOfSound,2017-05-04T21:16:29Z,21,5,3,6,Fixes #9298,11,False,en,0
9314,1,0,2,Externals,tarruda,2017-05-01T06:49:13Z,1,3,2,3,"The RemoteObjectFreer class is keeping the context alive even when the window is
closed. For electron applications that use sandbox, this will cause a memory
leak every time a new window is created with `window.open`.

Close #9191",234,False,en,0
9310,2,1,0,Externals,neilstuartcraig,2017-04-27T21:23:13Z,10,0,1,0,Add a simple example of running the example code as it might not be obvious to people who've not used Electron. Hopefully it makes sense :-),140,False,en,0
9301,4,0,0,Internals,kevinsawicki,2017-05-01T15:57:57Z,59,1,3,4,This helper is a better implementation than the current string checks and is used from the `canAcccessWindow` helper.,117,False,en,0
9299,1,0,0,Internals,kevinsawicki,2017-04-26T20:03:46Z,2,2,1,0,Just a couple,13,False,en,0
9292,1,1,6,Externals,22222,2017-05-09T16:06:27Z,81,0,4,13,"This would be an addition to the changes in #8724 to handle cases where the navigation is cancelled.

I'm not completely sure that overriding the `BeforeUnloadDialogCancelled` method is the best way to handle this, or if there's more that should be cleaned up.  This fixes the one case I was testing for (#8911) and doesn't break any unit tests (at least when I run them), but I didn't do much other testing to see if there are any other negative side-effects.

And this is my first time even looking at the Electron source code, so don't make any assumptions that I know what I'm doing here.

Fixes #8911",611,True,en,0
9290,2,0,0,Internals,kevinsawicki,2017-04-26T20:02:54Z,9,1,2,0,"Similar to #9252 and #9286, another case of bad input causing a main process error when the error should be thrown in the render process to match chrome's behavior and make the issue easier to diagnose.",202,False,en,0
9289,2,0,0,Internals,kevinsawicki,2017-04-26T19:36:51Z,12,0,2,0,"Specifying a features string of `webPreferences=` would previously throw an uncaught main process exception since that options key is assumed to be an object.

This pull request prevents it from being set since the feature string isn't intended to support setting objects directly anyway. This does not change the behavior of setting other window options or web preferences from the features string.",401,True,en,0
9287,2,2,0,Internals,kevinsawicki,2017-04-26T17:47:22Z,24,4,2,0,Using an object for this mapping causes errors to be thrown if the frame name matched a built-in object property (like `__proto__`). Now it uses a `Map` which supports all frame names.,184,False,en,0
9286,4,0,0,Internals,kevinsawicki,2017-04-26T17:12:22Z,29,4,2,0,"Follow on to #9252, throw errors converting arguments to strings in the renderer process instead of the main process.",117,False,en,0
9279,1,0,0,Internals,kevinsawicki,2017-04-25T19:55:59Z,47,43,3,1,"This pull request extracts the multiple script tags in  `default_app` to a single `renderer.js` script.

- Removes lots of JS lint since `index.html` wasn't being linted
- Makes the default app more consistent with the quick start app
- Variables no longer leak into global context",285,True,en,0
9278,2,0,0,Internals,kevinsawicki,2017-04-26T16:08:25Z,15,1,2,1,"This pull request update the renderer `init.js` script to disable node integration in `chrome-devtools` URLs.

The `inspector.js` script seems to only depend on `require` which will be available when node integration is disabled since the script is `require`-ed directly in `init.js`.

Tested this change manually and the dialog and menu still appeared in the dev tools.
",376,True,en,0
9273,1,1,0,Externals,alespergl,2017-04-24T15:48:45Z,2,2,1,0,Ref. #8384,10,False,en,0
9269,22,19,16,Externals,MarshallOfSound,2017-05-31T08:21:05Z,438,25,22,37,"This is a WIP of extracting the Notification logic that hooks into the Chromium notification model in the renderer process to a simpler API to use from the main process.  It also adds a few extras like inline replies on macOS.

An example of what this API looks like (at least currently on macOS)

```js
const n = new Notification({
  title: 'Hello World',
  body: 'This is the long and complicated body for this notification that just goes on and on and on and never really seems to stop',
  silent: true,
  icon: '/path/to/ninja.png',
  hasReply: true,
  replyPlaceholder: 'Type Here!!'
});

n.on('show', () => console.log('showed'));
n.on('click', () => console.info('clicked!!'));
n.on('reply', (e, reply) => console.log('Replied:', reply));

n.show();
```

Currently just supports macOS and Windows, this is just to get some early implementation feedback üëç 

Platform Support Status:
* [x] - macOS
* [x] - Windows 10
* [x] - Windows 8
* [x] - Windows 7
* [x] - Linux

TODO:
* [x] - Set NativeImage as the Toast icon on Windows
* [x] - ~Explore Windows 10 inline reply possibility~ *Not required for the first merge*
* [x] - Test code works on Windows 8
* [x] - Port the new Windows 7 code (maybe don't even port it, just include and see if we can get it working)
* [x] - Linux üòÑ (Would be great if I could get some help with this though I'm sure I'll figure it out eventually)
* [x] - ~Duration on platforms that support it~ *Not required for the first merge*
* [x] - ~Sticky (permanent) on platforms that support it~ *Not required for the first merge*

Fixes #3359

**Note:** This API is marked as Experimental in the docs üëç ",1681,True,en,0
9262,1,1,0,Externals,ArcticZeroo,2017-04-24T15:48:20Z,1,1,1,1,Fix the most horrible typo of all time,38,False,en,0
9255,3,0,0,Internals,kevinsawicki,2017-04-24T17:26:01Z,26,3,2,2,"Previously the error was wrapped up as an event object which meant its `stack` and `message` properties were stripped from it when transferred over the `remote` module.

Now it is emitted directly as an `Error` object which keeps all its standard property descriptors.

/cc @joshaber ",288,True,en,0
9254,5,4,2,Externals,juturu,2017-04-24T19:02:05Z,24,0,7,2,,0,False,en,0
9253,1,0,0,Internals,kevinsawicki,2017-04-24T16:47:05Z,10,9,1,2,"There is a flaky spec on CI that is timing out and possibly crashing:

```
not ok 677 <webview> tag nodeintegration attribute loads node symbols after POST navigation when set
  Error: Timeout of 180000ms exceeded. For async tests and hooks, ensure ""done()"" is called; if returning a Promise, ensure it resolves.
      at C:\Users\electron\workspace\electron-win-x64\spec\node_modules\mocha\lib\runnable.js:232:19
```

This pull request logs out all crashes during test runs to help diagnose.",500,True,en,0
9252,2,0,0,Internals,kevinsawicki,2017-04-24T16:26:00Z,26,2,2,2,"Currently if converting the message or title arguments to a string in the main process throws an exception then the IPC return value is never set and so the render process becomes unresponsive.

This pull request switches `window.alert` and `window.confirm` to convert the arguments to strings in the render process so the errors are properly thrown there which is the same behavior in standalone Chrome.",406,True,en,0
9250,4,0,0,Internals,kevinsawicki,2017-04-25T20:33:54Z,48,2,4,4,"Currently the `nodeIntegration` and `contextIsolation` web preferences are inherited in windows opened via `window.open`.

This pull request adds the `javascript` web preference to that list so that windows with JavaScript disabled cannot open windows with JavaScript enabled.",278,True,en,0
9249,1,0,0,Internals,kevinsawicki,2017-04-24T16:14:30Z,10,14,1,2,"Previously this could lead to weird rendering issues if the resource path had certain characters in it since the content was interpreted as HTML.

Use `innerText` instead so paths are treated as text.",202,True,en,0
9248,1,1,0,Internals,kevinsawicki,2017-04-21T16:15:42Z,0,2,1,0,"Now that we have new Windows 10 CI machines, remove the output file so test output is streamed making it easier to monitor from the Jenkins console.

I believe this created some crashes in the past but figured it was worth trying to see if this is no longer an issue.",269,True,en,0
9246,4,1,3,Externals,rreimann,2017-04-24T15:50:56Z,2,0,1,3,"I stumbled upon this while trying to make use of resumable downloads in electron. Although the server supported range requests that worked well with other clients like (Chrome, curl and wget) `DownloadItem.resume()` always started over at 0 bytes after resuming from `interrupted` state instead of continuing where the download was paused.


",345,True,en,0
9243,11,5,0,Externals,seanchas116,2017-05-22T21:01:05Z,41,0,4,31,"This adds APIs for writing custom formats into clipboard. (Thanks @poiru for https://github.com/electron/libchromiumcontent/pull/278)

Fix #5698",146,True,en,0
9242,20,11,13,Internals,shiftkey,2017-05-03T23:39:01Z,111,6,4,12,"This is the second half of #9099 - adding the certificate trust API for Windows.

### The Setup

I've configured a local IIS instance with a self-signed certificate to trigger this failure over HTTPS. Edge and IE don't like it, and spit this error out at the user:

![](https://cloud.githubusercontent.com/assets/359239/25258894/04a31a94-2686-11e7-8108-df5b1a2e4949.png)

I can write up the way to setup this environment locally if others want to test this flow out themselves. The sample app I've been using can be found here: [shiftkey/electron-test-network-windows](https://github.com/shiftkey/electron-test-network-windows)

### User Experience

The magic in `certificate_trust_win.cc` is some code I've tested in isolation to resolve the above error. It installs the received certificate to the **Trusted Root Certificate** for the current user (not the local computer) and because we're only doing it for the current user it doesn't require elevation.

However, interacting with the trusted root certificate store will trigger this dialog when you invoke `CertAddCertificateContextToStore`:

<img width=""534"" src=""https://cloud.githubusercontent.com/assets/359239/25259025/d31180fa-2686-11e7-9ba3-aadf9f74acaf.png"">

It's certainly not as pretty (or as functional) as the macOS equivalent, but that might be okay for now. As a result I'm also not using the `message` argument that `ShowCertificateTrust` receives. I'm open to putting more context into this flow based on feedback and security concerns - this is just a first pass.

### Testing

I'm currently at the point where the test app has the right IPC setup to trigger the certificate error, but I'm missing something with the ""swap in a debug version"" process and the `dialog.showCertificateTrustDialog` method isn't visible on Windows (there's nothing in the [original PR](https://github.com/electron/electron/pull/9099/files#diff-e90f5a18d6eb6b4377f52d724fd00dacR285) to suggest this is being hidden deliberately).

Here's my flow for testing this PR (I've probably missed something):

- I [added an `#if defined` here](https://github.com/electron/electron/commit/dca08c208bccafe36b3cea4c3b37898d2b7af51c#diff-43c33d11ff91ca9828c023eeddcd2665R132)
- `python script\bootstrap.py --msvs` to get a VS solution file
- `npm run build` to get a debug build of my branch
- copy `out\D\*` to `node_modules\electron\dist\` 

I can then run the test harness, attach to the `electron.exe` processes and VS loads the PDB symbols for electron.exe and node.exe.

**UPDATE:** there's something up with how `electron.asar` is being packaged for debug builds - I've repackaged that archive with the `showCertificateTrustDialog` method and I can launch the dialog in the app.

### TODO

- [x] test flow end-to-end in sample app
- [x] refresh certificate database if added
- [x] handle failure cases in `ShowCertificateTrust` gracefully, ensuring we cleanup any resources
- [x] validate certificate chain and only work with self-signed or untrusted root certificate
- [x] docs
- [x] throw some more testing at it",3101,True,en,0
9241,1,0,0,Internals,kevinsawicki,2017-04-21T15:50:33Z,3,0,1,0,"`script/upload.py` requires `symstore.exe` on Windows.

This pull request adds it to the build instructions Windows doc.",122,True,en,0
9240,6,0,0,Internals,kevinsawicki,2017-04-20T21:49:51Z,25,7,4,0,"Backports the following 1.4 fixes to 1.3 since Atom is still on that version and hitting these bugs:

* https://github.com/electron/electron/pull/7209
* https://github.com/electron/electron/pull/7980

/cc @BinaryMuse ",222,True,en,0
9239,2,1,0,Externals,pfrazee,2017-04-21T20:40:17Z,2,1,1,1,"This is in reference to the methods defined at https://github.com/electron/electron/blob/master/lib/renderer/web-view/web-view.js#L319-L371

I realized that a workload in the main process was slowing down my render thread. Turns out, it was due to the webview calls, which use sync IPC to main.

I'm not sure this is the ideal wording. It might be a good idea to list the actual methods.",391,True,en,0
9238,1,0,0,Internals,kevinsawicki,2017-04-20T21:17:08Z,1,1,1,0,"Noticing a flaky spec on Windows CI:

```
not ok 644 node feature child_process child_process.fork pipes stdio
  AssertionError: '' == 'pipes stdio'
      at ChildProcess.child.on (C:\Users\electron\workspace\electron-win-ia32\spec\node-spec.js:90:18)
      at emitTwo (events.js:106:13)
      at ChildProcess.emit (events.js:191:7)
      at Process.ChildProcess._handle.onexit (internal/child_process.js:215:12)
```

The `exit` event, according to the node docs, may fire before the streams are done writing so listen for `close` instead which should be fired after streams are closed.",597,True,en,0
9237,1,0,0,Internals,kevinsawicki,2017-04-20T22:11:28Z,101,101,1,0,"Noticed while reviewing #9095 that `modules-spec.js` had multiple root describes.

This pull request switches to a single root describe to be able to easily use `describe.only` to run all of them.",198,True,en,0
9227,11,0,0,Internals,kevinsawicki,2017-04-20T03:37:38Z,106,53,7,1,"This pull requests get the mac specs passing on our new CI cluster.

- Disable `navigator.mediaDevices` specs on macOS CI since these machines have no devices
- Fix racy kiosk mode spec
- Kill crash service process on Windows after spec completes
- Ensure windows get cleaned up if chromium specs fail",306,True,en,0
9222,5,4,2,Externals,alexstrat,2017-05-15T20:28:47Z,27,0,4,27,"This pull request adds a method (`getOSProcessId`) to `webContents` to have access to the `pid` (actual OS process id) of the associated host render process.

- [x] documentation and testing: should I add a note in documentation and test about it? `getProcessId` is not documented nor tested: what is the logic?
- [x] naming: is method naming ok? `getProcessId` is already [taken](https://github.com/electron/electron/blob/master/atom/browser/api/atom_api_web_contents.cc#L1756) but undocumented.

----
I'm trying to have an overview of `webcontents` resource consumption (in detail, not in a whole), inspired from Chromium task manager (related #820, #3653).
As far as i understand, `process.getProcessMemoryInfo` gives only the *current process* statistics (and no CPU) => having an overview would require to ""instrument"" every new web-contents and report the stats.

I guessed a more handy and extensible way would be have access to the `pids` of the webcontents and use [whatever userland method](https://github.com/soyuka/pidusage) to get the statistics.",1068,True,en,0
9219,2,0,0,Externals,poiru,2017-04-18T12:13:04Z,3,1,3,0,"This fixes non-client area DPI scaling on recent Windows 10 versions.
See discussion in #8786.",95,False,en,0
9214,11,6,11,Externals,juturu,2017-05-04T21:00:30Z,92,2,6,17,Adding api which will help apps to get memory info for all processes. ,70,False,en,0
9213,1,0,0,Externals,poiru,2017-04-17T09:34:24Z,2,1,1,0,This was a regression introduced in 638eae10.,45,False,en,0
9211,1,1,0,Externals,sindresorhus,2017-04-18T16:10:46Z,4,0,1,1,"Disclosure: I made it.

https://github.com/sindresorhus/touch-bar-simulator

Most devs don't have the new MacBook with Touch Bar, but would like to support it. I think it would be useful to point out how to easily develop and test Touch Bar usage in Electron apps.",268,True,en,0
9208,4,1,0,Externals,MarshallOfSound,2017-04-18T16:02:45Z,19,1,4,1,This allows icons to appear to the left / right of the label instead of overlapping all the time üëç ,102,False,en,0
9204,1,0,0,Externals,poiru,2017-04-16T16:52:12Z,1,1,1,0,This fixes #9197.,17,False,en,0
9195,2,1,0,Externals,mcizol,2017-04-18T15:51:13Z,253,1,2,3,,0,False,en,0
9194,4,3,3,Externals,juturu,2017-04-18T16:09:19Z,38,1,4,4,Fixes #8416 ,12,False,en,0
9187,1,0,2,Externals,poiru,2017-04-14T16:27:50Z,10,5,2,0,Fixes #9183.,12,False,en,0
9185,1,1,0,Externals,sauber92,2017-04-18T15:46:06Z,1,1,1,5,"Ïò§ÌÉÄ ÏàòÏ†ï, Edit typo",24,False,ko,0
9180,1,1,0,Externals,runinspring,2017-04-18T15:45:11Z,40,4,1,5,,0,False,en,0
9178,7,7,0,Externals,poiru,2017-06-07T00:32:50Z,231,92,11,55,"Chromium already includes the necessary plumbing to manage the
visibility properties and `visibilitychange` event so this gets rid of
most of our custom logic for `BrowserWindow` and `BrowserView`.

Note that `webview` remains unchanged and is still affected by the issues
listed below.

User facing changes:

- The `document` visibility properties and `visibilitychange` event are
  now also updated/fired in response to occlusion changes on macOS. In
  other words, `document.visibilityState` will now be `hidden` on macOS
  if the window is occluded by another window.

- Previously, `visibilitychange` was also fired by *both* Electron and
  Chromium in some cases (e.g. when hiding the window). Now it is only
  fired by Chromium so you no longer get duplicate events.

- The visiblity state of `BrowserWindow`s created with `{ show: false }`
  is now initially `visible` until the window is shown and hidden.

- The visibility state of `BrowserWindow`s with `backgroundThrottling`
  disabled is now permanently `visible`.

This should also fix #6860 (but not for `webview`).",1104,False,en,0
9168,1,0,0,Internals,kevinsawicki,2017-04-12T20:26:41Z,1,1,1,0,"Pulls in https://github.com/electron/brightray/pull/279

/cc @alespergl 

Refs #8384 ",89,True,en,0
9167,4,14,0,Internals,kevinsawicki,2017-04-13T10:08:40Z,11,35,5,1,"This pull request is an attempt to fix #5267 and #8728.

It removes the custom inset handling in Electron and instead uses Chrome's default inset handling in  [hwnd_message_handler.cc](https://cs.chromium.org/chromium/src/ui/views/win/hwnd_message_handler.cc?l=1162).

This previously did not work because Electron was using different a different linker flag than Chrome that resulted in the system metrics returning incorrect values.

* [Original Chrome gyp fix](https://chromium.googlesource.com/chromium/src.git/+/68c88b0f0a645ac90365686f82edb5cb5580c2e9%5E%21/)
* [BUILD.gn subsystem setting](https://cs.chromium.org/chromium/src/build/config/win/BUILD.gn?dr=C&l=311)
* [Microsoft SUBSYTEM docs](https://msdn.microsoft.com/en-us/library/fcc1zstk.aspx)

I'm not sure if lowering the `SUBSYSTEM` flag to `5.02` has any other consequences, but it does seem to prevent the overflow of maximized frameless windows.

Fixes #5267 
Fixes #8728
Refs #9140 
Refs #8808

/cc @poiru @bsclifton @thesbros @juturu ",1021,True,en,0
9166,5,2,17,Externals,poiru,2017-04-13T08:00:16Z,832,156,27,1,"Right now, `<webview>` is the only way to embed additional content in a `BrowserWindow`. Unfortunately `<webview>` suffers from a [number of problems](https://github.com/electron/electron/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20label%3Awebview%20). To make matters worse, many of these are upstream Chromium bugs instead of Electron-specific bugs.

For us at [Figma](https://www.figma.com), the main issue is very slow performance.

Despite the upstream improvements to `<webview>` through the OOPIF work, it is probable that there will continue to be `<webview>`-specific bugs in the future.

Therefore, this introduces a `<webview>` alternative to called `BrowserView`, which...

- is a thin wrapper around `api::WebContents` (so bugs in `BrowserView` will
  likely also be bugs in `BrowserWindow` web contents)

- is instantiated in the main process like `BrowserWindow` (and unlike
  `<webview>`, which lives in the DOM of a `BrowserWindow` web contents)

- needs to be added to a `BrowserWindow` to display something on the screen

This implements the most basic API. The API is expected to evolve and change in the near future and has consequently been marked as experimental. Please do not use this API in production unless you are prepared to deal with breaking changes.

In the future, we will want to change the API to support multiple `BrowserView`s per window. We will also want to consider z-ordering, auto-resizing, and possibly even nested views.",1488,True,en,0
9158,1,1,0,Externals,mcizol,2017-04-10T22:37:18Z,1,1,1,0,,0,False,en,0
9157,1,2,0,Externals,cifratila,2017-04-11T15:52:21Z,3,8,5,1,"Follow up: I don't have right to create a release here: https://github.com/electron/electron-frameworks/releases

At first I would publish the zip as before but without the `xinput1_3.dll`. Or even better we could modify: https://github.com/electron/electron/blob/master/script/update-external-binaries.py and download only `d3dcompiler_47.dll`

Fixes #9128 ",362,True,en,0
9155,2,2,0,Externals,Hum4n01d,2017-04-10T15:18:10Z,2,0,1,0,"I figured this out with some help from @MarshallOfSound. I added a note to the documentation explaining the problem.

I‚Äôve never contributed to electron or any documentation so feedback is appreciated üòÑ",209,True,en,0
9154,2,1,0,Internals,miniak,2017-04-10T15:16:55Z,17,1,2,0,,0,False,en,0
9151,4,1,0,Externals,mcizol,2017-04-10T15:16:20Z,296,4,5,0,I added translation files for some important tutorials for beginners and will try to translate all tutorials in next time. Hope this helps.,139,False,en,0
9149,1,0,0,Internals,kevinsawicki,2017-04-10T15:15:29Z,3,3,1,1,"Link to cookies, web requests, and protocol from session property descriptions.",79,False,en,0
9148,6,0,0,Externals,tarruda,2017-04-11T17:02:13Z,210,187,9,3,"This refactoring is a prerequisite for implementing `contextIsolation` option in sandboxed renderer.

- Move some renderer client APIs `RendererClientBase`
- Move `AtomRenderFrameObserver` into a separate module
- Replace `AtomRendererClient` references with `RendererClientBase`
",285,True,en,0
9144,1,0,0,Internals,kevinsawicki,2017-04-10T15:14:42Z,26,50,1,2,"Seeing some flaky net specs on CI, this pull request switches the `afterEach` to destroy all connections and wait until the server closes before starting the next test.",168,False,en,0
9137,27,1,0,Externals,runinspring,2017-04-10T15:14:14Z,249,0,27,3,,0,False,en,0
9136,1,1,0,Externals,runinspring,2017-04-10T15:13:48Z,4,0,1,3,,0,False,en,0
9134,1,2,3,Internals,kevinsawicki,2017-04-11T16:08:30Z,7,9,1,4,"Previously Electron was only ever setting this pref to `false` when the `scrollBounce` web preferences was set `false`.

Now it is always set, and set to `true` when enabled so Chrome picks it up and enables it on the renderer.

![scroll-bounce](https://cloud.githubusercontent.com/assets/671378/24778571/33838bca-1ae0-11e7-8da5-579c4e65da54.gif)

Refs #5412
Closes #9033",378,True,en,0
9133,5,0,0,Internals,kevinsawicki,2017-04-11T16:49:55Z,69,37,10,4,"Previously `app.exit` would iterate over all windows and destroy them. This failed when more than two windows existed because an iterator was being used on a vector that was having elements erased on it at the same time and so some windows were getting destroyed multiple times and other not destroyed at all.

This pull request switches `WindowList` to no longer be an iterable but instead return a vector of window pointers that callers can iterate over directly. Also adds a `DestroyAllWindows` helper similar to `CloseAllWindows`.

Closes #8915",552,True,en,0
9132,3,0,0,Internals,kevinsawicki,2017-04-06T20:17:14Z,11,1,2,0,"Pulls in https://github.com/nodejs/node/pull/11958 which fixed https://github.com/nodejs/node/issues/11948

Fix landed upstream in https://github.com/nodejs/node/commit/9ff7ed23cd822dc810ddd99d63d4e2ca68635474 and this was cherry-picked into our node fork as https://github.com/electron/node/commit/3fe90cfcf54dd946980e59daf550a7cdb2317c8f

This patch can be dropped once we upgrade to Node 7.8

/cc @bpasero 

Closes #8944",431,True,en,0
9129,1,1,0,Externals,runinspring,2017-04-06T15:47:22Z,22,3,1,0,,0,False,en,0
9126,2,1,0,Externals,runinspring,2017-04-06T15:46:56Z,67,136,2,0,,0,False,en,0
9125,1,1,0,Externals,enlight,2017-04-06T15:46:25Z,1,1,1,0,,0,False,en,0
9124,1,2,0,Externals,TasukuUno,2017-04-06T15:45:49Z,1,1,1,0,"Hi, I found that a key of `MimeTypedBuffer Object` structure was wrong in the document when I was trying `protocol.registerBufferProtocol()` API.  This PR fixes it.

## basis

https://github.com/electron/electron/blob/v1.6.5/spec/api-protocol-spec.js#L265-L268
",266,True,en,0
9117,1,1,0,Externals,alespergl,2017-04-06T15:48:16Z,6,7,2,1,"I'm fixing just a few easy DCHECK failures that I encountered.

- The `%s` format string fails the `IsWprintfFormatPortable` check
- The variables pointed to in a call to `SizeStringInt` need to be initialized to a non-negative value (>= 0)",243,True,en,0
9116,41,7,2,Internals,zcbenz,2017-05-10T17:41:13Z,1198,804,97,35,"Debug build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Release build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Tests passing on:
- [x] OS X
- [x] Linux
- [x] Windows

Merge:
- [x] https://github.com/electron/libchromiumcontent/pull/280
- [x] https://github.com/electron/brightray/pull/288
",324,False,en,0
9113,6,0,2,Externals,deepak1556,2017-05-01T08:45:58Z,186,26,11,26,"Fixes https://github.com/electron/electron/issues/8930
Fixes https://github.com/electron/electron/issues/9230

Original discussion https://groups.google.com/a/chromium.org/d/msg/embedder-dev/XTv6SpambTI/V51xPz1hFgAJ",218,False,en,0
9111,2,2,0,Internals,kevinsawicki,2017-04-05T23:27:58Z,15,0,3,0,"* Restore the delivering of IPC messages to utility handlers that regressed in #8501
* Port upstream page printing bug from #9044 

Closes #8489 
Closes #8828",162,False,en,0
9108,2,2,6,Externals,yuya-oc,2017-04-20T17:33:31Z,88,0,8,16,"These would be helpful when a dialog is opened without using BrowserWindow's `modal` option or `dialog` module.

For example, when a dialog is opened by `<input type=""file"">` of a webview, the webview loses focus after the dialog is closed. This new event can tell that the dialog has been closed in order to get focus again.",327,True,en,0
9105,1,1,5,Internals,miniak,2017-04-04T15:41:35Z,25,50,9,0,"I've added `Point` and `Size` types to avoid duplicate types being generated. I've also fixed a few places where `Rectangle` was not being used.

Related to https://github.com/electron/electron/issues/4875",207,True,en,0
9104,1,3,0,Externals,tarruda,2017-04-10T22:38:13Z,32,35,5,6,"- Use `path` module from browser process in sandboxed renderer. This is required
      because the return value of `path.join` is platform-specific, and this is an
      assumtion of crash-reporter.js which is shared between sandboxed and
      non-sandboxed renderers.
- Set `process.platform` and `process.execPath` in sandboxed renderer
      environment. This is required to spawn the windows crash service from
      sandboxed renderer.
- Use a single temporary directory for all crashReporter tests. This is required
      to make tests more deterministic across platforms(since mac's crashpad doesn't
      support changing the crash dump directory). Also make a few improvements/fixes
      to the `uploadToServer` test.
",740,False,en,0
9101,4,0,0,Internals,kevinsawicki,2017-04-04T19:50:15Z,30,3,4,0,"Noticed while working on #9023 that you couldn't call a remote setter with a remote object in the same way you can pass a remote object to a remote function call.

This was because the raw value was passed over IPC instead of a wrapped value that supported all the types (like `remote-object`).

This pull request switches the `ELECTRON_BROWSER_MEMBER_SET` channel to marshall/unmarshall the value being set the same as an argument to a remote function call.",462,True,en,0
9099,36,5,18,Internals,joshaber,2017-04-04T18:17:10Z,258,0,10,0,"_Continuing from https://github.com/electron/electron/pull/9068_

Add the `dialog.showCertificateTrustDialog` API to show the OS-provided UI to let the user decide to accept and trust a self-signed or untrusted certificate:

![cert_trust_panel_5b4faf16-9b52-4d4f-8aa0-63b89361dd60](https://cloud.githubusercontent.com/assets/13760/24527176/0b9a9dfe-156f-11e7-9795-ecb429b25949.jpg)

This is only the macOS-side of things. I think we can get @shiftkey to do the Windows side.

I'm opening this early because I have no idea what I'm doing and I'd welcome any feedback or advice anyone would like to provide.",613,True,en,0
9097,2,0,0,Internals,kevinsawicki,2017-04-03T20:30:39Z,29,1,3,0,"Currently if you have a remote setter that throws an exception in the main process, that exception is not surfaced in the renderer process. This is because the IPC response was previously not parsed so any errors in it were ignored.

This pull request wraps the setter response in a `metaToValue` call so that errors from the main process are re-thrown in the render process, similar to getters and function calls.

Noticed this while working on #9023 ",456,True,en,0
9096,1,0,0,Internals,kevinsawicki,2017-04-03T19:16:10Z,1,1,1,0,"Pulls in the following:

* https://github.com/electron/brightray/pull/283
* https://github.com/electron/brightray/pull/285
* https://github.com/electron/brightray/pull/286
* https://github.com/electron/brightray/pull/287",225,True,en,0
9095,10,8,6,Externals,seanchas116,2017-04-20T17:49:53Z,59,4,8,17,"This PR makes `require()`to search for modules from app directory when the URL is not file protocol (such as http, data or `about:blank`).

I think this would be more intuitive solution for #8425 and https://github.com/electron/electron/pull/8963#issuecomment-291064820.",272,True,en,0
9084,1,1,0,Externals,runinspring,2017-04-03T15:20:07Z,541,245,1,1,,0,False,en,0
9080,1,0,0,Externals,MarshallOfSound,2017-04-01T01:29:17Z,2,0,2,0,/cc @zeke ,10,False,eu,0
9079,1,0,0,Internals,kevinsawicki,2017-03-31T23:35:31Z,10,10,1,0,"This option was in `showOpenDialog` incorrectly, it should have been on `showMessageBox`.",89,False,en,0
9076,14,1,4,Externals,hokein,2017-04-03T15:30:08Z,75,68,29,2,"**No functionality change**: This PR cleans up electron cpp codebase (fixes a few code-style violations and uses C++11 features). 
",132,True,en,0
9074,1,0,0,Internals,kevinsawicki,2017-03-31T19:09:55Z,6,1,1,0,"Follow on to #9052 

Only define `NSWindowTabbingModeDisallowed` on pre-10.12 SDK versions.

This enables Electron to still build with a 10.12 SDK.",151,True,en,0
9072,2,4,1,Externals,p-jackson,2017-04-04T15:42:09Z,5,2,1,4,"Calling Menu.setApplicationMenu removes the app menu, and you can see from the code that null is a permitted option.
https://github.com/electron/electron/blob/f7e3f9035da3bf3eb946294a4100b6700bd41bc4/lib/browser/api/menu.js#L276",229,False,en,0
9067,1,0,0,Internals,kevinsawicki,2017-03-30T21:35:56Z,22,2,2,0,"Switching from `arguments.length < 1` to `name == null` and adding error specs for `getHeader` and `removeHeader`.

Noticed this while reviewing #9062 ",153,True,en,0
9066,1,1,0,Internals,kevinsawicki,2017-03-30T19:36:35Z,13,8,1,0,"Saw some warnings when running `npm run lint-api-docs`, this removes them. Descriptions ported from https://developer.apple.com/reference/appkit/nssegmentstyle?language=objc

```
<code>rounded</code>
Problem parsing parameter ENUM values:
<code>textured-rounded</code>
Problem parsing parameter ENUM values:
<code>round-rect</code>
Problem parsing parameter ENUM values:
<code>textured-square</code>
Problem parsing parameter ENUM values:
<code>capsule</code>
Problem parsing parameter ENUM values:
<code>small-square</code>
Problem parsing parameter ENUM values:
<code>separated</code>
```",606,True,en,0
9065,3,4,1,Internals,zeke,2017-03-30T19:28:14Z,53,129,2,0,"I always forget where roles are documented. This PR adds a `### Roles` heading so we can link to the list of roles from elsewhere in the docs. It also cleans up the `Menu` example, tightening the formatting and removing some superfluous `accelerator` and `label` values that didn't need to exist because:

> The `label` and `accelerator` values are optional when using a `role` and will
default to appropriate values for each platform.

cc @bpasero ",454,True,en,0
9062,1,3,8,Externals,tarruda,2017-03-30T19:35:53Z,49,5,3,0,"This is required to be compatible with node.js http module.

For the record, I found this issue when trying to make the [request](https://github.com/request/request) module to work with electron's `net` module.",212,True,en,0
9057,9,0,0,Internals,kevinsawicki,2017-03-30T22:15:32Z,164,1,5,1,"This pulls in https://github.com/electron/libchromiumcontent/pull/279

Adds a test to verify Electron does not play a h264 video when the no proprietary codecs version of ffmpeg is used.

Also adds it to the upgrading Chrome doc.

Refs https://github.com/electron/libchromiumcontent/issues/268",299,True,en,0
9054,1,5,4,Externals,ColinEberhardt,2017-03-30T17:52:46Z,34,25,1,1,,0,False,en,0
9053,3,3,2,Externals,tarruda,2017-03-31T18:28:35Z,109,10,6,2,"Note that `get/setUploadToServer` is not implemented because the CustomInfo structure is only set when `start` is called, so to change the value of `uploadToServer` the user needs to call `start` again(which is how it already works for most options).",250,False,en,0
9052,8,6,5,Externals,tonyganch,2017-03-30T21:02:20Z,45,9,6,1,"Should fix #6124.
Testing app: https://github.com/tonyganch/electron-quick-start/tree/native-tabs
**Video:** https://yadi.sk/i/vzAhnDkd3GTC5b

The idea is to make windows not tabbable by default.
That will allow existing applications to save user experience as they have it right now.
In order to open a window as a native tab, `tabbingIdentifier` option should be passed, like:
`new BrowserWindow({tabbingIdentifier: 'mainGroup'})`.
If tabbing identifier is missing/empty, or a window has custom/no title bar (is frameless/transparent), such window will not be tabbed.

/cc @alespergl @bpasero ",605,False,en,0
9044,1,6,0,Externals,rreimann,2017-04-04T21:26:32Z,13,2,3,7,"Fixes #8489

Fix printing selected pages by backporting https://bugs.chromium.org/p/chromium/issues/detail?id=553446",118,True,en,0
9043,1,1,0,Internals,zcbenz,2017-03-29T04:37:07Z,6,0,1,0,"When doing navigation without restarting renderer process, it may happen that the node environment is destroyed but the message loop is still there. In this case we should not run uv loop.

Fix https://github.com/electron/electron/issues/9004.",245,True,en,0
9041,1,1,0,Externals,runinspring,2017-03-28T16:15:10Z,14,11,1,0,,0,False,en,0
9039,2,0,0,Externals,tarruda,2017-03-29T06:20:46Z,253,182,7,1,"This should give `sandbox` access to a bunch of features not available in non-sandbox, such as custom schemes, background color and plugins(`<webview>` support will be finished in another PR).",192,False,en,0
9037,1,0,0,Internals,kevinsawicki,2017-03-28T00:18:18Z,1,1,1,0,"Pulls in https://github.com/electron/libchromiumcontent/pull/267

/cc @brenca 

Fixes #8667",95,True,en,0
9034,2,2,0,Internals,kevinsawicki,2017-03-27T21:05:43Z,4,1,2,0,"This spec is often failing on AppVeyor, disable for now to prevent confusion and bisect later.

https://ci.appveyor.com/project/electron-bot/electron/build/90/job/0djb3t6r2mijgy3s",181,True,en,0
9028,5,3,6,Externals,MarshallOfSound,2017-04-04T21:10:00Z,38,12,2,8,"Fixes #9025 

Code to test it's working correctly

```js
let counter = 1;
const button = new TouchBar.TouchBarButton({
  label: `${counter}`,
  click: () => {
    counter += 1;
    button.label = `${counter}`;
  }
})

let counter2 = 1;
const button2 = new TouchBar.TouchBarButton({
  label: `${counter2}`,
  click: () => {
    counter2 += 1;
    button2.label = `${counter2}`;
  }
})

const touchBar = new TouchBar([
  button2,
  new TouchBar.TouchBarPopover({
    label: 'Pop',
    items: new TouchBar([
      button,
    ])
  }),
  new TouchBar.TouchBarPopover({
    label: 'Pop2',
    items: new TouchBar([
      button,
      button2
    ])
  })
])

mainWindow.setTouchBar(touchBar)
```",731,True,en,0
9024,1,1,0,Externals,runinspring,2017-03-27T16:11:05Z,21,0,1,0,,0,False,en,0
9023,14,5,11,Externals,MarshallOfSound,2017-04-04T20:35:55Z,152,12,12,8,"Fixes #8937

In order to set an ""Exit Fullscreen"" button as pictured in the linked issue, you would construct an `TouchBarButton` manually and provide it an image üëç ",170,True,en,0
9021,1,1,0,Externals,ovo4096,2017-03-27T16:11:25Z,2,2,1,0,,0,False,en,0
9014,1,2,0,Externals,MarshallOfSound,2017-03-27T02:53:34Z,1,1,1,1,"/cc @zeke 

Love finding these üåµ ",38,True,en,0
9012,2,1,0,Externals,MarshallOfSound,2017-03-25T07:10:10Z,12,9,2,0,/cc @zeke ,10,False,eu,0
9010,1,0,0,Externals,MarshallOfSound,2017-03-25T03:30:53Z,5,3,3,0,"Fixes a few issues with the docs (missing types and missing function params)

/cc @zeke ",90,True,en,0
9008,5,0,0,Externals,juturu,2017-03-24T22:40:24Z,14,0,3,0,,0,False,en,0
9007,3,5,5,Externals,deepak1556,2017-03-28T16:31:06Z,332,6,7,3,"Introduces redirect mode option on `net.request` that takes one of `follow, error, manual` and defaults to `follow`. In `manual` mode a `redirect` event is emitted on the request object with `statusCode, method, newURL, responseHeaders`. Calling `request.followRedirect` will continue with the redirection in manual mode and `request.abort` to cancel the request. 

Fixes https://github.com/electron/electron/issues/8868",422,True,en,0
9006,1,1,0,Internals,zeke,2017-03-27T16:10:40Z,3,2,1,2,This fixes an API documentation issue we found while working on https://github.com/electron/electron-definitelytyped/pull/7,123,False,en,0
9001,1,4,0,Externals,deepak1556,2017-03-28T16:24:18Z,8,0,1,4,"This is the only scenario where `URLRequest::Delegate::OnResponseStarted` will not be notified before `URLRequest::Delegate::OnReadCompleted`. https://codereview.chromium.org/2451233002 , made that if there is no sdch implementation then request should fail with `net::ERR_CONTENT_DECODING_INIT_FAILED` but this is fixed later on in https://codereview.chromium.org/2512263002 where raw response body is passed through for sdch when it is not implemented just like other unsupported content encoding types, we should get the fix probably with chrome 57 or 58 upgrade. For the same reason its not possible to test this scenario as the test case in the original issue will no longer fail with the above fix, but its good to catch this scenario.

Fixes https://github.com/electron/electron/issues/8867",799,True,en,0
8998,4,3,9,Externals,felixrieseberg,2017-05-04T22:31:13Z,88,48,3,42,"This PR updates the notification documentation, creating a new central documentation file - and extending it with information around sending native notifications the same way it's done by popular messaging apps (Slack, WhatsApp, Wire, etc).

Why? Many popular messaging apps are using Electron, but none of them use the default `notification` implementation. We should document how people solve advanced notification scenarios.",429,True,en,0
8996,1,4,0,Externals,swashcap,2017-04-21T20:44:02Z,4,0,1,29,Added this where I thought it made the most sense. Let me know if there‚Äôs a better location in the `Menu` docs or if the wording could be clearer. (See #8928 for details.),173,False,en,0
8988,1,1,0,Internals,zeke,2017-03-24T18:21:30Z,14,0,2,1,"This PR adds a doc for learning about Chromium and tracking its development.

- [chromiumdev](https://chromiumdev-slack.herokuapp.com) on Slack
- [@ChromiumDev](https://twitter.com/ChromiumDev) on Twitter
- [@googlechrome](https://twitter.com/googlechrome) on Twitter
- [Blog](https://blog.chromium.org)
- [Code Search](https://cs.chromium.org/)
- [Source Code](https://cs.chromium.org/chromium/src/)
- [Development Calendar and Release Info](https://www.chromium.org/developers/calendar)
- [Discussion Groups](http://www.chromium.org/developers/discussion-groups)
",575,True,en,0
8984,1,1,0,Externals,hansenzhang,2017-03-27T16:47:51Z,1,12,1,5,"Fixes #8881 
",14,True,en,0
8983,2,1,0,Externals,tarruda,2017-03-27T17:16:24Z,193,1,2,5,This should only be merged after #8956 as the documentation reflects changes made in that PR.,93,False,en,0
8974,1,0,0,Internals,kevinsawicki,2017-03-21T13:36:30Z,4,1,1,0,"Previously the `async` option would be null/undefined if an object was specified that did not contain it as a property and the C++ side would expect as a `boolean`.

Closes #8973",180,True,en,0
8971,1,0,0,Internals,zcbenz,2017-03-22T16:00:38Z,1,1,1,1,"The shutdown code may still uses the APIs provieded by AtomBindings.

Close https://github.com/electron/electron/issues/8957.",127,True,en,0
8963,45,13,13,Externals,seanchas116,2017-05-11T07:38:11Z,316,41,24,52,"This pull request adds `nativeWindowOpen` option to use native `window.open()` in non-sandboxed webcontents.

It would be useful when you opens dialogs or preferences windows from your app, as it allows synchronous access to DOM elements in the new windows.
Also synchronous `window.open()` would be faster because it doesn't need another new process and you could share the same instance of JavaScript libraries/frameworks among windows.
This is a simple use case example: https://github.com/seanchas116/electron-native-window-open-example

I don't know the risk of running multiple Node contexts in the same process, so I would be glad to know it.

Close #8959",670,True,en,0
8962,1,1,0,Externals,feserafim,2017-03-20T16:35:10Z,14,14,1,1,Correcting some Spanish words mistakes.,39,False,en,0
8958,16,4,2,Externals,mst128256,2017-06-05T21:30:42Z,176,19,5,80,"Reason for the behaviour is usage of NSTitledWindowMask - even though the title bar is then set to be hidden. The window has to draw semaphore buttons on its own - it is solved as separate subview within the hierarchy. The semaphore buttons are being shown only when the cursor is nearby. Added code to let keyboard shortcuts for close and minimise work properly.

Fixes #8730 
Fixes #7696 
Fixes #5723
Fixes #983",418,True,en,0
8956,5,2,2,Externals,tarruda,2017-03-27T17:09:37Z,116,85,10,9,"Had to make a few extra changes:

- Exposed more non-sandbox APIs to sandbox. I've only added what is necessary to expose and test crashReporter.
- Browserify was leaking the `require` function. Fixed by adding a function parameter with same name which will ""catch"" the assignment done by browserify(see `out/D/gen/js2c/preload_bundle.js`).

",347,True,en,0
8955,5,2,0,Externals,babanesma,2017-03-20T17:36:19Z,54,7,5,2,"Add new command `npm run clean-build` to clean only `out` and `dist` directories , so that bootstrap command will not download all dependencies again .

Closes #8919",167,True,en,0
8954,1,0,0,Internals,kevinsawicki,2017-03-17T18:02:47Z,11,11,11,0,Noticed this tag was used in `docs/api/clipboard.md` and put it in on the touch bar APIs to reinforce the `Note:` that also mentions it.,136,False,en,0
8942,5,3,0,Internals,kevinsawicki,2017-03-17T17:56:25Z,37,13,4,0,"Adds support for reading a custom data format as a `Buffer` from the clipboard.

Closes #8877",95,True,en,0
8939,2,1,0,Externals,tarruda,2017-03-17T16:42:00Z,29,16,4,0,Also implicitly test #8900 since `remote.fs` is used for the preload script,75,False,en,0
8926,3,0,0,Internals,kevinsawicki,2017-03-17T16:55:40Z,4,3,3,2,"Pulls in the following libchromiumcontent changes:

* https://github.com/electron/libchromiumcontent/pull/263
* https://github.com/electron/libchromiumcontent/pull/266
* https://github.com/electron/libchromiumcontent/pull/270
* https://github.com/electron/libchromiumcontent/pull/272
* https://github.com/electron/libchromiumcontent/pull/273
* https://github.com/electron/libchromiumcontent/pull/274
* https://github.com/electron/libchromiumcontent/pull/275

Pulls in the following brightray changes:

* https://github.com/electron/brightray/pull/281

Closes #8791 ",579,True,en,0
8924,1,0,0,Internals,kevinsawicki,2017-03-14T20:18:04Z,1,1,1,0,"All the projects in the Electron org and Electron Userland org are now on a separate account from the Atom org.

Closes #8609 ",128,True,en,0
8923,3,4,5,Externals,deepak1556,2017-03-28T05:45:47Z,58,65,7,13,"This fixes a crash which happens when navigating from a webpage that uses geolocation service and then quitting the app. Test this after applying https://github.com/electron/brightray/pull/278

```
#2 0x7f329989b51c content::RenderProcessHostImpl::ClearWebRtcLogMessageCallback()
#3 0x7f329989a7b3 content::RenderProcessHostImpl::Cleanup()
#4 0x7f329991cf34 content::ServiceWorkerProcessManager::Shutdown()
#5 0x7f329996ff90 content::StoragePartitionImplMap::ForEach()
#6 0x7f329962aad8 content::BrowserContext::NotifyWillBeDestroyed()
#7 0x000000e49f91 brightray::BrowserContext::~BrowserContext()
#8 0x000000cd65fc atom::AtomBrowserContext::~AtomBrowserContext()
#9 0x000000cd6649 atom::AtomBrowserContext::~AtomBrowserContext()
#10 0x000000ba71ff base::RefCounted<>::Release()
#11 0x000000ba71a9 scoped_refptr<>::Release()
#12 0x000000b9ae1a scoped_refptr<>::~scoped_refptr()
#13 0x000000ccec30 atom::AtomAccessTokenStore::~AtomAccessTokenStore()
#14 0x000000ccecc9 atom::AtomAccessTokenStore::~AtomAccessTokenStore()
#15 0x7f32987e8fb6 device::LocationArbitrator::~LocationArbitrator()
#16 0x7f32987e9029 device::LocationArbitrator::~LocationArbitrator()
#17 0x7f3295a4a802 base::Thread::ThreadMain()
#18 0x7f3295a44e03 <unknown>
#19 0x7f328b9062e7 start_thread
```

To reproduce:

* Navigate to `youtube.com`
* Then navigate to `google.com`
* window.history.back()
* quit the qpp

The reason for the crash is that geolocation service is managed by a global leaky pointer, since we were holding a reference to browser context, it will therefore be destroyed at the end of everything and messes with the cleanup process.

This also Fixes https://github.com/electron/electron/issues/8754 , geolocation service has its own dedicated thread, the response from `AtomAccessTokenStore` were being sent back to IO thread instead, hence the UI freezed.",1879,True,en,0
8922,1,1,0,Internals,kevinsawicki,2017-03-14T17:20:17Z,1,1,1,0,"This change pulls in https://github.com/electron/libchromiumcontent/pull/271 which removes the verification of snapshot data on Windows.

This has been removed upstream in https://codereview.chromium.org/2680653002 and this backports it to 1.3.x so Atom can use it via https://github.com/atom/atom/pull/13916",310,True,en,0
8917,6,5,1,Externals,bcomnes,2017-03-30T19:00:47Z,30,0,1,16,"The docs for the `remote.require(module)` method were a little too terse for me to understand the behavior of relative module loading for `remote.require` and I had to run an experiment to understand the behavior (e.g. is the relative path relative to caller of `remote.require` or relative to some other path in the project related to the main process?).   I think this is correct but someone please double check my understanding.

Adding an example and additional explanation should help clarify this.  Feel free to edit the copy as needed.",544,True,en,0
8910,23,2,5,Externals,MarshallOfSound,2017-03-16T16:11:00Z,325,15,7,3,"This is a pretty straightforward implementation of a touch bar item with an NSScrubbber inside it.  Gotta get all them emojis üëç 

/cc @kevinsawicki Pretty sure some more forward declarations are required for this but for the life of me I can't figure out what / how üòÜ ",276,True,en,0
8907,1,1,0,Externals,deepak1556,2017-03-13T16:22:21Z,3,0,1,1,"Plugin list on the browser side needs to be created before any cdm creation happens, chrome warms up the cache in `ChromeRendererClient::OverrideCreatePlugin` and hence it doesn't face the problem of widevine detection. The reason why flash plugin detection worked is that `content::MimeSniffingResourceHandler` warms up the cache when it detects an object resource. This is a necessary hack to make widevine detection work in Electron without having to access `navigator.plugins`.

Fixes https://github.com/electron/electron/issues/6516
Ref https://github.com/electron/electron/issues/8824",593,True,en,0
8906,1,1,0,Externals,roramirez,2017-03-13T16:11:30Z,134,1,3,1,,0,False,en,0
8900,1,4,2,Externals,tarruda,2017-03-16T17:12:10Z,64,4,4,5,"In sandboxed renderers we use browserify to provide a node-like environment. The
Buffer class used by browserify is actually just a wrapper around Uint8Array,
but to deserialize Buffer correctly we must expose the class as a hidden value
and use it in V8ValueConverter.

Extracted from #8815",296,False,en,0
8899,1,1,0,Externals,tarruda,2017-03-15T16:12:32Z,33,17,4,4,"Instead of having to list in filenames.gypi every javascript file that may go
into a browserify build, generate this list dynamically when the build files are
created by gyp.

Extracted from #8815",200,False,en,0
8897,3,4,0,Internals,zeke,2017-03-27T16:54:12Z,51,17,1,17,"This updates the Electron Versioning doc to explain what SemVer is in greater detail, and how Electron's versioning scheme differs. It also adds a `--save-exact` one-liner that shows how to easily adhere to our recommended practice.",232,False,en,0
8890,3,8,6,Externals,twolfson,2017-03-20T16:35:51Z,21,1,3,10,"In https://github.com/twolfson/karma-electron/issues/20, we received a bug report of not being able to stringify remote `electron` functions. After some searching, we found this was being caused by `new Proxy` which doesn't support `toString()` in any scenario:

https://github.com/electron/electron/blob/v1.6.3/lib/renderer/api/remote.js#L170-L190

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString

```js
new Proxy(function x () {}, {}).toString()
// VM594:1 Uncaught TypeError: Function.prototype.toString is not generic
//    at Proxy.toString (<anonymous>)
//    at <anonymous>:1:33
```

We have implemented a fallback implementation for Karma (where this issue was occurring):

https://github.com/karma-runner/karma/pull/2595

but believe we should fix the source of the problem by providing a `toString` proxy solution. In this PR:

- Added bound target `toString` function when `toString` is requested via `remote` proxy
- Added test

The result looks like:

```js
electron.remote.clipboard.write.toString();
// function (...args) {
//   if (this && this.constructor === remoteMemberFunction) {
//     // Constructor call.
//     let ret = ipcRenderer.sendSync('ELECTRON_BROWSER_MEMBER_CONSTRUCTOR', metaId, member.name, wrapArgs(args))
//     return metaToValue(ret)
//   } else {
//     // Call member function.
//     let ret = ipcRenderer.sendSync('ELECTRON_BROWSER_MEMBER_CALL', metaId, member.name, wrapArgs(args))
//     return metaToValue(ret)
//   }
// } 
```",1562,True,en,0
8887,7,3,0,Externals,MarshallOfSound,2017-03-10T22:43:12Z,166,3,6,0,"This adds the `NSSegmentedControl` as a possible touch bar item.

/cc @kevinsawicki ",86,True,en,0
8883,1,3,4,Externals,tarruda,2017-03-09T20:59:36Z,18,5,3,0,Extracted from #8815,20,False,en,0
8882,1,4,16,Externals,tarruda,2017-03-09T23:36:03Z,80,237,8,0,Extracted from #8815,20,False,en,0
8880,6,1,8,Externals,mst128256,2017-03-29T19:31:59Z,130,1,4,20,"New roles menuEdit and menuWindow were added to layout a kind of default Edit and Window submenu to the top menu bar. If there is a submenu in the item, default layout do not apply. Layout slightly differs for MacOS and Windows.

Closes #2814 ",245,True,en,0
8878,2,1,0,Externals,TanninOne,2017-03-20T17:14:23Z,6,5,1,11,"Notes that maximize will also show the window and that ready-to-show won't fire if the window is already being displayed. 

Fixes #8861",137,True,en,0
8870,1,0,0,Internals,kevinsawicki,2017-03-08T21:16:09Z,5,5,4,0,Linkify more params.,20,False,it,0
8866,5,10,4,Internals,jkleinsc,2017-03-09T17:55:09Z,63,0,4,1,"Resolves #8777

The WebRTC IP Handling Policy can now be set on webContents via the `setWebRTCIPHandlingPolicy` method.  The following values are supported:
* `default` - Exposes user's public and local IPs.  This is the default behavior if not specified.
* `default_public_interface_only` - Exposes user's public IP, but does not expose user's local IP.
* `default_public_and_private_interfaces` - Exposes user's public and local IPs.
* `disable_non_proxied_udp` - Does not expose public or local IPs.

Code to set and get the policy on webContents come from the Muon framework code:
https://github.com/brave/muon/blob/master/atom/browser/api/atom_api_web_
contents.cc#L1324...L1343

Here is a screenshot of a sample Electron app setting the WebRTCIPPolicy to _disable_non_proxied_udp_

<img width=""520"" alt=""screen shot 2017-03-08 at 10 20 56 am"" src=""https://cloud.githubusercontent.com/assets/609052/23710048/6535894c-03e9-11e7-827e-4fa8be532f8f.png"">
",971,True,en,0
8864,2,1,0,Externals,deepak1556,2017-03-09T19:27:35Z,45,44,4,1,Fixes https://github.com/electron/electron/issues/8857,54,False,en,0
8858,7,0,0,Internals,kevinsawicki,2017-03-09T18:49:19Z,132,3,6,1,"This can be use to explicitly generate a `NativeImage` that has representations for multiple scale factors.

```js
const image = nativeImage.createEmpty()

image.addRepresentation({
  scaleFactor: 1.0,
  buffer: require('fs').readFileSync(path.join(__dirname, 'red.png')
})

image.addRepresentation({
  scaleFactor: 2.0,
  buffer: require('fs').readFileSync(path.join(__dirname, 'green.png')
})

image.addRepresentation({
  scaleFactor: 3.0,
  buffer: require('fs').readFileSync(path.join(__dirname, 'blue.png')
})
```

Closes #3463",553,True,en,0
8856,1,1,0,Internals,kevinsawicki,2017-03-07T17:49:00Z,7,1,2,0,Add a note about possible future breaking changes given the newness of touch bar and its APIs. ‚å®Ô∏è ,102,False,en,0
8852,17,0,2,Internals,zcbenz,2017-03-22T16:01:43Z,408,64,35,15,"* [x] Add node integration to WebWorker
* [x] Fix thread unsafe code in Electron
* [x] Add an option in `webPreferences`
* [x] Tests
* [x] Docs",147,False,en,0
8851,2,1,0,Externals,joaomoreno,2017-03-07T17:35:30Z,1,1,1,0,"As far as I'm aware, after using the `ses.resolveProxy` API, this call seems to return a string in the shape of `PROXY foopy:80;SOCKS5 bar.com:1080`, not an object. Correct me if I'm wrong.",189,False,en,0
8849,12,0,0,Internals,kevinsawicki,2017-03-07T20:55:56Z,141,35,5,0,"This pull request adds support for a `scaleFactor` option, defaulting to `1.0`, to the following `NativeImage` APIs:

- `toDataURL`
- `toBitmap`
- `getBitmap`
- `toPNG`

This can be used when multiple representations of an image exist and you want access to a specific representation for a scale factor.

This also updates `toDataURL` and `toPNG` to work when there is no `1x` scale factor representation. This can occur for images returned via other APIs such as `app.getFileIcon`.

Closes #8767",507,True,en,0
8845,1,0,0,Internals,kevinsawicki,2017-03-07T20:27:40Z,4,4,2,1,"Prevent pages overriding this or deleting this from breaking the `webContents` -> `webFrame` IPC forwarding. 

Closes #8752",125,True,en,0
8840,1,1,0,Externals,Yarkhan,2017-03-06T17:27:39Z,1,1,1,0,,0,False,en,0
8839,24,4,5,Externals,brenca,2017-05-11T11:52:48Z,670,280,16,66,"This adds support for `webview` tags and ""popup windows"" (`select` element for example) inside an offscreen window. Also implements a CEF PR that simplifies and possibly speeds up GPU offscreen rendering.

Depends on electron/libchromiumcontent#265 :heavy_check_mark:

Fixes #8599
Might fix #8051 (with the added `ResizeLock`)

Currently only `webview`s that are created when the offscreen window is initialized are renderable inside the offscreen windows, I'm not sure how to change the `RenderWidgetHostView` under a `webview` tag's `webContents`, but if I (or someone else) can figure that out, that would allow us to swap in other `webContents` into an offscreen `webview` as well as rendering a `devTools` window inside the offscreen window.

'popup' windows inside offscreen `webview` tags are still not working.",827,True,en,0
8837,1,1,0,Externals,rhysd,2017-03-06T17:25:58Z,1,1,1,1,,0,False,en,0
8834,1,1,2,Externals,MarshallOfSound,2017-03-06T17:25:30Z,15,13,5,2,"Just some type declarations for the instance properties and function syntax üëç 

/cc @zeke @kevinsawicki ",109,True,en,0
8830,3,0,0,Internals,kevinsawicki,2017-03-03T23:51:17Z,32,14,4,0,"Follow on to #8095, support setting the text color of a label.",62,False,en,0
8816,5,0,0,Internals,zeke,2017-03-03T19:23:53Z,36,12,4,0,"@MarshallOfSound and I are working to wrap up the `electron.d.ts` effort. The last (known) holdout is the [webview-tag](https://github.com/electron/electron/blob/master/docs/api/webview-tag.md) doc, which has some unique qualities like its name and the fact that it has `attributes`.

This PR contains fixes to the webview API doc, as well as some fixes for other issues found by the linter along the way.",407,True,en,0
8815,4,2,11,Externals,tarruda,2017-03-10T17:23:32Z,191,100,12,8,"Here are some improvements to sandbox mode. 

- Make sandbox module structure similar to normal renderers
- Fix ipcRenderer API to match the non-sandbox version ~~(also allowing `Buffer`/`Uint8Array` instances to be sent/received)~~
- ~~Expose more modules to sandbox preload script:~~
   - ~~crashReporter~~
   - ~~remote~~
   - ~~fs~~
- ~~Improve efficiency of `ipcRenderer.sendSync` when it returns large Buffers~~

~~Also made some improvements to the build system: now it is no longer necessary to explicitly list modules that are packed by browserify.~~

~~The ipcRenderer API change is required to make it possible using the remote module, but it may break some users of sandbox(This may not be a problem if we consider that sandbox is still undocumented and experimental)~~

**Update:** Some parts of this PR were extracted and will go into future PRs",873,True,en,0
8811,6,0,0,Internals,zcbenz,2017-03-06T11:37:00Z,57,6,9,4,"With Node 7, it is now guaranteed that all libuv handles in an Environment are closed when the Environment is destroyed. Making use of this feature, this PR makes sure the node Environment created in the main process and renderer processes are destroyed when the V8 contexts are released.

This is a prerequisite of adding node integration into WebWorker.  ",359,True,en,0
8806,1,2,0,Externals,felixrieseberg,2017-03-02T18:35:09Z,1,1,1,0,"Windows now allows users to move their `WindowsApps` folder, meaning that it can end up on a different drive (and outside of `Program Files`). This fixes `process.windowsStore`.

Closes #8805 ",194,True,en,0
8804,2,0,0,Internals,kevinsawicki,2017-03-02T17:16:52Z,14,2,2,1,"This allows things like `fetch` to work from preload scripts in renderers with `contextIsolation` enabled to work and not crash.

Closes #8802",144,True,en,0
8801,1,1,0,Externals,tomfloyer,2017-03-01T17:05:05Z,1,1,1,0,,0,False,en,0
8800,3,1,0,Internals,zeke,2017-03-06T17:32:21Z,88,88,45,5,"The electron.atom.io website now [enforces HTTPS](https://github.com/electron/electron.atom.io/issues/657). This PR updates links to the website and replaces some image URLs with GitHub-hosted copies.

Companion issue for the website: https://github.com/electron/electron.atom.io/issues/690

‚ú®  :lock: ‚ú® ",312,True,en,0
8799,6,6,8,Externals,nitsakh,2017-03-06T18:25:53Z,18,0,6,5,"This is my first time contributing to electron. Please suggest changes as needed.

Closes #8735",97,True,en,0
8795,2,1,0,Internals,zeke,2017-03-06T17:30:56Z,1,0,2,6,"This renames `shortcuts.md` to `keyboard-shortcuts.md` for clarity and discoverability, e.g. when a user searches the docs for ""keyboard"". This change won't require setting up a redirect on the website, because we haven't done a release of Electron since the `shortcuts.md` file was introduced.",294,False,en,0
8792,4,1,0,Externals,LasseJacobs,2017-02-28T16:18:18Z,97,0,1,0,"I translated the glossary.md file to dutch. I hope I did everything right, I tried to follow all of the guidelines but this is my first time contributing to electron so let me know if I did something wrong.",206,False,en,0
8787,1,1,0,Externals,serant,2017-02-27T16:54:03Z,2,2,1,0,Found this by making the same typo while searching the repository. üòÇ,71,False,en,0
8786,1,10,8,Internals,zcbenz,2017-04-12T19:27:41Z,1,1,1,44,Close #5429.,12,False,en,0
8783,1,1,0,Externals,odensc,2017-02-27T16:53:35Z,18,18,7,0,Fixes #8781.,12,False,en,0
8775,5,4,1,Internals,zeke,2017-02-27T17:48:49Z,88,0,1,1,An attendee at today's [Electron Workshop](https://www.eventbrite.com/e/workshop-building-desktop-apps-with-javascript-electron-tickets-31440633782#) in SF asked about how to set up keyboard shortcuts in Electron apps. This PR is an attempt to document the various options.,273,False,en,0
8769,1,1,0,Externals,jwheare,2017-02-27T16:52:59Z,4,5,1,2,As suggested in https://github.com/electron/electron/pull/8733#issuecomment-282432973,85,False,en,0
8766,4,0,1,Internals,kevinsawicki,2017-02-28T17:19:31Z,59,23,3,3,"Currently the `remote` module loads the browser process `require('electron')` in the renderer process to get a list of module names to add as properties to the `remote` object (like `remote.app`).

Requiring this file puts it in the require cache which can then cause issues if it is accessed from that cache directly or indirectly since the properties on the `exports` object will throw errors when accessed since it will lazily require modules that cannot run in the renderer process.

This pull request switches `remote.js` to use a local list of module names to add as properties so this file isn't required at all.

This does mean the lists need to be kept in sync but that seems better to do than attempting to load browser process code in the renderer process. Also we infrequently add new top-level modules and the comment at the top of `electron.js` now mentions it.

Closes #8423",897,True,en,0
8760,2,1,0,Externals,popod,2017-02-23T21:45:23Z,1,1,1,0,"Add doc for startDrag() files option.

Closes #8755 ",54,True,en,0
8758,3,0,0,Internals,kevinsawicki,2017-02-24T18:35:36Z,20,2,4,0,"This pull request is a minor update to #8605 to use `Buffer` instead of `global.Buffer` in the `module.js` require wrapper.

Previously modules required from preload scripts after the `loaded` event fires on `process` would not have `Buffer`  specified as an argument to the require wrapper since it would be deleted from the `global` in `init.js`.

Node diff:

```diff
diff --git a/lib/module.js b/lib/module.js
index 1bc27c0..c526fb0 100644
--- a/lib/module.js
+++ b/lib/module.js
@@ -565,7 +565,7 @@ Module.prototype._compile = function(content, filename) {
   }
   var dirname = path.dirname(filename);
   var require = internalModule.makeRequireFunction.call(this);
-  var args = [this.exports, require, this, filename, dirname, process, global, global.Buffer];
+  var args = [this.exports, require, this, filename, dirname, process, global, Buffer];
   var depth = internalModule.requireDepth;
   if (depth === 0) stat.cache = new Map();
   var result = compiledWrapper.apply(this.exports, args);
```",1026,True,en,0
8746,1,0,0,Internals,zeke,2017-02-26T02:20:43Z,4,2,1,3,"This is a small amendment to the docs for the `activated` event on the `app` module, to clarify what kinds of user behavior cause it to be emitted.

https://github.com/electron/electron/issues/8712",199,True,en,0
8745,5,1,3,Internals,kevinsawicki,2017-02-24T16:38:20Z,90,22,1,1,"This pull request switches the open and save dialogs opened in `WebDialogHelper::RunFileChooser` to be callback-based instead of synchronous.

Inspired by https://cs.chromium.org/chromium/src/chrome/browser/file_select_helper.h

- [x] Manually test on macOS
- [x] Manually test on Windows
- [x] Manually test on Linux

Closes #8457",339,True,en,0
8744,4,0,0,Externals,MarshallOfSound,2017-03-06T19:19:24Z,32,10,4,11,Fixes #8743,11,False,en,0
8742,4,0,0,Internals,kevinsawicki,2017-02-28T16:45:16Z,23,20,4,5,"This removes the need for an `ipcRenderer` listener in `web-view.js` to forward the window visibility event and instead co-locates it with the other embedder events listened for in `guest-view-internal.js`.

This prevents an event emitter warning when more than 10 web views exist in a window since `webContents` already has max listeners set to Infinity.

The other option to prevent this warning would be to bump the `ipcRenderer` max listeners to Infinity as well but that would seem to possibly cover up legit memory leaks in apps.

Closes #8622",555,True,en,0
8739,3,0,0,Internals,kevinsawicki,2017-02-24T17:05:33Z,6,3,2,1,"In a fullscreen flash player, `BrowserWindow.getFocusedWindow()` will return `null` which causes the popup menu to throw an exception.

This pull request switches it to use `webContents.getOwnerBrowserWindow()` instead.

Closes #8632",237,True,en,0
8733,1,4,0,Internals,kevinsawicki,2017-02-24T17:32:08Z,15,6,2,1,"Use `setKeyEquivalent` to support the specified `cancelId` on macOS when there is more than one button.

Closes #8573",119,True,en,0
8731,2,3,1,Externals,herrmannplatz,2017-02-22T16:22:22Z,7,2,1,0,setCertificateVerifyProc example should reflect new api,55,False,en,0
8724,4,1,2,Externals,deepak1556,2017-03-06T18:18:37Z,129,16,4,13,Fixes https://github.com/electron/electron/issues/8700,54,False,en,0
8718,1,1,0,Externals,demopark,2017-02-21T16:48:16Z,145,2,3,2,"add zh-CN translations file - debug-instructions-windows.md
add zh-CN translations file - debugging-instructions-macos.md
update zh-CN translations file - README.md",164,False,en,0
8717,1,1,0,Externals,gerhardberger,2017-02-21T16:45:11Z,1,1,1,2,This PR fixes the version check of `BrowserWindow.setVibrancy` method. #8714 ,77,False,en,0
8709,1,0,0,Internals,kevinsawicki,2017-02-17T18:57:39Z,1,1,1,0,"Pulls in a few changes already landed on master and also https://github.com/electron/native-mate/pull/10

Doing this to reduce the diff in #8702 and to ensure the master specs all pass with these changes.",206,True,en,0
8707,1,1,0,Externals,demopark,2017-02-17T16:22:06Z,253,2,3,0,"add zh-CN translations file - clang-format.md
add zh-CN translations file - styleguide.md
update zh-CN translations file - README.md",132,False,br,0
8704,2,4,0,Externals,YurySolovyov,2017-02-17T16:21:10Z,193,248,11,0,"See: https://github.com/electron/electron/pull/8631#issuecomment-278461065

As per [commit](https://chromium.googlesource.com/chromium/src/+/f0a7b5b81faa4d2abf594b6e3ac135ed60dad504%5E%21/): 
> There are lifetime issues due to IconLoader being refcounted for no good reason, so stop doing that.

And from [Chromium Issue 674743](https://bugs.chromium.org/p/chromium/issues/detail?id=674743):

> In reviewing this code it seems like IconManager is racy. In particular
IconManager is not ref counted, but IconLoader is. IconLoader references
IconManager through it's a delegate. This means it's possible for IconLoader to
outlive it's delegate. Seems this function should null out the delegates (and
you should keep the null check in IconLoader::NotifyDelegate).
 ",774,True,en,0
8702,16,7,0,Internals,kevinsawicki,2017-02-22T20:50:58Z,220,54,13,6,"Adds an `async` option to `menu.popup` that returns immediately on each platform and does not block the render loop on macOS.

The `menu.popup` signature is also updated (but backwards-compatible) to take an `options` object instead of `x`, `y`, and `positioningItem` arguments.

```js
win.webContents.on('context-menu', (event, params) => {
  menu.popup(win, {
    x: params.x,
    y: params.y,
    async: true
  })

  // Close it for some reason after 2 seconds
  setTimeout(function () {
    menu.closePopup(win)
  }, 2000)
})
```

| Sync (current behavior) | Async (new behavior) |
| --- | --- |
| ![sync-menu](https://cloud.githubusercontent.com/assets/671378/23029927/f4beb8d2-f420-11e6-9f89-04e340d05e67.gif) | ![async-menu](https://cloud.githubusercontent.com/assets/671378/23029925/f38e7eb6-f420-11e6-9549-1014c9806541.gif) |

- [x] Implement `async` option on macOS
- [x] Implement `async` option on Linux/Windows
- [x] Implement `menu.closePopup` on macOS
- [x] Implement `menu.closePopup` on Linux/Windows
- [x] Update `menu.md` API docs
- [x] Add new method signature to `planned-breaking-changes.md`
- [x] Add tests

This does not change the default behavior, this new option is opt-in but that default could be revisited in the 2.0 API.

This pull request also adds a new `menu.closePopup([browserWindow])` API that can be used to explicitly close the context menu.

Closes #1854",1429,True,en,0
8696,1,1,0,Externals,demopark,2017-02-16T16:12:19Z,186,4,5,0,"add zh-CN translations file - security.md
add zh-CN translations file - repl.md
add zh-CN translations file - windows-store-guide.md
update zh-CN translations file - glossary.md
update zh-CN translations file - README.md",220,False,br,0
8695,3,2,2,Externals,ericbrumer,2017-02-16T19:56:53Z,5,2,1,0,"Hi, I work on the Microsoft C++ compiler team and we build & run the Electron tests as part of daily compiler validation.

The ""emits when favicon urls are received"" test fails for us as we are building & running the tests on drive F, and it appears that the test is checking precisely for file:///C:/favicon.png. This PR changes it to a regex to match any drive letter (Windows only).

Thanks!
Eric Brumer",411,True,en,0
8693,8,4,7,Externals,deepak1556,2017-02-17T20:50:27Z,372,26,12,1,"Ref https://github.com/electron/electron/pull/8537

- [x] Add basic spec for webviews
- [x] Add spec for temporary zoom levels",129,True,en,0
8686,4,1,0,Externals,demopark,2017-02-15T20:27:07Z,64,11,4,0,Optimize zh-CN language logic and grammar,41,False,en,0
8684,1,0,0,Internals,kevinsawicki,2017-02-14T20:40:21Z,3,3,1,0,Didn't notice this failure in #8628 when I pushed up a rename of this variable üòû ,84,False,en,0
8682,1,0,0,Internals,kevinsawicki,2017-02-15T16:28:44Z,5,9,3,0,"Put the electron version in the asset name of the Chromedriver asset that ships with each new minor Electron release.

This prevents issue with caching by asset name and also makes it consistent with the `ffmpeg` and `mksnapshot` asset names.

Fixes #8653",259,True,en,0
8679,1,0,0,Internals,zcbenz,2017-02-15T02:04:36Z,3,0,1,0,"Close https://github.com/electron/electron/issues/8055.

This is probably not the best fix, but it gives better performance and avoids all related crashes and locks. It is also disabled on Release version of Chrome browser:
https://cs.chromium.org/chromium/src/chrome/app/chrome_main_delegate.cc?type=cs&q=InstallHandleHooks&l=206",333,True,en,0
8678,2,7,0,Externals,liusy182,2017-03-06T18:11:22Z,0,2,1,20,#8625 ,6,False,en,0
8676,7,0,0,Internals,kevinsawicki,2017-02-15T19:22:01Z,91,2,6,1,"This pull request adds a `Activate` override to the native aura widget used on Windows and only activates it when the window is visible so the currently focused window doesn't get incorrectly blurred when an invisible window is created.

The focus manager appears to have changed in Chrome 56 and focusing a web contents in an invisible window causes the focused window to lose focus even though the invisible window cannot gain focus.

https://chromium.googlesource.com/chromium/src/+/5c16e0e849526c1c627e08a05351ab38a9cfbcf1%5E%21/#F7

- [x] Add tests

Closes #8649",575,True,en,0
8673,1,1,0,Internals,kevinsawicki,2017-02-14T17:32:57Z,1,1,1,0,"Previously it was notifying edge listeners when an end event fired, this updates it to notify end listeners instead.

Refs #8501 
Closes #8621",145,True,en,0
8672,1,1,0,Internals,kevinsawicki,2017-02-13T17:24:39Z,3,3,1,0,"Mac build is currently failing with the following compiler error:

```
../../atom/browser/web_contents_zoom_controller.cc:25:7: error: field 'embedder_zoom_controller_' will be initialized after base 'content::WebContentsObserver' [-Werror,-Wreorder]
      embedder_zoom_controller_(nullptr),
      ^
1 error generated.
```

Refs #8537 ",345,True,en,0
8669,1,1,0,Externals,poppinlp,2017-02-13T16:18:20Z,1,1,1,0,Fix typo,8,False,en,0
8668,1,0,0,Internals,zcbenz,2017-02-13T08:03:37Z,1,1,1,0,"Refs https://github.com/electron/libchromiumcontent/pull/261.
Close https://github.com/electron/electron/issues/8555.",118,False,en,0
8662,16,1,0,Externals,oukan,2017-02-14T17:33:28Z,1205,745,16,2,Modules for the Main Process to zh-CN,37,False,en,0
8660,1,1,0,Externals,fab1an,2017-02-13T16:17:24Z,1,1,1,1,,0,False,en,0
8659,1,1,0,Externals,fab1an,2017-02-13T16:16:55Z,1,1,1,1,,0,False,en,0
8655,13,0,0,Internals,kevinsawicki,2017-02-10T20:18:43Z,893,18,8,0,Pulls in the updated Thai translations from #8444,49,False,en,0
8654,1,0,0,Internals,kevinsawicki,2017-02-14T16:41:56Z,1,1,1,3,"Pulls in https://github.com/electron/brightray/pull/276

Fixes #8563",70,True,en,0
8652,1,3,0,Externals,cifratila,2017-03-28T15:59:47Z,12,1,1,46,Added an argument to the create-dist script in order to not create documentation every time.,92,False,en,0
8651,3,2,0,Externals,enlight,2017-02-10T18:29:08Z,14,3,1,0,This should help clarify the purpose of `event.newGuest` as per the recent discussion in #7407.,95,False,en,0
8650,1,1,0,Externals,enlight,2017-02-10T16:45:41Z,4,0,1,0,,0,False,en,0
8648,12,0,0,Internals,kevinsawicki,2017-02-14T18:09:03Z,149,23,12,4,"This pull request adds a `crashReporter.setExtraReporter` which can be used on macOS to set additional fields to be sent after the initial values are passed to `start`.

On Linux and Windows this can be done by calling `start` a second time and the docs have been updated to reflect that.

- [x] Add tests

Closes #7100",325,True,en,0
8640,2,0,0,Internals,zcbenz,2017-02-10T10:11:32Z,6,2,2,1,"Refs https://github.com/electron/libchromiumcontent/pull/260.
Close https://github.com/electron/electron/issues/8608.",118,False,en,0
8636,1,0,0,Internals,kevinsawicki,2017-02-08T21:57:00Z,4,4,1,0,"Looks like CI on Linux failed because it got a different message.

Update the specs to allow either.

```
not ok 356 session module ses.setCertificateVerifyProc(callback) accepts the request when the callback is called with true
  AssertionError: 'net::ERR_CERT_COMMON_NAME_INVALID' == 'net::ERR_CERT_AUTHORITY_INVALID'
      at /var/lib/jenkins/workspace/electron-linux-x64/spec/api-session-spec.js:561:16
      at CallbacksRegistry.apply (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/common/api/callbacks-registry.js:48:42)
      at EventEmitter.<anonymous> (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/renderer/api/remote.js:283:21)
      at emitThree (events.js:116:13)
      at EventEmitter.emit (events.js:194:7)
```

Refs #7955 ",812,True,en,0
8628,8,11,3,Externals,Spacetech,2017-02-14T19:41:16Z,23,6,7,6,"This PR implements the `webContents.invalidate` method for non-offscreen mode. It will schedule a paint to the native window.

An example use case for this method: A few games on Steam use Electron and [Greenworks](https://github.com/greenheartgames/greenworks). Steam games have an in-game overlay that shows up over the game, which users can toggle via a keybind. This overlay has many issues in electron apps. 

The main issue is that since the overlay is hooked into the renderer, the overlay is frozen / corrupted when the renderer isn't painting or if it's only painting small dirty regions. We used to implement some shady methods to force repaints, such as having multiple 1x1 pixel canvases refreshing, or translateZ(0)ing some elements.. but these hacks stopped working properly in newer Chromium versions.  See [Greenworks#50](https://github.com/greenheartgames/greenworks/issues/50) for detailed discussion.
Calling this invalidate method often (60fps / every animation frame) completely solves this issue.",1023,True,en,0
8626,1,1,0,Externals,dengyaolong,2017-02-08T16:50:27Z,25,3,1,0,,0,False,en,0
8624,1,3,0,Internals,kevinsawicki,2017-02-08T02:30:01Z,5,0,1,0,"Temporarily disable these failing specs until it can be investigated further.


```
not ok 22 app module getFileIcon() API fetches a non-empty icon
  AssertionError: { Error: Failed to get file icon. message: 'Failed to get file icon.', name: 'Error' } == null
      at /var/lib/jenkins/workspace/electron-linux-x64/spec/api-app-spec.js:470:16
      at CallbacksRegistry.apply (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/common/api/callbacks-registry.js:48:42)
      at EventEmitter.<anonymous> (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/renderer/api/remote.js:282:21)
      at emitThree (events.js:116:13)
      at EventEmitter.emit (events.js:194:7)
not ok 23 app module getFileIcon() API fetches normal icon size by default
  AssertionError: { Error: Failed to get file icon. message: 'Failed to get file icon.', name: 'Error' } == null
      at /var/lib/jenkins/workspace/electron-linux-x64/spec/api-app-spec.js:479:16
      at CallbacksRegistry.apply (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/common/api/callbacks-registry.js:48:42)
      at EventEmitter.<anonymous> (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/renderer/api/remote.js:282:21)
      at emitThree (events.js:116:13)
      at EventEmitter.emit (events.js:194:7)
not ok 24 app module getFileIcon() API size option fetches a small icon
  AssertionError: { Error: Failed to get file icon. message: 'Failed to get file icon.', name: 'Error' } == null
      at /var/lib/jenkins/workspace/electron-linux-x64/spec/api-app-spec.js:490:18
      at CallbacksRegistry.apply (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/common/api/callbacks-registry.js:48:42)
      at EventEmitter.<anonymous> (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/renderer/api/remote.js:282:21)
      at emitThree (events.js:116:13)
      at EventEmitter.emit (events.js:194:7)
not ok 25 app module getFileIcon() API size option fetches a normal icon
  AssertionError: { Error: Failed to get file icon. message: 'Failed to get file icon.', name: 'Error' } == null
      at /var/lib/jenkins/workspace/electron-linux-x64/spec/api-app-spec.js:500:18
      at CallbacksRegistry.apply (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/common/api/callbacks-registry.js:48:42)
      at EventEmitter.<anonymous> (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/renderer/api/remote.js:282:21)
      at emitThree (events.js:116:13)
      at EventEmitter.emit (events.js:194:7)
not ok 26 app module getFileIcon() API size option fetches a large icon
  AssertionError: { Error: Failed to get file icon. message: 'Failed to get file icon.', name: 'Error' } == null
      at /var/lib/jenkins/workspace/electron-linux-x64/spec/api-app-spec.js:513:18
      at CallbacksRegistry.apply (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/common/api/callbacks-registry.js:48:42)
      at EventEmitter.<anonymous> (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/renderer/api/remote.js:282:21)
      at emitThree (events.js:116:13)
      at EventEmitter.emit (events.js:194:7)
```

Refs #7851 ",3352,True,en,0
8623,1,0,0,Internals,kevinsawicki,2017-02-09T19:07:03Z,151,235,9,1,"This pull request extract a helper struct to encapsulate all the settings for open and save dialogs.

This is an effort to make it easier to add new (possibly platform-specific) settings. They can be added to the struct and the signature that was already getting pretty long won't get any longer and won't need to be updated in the several places calling the open/save dialog APIs.

Refs #8556
Refs #8617",409,True,en,0
8619,1,1,0,Internals,kevinsawicki,2017-02-08T04:58:26Z,10,10,1,0,"This pull request updates the macOS version checks to be `IsAtLeastOS10_` instead of `IsOS10_`.

These were previously `IsOSYosemiteOrLater` and `IsOSElCapitanOrLater` before the Chrome 56 upgrade when they had to be updated because they had been renamed `base/mac/mac_util.h`

Refs https://github.com/electron/electron/commit/3224c3937196dae05ea5c643ea01fc48320c5020
Fixes #8610",384,True,en,0
8618,4,0,0,Internals,kevinsawicki,2017-02-08T18:33:49Z,12,1,4,1,"Updates the node require function wrapper patch to pass through the `this` value of the outer function.

This fixes a regression introduced in #8539 

```diff
diff --git a/lib/internal/bootstrap_node.js b/lib/internal/bootstrap_node.js
index e3d9613..65567de 100644
--- a/lib/internal/bootstrap_node.js
+++ b/lib/internal/bootstrap_node.js
@@ -514,7 +514,7 @@
   NativeModule.wrapper = [
     '(function (exports, require, module, __filename, __dirname, process, global) { ' +
     'return function (exports, require, module, __filename, __dirname) { ',
-    '\n}(exports, require, module, __filename, __dirname); });'
+    '\n}.call(this, exports, require, module, __filename, __dirname); });'
   ];
 
   NativeModule.prototype.compile = function() {
```

Hat tip to @MarshallOfSound for investigating and putting forth this fix üëç üé© 

Closes #8611",876,True,en,1
8617,4,2,3,Externals,MarshallOfSound,2017-02-13T16:29:19Z,14,7,4,6,"Fixes #8601

Thanks for the detailed issue report @maxbrunsfeld was wondering what was causing this in a different Electron app for a while üòÜ ",147,True,en,0
8616,1,0,0,Internals,zcbenz,2017-02-07T22:56:29Z,39,55,2,0,"Instead of using `/INCLUDE` to reference symbols, this PR changes to use plain C++ for the same purpose, so the trick is more easier to maintain and understand.",160,False,en,0
8607,1,1,0,Internals,zcbenz,2017-02-07T00:41:23Z,2,0,1,0,"Close https://github.com/electron/electron/issues/8602

/cc @kevinsawicki ",76,True,en,0
8606,1,1,0,Externals,CharlieHess,2017-02-07T00:01:40Z,1,1,1,0,"![whoops](https://cloud.githubusercontent.com/assets/1865957/22671708/91f512b2-ec84-11e6-94ca-244b7ff533d8.png)
",113,True,en,0
8605,6,1,0,Internals,kevinsawicki,2017-02-14T17:07:25Z,22,31,10,7,"This was originally done in #7114 but was pulled back because at the time there wasn't a known way to do this without breaking existing apps and libraries.

This pull request builds on the change done in #8539 for `process` and `global` by adding `Buffer` as an argument to the require wrapper function.

The new wrapper node patch is at https://github.com/electron/node/commit/439dbac

The diff is:

```diff
diff --git a/lib/internal/bootstrap_node.js b/lib/internal/bootstrap_node.js
index 65567de..085ea00 100644
--- a/lib/internal/bootstrap_node.js
+++ b/lib/internal/bootstrap_node.js
@@ -512,7 +512,7 @@
   };
 
   NativeModule.wrapper = [
-    '(function (exports, require, module, __filename, __dirname, process, global) { ' +
+    '(function (exports, require, module, __filename, __dirname, process, global, Buffer) { ' +
     'return function (exports, require, module, __filename, __dirname) { ',
     '\n}.call(this, exports, require, module, __filename, __dirname); });'
   ];
@@ -529,7 +529,7 @@
         lineOffset: 0,
         displayErrors: true
       });
-      fn(this.exports, NativeModule.require, this, this.filename, undefined, process, localGlobal);
+      fn(this.exports, NativeModule.require, this, this.filename, undefined, process, localGlobal, localGlobal.Buffer);
 
       this.loaded = true;
     } finally {
diff --git a/lib/module.js b/lib/module.js
index ff24970..1bc27c0 100644
--- a/lib/module.js
+++ b/lib/module.js
@@ -565,7 +565,7 @@ Module.prototype._compile = function(content, filename) {
   }
   var dirname = path.dirname(filename);
   var require = internalModule.makeRequireFunction.call(this);
-  var args = [this.exports, require, this, filename, dirname, process, global];
+  var args = [this.exports, require, this, filename, dirname, process, global, global.Buffer];
   var depth = internalModule.requireDepth;
   if (depth === 0) stat.cache = new Map();
   var result = compiledWrapper.apply(this.exports, args);
```

Closes #7081

/cc @ide ",2044,True,en,0
8604,2,0,3,Internals,groundwater,2017-03-06T17:48:37Z,13,1,1,27,"I ‚ù§Ô∏è getting a repro URL - something that can be `git clone ...` and then you're up and running. I want to gently encourage bugs to include such.

Thoughts on wording?",173,True,en,0
8596,13,12,3,Externals,renaesop,2017-05-18T18:42:03Z,323,27,17,101,"Add webContents.printerList And a print option to select printer

When electron/native-mate#9 get merged,  it will pass the ci build and test",143,True,en,0
8590,2,4,3,Externals,poiru,2017-02-09T18:07:04Z,155,61,10,3,"This adds the `checkboxLabel` and `checkboxChecked` options to display a
checkbox in the message box. Fixes #6048.

Example screenshots:

<img width=""420"" alt=""mac"" src=""https://cloud.githubusercontent.com/assets/1319028/22628827/0c5214cc-ebd3-11e6-8a9f-6e70b87a8b53.png"">

<img width=""330"" alt=""linux"" src=""https://cloud.githubusercontent.com/assets/1319028/22628826/0c1c8582-ebd3-11e6-9501-7a62bef45bee.png"">

<img width=""488"" alt=""windows"" src=""https://cloud.githubusercontent.com/assets/1319028/22628828/0c58fd5a-ebd3-11e6-82ce-d8c9eaedf13b.png"">
",561,False,en,0
8584,9,0,3,Internals,kevinsawicki,2017-02-09T20:40:12Z,59,3,4,5,"This event is similar to `new-window`, in that it allows you to configure the `webPreferences` of the `<webview>`'s `webContents` before it gets read in and calling `event.preventDefault()` will destroy the guest page.

This event can be used to enforce/configure settings in the main process for created webviews and also allow finer grain option setting than the current `<webview>` attributes support.

Closes #2749",422,True,en,0
8583,5,1,0,Externals,crowchirp,2017-02-03T17:55:43Z,5,5,3,0,,0,False,en,0
8572,1,0,0,Internals,kevinsawicki,2017-02-03T17:53:53Z,20,14,1,0,"Looks like `contentTracing.startRecording` does not callback if called before app `ready` fires.

This pull request updates the doc to match how `globalShorcut` documents this. 

Closes #8433",195,True,en,0
8570,2,1,0,Internals,kevinsawicki,2017-02-03T17:44:57Z,22,2,4,0,"Adds a `forcereload` menu item role that maps to `webContents.reloadIgnoringCache` available from the View menu and using the same shortcut as reload but with an added `Shift`.

Closes #8465",192,True,en,0
8569,2,0,0,Internals,kevinsawicki,2017-02-03T17:39:23Z,26,20,1,0,"This pull request updates the boolean `<webview>` tag attribute to mention the presence of the attribute enables it, instead of it having a specific value like `""on""`.

This should hopefully make it less confusing about the default values and how to enable/disable them.

Feedback appreciated.

Closes #6939",313,True,en,0
8568,1,0,0,Internals,kevinsawicki,2017-02-03T17:31:59Z,24,6,3,0,"Creating a `ScopedSysColorChangeListener` before the app is ready appears to somehow interfere with global shortcuts (and possibly other things). This affects apps that require `systemPreferences` before app `ready` fires which is a common pattern.

This pull request changes it so the listener is only created after `OnFinishLaunching` is fired.

Fixes #7859",363,True,en,0
8566,1,0,3,Internals,kevinsawicki,2017-02-03T16:58:53Z,16,4,4,1,"This pull requests add support for allowing non-existent paths to files to be entered in the Windows open dialog.

The new option is called `promptToCreate` and maps to the `FOS_CREATEPROMPT` dialog option on Windows. The returned path in these cases will not exist and should be created by the application.

<img width=""1235"" alt=""screen shot 2017-02-02 at 8 51 59 am"" src=""https://cloud.githubusercontent.com/assets/671378/22559141/12cb7d08-e925-11e6-8146-0cff70fd85b9.png"">

<img width=""803"" alt=""screen shot 2017-02-02 at 8 52 08 am"" src=""https://cloud.githubusercontent.com/assets/671378/22559140/12b809e4-e925-11e6-94b6-77bed21478f0.png"">



Closes #8236",670,True,en,0
8565,2,0,0,Internals,kevinsawicki,2017-02-02T20:48:20Z,36,0,1,0,"Adds some coverage of the protocol client API on Windows.

Noticed this didn't have any specs while reviewing #8515 ",118,True,en,0
8561,2,2,0,Externals,liusy182,2017-02-02T18:33:21Z,8,0,3,0,"Fixes #8471 

added `code` property for 'before-input-event' ",63,True,en,0
8556,13,3,7,Externals,yamgent,2017-02-09T19:34:20Z,59,4,6,8,"Fixes #7783.

showSaveDialog() now supports additional attributes for setting the `message`, `nameFieldLabel` and `showsTagField`.

showOpenDialog() also supports `message` (`nameFieldLabel` and `showsTagField` doesn't seem to change the dialog box though).

```javascript
  const {dialog} = require('electron');
  dialog.showSaveDialog({
    title: 'Save File',
    message: 'Select a location to save special file.',
    nameFieldLabel: 'Special Name',
    showsTagField: true
  });
```

![screen shot 2017-02-02 at 12 05 05 am](https://cloud.githubusercontent.com/assets/3168908/22515845/e421bf3a-e8de-11e6-9322-5c351645e9bf.png)
",650,True,en,0
8542,3,1,2,Externals,yamgent,2017-02-07T17:15:56Z,20,3,2,7,"The webpreferences attribute values are parsed as strings instead
of numbers. Therefore, a conversion is required.

Fixes #8492.

![fix-min-size](https://cloud.githubusercontent.com/assets/3168908/22450620/dd2e5a68-e7a2-11e6-92a2-f6640cdbb050.png)
",254,False,en,0
8540,2,3,0,Internals,zeke,2017-02-10T21:27:50Z,14,0,2,11,"This PR adds a `SECURITY.md` file to the root of the repo, which outlines the protocol for disclosing vulnerabilities.

Note: the link in `tutorial/security.md` uses a fully-qualified URL so that the link won't break when it shows up on the website at http://electron.atom.io/docs/tutorial/security/",301,True,en,0
8539,4,2,0,Internals,kevinsawicki,2017-01-30T18:36:16Z,19,1,4,0,"This pull request is an update of #8382 

It rebases the node patch on top of the Node 7.4.0 upgrade in #8406 

The `vendor/node` diff is a redo of the `NativeModule` patch with the following diff:

```diff
diff --git a/lib/internal/bootstrap_node.js b/lib/internal/bootstrap_node.js
index e3d9613..1c15912 100644
--- a/lib/internal/bootstrap_node.js
+++ b/lib/internal/bootstrap_node.js
@@ -512,9 +512,8 @@
   };
 
   NativeModule.wrapper = [
-    '(function (exports, require, module, __filename, __dirname, process, global) { ' +
-    'return function (exports, require, module, __filename, __dirname) { ',
-    '\n}(exports, require, module, __filename, __dirname); });'
+    '(function (exports, require, module, __filename, __dirname, process, global) { ',
+    '\n});'
   ];
 
   NativeModule.prototype.compile = function() {
```

Fixes #8358

/cc @ide",886,True,en,0
8537,6,6,0,Externals,deepak1556,2017-02-13T08:24:34Z,415,51,17,13,"With this PR:
- Using zoom api on webContents will persist in a session on per-origin basis (132.content.foo and content.foo will share zoom changes if they are on the same session).
- Webview will still inherit embedder zoom changes. (this behavior is already present and it will continue)
- The zoom changes of each host in a session are persisted with the Preference file, so they will be available on the next load of the app. (If ZoomFactor is set on the webPreference then it will take precedence over the values from preference file, this can be overriden by using the zoom apis). In short the order of precedence is Preference File < ZoomFactor on WebPreference < Zoom api on webContents.
- Use the webframe api if the zoom changes are required only to be temporary. (Does not persist across navigations)

Would like feedback if the above behavior sounds good, thanks!

- [ ] Add Spec
- [x] Map webframe zoom calls to HostZoomMap temporary apis.

Depends on https://github.com/electron/brightray/pull/273

Fixes https://github.com/electron/electron/issues/6958",1081,False,en,0
8528,2,1,0,Externals,Anatzum,2017-04-04T03:15:22Z,14,1,1,65,":penguin: If ELECTRON_TRASH is null, first check the DESKTOP_SESSION variable and set trash accordingly. Additional desktop environments can be added easily this way with the fallback of ELECTRON_DEFAULT_TRASH.",210,False,en,0
8519,4,0,0,Internals,kevinsawicki,2017-01-26T22:44:46Z,33,35,1,0,"We are still seeing an occasional CI failure with a missing remote object error.

This pull request consolidates the helper function used to show the last dev tools panel to try and narrow down when/where/why this is happening.

Saw this yesterday on AppVeyor, https://ci.appveyor.com/project/Atom/electron/build/3789/job/c4r3s64i6o9bp179:

```
not ok 123 BrowserWindow module dev tool extensions works when used with partitions
  Error: Cannot call function 'executeJavaScript' on missing remote object 411
  Error: Cannot call function 'executeJavaScript' on missing remote object 411
      at throwRPCError (C:\projects\electron\out\D\resources\electron.asar\browser\rpc-server.js:145:17)
      at EventEmitter.<anonymous> (C:\projects\electron\out\D\resources\electron.asar\browser\rpc-server.js:362:7)
      at emitMany (events.js:127:13)
      at EventEmitter.emit (events.js:201:7)
      at WebContents.<anonymous> (C:\projects\electron\out\D\resources\electron.asar\browser\api\web-contents.js:232:13)
      at emitTwo (events.js:106:13)
      at WebContents.emit (events.js:191:7)
      at metaToValue (C:\projects\electron\out\D\resources\electron.asar\renderer\api\remote.js:217:13)
      at Object.remoteMemberFunction (C:\projects\electron\out\D\resources\electron.asar\renderer\api\remote.js:113:18)
      at C:\projects\electron\spec\api-browser-window-spec.js:1772:35
```

",1411,True,en,0
8515,17,1,11,Externals,CharlieHess,2017-02-06T16:55:33Z,109,30,8,11,"This PR fixes #6901. It leverages the fine work by @MarshallOfSound in https://github.com/electron/electron/pull/6858 to add support for custom executables and command-line arguments in `app.setLoginItemSettings`. This allows it to properly support Squirrel.Windows, which needs to point to Update.exe instead of `process.execPath`. I've updated the documentation to include an example.",386,False,en,0
8511,4,0,0,Internals,kevinsawicki,2017-01-27T01:10:22Z,41,16,4,1,"Currently `webContents.startDrag` will crash on macOS if called with an empty image.

This pull request updates `webContents.startDrag` to check for a non-empty image on macOS and raise an error when they happen.

Noticed this while trying to reproduce #8445

Crash report:


```
Crashing on exception: CALayer position contains NaN: [nan nan]

Application Specific Backtrace 1:
0   CoreFoundation                      0x00007fffc2d1de7b __exceptionPreprocess + 171
1   libobjc.A.dylib                     0x00007fffd7907cad objc_exception_throw + 48
2   CoreFoundation                      0x00007fffc2d9c99d +[NSException raise:format:] + 205
3   QuartzCore                          0x00007fffc8ad7f48 _ZN2CA5Layer12set_positionERKNS_4Vec2IdEEb + 152
4   QuartzCore                          0x00007fffc8ad80bd -[CALayer setPosition:] + 44
5   HIToolbox                           0x00007fffc2260f95 _ZL20UpdateLayerPositionsP14OpaqueCoreDrag + 662
6   HIToolbox                           0x00007fffc248f752 _Z29UnflockAnimationTimerCallbackP16__CFRunLoopTimerPv + 784
7   CoreFoundation                      0x00007fffc2c9d244 __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 20
8   CoreFoundation                      0x00007fffc2c9cecf __CFRunLoopDoTimer + 1071
9   CoreFoundation                      0x00007fffc2c9ca2a __CFRunLoopDoTimers + 298
10  CoreFoundation                      0x00007fffc2c943e1 __CFRunLoopRun + 2065
11  CoreFoundation                      0x00007fffc2c93974 CFRunLoopRunSpecific + 420
12  CoreFoundation                      0x00007fffc2cf5da5 CFMessagePortSendRequest + 965
13  HIServices                          0x00007fffc19a0b56 SendDragIPCMessage + 540
14  HIServices                          0x00007fffc199e011 CoreDragMessageHandler + 1321
15  CoreFoundation                      0x00007fffc2d34486 __CFMessagePortPerform + 598
16  CoreFoundation                      0x00007fffc2c9c6c9 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 41
17  CoreFoundation                      0x00007fffc2c9c641 __CFRunLoopDoSource1 + 465
18  CoreFoundation                      0x00007fffc2c94525 __CFRunLoopRun + 2389
19  CoreFoundation                      0x00007fffc2c93974 CFRunLoopRunSpecific + 420
20  HIToolbox                           0x00007fffc221fa5c RunCurrentEventLoopInMode + 240
21  HIToolbox                           0x00007fffc221f891 ReceiveNextEventCommon + 432
22  HIToolbox                           0x00007fffc221f6c6 _BlockUntilNextEventMatchingListInModeWithFilter + 71
23  AppKit                              0x00007fffc07c55b4 _DPSNextEvent + 1120
24  AppKit                              0x00007fffc0f3fd6b -[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 2789
25  AppKit                              0x00007fffc0a66012 NSCoreDragCGEventBlockingProc + 175
26  HIServices                          0x00007fffc1997ccc SampleMouseAndKeyboard + 145
27  HIServices                          0x00007fffc19979b1 DragInApplication + 53
28  HIServices                          0x00007fffc199696c CoreDragStartDragging + 486
29  AppKit                              0x00007fffc0a630cc -[NSCoreDragManager _dragUntilMouseUp:accepted:] + 1048
30  AppKit                              0x00007fffc0a60056 -[NSCoreDragManager dragImage:fromWindow:at:offset:event:pasteboard:source:slideBack:] + 1193
31  AppKit                              0x00007fffc0a5fb9c -[NSWindow(NSDrag) dragImage:at:offset:event:pasteboard:source:slideBack:] + 135
32  Electron Framework                  0x00000001044ba92e _ZN4atom13DragFileItemsERKNSt3__16vectorIN4base8FilePathENS0_9allocatorIS3_EEEERKN3gfx5ImageEP6NSView + 510
```

```
Thread 0 Crashed:: CrBrowserMain  Dispatch queue: com.apple.main-thread
0   libbase.dylib                 	0x0000000111474df1 base::debug::BreakDebugger() + 17
1   libbase.dylib                 	0x000000011149792f logging::LogMessage::~LogMessage() + 1391
2   libgfx.dylib                  	0x0000000115f5b957 gfx::Image::ToNSImage() const + 71
3   com.github.electron.framework 	0x000000010ef447a0 atom::DragFileItems(std::__1::vector<base::FilePath, std::__1::allocator<base::FilePath> > const&, gfx::Image const&, NSView*) + 384 (drag_util_mac.mm:49)
4   com.github.electron.framework 	0x000000010edfc6f5 atom::api::WebContents::StartDrag(mate::Dictionary const&, mate::Arguments*) + 2341 (atom_api_web_contents.cc:1338)
```",4491,True,en,0
8510,3,0,0,Internals,kevinsawicki,2017-01-26T17:08:52Z,19,1,2,0,"Noticed while trying to reproduce #8445 that several methods on `NativeImage` will crash if called on an empty image.

This pull request changes those methods to be consistent with what the other methods already do, return an empty array/buffer when the image is empty.",271,True,en,0
8509,1,1,0,Internals,kevinsawicki,2017-02-03T17:58:30Z,50,0,1,8,"This doc is meant to include the things we wouldn't want to forget to do on each Chrome upgrade.

It isn't meant to be a how-to guide for using new Chrome APIs or adapting to any C++ breakage in Chrome.",204,True,en,0
8507,4,0,0,Internals,kevinsawicki,2017-01-26T23:43:59Z,64,16,4,1,"This pull request redoes the patch we apply to node to configure error handling for things like `uncaughtException` events.

When I upgraded to Node 7.4.0 in #8406 the patch was ported forward but the diff lines were moved to a new function that isn't called by either `LoadEnvironment` or `CreateEnvironment` so they weren't getting properly set.

Node 6.5.0 patch: https://github.com/electron/node/commit/f0987748ce7b86a76b1ba70f349f71c315f1ebf2

Original Node 7.4.0 patch:  https://github.com/electron/node/commit/f1e3c10575cfe1b61469b8ef328e6730002ef491

New Node 7.4.0 patch: https://github.com/electron/node/commit/8416f53f558dcfbc9019575e785d03764620e7e1

The diff of the old patch vs the new patch is:

```diff
diff --git a/src/node.cc b/src/node.cc
index f80157e..66233d4 100644
--- a/src/node.cc
+++ b/src/node.cc
@@ -3415,6 +3415,13 @@ static void RawDebug(const FunctionCallbackInfo<Value>& args) {
 
 
 void LoadEnvironment(Environment* env) {
+  if (g_standalone_mode) {
+    env->isolate()->AddMessageListener(OnMessage);
+  }
+  if (g_upstream_node_mode) {
+    env->isolate()->SetFatalErrorHandler(OnFatalError);
+  }
+
   HandleScope handle_scope(env->isolate());
 
   TryCatch try_catch(env->isolate());
@@ -4500,14 +4507,10 @@ inline int Start(uv_loop_t* event_loop,
   if (isolate == nullptr)
     return 12;  // Signal internal error.
 
-  if (g_standalone_mode) {  // No indent to minimize diff.
   isolate->AddMessageListener(OnMessage);
-  } // g_standalone_mode
   isolate->SetAbortOnUncaughtExceptionCallback(ShouldAbortOnUncaughtException);
   isolate->SetAutorunMicrotasks(false);
-  if (g_upstream_node_mode) {  // No indent to minimize diff.
   isolate->SetFatalErrorHandler(OnFatalError);
-  } // g_upstream_node_mode
 
   if (track_heap_objects) {
     isolate->GetHeapProfiler()->StartTrackingHeapObjects(true);
```

Closes #8499 ",1912,True,en,0
8501,63,1,0,Internals,zcbenz,2017-02-06T19:17:21Z,1500,1705,160,12,"Debug build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Release build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Tests passing on:
- [x] OS X
- [x] Linux
- [x] Windows

Bugs
- [x] `window.print()` shows dialog but does not do printing.

Merge:
- [x] https://github.com/electron/libchromiumcontent/pull/258
- [x] https://github.com/electron/brightray/pull/272
",395,False,en,0
8497,1,0,0,Internals,kevinsawicki,2017-01-25T18:54:57Z,4,4,1,0,"This pull request enables the specs that verify crash reports are submitted correctly to a server on non-Travis macOS CI.

They were previously disabled on any CI node but they seemed reasonable to enable on the macOS Jenkins workers and they verify crash reports are submitted successfully and with the expected data",319,True,en,0
8496,1,0,0,Internals,kevinsawicki,2017-01-24T19:55:00Z,1,1,1,0,This gets `modules-spec.js` passing again after the latest node upgrade.,72,False,en,0
8495,2,0,0,Internals,kevinsawicki,2017-01-24T20:32:15Z,23,9,1,0,"This spec was a bit flaky on CI, looks like leaving full screen on a window transitioning to fullscreen is a no-op in macOS.

Currently ""not in fullscreen state"" is printed when running this spec.

Chrome has a related comment about it: https://cs.chromium.org/chromium/src/ui/views/cocoa/bridged_native_widget.mm?type=cs&q=%22not+in+fullscreen+state%22&sq=package:chromium&l=772

This pull request changes the spec to wait until full screening is complete before leaving.",478,True,en,0
8487,9,3,5,Externals,leethomas,2017-01-30T23:34:25Z,49,8,8,6,"Small change to implement https://github.com/electron/electron/issues/8153. I don't have a test for it because then I'd have to expose the [getter for `level`](https://developer.apple.com/reference/appkit/nswindow/1419511-level?language=objc) to verify that the levels were taken into account which would feel like a strange thing to do for just a test, unless you guys think it should be in the API.
",402,True,en,0
8483,1,0,0,Internals,kevinsawicki,2017-01-24T16:26:43Z,1,1,1,0,"Nothing major here, more just a test of CI and that this SHA was published correctly.

This mac builds at this version were built with XCode 8.2.1 to work around a linker error on 7.3.1.",188,True,en,0
8478,4,2,2,Externals,deepak1556,2017-01-25T17:46:41Z,22,9,2,2,Refs https://github.com/electron/electron/issues/8448,53,False,en,0
8475,1,2,0,Externals,shunkit,2017-01-23T17:35:01Z,3,3,2,0,,0,False,en,0
8472,1,1,0,Externals,javan,2017-01-23T17:34:43Z,0,2,1,0,`ERR_ABORTED` is suppressed now (https://github.com/electron/electron/pull/6201),80,False,en,0
8467,1,3,0,Internals,kevinsawicki,2017-01-23T17:27:34Z,1,1,1,1,"The crash reporter spec is failing locally because we have `process.throwDeprecation` set in the specs and¬†the latest release of `multiparty` is using `os.tmpDir()` which is deprecated in favor of `os.tmpdir()` in node 7.4.

This pull request upgrade multiparty to the commit that fixes this issue.

https://github.com/expressjs/node-multiparty/pull/140",358,True,en,0
8464,1,2,0,Externals,schwalbe10,2017-01-21T18:41:31Z,1,1,1,0,,0,False,en,0
8463,1,1,0,Externals,MarshallOfSound,2017-01-21T18:41:15Z,1,1,1,0,"Pretty simple, that path doesn't exist anymore.  Replaced it with a logical location üëç ",90,False,en,0
8456,2,1,0,Externals,yuya-oc,2017-01-20T16:04:01Z,2,1,1,0,"If the handler is not set, remote content can access to user's information without allowing the permission. e.g. UserMedia",122,False,en,0
8452,4,2,2,Externals,poiru,2017-01-24T18:53:34Z,29,5,2,4,Fixes #8407.,12,False,en,0
8451,1,0,0,Internals,kevinsawicki,2017-01-19T23:56:39Z,2,1,2,0,"Updates to the clang version used by Chrome 54

Refs #8406 ",61,True,en,0
8441,1,1,0,Externals,watilde,2017-01-19T00:17:32Z,1,1,1,0,"Minor tweaks to https://github.com/electron/electron/pull/8399. In `SetKiosk`, `SetFullScreen` doesn't need to be called if the window is already fullScreen.",157,False,en,0
8438,1,1,0,Internals,kevinsawicki,2017-01-18T23:12:51Z,14,0,1,0,"This code was removed in #7765 because it was thought to no longer be needed but looks like it is needed or else a full screen transparent window will have a white background on Windows.

/cc @liusy182

Refs https://github.com/electron/electron/issues/8321#issuecomment-273615701
Fixes #8439 ",297,True,en,0
8437,2,1,2,Internals,zeke,2017-01-18T23:13:30Z,3,2,1,0,"The linter uses `$npm_package_version` env var by default for determining Electron version, but when `create-dist.py` is not run from an npm script, this variable does not exist.

This PR updates the dist script to explicitly specify the version as a command line argument.

This passed the linter, but I'm still waiting for the build to complete for conclusive proof that this works.

@kevinsawicki ",406,True,en,0
8435,55,19,17,Externals,deepak1556,2017-03-15T09:36:51Z,1140,7,32,55,"The implementation intercepts any request to pdf resource load in main frame or sub frame (navigating to a pdf resource with `webContents.loadURL`, `window.location` apis). It will then generate a blob response of the already downloaded pdf data and redirect with it to the pdf viewer `chrome://pdf-viewer/` which is a webui page that is modified version of original extension from chromium. The pdf viewer page embeds the pepper plugin which is used to render the pdf and perform other UI actions. Currently the UI lives as a submodule at https://github.com/deepak1556/pdf-viewer. Would like feedback on the implementation, Thanks! 

- [x] blob url returns 404 when loaded from plugin
- [x] Allow download from pdf ui
- [x] Fix broken ninja rule for building `pdf_viewer_resources_map.o`
- [x] Fix failing pdf download spec
- [x] Propagate page zoom changes to the pepper plugin (Depends on https://github.com/electron/electron/pull/8537)
~~Fix loading pdf viewer for iframes (currently the parent webContents will host the viewer when sub frame tries to load a pdf resource)~~
- [x] Fix blob URL request being aborted after with chrome56 changes

Test:
- [x] Linux
- [x] Windows
- [x] Mac

Depends on:
https://github.com/electron/brightray/pull/270
https://github.com/electron/libchromiumcontent/pull/256
https://github.com/electron/libchromiumcontent/pull/263

Fixes https://github.com/electron/electron/issues/7366

![screenshot from 2017-01-18 23-13-15](https://cloud.githubusercontent.com/assets/964386/22075923/ec3a4fb8-ddd3-11e6-8fcb-185afa2c8406.png)


/cc @hokein @paulcbetts ",1611,True,en,0
8432,1,1,0,Externals,hrubilov,2017-01-18T17:02:19Z,1,1,1,0,,0,False,en,0
8430,5,1,0,Externals,ramya-rao-a,2017-01-24T22:08:37Z,25,6,1,6,,0,False,en,0
8428,1,0,0,Internals,kevinsawicki,2017-01-19T05:15:59Z,1,1,1,1,"Pulls in https://github.com/electron/libchromiumcontent/pull/255

Initial builds may fail since builds from that merge commit may still be queued up, will retrigger them once the libcc builds complete.

/cc @demian85",220,True,en,0
8421,8,3,0,Externals,oukan,2017-01-26T23:48:58Z,686,361,8,9,"Quick Start to zh-CN
Desktop Environment Integration to zh-CN
Online/Offline Event Detection to zh-CN",103,False,en,1
8417,1,5,0,Internals,kevinsawicki,2017-01-17T16:49:00Z,2,0,1,0,This pull request comments out some specs that are timing out pretty regularly on Travis but still will run on Jenkins builds.,126,False,en,0
8409,1,1,0,Externals,javan,2017-01-16T17:04:32Z,2,0,2,2,"It wasn't obvious to me how to add a test for this. I'm new to the codebase, and didn't see anything similar in `webview-spec.js`. Happy to add one if you point me in the right direction. Also happy to add docs, if you'd like.

Confirmed working locally:
<img width=""461"" alt=""screen shot 2017-01-13 at 5 08 35 pm"" src=""https://cloud.githubusercontent.com/assets/5355/21947434/322d72e0-d9b3-11e6-8564-9036fbd5bd62.png"">
",424,True,en,0
8406,39,8,0,Externals,alespergl,2017-01-19T21:33:49Z,530,428,79,6,"Complements [libchromiumcontent #254](https://github.com/electron/libchromiumcontent/pull/254)

Fixes #6571
Fixes #7814 
Fixes #8062
Fixes #8366
Fixes #8405",162,True,en,0
8404,3,10,0,Externals,bsclifton,2017-01-16T19:24:40Z,22,8,3,3,"Fixes https://github.com/electron/electron/issues/4573

cc: @zcbenz, @kevinsawicki, @zeke

## The problems this fixes
- The parent window tries to process non-client events for frameless. This results in borders being added (was not present with Chromium 53, but presented itself with Chromium 54)
- Because of a bug in the menu adjustment code, the web contents object ends up being incorrectly sized. This causes borders to be added when at a DPI > 100% on Chromium 54 (53 does not show them).

## History / description

I had originally submitted a ""fix"" with https://github.com/electron/electron/pull/7416, which @zcbenz accepted (and later reverted with https://github.com/electron/electron/pull/7461, because it failed the tests).  I believe this fix masked the issue in Chromium 53.

When upgrading our fork of Electron to Chromium 54 for Brave, we noticed various issues when DPI is greater than 100%.  I spent at least a week digging into the Chromium code and discovered the root causes.  Remembering the reverted PR above helped when troubleshooting.


",1079,True,en,0
8401,1,2,0,Externals,czipperz,2017-01-13T17:12:52Z,2,3,1,0,"If allocating memory for a `printing::PrintJobManager` fails, the `g_browser_process` variable will be left pointing to an invalid variable.  By reordering these, we simplify the code and remove the possibility for this edge case.",230,False,en,0
8400,1,1,0,Internals,kevinsawicki,2017-01-13T17:09:45Z,6,6,1,0,"Noticed the keyboard event links are broken to http://electron.atom.io/docs/api/web-contents/#event-before-input-event

Switched them from `()` to `[]` since they are footer links.",182,True,en,0
8399,2,1,4,Externals,watilde,2017-01-17T21:03:52Z,41,1,3,4,"Hello!

This patch fixes https://github.com/electron/electron/issues/8338, and I've added some of the test cases related to the patch.

Here is an example code:
+ https://gist.github.com/watilde/c47eba263e6048c93ebf7c90a5e60c00",232,True,en,0
8395,1,1,0,Externals,Arcath,2017-01-16T19:41:44Z,2,0,1,4,"As the title suggests adds [Squirrel Release Server](https://github.com/Arcath/squirrel-release-server) to the update servers list.

Squirrel Release Server is a low featured update server that supports Squirrel.Windows. It can handle delta updates very well and handles updates for our electron apps very well.",313,True,en,0
8391,3,5,0,Internals,kevinsawicki,2017-01-12T22:58:02Z,14,1,4,0,"Make `process.versions.electron` and `process.versions.chrome` read-only to match the behavior in node: https://github.com/nodejs/node/blob/334be0feba771a22568760d8160d5a4789218cff/src/node.cc#L3046-L3048

Refs #8083 ",219,True,en,0
8390,1,0,0,Internals,kevinsawicki,2017-01-13T18:57:57Z,1,1,1,1,"Pull in https://github.com/electron/brightray/pull/266

Refs https://github.com/electron/electron/issues/8336",111,True,en,0
8381,2,0,2,Internals,zeke,2017-01-12T22:58:56Z,5,4,2,1,"This is a follow-up to https://github.com/electron/electron/pull/8222

> I feel like linting shouldn't have side effects and it shouldn't be required to build and create a distribution.

Hopefully the `electron-docs-linter` binary is on the PATH here. ü§û ",261,True,en,0
8380,1,0,0,Internals,kevinsawicki,2017-01-11T16:42:33Z,3,3,1,0,Follow on to #7901 ,19,False,en,0
8377,4,2,1,Internals,kevinsawicki,2017-01-12T19:43:36Z,25,2,3,1,"This pull request seeks to prevent a crash when calling `preventDefault()` on a `new-window` event emitted from a sandboxed renderer process.

@zcbenz was this what you were thinking for https://github.com/electron/electron/issues/7490#issuecomment-255669721?

Fixes #7490",276,True,en,0
8376,1,1,0,Internals,kevinsawicki,2017-01-10T18:36:47Z,0,30,1,0,"Reverts electron/electron#8354

Looks like this causes the border/shadow to be incorrect windows with no vibrancy set.

### No vibrancy

![screen shot 2017-01-10 at 10 35 28 am](https://cloud.githubusercontent.com/assets/671378/21819437/881431de-d720-11e6-9238-56b8eaee7247.png)
",286,True,en,0
8371,1,0,0,Internals,kevinsawicki,2017-01-09T19:22:11Z,1,1,1,0,"Pulls in https://github.com/electron/brightray/pull/264

Refs https://github.com/electron/electron/issues/8203",112,True,en,0
8370,1,0,0,Internals,kevinsawicki,2017-01-09T18:41:51Z,12,0,1,0,Follow on spec for #7765,24,False,en,0
8369,1,2,0,Internals,kevinsawicki,2017-01-09T17:28:37Z,0,0,1,0,Noticed this wasn't executable by default.,42,False,en,0
8365,1,8,0,Externals,destan,2017-01-17T21:50:38Z,2,0,1,8,"This is very frustrating to find out via debugging, I think it should be in docs.",81,False,en,0
8357,14,9,8,Externals,CharlieHess,2017-01-25T22:23:58Z,90,1,4,19,"When Electron tries to call a method in a deceased renderer it throws an exception. This behavior makes the `remote` module a bit of a hornet's nest, because it's quite easy to listen to events from the main process but often non-trivial to clean them up properly. Instead of crashing, we could dig into the underlying `EventEmitter` and remove the listeners that are hooked to `callIntoRenderer`. We could also display a `console.warn` so that the user knows they did something bad and still has a chance to fix it.

In addition this PR adds the names of the remote events to the error message, to make them easier to find. Increasingly often methods are wrapped in higher-level abstractions such as `Promise` or `Observable` so `meta.location` is not enough information on its own. The new warning looks like:

```
Attempting to call a function in a renderer window that has been closed or released.
Function provided here: remote-event-handler.html:11:33
Remote event names: remote-handler, other-remote-handler
```

",1030,True,en,0
8355,4,1,0,Externals,oukan,2017-01-16T19:40:20Z,120,48,3,10,"Using Selenium and WebDriver to zh-CN	
Using Pepper Flash Plugin to zh-CN		
Using Widevine CDM Plugin to zh-CN",112,False,en,0
8354,3,4,1,Externals,gerhardberger,2017-01-09T19:12:03Z,30,0,1,3,"This PR adds a workaround to smooth the corners of the vibrancy view.

Fixes #8305 ",85,True,en,0
8348,44,8,0,Internals,kevinsawicki,2017-01-17T16:47:45Z,667,308,23,11,"This pull request adds support for running the `preload` script and Electron APIs in a separate, isolated JavaScript context from the main JavaScript context of the loaded page.

This ensures the loaded page can't tamper with any JavaScript built-ins (such as `Array.prototype.push`, `JSON.parse`, etc.) that the preload script and Electron APIs make use of.

The `preload` script still has full access to the DOM, `document`, and `window` globals via secure proxies that prevent leakage across the contexts. This is provided by reusing Chrome's built-in support for [content scripts](https://developer.chrome.com/extensions/content_scripts#execution-environment).

This option is completely opt-in and no existing behavior is changed.

## Example

Shown below is an application that loads a page (possibly remote/untrusted) but wants to open any clicked links in an external browser using Electron's `shell` API.

This example also shows how variables can be injected into the loaded page and how the preload script can listen for messages from the page using `window.postMessage`.

### `main.js`

```js
const {app, BrowserWindow} = require('electron')
const path = require('path')

let window

app.once('ready', () => {
  window = new BrowserWindow({
    webPreferences: {
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js')
    }
  })
  window.loadURL(`file://${__dirname}/index.html`)
})
```

### `preload.js`

```js
const {shell, webFrame} = require('electron')
const path = require('path')

// Set a variable in the page before it loads
webFrame.executeJavaScript('window.foo = ""foo"";')

// The loaded page will not be able to access this, it is only available
// in this context
window.bar = 'bar'

document.addEventListener('DOMContentLoaded', () => {
  // Will log out 'undefined' since window.foo is only available in the main
  // context
  console.log(window.foo)

  // Will log out 'bar' since window.bar is available in this context
  console.log(window.bar)

  document.body.addEventListener('click', (event) => {
    // Open clicked links externally
    if (event.target.tagName === 'A') {
      shell.openExternal(event.target.href)
      event.preventDefault()
    }
  })
})

window.addEventListener('message', (event) => {
  // Beep when the page requests it
  if (event.data === 'beep') {
    shell.beep()
  }
})
```

### `index.html`

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset=""utf-8"">
    <title>A Remote Page</title>
    <script>
      // Will log out 'foo' since window.foo is only available in this context
      console.log(window.foo)

      // Will log out 'undefined' since window.bar is only available in the isolated
      // context
      console.log(window.bar)
    </script>
  </head>
  <body>
    <a href=""https://github.com"">Click me</a>
    <button onclick=""window.postMessage('beep', '*')"">Beep!</button>
  </body>
</html>
```

Depends on https://github.com/electron/libchromiumcontent/pull/251

/cc @electron/maintainers ",3101,True,en,0
8347,1,2,0,Externals,Rastaban,2017-01-05T22:53:12Z,3,3,1,0,"These were found by the C++ compiler group when doing ""Real world code""
build tests using /permissive-.  We are sharing these with you to help clean up
your code before the new version of the compiler comes out.  For more information on
/permissive- see https://blogs.msdn.microsoft.com/vcblog/2016/11/16/permissive-switch/.
In paticular, see the ""Do not treat copy initialization as direct initialization""
section of the blog.",432,False,en,0
8343,6,0,2,Externals,oukan,2017-01-06T07:32:43Z,166,51,4,1,Debugging the Main Process,26,False,en,0
8341,3,3,1,Internals,kevinsawicki,2017-01-09T17:17:40Z,42,3,3,4,"This allows `window.alert` and `window.confirm` to work from `<iframe>` tags and sandboxed windows.

Refs #2644 ",114,True,en,0
8340,5,0,0,Internals,kevinsawicki,2017-01-09T16:29:57Z,64,15,4,4,"Setting `options.parent` in a `new-window` event listener can currently lead to stack overflow errors when merging the options since `webContents` has a reference to itself.

This pull request follows the pattern of https://github.com/electron/electron/pull/6442 for tracking visited objects and nulling out cycles instead of overflowing.

Closes #8202 ",357,True,en,0
8335,2,1,0,Externals,liuderchi,2017-01-04T17:00:07Z,24,0,1,0,translate repl.md into zh-TW,28,False,en,0
8326,1,1,0,Externals,nicmitchell,2017-01-04T16:59:34Z,1,1,1,1,,0,False,en,0
8319,2,1,0,Externals,oukan,2017-01-04T16:59:02Z,120,27,2,3,application-distribution to zh-CN,33,False,en,0
8318,2,0,2,Externals,oukan,2017-01-01T15:57:54Z,80,3,1,0,mac-app-store-submission-guide to zh-CN,39,False,en,0
8313,4,0,4,Externals,oukan,2016-12-31T08:39:33Z,4,4,2,0,translated supported platforms to zh-CN,39,False,en,0
8312,1,1,0,Externals,oukan,2016-12-31T02:32:20Z,1,0,1,0,add glossary page link to readme,32,False,en,0
8311,3,0,6,Externals,oukan,2016-12-30T13:48:16Z,69,16,1,0,API process Translated into zh-CN,33,False,en,0
8309,1,0,0,Internals,kevinsawicki,2016-12-29T23:51:39Z,48,48,10,0,"The docs had cases of both of the following parameter documentation:

- `name` String - (optional) A description.
- `name` String (optional) - A description.


This pull request normalizes on the latter since it was the majority format in use already.

Also updates the styleguide to explicitly document the preferred format.",333,True,en,0
8308,3,2,0,Internals,kevinsawicki,2017-01-06T17:55:07Z,35,0,2,7,"This pull requests adds a new option to `dialog.showMessageBox` API called `normalizeAccessKeys` that, when `true`, will convert all the button labels to have the correct special character access keys on each platform.

This option is off by default to not break existing apps. It could be switched to `true` by default in 2.0.

`&` is used as the default access key since that is the [Window standard](https://msdn.microsoft.com/en-us/library/190kw3at.aspx). That value is then converted to `_` on Linux since that is the [GTK convention](https://developer.gnome.org/gtk3/unstable/GtkButton.html#gtk-button-new-with-mnemonic).

`&&` can be used for escaped values.

Access keys are removed when on macOS since there isn't support for them there.

Below is a table of the normalized values when this option is specified:

| Button Text | macOS | Windows | Linux |
| :------------- | :------------- | :------------- | :------------- |
| `Hello`       | `Hello`       | `Hello` | `Hello` |
| `He&llo`       | `Hello`       | `He&llo` | `He_llo` |
| `Contact R&&D` | `Contact R&D` | `Contact R&&D` | `Contact R&D` |
| `Contact R&&&D` | `Contact R&D` | `Contact R&&&D`| `Contact R&_D` |
| `Contact R&&&&D` | `Contact R&&D` | `Contact R&&&&D`| `Contact R&&D` |
| `Chee&rs ^_^` | `Cheers ^_^` | `Chee&rs ^_^`| `Chee_rs ^__^` |


/cc @damieng just want to confirm with you this looks good for Atom's use cases.

Closes #7517",1441,True,en,0
8306,1,0,0,Internals,kevinsawicki,2016-12-29T21:33:07Z,3,1,1,0,:memo: Link to tutorial from option description.,48,False,en,0
8303,2,0,3,Externals,ldehai,2016-12-30T15:00:35Z,21,22,1,1,fix some expression with more coherent way,42,False,en,0
8298,1,0,0,Internals,kevinsawicki,2016-12-29T21:31:10Z,9,5,2,0,"Previously it was configured after the call to `LoadURLWithParams` but this seems to cause it to not get set correctly on reload.

Setting it via the `RenderViewCreated` seems to cause it to be correctly set after reloads.

Closes #7426",240,True,en,0
8295,1,1,0,Internals,kevinsawicki,2016-12-28T21:42:35Z,6,0,2,0,"Allows the `cursive` and `fantasy` font families to be configurable via the web preferences.

Closes #8286",108,True,en,0
8285,1,1,0,Externals,hokein,2016-12-26T18:23:18Z,6,3,1,0,cc @zeke.,9,False,eu,0
8284,6,5,8,Externals,x-yao,2016-12-28T08:13:37Z,102,4,5,2,And fix some chinese incorrect words,36,False,en,0
8281,1,1,0,Externals,abouthiroppy,2016-12-28T21:41:52Z,1,1,1,3,The link of electron-jp is broken ;(,36,False,en,0
8269,1,1,0,Externals,drewchandler,2016-12-22T18:07:32Z,1,1,1,0,It won't work if you use include the space that is currently in the docs.,73,False,en,0
8268,1,0,0,Internals,kevinsawicki,2016-12-22T17:32:44Z,12,11,1,0,"These three are more production than development since running as node is common and the window menu bar could be used based on the app's UI preference.

Refs https://github.com/electron/electron/issues/8260#issuecomment-268737179",232,True,en,0
8267,1,1,0,Externals,cesarandreu,2016-12-22T04:49:37Z,1,1,1,0,,0,False,en,0
8265,2,3,0,Externals,thorbenegberts,2016-12-22T16:01:33Z,1,1,1,0,Link to Quick Start on http://electron.atom.io/docs/tutorial/about/ results in 404,82,False,en,0
8259,1,1,0,Externals,mawie81,2016-12-21T17:40:14Z,1,1,1,0,Fixes a broken link in screen documentation,43,False,nl,0
8258,2,1,0,Externals,deepak1556,2017-01-06T00:47:45Z,52,0,2,15,Fixes #8223 ,12,False,en,0
8254,2,0,0,Internals,kevinsawicki,2016-12-28T21:40:32Z,30,0,4,7,"Closing a window from a `will-navigate` listener but not calling `event.preventDefault()` would crash the app because the URL would continue to load in a destroyed web contents.

This adds a check to see if the web contents was marked as destroyed after the `will-navigate` event is emitted.

Closes #4374",309,True,en,0
8252,2,0,0,Internals,kevinsawicki,2016-12-22T17:34:07Z,11,2,1,1,"Use a `NativeWindowObserver` to ensure a closed window is not accessed when the dialog completes and it is trying to re-enable the parent dialog.

Closes #7838",161,True,en,0
8250,3,3,1,Externals,gerhardberger,2016-12-29T17:10:15Z,9,0,2,8,"This PR creates the browser window in offscreen mode always without a frame, since in offscreen mode the frame is not accessible, so this way, the window size will be consistent. #8224",184,False,en,0
8249,1,0,0,Internals,kevinsawicki,2016-12-21T18:58:15Z,3,3,1,0,"Same approach as upstream Chrome uses since `[NSScreens screens]` can be empty at time.

https://codereview.chromium.org/1380083005

Closes #8064 ",150,True,en,0
8248,1,0,0,Internals,kevinsawicki,2016-12-21T17:40:31Z,4,1,1,0,Follow on to #7947 ,19,False,en,0
8243,2,1,0,Externals,x-yao,2016-12-20T17:09:02Z,271,1,3,0,add systemPreferences API and net API docs translation whith  Simplified Chinese,80,False,en,0
8242,1,1,0,Externals,DustinX,2016-12-20T04:05:29Z,1,2,1,0,,0,False,en,0
8240,1,1,0,Internals,zeke,2016-12-20T17:13:02Z,2,2,1,0,"The doc is in the same directory, so the `structures/` prefix is not needed.",76,False,en,0
8238,1,0,0,Internals,kevinsawicki,2016-12-19T18:48:28Z,13,10,6,0,Noticed a few return types weren't linking to their type docs.,62,False,en,0
8235,1,1,0,Externals,x-yao,2016-12-19T17:22:25Z,13,9,2,0,update some electron-faq.md code demo in Simplified Chinese docs.And fix a little words in README.md.,101,False,en,0
8229,1,5,0,Internals,zeke,2016-12-20T04:03:52Z,1,1,1,1,"A followup to https://github.com/electron/electron/pull/7971

> Yarn doesn't run post-install scripts (by design apparently) which lots of Electron packages use (i.e. node-gyp-pre), and because it's p broken on Windows, we probably shouldn't suggest that people use it.

cc @paulcbetts ",290,True,en,0
8225,1,2,0,Externals,Golasowski,2016-12-20T17:09:39Z,99,0,1,3,,0,False,en,0
8207,1,1,0,Externals,philwyett-hemi,2016-12-21T21:38:09Z,86,30,6,6,"* Update build instructions to correctly reflect python version on CentOS
  that has Python 2.6.
* Correct Fedora package install command. Fedora now uses 'dnf' not 'yum'.
* Add RHEL / CentOS section that does use 'yum' for package install.",243,False,en,0
8201,1,0,0,Internals,kevinsawicki,2016-12-13T18:43:05Z,37,37,1,0,Removes lint from #8199,23,False,en,0
8199,1,1,0,Externals,Casimodo,2016-12-13T16:30:57Z,247,0,1,0,I help you for translate,24,False,en,0
8192,1,1,0,Externals,rhysd,2016-12-13T16:30:28Z,1,1,1,0,,0,False,en,0
8189,2,0,0,Internals,kevinsawicki,2016-12-13T00:44:16Z,3,3,2,0,`null` was handled but `undefined` results in a `Cannot read property 'constructor' of undefined` error.,104,False,en,0
8187,1,1,0,Externals,danhp,2016-12-12T21:52:17Z,7,7,2,0,Closes #1868,12,False,en,0
8186,1,0,0,Externals,devjin0617,2016-12-12T18:06:28Z,52,0,1,0,,0,False,en,0
8178,1,1,0,Externals,lgeiger,2016-12-12T17:29:28Z,10,0,1,1,"[`prebuild`](https://github.com/mafintosh/prebuild) is now able to provide prebuilt binaries of native Node modules against Electron headers.

If you like to try it, [`zeromq.js`](https://github.com/zeromq/zeromq.js) already ships prebuilts for Electron.
We are using the prebuilt binaries successfully in [nteract](https://github.com/nteract/nteract) and the Atom package [Hydrogen](https://github.com/nteract/hydrogen).

/cc @mafintosh @juliangruber @ralphtheninja @rgbkrk",479,True,en,0
8177,1,1,0,Externals,Geo1088,2016-12-12T17:28:46Z,5,5,1,2,"Minor docs fix. Without indentation, the items underneath this have their numbering started over.",97,False,en,0
8176,1,0,0,Internals,kevinsawicki,2016-12-10T03:24:59Z,1,1,1,0,Pulls in https://github.com/electron/libchromiumcontent/pull/248,64,False,en,0
8175,7,2,13,Externals,gerhardberger,2016-12-14T21:24:45Z,67,8,4,4,"This PR adds support to `nativeImage.createFromBuffer` for creating images from bitmap buffers. #7950 

We cannot obtain size from the buffer, it has to be supplied as well, so I added two optional parameters to the method.",225,True,en,0
8167,1,1,0,Externals,seanchas116,2016-12-12T18:05:47Z,2,2,1,4,"This changes makes sure corners of modal windows become sharp in Mac.
Fix #8131 ",81,False,en,0
8165,1,4,0,Externals,geoff-addepar,2016-12-12T17:26:52Z,22,0,2,4,Closes #7984,12,False,en,0
8159,2,1,2,Externals,seanchas116,2016-12-12T21:50:42Z,10,0,2,5,"Fix for https://github.com/electron/electron/issues/7920, using TRACE_EVENT API of Chromium.

Looks like below in [this example](https://github.com/seanchas116/electron-testings/tree/master/timeline-ipc)

![image](https://cloud.githubusercontent.com/assets/1025246/20965885/1716d1be-bcbb-11e6-9032-4bc7bdf685f7.png)
",321,True,en,0
8158,1,1,0,Externals,jdfwarrior,2016-12-07T18:28:34Z,6,0,1,0,"There is no description of what the browserWindow argument actually does in the documentation. It only lists that it's optional. Without it, the user can accidentally open numerous dialogs because they can go back to the previous window and click to open another dialog. By setting the browserWindow argument, that window becomes modal and can't be acted upon until the user closes the dialog.",393,False,en,0
8157,1,0,0,Internals,kevinsawicki,2016-12-07T18:28:00Z,13,0,1,0,Updates the docs to show how to load a URL with URL-encoded `POST` data.,72,False,en,0
8156,1,1,2,Externals,sindresorhus,2016-12-12T17:39:08Z,3,2,3,5,"According to the Apple docs, the `NSDockWindowLevel` constant is deprecated: https://developer.apple.com/reference/appkit/nsdockwindowlevel?language=objc",153,False,en,0
8155,1,1,0,Externals,salomvary,2016-12-07T18:29:43Z,1,0,1,0,This was not obvious to me until I saw it in action (actually expected the opposite).,85,False,en,0
8152,1,0,0,Internals,kevinsawicki,2016-12-06T21:54:55Z,1,1,1,0,Cleans up a spec from #8110 that was incorrectly showing the window in the spec accidentally left in for debugging purposes.,124,False,en,0
8148,3,0,0,Internals,kevinsawicki,2016-12-06T17:54:49Z,10,7,1,0,"CI specs are occassionally failing with:

```
not ok 117 browser-window module dev tool extensions works when used with partitions
  Error: Cannot call function 'executeJavaScript' on missing remote object 371
  Error: Cannot call function 'executeJavaScript' on missing remote object 371
      at throwRPCError (/Users/jenkins/Home/workspace/electron-osx-x64/out/D/Electron.app/Contents/Resources/electron.asar/browser/rpc-server.js:143:17)
      at EventEmitter.<anonymous> (/Users/jenkins/Home/workspace/electron-osx-x64/out/D/Electron.app/Contents/Resources/electron.asar/browser/rpc-server.js:339:7)
      at emitMany (events.js:127:13)
      at EventEmitter.emit (events.js:201:7)
      at WebContents.<anonymous> (/Users/jenkins/Home/workspace/electron-osx-x64/out/D/Electron.app/Contents/Resources/electron.asar/browser/api/web-contents.js:231:13)
      at emitTwo (events.js:106:13)
      at WebContents.emit (events.js:191:7)
      at metaToValue (/Users/jenkins/Home/workspace/electron-osx-x64/out/D/Electron.app/Contents/Resources/electron.asar/renderer/api/remote.js:217:13)
      at remoteMemberFunction (/Users/jenkins/Home/workspace/electron-osx-x64/out/D/Electron.app/Contents/Resources/electron.asar/renderer/api/remote.js:113:18)
      at /Users/jenkins/Home/workspace/electron-osx-x64/spec/api-browser-window-spec.js:1609:35
```

This pull request clears the interval before `done()` is called so the remote objects won't get accessed after the window has been destroyed.",1509,True,en,0
8147,1,0,0,Internals,kevinsawicki,2016-12-06T18:36:25Z,1,1,1,0,"Pulls in https://github.com/electron/libchromiumcontent/pull/247 which backports a Chrome 56 patch to Chrome 53 to fix issues on Linux where key events were reporting the wrong key when Control was pressed on certain keyboard layouts.

Closes #8116",250,True,en,0
8144,3,0,0,Internals,kevinsawicki,2016-12-06T19:05:16Z,49,7,2,0,This fixes any issue where `BrowserWindow.fromDevToolsWebContents` would through an error if any of the windows didn't have the dev tools already opened.,153,False,en,0
8143,8,3,3,Externals,poiru,2016-12-14T18:05:32Z,161,2,8,8,"Embedding arbitrary web content is problematic when it comes to keyboard
shortcuts because:

* Web content can steal app shortcuts (see e.g. brave/browser-laptop#4408)

* Blocked web content (e.g. a focused <webview> performing expensive
computation) will also prevent app shortcuts from firing immediately

The new before-input-event event can be used to overcome these issues by
always handle certain keyboard events in the main process.

Note that this requires electron/brightray#261 to compile.

Fixes #7586",525,False,en,0
8142,15,1,0,Internals,kevinsawicki,2016-12-06T22:12:25Z,194,91,23,1,"This pull request backports several fixes currently on master to 1.3.

- [x] Update Linux CI scripts https://github.com/electron/electron/pull/8105
- [x] Fix issue incorrectly deferencing remote objects on reload https://github.com/electron/electron/pull/8110
- [x] Move alert/confirm/close implementations to main process https://github.com/electron/electron/pull/8120
- [x] Clean up CoffeeScript apply helpers by using spread syntax https://github.com/electron/electron/pull/8122
- [x] Backport Chrome 56 Linux key event fix https://github.com/electron/electron/pull/8147",579,True,en,0
8137,5,1,0,Externals,deepak1556,2016-12-12T21:34:24Z,51,1,4,9,"- [x] Add spec

Depends on https://github.com/electron/brightray/pull/262",75,True,en,0
8134,4,2,6,Externals,deepak1556,2016-12-15T16:31:12Z,102,31,4,12,Fixes #8088 ,12,False,en,0
8123,1,0,0,Internals,kevinsawicki,2016-12-02T17:10:02Z,105,77,1,0,"Currently the `options` parameter passed to `dialog` APIs is written to in certain cases to add default values which can lead to unsurprising results in the calling code.

This pull request updates those APIs to not modify any of the specified parameters.

Also removes the CoffeeScript leftovers in `dialog.js`. ‚òïÔ∏è ",324,True,en,0
8122,4,1,1,Internals,kevinsawicki,2016-12-02T01:15:22Z,60,44,15,0,"This cleans up the CoffeeScript leftovers where `apply` would be called to mimic the spread operator. ‚òïÔ∏è 

This is no longer needed since Electron can use the spread syntax natively when invoking the methods.

There are still a few valid cases for using it which this pull request does not update.

/cc @groundwater ",326,True,en,0
8121,2,0,1,Internals,kevinsawicki,2016-12-01T22:55:49Z,82,2,2,0,This is extracted from #8120 and adds some basic dialog specs that test the error cases.,88,False,en,0
8120,6,0,2,Internals,kevinsawicki,2016-12-05T17:29:11Z,69,48,6,4,"This pull request switches `window.alert`/`.confirm`/`.close` to be implemented completely in the main process instead of over the `remote` API. This prevents it from being impacted by #7351 and makes it consistent with how `window.open`/`window.opener` APIs are implemented.

This is not intended to change any of behavior of the current APIs.

- [x] Implement `window.alert` via `ipcRenderer.sendSync`
- [x] Implement `window.confirm` via `ipcRenderer.sendSync`
- [x] Implement `window.close` via `ipcRenderer.sendSync`",527,True,en,0
8115,1,1,0,Externals,ArisLittle,2016-12-01T16:25:39Z,1,1,1,0,a more ‚ÄòÂÖÅËÆ∏‚Äô word should be removed,42,False,en,0
8110,3,0,0,Internals,kevinsawicki,2016-12-02T21:40:21Z,63,7,3,1,"When a `webContents` is navigated or reloaded, the remote objects it was referencing are cleared from the objects registry via a `render-view-deleted` event listener.

Previously this was registered using a `.once` but it looks like render views are deleted asynchronously so sometimes the new render view would be created and the listener registered before the previous delete event fired. This would cause both to get deleted when the old one was eventually deleted since they were both listening and there was no process id checks done for the deleted render view.

This pull request switches to using a `.on` listener and waiting for the deleted render view process id to match the process id being listened to which ensures the registry is only cleared when the proper render view has been deleted.

Refs #7351 
Refs https://github.com/electron/electron/pull/6857",875,True,en,0
8109,11,13,21,Externals,ramya-rao-a,2017-01-24T22:02:48Z,127,55,7,54,"@kevinsawicki 

This is the first draft of the fix (for #7474) that I propose for child node processes to be able to initialize crash reporter. 
It has been tested only in Mac for now, I wanted to get your initial thoughts before I move on to Windows and Linux.

**Note**: Changes to the files `index.html`, `default_app.js` and the new file `forkedProcess.js` are here only for testing. Will of course remove them from the final draft. ",442,True,en,0
8107,6,1,5,Externals,deepak1556,2016-12-09T18:08:03Z,204,2,10,8,Fixes #8089 ,12,False,en,0
8105,2,0,0,Internals,kevinsawicki,2016-11-30T17:44:46Z,38,0,4,0,"This pull request moves code from our Jenkins XML templates to this repository to make them easier to manage and re-deploy.

It does not make any changes to how or what gets built.",182,True,en,0
8098,7,0,0,Internals,kevinsawicki,2016-11-30T17:06:37Z,11,47,10,0,"This pull request unifies the various timeouts used across the specs to hopefully get them passing more consistently on CI (and locally).

- [x] Default local spec timeout to 10 seconds
- [x] Default CI spec timeout to 30 seconds
- [x] Remove explicit calls to timeout that are unneeded because of the higher default timeout
- [x] Unify on 1 or 2 minute timeout for lengthiest specs",387,True,en,0
8097,4,1,0,Externals,guillaumeguerin,2016-11-30T17:49:36Z,94,5,3,0,,0,False,en,0
8096,6,1,0,Internals,kevinsawicki,2016-11-29T20:53:13Z,31,23,6,0,"Calling `this.skip()` from a spec causes the `after`/`afterEach` blocks to not run meaning windows aren't destroyed in skipped specs.

This can be used again if/when https://github.com/mochajs/mocha/pull/2571 is merged.

This pull request also asserts only one open window after specs finish to ensure windows aren't leaking.",329,True,en,0
8095,69,32,4,Externals,MarshallOfSound,2017-03-03T22:37:57Z,1288,2,26,94,"So here goes üëç 

I've still got to add docs for all this but basically this PR adds support for

* `window.setTouchBar(bar)`
* `new TouchBar([...])`
* `new TouchBarButton(...)`
* `new TouchBarColorPicker(...)`
* `new TouchBarGroup(...)`
* `new TouchBarLabel(...)`
* `new TouchBarPopover(...)`
* `new TouchBarSpacer(...)`
* `new TouchBarSlider(...)`

Still to do

* [ ] ~Add support for the ""customizable"" attribute (pretty major thing missing but it requires some good docs and some magical techniques)~
* [x] Move item classes to their own files instead of being static classes on `TouchBar`
* [x] Document all the things
* [x] ~Implement a `NSCustomTouchBarItem` with an `NSScrubber` as the view (this is quite a big task, not sure if it is even possible to declare at runtime)~
* [x] ~Implement a ` NSCustomTouchBarItem` with an  [`NSSegmentedControl`](https://developer.apple.com/reference/appkit/nssegmentedcontrol?language=objc) as the view!~
* [x] Test? Somehow? Idk?
* [x] Ensure this doesn't break on older macOS versions. (Test on El Capitan)
* [x] API Feedback / changes
* [x] Remove modifications to default_app
* [x] Fix linting üòÜ 
* [x] Add methods to manually set the slider value
* [x] Add a way to create the ""spacer"" touchbar items

Closes #7781 ",1299,True,en,0
8092,2,1,2,Externals,poiru,2016-11-29T21:36:58Z,45,0,8,1,"The `disableAutoHideCursor` BrowserWindow option can be used to control
auto-hiding behavior when the window is created. This new API is needed
to dynamically change the behavior after the fact.",196,False,en,0
8086,2,2,1,Externals,deepak1556,2016-11-29T21:31:21Z,13,0,1,2,"Result of the operation is required to complete the `remove from workspace` menu item action in the navigator view. https://cs.chromium.org/chromium/src/third_party/WebKit/Source/devtools/front_end/sources/NavigatorView.js?l=649-658

Fixes #7960 ",248,True,en,0
8085,2,2,0,Externals,deepak1556,2016-12-12T21:07:14Z,57,20,2,15,"Fixes #8079 

Depends on https://github.com/zcbenz/native-mate/pull/7",71,True,en,0
8084,1,1,3,Externals,poiru,2016-11-29T22:07:35Z,170,12,7,2,"This API can be used to e.g. enable key repeat by setting
`ApplePressAndHoldEnabled` to `false` (see also #47).",112,False,en,0
8082,1,1,0,Externals,aaronang,2016-11-28T23:39:07Z,6,4,1,2,"I am new to Electron and was therefore reading the [Quick Start](http://electron.atom.io/docs/tutorial/quick-start/) guide. Eventually, I ended up at the [Application Distribution](http://electron.atom.io/docs/tutorial/application-distribution/) page, which was a bit confusing. In fact, I did not know where `electron/` (in e.g. `electron/resources/app`) was located. Finally, after some Googling I discovered that I had to download the prebuilt binaries, which in my opinion could be made more explicit in the documentation. Therefore, in this patch I attempt to solve this.

I am looking forward to hearing your feedback :grimacing: ",638,True,en,0
8078,5,3,0,Externals,MarshallOfSound,2016-12-21T21:39:53Z,67,43,14,26,So I found these unstaged changes on my local in an old submodule of `electron-docs-linter` üòÜ ,97,False,en,0
8072,2,1,0,Externals,ramya-rao-a,2016-11-28T23:37:21Z,14,8,1,4,Updating docs with clarifying information about the crash reporter in Mac as per the findings in #7474 #8045,108,False,en,0
8071,1,0,0,Internals,kevinsawicki,2016-11-23T22:36:18Z,15,12,3,0,"`npm run lint-api-docs-js` is currently failing with:

```
Linting file 315 of 315


   jp/tutorial/desktop-environment-integration.md
         95:3:     Expected indentation of 4 spaces but found 2.

   pt-BR/tutorial/desktop-environment-integration.md
         75:3:     Expected indentation of 4 spaces but found 2.

   zh-CN/tutorial/desktop-environment-integration.md
         85:3:     Expected indentation of 4 spaces but found 2.
```",455,True,en,0
8070,1,0,0,Internals,kevinsawicki,2016-11-23T22:31:32Z,1,1,1,0,"standard@8.6.0 is throwing linter errors about these on master currently:

```
standard: Use JavaScript Standard Style (http://standardjs.com)
  /Users/kevin/github/electron/lib/common/api/callbacks-registry.js:32:17: Unnecessary escape character: \/.
  /Users/kevin/github/electron/lib/common/api/callbacks-registry.js:32:20: Unnecessary escape character: \).
```",370,True,en,0
8065,2,2,0,Externals,DanTheMan827,2016-11-23T17:10:48Z,1,1,1,0,"The language code for Aragonese was the same one used for Arabic.

I'm not sure if this just affects the docs or if it is in the code as well.",144,True,en,0
8061,5,12,7,Externals,deepak1556,2016-12-09T17:39:14Z,245,15,9,16,"- [x] Add spec

Fixes https://github.com/electron/electron/issues/7720

/cc @idododu",88,True,en,0
8057,1,0,0,Externals,MarshallOfSound,2016-11-23T03:18:37Z,5,1,2,0,"Just two quick fixes that came up while testing the TS definition.

The event on `webContents` appeared to be undocumented but perfectly functional?

/cc @zeke ",164,True,en,0
8056,1,2,0,Internals,kevinsawicki,2016-11-22T21:30:08Z,10,11,1,0,"Looks like the mocha check that prevents specs from passing when calling `.only` on CI has regressed, possibly due to the Mocha upgrade in #7505.

This pull request adds it back by check the `runner.hasOnly` flag which is set when `it.only` or `describe.only` is called.

This check was originally added in https://github.com/electron/electron/pull/5975.",358,True,en,0
8054,5,1,0,Externals,LuisHsu,2016-11-22T23:59:28Z,499,0,3,0,"* tutorial/debugging-main-process-node-inspector.md

* tutorial/desktop-environment-integration.md

I forgot to add [ci skip] in my commit, so the former pull request didn't pass ci.",186,True,en,0
8049,1,3,0,Externals,MarshallOfSound,2016-11-27T06:29:49Z,16,0,2,4,"Closes #8039

Basically users might not be aware that removing all listeners kills Electron internal handlers (which should never really be removed).  They should always specify event names to remove listeners for.",216,True,en,0
8047,9,2,0,Externals,MarshallOfSound,2016-11-22T22:01:50Z,90,13,4,0,"These reverts #7766 

It fixes #7630 in a different way and also fixes #7951.",79,True,en,0
8046,2,1,2,Externals,bengotow,2016-11-22T15:50:13Z,3,2,1,0,"We got bit by a nasty bug today - if you change your app's info.plist `NSPrincipalClass` to something other to `AtomApplication` (We set it to NylasApplication via a bad find-replace), everything works except open-url is never fired. Add a small reference to the docs so folks know to check this key.",300,False,en,0
8043,1,0,0,Internals,kevinsawicki,2016-11-22T15:49:11Z,2,2,1,0,"Noticed the `crashReporter` docs still had the hyphenated module name, now updated.",83,False,en,0
8041,9,3,1,Externals,paulcbetts,2016-11-22T17:08:00Z,86,6,8,0,"The current behavior of `setZoomLevelLimits` affects the visual-based zoom (i.e. no layout changes) despite all of the rest of the methods affecting layout-based zoom. While this zoom survives in-page navigations such as iframes being loaded, it also causes pages to be cut-off.

The ideal fix for this would to be to just change the behavior of this method but that would be a breaking change. This PR introduces a new zoom level limit method to limit layout-based zoom.

This allows you to work around #6958 by doing the following:

```js
function setZoomHarder(wv, zoomLevel) {
  wv.setLayoutZoomLevelLimits(zoomLevel, zoomLevel);
  wv.setZoomLevel(zoomLevel);
}
```

Refs #6958 ",695,True,en,0
8038,2,1,0,Externals,danhp,2016-11-28T22:47:06Z,34,0,8,7,Closes #7968,12,False,en,0
8031,1,2,0,Externals,muryoimpl,2016-11-21T01:54:47Z,1,1,1,0,I fixed typo in dialog.md linked to docs/api/structures/file-filter.md,70,False,en,0
8030,2,2,0,Externals,LuisHsu,2016-11-21T17:53:25Z,90,0,2,1,Make zh_TW translation of tutorial/about.md and tutorial/accessibility.md,73,False,en,0
8027,1,1,0,Externals,bowbowbow,2016-11-21T17:51:44Z,1,1,1,1,"Below example (in line 43 ~ 45) not working like comment. Because `ipcRenderer` callback function have two parameters (event, arg).

```javascript
ipcRenderer.on('asynchronous-reply', (arg) => {
  console.log(arg) // ""pong"" Ï∂úÎ†•
})
```",243,True,rw,0
8024,1,4,0,Externals,pedro,2016-11-27T06:24:35Z,1,1,1,7,"Hey folks!

I'm writing an app that supports drag&drop on the menu bar here and ran into an odd issue: the `drop-text` callback was not triggering for spotify URLs. It works fine if I drag raw text on the tray icon, but otherwise it doesn't seem to trigger all the time for URLs.

Reading some references on how to handle drops in cocoa ([1](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/DragandDrop/Tasks/DraggingFiles.html#//apple_ref/doc/uid/20001288-102943), [2](http://stackoverflow.com/questions/5663887/drag-and-drop-with-nsstatusitem)) I noticed they all process the drop from `performDragOperation` instead of `draggingEnded`, like Electron does. And updating it to use the former fixed this issue here: it's now triggering the callback for raw text and urls 100% of the time.

I didn't dive further to see what's causing issues with `draggingEnded` but hope this is still an acceptable patch!

Thanks,

/cc @nzoschke",965,True,en,0
8022,1,1,0,Internals,zeke,2016-11-22T18:47:32Z,1,1,1,2,"This updates to a new version of the docs linter that adds a `required` boolean to method parameters:


```js
{
  name: ""inspectElement"",
  signature: ""(x, y)"",
  description: ""Starts inspecting element at position (x, y)."",
  parameters: [
    {
      name: ""x"",
      type: ""Integer"",
      required: true
    },
    {
      name: ""y"",
      type: ""Integer"",
      required: true
    }
  ]
},
```",419,True,en,0
8016,2,7,0,Externals,the-ress,2016-11-23T17:09:39Z,5,4,2,4,"When I tried run lint on Windows 10 x64, I got two errors:

1. `WindowsError: [Error -2146893795] Provider DLL failed to initialize correctly` when running pylint
2. `electron-docs-linter` command referenced the `npm_package_version` env variable using unix style

This PR fixes both.",289,True,en,0
8009,4,1,0,Externals,deed02392,2016-11-18T16:33:24Z,11,11,6,0,As discussed in PR #7996,24,False,en,0
8003,3,1,0,Internals,kevinsawicki,2016-11-17T18:57:03Z,34,2,2,0,"This pull request replaces the `Uncaught Error: Cannot read property 'object' of undefined` errors thrown when calling a remote function that is missing from the object registry with custom error messages that include the name of the method/property and the id of the missing object.

These have started cropping up on CI and so this is an attempt to track them down further.

The `EBADRPC` code is set on the errors:

> 72 EBADRPC RPC struct is bad.  Exchange of RPC information was unsuccessful.

Refs #7351",517,True,en,0
7993,2,3,0,Internals,kevinsawicki,2016-11-21T17:50:37Z,29,11,2,4,"The `NSArrayToListValue` and `NSDictionaryToDictionaryValue` return null pointers when the given value is null which is the case when the requested user default is not an array or dictionary.

This pull requests returns empty array/objects instead of crashing when this happens.

Also adds specs for the values returned when the key has no default.

Fixes #7993",367,True,en,0
7992,2,1,0,Internals,zeke,2016-11-22T18:46:57Z,4,2,1,6,"This is a followup to #7985 to make it more clear that Electron extends the Node `process` object.

cc @zcbenz @kevinsawicki @crilleengvall",141,True,en,0
7989,1,1,0,Internals,kevinsawicki,2016-11-16T15:37:08Z,1,1,1,0,"Seeing the following failures on CI:

```
[Error: `window.open` Function does not appear to have a source document]
[Error: `window.open` Function does not appear to have a source document]
```

Pinning the docs linter to a specific version to see if it starts passing.",276,True,en,0
7986,1,1,0,Externals,salomvary,2016-11-23T00:51:26Z,8,0,2,6,See #7875,9,False,en,0
7985,2,1,0,Internals,zcbenz,2016-11-16T15:47:44Z,1,9,1,0,"Reverts electron/electron#7864.

Sorry for starting a PR to revert a PR, but `process.platform` and `process.argv` are parts of Node.js API, and the documentation for `process` explicitly says it only lists the things we added in Electron. So I think we should not list them here.",282,True,en,0
7982,1,1,0,Externals,kirly-af,2016-11-15T22:19:03Z,16,12,1,0,"* wrap example in a app ready event
* fix TypeError on `contextMenu.items[2].checked`",86,False,en,0
7981,4,0,0,Internals,kevinsawicki,2016-11-17T21:04:13Z,22,21,5,2,"Noticed these were still being implemented manually in the default app even though they just called a method directly on the focused window.

This pull request adds them as `reload` and `toggledevtools` role for less code duplication.",236,True,en,0
7980,1,0,0,Internals,kevinsawicki,2016-11-16T15:46:42Z,3,3,1,0,"This moves the guard added in #7209 to extend to all cases where `setObjectMembers` is called.

It has been reported there are still cases where `Uncaught TypeError: Cannot read property 'Symbol(Symbol.iterator)' of undefined` errors can occur.

Closes #7918",262,True,en,0
7979,1,0,0,Internals,kevinsawicki,2016-11-16T15:45:07Z,10,0,1,0,"The about panel credits must be a `NSAttributedString`, not a `NSString`.

https://developer.apple.com/reference/appkit/nsapplication/1428479-orderfrontstandardaboutpanelwith?language=objc

Closes #7953",206,True,en,0
7978,1,1,0,Internals,kevinsawicki,2016-11-16T15:41:48Z,2,7,1,0,"The `ELECTRON_NO_ASAR` var is supported for spawned/forked child processes so it only needs to be checked once and the value can be cached for future calls.

üêé Seeks to improve on the costly checks reported in #7948

/cc @paulcbetts üëÄ 

Closes #7948",261,True,en,0
7974,2,1,1,Externals,MarshallOfSound,2016-11-17T04:01:38Z,26,11,2,1,"I did this trying to fix #7970 

It didn't help üòÜ but may as well implement it üëç ",89,True,en,0
7973,3,1,0,Externals,mrxf,2016-11-15T18:04:00Z,409,54,1,0,update `app.md` Chinese translation to latest version,53,False,en,0
7972,1,1,1,Internals,kevinsawicki,2016-11-15T01:04:55Z,16,8,1,0,"Some of the `NSVisualEffectMaterial` constants are only available on macOS 10.11+.

This pull request switches to use the values so Electron still build on 10.10 which is what the CI machine is currently on.

Values pulled from https://developer.apple.com/reference/appkit/nsvisualeffectmaterial?language=objc

Refs #7898 ",328,True,en,0
7971,2,4,0,Internals,zeke,2016-11-15T18:03:23Z,8,8,1,0,"This PR revises the README slightly, moving the `npm install` instructions before the sentence about symbols and build artifacts, which are probably relevant to fewer users.

This also moves the `--save-dev` above `--global`, in the hope that fewer users will globally install things.",286,True,en,0
7969,9,4,0,Internals,zeke,2016-11-16T19:12:36Z,807,818,21,1,"This PR separates every API into its own markdown document. This will allow the docs linter to dynamically construct a list of every API, so that changes to Electron's API surface area will not require changes in the linter.

Fixes #6931",239,True,en,0
7967,1,1,0,Externals,veleek,2016-11-14T23:46:34Z,1,1,1,0,"The currently link points to a non-existent page.  I updated the link to point to the same place that the [electron/windows-installer](https://github.com/electron/windows-installer/) documentation points.
 
If someone else knows that this is the correct place to link that would be nice to hear.",297,True,en,0
7962,2,1,0,Externals,liusy182,2016-11-15T19:05:36Z,5,4,1,1,fix for #7885 ,14,False,en,0
7958,1,1,0,Externals,jhen0409,2016-11-14T15:32:53Z,1,0,1,0,"I think it's stable on the Electron, I wrote an integration test for it (https://github.com/zalmoxisus/redux-devtools-extension/pull/155), and it has been in [electron-react-boilerplate](https://github.com/chentsulin/electron-react-boilerplate/pull/254).

Also, It will be better if we got #7923.",298,True,en,0
7955,8,7,1,Externals,deepak1556,2017-02-08T21:12:25Z,278,36,11,87,"Fixes #7891 

Not sure if i have deprecated the old method the right way, would like some help with it.

/cc @kevinsawicki ",127,True,en,0
7952,7,4,0,Externals,the-ress,2016-11-28T22:46:14Z,68,0,4,16,"Calls [ui::win::SetAppDetailsForWindow](https://github.com/nwjs/chromium.src/blob/151b8e5d39b7edcf9eed78ebedf3b4eae9f93d28/ui/base/win/shell.cc#L117) in Chromium.

For Microsoft/vscode#13905",192,True,en,0
7947,9,11,11,Externals,pfrazee,2016-12-12T20:52:28Z,88,18,13,31,"This PR replaces https://github.com/electron/electron/pull/7671. It will:

 - [x] Add a second arg to `registerStandardSchemes`, which is an optional object where you can specify `{ secure: true }` to enable secure registration. Update `protocol.registerStandardSchemes` to register a scheme as secure on the browser side, and to propagate that registration to renderers.
 - [x] Add deprecation notices to `webFrame.registerURLSchemeAsSecure` and `webFrame.registerURLSchemeAsPrivileged`

Still in progress. I'm opening this PR to discuss the changes while I work.",569,True,en,0
7946,1,0,0,Internals,kevinsawicki,2016-11-11T18:23:03Z,3,5,1,0,Follow on to #7898 ,19,False,en,0
7945,1,0,0,Internals,zeke,2016-11-11T18:09:07Z,2,0,1,0,,0,False,en,0
7944,2,0,0,Internals,kevinsawicki,2016-11-11T17:05:32Z,3,5,1,0,"This ensures the view gets deallocated when the vibrancy is removed from the window.

Follow on to #7898",106,True,en,0
7933,2,4,0,Internals,joshaber,2016-11-11T15:43:35Z,5,2,2,0,"Bump to [1.2.0](https://github.com/electron/electron-frameworks/releases/tag/v1.2.0) which upgraded Squirrel.Mac.

Note that this version of Squirrel.Mac was built with Xcode 7.2.1. This means App Transport Security (ATS) will apply to its requests. ‚ö†Ô∏è This is a potentially breaking change. ‚ö†Ô∏è 

In the past this was a big problem as S3 failed ATS' checks. S3 now passes (see the output of `/usr/bin/nscurl --ats-diagnostics https://s3.amazonaws.com`). Apps that still need to disable ATS can add the `NSAllowsArbitraryLoads` key to their app's plist.",564,True,en,0
7925,1,1,0,Externals,mrxf,2016-11-10T17:34:14Z,2,2,1,0,There is an error in the translation of the last sentence.It may make reader confuse.,85,False,en,0
7923,2,3,0,Externals,jhen0409,2016-11-15T17:04:45Z,87,8,3,5,See [chrome.storage](https://developer.chrome.com/extensions/storage#type-StorageArea).,87,False,en,0
7922,1,3,0,Externals,mrxf,2016-11-10T17:33:55Z,2,2,1,0,,0,False,en,0
7921,1,1,0,Externals,mrxf,2016-11-10T17:33:04Z,2,2,1,0,update translation.,19,False,en,0
7917,9,6,4,Externals,gregnolle,2016-11-16T00:37:58Z,58,0,6,6,"The existing Certificate structure only contains the certificate at the end of the chain. This PR exposes the full chain of issuers, and also adds full details of subject principal (beyond just the common name).",211,False,en,0
7916,1,1,0,Externals,thompsonemerson,2016-11-09T16:28:21Z,1,1,1,0,,0,False,en,0
7912,1,1,0,Externals,mrxf,2016-11-09T16:17:59Z,1,1,1,0,change link to a simple Chinese page.,37,False,en,0
7910,1,1,0,Externals,mrxf,2016-11-09T16:17:31Z,1,1,1,0,To improve the translation of content,37,False,en,0
7908,2,5,0,Externals,deepak1556,2016-11-10T00:13:27Z,140,0,7,0,Fixes #7883 ,12,False,en,0
7907,1,2,0,Externals,thompsonemerson,2016-11-09T16:16:20Z,56,0,1,0,,0,False,en,0
7906,1,0,0,Internals,kevinsawicki,2016-11-09T19:49:33Z,7,3,5,1,"Upgrades Chrome from `53.0.2785.113` to `53.0.2785.143`.

- [Chrome blog post](https://googlechromereleases.blogspot.com/2016/09/stable-channel-update-for-desktop_29.html)
- [Chrome changelog](https://chromium.googlesource.com/chromium/src/+log/53.0.2785.113..53.0.2785.143?pretty=fuller&n=100000)
- [Layout freeze bug addressed](https://bugs.chromium.org/p/chromium/issues/detail?id=644635)


Fixes #7801
Refs https://github.com/electron/libchromiumcontent/pull/242
Refs https://github.com/electron/brightray/pull/259",527,True,en,0
7901,16,6,0,Externals,MarshallOfSound,2016-11-28T23:34:07Z,125,20,13,20,"This PR handles three things

1. `autoUpload` only ever did anything on macOS so the docs have been updated to reflect that
2. `autoUpload` has been renamed to `shouldUpload` *you can still use 'autoUpload' it is backwards compatable'
3. `shouldUpload` now has an API to change it dynamically

The reasoning behind No. 2 is that by calling something `autoUpload` you are inherently implying there is a manual way to send the report which the API does not provide.  The method that we call on macOS is even documented like so.

>   //! \brief Sets the user‚Äôs preference for submitting crash reports to a
  //!     collection server.

Which indicateds that even when false you shouldn't be submitting anyway üëç 

Also given that this is the kind of thing that should be user preference orientated I added an API to change the value on the fly.",858,True,en,0
7900,2,0,0,Internals,lee-dohm,2016-11-07T22:57:46Z,3,5,2,0,,0,False,en,0
7898,5,30,15,Externals,gerhardberger,2016-11-11T16:49:57Z,114,0,10,3,"This PR adds the native macOS vibrancy effect to `BrowserWindow`. #3002 

``` js
let win = new BrowserWindow({
  width: 800,
  height: 600,
  vibrancy: 'dark'  // 'light', 'medium-light' etc
})
```

<p align=""center"">
  <img width=""560"" alt=""vibrancy"" src=""https://cloud.githubusercontent.com/assets/1059699/20074570/09c6a300-a531-11e6-98c6-dbee26ad301f.png"">
</p>

",380,True,en,0
7897,1,2,0,Internals,lee-dohm,2016-11-07T20:23:08Z,5,1,1,0,,0,False,en,0
7895,1,0,0,Internals,kevinsawicki,2016-11-07T23:14:53Z,10,10,3,0,"`https://electron-symbols.githubapp.com` is the new home of the symbols server.

Updated the docs with this new URL.",118,True,en,0
7893,1,1,0,Externals,tinydew4,2016-11-07T16:55:23Z,99,13,29,0,,0,False,en,0
7888,7,11,2,Internals,zeke,2016-12-22T23:54:39Z,25,38,19,46,"The tag itself is `webview`, but there are several places in the code that refer to it as `web-view`. This leads to confusion, or at least a slight cognitive delay when working with them or looking up their documentation. This PR attempts to normalize all that, so `webview` will always be the thing you type in the Electron codebase, in the docs, and in practical use.

Also created https://github.com/electron/electron.atom.io/pull/562 so the website will continue to properly redirect requests to the old `/docs/api/web-view-tag` URL.

Let a few other PRs land first:

- [x] https://github.com/electron/electron/pull/7852
- [x] https://github.com/electron/electron/pull/7863",684,True,en,0
7884,8,1,1,Externals,MarshallOfSound,2016-11-11T17:47:31Z,181,243,18,6,/cc @zeke ,10,False,eu,0
7881,3,2,0,Internals,kevinsawicki,2016-11-04T23:22:34Z,37,28,15,0,"Renames the distribution URL used for downloading the v8 headers from `https://atom.io/download/atom-shell` to `https://atom.io/download/electron`.

Both URLs will be supported going forward but the old one may possibly be removed in Electron 2.0.",249,True,en,0
7878,8,0,8,Internals,zeke,2016-12-21T22:12:08Z,190,39,37,47,":book:

This PR adds a document that defines some common terms from Electron land.

I'm sure there are many more terms to add, but this is a start.

Feedback welcome!",172,True,en,0
7869,2,0,1,Internals,kevinsawicki,2016-11-07T16:20:20Z,9,5,4,3,"Currently the build is re-generating the `preload_bundle.js` file whenever any file in `lib/*.js` changes. This makes any JavaScript change there take roughly 10-15 seconds to build since the `browserify` target triggers the `js2c` target which triggers a repack of the app since `atom_native.h` is regenerated.

This pull request switches the browserify task to only run when `lib/renderer/api/ipc-renderer-setup.js` or `lib/sandboxed_renderer/init.js` change since these are the only two files currently used in the bundle.

This will require any additional requires to `lib/*.js` files added to either of those two files to be added to `filenames.gypi` but this seems like something that will very infrequently happen and should lead to spec failures when files are missing from the preload bundle.

### Timings

Running `npm run build`  after changing a single line in a `lib/*.js` file:

#### Before

```sh
real	0m10.277s
user	0m9.554s
sys	0m1.912s
```

#### After

```sh
real	0m1.945s
user	0m1.230s
sys	0m0.658s
```

/cc @tarruda ",1062,True,en,0
7867,3,1,2,Internals,zeke,2016-11-04T22:12:20Z,21,0,1,1,"I've been noticing that a lot of popular open source projects have pretty extensive issue templates:

- https://github.com/nodejs/node/issues/new
- https://github.com/yarnpkg/yarn/issues/new
- https://github.com/facebook/react/issues/new

This PR is intended to get the conversation started around how we can improve Electron's issue template. A few things that others are doing that we might consider:

- :bulb: Mention that the issue tracker is only for bugs and feature requests
- :bulb: Encourage users to update to the latest version before reporting the issue.
- :bulb: Include info about where to seek guidance for Electron development in general
",665,True,en,0
7864,6,2,8,Externals,crilleengvall,2016-11-04T22:53:46Z,8,0,1,1,Adds argv and platform documentation to process docs,52,False,en,0
7863,13,1,14,Internals,kevinsawicki,2016-11-07T16:53:08Z,209,213,5,3,"‚òïÔ∏è While working on #7852 I noticed lots of CoffeeScript :arrow_right: JavaScript leftovers in the code, i.e lots of unintended `return` statements, intermediate `ref` variables, etc which made the code hard to follow in certain places.

This pull request seeks to clean up that code since the `<webview>` implementation is one of the largest JavaScript pieces in the Electron codebase. Hopefully this makes it easier to work on going forward.

- [x] Use destructuring assignment
- [x] Use `let`/`const` instead of `var`
- [x] Use `for of` or `forEach` for array iteration
- [x] Use template strings
- [x] Use ES6 `class` syntax
- [x] Use `...` spread operator
- [x] Add more tests",695,True,en,0
7857,4,8,1,Externals,MarshallOfSound,2017-05-05T15:31:01Z,14,0,4,183,Setting up the scripts that would upload a generated `electron.d.ts` file when we reach an MVP state on `electron-definitelytyped`,130,False,en,0
7854,1,0,0,Externals,MarshallOfSound,2016-11-03T03:14:47Z,2,2,2,0,"/cc @zeke 

Previously the IPC Main and IPC Renderer docs in the JSON output were empty (had no methods)",106,True,en,0
7852,6,4,0,Internals,kevinsawicki,2016-11-07T21:48:01Z,75,4,3,4,"This pull request seeks to address the issues found in #7700 regarding the `guestinstance` attribute disappearing when hiding/showing webviews. This attribute was added in #7157.

- [x] :bug: Only destroy guest when moving between views. Currently hiding and then showing a webview destroys it web contents because it isn't checking that the guest is actually moving across views.
- [x] :bug: Only load URL and set webview size on first attach event. #7700 switched the listener from a `.once` to a `.on` and so currently webviews are reloaded each time they are attached.
- [x] :bug: Guard against the `attachedCallback` firing while handling a `detachedCallback` event. This appears to happen when setting the `guestinstance` attribute and running `replaceChild` to move a webview node, uncovered by the golden layout example from #7700. 
- [x] Merge #7863 first and rebase this pull request on top of it

Fixes #7700",926,True,en,0
7851,32,22,26,Externals,YurySolovyov,2017-02-07T19:37:06Z,758,1,13,96,"Fixes #6397
Huge thanks to @deepak1556 and @MarshallOfSound who did most of the work and helped a lot.

TODO:
- [x] Add some tests on JS side
- [x] Make callback node-like with error-first signature
- [x] Make size argument an options object and use `normal` size by default.
- [x] Write docs
- [x] Try building it on macOS and fix if needed (need help, no Apple devices available for me)
- [x] Make it compile under/for Windows
",439,False,en,0
7847,1,1,0,Externals,tinydew4,2016-11-02T16:23:54Z,1,0,1,0,,0,False,en,0
7846,2,1,0,Externals,aliib,2016-11-02T16:23:35Z,4,4,1,0,Trivial fix for net docs.,25,False,nb,0
7843,4,3,2,Internals,zeke,2016-11-03T20:14:30Z,74,2,29,1,"The docs linter currently contains a [seeds file](https://github.com/electron/electron-docs-linter/blob/6acacf4a15363d6027825574132929ce86afb7ca/lib/seeds.js) that lists all APIs and some extra metadata for each. It looks like this:

```js
module.exports = [
  {
    name: 'clipboard',
    process: {main: true, renderer: true}
  },
  {
    name: 'crashReporter',
    process: {main: true, renderer: true}
  },
  {
    name: 'nativeImage',
    process: {main: true, renderer: true}
  },
  {
    name: 'NativeImage',
    process: {main: true, renderer: true},
    parentDoc: 'native-image',
    instanceName: 'image'
  }
 // etc
]
```

We eventually want to [get rid of this file](#6931) and enable the linter to infer everything it needs to know solely from the contents of `/docs/api`.

So... let's document the process(es) in which each API is available within the markdown docs themselves. I've staged a few files with what seems like a reasonable way to annotate this.

Before updating every doc, I want to get feedback on the idea and implementation. What do you think, @electron/maintainers?",1127,True,en,0
7837,1,0,0,Internals,zeke,2016-11-01T19:12:04Z,1,1,1,0,Thanks for @kevinsawicki for this improvement: https://github.com/electron/electron-docs-linter/pull/68,103,False,en,0
7823,1,1,0,Externals,kanemontreuil,2016-11-03T16:26:48Z,1,2,1,2,Consolidate the gitignore log files.,36,False,en,0
7822,1,1,0,Externals,tinydew4,2016-11-01T15:44:10Z,478,161,6,0,"And, the contents of two files to relating debugging are swapped with each other to correct.
",94,True,en,0
7821,1,1,0,Internals,zeke,2016-11-01T15:43:46Z,1,1,1,0,"This brings in an updated linter that is aware of the new `net`, `ClientRequest`, and `IncomingMessage` APIs.

Once we've got [one doc per API](https://github.com/electron/electron/issues/6931), these manual updates to the linter will no longer be necessary.

@zcbenz it would be great to land this in 1.4.5 if possible.",324,True,en,0
7820,1,1,0,Externals,tinydew4,2016-11-01T15:43:28Z,18,18,1,0,,0,False,en,0
7818,1,0,0,Internals,zeke,2016-11-01T02:36:31Z,23,20,1,0,"This PR:

- [x] Adds a blockquote description for the `ClientRequest` and `IncomingMessage` classes
- [x] Fixes formatting for the `net.request` method's `options` param
- [x] Fixes formatting of several events
- [x] Fixes some typos

@kevinsawicki can you take a quick look at this? I'd love to ship it quickly and roll the changes into a new docs linter release today.",377,True,en,0
7813,1,0,0,Internals,kevinsawicki,2016-10-31T23:28:10Z,7,0,1,0,"Looks like this event was previously untested so this pull request adds an initial spec to guard against regressions and to verify it fires as expected on all platforms.

Refs #7779",183,True,en,0
7812,1,0,0,Internals,kevinsawicki,2016-10-31T18:37:41Z,11,3,1,0,"Port over `url.format` change from https://github.com/electron/electron-quick-start/pull/102

/cc @privatzee

Closes #7786",126,True,en,0
7809,1,1,0,Internals,shiftkey,2016-10-31T16:16:33Z,2,2,2,0,Found while reviewing #7577,27,False,en,0
7807,1,3,0,Externals,MarshallOfSound,2016-10-31T16:23:07Z,5,4,1,0,"The `net` module wasn't in the linter's seeds reference so it wasn't being linted.  This fixes some issues üëç 
",113,True,en,0
7797,8,1,0,Externals,excfergodst,2016-10-31T16:21:56Z,36,0,4,1,"just daily update
",18,True,en,0
7795,2,1,6,Externals,LaurentLeVan,2016-10-30T16:40:22Z,27,0,1,1,,0,False,en,0
7793,7,3,4,Externals,excfergodst,2016-10-31T16:21:43Z,19,0,2,2,"ZH_TW docs api/structures/cookie add
",37,True,pl,0
7791,1,1,0,Internals,iolsen,2016-10-28T21:49:43Z,1,1,1,0,,0,False,en,0
7788,5,2,1,Internals,kevinsawicki,2016-10-31T16:39:38Z,37,7,3,2,"This pull request upgrades Brightray to include https://github.com/electron/brightray/pull/258 and also adds a spec for using `setPermissionRequestHandler` with notifications.

Also updates a few asserts that were using `assert` instead of `assert.equal`/`assert.deepEqual`.

/cc @deepak1556 :eyes:

Fixes #7645 
",313,True,en,0
7787,2,1,0,Externals,julianengel,2016-10-31T16:28:20Z,4,0,1,3,"According to Issue #7756 I added the example usage.
",52,True,en,0
7785,1,1,0,Externals,tinydew4,2016-10-28T16:46:28Z,35,1,2,0,,0,False,en,0
7776,8,3,0,Internals,kevinsawicki,2016-11-21T17:21:55Z,68,0,6,24,"This pull request adds support for a `zoomToPageWidth` window option (defaults to `false`) that changes the macOS zoom behavior to use the preferred width of the page instead of zooming to to the full width of the screen.

This allows apps to opt-in to a more ""native"" feeling zoom behavior where their windows grow the full height of the screen but only expands to the needed width, such as the how the Finder handles zoom.

This was inspired by Chrome's implementation of this in [chrome/browser/ui/cocoa/browser_window_controller.mm](https://cs.chromium.org/chromium/src/chrome/browser/ui/cocoa/browser_window_controller.mm).
### Current behavior

![zoom-before](https://cloud.githubusercontent.com/assets/671378/19781406/f75682cc-9c3d-11e6-8f86-1780324c426b.gif)
### New behavior with `zoomToPageWidth` set to `true`

![zoom-after](https://cloud.githubusercontent.com/assets/671378/19781408/f90f3eb0-9c3d-11e6-8594-3f9c02f02293.gif)

/cc @dgraham
",951,True,en,0
7770,1,1,0,Externals,vitaliel,2016-10-27T17:43:11Z,1,1,1,0,,0,False,en,0
7766,1,6,0,Externals,liusy182,2016-10-31T02:04:35Z,13,55,3,3,"Fix for #7630 

Issues regarding restore/maximize/minimize in general are because default windows behaviour is overridden by handling `WM_SIZE` message and `SetBounds()` to `last_normal_bounds_`. It is difficult to keep `last_normal_bounds_` up-to-date since there are many platform-specific scenarios need to be handled. 

This fix is to remove overrides and rely on default windows behaviour. I have tested by switching between maximize / restore / minimize / fullscreen and it is working.

I do have a question though why was the override implemented in the first place. Was it to fix some other bugs?
",605,True,en,0
7765,8,11,8,Externals,liusy182,2017-01-09T17:47:40Z,5,19,1,74,"Fix for issue #7672 
This bug is because boolean `thick_frame_` is not updated in line with windows style `WS_THICKFRAME`. `NativeWindowViews::Maxmize()` uses a different routine when it finds `thick_frame_` is not set.
",220,False,en,0
7757,3,1,0,Externals,crilleengvall,2016-10-27T17:42:57Z,14,0,1,0,"documentation about hidden-inset is shown on BrowserWindow docs: http://electron.atom.io/docs/api/browser-window/

But it does not exist under the frameless window api docs. this pull requests adds it here: http://electron.atom.io/docs/api/frameless-window/
",258,True,en,0
7753,1,1,0,Externals,tinydew4,2016-10-27T17:40:09Z,167,151,4,1,,0,False,en,0
7752,1,0,0,Externals,tinydew4,2016-10-26T18:40:23Z,3,3,1,0,,0,False,en,0
7750,1,2,0,Externals,0xbrt,2016-10-27T17:39:46Z,18,2,1,1,"Usage of Accelerators (i.e. `globalShortcut.register`) is now documented in the Accelerator docs themselves.

Fixes #7724.
",123,True,en,0
7745,1,0,0,Internals,zeke,2016-10-31T16:05:05Z,1,1,1,5,"See https://github.com/electron/electron-docs-linter/pull/64 and https://github.com/electron/electron/pull/7741

cc @MarshallOfSound 
",134,True,en,0
7743,1,1,0,Externals,doraeric,2016-10-27T17:38:00Z,198,1,4,1,"translate documents to traditional Chinese
",43,True,en,0
7741,3,0,0,Externals,MarshallOfSound,2016-10-26T06:47:32Z,95,109,2,0,"In their previous location `electron-docs-linter` would not output an Object structure for `webPreferences` (which is a key part of the constructor)

Also this fixes quite a few string ENUMS now that electron/electron-docs-linter/pull/64 attempts to parse a lot more of them

/cc @zeke 
",287,True,en,0
7740,1,1,0,Externals,mauriciofauth,2016-10-26T00:58:48Z,59,30,1,0,"Update `docs-translations/pt-BR/api/window-open.md` translations.
",66,True,en,0
7739,1,1,0,Externals,MarshallOfSound,2016-10-25T23:50:20Z,5,5,1,0,"These new docs resulted in the object properties having the type ""optional"" due to the new linter supporting types in brackets.

/cc @zeke 
",140,True,en,0
7736,1,1,0,Externals,mauriciofauth,2016-10-25T21:18:01Z,5,5,1,0,,0,False,en,0
7730,1,1,0,Externals,tinydew4,2016-10-25T20:55:43Z,24,0,8,0,,0,False,en,0
7719,4,2,0,Internals,kevinsawicki,2016-10-26T02:23:14Z,172,47,7,0,"This pull request exposed Chrome's API support for the [NSFindPboard](https://developer.apple.com/reference/appkit/nsfindpboard) so you can read and write text to that board.
- [x] Add `readFindText`/`writeFindText`
- [x] Add tests
- [x] Add docs

Closes #7656 
",262,False,en,0
7718,1,1,0,Externals,mike-engel,2016-10-25T04:08:37Z,4,4,4,0,"The setMenuBarVisibility api is only supported on Windows and Linux.
This adds some minor documentation to make that clearer. Fixes #7686
",138,False,en,0
7717,1,0,0,Internals,kevinsawicki,2016-10-25T03:40:32Z,9,0,7,0,"This is required for the markdown parser used by http://electron.atom.io/docs/

Currently these are rendering like:

<img width=""867"" alt=""screen shot 2016-10-25 at 12 35 29 pm"" src=""https://cloud.githubusercontent.com/assets/671378/19672204/6e5dde8c-9aaf-11e6-9493-f9f183005b82.png"">
",285,True,en,0
7715,1,0,0,Internals,zeke,2016-10-26T06:42:50Z,1,1,1,1,"This pulls in the latest docs linter, which now supports parsing the function parameters' types, e.g.

```
* `callback` Function
  * `argv` String[] - An array of the second instance's command line arguments
  * `workingDirectory` String - The second instance's working directory
```

See https://github.com/electron/electron-docs-linter/pull/60 and https://github.com/electron/electron/pull/7596
",397,True,en,0
7711,1,1,0,Externals,tinydew4,2016-10-24T07:49:37Z,41,24,5,0,,0,False,en,0
7710,1,0,0,Internals,kevinsawicki,2016-10-24T07:29:10Z,2,4,1,0,"Follow on to #7665, remove lint error in `atom_api_web_frame.h` üëï 

```
atom/renderer/api/atom_api_web_frame.h:69:  Closing ) should be moved to the previous line  [whitespace/parens] [2]
```
",195,True,en,0
7709,2,1,0,Externals,tinydew4,2016-10-24T07:36:58Z,421,167,17,0,,0,False,en,0
7708,1,1,0,Externals,tinydew4,2016-10-24T07:12:29Z,4,5,3,0,,0,False,en,0
7707,1,1,0,Internals,kevinsawicki,2016-10-25T00:09:45Z,10,8,4,0,"This pull request reverts #7468 and instead just explicitly focuses the window when a menu bar button is clicked so that the original issue (#7282) is still addressed and the menu items are targeting the right window.

Previously focusing the menu bar caused the web contents to lose focus meaning input fields or the dev tools would not regain focus after the menu was closed.

Closes https://github.com/electron/electron/issues/7663
",435,True,en,0
7697,1,1,0,Externals,dumconstantin,2016-10-24T01:22:22Z,1,1,1,2,,0,False,en,0
7676,4,1,0,Externals,kokdemo,2016-10-24T01:21:02Z,24,7,2,3,"> - [Documentation Styleguide](development/styleguide.md) 

=>

> - [Documentation Styleguide](styleguide.md) 
",111,True,pt,0
7674,1,0,0,Internals,kevinsawicki,2016-10-20T07:12:33Z,1,0,1,0,"Adds a push step after bumping the version.

/cc @zeke 
",56,True,en,0
7666,2,1,2,Externals,amtj,2016-10-24T00:54:46Z,3,3,1,5,"Credits to @jainmukul for starting #7568
",41,True,en,0
7665,2,1,4,Externals,pfrazee,2016-10-24T06:56:18Z,136,27,4,5,"Closes https://github.com/electron/electron/issues/7430

Adds an options argument for choosing which features to register:

``` markdown
### `webFrame.registerURLSchemeAsPrivileged(scheme[, options])`

* `scheme` String
* `options` Object (optional)
  * `secure` Default true.
  * `bypassCSP` Default true.
  * `allowServiceWorkers` Default true.
  * `supportFetchAPI` Default true.
  * `corsEnabled` Default true.
```
",419,True,en,0
7660,7,0,2,Internals,zeke,2016-10-20T02:31:51Z,102,0,2,1,"This new document outlines the steps to cut a new release of Electron.

üëÅ üëÅ  @zcbenz 
",92,True,en,0
7659,1,1,0,Internals,groundwater,2016-10-18T04:41:48Z,11,6,1,0,"This PR extracts `IsScreenReaderActive` as proposed by @miniak.
- Fix for #7611 on windows with touch screen and NVDA
- Original issue #7208
- Tested on my Surface Pro 4 running Windows 10 and NVDA.
",199,False,en,0
7658,3,7,6,Externals,poiru,2016-11-15T22:21:56Z,217,3,9,28,"This adds the `disableguestresize` property for webviews to prevent the
webview guest from reacting to size changes of the webview element. This
also partially documents the `webContents.setSize` function in order to
manually control the webview guest size.

These two features can be combined to improve resize performance for
e.g. webviews that span the entire window. This greatly reduces the lag
described in #6905.",426,False,en,0
7654,3,3,0,Externals,scotttrinh,2016-10-24T01:20:08Z,24,0,1,6,"It took me a bit to find the Windows equivalent to bouncing the dock icon, so once I came across `flashFrame`, it seems like it was worth making it easier to find for future devs. Not a great writer, so I'm definitely open to feedback on tone and grammar. ‚úèÔ∏è 
",264,True,en,0
7651,3,1,0,Externals,deepak1556,2016-10-24T07:53:04Z,160,13,9,6,"Depends on https://github.com/electron/brightray/pull/256

Fixes https://github.com/electron/electron/issues/7635
",114,True,en,0
7650,1,0,0,Externals,davej,2016-10-22T14:51:59Z,3,2,1,5,"The link was 404'ing
",21,True,en,0
7641,1,1,0,Externals,rogerlista,2016-10-24T00:19:08Z,1,1,1,8,,0,False,en,0
7631,7,5,12,Externals,pfrazee,2016-10-25T03:14:25Z,91,14,8,10,"Per https://github.com/electron/electron/pull/7431 and https://github.com/electron/electron/issues/2749, this PR adds a `webpreferences` attribute to the webview tag. The string is implemented using the same parsing logic as the features string in `window.open`.
",263,True,en,0
7628,1,4,0,Externals,deepak1556,2016-10-24T05:57:37Z,32,20,2,9,"When no default browser context is created, multiple calls to `TokenLoadingJob` will cause a race in browser context creation and crash. The patch creates the browser context when access token store is initialized and passes it to `TokenLoadingJob`.

Fixes #7607 
",264,True,en,0
7622,1,1,0,Externals,Haraldson,2016-10-24T00:16:07Z,2,0,1,9,,0,False,en,0
7614,1,1,0,Externals,tinydew4,2016-10-14T16:19:04Z,130,102,10,0,,0,False,en,0
7611,2,9,7,Externals,paulcbetts,2016-10-14T19:46:32Z,24,12,4,1,"Fixes #7208 
## TODO:
- [x] Verify with a touch screen
- [x] Verify that NVDA still works
",90,False,en,0
7610,1,2,0,Externals,LShun,2016-10-13T21:18:56Z,19,15,1,0,"Hello, I edited some words as well as added some missing information ( for example the License ) that was missing in the translation but found in the main site README.md,

Significant ( not really, just compared to some other changes I made ) changes that I have committedÔºö
[Line 8]
-ElectronÊ°ÜÊû∂ÔºåÂèØÁî®JavaScript, HTML Âèä CSS ÁºñÂÜôÊ°åÈù¢Á®ãÂ∫è„ÄÇ
+ElectronÊ°ÜÊû∂ÔºåËÆ©ÊÇ®ÂèØ‰ΩøÁî®JavaScript, HTML Âèä CSS ÁºñÂÜôÊ°åÈù¢Á®ãÂ∫è„ÄÇ

[Line 10]
-[Atom editor](https://github.com/atom/atom)‰ª•Âèä[apps](http://electron.atom.io/apps)Â∞±ÊòØ‰ΩøÁî®ElectronÁºñÂÜôÁöÑ„ÄÇ
+[Atom editor](https://github.com/atom/atom)‰ª•ÂèäÂæàÂ§öÂÖ∂‰ªñÁöÑ[apps](http://electron.atom.io/apps)Â∞±ÊòØ‰ΩøÁî®ElectronÁºñÂÜôÁöÑ„ÄÇ

[Line 12]
-ËØ∑ÂÖ≥Ê≥®Twitter [@ElectronJS](https://twitter.com/electronjs) ÁöÑÈáçË¶ÅÂÖ¨ÂÖ±„ÄÇ
+ËØ∑ÂÖ≥Ê≥®Twitter [@ElectronJS](https://twitter.com/electronjs) ‰ª•Ëé∑ÂæóÈáçË¶ÅÈÄöÂëä„ÄÇ

[Line 19]
-È¢ÑÁºñËØëÁöÑ‰∫åËøõÂà∂ÁâàÊú¨ÂèäsymbolsË∞ÉËØïÁâàÊú¨ÂèØ‰ª•Âú®[releases](https://github.com/electron/electron/releases)ÊâæÂà∞Ôºå
+È¢ÑÁºñËØëÁöÑ‰∫åËøõÂà∂ÁâàÊú¨ÂèäsymbolsË∞ÉËØïÁâàÊú¨ÂèØ‰ª•Âú®[releases](https://github.com/electron/electron/releases)ÊâæËé∑Ôºå

[Line 22]
-‰Ω†ÂèØ‰ª•‰ΩøÁî®[`npm`](https://docs.npmjs.com/)Êù•ÂÆâË£ÖÈ¢ÑÁºñËØëÁâàÊú¨ÁöÑelectron
+‰Ω†ÂèØ‰ª•‰ΩøÁî®[`npm`](https://docs.npmjs.com/)Êù•ÂÆâË£ÖÈ¢ÑÁºñËØëÁâàÊú¨electronÁöÑ‰∫åËøõÂà∂Êñá‰ª∂:

[Line 23]
-You can also use  to install prebuilt electron
+You can also use [`npm`] to install prebuilt electron binaries.

[Line 27]
-# ÂÖ®Â±ÄÂÆâË£Ö `electron`
+# Âú® $PATH ÈáåÂÖ®Â±ÄÂÆâË£Ö `electron`

[Line 42]
-- [China](https://npm.taobao.org/mirrors/electron)
+- [‰∏≠ÂõΩ](https://npm.taobao.org/mirrors/electron)

[Line 66]
-Â∫ìÊù•ÂêØÂä®‰∏Ä‰∏™ÊúÄÂ∞èÈ°πÁõÆ
+Â∫ìÊù•ÁúãË°åÂä®ÁöÑ‰∏Ä‰∏™ÊúÄÂ∞èÁöÑ Electron Â∫îÁî®ËΩØ‰ª∂„ÄÇ

[Line 70 & 71 - Need correction on Line 71's‚Äú‰∏Ä Á±ª‚Äù]
-‰Ω†ÂèØ‰ª•Âú®Ê≠§ÊèêÈóÆÈ¢òÊàñ‰∫íÁõ∏Êèê‰æõÂ∏ÆÂä©:
-- [`electron`](http://discuss.atom.io/c/electron) ‰∏äÁöÑAtomËÆ∫Âùõ
+‰Ω†ÂèØ‰ª•Âú®Ê≠§ÊèêÂá∫ÈóÆÈ¢òÂíå‰∫íÁõ∏Êèê‰æõÂ∏ÆÂä©:
+- [`electron`](http://discuss.atom.io/c/electron) AtomËÆ∫Âùõ‰∏äÁöÑ‰∏ÄÁ±ª„ÄÇ

[Line 75]
-- [`electron-kr`](http://www.meetup.com/electron-kr/) _(Èü©ÂõΩ)_
+- [`electron-kr`](http://www.meetup.com/electron-kr/) _(Èü©ËØ≠)_

[Line 81]
-‰æãÂ≠êÔºåÂ∑•ÂÖ∑ÂíåËµÑÊ∫êÂàóË°®„ÄÇ
+Êù•Ëé∑ÂæóË¢´Á§æ‰ºöÁª¥ÊåÅÁöÑÂ∫îÁî®‰ª∂‰æãÂ≠êÔºåÂ∑•ÂÖ∑ÂíåËµÑÊ∫êÂàóË°®„ÄÇ

[Line 82-85]
+
+## ÊâßÁÖß
+
+MIT ¬© 2016 Github

Thank you.
",2387,True,zh,0
7608,4,1,4,Externals,nabeelomer,2016-10-13T21:17:07Z,10,0,1,0,"Fixes #7525 
",13,True,en,0
7602,3,1,0,Externals,danburzo,2016-10-13T21:13:08Z,9,1,1,0,"I've clarified what `--js-flags` stands for: since the term _Node_ was missing I'm thinking it's not readily apparent that it is the JS engine discussed. I've also added a note about how to find which flags are available. 

I also added a link to the debugging guide for the `--debug` and `--debug-brk` flags.
",310,True,en,0
7598,9,1,0,Externals,ghost,2016-10-13T21:09:14Z,10,12,8,0,,0,False,en,0
7596,5,1,7,Externals,MarshallOfSound,2016-10-24T03:40:41Z,226,133,13,10,"Fixes #7589

/cc @zeke 
",24,True,eu,0
7592,18,16,17,Externals,lauracpierre,2016-10-26T01:12:15Z,92,1,8,12,"Hi!

I've never done a PR here so apologies in advance if I'm missing things. 
- Linter is valid
- Some tests are failing but it doesn't feel like this is due to my code. 

I added some documentation too. 

A few things I'm unsure about: 
- Not sure if I have to do anything for other platforms. 
- Not sure about memory. 

```
- (void)previewFileAtPath:(NSString *)filepath  withName:(NSString *) name {
  NSURL * url = [[NSURL alloc] initFileURLWithPath:filepath];
  [self setQuickLookItem:[[AtomPreviewItem alloc] initWithURL:url title:name]];
  [[QLPreviewPanel sharedPreviewPanel] makeKeyAndOrderFront:nil];
}
```

Should I release the url here?

Happy to fix all the issues, and thanks for the feedbacks,

Pierre

<img width=""1055"" alt=""screenshot 2016-10-12 21 24 51"" src=""https://cloud.githubusercontent.com/assets/979311/19336715/8779df02-90c2-11e6-92b6-f43a9a36df94.png"">
",882,True,en,0
7590,3,1,3,Externals,MarshallOfSound,2016-10-24T06:13:39Z,24,29,5,11,"While parsing the docs into typescript I throw a few errors that are slightly more strict than the docs linter.  These fix a few of the issues üëç 

/cc @zeke 
",161,True,en,0
7587,2,1,0,Externals,MarshallOfSound,2016-10-13T21:04:24Z,5,5,4,0,"This just updates the `standard` dependency and fixes the few linting issues that appeared as a result
",103,True,en,0
7583,1,2,0,Externals,ghost,2016-10-12T20:20:16Z,1,1,1,0,"[ci skip]
",10,True,pl,0
7580,1,0,0,Internals,zeke,2016-10-13T02:06:44Z,1,1,1,0,"This bumps the docs linter to a new version with support for the renamed `Rectangle` object.

Once we've [separated each API doc into its own file](https://github.com/electron/electron/issues/6931), we can get rid of the (manually updated) [seeds file](https://github.com/electron/electron-docs-linter/blob/f681fa91ae43e6635ad5ed2f84db32fd4ec6a915/lib/seeds.js) in the linter, and we'll be able to construct a list of APIs dynamically purely by parsing the files. Then we won't have to keep pulling in these little updates.

cc @MarshallOfSound 
",546,True,en,0
7579,1,1,0,Internals,kevinsawicki,2016-10-12T18:32:01Z,17,6,2,0,"Follow on to #7549, use lower-case option keys for consistency and upper-case them before passing through to the macOS API.

/cc @enlight üëÄ 
",144,True,en,0
7578,6,2,0,Internals,kevinsawicki,2016-10-17T12:22:39Z,47,5,6,4,"This pull request follows the approach outlined in https://github.com/electron/electron/issues/5715#issuecomment-245683085 to enable console output on Windows when electron is run with `ELECTRON_RUN_AS_NODE`.

Exposes `process.log` when run in a node context and calls that from the fallback streams created when `stdout` and `stderr` fail to initialize in node (which is happening on release builds).

<img width=""232"" alt=""screen shot 2016-10-12 at 10 30 52 am"" src=""https://cloud.githubusercontent.com/assets/671378/19320626/e784995c-9066-11e6-8640-2914477835ab.png"">

Depends on https://github.com/electron/node/pull/19

/cc @bpasero 
",639,True,en,0
7577,62,7,42,Externals,aliib,2016-10-31T01:31:56Z,3382,44,19,18,"This pull request proposes a new electron module called the net module. It is essentially a JavaScript binding of Chromium native networking library (the net library) and provides an API similar to the Node.js HTTP module.

Currently, Electron apps developers are expected to use the native Node.js, or other helper libraries built on top of it, to issue their HTTP(S) requests. However, it is widely known that Node.js provides a quite minimal support for web proxies.

Using Chromium network stack offers substantial advantages over the HTTP/HTTPS implementation of Node.js, specifically regarding web proxies‚Äô support. Following is a non-exhaustive list of such features:
- Automatic management of system proxy configuration, support of wpad protocol and proxy pac configuration files.
- Tunneling of HTTPS requests.
- Support for authenticating proxies using basic, digest, NTLM, Kerberos or negotiate authentication schemes.
- Traffic monitoring proxies: Fiddler-like proxies used for access control and monitoring.

While it is possible to provide support for most of the previously listed features on top of Node.js, eventually using additional npm packages, the task is not trivial and requires a substantial development effort and testing. Moreover, we are not aware of any public npm package that solves the authenticating proxies‚Äô issue.

The initial design of Node.js as server-side platform explains while it has always lacked reasonable support for web proxies as the latters are typically deployed in client environments. 

Electron, being primarily targeted as a client-side framework, is expected to provide a robust networking API capable of automatically handling all issues introduced by usage of web proxies.

The present module solves all of the aforementioned problems. The API is quite simple and greatly mimics the familiar Node.j HTTP. So no substantial learning effort is required.

The implementation of the net module follows the usual binding patterns of electron. It extends the JavaScript context of the browser process by adding a new module. Applicative code not using the new module wouldn‚Äôt be impacted in any aspect.

On the other hand, applications willing to use the new module would automatically benefit from a robust and widely used networking layer targeted for client-side environments.
",2337,True,en,0
7576,4,3,0,Externals,tinydew4,2016-10-13T20:56:39Z,302,234,25,1,"I guess, this change might be conflict with #7570.
After it merged, I'll correct this and mention again.
",105,False,en,0
7570,4,1,4,Externals,preco21,2016-10-12T20:06:02Z,65,58,26,0,"üìù 
",6,True,he,0
7566,3,2,3,Externals,paulcbetts,2016-10-17T12:43:51Z,35,20,1,5,"This PR amends #5236 to work with apps that are sandboxed, non-MAS applications, by detecting dynamically whether we should apply the sandbox workaround instead of restricting it to the MAS build
",196,True,en,0
7563,1,1,0,Externals,rogerlista,2016-10-11T17:06:02Z,55,0,1,0,,0,False,en,0
7562,1,1,0,Externals,odedhb,2016-10-11T17:00:57Z,1,1,1,0,"Should be value, instead of key.
",33,True,en,0
7561,7,4,0,Internals,kevinsawicki,2016-10-12T06:35:18Z,161,7,8,0,"Adds a `systemPreferences.getColor` method on Windows that supports retrieving all the colors from https://msdn.microsoft.com/en-us/library/windows/desktop/ms724371(v=vs.85).aspx
- [x] Add `systemPreferences.getColor`
- [x]  Add `color-changed` event
- [x] Add specs
- [x] Add docs

/cc @MarshallOfSound @paulcbetts :eyes:

Refs #7518 
",336,False,en,0
7560,1,0,0,Internals,kevinsawicki,2016-10-11T16:48:39Z,1,1,1,0,"Pulls in https://github.com/electron/brightray/pull/255 to fix the dock state preference of the dev tools.

/cc @deepak1556 
",125,True,en,0
7558,2,1,0,Externals,danburzo,2016-10-11T16:48:20Z,2,2,1,0,"Adds a link to [PyObjC installation instructions](https://pythonhosted.org/pyobjc/install.html) in [Build Instructions (macOS)](http://electron.atom.io/docs/development/build-instructions-osx/).
",195,True,en,0
7555,2,1,0,Externals,tinydew4,2016-10-11T16:47:51Z,62,28,4,0,,0,False,en,0
7552,1,1,0,Internals,zeke,2016-10-11T16:47:30Z,2,3,1,0,"The `Menu` API's [main process](http://electron.atom.io/docs/api/menu/#main-process) example code was written as if run in a renderer process. This fixes that.
",160,True,en,0
7549,2,4,0,Internals,kevinsawicki,2016-10-11T11:18:23Z,38,1,5,0,"Allow the application name, version, copyright, and credits shown in the about panel on macOS to be configurable at runtime.

See https://developer.apple.com/reference/appkit/nsapplication/1428479-orderfrontstandardaboutpanelwith?language=objc for more details.

Fixes #6955
",275,True,en,0
7548,1,1,0,Externals,malept,2016-10-10T20:50:41Z,3,2,1,0,"Note that Electron Packager 8.1.0 and later ignores object files by default.

See: https://github.com/electron-userland/electron-packager/pull/491
",147,True,en,0
7544,1,1,0,Externals,tinydew4,2016-10-10T16:19:13Z,2,2,1,0,,0,False,en,0
7542,1,1,0,Externals,menq,2016-10-10T16:18:41Z,2,2,1,0,"rename electron-prebuild to electron
",37,True,en,0
7541,1,1,0,Externals,tinydew4,2016-10-10T16:18:23Z,41,3,3,0,,0,False,en,0
7540,15,14,11,Externals,deepak1556,2016-11-14T15:39:54Z,321,65,18,35,"- [x] Add docs and specs

Depends on https://github.com/electron/libchromiumcontent/pull/236

Fixes https://github.com/electron/electron/issues/2816
",149,True,en,0
7536,1,1,0,Externals,rogerlista,2016-10-10T16:18:02Z,193,0,1,1,,0,False,en,0
7533,5,4,9,Externals,MarshallOfSound,2016-11-03T17:32:21Z,77,9,5,25,"Fixes #7532

Basically this handles `executeJavaScript` calls returning instances of `Promise` and resolving that promise before passing it back through IPC to the caller.

This trick works because

``` js
Promise.resolve(123).then((resolvedValue) => console.log(resolvedValue))
// This would print out 123
// Promise.resolve either immediately resolves with the given value or resolves the given promise
```

It allows for truly asyncronous execution like so

``` js
webContents.executeJavaScript(
  `new Promise(resolve => {
    setTimeout(() => resolve('myString'), 2000);
  });`,
  (returnValue) => {
     // returnValue === 'myString'
  }
);
```

This is non-blocking async execution üëç 
",695,True,en,0
7528,6,3,0,Internals,kevinsawicki,2016-10-11T10:34:05Z,140,7,7,3,"This pull request adds the [`key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key) and [`code`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code) values on keyboard events sent via `webContents.sendInputEvent`.
- [x] Set `key` and `code` on created keyboard events
- [x] Add `keyDown` event specs
- [x] Add `char` event specs
- [x] Update `keyUp` specs

Fixes #7467 
",406,False,en,0
7527,1,1,0,Internals,kevinsawicki,2016-10-07T21:04:03Z,2,0,1,0,"Follow on to #7524, only call media::AudioManager::SetGlobalAppName on Linux.

For some reason AppVeyor did not build that PR so it looked green even though the Mac and Windows builds had failures.

https://travis-ci.org/electron/electron/jobs/165778082

/cc @deepak1556 
",272,True,en,0
7524,1,1,0,Externals,deepak1556,2016-10-07T17:15:35Z,4,0,1,0,"This partly fixes the issue by setting the correct application name for audio streams. Currently there is no way to change the icon. Have requested upstream for an api https://bugs.chromium.org/p/chromium/issues/detail?id=653828

Refs https://github.com/electron/electron/issues/7470
",284,True,en,0
7522,1,1,0,Externals,tinydew4,2016-10-07T17:11:24Z,37,4,5,0,,0,False,en,0
7520,2,3,0,Externals,MarshallOfSound,2016-10-07T17:10:40Z,16,3,2,0,"Fixes #7519 
",13,True,en,0
7518,6,12,3,Internals,kevinsawicki,2016-10-11T10:31:34Z,59,5,5,4,"This API allows app's to determine if a high contrast theme is active on Windows in case they want to adjust their styles at startup or when the value is changed.

Chrome currently uses this API to show a popover about installing a dark theme and high contrast extension.
- [x] Add `isInvertedColorScheme` helper
- [x] Add `inverted-color-scheme-changed` event for when the theme/colors switched into and out of an inverted color scheme.

Closes #7469
",452,True,en,0
7515,1,0,0,Internals,kevinsawicki,2016-10-06T18:03:52Z,1,0,1,0,"http://electron.atom.io/docs/api/native-image/#imagegetsize

<img width=""405"" alt=""screen shot 2016-10-06 at 11 03 22 am"" src=""https://cloud.githubusercontent.com/assets/671378/19164362/827ba728-8bb4-11e6-9c73-9ab9c4940d0e.png"">

Same fix as #7496 
",249,True,nl,0
7511,3,2,0,Externals,tinydew4,2016-10-06T18:12:26Z,37,2,3,0,,0,False,en,0
7508,2,2,0,Internals,miniak,2016-10-06T18:11:31Z,6,1,3,0,,0,False,en,0
7507,1,1,0,Externals,toonborgers,2016-10-06T18:06:18Z,1,1,1,0,,0,False,en,0
7505,8,1,2,Internals,zeke,2016-10-12T05:28:16Z,67,54,6,6,"This PR:
- Adds some testing ProTips to the dev docs.
- Updates all the devDependencies in `spec/package.json` to their latest versions. Previously some versions were pinned, others were using `^`. Not sure if there was a rhyme or reason to that.
- Moves the blurb about testing to the Build System Overview page, and links to the blurb from each platform's build info page.
- Removes the badge from the dock icon, because I keep seeing it and thinking it meant 42 tests were failing:

<img width=""343"" alt=""screen shot 2016-10-05 at 9 09 47 pm"" src=""https://cloud.githubusercontent.com/assets/2289/19140711/3867f42c-8b44-11e6-8153-d3f180678306.png"">
",651,False,en,0
7502,1,1,0,Externals,squarejaw,2016-10-06T17:44:11Z,1,1,1,0,"occured ‚Üí occurred
",21,True,ur,0
7500,23,1,0,Internals,kevinsawicki,2016-10-10T01:19:02Z,151,88,16,4,"This pull request updates the crash reporter to store reports in the `app.getPath('temp')` directory instead of `/tmp` on Linux/Mac and the default temp dir on Windows.

This enables portable Electron apps to ensure crash report details are stored in the location they configure.
- [x] Update specs
- [x] Update `CrashReporter` to an ES6 class and clean up CoffeeScript leftovers
- [x] Update docs
- [x] Manually test on macOS
- [x] Manually test on Linux
- [x] Manually test on Windows

Closes #7399 
",502,True,en,0
7499,3,1,0,Externals,hokein,2016-10-07T21:06:18Z,73,2,4,2,"This PR adds a guide showing how to use `clang-format` to automatically format C++ code, which would be very useful for C++ core developers and save reviewers' time.
",166,True,en,0
7498,7,4,9,Internals,zeke,2016-10-11T21:24:13Z,29,23,3,6,"Fixes #7414
",12,True,en,0
7496,1,0,0,Internals,kevinsawicki,2016-10-05T16:36:01Z,1,0,1,0,"This looks to be required by the markdown parser used on http://electron.atom.io/docs/

| Before | After |
| --- | --- |
| <img width=""848"" alt=""screen shot 2016-10-05 at 9 26 51 am"" src=""https://cloud.githubusercontent.com/assets/671378/19122103/e0b54ae2-8add-11e6-8c77-c26e62fd933f.png""> | <img width=""845"" alt=""screen shot 2016-10-05 at 9 35 11 am"" src=""https://cloud.githubusercontent.com/assets/671378/19122382/11912d6a-8adf-11e6-8d0e-4821f4b383d4.png""> |
",461,True,en,0
7495,5,3,0,Externals,toonborgers,2016-10-05T16:34:09Z,74,0,1,0,"The Dutch translation for the CONTRIBUTING.md page
",51,True,en,0
7494,1,1,0,Externals,MichaelVasseur,2016-10-06T05:45:28Z,3,2,2,0,"This update the 'new-window' event test test to check code changes introduced by #7291.
",88,True,en,0
7491,1,1,0,Internals,kevinsawicki,2016-10-05T05:15:55Z,1,1,1,0,"This pull request pulls in https://github.com/electron/libchromiumcontent/pull/235 which enables better font fallbacks on Windows to support color emojis (among other things).

This patching of `libchromiumcontent` can be removed once the fix for https://bugs.chromium.org/p/chromium/issues/detail?id=652898 lands upstream.

Closes #7334
",338,True,en,0
7489,2,1,2,Externals,davej,2016-10-04T20:36:48Z,5,3,1,0,"I removed the description also because it seemed superfluous given the method name and type signature. I can add it back in if needed though.
",142,True,en,0
7488,12,6,1,Internals,kevinsawicki,2016-10-06T06:01:41Z,195,9,4,1,"This pull requests add cropping and resizing support to native images.
- [x] Add `resize` method
- [x] Add `crop` method
- [x] Add `getAspectRatio` method 
- [x] Add tests
- [x] Add docs

Closes #6523
",201,False,en,0
7487,1,1,0,Externals,fplucas,2016-10-05T16:33:07Z,1,1,1,0,,0,False,en,0
7486,2,1,0,Externals,fplucas,2016-10-04T17:31:08Z,71,1,2,0,,0,False,en,0
7481,1,1,0,Externals,fplucas,2016-10-04T16:11:17Z,82,1,2,0,,0,False,en,0
7479,4,3,0,Externals,bpasero,2016-10-12T20:48:03Z,66,1,4,8,"For https://github.com/electron/electron/issues/6295 

This new environment variable can be used to disable ASAR support in forked processes. The use case is:

``` javascript
var res = cp.fork(path.join(__dirname, ""forked.js""), { env: { ""ELECTRON_NO_ASAR"": ""true"" }});
```

This disables ASAR support in forked processes and does not force the forked process to set `process.noAsar`. This specifically enables to run a forked process in an environment that comes close to the real node.js environment without forcing it to use the non-node.js `process.noAsar` trick.
",567,True,en,0
7478,1,1,0,Externals,tinydew4,2016-10-04T16:10:55Z,8,2,2,0,,0,False,en,0
7471,7,3,3,Internals,zeke,2016-10-12T05:37:54Z,1499,1495,122,8,"This PR:
- Updates to standard-markdown@2.1.0 with new [`--fix`](https://github.com/zeke/standard-markdown/#fixing) flag. Thanks, @MarshallOfSound!
- Broadens the scope of `standard-markdown` linting to `doc` and `docs-translations`
- Updates all `js` fences to `javascript`
- Fixes a bunch of snippets automatically with the new `--fix` flag.
- Fixes a bunch of snippets by hand, too. üôå

Ready for üëÄ 
",408,False,en,0
7468,2,1,0,Internals,kevinsawicki,2016-10-04T05:22:49Z,7,14,4,0,"Previously, on Windows, clicking the menu on a second window when the first window's menu was open did not focus the correct window.

This pull request configures the submenu buttons to focus on press. Also removes an unused `ButtonListener` listener.

Closes #7282
",266,True,en,0
7461,1,0,0,Internals,zcbenz,2016-10-03T11:42:44Z,8,2,1,0,"Reverts electron/electron#7416 as explained in https://github.com/electron/electron/pull/7416#issuecomment-251086025.
",118,True,en,0
7457,1,1,0,Externals,josephfrazier,2016-10-03T16:22:53Z,9,6,3,0,,0,False,en,0
7456,1,1,0,Externals,amitmerchant1990,2016-10-03T16:28:22Z,1,1,1,0,"Fixed a typo on http://electron.atom.io/docs/tutorial/accessibility/ page.
",75,True,en,0
7452,1,3,0,Externals,enlight,2016-10-03T12:57:37Z,14,5,2,0,"If node::Buffer::New() is used to wrap an existing chunk of memory without providing a custom callback to release that memory then Node will just use `free()`. In a couple of places Node buffer objects were constructed from chunks of memory that were allocated with `new[]`, but a custom callback to release that memory was omitted, this resulted in undefined behavior when those buffers were destroyed because `free()` was used to release memory allocated with `new[]`.

To avoid undefined behavior the aforementioned buffer objects are now constructed with a custom callback that safely releases the underlying chunk of memory.
",630,True,en,0
7451,1,1,0,Externals,morris-stock,2016-10-03T12:35:06Z,67,1,1,0,,0,False,en,0
7449,6,7,2,Externals,amtj,2016-10-06T18:38:48Z,27,0,2,4,"Credit to @hellonearthis for starting this issue https://github.com/electron/electron/pull/6979
",96,True,en,0
7444,4,1,0,Externals,rogerlista,2016-10-03T12:19:35Z,219,0,4,1,,0,False,en,0
7437,3,6,0,Externals,fplucas,2016-10-03T22:37:52Z,81,49,4,2,,0,False,en,0
7434,1,1,0,Externals,rafaelstz,2016-10-03T16:29:54Z,1,1,1,2,,0,False,en,0
7433,1,1,0,Externals,rafaelstz,2016-10-03T16:29:26Z,4,0,1,2,,0,False,en,0
7432,1,1,0,Internals,kevinsawicki,2016-10-03T12:21:35Z,2,1,1,2,"When an embedder's render view is deleted, the guest is destroyed, https://github.com/electron/electron/blob/ff6a8fac2a370059aaf54dc027203bfedc08c630/lib/browser/guest-window-manager.js#L108-L109

This is causing issues on Windows when `WindowList::CloseAllWindows()` is called since when the first window is closed, the second window will also be closed causing a crash when `NativeWindow::Close()` is called a second time and a crash occurs when checking the accelerated widget in `IsClosable()`.

This pull request adds a check for `IsClosed()` before calling `Close()` to guard against this.

Not sure if this check is better to put in `NativeWindowViews::Close()`instead.

Closes #7074
",691,True,en,0
7429,1,0,0,Internals,kevinsawicki,2016-09-30T17:43:27Z,3,2,1,0,"Noticed the following warning in the build logs:

```
(node:972) Warning: Possible EventEmitter memory leak detected. 11 ELECTRON_RENDERER_WINDOW_VISIBILITY_CHANGE listeners added. Use emitter.setMaxListeners() to increase limit
```

This was because listeners in `<webview>` tags are only removed when `reset()` is called which happens only when the tag is removed from the DOM.

This pull request updates the `afterEach` in the specs to ensure the `<webview>` is always reset since some specs never attach it causing the listener count to continually grow.

This brings up a broader discussion about which (or all) Electron API event emitters should be configured to have infinite listeners. `webFrame` and `webContents` already have this enabled but perhaps this should be enabled for all Electron APIs since 10 listeners is pretty low.
",840,True,en,0
7428,3,2,1,Internals,kevinsawicki,2016-09-30T16:28:59Z,16,6,2,0,"This pull request is an attempt to get the specs green on the Windows CI machines, they are currently failing on a focused web contents spec that seems to be caused by a window left around after the sandbox specs.

If you run the `should open windows in another domain with cross-scripting disabled` spec locally you can see the popup window sticks around after the spec finishes.

I added an explicitly listener and close call for this window so it doesn't impact later running specs.

/cc @tarruda 

Refs https://github.com/electron/electron/pull/6919
",554,True,en,0
7427,1,1,0,Externals,tinydew4,2016-09-30T15:14:46Z,18,0,1,0,"cookie changed event
",21,True,en,0
7422,2,1,0,Externals,tinydew4,2016-09-30T14:56:07Z,44,44,9,0,"Finally, the Korean version of the ""code_of_conduct.md"" has been published in the [`Contributor Covenant`](http://contributor-covenant.org/i18n/).
I've applied here the changes.

And removes the BOM in several docs.
",216,False,en,0
7417,1,0,2,Internals,kevinsawicki,2016-09-30T20:08:35Z,3,2,1,1,"Previously, calling `show()` on a modal window multiple times would cause `beginSheet` to be called multiple times on the parent window.

This would then cause issues when `close()` was called because the number of begin/end calls would not align.

This pull request checks `sheetParent` property on the `NSWindow` and if it is present, it does not begin the sheet since it is already in progress.

Closes #7401 
",413,True,en,0
7416,1,7,0,Externals,bsclifton,2016-10-03T09:34:18Z,2,8,1,3,"First round of DPI issues we saw on Windows with `BrowserWindow => frame:false` were reported with https://github.com/electron/electron/issues/7347 and fixed with https://github.com/electron/electron/pull/7362

While creating a new release and testing our project with that fix, we ended up seeing more weird behavior on high DPI screens. After more investigation, we realized that the NativeWindowViews class was not calling DIPToScreenRect/ScreenToDIPSize for Frameless windows, which caused several issues (for screenshots / animated gifs, check out https://github.com/brave/browser-laptop/issues/4365)

The symptoms for the original issue were ONLY noticeable / easily reproducible (to my knowledge) by using Windows 10 with the anniversary update (I'm not sure if arch or home vs pro matters- but the issue does not happen unless you have the anniversary update).

Special thanks to @bridiver for finding the issue and @bbondy / @jonathansampson for testing the fix
",971,True,en,0
7415,2,2,0,Internals,kevinsawicki,2016-09-30T09:23:54Z,8,0,1,0,"This pull request ports the fix for https://bugs.chromium.org/p/chromium/issues/detail?id=642155 into Electron to remove the ""Show Tab Bar"" on macOS Sierra.

Closes #7406 
Refs #6124 
",184,True,en,0
7413,1,1,0,Externals,deepak1556,2016-09-29T17:52:47Z,2,0,1,0,"Fixes #7403 
",13,True,en,0
7407,7,12,0,Externals,MichaelVasseur,2016-10-06T05:37:48Z,52,40,2,6,"This pull request allows 'new-window' event handlers (running in the master process) to give back the BrowserWindow instance they created when the default behavior is prevented.

The suggested way to return this window is to set the new property newGuest with the newly created BrowserWindow. This may not be the best way to achieve this so others suggestions are welcome.
",373,True,en,0
7400,6,4,0,Externals,tinydew4,2016-09-29T15:52:40Z,1014,656,37,0,,0,False,en,0
7398,8,1,0,Internals,kevinsawicki,2016-09-30T09:10:44Z,205,7,12,1,"This pull requests add a `'changed'` event to the `Cookies` class that will fire when a cookie is added, edited, removed, or evicted.
- [x] Update brigthray https://github.com/electron/brightray/pull/251
- [x] Add tests

/cc @brian-mann is this along the lines of what you are looking to get access to?

Closes #5643
",317,False,en,0
7397,3,1,0,Internals,kevinsawicki,2016-09-29T16:15:12Z,51,4,3,0,"The 1.4 upgrade to Chrome 53 caused the menu bar buttons to no longer show hover/click states on Windows and Linux.

This pull request updates them to use the new ink drop effects that Chrome now uses for buttons to show feedback for press and hover.

| Windows | Ubuntu |
| --- | --- |
| <img width=""249"" alt=""screen shot 2016-09-28 at 3 29 23 pm"" src=""https://cloud.githubusercontent.com/assets/671378/18934786/a8bfb5c0-8590-11e6-86fe-9fb18567ddb8.png""> | <img width=""219"" alt=""screen shot 2016-09-28 at 3 26 18 pm"" src=""https://cloud.githubusercontent.com/assets/671378/18934790/af306eae-8590-11e6-96f8-2b87495f582a.png""> |

Closes #7279 
",642,True,en,0
7393,1,1,0,Internals,kevinsawicki,2016-09-29T08:56:31Z,1,1,1,0,"See https://github.com/electron/brightray/pull/250 for more details.

Fixes #7389
",82,True,en,0
7391,1,1,0,Externals,kiavashps,2016-09-28T17:30:59Z,1,1,1,0,,0,False,en,0
7388,2,0,0,Internals,kevinsawicki,2016-09-28T22:47:29Z,18,2,2,0,"Adds a spec for `BrowserWindow.setAlwaysOnTop(flag, level)`

Follow on to #7296 
",81,True,en,0
7379,7,10,10,Externals,MarshallOfSound,2016-10-12T05:28:39Z,205,200,18,13,"This is going to also require changes in `electron-docs-linter` and `electron.atom.io` to parse the structures folder and to display the structures on the docs site.

Fixes #7373

/cc @zeke 
",191,True,en,0
7374,1,1,0,Externals,MarshallOfSound,2016-09-29T08:44:08Z,28,25,11,1,"Couple of return and argument types were either incorrect or inaccurate

/cc @zeke 
",84,True,en,0
7372,1,1,0,Internals,zeke,2016-09-29T08:43:22Z,1,1,1,1,"@MarshallOfSound and I fixed some bugs and are collecting more structured data since the 1.4.1 release.

@zcbenz I'm hoping to get this landed in time for 1.4.2

Here's what the generated JSON currently looks like:  https://gist.github.com/zeke/fe456d817bef8631424bc60a0fb1ec03

Fixes:

<img width=""503"" alt=""screen shot 2016-09-27 at 10 03 38 pm"" src=""https://cloud.githubusercontent.com/assets/2289/18901264/652bb6a2-84fe-11e6-8e68-f8985c36afe0.png"">
",453,True,en,0
7364,1,1,0,Externals,tiagotol,2016-09-27T20:02:25Z,48,37,1,0,"Updating file for the newer english version.
",45,True,en,0
7362,1,2,0,Externals,bsclifton,2016-09-28T11:42:18Z,2,1,1,0,"Fixes mouse coordinates for Windows when display is set to a higher DPI (ex: enlarged by 150% using display settings)

Draggability was being impacted when display settings were bumped up. The wrong coordinates would be considered for the hit testing.

Fixes https://github.com/electron/electron/issues/7347
",308,True,en,0
7356,1,1,0,Internals,zeke,2016-09-27T11:05:07Z,1,1,1,0,"followings => following
",24,True,en,0
7353,1,1,0,Internals,zeke,2016-09-28T11:20:32Z,8,0,2,1,"Documentation for #7312
",24,True,en,0
7343,8,2,0,Externals,tinydew4,2016-09-27T04:47:42Z,249,75,2,1,,0,False,en,0
7342,11,2,0,Externals,tinydew4,2016-09-27T05:19:45Z,111,35,12,1,,0,False,en,0
7340,1,0,0,Externals,tinydew4,2016-09-26T19:04:22Z,1,1,1,1,"This problem also exists in translated documents.
Korean document is to be processed by separately with more changes.
Docs in other languages have not modified, because the characters that are not supported by my editor.
",221,False,en,0
7339,3,1,40,Externals,MarshallOfSound,2016-09-27T14:39:25Z,277,175,22,2,"As brought up in #7337 methods need to have the return values documented in a standard way in the docs so that `electron-api-docs` can pull out the return values correctly

Fixes #7337 
",186,True,en,0
7338,1,1,0,Externals,enlight,2016-09-26T07:39:40Z,2,2,1,1,"Example was using a non-existent method.
",41,True,en,0
7335,1,7,0,Internals,miniak,2016-10-03T11:53:42Z,1,1,1,9,"This method has the same effect as https://github.com/electron/electron/blob/master/docs/api/environment-variables.md#electron_default_error_mode-windows

This is useful for apps not using the `crashReporter` module and/or for debugging.
",238,True,en,0
7333,3,3,0,Externals,tinydew4,2016-09-24T17:04:04Z,68,5,2,0,"Change: The translation was changed due to the difference with other docs for the ""contributors"" and ""contributing"".
",117,True,en,0
7331,1,1,0,Externals,tinydew4,2016-09-24T00:19:07Z,2,2,1,0,"Fixed a problem is found during that translate documents into Korean.
",70,True,en,0
7330,4,2,0,Externals,tinydew4,2016-09-24T00:07:40Z,32,21,6,0,,0,False,en,0
7327,1,4,0,Externals,gerhardberger,2016-09-27T11:17:10Z,4,1,1,3,"This PR fixes the software output device offscreen rendering mode on macOS and adds some additional method calls for resize to work properly in offscreen mode.
",160,True,en,0
7319,3,4,0,Externals,Menci,2016-09-29T08:42:30Z,5,0,1,5,"Workaround for electron/electron#5050

Chromium only show the Tray icon with libappindicator when the env `XDG_CURRENT_DESKTOP`'s value is `Unity`. But under elementaryOS its value is 'Pantheon'.

Set it to `Unity` before app startup make the tray icon show under elementaryOS.
",278,True,en,0
7316,3,5,1,Externals,tinydew4,2016-09-26T04:56:22Z,183,64,4,3,,0,False,en,0
7314,2,2,0,Externals,tinydew4,2016-09-23T18:53:45Z,49,56,1,0,,0,False,en,0
7313,2,1,0,Internals,zeke,2016-09-27T11:03:08Z,1,1,1,4,"A possible fix for https://github.com/electron/electron/issues/7309
",68,True,en,0
7310,1,1,0,Externals,BenV,2016-09-22T16:34:19Z,1,0,1,0,"We ran into an issue when creating a 32-bit binary on 64-bit Windows where node-pre-gyp kept using the 64-bit library. Setting the `npm_config_target_arch` environment variable resolved the problem for us and caused the 32-bit binary to be built and used.
",256,True,en,0
7308,2,1,0,Externals,tinydew4,2016-09-22T16:32:41Z,42,10,6,0,,0,False,en,0
7303,1,1,0,Internals,zcbenz,2016-09-22T05:39:33Z,1,1,1,0,"It caused an error when running create-dist.
",45,True,en,0
7299,5,4,0,Externals,gioggio,2016-09-22T19:21:09Z,513,0,3,0,"This is a starting point for the Italian translation. I will try to update it as soon as I can.
Suggestion and questions, if any, are heartily appreciated.
",156,False,en,0
7298,3,1,0,Externals,deepak1556,2016-09-27T10:52:37Z,230,3,11,5,"Fixes #7184 
",13,True,en,0
7297,1,2,0,Internals,kevinsawicki,2016-09-22T05:14:38Z,17,1,3,0,"Mention cleaning your local build environment in all three platform docs.

Closes #7202 
",89,True,en,0
7296,6,13,0,Externals,adammeyer,2016-09-28T11:18:12Z,36,11,8,6,"This allows for a custom window level to be set when sending a window to the top.

```
win.setAlwaysOnTop(true, 102);
```

This can be used when the NSFloatingWindowLevel isn't high enough.  I have used this to put a window above the top menu bar.
",248,True,en,0
7295,2,1,0,Internals,kevinsawicki,2016-09-22T05:14:15Z,5,1,2,0,"Document that `nativeImage.createFromPath` returns an empty image for a bad `path`.

Closes #6844 
",99,True,en,0
7294,1,1,0,Internals,kevinsawicki,2016-09-22T05:13:49Z,8,3,1,0,"Add a note to `remote.md` that modifying buffers and arrays returned from the `remote` module does not modify them in the main process.

Closes #6734
",150,True,en,0
7293,1,1,0,Internals,kevinsawicki,2016-09-22T05:13:28Z,11,0,1,0,"Update docs for a better way to write bookmarks with fallback text links to the clipboard on Windows.

On Windows, only a few places, like the Chrome address bar, supports pasting bookmarks directly.

So using `clipboard.write` with both text and bookmark keys is the better option.

Closes #7190 
",298,True,en,0
7292,1,1,0,Internals,kevinsawicki,2016-09-22T05:11:20Z,1,1,1,0,"This pull request pulls in https://github.com/electron/brightray/pull/249 to fix certificate transparency issues in 1.4.0.

Some links with more information about certificate transparency logs:

https://www.chromium.org/Home/chromium-security/certificate-transparency
https://tools.ietf.org/html/rfc6962
https://www.chromium.org/Home/chromium-security/root-ca-policy/CTPolicyMay2016edition.pdf?attredirects=0

Closes #7221 
",424,True,en,0
7291,4,6,2,Externals,MichaelVasseur,2016-10-04T06:42:36Z,44,20,12,12,"The non-standard features (like **this-is-not-a-standard-feature**) given to window.open() are lost in the popup window creation workflow. This leads to the 'new-window' event handler not receiving these 'additional' features. These features may be used by applications to give some specific data to the popup.

NOTE : This pull request depends on pull request [#234](https://github.com/electron/libchromiumcontent/pull/234) in libchromiumcontent repo.
",453,True,en,0
7290,17,1,0,Externals,tinydew4,2016-09-21T16:04:20Z,86,44,3,0,,0,False,en,0
7287,5,1,0,Externals,tinydew4,2016-09-21T16:03:48Z,13,6,1,0,,0,False,en,0
7284,1,1,3,Externals,enlight,2016-09-22T15:40:38Z,180,101,3,1,"- Move the debugging guides for VSCode and node-inspector into separate files.
- Add instructions for using electron-inspector to the node-inspector guide.
- Remove note in node-inspector guide about crashing when inspecting `process` (it was fixed a long time ago: https://github.com/nodejs/node-v0.x-archive/issues/8205)
",323,False,en,0
7277,2,0,0,Internals,kevinsawicki,2016-09-20T21:48:48Z,3,3,2,0,"Small docs change, switch parameter types of `Dictionary` to `Object` which the rest of the docs use and is more accurate to the expected JavaScript type.
",155,True,en,0
7276,5,2,2,Internals,zeke,2016-09-21T06:16:29Z,42,9,3,0,"Another go at #7197 that fixes #6648. The [geolocation code](https://github.com/electron/electron/pull/7104) got a little hairy after the chrome 53 upgrade, so I started over.

This change allows a `GOOGLE_API_KEY` environment variable to be set (before or during runtime) that will override the default key used for making geolocation requests.

We decided to punt on adding an environment variable to customize the host URL (e.g. `https://www.googleapis.com/geolocation/v1/geolocate?key=`). If someone wants that behavior, we could later introduce another environment variable for that, or perhaps a new API for setting the geolocation request URL.

üçê  @kevinsawicki 
",673,True,en,0
7273,1,1,0,Externals,tinydew4,2016-09-20T16:00:08Z,2,2,2,0,"Contributing Guide links at top of some documents are invalid. I've changed them as a translated guide links.
",110,True,en,0
7272,3,1,0,Externals,tinydew4,2016-09-20T15:59:53Z,21,31,1,0,,0,False,en,0
7265,1,3,0,Externals,octref,2016-09-20T15:59:37Z,35,0,1,0,"I hope you don't mind me putting the VSCode part before `node-inspector`, because VSCode seems easier to setup, and VSCode could inspect `process` without crashing.
",165,True,en,0
7264,3,1,0,Internals,zeke,2016-09-20T05:31:31Z,7,6,1,0,"A few minor updates to docs/README.md
",38,True,en,0
7262,1,1,0,Externals,tinydew4,2016-09-20T07:04:26Z,4,6,1,0,"translate some sentences.
",26,True,en,0
7253,2,0,0,Internals,zcbenz,2016-09-19T08:54:31Z,12,0,3,0,"This fixes the crash in CI caused by #7062.
",44,True,en,0
7241,1,1,0,Internals,miniak,2016-09-19T07:02:52Z,17,6,5,1,"This indicates whether the renderer or gpu process was killed intentionally. Chrome's sad tab also distinguishes between crashed and killed tabs.
",146,True,en,0
7239,1,1,0,Externals,darkdh,2016-09-20T05:51:10Z,19,9,8,2,"fix #6873
",10,True,en,0
7238,1,1,0,Externals,felixrieseberg,2016-09-19T06:54:23Z,12,7,1,1,"The Windows Anniversary Update is out, so some of the language in the `appx` document needs to be updated.
",107,True,en,0
7236,1,1,3,Externals,yuya-oc,2016-09-19T06:53:45Z,11,1,2,1,"For `redo` role, `Ctrl+Y` is more consistent with other Windows applications.
",78,True,en,0
7234,1,1,0,Externals,Mossop,2016-09-19T06:47:30Z,57,0,2,2,"This is a test for #7175
",25,True,en,0
7233,1,1,0,Internals,kevinsawicki,2016-09-19T06:24:10Z,16,5,6,2,"Adds `process.versions['atom-shell']` to the 2.0 breakage doc in favor of `process.versions.electron`
",102,True,en,0
7231,1,1,0,Internals,miniak,2016-09-19T06:44:52Z,1,1,1,2,"IMHO we should only drop the `SEM_NOGPFAULTERRORBOX` flag from the currently set error mode, which includes the recommended `SEM_FAILCRITICALERRORS`.
",150,True,en,0
7230,1,1,0,Internals,kevinsawicki,2016-09-19T06:23:41Z,1,0,1,2,"Windows CI is current failing with the following errors:

```
FAILED: C:\Python27\python.exe gyp-win-tool link-with-manifests environment.x64 True electron.exe ""C:\Python27\python.exe gyp-win-tool link-wrapper environment.x64 False link.exe /nologo /OUT:electron.exe @electron.exe.rsp"" 1 mt.exe rc.exe ""obj\electron.electron.exe.intermediate.manifest"" obj\electron.electron.exe.generated.manifest ..\..\atom\browser\resources\win\atom.manifest

os_crypt.lib(os_crypt.os_crypt_win.obj) : error LNK2019: unresolved external symbol CryptProtectData referenced in function ""public: static bool __cdecl OSCrypt::EncryptString(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > *)"" (?EncryptString@OSCrypt@@SA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAV23@@Z)

os_crypt.lib(os_crypt.os_crypt_win.obj) : error LNK2019: unresolved external symbol CryptUnprotectData referenced in function ""public: static bool __cdecl OSCrypt::DecryptString16(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<wchar_t,struct std::char_traits<wchar_t>,class std::allocator<wchar_t> > *)"" (?DecryptString16@OSCrypt@@SA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z)

electron.exe : fatal error LNK1120: 2 unresolved externals
```

This pull requests adds `crypt32.lib` to the link settings to address this.

I think this might be related to the brightray upgrade for #7073 
",1665,True,en,0
7229,1,1,0,Externals,hokein,2016-09-19T06:23:57Z,1,1,1,2,"Update clang to use the same version with Chrome 53.
",53,True,en,0
7227,3,3,3,Externals,felixrieseberg,2016-09-19T17:22:28Z,12,2,1,2,"This commit ensures that arguments passed to `appendSwitch` and `appendArgument` are turned into strings before passing them over to the binding.

I'm not super married to this one (since the documentation dooooeeeees say that the method expects a string), but this is a really easy thing for us to do in order to make dev's lives easier.

Closes #7220
",353,True,en,0
7226,5,1,0,Internals,kevinsawicki,2016-09-19T06:25:18Z,14,11,5,2,"This pull request rethrows caught errors from `process.binding` to surface the exceptions that certain modules like `screen` and `powerMonitor` throw if called before the app ready event is fired

Previously requiring `powerMonitor` too early would throw error messages like:

```
TypeError: Cannot match against 'undefined' or 'null'.
```

Now it throws messages like:

```
Error: Cannot initialize ""powerMonitor"" module before app is ready.
```

Closes #7225 
",462,True,en,0
7213,1,0,0,Internals,zcbenz,2016-09-15T05:44:10Z,3,3,3,0,"The latest stable.
",19,True,en,0
7211,27,1,0,Externals,preco21,2016-09-15T16:27:10Z,1346,555,37,0,"Long time no see ;)
",20,True,en,0
7209,4,2,1,Internals,kevinsawicki,2016-09-16T12:11:12Z,25,1,3,1,"A remote function that is no longer available when its properties are accessed will throws error when the member metadata is lazily loaded.

This pull request guards against this case and at least partially fixes #7196, specifically the `Cannot read property 'Symbol(Symbol.iterator)' of undefined` errors.
",307,True,en,0
7195,1,1,0,Externals,Joshua-Anderson,2016-09-14T16:52:23Z,1,1,1,0,"None of the other building guides (windows or osx) specify a nodejs version requirement and the `.node-version` is set to `v6.3.0`, considerably higher than `v0.12.x`.
",168,True,en,0
7189,1,1,0,Internals,kevinsawicki,2016-09-14T05:31:10Z,9,0,1,0,"For backwards compatibility, until 2.0, keep the old ARM assets without the `v7l` suffix introduced in #6986.

Refs https://github.com/electron/electron/issues/7075
",165,True,en,0
7188,2,1,0,Internals,kevinsawicki,2016-09-14T05:30:46Z,9,4,1,0,"This pull request marks the `app.isReady()` API as public.
",59,True,en,0
7182,4,1,0,Internals,kevinsawicki,2016-09-13T07:46:05Z,59,55,5,0,"This pull request switches `shell.showItemInFolder` and `shell.openItem` to return a `Boolean` instead of undefined indicating the success of the call. This makes these two APIs consistent with `shell.openExternal` that already returns a Boolean.

Refs https://github.com/electron/electron/issues/7176
",302,True,en,0
7178,1,2,0,Externals,aichingm,2016-09-16T08:43:10Z,36,7,1,3,"# Add support for kioclient, kioclient5 and trash-cli in MoveItemToTrash.

The desired implementation has to be specified in the environment variable `ELECTRON_TRASH` . If none is it will fallback to `gvfs-trash`. Valid values for  `ELECTRON_TRASH` are:
- kioclient5
- kioclient
- trash-cli

It will also fallback to `gvfs-trash` if the value of `ELECTRON_TRASH` is none of the above.

This fixes: 
- #6847
- #637

and allows users of kde, xfce and other desktop environments to delete files and folders without the need of gvfs.
",530,True,en,0
7175,1,1,0,Externals,bsuh,2016-09-13T07:01:00Z,1,1,1,1,"In-page navigation has not actually started if the current entry is
being replaced. Do not set inPageIndex if replaceEntry is true.

Load Twitch frontpage
![image](https://cloud.githubusercontent.com/assets/47231/18420904/b2fd5c2e-7832-11e6-86c9-bf637974ac76.png)

Navigate out of page to game directory
![image](https://cloud.githubusercontent.com/assets/47231/18420828/ed04da20-7830-11e6-8339-b3ac749b0d3d.png)

Go back in history to frontpage
![image](https://cloud.githubusercontent.com/assets/47231/18420910/c52caea4-7832-11e6-8f41-8cc4001ec5d1.png)

Attempt to go forward in history

I believe the Twitch frontpage uses `window.history.replaceState()` on load and this leads `NavigationController` to believe that in-page navigation has started and that `this.webContents._goForward()` should be used instead of out-of-page navigation `this.webContents._loadURL()`.
",872,False,en,0
7173,6,10,17,Externals,MarshallOfSound,2016-09-20T05:06:21Z,169,13,6,9,"This is useful for automatic app theming
- Fetches the color from the registry
- Returns an empty string if the fetch fails (a falsey value)
",141,False,en,0
7169,3,1,2,Externals,deepak1556,2016-09-16T12:19:21Z,25,4,6,5,"Also we didn't handle alt+click on links with no download attribute, chrome downloads for that gesture but we generate a `new-window` event. This patch fixes it in a separate commit, can be reverted if not desired. 

Fixes #7151 
",230,True,en,0
7163,5,6,0,Externals,gerhardberger,2016-09-16T12:24:53Z,13,0,1,6,"This PR fixes the scale factor issue that was present when enabling frame subscription in `<webview>`s. #7158 

Also it simplifies the frame subscription API exposing a `NativeImage` instead of a `Buffer`.
",206,True,en,0
7162,1,1,0,Internals,kevinsawicki,2016-09-12T16:31:12Z,21,0,1,2,"Document the `com.apple.security.network.client` and `com.apple.security.network.server` entitlements that are required if your app makes outbound requests or wants to bind to a socket such as for hosting a localhost http server.

https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW9

I verified both of these using the Electron API Demos app.

Refs https://github.com/electron-userland/electron-prebuilt/issues/141
",537,True,en,0
7160,1,1,0,Externals,PierBover,2016-09-13T06:09:04Z,2,0,1,3,,0,False,en,0
7157,1,9,0,Externals,Mossop,2016-09-20T05:28:42Z,425,64,12,10,"This adds a guestinstance attribute to webviews. When the webview first loads it updates its guestinstance with the instance ID for the webcontents. Setting the attribute to an existing guestinstance moves the webcontents to the new webview and sends a destroy event on the original webview. This fixes #1871.

This also adds the did-attach event since it is useful for detecting when the move is complete and I think that that fixes #6972 as did-attach is sent for the first navigation too.
",492,True,en,0
7154,1,1,0,Externals,deepak1556,2016-09-12T05:34:42Z,47,30,2,2,"When the option is set, `AtomAccessTokenStore::LoadAccessTokens` will be called multiple times. This resulted in a race condition with destruction of `request_context_getter_` member. The patch moves the loading task to a separate class where the lifetime is managed separately.

/cc @zcbenz 
",293,True,en,0
7153,1,3,0,Externals,VarunAgw,2016-09-09T15:05:38Z,1,1,1,0,,0,False,en,0
7146,7,1,0,Internals,kevinsawicki,2016-09-09T10:58:41Z,67,3,4,0,"This pull request changes how the URLs passed to `window.open`, the `<webview>` `src` attribute, and the `<webview>` `preload` attribute are resolved.

`window.open` with either a null URL or an empty string URL now opens `about:blank`. Previously it would resolve `null` agains the current path and open something like `file:///foo/bar/null` and empty string would open the current page. Opening `about:blank` instead seems to be more consistent with the Chrome behavior and the [`window.open`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) docs.

Empty string `src` and `preload` attributes are now ignored instead of resolved to the current page's URL.  This prevents accidentally loading the current HTML page as a `preload` script or accidentally loading the current page into the `<webview>`.

Closes #7035 
",830,True,en,0
7145,6,8,0,Internals,kevinsawicki,2016-09-09T14:38:24Z,37,14,1,0,"Previously there were several `BrowserWindow` specs that failed when run on displays using a non-integer device scale factor such as `1.5` or an odd number value like `3`.

This was due to the rounding of pixel values that occurs when converting content and window size and position.

This pull request switches these specs to use a `assertBoundsEqual` helper method that allows the expected value to be off by 1 when run on non-integer scale factor screen.

An alternative to this would be calling `app.commandLine.appendSwitch('force-device-scale-factor', '2')` in the specs themselves but then the runner window would be a possibly annoying scale factor that might make it hard to use for certain people.

/cc @Haacked 
",723,True,en,0
7143,4,1,0,Internals,kevinsawicki,2016-09-08T23:13:16Z,13,3,3,0,"This pull request address two spec failures currently happening when running the specs on Windows not in CI mode.

```
crashReporter module
  should send minidump when renderer crashes

process.stdout
  should have isTTY defined
```

/cc @Haacked 
",248,True,en,0
7142,4,1,0,Internals,kevinsawicki,2016-09-09T10:52:53Z,54,1,9,0,"Require `Buffer` explicitly instead of relying on it being a global.

This is done in both processes for consistency, and should enable the `Buffer` global to be successfully deleted in preload scripts.

Also adds mention of it being a global in `security.md`.

Refs #7081 
Refs #7114 
",286,True,en,0
7140,2,1,0,Externals,liusy182,2016-09-12T05:46:05Z,3,2,1,3,"`currentEntry` is taken from string array `this.history`. It represents an url string but not an object. The field `currentEntry.url` should not be accessible by any means. I believe this was a coding error made by mistake. This PR fixes this bug.
This PR also removes `return` statement from the callback in order to keep consistency.
",336,False,en,0
7133,1,2,0,Internals,kevinsawicki,2016-09-08T18:13:00Z,4,3,1,0,"Experimenting with upgrading the version of node Travis builds with.
- Switches to use `node_js` workers instead of `cpp` workers for easier node version management
- Upgrade to `xcode7.3` osx workers since they have `nvm` pre-installed
",237,False,en,0
7132,1,0,0,Internals,kevinsawicki,2016-09-07T23:49:21Z,2,2,2,0,"This add a `npm run lint-py` script that calls through to `script/pylint.py` and is now part of the main `npm run lint` task.
",126,True,en,0
7131,1,1,0,Internals,kevinsawicki,2016-09-08T06:53:07Z,1,0,1,0,"Call `endSheet` on parent when explicitly closing modal window so that other sheets (like message boxes) can be shown on the parent in the future.

Closes #6293
",161,True,en,0
7130,3,1,0,Internals,kevinsawicki,2016-09-08T06:04:10Z,37,19,3,0,"This pull requests moves the `process.stdin` patching from the `browser/init.js` to `common/init.js` so it happens in both the browser and renderer processes on Windows.

This prevents errors accessing and reading from it from the renderer processes.

Previously it would throw a `Implement me. Unknown stdin file type!` when accessed.

Closes #7088 
",351,True,en,0
7129,1,1,0,Externals,adamkidder,2016-09-08T16:37:05Z,2,1,1,0,"For our usecase we would like to specify a custom version of Chromium to include. This commit allows the static definition of LIBCHROMIUMCONTENT_COMMIT in config.py to be optionally overridden with an environment variable.
",223,True,en,0
7128,5,5,0,Internals,kevinsawicki,2016-09-08T16:21:26Z,80,0,2,0,"Even though 1.0 was recently released and 2.0 probably won't be for awhile, I've started a document for the things we've already renamed (but kept around the old names) since 1.0 and marked for 2.0 removal.

The goal of the `API.md` document is to explicitly list the planned breakage so you don't have to grep the code base or `TODO` comments for what is going away in 2.0.

It also explicitly commits to at least a 90-day deprecation window before 2.0 so people will see logged warnings similar to the lead up to the 1.0 release.

/cc @electron/maintainers 
",560,True,en,0
7123,4,1,0,Externals,deepak1556,2016-09-09T11:59:12Z,62,42,4,2,"- [x] Add test

Fixes #5621 
",29,True,en,0
7120,9,4,6,Internals,zeke,2016-09-16T21:05:32Z,9,2,3,9,"This is a followup to https://github.com/electron/electron/pull/6408, a closed PR which I was unable to re-open after a force-push. Please see that PR for context on this effort.

I finished everything in the [electron-docs-linter milestone](https://github.com/zeke/electron-docs-linter/milestone/1) and with @kevinsawicki's help I've added the necessary code to upload the generated JSON object along with the Electron release.

@zcbenz this is ready for review.
",464,True,en,0
7119,2,3,0,Internals,kevinsawicki,2016-09-07T15:46:37Z,4,0,6,0,"This moves the translations of the root `README.md` and `CONTRIBUTING.md` files into a `project/` folder under their appropriate locale in the `docs-translations` folders.

Refs https://github.com/electron/electron/pull/7068

/cc @jlord @zcbenz @zeke
",251,True,en,0
7116,2,1,0,Internals,kevinsawicki,2016-09-07T07:50:26Z,13,3,2,0,"Previously is `execSync` threw an error the value of `process.noAsar` would be left as `true` instead of reset to its original value.

Closes #7011 
",149,True,en,0
7113,1,0,0,Internals,kevinsawicki,2016-09-06T20:42:37Z,4,4,1,0,"Noticed while debugging another issue that some variables from the default app were ending up as properties on `window`.

This pull request switches them to `const` to prevent this.
",182,True,en,0
7110,1,1,0,Internals,kevinsawicki,2016-09-07T07:32:23Z,4,2,1,0,"https://github.com/electron/electron/pull/6480 added requiring `webContents` from `Menu` which caused a circular require causing the `Menu.buildFromTemplate` function to be missing which was used by the pepper flash context menu.

This pull request accesses `Menu` from `webContents` via `electron.Menu` so that the function is available once the require loop completes.

Closes #7086 
",386,True,en,0
7104,16,6,7,Internals,zcbenz,2016-09-14T13:18:08Z,509,285,69,8,"Debug build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Release build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Tests passing on:
- [x] OS X
- [x] Linux
- [x] Windows

Merge:
- [x] https://github.com/atom/libchromiumcontent/pull/230
- [x] https://github.com/electron/brightray/pull/247
",302,False,en,0
7096,8,37,5,Externals,minggo,2016-09-13T07:01:56Z,20,3,4,7,"Sometimes you want to create a browser window that can not open devtools for security. This PR just do it, you create a browser window like 

``` javascript
cont window = new BrowserWindow({width: 800, height: 600, disableDevTools: true})
```
",243,True,en,0
7077,1,5,0,Internals,miniak,2016-09-09T11:27:26Z,101,14,2,6,"Follow up to: https://github.com/electron/electron/pull/6848
",61,True,en,0
7068,1,3,0,Externals,duncup,2016-09-06T21:47:18Z,155,0,2,4,,0,False,en,0
7062,5,3,4,Externals,gerhardberger,2016-09-19T06:38:11Z,43,6,5,17,"This PR adds an `invalidate` method to `webContents` to manually request a new frame in offscreen mode.

And also fixes the issue that a browser did not resize properly in offscreen mode.
",188,True,en,0
7059,2,1,0,Externals,malept,2016-09-02T00:37:28Z,5,5,3,0,"Architecture reference consistency and missing words.
",54,True,en,0
7053,5,3,1,Externals,CharlieHess,2016-09-09T11:01:40Z,28,11,8,8,"This PR is an attempt to address https://github.com/electron/brightray/issues/168. Rather than clear out all notifications, we'll check for the `NSApplicationLaunchUserNotificationKey` and if found, send any notification arguments stashed in `userInfo` to the `app.ready` event. For Windows & Linux, this will always be an empty dictionary.
",341,True,en,0
7041,1,1,2,Externals,Ikana,2016-08-31T12:01:49Z,6,0,1,0,"üìù üìù üìù
resolves #6978 
",31,False,he,0
7029,1,0,0,Internals,zcbenz,2016-08-30T08:09:38Z,0,2,1,0,"Reverts electron/electron#7003 per https://github.com/electron/electron/pull/7003#issuecomment-243112371.
",106,True,ca,0
7028,1,1,0,Externals,MarshallOfSound,2016-08-30T10:36:03Z,8,5,3,0,"Fixes #7025
",12,True,en,0
7026,1,1,0,Externals,Menci,2016-08-30T10:31:31Z,4,0,1,0,"I googled a lot and found this way. I think I should add it to the document to save others' time.
",98,True,en,0
7018,1,2,0,Externals,HanaeKae,2016-08-30T08:52:05Z,55,17,2,1,"This problem has been resolved.
https://github.com/electron/electron/issues/5704#issuecomment-238473029

From this source, it was to merge the case of Windows.
https://chromium.googlesource.com/chromium/src.git/+/master/chrome/renderer/pepper/pepper_flash_font_file_host.cc#71
",277,False,en,0
7006,1,0,0,Internals,zeke,2016-08-27T19:18:45Z,1,1,1,0,"(a tiny pull request)

üî¨
",28,True,en,0
7003,1,3,0,Externals,bridiver,2016-08-29T07:36:44Z,2,0,1,2,"fixes main window remaining in fullscreen when a webview in html fullscreen is removed
",87,True,en,0
7002,3,1,0,Internals,kevinsawicki,2016-08-29T06:19:05Z,96,89,57,2,"This pull request enables the `build/include_alpha` cpplint filter rule for the `atom/` directory which checks for alphabetical ordering of `#include` statements.

This was mostly being followed implicitly but now it is explicitly checked for.

Most files were already  in compliance and a few had minor changes needed.

Something worth linting for? üëç / üëé
",362,True,en,0
7001,3,7,0,Internals,kevinsawicki,2016-08-29T06:15:14Z,7,5,2,2,"In commit https://github.com/nodejs/node/commit/4d4cfb27ca7718c7df381ac3b257175927cd17d1, some changes were made to how Node supports the `--debug-brk` flag that caused Electron's support for it to stop working in 1.3.0+.

From that commit's message:

> Do not depend on the existence of global.v8debug as a mechanism to
>   determine if --debug-brk was specified.

Excerpts from that commit's diff:

``` diff
-  if (debug_wait_connect) {
-    const char expose_debug_as[] = ""--expose_debug_as=v8debug"";
-    V8::SetFlagsFromString(expose_debug_as, sizeof(expose_debug_as) - 1);
-  }
```

``` diff
+  // --debug-brk
+  if (debug_wait_connect) {
+    READONLY_PROPERTY(process, ""_debugWaitConnect"", True(env->isolate()));
+  }
```

``` diff
-        if (global.v8debug &&
+        if (process._debugWaitConnect &&
```

``` diff
-      global.v8debug.Debug.setListener(function() {});
-      global.v8debug.Debug.setBreakPoint(compiledWrapper, 0, 0);
+      delete process._debugWaitConnect;
+      const Debug = vm.runInDebugContext('Debug');
+      Debug.setBreakPoint(compiledWrapper, 0, 0);
```

This pull request sets `process._debugWaitConnect` to `true` when `--debug-brk` is specified on the command line and removes setting `--expose_debug_as=v8debug` which is no longer used by Node.

Screenshot of `npm start -- --debug-brk` working on master üëá 
<img width=""1280"" alt=""screen shot 2016-08-26 at 12 14 41 pm"" src=""https://cloud.githubusercontent.com/assets/671378/18017517/b41cec0e-6b86-11e6-8f44-823c728df0c0.png"">

Closes #6608 
",1542,True,en,0
6998,12,3,3,Internals,kevinsawicki,2016-08-31T11:45:26Z,46,0,2,4,"While looking into the crash in #6992 introduced via #6776, I came across https://chromium.googlesource.com/chromium/src/+/0af364dd5cac55192409e88cbb47cb8ce4209683 which states:

> Don't serialize any DOM objects in V8ValueConverter, it can be extremely slow.
> There have been several attempts to implement this in the past, but none have
> actually stuck for various reasons. This patch uses the same technique that
> Blink has for structured cloning.

It looks like removing the `HasRealNamedCallbackProperty` to get this working initially in #6776 has caused certain objects, specifically the `http.ClientRequest` object in Node to now cause crashes when serialized over IPC.

This pull requests adds a `InternalFieldCount` check that prevents the crash but also removes support for DOM objects over IPC.

I'm not sure if there is another way to fix this to keep DOM objects working but prevent the crashes since the stack trace for the current crash is pretty deep in v8: https://cs.chromium.org/chromium/src/v8/src/objects.cc?l=2981
",1039,True,en,0
6989,1,1,0,Externals,Menci,2016-08-26T11:57:26Z,1,1,1,0,"I just saw a PR, ""titleBarStyle: 'hidden'"" supports macOS 10.9 now.

See https://github.com/electron/electron/pull/6848 and https://github.com/electron/electron/pull/6848/commits/ab8fd49c72e275fe8fb9697f466546c4bfb156aa for more info.

So I added that to the doc.
",264,True,en,0
6986,3,8,0,Internals,kevinsawicki,2016-08-31T11:35:59Z,26,43,3,5,"This pull requests adds the `v7l` suffix to ARM build release assets so they can eventually be disambiguated from future `armv6l` and `arm64` assets that may be produced.

This mirrors the ARM build names that node uses: https://nodejs.org/dist/v4.5.0/
### Example
- Old name: `electron-v1.3.4-linux-arm.zip`
- New name: `electron-v1.3.4-linux-armv7l.zip`

This will be backported to all 1.0+ releases but no old assets will be deleted.

Closes #2343 
Refs #5706
",463,True,en,0
6985,5,1,4,Internals,zeke,2016-08-26T00:28:36Z,12,6,4,0,"üìù üìù üìù 
",16,True,he,0
6984,1,2,0,Internals,kevinsawicki,2016-08-26T11:56:47Z,15,0,1,0,"Adds docs using the web content's docs for these methods as a template.

Refs #6958 
",85,True,en,0
6983,3,3,0,Internals,kevinsawicki,2016-08-26T11:41:03Z,39,19,3,0,"For failing URLs (such as 404s), it looks like `AtomDownloadManagerDelegate::DetermineDownloadTarget` is called before the `will-download` event fires so the wrapped `api::DownloadItem` class has not been created yet and so `AtomDownloadManagerDelegate::OnDownloadPathGenerated` is called to prompt for the path even when it was explicitly set on the download item.

This pull requests adds a check to `AtomDownloadManagerDelegate::OnDownloadPathGenerated` to see if the specified item has a save path and only prompt when that path is empty.

Closes #6784 
",558,True,en,0
6981,1,0,0,Internals,kevinsawicki,2016-08-25T20:45:42Z,4,4,4,0,"`Window::WillDestoryNativeObject` ‚û°Ô∏è `Window::WillDestroyNativeObject` 
",76,True,zh,0
6980,1,2,0,Internals,zeke,2016-08-25T18:25:01Z,64,31,7,0,"Replaces https://github.com/electron/electron/pull/6962, where I got into submodule hell üò± 

For every method of every API, I compared its signature (e.g. `(switch[, value])` with its `<ul>` of documented parameters. This PR:
- documents all module method parameters
- documents all class instance method parameters
- treats getters like `remote.process` and `win.closed` as properties instead of methods
",408,True,en,0
6977,2,1,0,Internals,kevinsawicki,2016-08-26T11:26:00Z,84,15,4,0,"Port over the https://bugs.chromium.org/p/chromium/issues/detail?id=606955 fix from Chromium to Electron's `V8ValueConverter` to improve cycle detection in arguments passed over IPC calls.

This allows duplicate references in arrays and objects that aren't true cycles to be sent successfully over IPC that were previous `null`-ed out.

Chromium fix: https://chromium.googlesource.com/chromium/src/+/275ec3e2a5ce1d16fc9c2a0dab3b58f8a7b9fa38

Closes #3598
",455,True,en,0
6963,6,2,0,Internals,kevinsawicki,2016-08-25T08:29:12Z,27,5,3,0,"This pull request switches to using `Buffer.from` instead of `Array.slice` when generating remote metadata to be sent over IPC.

This reduces the time taken to send a 10mb PDF `Buffer` as an argument to a remote function from ~10 seconds to ~100ms. This makes it equivalent in time to calling `ipcRenderer.sendSync` and sending the `Buffer` as an argument to that API.

Closes #6942 
",384,True,en,0
6961,1,1,0,Internals,kevinsawicki,2016-08-25T00:23:02Z,1,1,1,0,"Previously calling `setFullScreen(false)` on an invisible window on Linux would show it and move it to fullscreen mode.

Closes #6954 
",135,True,en,0
6952,4,1,2,Externals,deepak1556,2016-08-25T00:28:34Z,56,4,5,0,"It isn't necessary for the scheme to be standard for accessing filesystem api, but the registeration has to happen during context creation which means to add another api to protocol for use before `ready` event. Would it be better to have an api like

```
protocol.registerCustomSchemes({
  'scheme1': 'filesystem, standard',
  'scheme2': 'serviceworker'
})
```

instead of a strict `registerStandardSchemes` api, thoughts ?

Fixes #6949 
",439,True,en,0
6948,1,6,0,Internals,zeke,2016-08-24T21:37:19Z,6,3,1,0,"Fixes https://github.com/zeke/electron-docs-linter/issues/21 so we can bring the linter in as a dependency.

:fingers_crossed:
",127,True,en,0
6944,4,2,2,Internals,kevinsawicki,2016-08-24T07:25:27Z,28,10,3,0,"It looks like `WebContentsView::GetTopLevelNativeWindow` falls to back calling `WebContentsViewDelegate::GetNativeWindow` when the native view has no window and since the delegate isn't checked for being `null`, a crash will happen in certain scenarios.

This pull request switches the `WebContents::IsFocused` API to access the native window directly from the native view so this delegate fallback is never performed.

This looks to be a bug in Chrome since everywhere else in `WebContentsView` uses guards around `delegate()` to check that it is present before calling into it except in `GetTopLevelNativeWindow`.

https://cs.chromium.org/chromium/src/content/browser/web_contents/web_contents_view_mac.mm?l=150

https://cs.chromium.org/chromium/src/content/browser/web_contents/web_contents_view_aura.cc?l=626

Closes #6940
",827,True,en,0
6941,7,2,5,Externals,deepak1556,2016-09-16T08:01:15Z,321,0,11,24,"Also adds a generic way to access blob data in the main process from either public blob url or uuid.

Fixes #6894 
",115,True,en,0
6938,1,0,0,Externals,jlord,2016-08-23T16:30:02Z,33,0,1,0,"This adds documentation under the tutorials section on accessibility tools in Electron. Support has recently been added to Spectron and Devtron ‚ú® 
",149,True,en,0
6936,1,1,0,Internals,zeke,2016-08-22T22:49:48Z,1,1,1,0,"Fixes https://github.com/electron/electron/commit/1985432e8e0ebfeb6cc720c0fb889c6c472cbcb5#commitcomment-18732039

Hat tip to @nikola and @sbruchmann
",150,True,en,0
6935,3,1,0,Internals,kevinsawicki,2016-08-23T07:40:36Z,9,5,2,0,"Default throttling values to `0.0` so [DevToolsNetworkConditions::IsThrottling](https://github.com/electron/brightray/blob/242feb1c817565de6592e9e672c136635bfff453/browser/net/devtools_network_conditions.cc) will return the expected value when they are unspecified.

Closes #6928 
",281,True,en,0
6934,2,1,2,Internals,zeke,2016-08-23T17:16:29Z,23,13,3,0,"An answer to https://github.com/zeke/electron-docs-linter/issues/23

Some API classes are documented within a file for a different ""module"":

| Class | File |
| --- | --- |
| `WebRequest` | `session.md` |
| `Cookies` | `session.md` |
| `Session` | `session.md` |
| `WebContents` | `web-contents.md` |
| `Debugger` | `web-contents.md` |
| `NativeImage` | `native-image.md` |

Currently, these classes are deriving their description from the blockquote at the top of each file. This PR is an attempt to give each class its own unique description.

I know the wording in these new descriptions is not great. Please help me fix it, keeping in mind the different responsibilities of similarly-named modules and classes such as `nativeImage` and `NativeImage`
",754,True,en,0
6932,3,1,0,Internals,zeke,2016-08-22T19:30:00Z,8,11,6,0,"Found a few issues while linting with @kevinsawicki 
",53,True,en,0
6926,2,0,0,Internals,zcbenz,2016-08-22T11:08:09Z,27,4,2,0,"This fixes #6830 which was introduced by #6707.

V8 5.2 has some compatibility mode for `SetAutorunMicrotasks`, so either calling it with `true` or `false` would make V8 use a different mode from blink. This PR makes V8 use `SetMicrotasksPolicy(v8::MicrotasksPolicy::kScoped)` in renderer process, so it is not crashing and does not revert the previous bug.
",358,True,en,0
6925,2,2,0,Externals,BraveNewMath,2016-08-26T21:17:55Z,9,1,1,4,"path to electron needs to be wrapped in quotes or else windows command prompt will error out
",93,True,en,0
6923,2,0,0,Internals,zcbenz,2016-08-22T02:00:07Z,51,73,4,0,"When the args of `setAsDefaultProtocolClient` is empty, the generated path should be `""/path/to/exe"" ""%1""`(one space) instead of `""/path/to/exe""  ""%1""` (two spaces), the extra space there would break compatibility with previous API.

Also cleans up all the usages of `std::wstring` and UTF conversions in `browser_win.cc`.
",323,True,en,0
6922,1,1,0,Externals,TomKaltz,2016-08-22T07:52:18Z,1,0,1,0,"Cerebral Debugger devtools extension is now supported under Electron. Related #6918
",84,True,en,0
6919,15,37,27,Externals,tarruda,2016-09-27T12:02:57Z,1057,102,35,36,"This PR adds a `sandboxed` option that can be passed to `webPreferences` of `BrowserWindow` constructor. Passing this option will completely change the renderer implementation of the new window: It won't have any node.js integration, and all system interaction happens through IPC.

It also adds a `--enable-sandbox` command-line option that enables chromium OS-level sandbox for all renderers, and if this option is passed, then all `BrowserWindow` instances will have the `sandboxed` option passed automatically(since they would not work otherwise).

This PR also restores chromium native `window.open` API for sandboxed windows as there should be no issue in having multiple webContents for one sandboxed renderer(since there's no node.js context)

While the PR is relatively big, it is mostly made of required infrastructure changes to support the new code. The implementation is relatively simple: For renderers with the `sandboxed` option enabled, the  `AtomSandboxedRendererClient` class is used. This class is unrelated to `AtomRendererClient` as it takes a very different approach to inject preload scripts and expose the `ipcRenderer` module(I've tried to reuse as much as possible, though). To support a basic commonjs environment in sandboxed renderers, browserify is used and integrated into the build system.

I've tried to make commits small and self contained as possible, so reading each commit individually is the recommended way to review. 

Close #1865
",1473,True,en,0
6913,1,1,0,Externals,markwylde,2016-08-22T02:19:09Z,3,3,2,1,"Really small spelling mistake
",30,True,en,0
6900,2,1,2,Internals,zeke,2016-08-22T01:46:03Z,23,2,2,2,"It's not immediately obvious from the existing docs that a local filepath can be used when loading content into a new BrowserWindow, but that's probably what most users want to do.

This PR updates the docs in a few places to make it more clear that `file://` URLs are supported.
",280,True,en,0
6896,1,4,0,Externals,malept,2016-08-24T07:15:22Z,1,1,1,5,"For context, please see https://github.com/electron/electron/pull/6676#discussion_r75332120.
",93,True,en,0
6888,1,1,0,Internals,kevinsawicki,2016-08-18T06:27:09Z,1,1,1,0,"When testing locally, errors in render process code can cause the spec runner to not display if the error occurs when requiring `'electron'`.

This pull request sets the window to show by default when not in CI mode so these errors can be inspected from the dev tools.
",269,True,en,0
6882,1,1,0,Externals,duncup,2016-08-18T02:51:43Z,2,2,1,0,"Fix typos,`ÂΩìÂâç‰πü` change to `ÂΩìÂâçÈ°µ`
‰øÆÊ≠£ÈîôÂà´Â≠óÔºå`ÂΩìÂâç‰πü`Êîπ‰∏∫`ÂΩìÂâçÈ°µ`
",91,False,zh,0
6881,1,0,0,Internals,zcbenz,2016-08-17T12:13:31Z,2,3,1,0,"This fixes a breakage caused by #6814 when choosing client certificates.

I'm still nervous about the change since the Chromium API strongly suggests it is binary data, but let's see if any user reports back.
",209,True,en,0
6875,1,3,0,Internals,zeke,2016-08-17T15:51:20Z,0,2,1,0,"This removes the following rule from the styleguide:

> Files should **NOT** end with new line, because we want to match Google's styles.
",138,True,en,0
6874,1,0,0,Internals,kevinsawicki,2016-08-16T23:42:02Z,3,4,1,0,"Noticing a flaky spec on CI:

```
not ok 261 webContents module getAllWebContents() API returns an array of web contents
  AssertionError: 5 == 4
      at /var/lib/jenkins/workspace/electron-linux-x64/spec/api-web-contents-spec.js:38:16
      at CallbacksRegistry.apply (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/common/api/callbacks-registry.js:54:39)
      at EventEmitter.<anonymous> (/var/lib/jenkins/workspace/electron-linux-x64/out/D/resources/electron.asar/renderer/api/remote.js:241:21)
      at emitThree (events.js:116:13)
      at EventEmitter.emit (events.js:194:7)
```

This pull request tweaks a bit to hopefully get it consistently passing until we find the true cause of the flakiness.
",736,True,en,0
6872,1,1,0,Internals,kevinsawicki,2016-08-17T13:35:16Z,1,1,1,0,"The Hide Extension button only appears to be application to save dialogs and has no effect on open dialogs when toggled, so only show it on save dialogs.

Showing this button for open dialogs was previously causing the New Folder button to overlay on top of the Hide Extension button.

Closes #6866 
",300,True,en,0
6871,1,0,0,Externals,jlord,2016-08-17T15:52:42Z,3,3,2,0,"This updates the docs üìñ in two places where we were using the `electron-prebuilt` module name. The module name has been updated to just `electron`. 
- I mention both `electron` and `electron-prebuilt` in `electron-versioning.md` as users to this doc may still be on the older module.
- I just mention `electron` in `quick-start.md` because it seems best to point people starting off to the new module.

[Blog post on the module name update](http://electron.atom.io/blog/2016/08/16/npm-install-electron) üìù 

cc @zeke 
",523,False,en,0
6870,4,1,0,Internals,zeke,2016-08-17T15:52:07Z,12,10,8,0,"This updates `standard-markdown` to version 1.2.1, which allows a few exceptions to the `standard` rules. See https://github.com/zeke/standard-markdown/issues/2 for more info.

undeclared variable:

``` js
win.close()
```

unused variable:

``` js
const {BrowserWindow} = require('electron')
```

orphan object: 

``` js
{
  marginsType: 0,
  printBackground: false
}
```

orphan array:

``` js
['this', 'array', 'is', 'okay', 'too']
```

This PR also revives the `javascript` language label that I removed from some code blocks a while back, and renames all `js` blocks `javascript` for consistency.

Closes https://github.com/electron/electron/pull/6748
",656,True,en,0
6867,9,3,0,Internals,kevinsawicki,2016-08-31T08:28:09Z,115,4,6,14,"This pull request adds support for accessing the properties on a remote function when using `remote.require`.

It wraps remote functions in a [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) object so properties on those functions are accessed over IPC and lazily loaded.

Closes #6863
Refs #4957
",346,True,en,0
6865,1,0,0,Internals,kevinsawicki,2016-08-16T17:05:48Z,4,0,1,0,"Adds a test for headers with `.` characters in them for verify behavior of #6856 

Refs #6855

/cc @bridiver 
",110,True,en,0
6861,1,1,0,Externals,megahertz,2016-08-17T13:04:46Z,1,0,1,1,"Now the following code is not working because it requires an absolute url:

``` js
const wnd = window.open('about:blank', 'new-window');
wnd.location = '/some-relative-url';
```
",178,True,en,0
6858,8,3,11,Externals,MarshallOfSound,2016-08-22T00:32:54Z,76,35,5,5,"Currently this is windows only as I don't know how to do the equivalent on macOS (I don't think it is actually needed).

Basically most people use Squirrel.Windows to install Electron applications on Windows.  When a user updates the app the stored default path is now wrong and instead of having to update the path during the update process it would be great if we could use the Squirrel `--processStart` syntax as our launcher.

If someone can point me at the direction to do this on `macOS` would be much appreciated üëç 
",526,True,en,0
6857,1,1,0,Externals,bridiver,2016-08-17T12:47:40Z,2,2,1,1,"related #6832
",14,True,en,0
6856,1,2,0,Externals,bridiver,2016-08-16T15:54:26Z,1,1,1,0,"fixes #6855
",12,True,en,0
6853,2,0,2,Externals,jlord,2016-08-17T15:53:34Z,57,0,1,1,"This adds a page to the Electron documentation that is About Electron. It describes, the team, release cycle and milestones (and a few more things).

Some of these things have come up in conversation time and again and aren't clearly documented elsewhere so now they will be ‚ú® 
",280,True,en,0
6851,2,1,0,Internals,kevinsawicki,2016-08-17T11:15:38Z,21,2,2,1,"Looks like on Windows (and possibly Linux), a web content's render widget host view can report as focused even when in a hidden window.

This pull request adds a check to prevent hidden window's from having focused web contents. This mirrors the key window check already in the Mac implementation.

Closes #6811
",312,True,en,0
6850,2,1,0,Internals,kevinsawicki,2016-08-17T12:19:36Z,42,4,2,1,"Previously the `ScopedDisableResize` helper was only used when changing the resizable state, but it looks like unintentional resize also occurs when changing the minimizable, maximizable, and closable states.

This pull request moves the `ScopedDisableResize` into `SetStyleMask` to prevent unintended resize in all cases.

It also overrides `setFrame` since `constrainFrameRect` does not appear to be called for hidden windows which were also unintentionally resizing previously.

Closes #6845
",495,True,en,0
6848,1,2,0,Internals,miniak,2016-08-18T05:40:54Z,23,6,3,2,"https://github.com/electron/electron/issues/6236
",49,True,en,0
6846,1,1,0,Externals,ysagal,2016-08-15T17:11:16Z,1,0,1,0,"Adding an undocumented `title` argument to `page-title-updated` event.
",71,True,en,0
6838,1,1,0,Externals,Gerhut,2016-08-15T15:53:45Z,4,4,2,1,"ref electron-userland/electron-prebuilt#160
",44,True,en,0
6832,3,3,0,Externals,adill,2016-08-17T11:31:06Z,9,2,2,4,"this caches the render view's `routing_id` in the `RemoteObjectFreer` constructor so we can look it up later in `RunDestructor` with no v8 calls. this is a speculative fix for #6813 -- we can't reproduce it in-house and i don't have enough data yet to know if it's fixed in the wild but i wanted to open it up to discussion.

@zcbenz 
",335,True,en,0
6829,1,1,0,Externals,MarshallOfSound,2016-08-18T05:34:26Z,17,3,4,5,"This finally fixes #4514
",25,True,en,0
6826,1,17,21,Externals,enlight,2016-09-01T06:35:22Z,897,41,7,19,"Add `app.setJumpList(callback)` which makes it possible to fully customize the Jump List of an Electron app, specifically it allows to:
- Add tasks to the standard `Tasks` category.
- Add separators to the standard `Tasks` category.
- Add custom categories containing tasks and file links.
- Add system managed Recent/Frequent categories.
- Remove the custom Jump List.

`app.setUserTasks()` should probably be deprecated at some point.
",437,False,en,0
6817,1,1,0,Externals,deepak1556,2016-08-12T08:51:40Z,4,1,1,0,"Fixes #6541 
",13,True,en,0
6816,1,1,0,Externals,deepak1556,2016-08-12T08:48:50Z,47,1,2,0,"Ref https://github.com/electron/electron/issues/6749#issuecomment-238177677
",76,True,en,0
6814,1,5,0,Externals,bridiver,2016-08-17T11:44:13Z,5,8,3,5,"see https://github.com/brave/electron/commit/d072e612823bdf342b519c866e09c55269b0cadf#diff-7452c2b1cabfbce577fef50b254bd08dL33
encoded_data is a base64 string so there is no reason to convert it anyway
cc @deepak1556 
",218,False,en,0
6812,1,1,0,Internals,kevinsawicki,2016-08-12T08:11:22Z,4,2,2,0,"This pull request adds support to `script/bootstrap.py` to specify `--defines` variables.

Allowing you to do things like `npm run bootstrap -- --defines=arm_float_abi=hard`.

Refs #5706
",187,True,en,0
6810,2,1,0,Externals,MarshallOfSound,2016-08-12T08:10:48Z,4,2,4,0,"This fixes #6808
",17,True,en,0
6804,2,1,0,Internals,kevinsawicki,2016-08-11T08:20:44Z,2,0,2,0,"This pull request cleans out `libchromiumcontent/src` when running `script/clean.py` which will be present if Electron was bootstrapped with the `--build_libchromiumcontent` option.

Also adds a `npm run clean` helper.
",219,True,en,0
6801,1,1,0,Internals,kevinsawicki,2016-08-11T08:23:33Z,4,2,1,0,"While bootstrapping on a fresh Ubuntu 16.04 VM yesterday, I ran into errors running `./script/bootstrap.py -v --build_libchromiumcontent` because of `gperf` and `bison` missing.

This pull requests adds them to the recommended package install list.
",249,True,en,0
6796,1,0,0,Internals,kevinsawicki,2016-08-10T16:57:51Z,6,0,1,0,"Looks to be failing consistently, disabling while I investigate further, introduced in #6787  üî¥ 

```
not ok 147 globalShortcut module can register and unregister accelerators
  AssertionError: false == true
      at Context.it (C:\Jenkins\workspace\electron-win-x64\spec\api-global-shortcut-spec.js:14:12)
      at callFn (C:\Jenkins\workspace\electron-win-x64\spec\node_modules\mocha\lib\runnable.js:251:21)
      at Test.Runnable.run (C:\Jenkins\workspace\electron-win-x64\spec\node_modules\mocha\lib\runnable.js:244:7)
      at Runner.runTest (C:\Jenkins\workspace\electron-win-x64\spec\node_modules\mocha\lib\runner.js:374:10)
      at C:\Jenkins\workspace\electron-win-x64\spec\node_modules\mocha\lib\runner.js:452:12
      at next (C:\Jenkins\workspace\electron-win-x64\spec\node_modules\mocha\lib\runner.js:299:14)
      at C:\Jenkins\workspace\electron-win-x64\spec\node_modules\mocha\lib\runner.js:309:7
      at next (C:\Jenkins\workspace\electron-win-x64\spec\node_modules\mocha\lib\runner.js:248:23)
      at C:\Jenkins\workspace\electron-win-x64\spec\node_modules\mocha\lib\runner.js:271:7
      at done (C:\Jenkins\workspace\electron-win-x64\spec\node_modules\mocha\lib\runnable.js:207:5)
```
",1211,True,en,0
6789,1,3,0,Externals,felixrieseberg,2016-08-11T08:16:41Z,9,1,1,1,"Adds Visual Studio and Visual Studio Code configuration files (auto-generated) to .gitignore.
",94,True,en,0
6788,1,1,1,Externals,felixrieseberg,2016-08-18T05:35:00Z,36,13,8,8,"As recommended in #6768, this commit adds an enum for progress states for windows.
",83,True,en,0
6787,4,1,0,Internals,kevinsawicki,2016-08-10T06:55:23Z,52,3,4,0,"This pull requests adds an initial spec for a couple modules, `powerSaveBlocker` and `globalShortcut`.

Noticed this by running `npm run coverage` and looking at the generated report.
",184,True,en,0
6782,2,1,2,Internals,kevinsawicki,2016-08-09T16:16:10Z,3,5,1,0,"Use `DIPToScreenRect` to convert specified region to screen coordinates.

The following app and screenshots show it previously broken but not correctly positioning the thumbnail region.

``` html
<html>
  <head>
    <style>
      div {
        position: absolute;
        left: 30px;
        top: 30px;
        width: 45px;
        height: 45px;
        background-color: yellow;
        border: 5px solid green;
      }

      body {
        background-color: #f00;
      }
    </style>
  </head>
  <body>
    <div></div>
  </body>
</html>
```

``` js
require('electron').remote.getCurrentWindow().setThumbnailClip({x: 30, y: 30, width: 55, height: 55})
```

| Before | After |
| --- | --- |
| <img width=""132"" alt=""screen shot 2016-08-08 at 2 04 47 pm"" src=""https://cloud.githubusercontent.com/assets/671378/17496272/5b35874a-5d71-11e6-8188-75b6d2169a70.png""> | <img width=""195"" alt=""screen shot 2016-08-08 at 2 04 00 pm"" src=""https://cloud.githubusercontent.com/assets/671378/17496273/5b38a998-5d71-11e6-9048-72d63f5c483b.png""> |

Big thanks for @paulcbetts for bringing this up over on https://github.com/electron/electron/pull/6497#issuecomment-238111148
",1160,True,en,0
6780,3,1,0,Internals,kevinsawicki,2016-08-09T11:44:26Z,19,9,2,0,"Previously calling `autoUpdate.checkForUpdates()` twice with a successful update followed by a call to `quitAndInstall` would emit an error since `updateAvailable` would be set back to `false` the second time it was called when the first time successfully downloaded and installed an update.

This pull request removes the clearing of the flag so that `updateAvailable` is `true` until restart.

Closes #6647 
",410,True,en,0
6777,3,1,0,Internals,kevinsawicki,2016-08-09T11:24:06Z,60,32,5,0,"This pull requests adds 3 new zoom-related menu item roles as a follow on to #6677 
- `zoomin` - Zooms in the page by 10%, `CommandOrControl+-`
- `zoomout` - Zooms out the page by 10%, `CommandOrControl+Plus`
- `resetzoom` - Resets the zoom level to original size,`CommandOrControl+0`

/cc @miniak 
",305,False,en,0
6776,3,2,0,Internals,kevinsawicki,2016-08-09T11:26:26Z,18,4,3,0,"This pull request removes the `HasRealNamedCallbackProperty` check from `V8ValueConverter::FromV8Object`.

It looks like Chrome removed this check in https://codereview.chromium.org/16511004 so it seems safe to remove in Electron.

Original issue was https://bugs.chromium.org/p/chromium/issues/detail?id=139933 which was fixed and tweaked a couple times.

This allows objects like `document.location` to have their properties send over IPC.

Closes #6407 
",457,True,en,0
6768,1,7,9,Externals,felixrieseberg,2016-08-09T11:58:07Z,72,20,11,1,"This commit enables setting a mode for the setProgressBar method. Old behavior is kept intact, usage is entirely optional. Using the `options` parameter on OS X or Linux simply has no effect.

Usage: `win.setProgressBar(progress[, options])`
- `progress` Double
  - `options` Object (optional)
  - `mode` _Windows_ String - Mode for the progres bar (`none`, `normal`, `indeterminate`, `error`, or `paused`)

![image](https://cloud.githubusercontent.com/assets/1426799/17469915/ab51d6aa-5cec-11e6-9ef6-d84efca79bd6.png)

Closes #6672
",533,True,en,0
6766,2,1,3,Internals,miniak,2016-08-08T08:43:08Z,17,11,3,0,"Changes return value of `Browser::SetUserTasks` from `void` to `bool`
",70,True,en,0
6765,1,1,0,Internals,miniak,2016-08-08T18:06:46Z,43,0,5,0,"https://chromium.googlesource.com/chromium/src/+/lkcr/content/browser/renderer_host/render_widget_host_view_mac.mm#3150
https://chromium.googlesource.com/chromium/src/+/lkcr/content/browser/renderer_host/render_widget_host_view_mac.mm#3154
",240,False,de,0
6762,1,0,10,Internals,miniak,2016-08-08T11:27:15Z,28,1,5,0,"https://msdn.microsoft.com/en-us/library/windows/desktop/dd391702(v=vs.85).aspx
",80,True,en,0
6761,1,1,0,Externals,bbondy,2016-08-08T07:52:07Z,8,10,1,0,"I realize that electron/electron currently disables the sandbox by default, but this will future proof yourself from a bug if you enable the sandbox in the future. It also closes a handle that should be closed that Chromium does when printing on Windows.

This makes it closer to how it works in Chromium and fixes the forever spooling problem on Windows.

The old way worked when the sandbox was disabled but failed on the call for shared_buf.CreateAndMapAnonymous when the sandbox was enabled.
",496,True,en,0
6755,4,1,4,Externals,hokein,2016-08-12T08:38:03Z,4,2,3,6,"Upgrade to clang r269902, which is used in Chrome stable v52. Tested on macOS & Linux.
",87,True,en,0
6754,1,3,0,Externals,darkdh,2016-08-08T07:23:52Z,55,7,2,2,"https://github.com/brave/electron/pull/36
",42,True,en,0
6752,2,1,3,Externals,lgalabru,2016-08-09T12:34:52Z,50,0,4,3,"This PR is about making electron a good inter-process-communication citizen.
I'm working on an electron app, using a native helper/agent/daemon as a backend. 
I've been handling IPC using sockets. It works, but it's heavy, and not a great practice. 
Since electron supports receiving distributed notifications, it would be great to also make it able to send some of them.
",372,False,en,0
6745,2,1,0,Internals,kevinsawicki,2016-08-08T07:04:07Z,5,12,2,2,"- Remove files that are lint free from the ignore list
- Remove deleted files from the ignore list
- Minor lint fixes
",118,False,en,0
6744,1,2,0,Externals,sairoutine,2016-08-08T07:03:30Z,179,1,2,2,,0,False,en,0
6743,1,1,0,Internals,kevinsawicki,2016-08-08T07:02:13Z,12,5,1,2,"This pull requests adds the auto update error's `localizedRecoverySuggestion` value to the error message when available.

The message on a non-200 response will now be:

> Update check failed. The server sent an invalid response. Try again later.

The message on a JSON response missing the update data will now be:

> Update check failed. The server sent an invalid JSON response. Try again later.

Closes #6695 
",414,True,en,0
6741,3,3,0,Externals,gerhardberger,2016-08-08T07:10:30Z,3,24,2,2,"This PR moves the `ui::AcceleratedWidgetMacNSView` implementation to `NativeWindowMac`, so the native window can be used in offscreen mode for accelerated widget, no need for an extra hidden window.
",199,True,en,0
6739,1,0,0,Internals,zcbenz,2016-08-05T07:46:41Z,28,25,4,0,"The standard schemes are already stored, we don't have to duplicate the list for every session.
",96,True,en,0
6737,1,3,0,Externals,brenca,2016-08-05T11:47:35Z,5,15,4,0,"We used to call `Show` and `Hide` when starting/stopping the flow of painting events - this caused a bug where upon restarting the first frame that was generated was completely transparent in some cases (mostly when pushing the limits of the machine's memory).
Related to #6704.
",279,False,en,0
6736,3,1,0,Internals,kevinsawicki,2016-08-05T08:25:22Z,18,9,2,0,"Previously, to work around a zoom button but on macOS, the zoom button was disabled if previously disabled in certain places.
#6664 showed a case where it wasn't properly enabled when it should have been.

This pull request adjusts the workaround to always set the state of the zoom button to the state it was in before `setStyleMask` or `setCollectionBehavior`.

Closes #6664
",377,False,en,0
6733,3,3,0,Externals,brenca,2016-08-05T08:39:33Z,20,1,3,0,"#6721
",6,True,en,0
6726,1,1,0,Externals,gerhardberger,2016-08-04T13:07:30Z,3,1,1,0,"This PR omits the `setMouseDownCanMoveWindow` call for `OffScreenView`, because `OffScreenView` doesn't have this method, beause it a plain `NSView` and it causes an error when running browser windows in offscreen mode.
",220,True,en,0
6723,5,0,0,Internals,zcbenz,2016-08-04T08:04:32Z,113,61,12,0,"This makes sure we have a valid view staying in the window, so opening devtools won't trigger crashes, and the keyboard events can correctly pass in the window.

Refs #6704.

![screen shot 2016-08-04 at 4 36 33 pm](https://cloud.githubusercontent.com/assets/639601/17393999/cc850b04-5a61-11e6-964c-e62b60bd53d0.png)
",316,True,en,0
6721,6,5,0,Internals,zcbenz,2016-08-05T11:44:40Z,49,41,6,1,"Instead of passing `data` as `Buffer` directly in the `paint` event, this PR changes to emit `NativeImage` objects. So the API would be easier to use and test.

Regarding the performance, `NativeImage` stores the bitmap by simply ref-counting its underlying data, so no copying and encoding are involved, and for users wanting to access the bitmap data, calling `toBitmap()` is as efficient as before.

@gerhardberger @brenca Please let me know if you have concerns about this.
",478,True,en,0
6720,1,1,0,Externals,deepak1556,2016-08-04T01:51:48Z,4,0,1,0,"Ref #6548 

This fixes the render process crash. 
",50,True,en,0
6719,1,1,0,Internals,kevinsawicki,2016-08-04T01:49:01Z,9,1,2,0,"This pull request documents the `isDestroyed()` as API as public for browser windows and web contents.
",103,True,en,0
6718,20,1,1,Internals,kevinsawicki,2016-08-04T01:59:54Z,149,77,19,0,"This pull requests adds the ability to generate a JavaScript code coverage report via `npm run coverage` that will show which lines are called by the Electron specs. This only deals with JavaScript code coverage, not C++ code coverage.
- It uses [istanbul](https://github.com/gotwarlost/istanbul) for computing the code coverage
- It aggregates the coverage across all opened windows and devtools extensions and so this pull request changes the specs to use `BrowserWindow.close` instead of `.destroy` so that the coverage can be saved before each window is closed
- It uses a small helper library called [electabul](https://github.com/kevinsawicki/electabul) which takes care of instrumenting a `.asar` file and collecting all the coverage reports across all web contents.
- Generated report available at https://kevinsawicki.github.io/electabul/lcov-report

This pull request does not switch `npm test` to use it by default. I wanted to give it a bit more testing once it lands to make sure the specs aren't flaky when tracking coverage.

<a href=""https://kevinsawicki.github.io/electabul/lcov-report""><img width=""1280"" alt=""screen shot 2016-08-03 at 2 20 54 pm"" src=""https://cloud.githubusercontent.com/assets/671378/17382405/8a6a91e4-5985-11e6-9c60-620b96671a92.png""></a>
",1276,False,en,1
6714,2,2,0,Externals,sairoutine,2016-08-04T01:26:00Z,63,1,2,0,"I have translated it into Japanese newly.

Thanks.
",51,True,en,0
6713,4,1,7,Externals,gerhardberger,2016-08-04T04:00:55Z,21,10,7,0,"This PR fixes the buffer size issue in the `'paint'` event in offscreen mode. #6704 

Also resets some properties in `OffScreenRenderWidgetHostView`'s destructor.
",163,True,en,0
6711,1,1,0,Internals,miniak,2016-08-04T01:09:39Z,1,6,2,0,"It does not make sense to do a `respondsToSelector:` check as the API is available in all the supported versions of macOS (https://developer.apple.com/reference/appkit/nsevent/1533987-isswipetrackingfromscrolleventse)
",218,True,en,0
6710,1,1,2,Internals,miniak,2016-08-03T21:36:27Z,2,2,2,0,,0,False,en,0
6709,2,1,0,Externals,saghul,2016-08-04T01:09:58Z,2,6,1,0,,0,False,en,0
6708,2,3,0,Externals,deepak1556,2016-08-05T07:25:23Z,50,0,4,1,"Fixes #6659 

Depends on https://github.com/electron/brightray/pull/244
",72,True,en,0
6707,1,0,0,Internals,zcbenz,2016-08-03T09:14:01Z,5,0,1,0,"Close #6605.

The remote devtools of Chrome initializes itself in two steps: 1. Inject runtime bindings; 2. start the application when window is loaded. The step 1 is a chain of `Promise`s, and Chrome assumes all the `Promise`s will get resolved before the `window.onload`.

However Node turns off the `AutorunMicrotasks` of V8, making the resolution of `Promise`s to be delayed. So the app of devtools is started before its runtime bindings get ready.

This PR fixes it by reverting Node's call of `SetAutorunMicrotasks(false)`.
",530,True,en,0
6706,1,2,0,Externals,sairoutine,2016-08-03T11:06:03Z,38,1,2,0,"I have translated it into Japanese newly.

Thanks.
",51,True,en,0
6705,1,0,0,Internals,zcbenz,2016-08-03T07:55:48Z,0,19,6,0,"Removing this event since it is not actually working as expected, as explained in #6622.
",89,True,en,0
6703,83,0,0,Internals,zcbenz,2016-08-03T06:58:31Z,1952,19,20,0,"This PR merges #6691. There is no changes to the implementation, just a few code cleanups and moves offscreen codes to atom/browser/osf.
",137,True,en,0
6700,1,1,0,Externals,calidion,2016-08-03T07:00:52Z,39,17,1,0,"1. add difference notice
2.  changed `render process` to `main process`
",72,False,en,0
6694,1,1,0,Externals,ssdong,2016-08-02T23:30:18Z,1,1,1,0,"Noticed that `Node.js` has been replaced with `io.js` in simplified Chinese doc `docs-translations/zh-CN/tutorial/quick-start.md`. But the original doc says `Node.js`.
",168,True,en,0
6693,1,2,0,Externals,sairoutine,2016-08-02T23:30:32Z,45,1,2,0,"I have translated it into Japanese newly.

Thanks.
",51,True,en,0
6691,67,4,0,Externals,gerhardberger,2016-08-03T06:58:32Z,2105,17,27,0,"This PR adds support to render browser windows offscreen in Electron, through a `'paint'` event on `window.webContents`.

We (@brenca and me) implemented a similar approach, than what [CEF](https://bitbucket.org/chromiumembedded/cef) uses.

It supports two types of offscreen rendering: GPU-accelerated and software-based (which is quite faster), also the frame rate can be adjusted and painting can be controlled.

It depends on a custom _brightray_ fork, which is also submitted as a [PR](https://github.com/electron/brightray/pull/243).
",540,True,en,0
6688,13,0,0,Internals,zcbenz,2016-08-02T12:37:57Z,346,375,64,0,"This means every native class now gets a constructor, so it is possible for us to manipulate the prototype of native classes directly instead of running hooks for creations of every native object.
",197,True,en,0
6686,2,3,0,Externals,darkdh,2016-08-03T07:10:29Z,17,0,4,1,"https://github.com/brave/electron/pull/31
",42,True,en,0
6685,4,1,0,Externals,MarshallOfSound,2016-08-02T05:41:09Z,60,5,3,0,"RE: https://github.com/electron/electron/pull/6677#discussion_r73013337

This also implements asyncronous versions of `getZoomFactor` and `getZoomLevel`
",153,True,en,0
6684,1,1,0,Externals,felixrieseberg,2016-08-02T03:19:05Z,2,2,1,0,,0,False,en,0
6683,1,3,0,Externals,gabriel,2016-08-02T03:33:36Z,15,0,5,0,"It would be nice to be able to know if the dock is visible or not. The dock is a little quirky though and since `app.dock.show` isn't synchronous, the `isVisible` may not be true immediately after `show`. But I think if we mention that in the docs, people would be wary of that?

Or we could add an instance var to track whether the dock is in the process of showing?

I tested this in the electron-quick-start app with:

``` js
setInterval(function(){
  console.log('dock visible:', app.dock.isVisible())
  if (app.dock.isVisible()) {
    app.dock.hide()
    console.log('after hide:', app.dock.isVisible())
    console.log('-')
  } else {
    app.dock.show()
    console.log('after show:', app.dock.isVisible())
    setTimeout(function(){
      console.log('after show (with delay):', app.dock.isVisible())
      console.log('-')
    }, 10);
  }
}, 1000)
```

The output of this looks like:

```
dock visible: true
after hide: false
-
dock visible: false
after show: false
after show (with delay): true
-
dock visible: true
after hide: false
-
dock visible: false
after show: false
after show (with delay): true
...
```

I wasn't sure if there was a test suite to add to or if this type of testing was manual. I can push my test app branch if you would like to try it out.
",1275,True,en,0
6678,1,2,0,Externals,sairoutine,2016-08-02T00:31:39Z,95,2,2,0,"I have translated system-preferences.md into Japanese newly.

Thanks.
",70,True,en,0
6677,2,10,9,Internals,miniak,2016-08-02T17:27:56Z,46,6,2,1,,0,False,en,0
6676,6,0,1,Internals,zcbenz,2016-08-01T13:54:10Z,37,40,3,0,,0,False,en,0
6675,1,1,0,Internals,miniak,2016-08-02T00:31:19Z,16,7,1,0,,0,False,en,0
6674,3,0,0,Internals,zcbenz,2016-08-01T11:40:55Z,27,21,4,0,"Since users can use partition strings to refer to `Session` objects, it is not usual for users to save a reference to `Session`s. So we have to prevent `Session` from being garbaged collected, otherwise the same `Session` object might be deleted between uses of partition strings.

Close #6258.
",295,True,en,0
6667,1,1,0,Externals,liusy182,2016-08-01T00:56:08Z,19,3,2,0,"fix issue caused by submission #6596 
",38,True,en,0
6663,1,1,0,Externals,simonmysun,2016-07-31T23:45:15Z,1,1,1,0,"And the usage of punctuation looks a mess. Shall I fix them(and those in other ZH-cn files)? 
",94,True,en,0
6662,1,2,0,Externals,sairoutine,2016-07-31T23:44:54Z,44,1,2,0,"I have translated testing-on-headless-ci.md into Japanese newly.

Thanks.
",74,True,en,1
6661,7,2,4,Externals,brenca,2016-08-01T00:45:41Z,42,9,7,0,"Fixes and improvements for the following:
- Because of some changes, we were unable to send UTF-8 characters with `sendInputEvent`
- The `cursor-changed` event was missing some data needed for custom cursors (hotspot + size of cursor)
- To be able to draw the cursor easily, I introduced a `ToBUFFER` to `NativeImage` that retrieves the image in a raw representation into a `NodeBuffer`
",387,False,en,0
6654,15,3,0,Internals,kevinsawicki,2016-08-05T08:23:24Z,153,58,10,6,"This pull request adds a new `getContentBounds()` API to `BrowserWindow` that returns the x, y, width, and height of the content area.

This will allow apps to know the size of the window chrome by comparing the content bounds to the window bounds.

Closes #6536
",263,True,en,0
6649,1,1,0,Internals,miniak,2016-07-29T13:51:26Z,5,2,2,0,,0,False,en,0
6646,1,0,0,Internals,zcbenz,2016-07-29T02:07:24Z,9,1,3,0,"Close #6635.
",13,True,en,0
6645,1,0,0,Internals,zcbenz,2016-07-29T01:33:55Z,0,0,1,0,"Close #6396.
",13,True,en,0
6644,2,1,0,Internals,kevinsawicki,2016-07-29T02:08:11Z,5,3,2,0,"Calling `web_contents()->GetTopLevelNativeWindow()` appears to crash if called when no `web_contents()->GetRenderWidgetHostView()` is available.

This pull requests tweaks the `WebContents::IsFocused` method to not check the window's focus state when no render widget host view is present.

Closes #6642
",304,True,en,0
6641,1,4,6,Externals,felixrieseberg,2016-07-30T02:55:05Z,127,1,2,1,"I already wrote up debugging instructions for Windows, but never got
around to writing them for macOS - until now! This adds a very basic
introduction to LLDB from the command line, which should empower people
to figure out what‚Äôs happening inside Electron when they call an
Electron method from JavaScript.

Closes #5494
",324,False,en,0
6637,1,1,0,Internals,kevinsawicki,2016-07-29T01:42:36Z,2,1,1,0,"It looks like sometimes the `event.os_event.window` property is an `NSToolbarFullScreenWindow` which will crash when redispatch of the key event is attempted.

This pull requests adds an explicit check for the window being an `EventDispatchingWindow`.

I  was unable to actually reproduce #6630 locally, I tried running keyboard commands for full screen windows, with and without frames, and with various title bar styles.

Closes #6630
",437,True,en,0
6636,1,1,0,Externals,yuya-oc,2016-07-29T01:11:05Z,2,0,1,0,"For #6396
Please refer to ""For high dpi"" section of https://msdn.microsoft.com/en-us/library/windows/desktop/dn742485(v=vs.85).aspx

And `atom/browser/resources/win/atom.ico` should include 40x40 icon for 125% scaling.
",219,False,en,0
6631,1,2,0,Externals,amor520,2016-07-28T09:07:33Z,2,2,1,0,,0,False,en,0
6629,3,1,0,Internals,kevinsawicki,2016-07-28T06:23:43Z,22,6,4,0,"Set the save path of the download item to the path selected from the save dialog so it is accessible once set.

This pull requests also makes the `downloadItem.getSavePath()` API public.

Closes #5877
",201,True,en,0
6627,3,7,2,Externals,davej,2016-07-27T22:57:34Z,21,0,1,0,"As discussed on https://github.com/electron/electron/pull/6620

/cc @kevinsawicki 
",83,True,en,0
6626,1,1,0,Externals,Starefossen,2016-07-29T01:02:01Z,4,1,1,1,"Just attempted to install the React DevTools following this tutorial and kept getting `TypeError: BrowserWindow.addDevToolsExtension is not a function` error message when attempting to load the extension. Had to dig into the API docs before I found that this particular API is not available before the app ready event has been called. Would be nice to newcomers to have that information right on the tutorial.

On an other note, I did not get the relative `~` path working on macOS 10.11.6 and Electron 1.3.0 and had to use the full path `/Users/me/Library/...` before the extension loaded successfully. Might be worth mentioning?
",631,True,en,0
6623,9,7,1,Internals,zcbenz,2016-07-27T23:48:52Z,198,0,4,0,"``` markdown

### `shell.writeShortcutLink(shortcutPath[, operation], options)` _Windows_

* `shortcutPath` String
* `operation` String (optional) - Default is `create`, can be one of followings:
  * `create` - Creates a new shortcut, overwriting if necessary.
  * `update` - Updates specified properties only on an existing shortcut.
  * `replace` - Overwrites an existing shortcut, fails if the shortcut doesn't
    exist.
* `options` Object
  * `target` String - The target to launch from this shortcut.
  * `cwd` String (optional) - The target to launch from this shortcut. Default
    is empty.
  * `args` String (optional) - The arguments to be applied to `target` when
    launching from this shortcut. Default is empty.
  * `description` String (optional) - The description of the shortcut. Default
    is empty.
  * `icon` String (optional) - The path to the icon, can be a DLL or EXE. `icon`
    and `iconIndex` have to be set together. Default is empty, which uses the
    target's icon.
  * `iconIndex` Integer (optional) - The resource ID of icon when `icon` is a
    DLL or EXE. Default is 0.
  * `appUserModelId` String (optional) - The Application User Model ID. Default
    is empty.

Creates or updates a shortcut link at `shortcutPath`. On success `true` is
returned, otherwise `false` is returned.

### `shell.readShortcutLink(shortcutPath)` _Windows_

Resolves the shortcut link at `shortcutPath`, an object is returned with the
fields described in the `options` of `shell.writeShortcutLink`.

An exception will be thrown when any error happens.
```

Close #4414.
",1585,True,en,0
6620,4,5,0,Internals,kevinsawicki,2016-07-27T01:49:38Z,75,23,7,0,"For applications showing ""popover"" style windows when the tray icon is clicked, it is nice to highlight the tray icon background for the entirety of when the window is open (like screenhero, dropbox, 1password, etc. do).

Previously the icon would highlight only when clicked but the highlight would go away on mouse up.

Now you can control when the highlight goes away explicitly so you can maintain the highlighted background until your window is closed.

Since there was already a `tray.setHighlightMode(mode)` API, I expanded that API to take a string enum instead of a boolean.

The possible values are:
- `'always'` - Always highlight the tray icon
- `'never'` - Never highlight the tray icon, previously equivalent to`tray.setHighlightMode(false)`.
- `'selection'` - Highlight the icon when clicked and when the context menu is open (the default), previously equivalent to calling `tray.setHighlightMode(true)`.

It still handles a `boolean` param so it should be backwards compatible with the previous behavior.

| Before | After |
| --- | --- |
| <img width=""389"" alt=""screen shot 2016-07-26 at 2 06 31 pm"" src=""https://cloud.githubusercontent.com/assets/671378/17155499/32fed8bc-533a-11e6-9d7d-32224231feff.png""> | <img width=""383"" alt=""screen shot 2016-07-26 at 2 06 02 pm"" src=""https://cloud.githubusercontent.com/assets/671378/17155597/955fb8c8-533a-11e6-9bce-61d4374114ab.png""> |

Closes #6528
",1409,True,en,0
6619,2,2,0,Internals,kevinsawicki,2016-07-27T01:15:38Z,15,0,3,0,"Adds a new `copyImageAt` API to `webContents` that copies the image at the given position to the clipboard.

Allows you to easily implement the behavior of the `Copy Image` context menu in Chrome.

Closes #6553
",211,True,en,0
6618,3,1,0,Internals,kevinsawicki,2016-07-27T00:52:18Z,24,7,3,0,"Previously, calling `RegisterNonABICompliantCodeRange` multiple times via `crashReporter.start` would cause a crash.

This pull request updates it to only be called once instead.

Closes #6550 
",194,True,en,0
6613,1,1,0,Externals,deepak1556,2016-07-26T23:53:33Z,3,0,1,0,"This brings back the fix to the problem noted in https://github.com/electron/brightray/pull/152

Depends on https://github.com/electron/brightray/pull/239

Fixes #6610 
",169,True,en,0
6612,2,0,0,Internals,zcbenz,2016-07-26T10:55:25Z,10,8,2,0,"It was to fix the problem with CI machine setting CC and CXX to its own compilers, but as a result running `bootstrap.py` and `update.py` separately would cause the entire project to rebuild.

This PR just ignores CC and CXX in CI machine so we don't have to overwrite them in `bootstrap.py`.
",293,True,en,0
6609,3,0,0,Internals,zcbenz,2016-07-26T10:03:25Z,30,9,3,0,"It can be used to generate a Visual Studio project.

Close #5868.
",66,True,en,0
6607,1,1,0,Externals,enlight,2016-07-26T07:29:01Z,1,1,1,0,"Missed one string in my previous PR :(
",39,True,en,0
6606,2,2,0,Internals,zcbenz,2016-07-26T05:11:20Z,19,0,1,0,"Close #6344.
",13,True,en,0
6603,6,4,0,Internals,zeke,2016-07-27T00:36:44Z,573,449,38,0,"Last week I was [updating the docs](https://github.com/electron/electron/pull/6573#issue-167132548) and noticed several instances of malformed or non-standard javascript.

To aid in the effort, I created [standard-markdown](https://github.com/zeke/standard-markdown#readme), a CLI that behaves similarly to `standard`, but instead of looking for `.js` files, it looks for `js`\- and `javascript`-fenced code snippets in `.md` and `.markdown` files, and lints them.

There were a lot of errors [(list)](https://gist.github.com/zeke/567c928e7931cfed343e9937f751237b):

```
npm run lint-docs | wc -l
516
```

Now there are none!

When expanded to include the `/docs-translations` directory, there were close to 4000 linting errors, so I focused just on the canonical `/docs`.

This PR also adds the docs linter to the `npm run lint` script to ensure future documentation edits are standardized.
",892,True,en,0
6602,2,4,1,Externals,MarshallOfSound,2016-07-27T01:53:52Z,2,2,1,1,"Pairs up with Squirrel/Squirrel.Windows/pull/778
",49,True,en,0
6601,1,1,0,Externals,feross,2016-07-26T00:45:50Z,1,1,1,0,"Just realized that the tests don't pass after my PR (#6600). This fixes that :)
",80,True,en,0
6600,1,2,0,Externals,feross,2016-07-25T22:21:05Z,1,1,1,0,"On OS X, the standard label that's used for the 'close' role is 'Close
Window'. You can see this in the default macOS apps from Apple.

iTunes:
<img width=""239"" alt=""screen shot 2016-07-25 at 3 14 05 pm"" src=""https://cloud.githubusercontent.com/assets/121766/17119404/8392c51a-527a-11e6-9332-64a73f6817c0.png"">

Finder:
<img width=""290"" alt=""screen shot 2016-07-25 at 3 14 13 pm"" src=""https://cloud.githubusercontent.com/assets/121766/17119408/85316b9c-527a-11e6-882e-6af94ca7f32c.png"">

Terminal:
<img width=""295"" alt=""screen shot 2016-07-25 at 3 14 26 pm"" src=""https://cloud.githubusercontent.com/assets/121766/17119413/87d940e0-527a-11e6-8cf8-e6cda4dbffbc.png"">

etc.
",671,False,en,0
6598,5,3,0,Internals,kevinsawicki,2016-07-26T03:42:59Z,287,143,2,0,"This pull request patches `fs.access` and `fs.accessSync` to support paths in asar archives.

It also does a little :art: on the file and uses `let/const` instead of `var`.

It also supports calling `fs` APIs with a `Buffer` path (instead of a String) which was added in node 6.0.0, https://github.com/nodejs/node/pull/5616

Closes #6555
",338,True,en,0
6596,2,3,0,Externals,liusy182,2016-07-26T02:21:59Z,4,1,1,0,"close #6574 
",13,True,en,0
6595,1,1,0,Externals,lukeapage,2016-07-26T02:16:57Z,4,6,1,0,"The null / -1 defaults weren't very helpful, so changed to follow other documentation and write the behaviour if that param is missing.
",136,True,en,0
6593,1,2,2,Externals,enlight,2016-07-26T04:35:54Z,35,29,1,0,"Minor improvements to the `desktopCapturer` docs to try and make it a bit easier to read.
",90,True,en,0
6590,4,0,0,Internals,zcbenz,2016-07-25T07:54:54Z,22,43,7,0,"It is better than comparing class names. Refs #6572.
",53,True,en,0
6589,2,0,0,Internals,zcbenz,2016-07-25T03:54:45Z,6,2,4,0,"Close #6587.
",13,True,en,0
6588,2,17,0,Externals,malept,2016-08-01T11:47:07Z,118,32,4,7,"When generating an Electron release, create a `sha256sum`-compatible file for each ZIP file, and upload them to the corresponding GitHub release. This is primarily to confirm that the download of a given ZIP completed successfully, as opposed to verifying that an Electron team member uploaded the given ZIP files (which would require using a trusted GPG key).

The reason why I would like to add this feature to the release process is that I'm a maintainer of the [Electron Packager](https://github.com/electron-userland/electron-packager) project, and we sometimes get GitHub issues filed where ultimately, the problem is that the download of Electron from GitHub releases didn't complete successfully. If this PR is merged, my goal is to add functionality to [electron-download](https://github.com/electron-userland/electron-download) that emulates `sha256sum -c` on the downloaded file.
",891,True,en,0
6585,1,0,0,Internals,zcbenz,2016-07-24T13:23:19Z,2,1,2,0,,0,False,en,0
6584,1,0,0,Internals,zcbenz,2016-07-24T12:55:11Z,3,0,1,0,"This fixes the hang of CI when a test was sending ""error"" as channel name through IPC. As happened in http://54.249.141.255:1128/job/electron-osx-x64/1976/.
",157,True,en,0
6576,1,0,0,Internals,zeke,2016-07-25T07:55:49Z,9,9,1,2,"Use an instance-variable-style name to differentiate instance from class.
",74,True,en,0
6575,1,0,0,Internals,zeke,2016-07-25T07:55:20Z,2,2,1,2,"üé® 
",6,True,zh,0
6573,2,1,0,Internals,zeke,2016-07-25T07:55:09Z,33,29,1,2,"Unblocks #6408

From the [styleguide](https://github.com/electron/electron/blob/master/docs/styleguide.md):

> API classes or classes that are part of modules must be listed under a `## Class: TheClassName` chapter.

and

> Instance Methods must be listed under an `### Instance Methods` chapter.

This PR attempts to properly capitalize references to the `NativeImage` class and fix the heading levels.

@zcbenz, based on our recent conversation about extracting all classes (of which many can exist in a ""module"" like `session`), I think the resultant API array will have an object for the `nativeImage` an another for the `NativeImage` class, so it will look something like this:

``` js
[
  {
    name: 'nativeImage'
    type: 'module'
    methods: [
      {name: 'createEmpty', ...},
      {name: 'createFromPath', ...},
      {name: 'createFromBuffer', ...},
      {name: 'createFromDataURL', ...}
    ]
  },
  {
    name: 'NativeImage'
    type: 'class'
    instanceMethods: [
      {name: 'toPNG', ...},
      {name: 'toJPEG', ...},
      {name: 'getNativeHandle' ...},
      {name: 'createFromDataURL' ...}
    ]
  }
  ...
]
```

Does that look about right?
",1167,True,en,0
6572,4,1,0,Externals,haadcode,2016-07-25T07:22:29Z,36,2,5,2,"Fixes https://github.com/electron/electron/issues/2104.

When using Buffer shims in your application, such as https://www.npmjs.com/package/buffer, the IPC via remote currently handles TypedArrays (eg. UInt8Array) as objects and fails to transport the values as function params or return values.

This PR will add support for transporting TypedArrays between the renderer and main process. TypedArrays get converted to regular Arrays on the sending side (remote) and to Node.js Buffers on the receiving side (rpc-server).

Read the spec but wasn't sure if I should add a test and where to put it, so there's no test for this change. If you want to test this, I'd be happy to add one if you can advice where to put it.
",718,True,en,0
6566,1,4,5,Externals,MarshallOfSound,2016-07-26T03:46:00Z,46,51,1,4,"This adds a method that will allow consumers to easily set the appUserModelId of Electron to be the ID that Squirrel sets on the Desktop Shortcuts and Start menu Shortcuts it creates.  This reduces the knowledge barrier to getting Notifications working on Windows 8 (which is still a nightmare).

ID format was found here https://github.com/electron/electron/issues/4381#issuecomment-180534842

I went with a method instead of doing it automatically for backwards compatability reasons (setting the ID without consumers realizing might be interesting).
",553,True,en,0
6565,1,1,0,Externals,TiagoDanin,2016-07-25T07:05:04Z,12,12,7,3,"- Replace OSX to macOS
- Update references in:

> - docs-translations/es/tutorial/quick-start.md
>   
>   > Not exist: docs-translations/es/api/ipc-renderer.md - Update to docs/api/ipc-renderer.md
>   > Not exist: docs-translations/es/api/remote.md -  Update to docs/api/remote.md
> - docs-translations/pt-BR/tutorial/using-native-node-modules.md
>   
>   > Update to ""Quick Start"" in PT-BR
",391,False,en,0
6562,1,1,0,Externals,liusy182,2016-07-21T16:38:22Z,1,1,1,0,"[ci skip]
This will not fix issue #6541 , it will ONLY update documentation error pointed out by author.
",105,False,en,0
6559,10,0,0,Internals,zcbenz,2016-07-21T09:28:37Z,29,25,11,0,,0,False,en,0
6558,1,1,0,Externals,deepak1556,2016-07-25T07:03:50Z,69,1,3,4,"Fixes #5746
",12,True,en,0
6557,1,1,0,Externals,LittleboyHarry,2016-07-21T10:55:56Z,13,13,1,0,,0,False,en,0
6547,1,0,0,Internals,zcbenz,2016-07-20T11:18:47Z,0,3,1,0,"webview is now disabled when nodeIntegration is off.

Close #6538.
",67,True,en,0
6540,1,1,0,Externals,mattslay,2016-07-20T11:13:43Z,3,2,1,0,"Added a for loop to iterate over the array of files, which allows processing of multiple files being dropped over the ""holder"" div.
",132,True,en,0
6529,2,1,2,Externals,darkdh,2016-07-20T11:00:57Z,15,13,3,1,"[brave#27](https://github.com/brave/electron/pull/27)
",54,True,en,0
6527,1,0,0,Internals,zcbenz,2016-07-18T15:00:36Z,8,0,1,0,"The #6412 only fixes the issue on Linux, it seems that we have the same problem on macOS, so this PR ports the code to macOS.

Close #6519.
",140,True,en,0
6524,1,1,0,Externals,liusy182,2016-07-25T07:02:50Z,19,0,6,7,"This PR adds ""view-painted"" event to webContent.

Close issue #6426 
",69,True,en,0
6520,1,1,0,Externals,MagiCarbon,2016-07-18T14:49:13Z,1,1,1,1,"> `[security introduction](../tutorial/security.md)`.
> it should be `[security introduction](tutorial/security.md)`
",117,False,en,0
6511,2,1,0,Internals,zeke,2016-07-16T00:57:04Z,10,13,1,0,"Incremental progress toward ‚ú® pristine docs‚ú® 
",50,True,ht,0
6510,1,0,0,Internals,kevinsawicki,2016-07-15T17:40:32Z,4,2,2,0,"Follow on to #6497, mention how to reset the thumbnail back to the entire window region.
",89,True,en,0
6509,1,0,0,Internals,kevinsawicki,2016-07-15T17:17:59Z,1,1,1,0,"Pulls the https://github.com/electron/brightray/pull/237 fix into Electron.
",76,True,en,0
6502,1,1,0,Externals,liusy182,2016-07-15T13:45:49Z,13,9,2,0,"As title, make the callback of session.clearStorageData optional.
Close issue [6491](https://github.com/electron/electron/issues/6491)
",135,False,en,0
6499,1,1,0,Internals,kevinsawicki,2016-07-15T01:20:14Z,3,3,2,0,"- Remove Windows 7+ API labels since Windows 7 is the minimum version supported
- Remove reference to below Windows 7 since it isn't supported
",143,False,en,0
6497,3,7,0,Internals,kevinsawicki,2016-07-15T01:18:39Z,39,0,5,0,"This pull requests adds a `setThumbnailClip(region)` API to `BrowserWindow` instances on Windows that can be used to control which region of the window is used to generate the thumbnail image displayed in the taskbar when the window is hoverered over.

For the sample Electron app if you called it as:

``` js
require('electron').remote.getCurrentWindow().setThumbnailClip({x:0, y:0, width:500, height:100})
```

It would change the taskbar thumbnail from:

| Default | Set via `setThumbnailClip` |
| --- | --- |
| <img width=""145"" alt=""screen shot 2016-07-14 at 3 52 22 pm"" src=""https://cloud.githubusercontent.com/assets/671378/16858426/8f5f0202-49db-11e6-9bdc-159e698a0e01.png""> | <img width=""174"" alt=""screen shot 2016-07-14 at 3 51 55 pm"" src=""https://cloud.githubusercontent.com/assets/671378/16858445/bf6dd8ce-49db-11e6-8237-e7beeed4900f.png""> |

This can be useful for media-related apps that want the thumbnail to be the specific content such as an image, video element, etc.

Closes https://github.com/electron/electron/issues/2623
",1042,True,en,0
6495,1,2,0,Internals,zeke,2016-07-15T00:44:29Z,4,0,1,0,"A followup to https://github.com/electron/electron/pull/6471

cc @a904guy
",74,True,en,0
6493,2,3,0,Internals,zeke,2016-07-15T00:44:01Z,5,0,1,0,"This just landed in the awesome-electron repo: https://github.com/GPMDP/electron-devtools-installer

I know it's uncommon to mention third-party tools in the docs, but figured I'd open it up for discussion, as this package does provide a nice alternative to an otherwise very manual process.

cc @MarshallOfSound @jhen0409 @LestaD
",331,True,en,0
6490,1,1,0,Externals,wilsonpage,2016-07-15T00:12:35Z,27,1,7,0,,0,False,en,0
6489,10,5,0,Internals,kevinsawicki,2016-07-15T02:02:00Z,223,118,4,0,"This pull requests documents two new public API:
- `webContents.getAllWebContents()` (similar to `BrowserWindow.getAllWindows()`)
- `webContents.getFocusedWebContents()` (similar to `BrowserWindow.getFocusedWindow()`

Also adds an initial spec for `webContents` static APIs.
",275,False,en,0
6486,6,1,4,Externals,MarshallOfSound,2016-07-15T01:02:05Z,39,0,8,0,"Implements the request `getFeedURL` API.

Closes #6454 
",56,True,en,0
6482,1,1,0,Externals,deepak1556,2016-07-14T03:57:26Z,34,55,6,0,"https://cs.chromium.org/chromium/src/content/public/browser/web_contents_observer.h?l=183-254

for some history on the new api https://docs.google.com/document/d/1ICLLQoC9EsZ-bWH4ZKRhPCIoZKn6pOj02SlGl6SKH6Y
",207,True,en,0
6480,6,1,0,Internals,kevinsawicki,2016-07-14T03:47:07Z,66,16,9,0,"This pull request reworks the role-based menu items targeting web content methods to use the focused web contents instead of the focused browser window's web contents.

This changes the following:
- Adds a `webContents.isFocused()` API similar to `BrowserWindow.isFocused()
- Adds a `webContents.getFocusedWebContents()` API similar to `BrowserWindow.getFocusedWindow()`
- Context menu items (copy, paste, etc.) now work in the devtools when undocked on Windows and Linux.
",473,True,en,0
6476,1,1,0,Externals,AndrewTsao,2016-07-13T16:41:10Z,2,2,1,0,,0,False,en,0
6474,2,2,2,Externals,darkdh,2016-07-14T23:45:37Z,30,2,3,1,"We can extract more detail from certificate when encountering error.
",69,True,en,0
6470,17,0,0,Internals,zcbenz,2016-07-14T03:07:39Z,188,132,14,0,"This PR adds options to the `session.fromPartition(partition[, options])` API, so when the session with the `partition` has not been created, Electron will use `options` to create the session. An example of making the default session ignore cache:

``` js
session.fromPartition('', { cache: false })
```

This gives us a way to add options for various networking behaviors, instead of adding global command line switches. Currently there is only `cache` option in `options`.

The code of protocol and chrome-extension has been refactored, so Electron won't always create default session automatically on startup, otherwise it won't be possible for users to configure the default session.

Close #1720.
",702,True,en,0
6469,1,2,0,Externals,abdihaikal,2016-07-13T08:24:28Z,1,0,1,0,"[ci skip]
",10,True,pl,0
6467,12,1,0,Internals,zeke,2016-07-13T07:41:13Z,194,188,4,0,"- Normalize headings on all Class definitions
- Use the more explicit `Static Methods` heading to differentiate class methods from module methods.
- Clarify the rules for documenting classes in the styleguide.
- Improve wording in a few docs
",242,False,en,0
6466,2,0,0,Internals,zcbenz,2016-07-13T03:22:17Z,16,18,5,0,"Close #6261.
",13,True,en,0
6459,3,1,0,Internals,kevinsawicki,2016-07-13T01:43:48Z,70,33,2,0,"This pull requests adds the standard `Edit` menu items to the Devtool's context menu for any `<input>` `<textarea>` or content editable elements.

Also a little clean up of `inpector.js` from the CoffeeScript conversion üåå 

<img width=""799"" alt=""screen shot 2016-07-12 at 11 59 03 am"" src=""https://cloud.githubusercontent.com/assets/671378/16779660/12e14028-4828-11e6-8ea0-f1abde105021.png"">

Closes #525
",408,True,en,0
6457,3,1,0,Externals,preco21,2016-07-12T18:08:29Z,3,3,2,0,":memo: :sparkles: 
- Fix isolated link in `quick-start.md`.
- Fix typo in `browser-window.md`.
",95,False,en,0
6456,2,1,0,Externals,preco21,2016-07-12T17:59:38Z,284,56,17,0,":memo: :sparkles: 
",19,True,de,0
6455,2,1,0,Internals,kevinsawicki,2016-07-13T01:14:33Z,16,1,2,0,"The specified constraints may only contain minimum **or** maximum constraints so reuse the existing constraints so they aren't lost if only one is set.

Closes #6122
",166,True,en,0
6449,2,0,0,Internals,zcbenz,2016-07-12T06:25:38Z,4,13,1,0,"Close #3872.
",13,True,en,0
6448,1,0,0,Internals,zcbenz,2016-07-12T05:55:34Z,2,0,1,0,"Otherwise when destroying the tray icon from its context menu, crash may happen on older macOS versions.

Close #5656.
",119,True,en,0
6447,1,1,0,Externals,ellerbrock,2016-07-12T02:01:52Z,1,1,1,0,"fixed broken link ""how to share data between web pages"" in section ""Differences Between Main Process and Renderer Process""
",123,True,en,0
6446,9,3,0,Internals,kevinsawicki,2016-07-12T01:59:12Z,56,0,9,0,"This pull request adds a new `app.isAccessibilitySupportEnabled()` that can be used to detect if a screen reader or other assistive technologies are enabled for the application.

It also adds an `app` `accessibility-support-changed` event for when this value changes, such as turning VoiceOver on/off (`Cmd+F5`) on macOS.

Closes #5709
",336,True,en,0
6444,7,2,0,Internals,kevinsawicki,2016-07-12T17:26:02Z,58,21,6,0,"Implements #6375 on Windows by reading/writing registry keys following https://msdn.microsoft.com/en-us/library/windows/desktop/aa376977(v=vs.85).aspx

This pull request uses the app user model id as the key name, not sure if `app.getName()` would be a ""better"" name. /cc @felixrieseberg
",288,True,en,0
6443,1,1,0,Externals,robertfirespotter,2016-07-11T19:09:30Z,1,1,1,0,,0,False,en,0
6442,8,1,0,Internals,kevinsawicki,2016-07-12T01:39:16Z,85,34,3,0,"Previously the `visited` objects array grew for all arguments which would mean circular references could be detected for arrays and objects referenced multiple times but not actually referencing each other in a circular fashion.

Now values are removed from the `visited` set once they are fully serialized and still `null`-ed out when a cycle is detected.

Closes #6435
",371,True,en,0
6441,1,1,0,Internals,miniak,2016-07-12T01:33:29Z,8,14,1,0,,0,False,en,0
6438,1,1,0,Externals,develar,2016-07-11T11:13:00Z,2,2,1,0,"`electron-packager` and `electron-builder` now in the `electron-userland` github org ‚Äî links fixed.

Link to `electron-packager` placed after `electron-builder` because 
- user often needs to pack into distributable format
- by alphabet.
",240,True,en,0
6436,2,0,0,Internals,zcbenz,2016-07-11T08:31:17Z,33,24,4,0,"Close #6302.
",13,True,en,0
6434,1,0,0,Internals,zcbenz,2016-07-11T08:11:51Z,4,0,1,0,"This is to match the behavior on Windows and Linux.

Close #6267.
",66,True,en,0
6433,1,0,0,Internals,zcbenz,2016-07-11T07:23:11Z,3,0,1,0,"The fullscreen button is a OS X 10.9 only thing, and we don't want to have it under frameless window. We actually had this patch at first, but it got removed some time later, probably when we introduced the titleBarStyle option.

Close #6227.
",243,True,en,0
6432,2,0,0,Internals,zcbenz,2016-07-11T06:45:36Z,75,46,13,0,"Previously we only suppress the unresponsive event for a window when there is a modal window attached to it, this PR also suppresses the unresponsive event when menu and blocking dialog are showing.

Close #2947.
Close #6146.
",226,True,en,0
6431,4,3,0,Internals,zcbenz,2016-07-11T05:58:33Z,24,16,6,0,"Close #3262.
",13,True,en,0
6429,1,2,0,Internals,zcbenz,2016-07-11T04:28:00Z,6,0,1,0,"Close #4709.
",13,True,en,0
6428,1,0,0,Internals,zcbenz,2016-07-11T04:00:48Z,10,8,2,0,"Close #2180.
",13,True,en,0
6423,6,5,4,Externals,hokein,2016-07-11T00:03:03Z,73,74,27,0,"This PR has no functional change. Modernize the C++03 code to C++11 (all the features are allowed in Chromium code style). Automatically converted by `modernize-*` checks in clang-tidy. Tested on macOS locally.
",211,True,en,0
6420,1,1,0,Externals,pedrro,2016-07-10T10:30:41Z,3,3,1,0,"This PR fix some broken links in PT-BR documentation.
",54,True,en,0
6419,1,1,0,Externals,hokein,2016-07-10T10:29:40Z,0,2,2,0,"These unused using decls are found and fixed automatically by running `misc-unused-using-decls` check in [clang-tidy](http://clang.llvm.org/extra/clang-tidy/). Tested with local build on macOS.
",194,True,en,0
6418,1,1,0,Externals,vsemozhetbyt,2016-07-10T10:29:18Z,1,1,1,0,":memo: `false` -> `true` in the `webContents.print` `silent` explanation.
",74,True,en,0
6417,4,1,0,Internals,zcbenz,2016-07-09T14:37:39Z,50,13,3,0,"For window without thickFrame, we have to keep them always in normal window state, otherwise weird things will happen.

Close #1690.
",133,True,en,0
6416,1,1,0,Externals,pocorschi,2016-07-09T15:49:30Z,1,1,1,0,"The FAQ link in the docs pointed to a non existent faq directory.
",66,True,en,0
6415,2,0,0,Internals,zcbenz,2016-07-09T13:09:23Z,24,5,3,0,"This options provides a way to remove the `WS_THICKFRAME` style for frameless window, which can achieve some special effects.

Close #4573.
Close #5060.
",153,True,en,0
6412,1,0,0,Internals,zcbenz,2016-07-09T09:16:12Z,10,0,1,0,"Close #6270.
",13,True,en,0
6411,1,0,0,Internals,zcbenz,2016-07-09T08:18:31Z,27,2,5,0,"Close #6388.

This fixes a circular reference problem, the `URLRequestContextGetter` is referenced by protocol handlers, which are store in `AtomURLRequestJobFactory`, which the factory is managed by `URLRequestContextGetter`. So if we do not clear the protocol handlers, the `URLRequestContextGetter` will never get cleared.
",326,True,en,0
6405,1,1,0,Externals,vsemozhetbyt,2016-07-08T19:18:54Z,1,1,1,0,":memo: Remove a redundant # from a href hash.

web-contents.md##webcontentssendinputeventevent ->
web-contents.md#webcontentssendinputeventevent
",145,True,en,0
6404,2,3,0,Internals,kevinsawicki,2016-07-09T03:08:11Z,3,3,1,0,"I ran https://github.com/GoogleChrome/accessibility-developer-tools against the default app and there were a few failures.
- Missing `lang` attribute on `<html>` https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_html_01
- Low contrast ratio on link and text colors https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_color_01

The updated colors are directly from http://electron.atom.io since those had already been adjusted for contrast awhile back.

| üîÖ | üîÜ |
| --- | --- |
| ![screen shot 2016-07-08 at 11 34 44 am](https://cloud.githubusercontent.com/assets/671378/16697757/0b419bea-4500-11e6-8547-2975855047f7.png) | ![screen shot 2016-07-08 at 11 34 30 am](https://cloud.githubusercontent.com/assets/671378/16697760/0d0b4ebc-4500-11e6-9540-ae48a1c9df2b.png) |

/cc @jlord @zeke 
",854,False,en,0
6403,1,1,0,Externals,devjin0617,2016-07-08T16:26:18Z,1,0,1,0,"Add meetup community link of turkish
",37,True,en,0
6392,1,1,0,Externals,vsemozhetbyt,2016-07-08T01:03:32Z,2,2,1,0,":memo: Fixes #6387
",19,True,en,0
6391,3,0,4,Externals,jlord,2016-07-08T19:45:41Z,3,1,1,0,"The docs within the `api` category need to use a style of `h1` followed by a `blockquote` so that the website is generated correctly.

This PR updates this doc which was missing that and breaking the site layout.

I've changed the title to just 'Locales' but let me know if that is too generic. I also think we could probably change the filename?

_Problem_

![ahhh](https://cloud.githubusercontent.com/assets/10393198/16673489/4637022e-44b7-11e6-9dac-6fcf835e52ff.png)

_Fix_

<img width=""833"" alt=""screen shot 2016-07-07 at 5 36 01 pm"" src=""https://cloud.githubusercontent.com/assets/1305617/16674065/4d095fc8-4469-11e6-90e7-eb34a8bb9ddf.png"">

cc @zeke 

üîó https://github.com/electron/electron.atom.io/issues/369
",719,True,en,0
6390,1,1,0,Externals,vsemozhetbyt,2016-07-08T00:52:33Z,1,1,1,0,":memo: webContents, Tray -> Tray, webContents

If I get it right, only API TOCs should be ordered alphabetically, so I've left other ones (Guides, Tutorials, Development) untouched. I'm not so sure about API TOC Intro (three links below the ""Synopsis""), tell me if they should be sorted alphabetically too.
",307,True,en,0
6385,5,4,1,Internals,kevinsawicki,2016-07-08T02:22:21Z,233,155,37,0,"This pull request is a reworking of #6229 but done differently in terms of how the option to use a default role accelerator is passed through the menu system.

The bulk of the diff here is mostly around narrowing the references from `ui::MenuModel` to `atom::AtomMenuModel`.

A new option, `useDefaultAccelerator`, is set to `true` when requesting the accelerator for a menu item that is only set for application menus on all platforms, so context, tray, and dock menus will not display the default role accelerator.

Closes #6206
",531,True,en,0
6384,1,1,0,Externals,jlord,2016-07-08T00:35:08Z,0,0,1,0,"The location and name of the FAQ is currently a bit redundant: `faq/electron-faq`. On the website we used permalinks to make it cleaner `docs/faq` but that has lead to chasing down and correcting links so that they work in both places under two addresses.

Renaming and moving it here in the original docs will eliminate having to worry about that on the site and these changes (having it located at `docs/faq.md`) will be nice here, too.

I'll revert some of the things we've done on the website to compensate for the two addresses so in the next release the site will use this new location.  

cc @zeke 

:link: https://github.com/electron/electron.atom.io/issues/364
",670,True,en,0
6383,2,5,1,Internals,kevinsawicki,2016-07-08T00:32:07Z,2,4,2,0,"Previously it was setting the accelerator to `Command+Q` for the `quit` menu item role on Linux when it should have been `CommandOrControl+Q`.

Also adds a `File > Quit` menu item to the default app on Linux to be consistent with Windows.
",239,True,en,0
6382,1,1,0,Externals,vsemozhetbyt,2016-07-07T15:54:23Z,1,1,1,0,":memo: web-contents.md#webcontentsexecutejavascriptcode-usergesture ->
web-contents.md#webcontentsexecutejavascriptcode-usergesture-callback
",141,False,et,0
6379,1,1,0,Externals,Crocmagnon,2016-07-07T10:49:42Z,1,1,1,0,"I updated the link to hightlight not only the first line but the whole `window.eval()` override.
",97,True,en,0
6377,1,0,0,Internals,zcbenz,2016-07-07T01:45:55Z,1,9,3,0,"Close #6373.
",13,True,en,0
6376,1,2,0,Internals,kevinsawicki,2016-07-07T01:25:56Z,1,1,1,0,"Follow on to #6354, missed this other case of using `JSON.parse` + `fs.readFileSync` instead of `require` for loading `package.json` which does not handle a BOM in the file.

Closes #6353
",188,True,en,0
6375,13,8,5,Internals,kevinsawicki,2016-07-08T01:39:20Z,131,0,5,1,"Adds ~~3~~ 2 new APIs to `app` on macOS üçé that allows apps to add and remove themselves as a login item that will open at login.
### Original API

~~Also adds a `getLoginItemStatus` API that reports back if the app is currently set as a login item and if it was currently opened automatically at login.~~
- ~~`app.setAsLoginItem([openAsHidden])`~~
- ~~`app.removeAsLoginItem()`~~
- ~~`app.getLoginItemStatus()`~~
### Updated API
- `app.getLoginItemSettings()` - returns an object with the app's current settings
- `app.setLoginItemSettings(settings)` - sets the app's login item settings, can be used to both add and remove the app as a login item.

/cc @electron/maintainers any naming feedback on these APIs would be appreciated

Closes #6202
",748,False,en,0
6372,2,3,0,Internals,kevinsawicki,2016-07-07T01:19:02Z,10,3,3,0,"This pull request sets the `icon` property on the default app's `BrowserWindow` to the electron icon.

This will cause the icon to show in the task bar and window switcher instead of the default question mark icon.

Tested on Ubuntu 14.04
### Before

<img width=""34"" alt=""screen shot 2016-07-06 at 11 50 50 am"" src=""https://cloud.githubusercontent.com/assets/671378/16630620/068d7a6a-4370-11e6-8ed1-630604ca2b78.png"">

### After

<img width=""32"" alt=""screen shot 2016-07-06 at 11 48 37 am"" src=""https://cloud.githubusercontent.com/assets/671378/16630569/c4a1df60-436f-11e6-9c95-f90c40c9a24c.png"">
",609,True,en,0
6370,1,1,0,Internals,kevinsawicki,2016-07-07T01:11:12Z,5,0,1,0,"Pull request #6068 introduced a regression where menu shortcuts with no modifiers would no longer fire.

This pull request adds back the key forwarding to the main menu before it gets re-dispatched to the window, it was previously done as https://github.com/electron/electron/pull/6068/files#diff-00f46b45a76b7daf5efc593cfbbba7c9L25

This seems like the needed behavior after reading https://cs.chromium.org/chromium/src/chrome/browser/ui/cocoa/browser_window_utils.mm?l=63

Closes #6362
",488,True,en,0
6369,6,1,1,Internals,kevinsawicki,2016-07-07T00:47:46Z,13,2,3,0,"Continuation of #6360 with an added spec.

Use `''` as the `name` when the object argument has no constructor. This makes the behavior for arguments the same as the behavior of return values.

Refs #5736
Closes #6360 
",218,True,en,0
6368,1,1,0,Externals,vsemozhetbyt,2016-07-06T16:02:35Z,2,2,1,0,":memo: Swap `clearSelection` and `keepSelection` definitions
for `webContents.stopFindInPage(action)` that seems to be in wrong order.

[ci skip]
",146,False,en,0
6363,2,5,3,Externals,MarshallOfSound,2016-07-07T10:52:47Z,11,3,1,0,"This fixes #6347 by bounding the width and height values by the MinimumSize and MaximumSize bounds of the window.
",114,True,en,0
6356,1,2,0,Externals,jonathansampson,2016-07-06T02:37:38Z,1,1,1,0,"The URL exists for historical reasons, but is no longer the primary URL for developer resources.
",97,True,en,0
6355,7,1,2,Internals,kevinsawicki,2016-07-07T01:09:40Z,78,92,11,1,"This pull request moves the `capturePage` implementation from the window to the web contents so it can be used on a `<webview>` tag.

Closes #3687 
",148,True,en,0
6354,1,1,0,Internals,kevinsawicki,2016-07-06T00:48:37Z,1,1,1,0,"This pull request uses `require` instead of `JSON.parse` + `fs.readFileSync` to load the app's package.json so that a `BOM`, if included, is stripped.

Closes #6353
",165,True,en,0
6342,19,4,0,Internals,zcbenz,2016-07-22T14:53:33Z,351,351,86,18,,0,False,en,0
6333,8,9,0,Internals,zcbenz,2016-07-04T04:30:56Z,206,0,8,0,"Close #4622.
## Dragging files out of the window

For certain kinds of apps that manipulate on files, it is important to be able
to drag files from Electron to other apps. To implement this feature in your
app, you need to call `webContents.startDrag(item)` API on `ondragstart` event.

In web page:

``` html
<a href=""#"" id=""drag"">item</a>
<script type=""text/javascript"" charset=""utf-8"">
  document.getElementById('drag').ondragstart = (event) => {
    event.preventDefault()
    ipcRenderer.send('ondragstart', '/path/to/item')
  }
</script>
```

In the main process:

``` javascript
ipcMain.on('ondragstart', (event, filePath) => {
  event.sender.startDrag({
    file: filePath,
    icon: '/path/to/icon.png'
  })
})
```
",724,False,en,0
6324,2,1,3,Externals,MarshallOfSound,2016-07-02T11:25:15Z,138,1,2,0,"Closes #5363
",13,True,en,0
6323,1,0,0,Internals,zcbenz,2016-07-02T07:41:30Z,4,3,1,0,"On Linux if we set icon after window shows, weird things will happen.

Close #6205.
",84,True,en,0
6322,1,0,0,Internals,zcbenz,2016-07-02T07:12:24Z,3,3,3,0,,0,False,en,0
6315,1,0,0,Internals,zcbenz,2016-07-01T14:14:18Z,3,1,1,0,"MatchesExtension compares double extensions like .tar.gz, which does not match the filters.

Close #6305.
",106,True,en,0
6314,1,0,0,Internals,zcbenz,2016-07-01T13:56:48Z,1,1,1,0,"It is super unreliable in CI, I happened to reproduce the failing test on my Windows machine, and it seems that sometimes requesting custom protocol URL in window with partition results in the URL being opened with `OpenExternal`.

I'm not sure of the root cause, but in order to make other innocent PRs pass, I'm suppressing the test.
",336,True,en,0
6313,2,6,0,Externals,MarshallOfSound,2016-07-02T07:44:33Z,9,0,2,0,"Wraps the native Notification class provided by Brightway and ensures that (unless specified in the constructor) that muted webcontents make silent notifications

Fixes #5983
",175,True,en,0
6309,5,4,3,Internals,zcbenz,2016-07-02T01:51:47Z,69,83,8,0,"This PR implements `app.setBadgeCount` on Mac and moves APIs under `app.launcher` to `app`.

`app.launcher` is probably not a good name because `launcher` also means a popular type of programs, and since we are making `setBadgeCount` work on other platforms, there is no meaning to keep the `app.launcher` set of APIs.

Also for the `isCounterBadgeAvailable` API, generally for cross-platform APIs they should usually silently fail on platforms that do not support them, so users don't have to worry about platform differences. In the case of `app.setBadgeCount`, there is no case that users would care whether the call succeed, so I'm removing it.
",649,True,en,0
6298,2,1,3,Externals,jhen0409,2016-07-01T15:59:39Z,17,9,1,1,"For [chrome-react-perf](https://github.com/crysislinux/chrome-react-perf/blob/master/chrome/manifest.prod.json#L25) support.
",125,True,en,0
6294,3,1,0,Externals,preco21,2016-06-30T21:41:50Z,423,265,13,0,"A little bit late :joy: 
",25,True,en,0
6290,1,0,0,Internals,kevinsawicki,2016-06-29T18:25:44Z,6,6,3,0,"Follow on to #5725, update renamed APIs in translated docs.
",60,True,en,0
6289,7,1,0,Internals,kevinsawicki,2016-06-29T18:14:53Z,92,97,16,0,"At some point the `spec/` directory stopped being linted when running `npm run lint`.

This looks to be because `/spec` is ignored in the root `package.json` so running `standard spec` from the root of the repo was ignoring all the files instead of linting them.

This pull request switches it to `cd spec && standard` so that the standard linter picks up the config from `spec/package.json` instead of the root one.

/cc @zeke 
",429,True,en,0
6288,1,1,0,Externals,thompsonemerson,2016-06-29T15:15:34Z,3,3,1,0,,0,False,en,0
6282,1,0,0,Internals,kevinsawicki,2016-06-29T16:46:02Z,12,1,2,0,"Changes the `cookies.set` error message to be ""Setting cookie failed"" instead of ""failed"".

Refs #6209
",103,True,en,0
6281,1,0,0,Internals,kevinsawicki,2016-06-29T15:46:37Z,2,2,1,0,"This previously had `session` as a property to `cookies.set` but the comment mentioned `HTTP only` and it looks like internally it was meant to be `httpOnly` instead: https://github.com/electron/electron/blob/8155e7192569c3a30ca3cb5f25a306d0dc5d3d44/atom/browser/api/atom_api_cookies.cc#L174
",292,True,en,0
6280,2,0,0,Internals,kevinsawicki,2016-06-29T20:00:10Z,4,3,2,0,"Show menu previously set via `SetContextMenu` when no specified menu to `PopUpContextMenu`.

Closes #6276 
",107,True,en,0
6279,2,0,0,Internals,kevinsawicki,2016-06-28T21:47:32Z,25,10,3,0,"While writing a spec for #6269 I found an issue where the callback to `chrome.storage.*.get` was not being called when no keys were specified.

This was because it was returning the values instead of calling the callback with them.

/cc @jlord
",244,True,en,0
6278,3,0,0,Internals,kevinsawicki,2016-06-28T19:41:48Z,16,1,3,0,"Continuation of #6254 with added spec. /cc @miniak 

Closes #6253
Closes #6254
",79,True,en,0
6274,1,1,0,Externals,thompsonemerson,2016-06-28T13:43:29Z,1,1,1,0,,0,False,en,0
6273,1,1,0,Externals,thompsonemerson,2016-06-28T13:40:47Z,1,1,1,0,,0,False,en,0
6272,1,1,0,Externals,thompsonemerson,2016-06-28T13:43:06Z,1,1,1,0,,0,False,en,0
6269,1,1,0,Externals,draivin,2016-06-28T19:44:45Z,14,9,1,0,"Some chrome extensions use `chrome.storage.local` instead of `chrome.storage.sync`, this pull request generalizes the storage code to work with multiple namespaces.

One example is redux devtools latest version, as I said here: https://github.com/electron/electron/issues/6148.
",278,True,en,0
6266,1,2,0,Externals,thompsonemerson,2016-06-27T23:58:42Z,35,0,1,0,,0,False,en,0
6265,1,1,0,Externals,thompsonemerson,2016-06-27T23:28:08Z,1,1,1,0,"Broken link (404) to DesktopCapturer
",37,True,en,0
6263,1,1,0,Externals,thompsonemerson,2016-06-27T23:27:49Z,1,1,1,0,,0,False,en,0
6244,2,0,0,Internals,zcbenz,2016-06-26T04:27:06Z,40,24,5,0,,0,False,en,0
6243,7,4,17,Externals,jnugh,2016-06-29T18:45:19Z,105,1,6,3,"Hi,
I implemented a way to change the unity launcher counter badge from within electron:
![Screenshot](https://jnugh.de/index.php/s/8nzeiJSUT3WtjUe/download)

For this to work the app needs to be started with `env CHROME_DESKTOP=[name of desktop file]` or (which I found out about while writing this: set desktopName in package.json the way you would do for making the progressbar work).

Please let me know what you think. When there is something to improve, just let me know. :construction_worker: 
",501,False,en,0
6238,1,1,0,Externals,fdelayen,2016-06-26T01:59:31Z,3,1,1,0,":bug: Fixes top level menu items not executing click handlers for at least Windows.

Note : For X11 with DBus we will probably have to report an issue because it looks like there is not any callback available or working. I will have a look at it.

Related to #3049 
",266,True,en,0
6233,10,4,0,Internals,kevinsawicki,2016-06-25T05:23:32Z,65,2,3,0,"This adds two new APIs to `clipboard`:
- `clipboard.readBookmark()` that returns an object with `title` and `url` keys
- `clipboard.writeBookmark(title, url)` that writes a bookmark to the clipboard

This allows you to write combined url/titles to the clipboard and apps supporting that (like `TextEdit`) will paste them as hyperlinks. Apps default to using the `url` if pasting bookmarks isn't supported.

![clipboard-bookmark](https://cloud.githubusercontent.com/assets/671378/16352115/e76d01ea-3a1f-11e6-8ad7-16e8bae4a6d2.gif)

Closes #5861
",544,False,en,0
6226,1,1,0,Internals,miniak,2016-06-25T01:18:19Z,2,1,1,0,,0,False,en,0
6225,1,10,2,Internals,miniak,2016-06-29T23:54:26Z,18,0,2,5,"I know that you are publishing the electron.exe.pdb and node.dll.pdb to your private symbol server, but when I have a crash dump from an actual rebranded app, then main executable has a different name and cannot be found on the symbol server. I would need to get the electron.exe.pdb and load it manually.
",306,True,en,0
6221,1,1,0,Externals,SudarAbisheck,2016-06-24T06:08:23Z,1,1,1,0,"Corrected the anchor text
",26,True,en,0
6220,1,0,0,Internals,zcbenz,2016-06-24T06:07:28Z,27,25,7,0,"Close #6123.
",13,True,en,0
6218,1,1,0,Internals,zcbenz,2016-06-24T03:17:46Z,5,1,1,0,"Close #6050.
",13,True,en,0
6216,7,4,0,Internals,zcbenz,2016-07-01T05:34:01Z,207,69,1,7,"[**Renderer page**](https://github.com/electron/electron/blob/class-docs/docs/styleguide.md)

This PR adds details to styleguide.md on how should pages and API references be formatted. Currently we have many files using different styles, and eventually we should format them to use only one style.

Some decisions in this PR may still need to be discussed.

/cc @electron/core 
",378,True,en,0
6213,5,1,0,Internals,kevinsawicki,2016-06-24T00:26:33Z,62,22,2,0,"Pull request https://github.com/electron/electron/pull/2976 added support for `require` not looking outside of the current application when loading modules by patching `Module._nodeModulePaths` and pulling in some code from node's own `module.js` implementation.

Node's implementation got some great improvements via https://github.com/nodejs/node/pull/5172 and this pull request seeks to use those improvements via post-processing the results of the default implementation instead of reimplementing the method fully.
- [x] Add specs for previous behavior
- [x] Use default `Module._nodeModulePaths` implementations and filter results in patched version
- [x] Profile it üèá

This was profiled by calling `Module._nodeModulePaths` using 1,000 paths that were all inside the app's resources path so the filtering is happening on every call.

It looks to be a 50-75% speed improvement, results below.

``` js
var path = require('path')
var Module = require('module')
var paths = require('./paths')

module.exports = function () {
  var start = Date.now()
  var count = 0
  var total = 0
  for (var i = 0; i < paths.length; i++) {
    count++
    total += Module._nodeModulePaths(paths[i]).length
  }

  var time = Date.now() - start
  console.log(`${paths.length} paths resolved to ${total} search paths in ${time}ms`)

}
```
### Before

<img width=""403"" alt=""screen shot 2016-06-23 at 3 47 37 pm"" src=""https://cloud.githubusercontent.com/assets/671378/16322997/343c044a-395c-11e6-8691-c9ebdff5a639.png"">
### After

<img width=""419"" alt=""screen shot 2016-06-23 at 3 48 23 pm"" src=""https://cloud.githubusercontent.com/assets/671378/16322999/38fe2698-395c-11e6-8e2f-1233d0a08f5f.png"">
",1683,True,en,0
6211,3,1,0,Internals,kevinsawicki,2016-06-24T00:25:26Z,15,12,1,0,"I don't believe the forked version of `node-pre-gyp` is required any longer and the latest upstream version appears to work since it support Electron now.

Also some minor formatting changes.
",192,True,en,0
6201,1,0,0,Internals,zcbenz,2016-06-23T11:55:39Z,4,1,1,0,"For all `ERR_ABORTED` errors happened in `DidFailProvisionalLoad`, the requests are actually canceled, like:
- page redirects
- page starts a download
- have two calls of `loadURL` together

Which do not satisfy the use cases of `did-fail-load` event, and causes surprises to users.

So this PR suppresses `ERR_ABORTED` for `DidFailProvisionalLoad`, closes #4396.
",364,False,en,0
6198,3,0,0,Internals,zcbenz,2016-06-23T04:49:06Z,26,29,1,0,"Most recent test failures came from this, hope it can make the test more reliable.
",83,True,en,0
6197,1,0,0,Internals,zcbenz,2016-06-23T04:49:11Z,11,2,1,0,"Close #6189.
",13,True,en,0
6195,1,1,0,Internals,kevinsawicki,2016-06-23T03:31:26Z,3,0,1,0,"This is a secondary fix for #6094 and pull request #6095

Previously it was still possible to access `protocol` without the properties after `ready has fired:

``` js
let protocol

app.on('ready', function () {
  // will be undefined
  console.log(protocol.interceptFileProtocol) 
})

// later on but before app ready
protocol = require('electron').protocol
```

This pull request eagerly requires `protocol` so that it is an earlier `ready` listener than anything loaded from the app's main script.

`protocol` was previously required eagerly by `chrome-extension.js` so this shouldn't impact performance.

Closes #6094 
",622,True,en,0
6192,1,1,0,Internals,kevinsawicki,2016-06-23T03:06:42Z,8,5,2,0,"Noticed a few APIs that weren't using upper case initialisms:
- `nativeImage.toPng` -> `nativeImage.toPNG`
- `nativeImage.toJpeg` -> `nativeImage.toJPEG`

This pull request does not remove the old names but does update the docs so hopefully new apps will use the new APIs as documented.

Deprecation warnings will eventually be added for these once we are closer to a 2.0 API.
",377,False,en,0
6190,19,8,9,Internals,kevinsawicki,2016-06-23T05:34:10Z,198,131,8,0,"Adds fallback labels and accelerators for all `MenuItem` roles.

This allows you to use menu item roles like so:

``` js
{
      label: 'Edit',
      submenu: [
        {
          role: 'undo'
        },
        {
          role: 'redo'
        },
        {
          type: 'separator'
        },
        {
          role: 'cut'
        },
        {
          role: 'copy'
        },
        {
          role: 'paste'
        }
}
```

And the accelerators and labels will be automatically provided as so:

<img width=""237"" alt=""screen shot 2016-06-22 at 2 19 30 pm"" src=""https://cloud.githubusercontent.com/assets/671378/16284091/5fbae6a0-3884-11e6-9f7c-a00779515791.png"">

Close #2812
",687,True,en,0
6184,2,0,0,Internals,kevinsawicki,2016-06-22T20:09:17Z,16,3,2,0,"This property is used to map items to their role so this shouldn't be modifiable since weird things could happen if it is. üëª 
",129,True,en,0
6183,1,1,0,Internals,joshaber,2016-06-22T23:33:30Z,1,1,1,0,"Bump to [1.1.0](https://github.com/electron/electron-frameworks/releases/tag/v1.1.0) which upgraded Squirrel.Mac.
",114,True,en,0
6182,6,0,0,Internals,kevinsawicki,2016-06-22T17:00:01Z,107,87,2,0,"`menu-item.js` was still using the old CoffeeScript generated class wrapper.

This pull request reformats it a bit to make it blend in with the new code style.

Also adds a few more specs for the error cases of creating an invalid `MenuItem`.
",243,True,en,0
6180,1,1,2,Externals,jhen0409,2016-06-23T04:58:30Z,7,1,1,0,"Add a case of not provide extension-id: (message, responseCallback)

It will be fix wrong log `Connect to unknown extension [object Object]`.
([redux-devtools-extension/src/browser/extension/options/syncOptions.js#L52](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/src/browser/extension/options/syncOptions.js#L52) can be reproduced)
",355,True,en,0
6175,1,1,0,Internals,miniak,2016-06-22T11:25:49Z,28,0,8,0,"This allows the app to prevent other apps from capturing it's window contents.
",79,True,en,0
6174,1,0,0,Internals,zcbenz,2016-06-23T04:05:18Z,154,129,1,0,"Before:

``` markdown
## Class: Session

### Instance Methods

#### `ses.cookies`

#### `ses.cookies.set(details, callback)`
```

After:

``` markdown
## Class: Session

### Instance Properties

#### `ses.cookies`

## Class: Cookies

### Instance Methods

#### `cookies.set(details, callback)`
```

This reflects the nature of `ses.cookies` and `ses.webRequest`, i.e. they are independent classes. And it leaves spaces for future API extensions, like transferring cookies between sessions.
",490,True,en,0
6173,2,1,2,Externals,arifcakiroglu,2016-06-22T10:31:36Z,1,0,1,0,"add `electron-tr` community
",28,True,en,0
6172,5,0,0,Internals,zcbenz,2016-06-22T07:34:10Z,116,54,11,0,"- Close #3602.
- Close #5777.
- Refactor the code to avoid force creating default BrowserContext in C++,
- Make `webContents.setUserAgent` only work for current WebContents.
",174,False,en,0
6171,1,0,0,Internals,zcbenz,2016-06-22T05:26:27Z,13,7,1,0,"Close #3764.
",13,True,en,0
6170,4,0,0,Internals,zcbenz,2016-06-22T05:06:25Z,70,58,11,0,"Close #935.
",12,True,en,0
6169,2,1,0,Internals,kevinsawicki,2016-06-22T01:24:21Z,6,4,2,0,"Use `GetCommandIdAt` to map/retrieve roles since menu indices might change if `Menu.insert` is used.

Closes #4479
",115,True,en,0
6168,2,1,0,Internals,kevinsawicki,2016-06-22T01:12:10Z,5,0,2,0,"Not sure if/when/how this might have regressed, but using an `accelerator` of `Delete` no longer works as reported in #5419.

This looks to be because `ui::MacKeyCodeForWindowsKeyCode` from Chrome is returning [`NSDeleteFunctionKey`](https://developer.apple.com/reference/appkit/1535851-function_key_unicodes/nsdeletefunctionkey?language=objc) as the character instead of [`NSDeleteCharacter`](https://developer.apple.com/reference/appkit/1540619-anonymous/nsdeletecharacter?language=objc).

From the [NSMenuItem keyEquivalent docs](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSMenuItem_Class/#//apple_ref/occ/instp/NSMenuItem/keyEquivalent):

> If you want to specify the Backspace key as the key equivalent for a menu item, use a single character string with NSBackspaceCharacter (defined in NSText.h as 0x08) and for the Forward Delete key, use NSDeleteCharacter (defined in NSText.h as 0x7F). Note that these are not the same characters you get from an NSEvent key-down event when pressing those keys.

https://cs.chromium.org/chromium/src/ui/events/keycodes/keyboard_code_conversion_mac.mm?l=75

This pull request adds a check and mapping for this case which gets `Delete` working again as an accelerator for a menu like:

``` js
{
  label: 'Backspace',
  accelerator: 'Backspace'
},
{
  label: 'Delete',
  accelerator: 'Delete'
}
```
### Before

<img width=""223"" alt=""screen shot 2016-06-21 at 12 31 35 pm"" src=""https://cloud.githubusercontent.com/assets/671378/16243547/a708dd9c-37ac-11e6-800d-d25306e880b1.png"">
### After

<img width=""217"" alt=""screen shot 2016-06-21 at 12 32 13 pm"" src=""https://cloud.githubusercontent.com/assets/671378/16243552/ab5fa1fa-37ac-11e6-80c5-95f26a4fcd9a.png"">

Closes #5419
",1763,True,en,0
6166,6,3,0,Internals,kevinsawicki,2016-06-22T00:58:39Z,13,11,4,0,"Support a `role: 'togglefullscreen'` that enter/exits full screen mode for the focused window.

Closes #2811
",109,True,en,0
6164,8,3,3,Externals,brenca,2016-06-26T02:39:59Z,95,32,7,4,"With the current implementation, every time we were notified about a presentation event we asked for a copy of the `BackingStore`, which sadly caused another presentation event, which caused a landslide of presentation events. To fix this, we now check for the `damaged_rect`, which is empty if we ask for a copy of the `BackingStore`.

I've also added another option to the subscriber that allows the user to only get the damaged area in the `frameBuffer`, potentially increasing performance. Specifying this is oprional, so it shouldn't break currently functioning apps using the API.
",587,True,en,0
6161,1,0,0,Internals,zcbenz,2016-06-21T09:34:55Z,18,9,2,0,"Close #2505.
",13,True,en,0
6160,1,0,0,Internals,zcbenz,2016-06-21T08:54:55Z,20,13,2,0,"Close #2566.
",13,True,en,0
6159,5,0,0,Internals,zcbenz,2016-06-21T07:35:17Z,87,60,9,0,"Close #2469.
Close #5089.
",26,False,en,0
6154,8,0,1,Internals,kevinsawicki,2016-06-21T16:20:22Z,37,17,4,0,"Adds `role: 'quit'` support to menu items that maps to the `terminate` selector on OS X and `app.quit()` on Linux and Windows.

Also does a little `var`, `const`, `let` cleanup and removes CoffeeScript `ref` variables.

Closes #2813
",233,True,en,0
6151,7,2,1,Internals,kevinsawicki,2016-06-21T00:54:15Z,43,10,3,0,"This pull request adds a default `onFullfilled`/`onRejection` handler to remote promises so that unhandled rejections of remote promises appear in the renderer process instead of the main process.

Also adds some `var` -> `const`/`let` formatting to `rpc-server.js`.

Closes #6113
",281,True,en,0
6150,4,2,0,Externals,CharlieHess,2016-06-21T00:48:42Z,71,23,4,0,"This PR attempts to fix https://github.com/electron/electron/issues/6066 by adding a `subscribeLocalNotification` API. The subscription code has been refactored into a helper so both methods can use it.
",203,True,en,0
6147,1,0,0,Internals,zcbenz,2016-06-20T13:03:17Z,6,1,1,0,"This is to make the `shell.showItemInFolder` API have same behavior with `shell.openItem`.

Close #5739.
",105,True,en,0
6145,1,1,0,Internals,zcbenz,2016-06-20T08:50:16Z,17,4,1,0,"Close #5969.
",13,True,en,0
6144,1,0,0,Internals,zcbenz,2016-06-20T08:09:42Z,5,0,1,0,"It seems to cause crashes when it is called for contexts that do not have node integrations.

Close #6017.
",107,True,en,0
6140,23,0,0,Internals,zcbenz,2016-06-20T07:27:05Z,532,28,16,0,"# WIP

This is still under testing, each platform has huge differences on how the child windows should work, I'm trying to figure out a way to make the API work consistently on all platforms without platform-dependent code.

Close #323.
# Docs
## Parent and child windows

By using `parent` option, you can create child windows:

``` javascript
let top = new BrowserWindow()
let child = new BrowserWindow({parent: top})
```

The `child` window will always show on top of the `top` window.
### Modal windows

A modal window is a child window that disables parent window, to create a modal
window, you have to set both `parent` and `modal` options:

``` javascript
let child = new BrowserWindow({parent: top, modal: true, show: false})
child.loadURL('https://github.com')
child.once('ready-to-show', () => {
  child.show()
})
```
### Platform notices
- On macOS the child windows will keep the relative position to parent window
  when parent window moves, while on Windows and Linux child windows will not
  move.
- On Windows it is not supported to change parent window dynamically.
- On Linux the type of modal windows will be changed to `dialog`.
- On Linux many desktop environments do not support hiding a modal window.
",1224,True,en,0
6137,3,1,0,Externals,preco21,2016-06-20T00:48:33Z,249,85,15,0,":memo: :heart: 
",16,True,en,1
6136,1,1,0,Externals,MarshallOfSound,2016-06-19T16:56:22Z,1,1,1,0,"Fixes #6133

Because apparently typos bug people enough to raise an issue but not enough to fix it üòÜ 
",105,True,en,0
6135,1,1,0,Externals,blainesch,2016-06-20T00:34:40Z,5,0,1,0,"Most of the other api docs have one example of where to find the module in a copy/paste format. This pull request adds one for the system preferences.
",151,True,en,0
6134,1,0,0,Internals,zcbenz,2016-06-19T12:32:56Z,3,3,3,0,"http://googlechromereleases.blogspot.jp/2016/06/stable-channel-update_16.html
",78,True,en,0
6130,1,2,0,Externals,rahatarmanahmed,2016-06-19T12:32:06Z,2,2,2,0,"Ever since v0.37.3, process.stdout in the renderer has not worked at all. It turns out that electron's fork of node sets stdout to [a stream that does nothing](https://github.com/electron/node/blob/4f9e177f4c729f5f6d1001843f42cef35c1becab/lib/internal/process/stdio.js#L168) if an error is thrown while creating the stream. I haven't found the root cause of the error, but [`guessHandleType(fd)`](https://github.com/electron/node/blob/4f9e177f4c729f5f6d1001843f42cef35c1becab/lib/internal/process/stdio.js#L137) returns `'TCP'` for fd1 in v0.37.3. It used to return `'TTY'` in v0.37.2.

I did a git bisect and found the [first commit](https://github.com/electron/electron/commit/0066833887aba619fd2f91e6462a9b001c54fa47) that had this issue. Seems like just loading the `repl` module is enough to cause the issue described above. This commit moves `require('repl')` so that it is only loaded when the --interactive flag is present.

I don't know why loading `repl` breaks stdout.

I'm not entirely sure how to write a test to verify that stdout is indeed writing to the correct place. It seems like the pending test checking `process.stdout.isTTY` is working now, though.

Fixes #5051
",1185,True,en,0
6128,1,1,0,Externals,gerhardberger,2016-06-20T00:13:30Z,6,0,1,1,"This PR solves the resizing issue of a transformed `webview` tag, as mentioned in #5968 and #2168.
",99,True,en,0
6125,2,4,0,Externals,leo,2016-06-19T10:53:44Z,650,650,157,0,"OS X has been renamed to ""macOS"". More details [here](http://www.macworld.co.uk/news/mac-software/mac-os-sierra-x-10-12-fuji-features-uk-release-date-macos-touch-id-siri-apfs-wwdc-2016-3630374/).
",196,True,en,3
6116,1,0,0,Internals,kevinsawicki,2016-06-17T22:11:10Z,9,0,1,0,"These APIs are `undefined` until the `ready` event fires on the `app` module:
- `BrowserWindow.addDevToolsExtension`
- `BrowserWindow.removeDevToolsExtension`
- `BrowserWindow.getDevToolsExtensions`

Closes #6083
",213,False,en,0
6115,1,1,0,Internals,kevinsawicki,2016-06-19T10:55:45Z,1,0,1,1,"Previously if `BrowserWindow.addDevToolsExtension` was called with no existing windows or webviews then `loadExtension` would not be called until the devtools were opened meaning background pages and content scripts wouldn't be created earlier than that.

This would cause the React dev tools to not show up on the initial call to `BrowserWindow.addDevToolsExtension`.

/cc @MarshallOfSound I believe this issue fixes what you saw your in reproduction example.

Closes #6101 
",476,True,en,0
6111,13,4,8,Internals,zeke,2016-06-24T00:24:57Z,46,40,7,6,"While programmatically parsing the documentation, I noticed a few inconsistencies in the heading sizes across docs. This normalizes all event and method headings to a consistent size, and adds some more detailed info to the styleguide.
",236,True,en,0
6110,1,1,1,Externals,danhp,2016-06-17T21:06:09Z,6,4,3,0,"This sets the default value for `positioningItem` to -1 (an invalid value) so that no item is selected.
The proper checks are performed by https://github.com/electron/electron/blob/79cb648b6b15ae0cc25e1bf528f3f4fbd1fed710/atom/browser/api/atom_api_menu_mac.mm#L39

Closes #6109
",278,False,en,0
6106,1,1,0,Externals,mjudd,2016-06-17T15:58:16Z,2,2,1,0,,0,False,en,0
6105,1,1,0,Externals,zephyrzoom,2016-06-19T10:11:32Z,1,1,1,1,":memo: fix typo
",16,True,en,0
6097,2,0,0,Internals,zcbenz,2016-06-17T03:21:04Z,60,40,2,0,"This continues #6089's work:
- Fix `titleBarStyle: 'hidden'` showing title.
- Make normal frameless window also show in Window menu.
",133,False,en,0
6095,1,2,0,Internals,kevinsawicki,2016-06-17T03:40:46Z,8,2,1,0,"Looks like in `1.2.3` `browser/api/protocol.js` is no longer eagerly required so the properties/methods are missing on it since the `ready` event on `app` has already been fired when required later on and so the properties from `session.defaultSession.protocol` were never copied over to the exports object.

This pull request adds a check `app.isReady()` to handle this case.

I _think_ it might have been introduced by this line, https://github.com/electron/electron/pull/5904/files#diff-8d85c651cb0fb8feef2c4694d52da2e3L1

Closes #6094 
",540,True,en,0
6092,2,0,0,Internals,kevinsawicki,2016-06-16T22:27:59Z,8,8,6,0,"Couple of misspellings üìù 
",29,True,en,1
6091,3,2,0,Internals,kevinsawicki,2016-06-17T03:29:49Z,19,1,2,0,"Add progress indicator whenever the dock tile's content view is empty.

Previously calling `setProgressBar` after `app.dock.setIcon` would crash because the subviews array was empty.

This also adds a simple spec to verify the `setProgressBar` API does not throw which will give some coverage to these APIs for crashes or parameter conversion errors.

Thanks @fasterthanlime for the great investigation.

Closes #6056
",418,True,en,0
6090,4,1,0,Internals,kevinsawicki,2016-06-17T03:21:16Z,84,33,5,0,"Adds the following API to devtools extension background pages:
- `chrome.webNavigation.onBeforeNavigate.addListener`
- `chrome.webNavigation.onBeforeNavigate.removeListener`
- `chrome.webNavigation.onCompleted.addListener`
- `chrome.webNavigation.onCompleted.removeListener`

These are implemented via the `webContents` `will-navigate` and `did-navigate` APIs.

Refs #5842
",373,False,en,0
6089,1,1,0,Externals,bridiver,2016-06-17T00:49:51Z,4,5,1,0,"‚Ä¶the window menu list

fixes #6088
",37,True,en,0
6087,1,1,0,Externals,mnquintana,2016-06-17T00:40:14Z,4,0,1,0,"Closes https://github.com/electron/electron/issues/6085

cc @kevinsawicki 
",75,True,en,0
6084,1,1,0,Externals,wolfgang42,2016-06-16T17:46:58Z,1,1,1,0,,0,False,en,0
6076,1,0,0,Internals,zcbenz,2016-06-17T00:21:57Z,67,41,1,0,"- Update steps to make node-pre-gyp to build from source code.
- Remove ""Native Node Module Compatibility"" which was dated from Node 0.10 and no one needs it today.
- Add a few troubleshooting guides.
",201,False,en,0
6073,4,0,0,Internals,zcbenz,2016-06-16T03:35:37Z,122,97,8,0,"This PR moves the creation and usages of `AtomURLRequestJobFactory` into IO thread, and makes `api::Protocol` thread safe.

This fixes occasional crashes when using `protocol` for `partition`s.
",194,True,en,0
6072,1,1,0,Internals,zcbenz,2016-06-16T03:09:37Z,13,4,3,0,"Usually I wouldn't blame compiler for crashes, but this time I do.

This should bring the Windows CI to green.
",111,True,en,0
6071,1,0,0,Externals,banyudu,2016-06-16T05:19:26Z,1,1,1,0,,0,False,en,0
6070,1,1,0,Externals,banyudu,2016-06-16T05:19:13Z,1,1,1,0,,0,False,en,0
6068,13,4,6,Internals,kevinsawicki,2016-06-19T11:22:02Z,10,14,3,3,"This pull request pulls in code from [command_dispatcher.mm](https://cs.chromium.org/codesearch/f/chromium/src/ui/base/cocoa/command_dispatcher.mm) that redispatches events in an attempt to correctly handle native keyboard shortcuts like `Ctrl+F2` and `Cmd-~` on Mac OS X.
### Tested Scenarios
- [x] Menu-based shortcuts like `Cmd-R`, `Cmd-A`, `Cmd-Alt-I`.
- [x] Native shortcuts like `Cmd-~` and `Ctrl-F2`
- [x] Calling `preventDefault()` on a `keydown` event to disable something native like `Cmd-A` to select all
- [x] Typing and keybindings in `<input>` elements 
- [x] Docked devtools window
- [x] Undocked devtools window
- [ ] Others?

If anyone is able to test this branch for their app and verify menus and shortcuts still work as expected, that would be really helpful. /cc @electron/maintainers 

Closes #5246 
Closes #6016 
Depends on https://github.com/electron/brightray/issues/227

Related reading:

https://www.chromium.org/developers/os-x-keyboard-handling
https://github.com/nwjs/nw.js/commit/6658fbb839a9623f373b51fee37370f5bf500a6d
",1052,False,en,0
6061,1,1,0,Externals,zephyrzoom,2016-06-15T18:11:30Z,1,1,1,0,":memo:ÊºèÊéâ‰∫Ü‰∏Ä‰∏™Â≠ó
",25,True,zh,0
6053,1,0,0,Internals,zcbenz,2016-06-15T01:31:32Z,25,10,1,0,"Improve the example so it can be copy-pasted without modification, also add a new entry in troubleshooting.
",108,True,en,0
6052,3,0,0,Internals,kevinsawicki,2016-06-15T18:14:00Z,27,0,1,0,"Calling `dialog.showOpenDialog` and/or `dialog.showSaveDialog` requires additional entitlements in your `parent.plist` file.

This pull request documents and links to the apple docs for these. üçé üìñ 

/cc @zeke @jlord 
",223,True,en,0
6049,1,1,0,Internals,kevinsawicki,2016-06-15T01:06:38Z,2,1,1,0,"Include `sys.executable` as the first argument when spawning `script/build-libchromiumcontent.py`.

Closes #6045
",113,True,en,0
6043,1,1,0,Externals,JimiC,2016-06-14T17:07:57Z,3,3,1,0,"Test should always exit (app.stop()) either on success or failure.
",67,True,en,0
6038,1,0,0,Internals,zcbenz,2016-06-14T06:36:00Z,4,13,1,0,"Close #5148.
",13,True,en,0
6037,1,0,0,Internals,zcbenz,2016-06-14T05:59:40Z,1,1,1,0,"This makes Squirrel wait for current app to quit before launching the newly downloaded app.

Close #5163. 
",107,True,en,0
6035,10,1,4,Internals,kevinsawicki,2016-06-15T07:26:27Z,73,41,6,1,"This pull request switches `RenderProcessPreferences` to consider non-remote web contents instead of window-based web contents when supporting the `content_scripts` of a devtools extension so that they will work for the webview devtools.

This was the result of trying to get the react devtools working for a webview. With this branch I could get it successfully showing for a webview loading http://todomvc.com/examples/react

<img width=""1280"" alt=""screen shot 2016-06-13 at 5 06 24 pm"" src=""https://cloud.githubusercontent.com/assets/671378/16027230/352e8fb0-3189-11e6-9bdf-3ea5890ac4b1.png"">

Refs #5913 
",609,True,en,0
6030,1,1,0,Internals,kevinsawicki,2016-06-13T23:43:51Z,6,0,1,0,"This is not currently supported to log a message about it when it is run.

I think this approach might be better than just removing it from `electron -h` since it might be confusing to have different options supported on different platforms.

Refs #6025
",254,True,en,0
6029,4,1,0,Internals,kevinsawicki,2016-06-13T23:31:48Z,33,13,4,0,"#5913 added a `web-contents-created` event to `webContents`.

This pull request moves the event to `app` to be consistent with `browser-window-created` and documents it as a public API.
",186,True,en,0
6027,1,1,0,Externals,Kushagra8888,2016-06-13T15:54:55Z,1,1,1,0,"[ci skip]
",10,True,pl,0
6026,4,6,0,Internals,zcbenz,2016-06-13T23:24:14Z,84,9,6,0,"This PR adds a way to avoid the flash of background color when showing window:

``` javascript
let win = new BrowserWindow({show: false})
win.on('ready-to-show', () => {
  win.show()
})
```

Internally it is done by resizing the RenderWidget to force drawing before window is displayed.
",287,True,en,0
6023,4,0,0,Internals,zcbenz,2016-06-13T09:17:55Z,36,21,11,0,"This continues the work of #6013:
- Rename `setIgnoreFocus` to `setFocusable` to match other APIs;
- Add `focusable` option since it can not be changed dynamically on OS X and Linux;
- Tunes `focusable` to make it have less flaws on Windows;
- Make `focusable` work on Linux.
",276,False,en,0
6022,1,1,0,Externals,losnake,2016-06-13T08:53:55Z,2,2,1,0,"typo
",5,True,en,0
6019,6,1,0,Externals,preco21,2016-06-13T06:43:41Z,527,375,40,0,,0,False,en,1
6018,3,0,0,Internals,zcbenz,2016-06-13T01:02:54Z,33,68,9,0,,0,False,en,0
6013,1,2,0,Internals,miniak,2016-06-13T07:18:10Z,32,0,8,0,"Calls [AtomNSWindow setDisableKeyOrMainWindow:] on Mac
Toggles WS_EX_NOACTIVATE ex-style on Windows
",100,False,en,0
6012,1,1,0,Internals,miniak,2016-06-13T06:21:53Z,51,4,3,0,"Reason:
- Mac applications have Window -> Zoom menu item
- The order of Close / Minimize / Zoom is different on OS X
",117,False,en,0
6008,1,1,0,Externals,develar,2016-06-13T06:16:53Z,2,2,1,0,,0,False,en,0
5999,1,2,0,Externals,greggman,2016-06-13T01:42:47Z,9,0,1,1,"You can't call Menu.setApplicationMenu until the app is ready.

[ci skip]
",74,True,en,0
5989,1,5,0,Externals,danhp,2016-06-10T18:23:25Z,1,1,1,0,"Close #5987
",12,True,en,0
5986,2,0,0,Internals,kevinsawicki,2016-06-10T17:27:57Z,2,2,2,0,"`require('remote').require` -> `require('electron').remote.require`

Closes #5984
",82,True,en,0
5979,1,0,0,Externals,WuglyakBolgoink,2016-06-10T12:22:04Z,16,15,1,0,,0,False,en,0
5978,1,0,0,Externals,WuglyakBolgoink,2016-06-10T12:21:58Z,32,25,1,0,,0,False,en,0
5977,1,1,0,Externals,WuglyakBolgoink,2016-06-10T12:21:49Z,18,17,1,0,,0,False,en,0
5975,2,1,0,Internals,kevinsawicki,2016-06-10T12:11:32Z,12,0,1,0,"This pull request fails CI if `it.only` or `describe.only` is called meaning only a subset of specs are run and so any pull requests containing these calls should go üî¥ until those calls are removed and all the specs are running again üçè .

Sometimes these are accidentally checked in and merged and this pull request guards against this happening in the future.

The following message will be logged when this happens and will contain the offending spec:

```
Error: A spec contains a call to it.only or describe.only and should be reverted.
    at Mocha.mocha.grep (file:///Users/kevin/github/electron/spec/static/index.html?grep=&invert=:57:15)
    at Function.context.it.only (/Users/kevin/github/electron/spec/node_modules/mocha/lib/interfaces/bdd.js:125:13)
    at Suite.<anonymous> (/Users/kevin/github/electron/spec/api-browser-window-spec.js:59:8)
    at context.describe.context.context (/Users/kevin/github/electron/spec/node_modules/mocha/lib/interfaces/bdd.js:74:10)
    at Suite.<anonymous> (/Users/kevin/github/electron/spec/api-browser-window-spec.js:58:3)
    at context.describe.context.context (/Users/kevin/github/electron/spec/node_modules/mocha/lib/interfaces/bdd.js:74:10)
    at Object.<anonymous> (/Users/kevin/github/electron/spec/api-browser-window-spec.js:19:1)
    at Module._compile (module.js:541:32)
    at Object.Module._extensions..js (module.js:550:10)
    at Module.load (module.js:456:32)
```
",1434,True,en,0
5974,8,0,1,Externals,jlord,2016-06-10T19:20:03Z,77,12,5,0,"This adds the `chrome.storage.sync` and `chrome.storage.get` APIs.

/cc @kevinsawicki 

Refs #5842 
",100,True,en,0
5972,2,1,0,Internals,kevinsawicki,2016-06-10T12:02:07Z,13,1,2,0,"This pull request make the `BrowserWindowProxy` `guestId` property non-writeable.

Since `guestId` is used internally to route IPC messages to the proper parent/child window, it shouldn't be writeable when accessed via `window.opener` or the value returned from `window.open()`.
",279,True,en,0
5967,6,4,0,Internals,kevinsawicki,2016-06-10T11:52:38Z,88,38,3,0,"This pull request adds support for `window.opener` from windows opened via `window.open()` from within a `<webview>` tag.

This reworks the guest window manager a bit to track guests using the `id` from the `webContents` instead of `id` from the `BrowserWindow` so the `BrowserWindowProxy` can be used in windows opened from a `<webview>` tag.

It also uses `webContents.hostWebContents` to lookup the window for a `<webview>`'s webContents so things like `window.opener.close()` will close the window containing the `<webview>`.

Closes #5953
",544,True,en,0
5966,1,2,2,Externals,felixrieseberg,2016-06-10T00:36:55Z,55,37,1,0,"- Updated the guide to reflect that electron-windows-store no longer
  requires container conversion prerequisites
- Added a link and a note about using background tasks to include
  UWP features
",196,False,en,0
5965,5,5,0,Internals,kevinsawicki,2016-06-13T00:45:58Z,22,0,3,3,"Adds `BrowserWindow.getDevToolsExtensions()` that returns an object like so:

``` json
{
  ""devtron"": {
    ""name"": ""devtron"",
    ""version"": ""1.0.0""
  }
}
```

Closes #5960
",174,True,en,0
5964,3,1,0,Internals,kevinsawicki,2016-06-10T03:28:57Z,28,5,3,0,"Currently calling `BrowserWindow.addDevToolsExtension` with an invalid path or an unparseable JSON throws a `Cannot read property 'name' of undefined` error.

This pull request throws the original read/parse errors instead and still logs them to `console.warn`.

This should provide more accurate error messages when trying to add an invalid devtools extension.

Closes #5962
",376,True,en,0
5963,1,1,0,Externals,haobingwang,2016-06-09T15:56:46Z,1,1,1,0,"Êó∂Èó¥ -„Äã‰∫ã‰ª∂
time -„Äãevent
",33,False,zh,0
5959,4,0,0,Internals,zcbenz,2016-06-09T22:50:34Z,87,20,3,0,"This PR adds more events and APIs to `Download` so it can handle the interrupted downloads that can be resumed.

Close #5598.
",126,True,en,0
5958,1,0,0,Externals,WuglyakBolgoink,2016-06-09T12:06:58Z,30,30,1,0,,0,False,en,0
5957,1,0,0,Externals,WuglyakBolgoink,2016-06-09T12:06:50Z,12,12,1,0,,0,False,en,0
5956,1,1,0,Externals,WuglyakBolgoink,2016-06-09T12:06:37Z,20,11,1,0,,0,False,en,0
5955,1,1,0,Externals,enlight,2016-06-09T07:11:25Z,6,6,2,0,"`InitailizeTaskbar` -> `InitializeTaskbar`
",43,True,es,0
5954,1,1,0,Externals,haobingwang,2016-06-09T07:11:07Z,9,9,1,0,"ÊúÄÊñ∞ÁöÑ electron-quick-start ‰ªìÂ∫ì‰∏≠ÁöÑÂèòÈáèÂ∑≤Áî± win ÂèòÊõ¥‰∏∫ mainWindow
",81,True,zh,0
5952,1,1,0,Externals,enlight,2016-06-09T07:07:32Z,1,1,1,0,"`atom.gyp` was renamed to `electron.gyp` not long ago but this document wasn't updated.
",88,True,en,0
5950,1,1,0,Externals,vreality64,2016-06-09T04:20:28Z,17,0,1,0,"Additional translation :)
",26,True,en,0
5945,1,2,0,Internals,kevinsawicki,2016-06-09T02:06:30Z,2,1,1,0,"Instead of using Electron as the default window title, this pull request uses `app.getName()` instead which is the `name` or `productName` field from the `package.json` file.

This seems like a more expected default when no `<title>` element is in the loaded page. üëç / üëé ?
",279,True,en,0
5944,1,2,0,Internals,kevinsawicki,2016-06-09T01:52:35Z,6,4,1,0,"Looks like the call to `setWantsLayer` on a transparent window with a frame in `InstallView` was causing the zoom button state to get reset so the previous call to `SetMaximizable` was getting undone.

This sets the maximizable state after `InstallView()` is called which appears to resolve this issue.

``` js
window = new BrowserWindow({
    show: true,
    width: 800,
    height: 800,
    transparent: true,
    maximizable: false,
    backgroundColor: '#fff',
})
```
### Before

<img width=""820"" alt=""screen shot 2016-06-08 at 2 02 33 pm"" src=""https://cloud.githubusercontent.com/assets/671378/15910832/a0a0b630-2d81-11e6-83b3-13b4227df332.png"">
### After

<img width=""809"" alt=""screen shot 2016-06-08 at 2 01 14 pm"" src=""https://cloud.githubusercontent.com/assets/671378/15910951/514ee876-2d82-11e6-8e5a-d1f9abc62981.png"">

@zcbenz you mentioned in https://github.com/electron/electron/issues/5745#issuecomment-222398412 that transparent windows with frames weren't really supported but it might be okay to address if the fix was small and it does seem pretty small, but I'm also fine closing this out if this issue isn't worth addressing.

Closes #5745
",1160,True,en,0
5943,1,2,0,Externals,bbondy,2016-06-09T01:48:54Z,5,0,3,0,,0,False,en,0
5942,1,1,0,Externals,enlight,2016-06-08T16:36:42Z,6,6,1,0,"The code snippet for `nativeImage.createFromPath` somehow ended up in the wrong section of the document, this PR moves it back where it belongs.
",145,True,en,0
5932,4,1,0,Internals,zcbenz,2016-06-08T07:47:04Z,51,1,6,0,"Close #5855.
",13,True,en,0
5929,1,0,0,Internals,zcbenz,2016-06-08T02:25:58Z,3,3,3,0,"http://googlechromereleases.blogspot.jp/2016/06/stable-channel-update_6.html
",77,True,en,0
5928,1,0,0,Internals,zcbenz,2016-06-08T02:07:14Z,2,2,2,0,,0,False,en,0
5924,9,0,4,Internals,kevinsawicki,2016-06-09T21:47:37Z,106,2,8,1,"Initial implementation of [chrome.i18n.getMessage](https://developer.chrome.com/extensions/i18n)
- [x] Add tests

/cc @jlord üçê 

Refs #5842 
",144,False,en,0
5923,10,1,1,Internals,kevinsawicki,2016-06-08T02:00:30Z,43,7,8,0,"This pull request adds support for a `disableBlinkFeatures` option to the `BrowserWindow` constructor that does the inverse of what the current `blinkFeatures` option does.

It also adds support for it in `<webview>` tags using the `disableblinkfeatures` attribute.

Closes #5460 
",281,True,en,0
5922,1,1,0,Externals,manosim,2016-06-08T01:57:56Z,1,1,1,0,"<img width=""933"" alt=""screen shot 2016-06-07 at 23 38 42"" src=""https://cloud.githubusercontent.com/assets/6333409/15877045/356f7c20-2d09-11e6-8788-08371dbe8f82.png"">
",166,True,en,0
5921,8,1,5,Internals,kevinsawicki,2016-06-08T17:40:10Z,25,33,13,0,"Adds the Mac OS X only `showDefinitionForSelection` API to `webContents` and `<webview>` that is currently only on the `BrowserWindow` API.

~~Also adds a `TODO` to deprecate `BrowserWindow.showDefinitionForSelection` in 2.0 since it seems consistent with the other `webContents` APIs like `findInPage`, `replaceMisspelling`, etc.~~

Closes #5275 
",348,True,en,0
5915,4,1,1,Internals,kevinsawicki,2016-06-08T00:58:16Z,36,41,1,0,"Noticed a place in `guest-view-manager` where the CoffeeScript auto-array collection when a method ended with a for loop was still happening.

This pull request removes it since it was unused and also uses `const`, `let` and `for`/`of` loops inside this file üé®
",264,True,en,0
5913,13,1,4,Internals,kevinsawicki,2016-06-09T01:45:55Z,97,25,8,1,"Load registered extensions in the devtools for a `<webview>` when opened.

Closes #896
",87,True,en,0
5911,1,8,2,Externals,mafintosh,2016-06-08T18:57:16Z,9,2,1,1,"this makes it a bit easier to recompile native node modules to your current installed version of electron

``` sh
npm rebuild --runtime=electron --target=$(electron --version) --disturl=https://atom.io/download/atom-shell --abi=$(electron --abi)
```
",250,True,en,0
5910,3,0,1,Internals,zcbenz,2016-06-07T12:05:07Z,44,10,6,0,"Close #2864.
",13,True,en,0
5907,1,1,0,Externals,vreality64,2016-06-07T11:39:25Z,28,31,4,0,"- miss typed part
- not intended markdown grammar
",50,False,en,0
5906,2,1,0,Externals,ThaddeusJiang,2016-06-07T11:38:51Z,80,42,1,0,"Based on electron ver 1.1.3 update Quick Start Page[Simplified Chinese].
",73,True,en,0
5905,1,0,0,Internals,zcbenz,2016-06-07T10:18:59Z,18,2,2,0,"Close #4151.
",13,True,en,0
5904,7,4,5,Externals,deepak1556,2016-06-09T08:04:58Z,202,66,23,2,"Fixes #5896 
Fixes #5925 
Fixes #4991 

What is the take on extensions and partitions ? Currently extensions are loaded for all windows irrespective of partitions, should extensions be persisted for non persistent partitions ?
",227,False,en,0
5903,1,0,0,Internals,zcbenz,2016-06-07T07:10:54Z,30,5,6,0,"Close #1080.
",13,True,en,0
5901,1,0,0,Internals,zcbenz,2016-06-07T05:04:55Z,15,17,1,0,"- We should not require it before the ready event;
- There is no need to use electronScreen as name in the main process.

Close #5897.
",135,False,en,0
5898,1,0,0,Internals,zcbenz,2016-06-07T01:40:55Z,20,5,2,0,"Only people signing an OS X app would need this information.
",61,True,en,0
5894,2,1,0,Internals,kevinsawicki,2016-06-07T01:54:58Z,9,4,3,0,"Implements the [`chrome.runtime.id`](https://developer.chrome.com/extensions/runtime#property-id) with the extension id.

Refs #5842
",133,True,en,0
5893,1,1,0,Internals,kevinsawicki,2016-06-07T01:54:16Z,0,1,1,0,"This removes the logging of the devtools extension id that was added in #5711

The extension name is returned `BrowserWindow.addDevToolsExtension` from the API to indicate success so I'm not sure this logging is needed and gets kind of noisy since it will get logged every time you open the dev tools for each extension you have installed. 
",341,True,en,0
5890,1,1,0,Externals,jpittner,2016-06-07T01:09:40Z,5,0,1,0,"Explains how native modules to be signed and packaged.
",55,True,en,0
5889,1,0,0,Internals,zcbenz,2016-06-06T12:08:37Z,19,2,3,0,"Close #5297.
",13,True,en,0
5888,1,0,0,Internals,zcbenz,2016-06-06T08:26:47Z,26,2,1,0,"Chromium's implementation is somehow not working as expected, the new implementation follows the behavior of wmctrl.

Close #5206.
",131,True,en,0
5886,1,0,0,Internals,zcbenz,2016-06-06T07:47:43Z,3,3,3,0,"Close #5881.
",13,True,en,0
5883,1,2,0,Externals,sethlu,2016-06-06T06:20:16Z,61,42,1,0,,0,False,en,0
5882,1,1,0,Externals,felixrieseberg,2016-06-06T06:20:02Z,9,1,1,0,"Also logs a clean warning if an extension's manifest is incomplete,
missing, or can otherwise not be parsed.

I promised @mnquintana to make this a part of #5859, but Cheng was quicker with merging than I was with updating my PR :wink:
",236,False,en,0
5879,1,11,1,Internals,miniak,2016-06-13T00:17:24Z,70,33,10,7,"This allows setting custom HTTP request headers, such as Authorization.
",72,True,en,0
5873,1,1,0,Externals,sourenaraya,2016-06-06T01:48:13Z,3,3,1,0,"since `remote` module unavailable
",34,True,es,0
5870,1,2,2,Externals,danhp,2016-06-06T06:16:53Z,4,1,3,1,"- `delete` was already implemented so we simply need to add to the docs.
- `paste-and-match-style` was already implemented on OS X side so we needed to map the corresponding action in `web-contents` for Linux and Windows.

---

Closes #5866 
Closes #5867 
",256,False,en,0
5859,1,1,2,Externals,felixrieseberg,2016-06-06T01:22:47Z,7,1,2,2,"If an extension has already been loaded (for instance because it‚Äôs
persisted), `addDevToolsExtension` will return nothing, which is
confusing. This adds a little `console.warn` to educate people about
what‚Äôs happening.

Closes #5854
",237,False,en,0
5849,7,1,0,Externals,preco21,2016-06-03T11:29:13Z,429,175,22,0,":memo: :smile: 
",16,True,en,0
5841,1,2,2,Externals,envygeeks,2016-06-03T02:36:38Z,5,1,1,0,"Linux has several folders, depending on who is using the Linux install.  On our systems it could be any one of those depending on the user and what software they prefer to use, they all have the React plugin however, each one sits in a different folder.  I prefer Chrome because of Netflix, she prefers Chromium and we also have Chrome Beta available.
",352,True,en,0
5840,1,0,0,Internals,kevinsawicki,2016-06-02T16:40:07Z,1,1,1,0,"Add missing `s`, `javascript` -> `javascript`

Noticed it wasn't highlighted on http://electron.atom.io/docs/api/web-contents/#event-select-bluetooth-device
",157,True,en,0
5839,1,1,0,Externals,sqrthree,2016-06-03T04:50:58Z,1,1,1,0,"‰øÆÊ≠£ÈîôÂà´Â≠ó
",16,True,zh,0
5837,16,6,0,Internals,zcbenz,2016-06-03T04:00:12Z,812,4,19,0,"``` markdown
### `app.relaunch([options])`

* `options` Object (optional)
  * `args` Array (optional)
  * `execPath` String (optional)

Relaunches the app when current instance exits.

By default the new instance will use the same working directory and command line
arguments with current instance. When `args` is specified, the `args` will be
passed as command line arguments instead. When `execPath` is specified, the
`execPath` will be executed for relaunch instead of current app.

Note that this method does not quit the app when executed, you have to call
`app.quit` or `app.exit` after calling `app.relaunch` to make the app restart.

When `app.relaunch` is called for multiple times, multiple instances will be
started after current instance exited.
```

Close #539.
",775,False,en,0
5833,6,1,0,Externals,CharlieHess,2016-06-03T08:36:44Z,40,10,5,1,"Many fields in `NSUserDefaults` are not primitive types (for example, `NSUserDictionaryReplacementItems`, `NSNavRecentPlaces`, etc.); trying to access these using `systemPreferences.getUserDefault` would just give users `undefined`. This PR adds support for array and dictionary types.
",286,True,en,0
5829,1,0,0,Internals,kevinsawicki,2016-06-01T20:32:19Z,1,1,1,0,"Missed this one while doing #4874

The repo has been moved and renamed and is now at https://github.com/electron/electron-frameworks

I ran `python script/update-external-binaries.py` directly with this new URL and everything seemed to download correctly.
",256,True,en,0
5826,1,1,0,Externals,Pym,2016-06-03T03:30:13Z,2,0,1,1,"Add link to GitbookIO/nuts in the docs page for autoUpdater
",60,True,en,0
5824,4,0,0,Internals,zcbenz,2016-06-01T07:14:31Z,72,67,3,0,,0,False,en,0
5823,1,1,0,Externals,ColinEberhardt,2016-06-01T06:34:58Z,1,1,1,0,,0,False,en,0
5820,2,4,0,Internals,zcbenz,2016-06-01T03:22:00Z,25,17,2,0,"Close #5778.
",13,True,en,0
5819,1,1,0,Internals,gjtorikian,2016-06-01T00:56:16Z,1,1,1,0,,0,False,en,0
5817,1,1,0,Internals,kevinsawicki,2016-06-01T04:33:27Z,15,12,1,0,"This pull request pulls the `child.plist` and `parent.plist` paths into variables to make it easier to edit when copying this script locally.

It seems likely that these files won't be at the root of the repository so using variables like the other paths seems to make sense and are easier to update.

/cc @jlord  
",315,True,en,0
5812,1,1,0,Externals,vasumahesh1,2016-06-01T05:52:08Z,25,5,2,0,"Fixes #5747 

It was printing irrespective of `custom_display_name` and `name` so I just set them up to `custom`.

Few examples:

[3in x 5in PDF](https://github.com/vasumahesh1/electron-test-playground/blob/master/pdf/PDF3inx5in.pdf)

[10cm x 10cm PDF](https://github.com/vasumahesh1/electron-test-playground/blob/master/pdf/PDF10cmx10cm.pdf)
",343,True,en,0
5782,1,0,0,Internals,zcbenz,2016-05-31T10:07:15Z,12,3,2,0,"Windows doesn't keep copies of the window icons, so after the NativeImage gets garbage collected, the window icon will revert to default when a redrawing happens.

Close #5754.
",177,True,en,0
5781,5,12,2,Externals,deepak1556,2016-06-01T06:40:08Z,202,0,6,0,"Fixes #5565 

Depends on
https://github.com/electron/brightray/pull/225
",72,True,en,0
5776,2,2,0,Internals,zcbenz,2016-05-31T03:19:58Z,22,14,3,0,"Since the upgrade to VS 2015, the implementation of stdio seems to have changed. This PR fixes routing stdio to Console by using `base::RouteStdioToConsole`.

However it is impossible to make stdin work, we have to attach to parent Console, but because Electron is a GUI program, Windows is not willing to pipe stdin to us. One workaround is to alloc a new Console window for Electron, which would cause troubles since it makes every Electron process being attached with an extra Console window. 

This should be totally fine for all apps though, the only downside is we are not able to run REPL in Electron on Windows.

Close #5713.
Close #5715.
",647,True,en,0
5770,1,1,0,Internals,zcbenz,2016-05-30T22:52:01Z,3,2,1,0,"As noticed in https://github.com/electron/electron/pull/5769#discussion_r65071301.
",83,True,en,0
5769,1,0,2,Internals,zcbenz,2016-05-30T12:08:12Z,60,58,3,0,"This makes the read end and write end of the pipe have same logic, so it is more easy to maintain.
",99,True,en,0
5768,2,3,1,Internals,zcbenz,2016-05-30T08:01:48Z,35,4,4,0,"Doing it in RunScriptsAtDocumentStart would somehow result in weird results when webSecurity is off.

Close #5712.
Close #5721.
Close #5727.
",141,True,en,0
5766,2,1,0,Externals,kcrt,2016-05-30T07:51:55Z,758,11,4,0,"newly translate web-view-tag.md into Japanese :jp:
",51,True,en,0
5763,1,0,0,Internals,zcbenz,2016-05-30T01:01:28Z,3,1,2,0,"Close #5741.
",13,True,en,0
5753,2,1,0,Externals,deepak1556,2016-05-30T10:53:53Z,90,14,3,1,"Fixes #5714 
",13,True,en,0
5744,1,1,0,Externals,aaronang,2016-05-27T22:41:28Z,27,27,1,0,"I would like to start working on Electron and therefore I started reading the documentation. Something I felt that could improve is the section _Structure of Source Code_, which does not indicate directories with slashes. Therefore, in this patch I have added slashes to files when they are of type directory. 

For example, C++ source code is stored in the `atom/` directory, which is indicated as `atom` in the structure. However, in my opinion it would be more clear if a slash is added at the end to indicate that it is a directory: `atom/`. 

In addition, I have added an additional directories in the structure: `atom/browser/ui/x/`. Please correct me if you disagree with the description that I used to describe it. 

Also, I changed `atom.gyp` to `electron.gyp`.

I am really looking forward to contributing to this awesome project! :grin: 
",849,True,en,0
5742,1,1,0,Internals,kevinsawicki,2016-05-28T13:42:15Z,5,7,1,0,"This pull request removes a redundant `if (titleBarStyle == ""hidden-inset"") {`.

It was already checked for a couple lines earlier (line 490) so it seems safe to remove.

@jlord and I noticed this while investigating #5723
",223,True,en,0
5738,1,0,0,Internals,kevinsawicki,2016-05-27T22:10:45Z,3,37,4,0,"There were a few `BrowserWindow` APIs removed in 1.0 that were still mentioned in the docs üò® 

This pull request removes them.

Refs https://github.com/electron/electron/pull/5373
",183,True,en,0
5737,2,1,0,Internals,kevinsawicki,2016-05-27T18:33:08Z,8,0,2,0,"Continuation of #5717, adds `print` support to the `BrowserWindowProxy` returned from `window.open` and also available via `window.opener` in the child window.

/cc @felixrieseberg I made a small tweak to your original PR which was calling print on the `BrowserWindow` when it needs to instead call it on the `webContents`.

Closes #5717
Closes https://github.com/electron/electron/issues/5685
",394,True,en,0
5736,3,1,0,Internals,kevinsawicki,2016-05-28T13:42:30Z,14,1,3,0,"Objects created via `Object.create(null)` are currently failing to go through `rpc-server` since `hasOwnProperty` was being called and is `undefined` for objects created that way.

It looks like node changed its `EventEmitter` recently to have the `_events` property be an object with no prototype so this is pretty easy to reproduce in Electron with:

``` js
require('electron').remote.getCurrentWindow()._events
```

https://github.com/nodejs/node/blob/0c294362502684b9273e7e7c7039ec7028471014/lib/events.js#L9

Closes https://github.com/electron/devtron/issues/73
",567,True,en,0
5734,2,1,0,Externals,danhp,2016-05-30T01:14:04Z,20,8,2,2,"There were 2 things going wrong:
- We were doing a division by a 0 and it passed on invalid values.
- There was no way to remove the aspect ratio enforcement once set.

This addresses both of those points.

---

Closes #5728 
",226,False,en,0
5726,1,1,0,Externals,danhp,2016-05-30T00:16:21Z,8,5,1,3,"So I completely forgot to account for multiple screens when I first implement this...
I think I'll show myself out üòì     

Closes #5722
",139,False,en,0
5725,4,1,0,Internals,kevinsawicki,2016-05-27T16:09:12Z,31,25,6,0,"In https://github.com/electron/electron/issues/2544 we decided to go with an API naming scheme like `printToPDF`/`setFeedURL` instead of `printToPdf`/`setFeedUrl`.

There were 4 `clipboard` module APIs that didn't get updated for 1.0:
- `clipboard.readHtml`
- `clipboard.writeHtml`
- `clipboard.readRtf`
- `clipboard.writeRtf`

This pull request tweaks them to:
- `clipboard.readHTML`
- `clipboard.writeHTML`
- `clipboard.readRTF`
- `clipboard.writeRTF`

This pull request does not remove the old names and they shouldn't be removed before 2.0. But the docs are updated so hopefully new apps will use the new APIs as documented.

This pull request does not add deprecation warnings either for the old versions. Since 1.0 just came out it seems a bit premature to start spamming the log with deprecation warnings.

Deprecation warnings should eventually be added for these but only when the 2.0 API picture is clearer while still giving people months to adjust before they get removed (like the 1.0 plan).

This was originally brought up at the Electron meetup yesterday at SF where someone asked why these APIs were inconsistent.

/cc @electron/maintainers 
",1158,True,en,0
5720,1,1,1,Externals,danhp,2016-05-30T00:51:13Z,15,1,3,3,"Closes #5620
",13,True,en,0
5718,1,1,0,Externals,felixrieseberg,2016-05-30T00:08:16Z,8,2,2,3,"This ensures that a BrowserWindow responds to `setFullscreen(true)` if `full screenable` was not defined during creation.

This bug was on Windows only. Previously, if you created a new BrowserWindow _without_ specifying `fullscreenable: true`, `setFullscreen(true)` wouldn't do anything.

Closes #5699 
",304,True,en,0
5711,38,5,8,Internals,zcbenz,2016-05-29T23:29:09Z,1150,215,32,3,"The purpose of this PR is to partially implement chrome.\* API to make the React devtools extension work.

Close #915.
Close #2598.
",132,True,en,0
5710,1,0,0,Internals,zcbenz,2016-05-26T09:07:24Z,3,3,3,0,"The latest stable version.
",27,True,en,0
5701,1,1,0,Externals,danhp,2016-05-26T05:33:55Z,12,0,2,0,"It used to somewhat work on OS X since we were just letting the system block the close. But the action was never passed back to relevant observers.
I don't know how to write the tests for this behaviour so I stopped here...

Closes #5680
",238,False,en,0
5700,1,1,0,Externals,felixrieseberg,2016-05-26T04:57:36Z,14,11,4,0,"Updates Standard Code Style to 7 (latest major) and ensures that code is conform.
- camelCase is now enforced
- No assignments in return statements
",148,False,en,0
5689,1,4,0,Externals,cdaringe,2016-05-26T04:49:40Z,24,4,5,0,"#### problem statement
- non-native promises are not supported
#### solution
- support non-native promises
#### discussion

there is a lot of talk on how-to-detect if something is a promise or not.  many people respond to the question with something like ""don't try to detect a promise, just `Promise.resolve` it if you need promise behavior.""  it's a strange response that doesn't address the intent of question--how to do proper type detection on Promises.  it's tricky because a Promise describes both a formal type as well as a behavioral expectation.  due to this complication, detecting a promise is not so simple. @zcbenz already denoted that a simple `.then` check is out of the question, and right fully so.  hence, the strategy taken should cover ~99.9% of promise implementations, with the downside that it takes many type checks to reach a conclusion.

closes #5633
",878,False,en,0
5688,1,1,0,Externals,enlight,2016-05-25T10:44:33Z,5,4,1,0,"Fix description of the `details.url` param in `ses.cookies.set()`, and clarify the fact that cookies without an expiration date will not be retained between sessions.
",167,True,en,0
5687,2,0,0,Internals,zcbenz,2016-05-25T07:03:33Z,28,3,2,0,"Previously we were relying on `uv_init` to do the job, after we link with VC++ statically, `uv_init` only works for `node.dll`, so we have to also put a call of `_set_invalid_parameter_handler` in electron.exe to solve it.

Close #5632.
",237,True,en,0
5684,14,0,9,Internals,kevinsawicki,2016-05-26T01:07:24Z,80,13,8,1,"- [x] Add support for `visibliitychange` document events in `<webview>` tags
- [x] Inherit the initial value of `document.hidden` and `document.visibilityState` from parent `BrowserWindow`
- [x] Add tests of initial state and a change event

Closes #4879
",255,False,en,0
5683,9,8,2,Internals,kevinsawicki,2016-05-26T01:06:36Z,102,95,15,1,"This pull request removes all references to the old Atom Shell name from the repo.

After seeing #5670 it seems worth changing the remaining helper functions and environment variables to say Electron instead of Atom Shell to prevent confusion.

/cc @electron/maintainers 
",272,True,en,1
5682,3,0,0,Internals,kevinsawicki,2016-05-25T02:17:18Z,2,3,2,0,"Should have been removed in #5373 but wasn't.

I think this is fine to remove now since the 1.0 [env var docs](http://electron.atom.io/docs/api/environment-variables/) went out with only mentioning [ELECTRON_RUN_AS_NODE](http://electron.atom.io/docs/api/environment-variables/#electronrunasnode)

Depends on https://github.com/electron/node/pull/15
",349,True,en,0
5681,10,0,1,Internals,kevinsawicki,2016-05-24T17:15:56Z,17,26,1,0,"Follow up to #5610 

@bigtimebuddy I originally gave you bad advice in your pull request, `dialog.showMessageBox` can only be used after the app `ready` event fires. So `dialog.showErrorBox` needs to be used as documented in http://electron.atom.io/docs/api/dialog/#dialogshowerrorboxtitle-content

This pull request switches it back to that but keeps the additional error checks.

<img width=""532"" alt=""screen shot 2016-05-24 at 9 37 07 am"" src=""https://cloud.githubusercontent.com/assets/671378/15512419/ad2a7baa-2194-11e6-8b8e-4861a96eadf3.png"">
",549,True,en,0
5670,10,3,0,Externals,paulcbetts,2016-05-27T21:34:49Z,47,0,1,3,"This PR adds the notes on how to use Surf to build and upload a custom version of Electron
",91,True,en,0
5669,1,1,2,Externals,felixrieseberg,2016-05-24T23:49:37Z,14,15,3,0,"Closes #5655
",13,True,en,0
5668,1,1,0,Internals,kevinsawicki,2016-05-24T04:33:09Z,13,5,1,0,"Strip the `libffmpeg.so` that ends up in the `ffmpeg-*.zip` on https://github.com/electron/electron/releases

Closes #4905
",123,True,en,0
5666,2,1,0,Internals,kevinsawicki,2016-05-24T04:30:25Z,27,2,4,0,"I think https://github.com/electron/electron/commit/6de9c4332fdf85a1e7645b996be0c9534fcf0f4c introduced a regression where the `onRejected` handler was ignored in the RPC handler for promises since only the first argument, `v`, was used. Previously it passed a bound version of `then` which would have caused all arguments to be passed through.

This pull request adds an explicit second argument that will be passed to the proxied `Promise.then` calls.

Closes #5111
",468,True,en,0
5664,1,1,0,Externals,paulcbetts,2016-05-23T20:07:18Z,2,0,1,0,"This PR adds a cibuild script that just punts to the python one, so that we can build Electron with the latest version of [Surf](https://github.com/surf-build/surf)
",165,True,en,0
5662,8,2,0,Internals,kevinsawicki,2016-05-24T01:46:36Z,80,15,9,0,"We are seeing several reports of errors like `TypeError: Cannot read property 'on' of undefined` on the object returned from `require('electron').app`.

This appears to be because people are accidentally (or on purpose) running `npm install electron` inside their apps which then makes `require('electron')` return the [electron npm module](https://www.npmjs.com/package/electron) instead of the internal Electron module with all the expected properties.

Then things like the quick start app and other examples will not work since none of the properties are present and the stack trace appears confusing when they open issues.

This pull request patches `Module._resolveFilename` to always return the internal Electron module when running `require('electron')`. This seems to be consistent with node's other built-ins like `fs`, `path`, etc. that can't be overridden and always return the internal versions when required even when their is a local module by that name in the app's `node_modules/` folder.

Here is an example issue: https://github.com/electron/electron-quick-start/issues/53

/cc @electron/maintainers

Closes #3708
",1133,True,en,0
5659,1,1,0,Externals,danhp,2016-05-23T22:44:42Z,4,4,1,0,"Close #5651 

Ref: https://github.com/electron/electron/blob/6f3d0e17826313898ef12932282479cf7d5cb7c0/atom/browser/native_window.cc#L92 
",137,True,en,0
5658,1,4,4,Externals,danhp,2016-05-25T01:13:03Z,24,11,5,1,"Closes #5566
",13,True,en,0
5653,3,0,0,Internals,zcbenz,2016-05-24T01:02:49Z,10,7,1,0,,0,False,en,0
5648,21,0,0,Internals,zcbenz,2016-05-24T10:59:11Z,452,433,141,1,"Debug build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Release build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Tests passing on:
- [x] OS X
- [x] Linux
- [x] Windows

Chrome API changes:
- [x] V8RecursionScope is removed from blink
- [x] [Message is removed from onbeforeunload dialog](https://bugs.chromium.org/p/chromium/issues/detail?id=587940)

Merge:
- [x] https://github.com/atom/libchromiumcontent/pull/211
- [x] https://github.com/electron/brightray/pull/224
",484,False,en,0
5646,2,0,0,Internals,zcbenz,2016-05-23T00:25:24Z,12,7,4,0,"Close #2365.
",13,True,en,0
5644,6,2,12,Externals,leethomas,2016-05-23T08:15:44Z,20,17,3,0,"Closes https://github.com/electron/electron/issues/5395. 
",58,True,en,0
5640,1,0,0,Internals,zcbenz,2016-05-22T12:47:34Z,5,3,2,0,,0,False,en,0
5638,3,5,0,Externals,deepak1556,2016-05-23T10:48:30Z,74,37,10,1,"Since v0.37 there is no `URLSecurityManager` directly configured by brightray, instead we need to set the whitelist with `HttpAuthPreferences`. This makes `app.allowNTLMCredentialsForAllDomains` obsolete, have introduced flags which mimic chromes' behavior. This will be a breaking change. Also should `DisableAuthNegotiateCnameLookup` and `EnableAuthNegotiatePort` be added ? 

Ref https://www.chromium.org/developers/design-documents/http-authentication

Fixes https://github.com/electron/electron/issues/4825

Depends on https://github.com/electron/brightray/pull/223

/cc @paulcbetts 
",589,True,en,0
5634,1,1,0,Externals,deepak1556,2016-05-22T00:34:56Z,20,0,3,0,"Fixes #5619 
",13,True,en,0
5631,1,1,0,Externals,paulcbetts,2016-05-21T13:39:25Z,1,4,1,0,"Seems silly to default to 32-bit on Windows (if I'm Incorrect, feel free to close this PR)
",91,True,en,0
5630,5,0,0,Internals,kevinsawicki,2016-05-20T21:05:15Z,18,18,1,0,"Makes them consistency with other docs and will be styled consistently on http://electron.atom.io/docs/

Also some minor wording updates.
",138,True,en,0
5625,1,0,0,Internals,kevinsawicki,2016-05-20T17:01:54Z,1,1,1,0,"Minor follow on to #5576 for consistency
",41,True,en,0
5624,10,2,0,Internals,zcbenz,2016-05-20T14:30:00Z,248,104,20,0,"This PR refactors the NativeImage code, so when a win32 API asks for icon, the raw HICON with appropriate size is passed.

Also adds `BrowserWindow.setIcon` API as extra benefit of the refactor.

Close #2248.
Close #3839.
",222,True,en,0
5622,2,2,3,Externals,kcrt,2016-05-22T07:57:36Z,185,118,7,1,"[ci skip]
",10,True,pl,0
5617,1,1,0,Internals,kevinsawicki,2016-05-20T00:26:29Z,34,36,15,0,"Clean up the old CoffeeScript auto-generated `return` statements in functions registered via `on` or `once`.

These functions are never expected to return anything so it should be possible to remove them without any side-effects or backwards compatibility issues.
",264,True,en,0
5616,3,1,0,Internals,kevinsawicki,2016-05-20T00:27:06Z,33,5,5,0,"Set the initial `zoomFactor` of `<webview>` elements to be the current value of the parent `BrowserWindow`.

Closes #5312
",122,True,en,0
5614,1,1,0,Externals,bengotow,2016-05-19T23:54:20Z,2,1,1,0,"Based on our conversation in #5599 I think it'd be good to explicitly mention the fact that remote objects do not support enumerable properties added after they are first used.
",177,True,en,0
5611,1,3,0,Externals,jviotti,2016-05-20T00:24:10Z,41,0,2,0,"NodeJS implements `child_process.exec` by simply passing the whole
command to `child_process.execFile`. See:
- https://github.com/nodejs/node/blob/master/lib/child_process.js#L90
- https://github.com/nodejs/node/blob/master/lib/child_process.js#L99

Electron patches `child_process.execFile` to add support for `asar`
archives by injecting logic that extracts the required files from the
`asar` to a temporary location before delegating the work to the
original `child_process.execFile`.

In order to decide whether to inject the custom `asar` extracting logic,
Electron makes use of a helper function called `splitPath()`. See:
- https://github.com/electron/electron/blob/master/lib/common/asar.js#L37

If the first argument of the returned array equals `true`, means that
the path is considered to be an `asar` archive, and thus the extraction
logic takes place. The problem is that if the command passed to
`child_process.execFile` _contains_ a path to an asar archive, padded
with other commands/arguments, `splitPath()` will consider it to be an
`asar` archive, and will try to extract it, throwing a rightfully
`Invalid package` error.

Fixes: https://github.com/electron/electron/issues/5571
Signed-off-by: Juan Cruz Viotti jviottidc@gmail.com
",1251,False,en,0
5610,6,8,8,Externals,bigtimebuddy,2016-05-24T16:22:11Z,31,13,1,5,"The current ""Error opening app"" message is _rather_ harsh. 

![screen shot 2016-05-19 at 10 19 30 am](https://cloud.githubusercontent.com/assets/864393/15397198/2d87d630-1dad-11e6-8900-ef36797d29ce.png)

Changes to:

```
Unable to open or find an Electron app. 
The docs on how to write an app can be found here:
```
",317,True,en,0
5608,1,1,0,Externals,Gaserd,2016-05-19T23:51:22Z,145,0,1,0,"Russian language for http://electron.atom.io/docs/tutorial/mac-app-store-submission-guide/
",91,True,en,0
5606,1,0,0,Internals,zcbenz,2016-05-19T11:59:37Z,58,43,2,0,,0,False,en,0
5605,5,1,0,Externals,preco21,2016-05-19T10:26:38Z,117,48,7,0,":memo: 
",8,True,en,0
5604,4,1,0,Externals,preco21,2016-05-19T10:27:03Z,391,91,20,0,":memo:
",7,True,en,0
5603,4,3,0,Externals,leethomas,2016-05-21T14:07:53Z,27,14,6,2,"Closes https://github.com/electron/electron/issues/5447. Though I was trying to maintain backwards compatibility, I'm not sure if this is the best way to do it. I don't want to bloat the API but this works for now.

`win.setSheetOffsets(100, -100);`

<img width=""800"" alt=""screen shot 2016-05-19 at 12 09 37 am"" src=""https://cloud.githubusercontent.com/assets/5622404/15385368/0575dfd6-1d56-11e6-9585-ac03fa8640ba.png"">

The old `win.setSheetOffset(100)` still works as expected, setting only the Y offset.

<img width=""801"" alt=""screen shot 2016-05-19 at 12 23 08 am"" src=""https://cloud.githubusercontent.com/assets/5622404/15385659/e412c762-1d57-11e6-8fa6-4369cad701c1.png"">
",677,True,en,0
5602,4,2,0,Internals,zcbenz,2016-05-19T09:50:53Z,65,15,9,0,"In the Windows 10 SDK Microsoft introduced the dependency of Universal CRT, which is not available in Windows <= 8.1 by default and users have to get it via Windows Update, so for some machines there will be errors like ""api-ms-win-crt-runtime-l1-1-0.dll not found"".

This PR changes to link with VC++ libraries statically can get rid of the dependency for Universal CRT.

Close https://github.com/electron/electron/issues/5528.

Refs:
https://bugs.chromium.org/p/chromium/issues/detail?id=495944
https://blogs.msdn.microsoft.com/vcblog/2015/03/03/introducing-the-universal-crt/
https://github.com/electron/libchromiumcontent/pull/210
",635,True,en,0
5601,2,0,0,Internals,zcbenz,2016-05-19T03:24:31Z,34,11,2,0,"This PR adds an `ElectronTeamID` key in `Info.plist` which can be used to specify the Team ID of user's developer account. Also updates the MAS submission guide on Team ID.

Refs https://github.com/electron/electron/pull/5584#issuecomment-220011556.
",250,True,en,0
5600,1,1,0,Externals,tensor5,2016-05-19T10:29:29Z,3,2,1,0,"Don't run `update_clang()` if using system clang or another compiler.
",70,True,en,0
5595,1,1,0,Internals,miniak,2016-05-18T23:40:11Z,3,15,1,0,"asar can be executed as a script from node_modules/.bin, we don't have to search for the node executable
",105,True,en,0
5594,1,1,0,Externals,Gaserd,2016-05-18T20:52:47Z,15,0,1,0,"Create new file - supported-platforms.
Russian language for this page - http://electron.atom.io/docs/tutorial/supported-platforms/
",131,False,en,0
5589,1,2,0,Externals,Gaserd,2016-05-18T17:57:53Z,1,1,1,0,"–Ω–∏—á–µ–≥–æ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –±—É–∫–≤—É –Ω–µ —Ç—É –ø–æ—Å—Ç–∞–≤–∏–ª–∏.
",89,True,sr,0
5588,2,1,4,Externals,brunoqueiros,2016-05-19T00:41:57Z,2,6,1,0,"Currently if the preloaded file throw an exception the error message isn't the real stack trace.

**browser.js**

```
const path = require('wrong-module-name');
```

**main.js**

```
const win = new BrowserWindow({
    'width': 500,
    'height': 500,
    'webPreferences': {
      'nodeIntegration': true,
      'preload': path.join(__dirname, 'wrong-file.js')
    }
  });
```

In this case the browser will throw the console.error with the following message `Unable to load preload script wrong-file.js`

But if the main.js finds the preload file and this file throws an exception, the app will continue showing the same message `Unable to load preload script browser.js` and not the real exception `Error: Cannot find module 'wrong-module-name'`

With this change the browser will throw the real stack trace.

**Stack trace**

```
Error: Cannot find module 'wrong-module-name'
    at Function.Module._resolveFilename (module.js:438)
    at Function.Module._load (module.js:386)
    at Module.require (module.js:466)
    at require (internal/module.js:20)
    at Object.<anonymous> (/home/bruno/dev/test-app/browser.js:1)
    at Module._compile (module.js:541)
    at Object.Module._extensions..js (module.js:550)
    at Module.load (module.js:456)
    at tryModuleLoad (module.js:415)
    at Function.Module._load (module.js:407)
```
",1337,True,en,0
5587,1,1,0,Externals,kcrt,2016-05-18T20:55:11Z,87,33,9,0,"electron-versioning.md is translated.
Other tutorial files are updated.
[ci skip]
",82,False,en,0
5584,2,13,0,Internals,zcbenz,2016-05-18T10:02:30Z,23,19,4,0,"According to [App Sandbox in Depth](https://developer.apple.com/library/mac/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html), if we use application groups then it will be possible to use mach IPC without acquiring `temporary-exception`.

This should be able to make apps much easier to get approved.

Close #5350.
",363,True,en,0
5582,4,0,0,Internals,zcbenz,2016-05-18T07:36:31Z,122,20,5,0,"Also rewrote the `DictionaryValueToNSDictionary` so it works when the dictionary includes an object that can not be converted to JSON. 

Fix #5543.
",148,True,en,0
5580,7,0,0,Internals,zcbenz,2016-05-18T05:31:10Z,120,86,13,0,"This PR makes it possible to create a WebContents without BrowserWindow attached, which is helpful for writing headless tests and implementing background pages for devtools extensions (#915).

``` javascript
let contents = electron.webContents.create({backgroundThrottling: false, webSecurity: false})
contents.loadURL('https://github.com/electron/electron')
```

This API is not supposed to be public for now, we need more testing to decide how it should look like.
",467,True,en,0
5578,1,2,0,Externals,deepak1556,2016-05-19T10:21:36Z,4,0,1,1,"Fixes #5555 

Depends on https://github.com/electron/brightray/pull/222
",72,True,en,0
5576,2,1,0,Internals,kevinsawicki,2016-05-18T01:26:27Z,6,6,6,0,"This pull request makes a few minor tweaks to the doc headings to make them more consistent when shown in https://github.com/electron/electron.atom.io/pull/283
- Title-ize consistently
- Remove leading `The`
- Remove redundant `Electron` use
",242,False,en,1
5575,3,1,0,Internals,kevinsawicki,2016-05-18T01:34:56Z,44,4,1,0,"Incorporate [Spectron](http://electron.atom.io/spectron/) into the docs now that it is officially supported.

It also updates the other sections to install `electron-chromedriver` via npm.
",189,True,en,0
5574,9,4,0,Internals,kevinsawicki,2016-05-18T01:46:44Z,75,1,4,0,"I introduced a regression in #5373 that was fixed in #5490 where custom extensions did not load upon opening the dev tools.

This pull request attempts to add additional test coverage where we actually load a custom devtools extension in the specs and verify it sends a message over ipc saying it was successfully created.
",323,True,en,0
5567,1,1,4,Externals,felixrieseberg,2016-05-18T00:43:23Z,12,0,2,0,"The `semver` question came up again (https://github.com/electron/electron/issues/5561) and I think that we should document Electron's versioning rules.

I basically took @zcbenz's comment and turned it into a little document we can link to.
",241,True,en,0
5559,4,0,0,Internals,zcbenz,2016-05-18T01:26:59Z,34,41,5,0,"Close #3943.
",13,True,en,0
5557,2,1,1,Internals,zcbenz,2016-05-17T07:48:45Z,36,30,4,0,"This is inspired from https://github.com/brave/electron/commit/7fa16afa67c7cf539a0708d1ea10b158eb94ee66.

Instead of using the `NSFullSizeContentViewWindowMask` style to hide the titlebar, this PR treats window with `titleBarStyle` as normal frameless window but shows the window buttons instead. 

Close https://github.com/electron/electron/issues/3009.
",355,True,en,0
5542,2,1,0,Externals,stevekinney,2016-05-16T01:42:12Z,11,18,7,0,"A small update to make all of the different API modules a little bit more consistent. I omitted `Menu` and `MenuItem` as I plan on refactoring them in the very near future.
",173,True,en,0
5540,1,1,0,Externals,kcrt,2016-05-16T01:33:25Z,48,31,3,0,"Japanese version of MAS submission guide was old.
",50,True,en,0
5538,3,0,0,Internals,zcbenz,2016-05-15T02:15:49Z,9,9,4,0,"Close #5528.
",13,True,en,0
5537,2,0,0,Internals,zcbenz,2016-05-15T02:15:42Z,9,1,1,0,"They are responsible for the majority of flaky failures, we used to make the case better by increasing timeout, but as its Mac machines seem to get slower, the flaky failures came back again.
",192,True,en,0
5535,2,1,0,Externals,Godoy,2016-05-15T00:47:29Z,48,2,2,0,,0,False,en,0
5534,1,1,0,Externals,kcrt,2016-05-15T00:41:52Z,51,3,3,0,,0,False,en,0
5533,1,0,5,Externals,stevekinney,2016-05-15T02:16:19Z,1,5,1,0,"Minor change to conform with the ES6 destructuring in the latest version of the docs on master.
",96,True,en,0
5532,2,3,2,Externals,stevekinney,2016-05-15T03:38:28Z,66,91,1,0,"Another quick clean up to remove some of the extra cruft that came from converting from CoffeeScript to JavaScript.
",116,True,en,0
5531,1,1,0,Externals,kcrt,2016-05-15T00:46:59Z,1,1,1,0,"link address updated.
",22,True,en,0
5530,4,1,0,Externals,stevekinney,2016-05-15T00:57:49Z,24,40,1,0,"This pull request aims to achieve the following:
- Clean up some of the artifacts left over from the conversion from CoffeeScript
- Use natively-supported JavaScript features when appropriate
- Slightly reduce the number of functions created by using a `for-of` loop when binding event listeners.
",297,False,en,0
5526,13,5,3,Externals,paulcbetts,2016-05-19T10:34:01Z,79,4,2,5,"This PR adds a new API for process and system statistics, `processStats`:

``` js
import {processStats} from 'electron';

processStats.getProcessMemoryInfo();
>>> Object {workingSetSize: 86052, peakWorkingSetSize: 92244, privateBytes: 25932, sharedBytes: 60248}
```
",266,True,en,0
5525,1,1,0,Externals,stanfieldr,2016-05-15T00:45:43Z,1,1,1,0,"It wasn't entirely clear to me that 'window-all-closed' was used for this purpose. I was originally looking for an event that would fire if all windows were closed and the reason was NOT because the intent was to quit; however, this differs in that it is called regardless of whether the app was quitting.
![gnome-quit](https://cloud.githubusercontent.com/assets/7494573/15266145/da0e39be-1969-11e6-9ff3-de4a55f2ec7a.png)
",422,False,en,0
5522,1,1,0,Externals,Wolfer,2016-05-15T00:38:31Z,1,1,1,1,,0,False,en,0
5519,1,3,0,Externals,danhp,2016-05-14T12:49:16Z,38,32,1,0,"Before:
![image](https://cloud.githubusercontent.com/assets/3745612/15252168/aefdfabc-18fa-11e6-96b9-8ba1c9f237ca.png)

After:
![image](https://cloud.githubusercontent.com/assets/3745612/15252153/9d531da6-18fa-11e6-9322-4378bd4785f4.png)
",238,False,en,0
5518,1,1,0,Externals,danhp,2016-05-14T11:00:30Z,14,0,1,0,"Closes #5451
",13,True,en,0
5513,1,1,0,Externals,danhp,2016-05-13T00:08:32Z,1,0,1,0,"Closes #5512 
",14,True,en,0
5509,5,1,4,Externals,bengotow,2016-05-16T01:27:28Z,83,31,10,3,"I still need to test this on a Win32 machine, but wanted to get feedback on this approach. The button_label parameter needed to be passed through more places than I would have liked, but I'm not sure if there's a better way!
",225,True,en,0
5508,1,1,0,Externals,bengotow,2016-05-12T23:46:08Z,16,11,1,0,"Hey folks! Just read through the security doc and made a few small changes to make the first two paragraphs easier to read. Feel free to merge / close as you see fit. I also added a note about CSP to the security suggestions.
",226,True,en,0
5504,1,1,0,Externals,dalabarge,2016-05-12T02:29:36Z,1,1,1,0,,0,False,en,0
5502,1,1,0,Externals,anthonyryan1,2016-05-12T10:37:25Z,2,2,2,0,"gtk_widget_hide_all was deprecated in gtk+ 2.24 and was removed
entirely in recent versions. This is a pretty straight forward
replacement.
",140,False,en,0
5501,1,1,0,Externals,ecmadao,2016-05-12T01:36:38Z,1,1,1,0,"bugfix-‰øÆÊîπÈîôÂà´Â≠ó
",23,True,zh,0
5500,1,1,0,Externals,radarhere,2016-05-12T01:26:39Z,2,2,2,0,,0,False,en,0
5496,1,1,0,Externals,deepak1556,2016-05-12T01:24:32Z,8,1,1,0,"Fixes #5465 
",13,True,en,0
5491,11,0,0,Internals,zcbenz,2016-05-11T13:10:43Z,235,308,12,0,"When storing renderer process callbacks in the main process, there are two keys for one remote object: 1) the webContents ID and 2) the object ID.

This PR extends the `IDWeakMap` to accept arbitrary key type so it is possible to use two IDs as key, instead of relying on hacks to merge two IDs into one ID.

Close #5476.
",322,True,en,0
5490,2,1,0,Internals,kevinsawicki,2016-05-11T10:59:09Z,1,1,1,0,"It is no longer emitted on `BrowserWindow`.

/cc @zcbenz 

Regression from #5373 
Fixes https://github.com/electron/devtron/issues/59
",134,True,en,0
5489,1,1,0,Externals,felixrieseberg,2016-05-12T00:30:18Z,93,0,2,0,"This PR adds a guide about how to compile your app as a Windows Store app, analog to the Mac App Store guide.
",110,True,en,0
5487,1,2,0,Externals,felixrieseberg,2016-05-12T00:26:28Z,1,1,1,0,"Closes #5464
",13,True,en,0
5486,1,0,0,Internals,zcbenz,2016-05-11T06:12:04Z,1,1,1,0,"It has been removed.
",21,True,en,0
5485,2,1,0,Externals,preco21,2016-05-11T05:48:43Z,11,4,3,0,,0,False,en,0
5480,1,1,0,Externals,preco21,2016-05-11T04:27:45Z,2,2,1,0,"- Add missing changes
",22,True,et,0
5479,1,0,0,Internals,zcbenz,2016-05-11T00:24:24Z,8,7,2,0,"Close #5463.
",13,True,en,0
5477,1,1,0,Externals,danhp,2016-05-11T00:41:08Z,18,0,5,0,"Implementation taken from [Chrome's Source](https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/download/download_status_updater_mac.mm&q=com.apple.DownloadFileFinished&sq=package:chromium&l=237)

Closes #5309 
",233,True,en,0
5474,11,1,0,Externals,preco21,2016-05-11T00:24:15Z,249,233,37,0,"- Adjust line length to `80`.
- Fix code style issues.
- Cleanup codes.
- Remove whitespaces.
",94,False,en,0
5473,7,1,0,Externals,preco21,2016-05-11T00:20:51Z,563,439,43,0,"- With improvements
",20,True,en,0
5471,1,5,2,Externals,nickytonline,2016-05-11T00:12:01Z,2,1,1,0,"This is a minor fix in the api docs. The change to the code snippet is so that the context menu works if someone copies this code from the menu documentation. Fixes #5470
",171,True,en,0
5462,1,1,0,Externals,zicai,2016-05-10T10:44:36Z,1,1,1,0,"should be Á∫øÁ®ã not Á∫øÊàê
",28,True,zh,0
5461,43,4,0,Internals,zcbenz,2016-05-13T05:52:09Z,427,151,67,2,"- [x] Mac App Store build not building
- [x] ia32 target of Linux not building
- [x] Switch to Visual Studio 2015 for building
- [x] Upgrade to Node v6.1.0
- [x] Crash in renderer process: `node::Buffer::CallbackInfo::CallbackInfo`
- [x] Crash in renderer process: `v8::internal::Isolate::FireBeforeCallEnteredCallback`
- [x] Crash in renderer process: `v8::internal::GlobalHandles::Node::Release()`
- [x] Crash in renderer process: `content::BlinkPlatformImpl::SetCompositorThread`
- [ ] crashReporter not working on x64 Windows
- [x] Linking error when building Release version on Windows 
",592,False,en,0
5459,4,0,0,Internals,zcbenz,2016-05-10T02:11:01Z,47,54,3,0,"Current every usage of `protocol.registerStandardSchemes` is after the `ready` event of `app`, so all of they will throw after next release, which is probably not a good thing. This PR turns the the exception into warning, so things still keep broken like before if they don't care.

Also update the docs for protocol.registerStandardSchemes, close #5427.
",356,True,en,0
5445,1,0,0,Internals,zcbenz,2016-05-08T07:44:29Z,4,0,1,0,"The mac machine of travis CI is getting more and more slower, those test cases now become quite flaky on it.
",109,True,en,0
5444,1,0,0,Internals,zcbenz,2016-05-08T06:13:36Z,1,1,1,0,"Close  #5438.
",14,True,en,0
5440,2,4,0,Externals,bengotow,2016-05-08T23:36:21Z,26,5,2,1,"Follow up from #5385 - it looks like there's no way to truly reset the default protocol handler on Mac OS X. This patch basically just chooses the first available handler which is not the user's app and sets it to the default. In my (pretty limited) testing with `mailto`, it seems like the first handler returned is Apple's, so   I think this will do the trick...
",365,True,en,0
5436,3,1,0,Externals,stevekinney,2016-05-08T02:57:02Z,6,8,1,0,"I did a little bit of refactoring on the `parseArgs` helper function in the dialog module.
- When checking the last argument to see if it's a function, we access the array twice. I cached the argument into the variable in order to prevent that additional array access.
- I added destructuring for the argument shifting.
- In the conditional check to see if the first argument was a `BrowserWindow`, we were checking to see if `window` was `null` and then immediately checking it again in the ternary. We were also flipping the entire conditional after the fact. My thinking is that we could short-circuit using `&&` and save the extra conditional check and then just check the constructor if it wasn't `null`. (I wonder if one call to `Object.getPrototypeOf(window)` would be a better approach?)

I wrote up some tests to verify that this all worked as I was going along, but `parseArgs` is a private helper and I didn't want to expose it as a public method, but I'm happy to figure out a way to include them if that's helpful.
",1028,False,en,0
5432,1,1,5,Externals,stevekinney,2016-05-08T02:21:01Z,31,39,3,1,"Updates the default application to the same conventions as found in the latest revisions of the documentation.
",111,True,en,0
5431,1,1,0,Externals,deepak1556,2016-05-07T01:55:12Z,150,3,2,0,"Fixes #5230 

Depends on https://github.com/electron/brightray/pull/217
",72,True,en,0
5430,1,1,0,Externals,deepak1556,2016-05-07T07:32:54Z,19,1,2,0,"Fixes #5187 
",13,True,en,0
5428,2,5,0,Internals,miniak,2016-05-07T02:20:25Z,7,46,2,0,"https://msdn.microsoft.com/en-us/library/aa374191(v=vs.85).aspx#disableWindowFiltering
https://msdn.microsoft.com/en-us/library/aa374191(v=vs.85).aspx#dpiAware

According to https://msdn.microsoft.com/en-us/library/windows/desktop/dn302122(v=vs.85).aspx:
It is strongly recommended to not use SetProcessDpiAwareness to set the DPI awareness for your application. Instead, you should declare the DPI awareness for your application in the application manifest. See PROCESS_DPI_AWARENESS for more information about the DPI awareness values and how to set them in the manifest.

https://msdn.microsoft.com/en-us/library/windows/desktop/dn280512(v=vs.85).aspx
",655,False,en,0
5426,1,0,0,Internals,kevinsawicki,2016-05-06T20:31:24Z,3,1,1,0,"Small docs fix after noticing this link was broken on http://electron.atom.io/docs/v0.37.8/development/source-code-directory-structure/#keeping-git-submodules-up-to-date

Just changes it to be an absolute link instead.

/cc @jlord 
",232,True,en,0
5425,1,0,0,Internals,kevinsawicki,2016-05-06T17:12:02Z,3,3,3,0,"Found a few remaining spots where the link were to the Atom GitHub org instead of the Electron one where the repos now live.
",125,True,en,0
5424,1,0,0,Internals,kevinsawicki,2016-05-06T17:11:33Z,5,3,1,0,"Adds a link to https://github.com/electron/windows-installer in the docs about auto updates on Windows.
",104,True,en,0
5423,1,1,0,Externals,jlord,2016-05-06T16:59:58Z,4,5,1,0,"This PR takes care of some spaces that Atom auto cleaned up but also removes an extra space in a link that was causing the link to not get recognized properly.

This is already fixed in `master` but would be nice to have on this branch so that website looks ‚ú® 

cc @kevinsawicki 
",282,True,en,0
5421,1,0,0,Internals,zcbenz,2016-05-06T13:09:02Z,6,0,2,0,"When app is started by being passed as parameter to the default app, the `process.defaultApp` will be set to `true` in the main process.

Close #4690.
",151,True,en,0
5418,1,2,4,Externals,felixrieseberg,2016-05-08T02:20:21Z,41,2,3,1,"As discussed with @zeke, this PR adds basic information about Electron and Security, including expectation-setting around Chromium updates, guidelines around remote content, and an invitation to contribute to security features. Contains information by @zcbenz, @zeke, and @paulcbetts.
",285,True,en,0
5413,12,4,9,Externals,paulcbetts,2016-05-14T14:28:51Z,114,8,6,8,"This PR adds a new method to `WebFrame`, `getResourceUsage` - it returns more detailed memory usage information than `performance.memory` for a given renderer process:

``` js
import {webFrame} from 'electron';
let usage = webFrame.getResourceUsage();
```

This PR also adds a `purgeCaches` method that attempts to free memory that is no longer being used (i.e. images from a previous navigation, etc etc):

``` js
import {webFrame} from 'electron';
let usage1 = webFrame.getResourceUsage();

webFrame.purgeCaches();

let usage2 = webFrame.getResourceUsage();

console.log(`Before: ${JSON.stringify(usage1)}`);
console.log(`After: ${JSON.stringify(usage2)}`);
```

Note that blindly calling this method probably makes Electron slower since it will have to refill these emptied caches, you should only call it if an event in your app has occured that makes you think your page is actually using less memory (i.e. you have navigated from a super heavy page to a mostly empty one, and intend to stay there)
",1004,True,en,0
5412,1,3,0,Internals,zcbenz,2016-05-06T06:35:14Z,35,0,5,0,"This PR disables the scroll bounce (rubber banding) effect on OS X by default, and add a `scrollBounce` option to enable it.

We used to disable scroll bounce effect completely by patching Webkit, but in recent versions of Chrome the way scroll bounce is implemented had changed and the scroll bounce effect was back.

Close #5397.
",332,True,en,0
5411,1,0,0,Internals,zcbenz,2016-05-06T05:24:59Z,5,0,1,0,"Close #4586.
",13,True,en,0
5409,1,1,0,Externals,CharlieHess,2016-05-06T05:27:46Z,2,0,1,0,"Based on discussion in https://github.com/electron/electron/issues/4396.
",73,True,en,0
5408,1,2,0,Internals,lee-dohm,2016-05-06T01:41:25Z,35,13,1,0,"Also, switch email address for reporting.
",42,True,en,0
5406,4,9,3,Externals,deepak1556,2016-05-09T00:12:35Z,136,66,13,3,"Fixes #5303 

~~Depends on https://github.com/electron/libchromiumcontent/pull/201~~
",85,True,en,0
5401,6,0,0,Internals,zcbenz,2016-05-05T08:59:43Z,167,147,17,0,"This PR implements full conversion between `NSDictionary` and `base::DictionaryValue`, thus enabling `app.setUserActivity` and `continue-activity` event to pass and read complete `userInfo` object.

Refs https://github.com/electron/electron/pull/5352.
",252,True,en,0
5394,5,1,0,Externals,stevekinney,2016-05-05T11:55:43Z,262,256,38,0,"Discussed in #5380.

As of 0.37, Electron supports a large majority of ES6 features. This pull request updates all of the code samples in the documentation to support this syntax. It also normalizes code styles that deviated from the average style used throughout the documentation.
",283,True,en,0
5393,1,1,0,Externals,appetizermonster,2016-05-05T02:15:35Z,2,2,1,0,"- Fix wrong link
- Fix wrong word (Imperative mood is not ""ÌïÑÏàòÏ†Å Î∂ÑÏúÑÍ∏∞"")
  - References: [English-Korean Dictionary](http://endic.naver.com/enkrEntry.nhn?sLn=en&entryId=30e2c26a5cf34ef695d68a7fdf39e4b5), [Wikipedia](https://ko.wikipedia.org/wiki/%EB%AA%85%EB%A0%B9%EB%B2%95)
",283,False,ko,0
5388,3,1,0,Internals,zcbenz,2016-05-05T02:16:16Z,13,12,1,0,"**Before:**

![screen shot 2016-05-04 at 5 51 12 pm](https://cloud.githubusercontent.com/assets/639601/15009486/8ace7f34-1221-11e6-8355-d435cac75b01.png)

**After:**

![screen shot 2016-05-04 at 5 50 37 pm](https://cloud.githubusercontent.com/assets/639601/15009496/96e2c28a-1221-11e6-9039-1fdd60dc2bcb.png)

**Before:**

<img width=""816"" alt=""screen shot 2016-05-04 at 5 53 12 pm"" src=""https://cloud.githubusercontent.com/assets/639601/15009525/bd8c3b64-1221-11e6-866d-62d37c01b71d.png"">

**After:**

<img width=""815"" alt=""screen shot 2016-05-04 at 5 52 37 pm"" src=""https://cloud.githubusercontent.com/assets/639601/15009522/b7a8fe8a-1221-11e6-926e-63effa8981a1.png"">
",669,True,en,0
5387,1,1,0,Externals,preco21,2016-05-04T14:20:23Z,1,1,1,0,"- Match styles that `clang` same as others in `build-instructions-linux.md`
",76,True,en,0
5383,10,1,0,Externals,preco21,2016-05-04T14:20:44Z,86,23,8,0,"- Some fixes
",13,True,en,1
5382,1,1,0,Externals,danhp,2016-05-03T16:28:45Z,1,1,1,0,"Fixes #5381
",12,True,en,0
5379,3,2,2,Externals,danhp,2016-05-05T02:12:58Z,233,4,7,1,"This PR exposes Chrome's context menu event on browser side.
This is my first time writing a hefty chunk of C++ so this could use a bit of scrutiny. 

Ref: [Chrome ContextMenuParams](https://code.google.com/p/chromium/codesearch#chromium/src/content/public/common/context_menu_params.h&sq=package:chromium&type=cs&l=56&rcl=1462259787)

Closes #3210
",349,False,en,0
5378,1,1,0,Externals,CGamesPlay,2016-05-04T14:08:12Z,11,16,2,1,"This resolves #38. Read the issue for context, but after debugging the problem looks like this:

When a pty is in the uv kqueue, the poll kqueue does not properly clear the event after receiving it. The obvious fix would be to add `EV_CLEAR` to the event flags so that it is definitely cleared after receiving any event, however this causes a race condition in Darwin. The poll kqueue is signaled before the uv kqueue, resulting in the uv thread running once, seeing no events, and going back to sleep, while simultaneously the poll thread clears its kqueue out. This results in events being delayed until the next event comes in. You can verify that this is a race condition by adding `EV_CLEAR` to the original kevent call and then adding a sleep at the end of `PollEvents`

The code is simply waiting for data to be available for reading on the uv kqueue file descriptor, which `select` also does. I have migrated the Darwin-specific uv polling code to use `select` instead of kqueue.

I've verified that events still get processed like they should on El Capitan 10.11.3 (15D21).

Note: `poll` doesn't work on kqueues, otherwise I would have used that instead.
",1164,True,en,0
5377,8,0,0,Internals,zcbenz,2016-05-03T13:23:31Z,108,16,5,0,"`bootstrap.py`:
- `--disable_clang` - Use compilers other than clang for building
- `--clang_dir` - Path to clang binaries

Also updated the documents on how to build with custom build configurations.

Refs #259.
",213,False,en,0
5373,31,2,3,Internals,kevinsawicki,2016-05-09T10:16:38Z,38,454,29,6,"Retargets #5335 to the `1-0-release` branch.
",45,True,en,0
5372,1,0,0,Internals,kevinsawicki,2016-05-02T16:26:14Z,1,1,1,0,"Adds the project back under the new Electron org.
",50,True,en,0
5371,1,1,0,Externals,adambuckland,2016-05-04T07:58:26Z,8,3,1,1,"Addresses #5343 

If there is no localizedFailureReason, then then this will no longer be
added to the error string (which would result previously in it printing
'(null)' as part of the string)

Since testing this requires MAS certificates for codesigning (a requirement of Squirrel.Mac), I have no idea how to unit test this. Any ideas greatly appreciated.
",358,True,en,0
5367,1,1,0,Externals,sindresorhus,2016-05-04T07:52:48Z,3,2,1,2,"consistent value notation and explain the difference between `undocked` and `detach` mode.

Ref: https://github.com/electron/electron/pull/5208#discussion_r60907205
",165,True,en,0
5366,5,0,0,Internals,zcbenz,2016-05-02T10:07:22Z,99,12,4,0,"Making it possible to build libchromiumcontent locally instead of downloading prebuilt binaries from internet.

Close #3310.
Refs #259.
",136,True,en,0
5365,1,1,0,Externals,vaartis,2016-05-02T01:08:20Z,305,0,2,0,,0,False,en,0
5361,6,1,0,Externals,preco21,2016-05-01T05:34:00Z,344,224,47,0,,0,False,en,0
5360,1,3,1,Internals,miniak,2016-05-02T00:43:35Z,1,1,1,1,,0,False,en,0
5359,1,0,0,Internals,zcbenz,2016-04-30T15:10:34Z,4,0,1,0,"Bring the Windows symbol server back to life.

Close #784.
",59,True,en,0
5358,8,0,0,Internals,zcbenz,2016-04-30T12:18:23Z,52,16,7,0,,0,False,en,1
5357,1,1,0,Externals,vaartis,2016-05-01T02:46:15Z,255,0,1,0,,0,False,en,0
5353,1,1,0,Internals,zeke,2016-04-30T03:13:07Z,19,19,12,0,"In https://github.com/electron/electron/pull/5351#issuecomment-215902650, @OlsonDev got me thinking about all the places this old syntax might be hanging out. This cleans the rest of them up!
",192,True,en,0
5352,22,2,6,Externals,CharlieHess,2016-05-05T03:06:56Z,222,26,15,5,"This PR implements OS X [Handoff](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html) using new APIs on `app`, as follows:

```
/**
 * Creates an NSUserActivity and sets it as the current activity.
 * Other Mac and iOS apps can retrieve this data in an app delegate.
 */
app.setUserActivity('com.Electron.myEvent', {
  dataToResumeWith: 'abc',
  only: 'strings allowed'
});
```

```
/**
 * If your Info.plist includes this activity type, your app will receive this 
 * event when a ""handoff"" occurs.
 */
app.on(""continue-activity"", (e, type, userInfo) => {
  if (type === 'com.Electron.myEvent') {
    event.preventDefault();
    // resume activity using data from userInfo
  }
});
```

In its current form, you can only pass strings in the `userInfo` object. Someone with more Objective-C++ chops could certainly improve on this.
### TODO:
- [x] Documentation
- [x] Code review
",961,True,en,0
5349,1,1,0,Internals,zeke,2016-04-30T02:59:44Z,5,2,1,0,"üìù 
",6,True,he,0
5347,1,1,0,Externals,rhedshi,2016-04-29T20:34:02Z,2,2,1,0,"Fix minor typo.
",16,True,en,0
5346,1,1,0,Internals,zeke,2016-04-30T02:56:50Z,40,25,1,0,"This pull request brings in some recent code changes from the https://github.com/electron/electron-quick-start repo.
",117,True,en,0
5340,1,0,0,Internals,zcbenz,2016-04-29T11:36:27Z,8,0,1,0,"Because of #5237, the userData dir is not created unless the first window is loaded, usually it is fine but we should at least guarantee it is created in the `ready` event.

Close #5336.
",187,True,en,0
5334,1,2,0,Internals,miniak,2016-04-28T23:24:55Z,1,14,2,0,,0,False,en,0
5332,1,1,0,Externals,Stone-Jay,2016-04-28T23:22:26Z,55,0,1,0,,0,False,en,0
5320,1,3,0,Externals,deepak1556,2016-04-28T11:14:58Z,12,1,2,0,"Race condition between media_list reset on `DesktopCapturer::StartHandling` and `DesktopCapturer::OnRefreshFinished`

Fixes https://github.com/electron/electron/issues/5269
",173,True,en,0
5319,1,1,0,Externals,deepak1556,2016-04-28T07:43:50Z,12,2,2,0,"The `event` parameter from `did-finish-load` was messing up the argument list.

Ref https://github.com/electron/electron/pull/5291
",131,True,en,0
5316,5,5,0,Externals,arifcakiroglu,2016-04-28T23:28:46Z,133,55,4,1,"- Added all files to /tr-TR folder for broken links
- File-object.md and accelerator.md translated
",99,False,en,0
5315,2,1,0,Externals,deepak1556,2016-04-28T07:08:22Z,5,13,4,0,"- Dont attach download dialog to destroyed webcontents window
- Use `DownloadItem::IsSavePackageDownload` to prevent `will-download` event for savePage method instead of relying on mimetype.

Fixes https://github.com/electron/electron/issues/5228
Fixes https://github.com/electron/electron/issues/5278
",302,False,en,0
5314,1,1,0,Externals,Stone-Jay,2016-04-28T02:12:55Z,51,0,1,0,,0,False,en,1
5311,1,2,0,Internals,zcbenz,2016-04-27T13:25:15Z,6,0,2,0,"Because of #5237, there is no guarantee that the user_data_dir is always created, so we need to make sure it exists when calling `app.makeSingleInstance`.

Close #5277.
",169,True,en,0
5310,1,0,0,Internals,zcbenz,2016-04-27T11:21:55Z,0,4,1,0,"It was added to save disk space on CI machine, we no longer need to do it now.
",79,True,en,0
5302,1,2,3,Externals,ritazh,2016-04-28T07:13:06Z,91,0,6,1,"@zcbenz @felixrieseberg This should fix #5164
",46,True,en,0
5301,2,0,0,Internals,kevinsawicki,2016-04-26T20:46:38Z,2,2,2,0,"Super minor doc updates.
- [x] `web-frame` -> `webFrame`
- [x] `content-tracing` -> `contentTracing`
",101,False,ca,0
5300,11,7,2,Internals,kevinsawicki,2016-04-28T16:27:33Z,88,27,2,1,"We are currently working on a redesign of http://electron.atom.io/ and this pull request matches the default app stylings to the upcoming look and feel of the new site.

| Before | After |
| --- | --- |
| <img width=""912"" alt=""screen shot 2016-04-28 at 9 23 00 am"" src=""https://cloud.githubusercontent.com/assets/671378/14893083/d3b70f6c-0d22-11e6-8cea-f2ea05e04d64.png""> | <img width=""912"" alt=""screen shot 2016-04-28 at 9 21 55 am"" src=""https://cloud.githubusercontent.com/assets/671378/14893084/d3ba8e76-0d22-11e6-9436-d952f9ec2250.png""> |

/cc @zeke @jlord @simurai 
",571,True,en,0
5298,1,1,0,Externals,danhp,2016-04-27T01:23:28Z,16,6,1,0,"Accelerators keys no longer use the virtual keys for symbols with are reached via 'Shift'
For example, `Plus` now correctly uses `+` instead of the virtual key `Shift+=` 

Don't have Windows, so I didn't look into that part of the issue.
Ref #1507
",248,False,en,0
5293,4,0,0,Internals,zcbenz,2016-04-26T10:39:49Z,246,78,13,0,"Previously we rely on the `v8util.setDestructor` to dereference the remote objects in JavaScript, however as documented in V8, it is forbidden to call V8 APIs in object's destructor (e.g. the weak callback), and doing so would result in crashs.

This commit removes the JavaScript `setDestructor` method, and avoids doing the dereference work with V8.

Close #5239.
",366,True,en,0
5290,2,1,0,Externals,arifcakiroglu,2016-04-26T02:13:09Z,183,0,4,0,"Not yet fully completed. 

I will be also translate the other files soon!
",74,True,en,0
5287,1,1,4,Externals,MarshallOfSound,2016-04-26T02:16:29Z,22,4,2,0,"Emit an error if `quitAndInstall` is called without an update being available.

Fixes #3840
",92,True,en,0
5285,1,1,0,Externals,michal1106,2016-04-26T01:25:08Z,9,3,1,0,"After spending few hours of trying to make Flash work on [electron-quick-start](https://github.com/electron/electron-quick-start)
This [discussion](https://discuss.atom.io/t/does-flash-really-work-now/21887) ""saved my ass"".

I thought it is worth mentioning this in the tutorial (it might save time for someone in the future)

*As for the Electron Releases
I kind of guessed which windows version to download (i took electron-v0.37.7-win32-ia32.zip) - is there an explanation of the different windows versions that exists? It might be mentioned here or in the release notes

*As for `navigator.plugins`
I saw that when the path isn't correct or I didn't add

```
'webPreferences': {
      'plugins': true
    }
```

It's hard to tell what is wrong because navigator.plugins does display the Shockwave Flash 
- do you have some tools to check this?
- it seems that no matter if the path is ok or not - it always displays the same version... 

```
description: ""Shockwave Flash 11.2 r999""
filename: ""123.dll""
```

```
description: ""Shockwave Flash 11.2 r999""
filename: ""pepflashplayer32_21_0_0_197.dll""
```

Hope you would see me additions relevant
Waiting for your response

Thanks,
Michal
",1189,False,en,0
5282,8,2,0,Internals,zcbenz,2016-04-25T23:21:43Z,324,97,19,0,"### [systemPreferences](https://github.com/electron/electron/blob/system-preferences/docs/api/system-preferences.md)

Also deprecate the system preferences related APIs in `app` module.

Close #1861
Close #4954.
",212,True,en,0
5280,5,0,0,Internals,zcbenz,2016-04-25T02:22:56Z,368,391,52,0,"This is a cleanup of the Wrappable class, so:
1) there is no `GetObjectTemplateBuilder`, all classes now use `BuildPrototype`;
2) developers no longer need to cache the object template themselves;
3) the creation of JS object is now in Wrappable's constructor, instead of lazily initialized in `GetWrapper`;
",308,False,en,0
5263,1,1,0,Internals,miniak,2016-04-24T04:58:36Z,6,0,1,1,"BrowserWindow's **maximize / unmaximize** methods currently behave differently between Mac and Windows:
- Mac: both **maximize** and **unmaximize** toggle between normal / maximized states.
- Windows: **maximize** does not do anything when the window is already maximized, **unmaximize** does not do anything if the window is no longer maximized.
",347,False,en,0
5260,2,1,0,Externals,fierroformo,2016-04-24T04:45:13Z,10,12,5,1,"I fix the documentation for spanish translations.
",50,True,en,0
5254,10,1,0,Externals,preco21,2016-04-22T16:55:25Z,168,95,25,0,"- Line wrap to `80`
- Remove additional spaces
- Fix coding style issues
- Some improvements
- Fix typos
- Apply some fixes
",124,False,en,0
5253,10,1,0,Externals,preco21,2016-04-24T04:38:06Z,333,129,34,1,,0,False,en,1
5252,2,1,0,Internals,miniak,2016-04-24T04:37:45Z,6,2,2,1,"The actual code says:

```
  dict.Set(""rotation"", val.RotationAsDegree());
```
",79,True,en,0
5250,1,2,0,Externals,felixrieseberg,2016-04-22T02:23:15Z,2,2,2,0,"`windowsstore` -> `windowsStore`
",33,True,en,0
5249,4,3,16,Internals,zeke,2016-04-24T04:50:17Z,74,43,34,2,"This is a pass at writing consistent, one-sentence descriptions for each API.

Ready for üëÄ 

@kevinsawicki @jlord @zcbenz 
",126,True,en,0
5247,1,1,0,Externals,djpereira,2016-04-21T22:32:56Z,1,1,1,0,"Fixed native image link.
",25,True,en,0
5244,2,4,0,Internals,kevinsawicki,2016-04-22T16:05:58Z,78,0,5,0,"This pull request always disabled node integration on `<webview>` if it is disabled on the parent `BrowserWindow`.

Previously node integration on a `<webview>` could be enabled even when the parent did not have it.

This is a follow on to #4897 which disabled node integration on windows opened via `window.open` when it was disabled on the parent window.

Now `nodeIntegration` inheritance will behave consistently across `<webview>` tags and `window.open` windows.

Refs #3943

/cc @zcbenz @laramies
",503,True,en,0
5238,1,1,3,Externals,felixrieseberg,2016-04-21T07:21:38Z,11,0,2,0,"If we're running as a Windows Store appx package,
`process.windowsstore` will be `true`, otherwise
`undefined`.
",112,False,en,0
5237,1,0,0,Internals,zcbenz,2016-04-21T05:49:55Z,6,1,1,0,"When calling app.setPath, if the path passed to it doesn't exist, a folder would be created at that path. This causes problem when users want to change the default userData, since Electron always creates a folder at the default userData location.

This PR makes sure `app.setPath` has no side effect on filesystem, fixes #2668.
",328,True,en,0
5236,1,0,0,Internals,zcbenz,2016-04-21T05:14:24Z,15,1,1,0,"Close #4688.
",13,True,en,0
5233,1,0,0,Internals,zcbenz,2016-04-21T02:50:27Z,4,1,1,0,"In Electron we have two ways to remove the reference to remote objects:
1) call `remove` when the remote object gets garbage collected in renderer process;
2) erase all references to remote objects of a page when the page gets reloaded or closed;

So it is possible that when a page gets reloaded/closed, before the JavaScript context gets destroyed, a remote object gets garbage collected, and since all references added by the page have been erased, the `remove` call will try to remove an unexist reference.

This PR fixes it by simply checking whether the page is still there.

Close #4733.
",595,False,en,0
5231,1,2,0,Externals,deepak1556,2016-04-21T02:50:01Z,58,7,6,0,"Fixes https://github.com/electron/electron/issues/5200
",55,True,en,0
5223,2,0,0,Internals,zcbenz,2016-04-20T05:47:17Z,39,50,2,0,"It also adds a check for `value.constructor` before using `value.constructor.name`, fix #5215.
",95,True,en,0
5222,4,1,0,Externals,Stone-Jay,2016-04-20T06:05:25Z,4,4,2,0,,0,False,en,0
5219,1,1,0,Externals,atdrago,2016-04-20T06:11:43Z,2,0,1,0,"üìù Add caveat about using other properties while specifying `role` for a MenuItem on OS X.
",93,True,en,0
5218,1,0,0,Internals,zcbenz,2016-04-20T00:31:53Z,5,4,4,0,"Whitespaces and empty lines.
",29,True,en,0
5214,1,1,0,Externals,alexgleason,2016-04-20T04:44:31Z,1,0,1,0,,0,False,en,0
5213,1,3,0,Externals,rmcdonald,2016-04-20T06:05:04Z,4,4,1,0,,0,False,en,1
5208,1,0,2,Externals,deepak1556,2016-04-20T04:34:52Z,12,5,2,0,"Depends on https://github.com/electron/brightray/pull/215

Fixes https://github.com/electron/electron/issues/5094
",114,True,en,0
5205,2,2,0,Internals,zcbenz,2016-04-19T11:56:24Z,38,17,1,0,"By using the SandBox Policy Language, I finally got Electron sandboxed without rewriting Chromium's IPC system. But to achieve this we have added an `temporary-exception` entry to the entitlements, which may make the app fail to pass the review of Mac App Store.

<del>Also another problem is the renderer process unable to read the files under `Electron.app/Contents/Resources`, because the renderer process belongs to the `Electron Helper.app`, which is not the same with `Electron.app`. I work around it by making `Electron.app/Contents/Resources` a symbol link to `Electron.app/Contents/Frameworks/Electron Framework.framework/Resources`, so app now lives under the `Electron Framework.framework` and the sandbox is happy with that. This might be a breaking change for some apps.</del>


Anyway this PR should be able to fix the support for Mac App Store, /cc @kevinsawicki.

Close #3871.
",893,True,en,0
5203,4,1,0,Externals,Stone-Jay,2016-04-19T23:50:25Z,97,1,2,0,"Translate download-item.md to Chinese and fix a mistake in frameless-window.md
",79,True,en,0
5202,2,2,3,Internals,zeke,2016-04-20T01:51:12Z,27,0,1,0,"@kevinsawicki taught me and @jlord this One Weird Trick‚Ñ¢
",59,True,en,0
5199,5,8,0,Externals,Mr0grog,2016-04-20T11:49:56Z,88,1,6,1,"This is meant to fix #5183.

@zcbenz it looks like I misunderstood what `WebContents::IsLoadingToDifferentDocument` does. I thought it was about the main frame specifically, but it appears to just be about whether the current thing loading is the actual document that is _any_ frame in the WebContents, so it doesn‚Äôt get us anything better than `WebContents::IsLoading` did.

After some poking around, it seems like the only way you‚Äôre supposed to be able to get the state we are looking for is `WebContents::GetFrameTree()->root()->IsLoading()`, but `GetFrameTree` is not included in Chromium‚Äôs publicly exported headers.

Instead, I synthesized a similar bit of state based on `WebContentsObserver` callbacks. I don‚Äôt know that this approach is really all that great, but it‚Äôs the best I could think of. Feel free to throw it out or suggest a different approach if so. I‚Äôm also not 100% sure this handles all the possible loading situations, but I _think_ it does.
",979,True,en,0
5197,7,7,0,Externals,deepak1556,2016-04-20T05:35:00Z,874,41,19,1,"Ref #1956 

```
app.importClientCertificate(options, function(result) {
  // app logic
})

* options
  * clientCertificate - pkcs12 file
  * password
```

A few thoughts with implementation
- Currently the trust bits for the CA certs are set by the api internally otherwise certificate verification will fail for untrusted. Should this be exposed as another api and let users set the trust bits ?
- Does the current options object serve all purposes for client certificate import ? Or is there any other format users would like to provide ?
- The api is implemented only for linux, for other platforms chromium invokes the platform certificate manager whose implementation can be found in [settings_utils::ShowManageSSLCertificates](https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/ui/webui/settings_utils.h&l=24). I dont have access to other platforms to test and implement, so would like some help in this area.

\cc @kjlaw89
",953,True,en,0
5196,1,1,0,Externals,raybooysen,2016-04-19T23:44:41Z,2,2,1,1,"If a consumer does:

```
var screen = require('electron').screen;
```

before appReady, an Error is thrown.
",108,True,en,0
5194,1,1,0,Externals,Stone-Jay,2016-04-18T23:59:45Z,87,0,1,0,"Translate `frameless-window.md` to Chinese.  And I'm not sure that the `non-client frame`'s translation is accurate.
",117,True,en,0
5192,1,1,0,Externals,andrewda,2016-04-18T23:59:15Z,1,1,1,0,"Line number is now 576 instead of 527 ‚Äì took me a little while to find where the function is now.
",100,True,en,0
5191,1,1,0,Internals,zcbenz,2016-04-18T06:13:41Z,1,0,1,0,"Otherwise it is going to be some random value and bite us.

Close #5180.
",73,True,en,0
5184,1,1,0,Internals,miniak,2016-04-18T06:13:27Z,5,0,1,1,"There are some missing event arguments when compared to the implementation:
https://github.com/electron/electron/blob/master/lib/renderer/web-view/guest-view-internal.js
",170,False,en,0
5176,1,1,0,Externals,shokmaster,2016-04-15T19:46:30Z,6,6,1,0,"Correct misspellings
",21,True,nl,0
5169,1,1,0,Externals,Stone-Jay,2016-04-15T13:16:07Z,12,10,1,0,"change `ipc` to `ipcMain`/`ipcRenderer`
",40,True,en,0
5168,3,4,0,Externals,jlord,2016-04-19T19:29:42Z,1,0,1,4,"This PR adds a line break before a list on `desktop-capturer.md` so that it renders correctly on the Electron website ‚ú® It also fixes the header levels on the `session.md` doc as well as go back to using `session` over `ses` for the method examples. 

_Edit_ I just saw @zcbenz that you changed it to `ses`. Whatever you think is best üëç I thought it was just it was a little unclear but can I change it back if you like it the best as `ses`. 
",448,True,en,0
5167,1,1,0,Externals,Stone-Jay,2016-04-15T12:14:09Z,2,2,1,0,"'same-origin policy' means 'ÂêåÊ∫êÁ≠ñÁï•' in Chinese
",53,True,zh,0
5166,2,1,0,Externals,preco21,2016-04-15T11:39:55Z,17,4,2,0,":memo: 
",8,True,en,0
5161,1,1,0,Externals,felixrieseberg,2016-04-15T11:10:03Z,25,5,1,0,"Previously, the auto updater would run as many squirrel processes
as told. This introduces a little change where instead of spawning
a second process, we attach to the already running process - or, if
different arguments are passed, return and emit an error.

This is not failsafe, but it ensures that we don't run into simple
race condition crashes.

@paulcbetts: I liked your Promise idea frankly better, but I didn't
want to introduce a breaking API change - but this achieves the
same result (existing process w/ same args => get same events).

Closes #5097
",562,False,en,0
5159,1,1,0,Externals,djpereira,2016-04-15T10:59:50Z,1,1,1,0,"Sample missing reference to webContents for toggleDevTools.
",60,True,en,0
5157,2,1,0,Externals,christoth,2016-04-15T10:58:54Z,30,5,1,0,"Create a new section for CSS and add notes to avoid hiding the `webview` via `hidden` attribute or `display:none;` CSS and provide a recommended approach.
",155,True,en,0
5155,1,0,0,Internals,zcbenz,2016-04-14T23:48:09Z,19,6,2,0,"On OS X the background color of RenderWidgetHostView can not be really transparent, even if we set it to SK_ColorTRANSPARENT a half-transparent mask would still show and change the background color of the native window.

This PR solves it by also setting the background color of RenderWidgetHostView to backgroundColor.

Close #5150.
",334,True,en,0
5153,1,0,0,Internals,zcbenz,2016-04-14T11:05:35Z,2,2,1,0,"Close #5120.
",13,True,en,0
5152,3,0,0,Internals,zcbenz,2016-04-14T10:22:56Z,18,131,7,0,"Close #4906.
",13,True,en,0
5147,3,1,8,Externals,deepak1556,2016-04-19T23:52:59Z,30,1,3,5,"Depends on https://github.com/electron/brightray/pull/212
",58,True,en,0
5146,1,1,0,Externals,Stone-Jay,2016-04-14T06:11:55Z,2,2,1,0,"translation error, change ""ÂÆûÊïà"" to ‚ÄúÂ§±Êïà"".
",50,True,zh,0
5143,1,3,0,Externals,felixrieseberg,2016-04-20T00:33:25Z,39,0,2,6,"Contributing to Electron would probably be a bit easier if we had debugging instructions. I started writing some for Windows (because that's an area where I'd love to see more people submit PRs üò∏) but if people agree that this is useful, I could probably add some instructions for how to use the [OS X/Linux VSCode C++ Debugger](https://blogs.msdn.microsoft.com/vcblog/2016/03/31/cc-extension-for-visual-studio-code/).

Ref #5140
",433,True,en,0
5141,4,0,0,Internals,zcbenz,2016-04-14T02:56:13Z,44,71,4,0,"- Remove the sync message on startup;
- Reduce the IPC messages used for sending visibilitychange event.
",105,False,en,0
5137,3,0,0,Internals,zcbenz,2016-04-13T11:12:50Z,14,22,3,0,"The #3185 is no longer a problem after the upgrade to Chrome 49, so we are safe to revert #3643.

Close #5128.
",111,True,en,0
5136,1,0,0,Internals,zcbenz,2016-04-13T09:47:28Z,2,3,1,0,"The `IdleNotification` became a nearly no-op after V8 4.5, only `LowMemoryNotification` can force V8 to do garbage collection now.

Fix #4086.
",143,True,en,0
5131,1,0,0,Internals,zcbenz,2016-04-13T04:00:18Z,7,4,1,0,"On Windows the focus/blur events were emitted before the event gets passed to underlying UI framework, which caused crash when user tries to close the window in the event's handler. This PR fixes it by delaying the event to next tick.

Fix #984.
Fix #3893.
",257,True,en,0
5119,1,0,0,Internals,zcbenz,2016-04-12T08:57:27Z,14,1,4,0,"When users press CMD+R in devtools view, a `Page.reload` command would be sent to the main process to ask the page to reload. The default behavior of this command is to call `web_contents->GetNavigationController()->Reload()`, which bypasses Electron's hack that forces restarting renderer process for reloading.

This PR hijacks the `Page.reload` command to force using `webContents.reload` to reload pages.

Fix #4842.
",421,True,en,0
5118,3,0,0,Internals,zcbenz,2016-04-12T06:32:28Z,38,1,4,0,"This PR solves it by force creating JavaScript context in every page, so our JavaScript bindings can be loaded.

Fix #1117.
",124,True,en,0
5117,1,3,0,Externals,deepak1556,2016-04-14T11:23:58Z,290,2,8,2,"Depends on
https://github.com/electron/libchromiumcontent/pull/196
https://github.com/electron/brightray/pull/208

Fixes #5022 
",128,False,en,0
5114,1,1,0,Externals,anshao,2016-04-12T05:02:23Z,1,1,1,0,"Delete the extra text
",22,True,en,0
5108,6,1,0,Externals,preco21,2016-04-11T23:46:22Z,55,36,19,0,,0,False,en,0
5102,1,1,0,Externals,Stone-Jay,2016-04-11T12:48:59Z,1,1,1,1,"Translation error about `system events`(line43), change ""Á≥ªÁªüÊó∂Èó¥"" to ""Á≥ªÁªü‰∫ã‰ª∂"".
",90,True,zh,0
5095,4,1,0,Externals,Mr0grog,2016-04-11T12:06:02Z,75,5,13,2,"This resolves #5074 by adding `resourceType` as the last argument for WebContents‚Äôs `did-get-response-details` event.

In order to do this without duplicating the string conversion logic from `atom_network_delegate`, the `ResourceTypeToString()` function is moved to the `atom` namespace and is exposed publicly (per @zcbenz‚Äôs recommendation). In hindsight, that seems less than wonderful, so I wonder whether putting it under another namespace (maybe `atom::net`?) would be better. I don‚Äôt know enough about Electron to know where is best or if it just being under the `atom` namespace is ok.

(Also note the tests here cover more than just `resourceType` because there were no pre-existing tests for the `did-get-response-details` event at all.)
",754,True,en,0
5091,1,1,0,Internals,kevinsawicki,2016-04-11T11:27:16Z,3,3,1,2,"Minor rename but figured this was worth doing since they show up in stack traces and might confuse people who don't know what `ATOM_SHELL` is.

This shows up in stack traces when requiring a native module fails.
### Before

```
Error: Module version mismatch. Expected 47, got 46.
    at Error (native)
    at process.module.(anonymous function) [as dlopen] (ATOM_SHELL_ASAR.js:158:20)
    at Object.Module._extensions..node (module.js:440:18)
    at Object.module.(anonymous function) [as .node] (ATOM_SHELL_ASAR.js:158:20)
    at Module.load (module.js:357:32)
    at Function.Module._load (module.js:314:12)
    at Module.require (module.js:367:17)
    at require (internal/module.js:16:19)
    at <anonymous>:2:6
    at Object.InjectedScript._evaluateOn (<anonymous>:878:140)
```
### After

```
Error: Module version mismatch. Expected 47, got 46.
    at Error (native)
    at process.module.(anonymous function) [as dlopen] (ELECTRON_ASAR.js:158:20)
    at Object.Module._extensions..node (module.js:440:18)
    at Object.module.(anonymous function) [as .node] (ELECTRON_ASAR.js:158:20)
    at Module.load (module.js:357:32)
    at Function.Module._load (module.js:314:12)
    at Module.require (module.js:367:17)
    at require (internal/module.js:16:19)
    at <anonymous>:2:6
    at Object.InjectedScript._evaluateOn (<anonymous>:878:140)
```
",1351,True,en,0
5086,3,5,0,Internals,zcbenz,2016-04-08T07:25:09Z,25,7,5,0,"Setting `backgroundThrottling` will disable all throttling for background pages, close #4925.
",94,True,en,0
5079,1,1,0,Internals,kevinsawicki,2016-04-08T15:24:53Z,1,1,1,0,"This is the version now used by Electron.
",42,True,en,0
5075,8,0,0,Internals,kevinsawicki,2016-04-07T17:35:52Z,23,0,1,0,"Previously `0.8.1` was used which was blocking module upgrades in #5064 since that version does not the new stream APIs.

Now `0.10.21` is used (still pretty old) is used.

I'm working on getting `v4.2.2` on these machines but until then this should unblock #5064 
",265,True,en,0
5073,3,1,2,Internals,zeke,2016-04-11T10:16:32Z,9,2,1,3,"This is a followup to https://github.com/electron/electron/issues/5010 that adds API naming conventions to the dev docs.

Thanks for clarifying, @yishn and @zcbenz.
",165,True,en,0
5072,3,7,0,Externals,sneakypete81,2016-04-11T10:27:53Z,19,10,1,3,"Some browsers (eg. Firefox) may not return until the browser window is closed. This causes the Electron application to lock up while the browser window is open.

Fixes https://github.com/atom/atom/issues/6320

I'm struggling to properly test this fix, as I can't work out how to use a custom build of Electron when building Atom. Any help with this would be appreciated.
",371,True,en,0
5070,1,1,0,Externals,christoth,2016-04-08T07:09:12Z,6,1,1,0,"Updated `webview` documentation, changed `display:inline-block` to `display:inline-flex`, explicitly noted the use of the new layout and how it can be broken by overwriting the CSS `display` property.
",201,True,en,0
5068,1,0,0,Internals,zcbenz,2016-04-07T06:20:16Z,1,1,1,0,"Bring back the patch https://github.com/electron/node/commit/6bcd8af891a991f8aa196e49e6bf908ebbe24cae so build is green on CI machines with ancient node versions.
",163,True,en,0
5064,1,2,0,Internals,kevinsawicki,2016-04-07T18:40:04Z,1,1,1,0,"This upgrades to the latest version of `asar` which removes this warning from being logged during `npm install`.

```
npm WARN deprecated graceful-fs@3.0.8: graceful-fs version 3 and before will fail on newer node releases. Please update to graceful-fs@^4.0.0 as soon as possible.
```
",285,True,en,0
5063,1,1,0,Internals,kevinsawicki,2016-04-07T16:04:00Z,3,0,1,0,"Small note about signing being required for `Squirrel.Mac` updates.

Refs #5008
",80,True,en,0
5061,1,1,0,Internals,kevinsawicki,2016-04-07T16:37:07Z,86,86,11,0,"This is a minor cleanup to rename the internal IPC events starting with `ATOM_` and `ATOM_SHELL_` to be `ELECTRON_` instead.

Although these are internal, doing debugging and logging you might across them so I figured they should have the updated name.
",253,True,en,0
5056,2,3,0,Externals,paulcbetts,2016-04-07T07:11:05Z,23,0,2,0,"It appears that whatever was causing the performance issues in #4001 doesn't happen in Chromium 49, and users are reporting that the fix in #4009 does indeed cause degradation of functionality in NVDA / JAWS (though it's hard to see via NVDA's reader panel - both settings report what I would consider to be junk). 
",316,True,en,0
5048,3,1,0,Externals,preco21,2016-04-07T12:22:24Z,81,42,17,1,,0,False,en,0
5040,3,1,1,Externals,paulcbetts,2016-04-07T07:10:51Z,19,13,7,1,"This means that on most Linux distributions where python3 is the default, we can invoke `python2 script/bootstrap.py` and have it work, instead of having to stomp the name `python` back to Python 2.x
",200,True,en,0
5033,3,4,0,Internals,zcbenz,2016-04-05T11:44:09Z,12,1,2,0,"Previously our Node fork was based on https://github.com/nodejs/node/commit/64c87e2cf4bdac6cdea302d5a5ead36c56f81c65, which is actually v6.0.0-pre, this commit fixes it by rebasing on https://github.com/nodejs/node/commit/79ea8c333c0ff7960d5f5da41c6b6cce9dc95776.

Close #5003.
Close #5019.
",291,True,en,0
5030,2,7,0,Externals,deepak1556,2016-04-11T11:04:32Z,63,7,3,6,"Fixes #5023 
",13,True,en,0
5029,2,3,0,Externals,Mr0grog,2016-04-07T11:22:02Z,35,6,7,2,"This is a fairly simple patch to add a `isMainFrame` boolean param for the `did-fail-load` event on WebContents, indicating whether the failed load came from the main frame or from a child frame.

Fixes #5013.
",210,True,en,0
5009,1,1,0,Externals,deepak1556,2016-04-07T07:18:55Z,1,3,1,3,"currently it crashes when trying to set a verifier. tested only on linux.

```
WARNING: ThreadSanitizer: data race (pid=21932)
  Write of size 8 at 0x7d3800017e38 by thread T12:
    #0 atom::AtomBrowserContext::CreateCertVerifier() <null> (electron+0x000000abe74b)
    #1 non-virtual thunk to atom::AtomBrowserContext::CreateCertVerifier() <null> (electron+0x000000abe81e)
    #2 brightray::URLRequestContextGetter::GetURLRequestContext() <null> (electron+0x000000ca6b4e)
    #3 content::ChromeAppCacheService::InitializeOnIOThread(base::FilePath const&, content::ResourceContext*, net::URLRequestContextGetter*, scoped_refptr<storage::SpecialStoragePolicy>) <null> (libcontent.so+0x0000005690bb)

  Previous read of size 8 at 0x7d3800017e38 by main thread (mutexes: write M3058):
    #0 atom::AtomBrowserContext::cert_verifier() const <null> (electron+0x000000a17349)
    #1 atom::api::Session::SetCertVerifyProc(v8::Local<v8::Value>, mate::Arguments*) <null> (electron+0x000000a12272)
    #2 base::internal::RunnableAdapter<void (atom::api::Session::*)(v8::Local<v8::Value>, mate::Arguments*)>::Run(atom::api::Session*, v8::Local<v8::Value> const&, mate::Arguments* const&) <null> (electron+0x000000a2e12b)
    #3 base::internal::InvokeHelper<false, void, base::internal::RunnableAdapter<void (atom::api::Session::*)(v8::Local<v8::Value>, mate::Arguments*)>, base::internal::TypeList<atom::api::Session* const&, v8::Local<v8::Value> const&, mate::Arguments* const&> >::MakeItSo(base::internal::RunnableAdapter<void (atom::api::Session::*)(v8::Local<v8::Value>, mate::Arguments*)>, atom::api::Session* const&, v8::Local<v8::Value> const&, mate::Arguments* const&) <null> (electron+0x000000a2dfec)
    #4 base::internal::Invoker<base::IndexSequence<>, base::internal::BindState<base::internal::RunnableAdapter<void (atom::api::Session::*)(v8::Local<v8::Value>, mate::Arguments*)>, void (atom::api::Session*, v8::Local<v8::Value>, mate::Arguments*)>, base::internal::TypeList<>, base::internal::InvokeHelper<false, void, base::internal::RunnableAdapter<void (atom::api::Session::*)(v8::Local<v8::Value>, mate::Arguments*)>, base::internal::TypeList<atom::api::Session* const&, v8::Local<v8::Value> const&, mate::Arguments* const&> >, void (atom::api::Session* const&, v8::Local<v8::Value> const&, mate::Arguments* const&)>::Run(base::internal::BindStateBase*, atom::api::Session* const&, v8::Local<v8::Value> const&, mate::Arguments* const&) <null> (electron+0x000000a2df3a)
    #5 base::Callback<void (atom::api::Session*, v8::Local<v8::Value>, mate::Arguments*)>::Run(atom::api::Session* const&, v8::Local<v8::Value> const&, mate::Arguments* const&) const <null> (electron+0x000000a2dc02)
    #6 mate::internal::Invoker<mate::internal::IndicesHolder<0ul, 1ul, 2ul>, atom::api::Session*, v8::Local<v8::Value>, mate::Arguments*>::DispatchToCallback(base::Callback<void (atom::api::Session*, v8::Local<v8::Value>, mate::Arguments*)>) <null> (electron+0x000000a2d5c7)
    #7 mate::internal::Dispatcher<void (atom::api::Session*, v8::Local<v8::Value>, mate::Arguments*)>::DispatchToCallback(v8::FunctionCallbackInfo<v8::Value> const&) <null> (electron+0x000000a2d25b)
    #8 v8::internal::FunctionCallbackArguments::Call(void (*)(v8::FunctionCallbackInfo<v8::Value> const&)) <null> (libv8.so+0x0000003a7863)
    #9 node::MakeCallback(node::Environment*, v8::Local<v8::Object>, v8::Local<v8::String>, int, v8::Local<v8::Value>*) <null> (libnode.so+0x0000000dc36e)
    #10 node::MakeCallback(node::Environment*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*) <null> (libnode.so+0x0000000dc460)
    #11 node::MakeCallback(v8::Isolate*, v8::Local<v8::Object>, char const*, int, v8::Local<v8::Value>*) <null> (libnode.so+0x0000000dc608)
    #12 mate::internal::CallEmitWithArgs(v8::Isolate*, v8::Local<v8::Object>, std::vector<v8::Local<v8::Value>, std::allocator<v8::Local<v8::Value> > >*) <null> (electron+0x000000b84382)
    #13 v8::Local<v8::Value> mate::EmitEvent<base::BasicStringPiece<std::string>, v8::Local<v8::Object> >(v8::Isolate*, v8::Local<v8::Object>, base::BasicStringPiece<std::string> const&, v8::Local<v8::Object> const&) <null> (electron+0x000000971395)
    #14 bool mate::EventEmitter::EmitWithEvent<>(base::BasicStringPiece<std::string> const&, v8::Local<v8::Object>) <null> (electron+0x000000971124)
    #15 bool mate::EventEmitter::EmitWithSender<>(base::BasicStringPiece<std::string> const&, content::WebContents*, IPC::Message*) <null> (electron+0x000000970f9f)
    #16 bool mate::EventEmitter::Emit<>(base::BasicStringPiece<std::string> const&) <null> (electron+0x0000009689f2)
    #17 atom::api::App::OnFinishLaunching() <null> (electron+0x000000964bfb)
    #18 non-virtual thunk to atom::api::App::OnFinishLaunching() <null> (electron+0x000000964c3c)
    #19 atom::Browser::DidFinishLaunching() <null> (electron+0x0000008a8d6b)
    #20 atom::AtomBrowserMainParts::PreMainMessageLoopRun() <null> (electron+0x00000089d730)
    #21 content::BrowserMainLoop::PreMainMessageLoopRun() <null> (libcontent.so+0x00000058d780)
    #22 __libc_start_main <null> (libc.so.6+0x00000002070f)

  Location is heap block of size 216 at 0x7d3800017d80 allocated by main thread:
    #0 operator new(unsigned long) <null> (electron+0x00000088a57e)
    #1 brightray::BrowserContext::Create(std::string const&, bool) <null> (electron+0x000000abed03)
    #2 brightray::BrowserContext::From(std::string const&, bool) <null> (electron+0x000000c6d074)
    #3 brightray::BrowserMainParts::PreMainMessageLoopRun() <null> (electron+0x000000c740a7)
    #4 atom::AtomBrowserMainParts::PreMainMessageLoopRun() <null> (electron+0x00000089d6d3)
    #5 content::BrowserMainLoop::PreMainMessageLoopRun() <null> (libcontent.so+0x00000058d780)
    #6 __libc_start_main <null> (libc.so.6+0x00000002070f)

  Mutex M3058 (0x7d1400016210) created at:
    #0 pthread_mutex_init <null> (electron+0x000000823ec0)
    #1 v8::internal::ThreadManager::ThreadManager() <null> (libv8.so+0x00000083e63c)
    #2 atom::AtomBrowserMainParts::PostEarlyInitialization() <null> (electron+0x00000089d1b7)
    #3 content::BrowserMainLoop::EarlyInitialization() <null> (libcontent.so+0x000000589b22)
    #4 __libc_start_main <null> (libc.so.6+0x00000002070f)

  Thread T12 'Chrome_IOThread' (tid=21950, running) created by main thread at:
    #0 pthread_create <null> (electron+0x000000822861)
    #1 <null> <null> (libbase.so+0x0000000d2d33)
    #2 __libc_start_main <null> (libc.so.6+0x00000002070f)
```
",6482,True,en,0
4998,1,0,0,Internals,zcbenz,2016-04-03T07:53:11Z,14,2,3,0,"To use the new `node_no_browser_globals` flag introduce by https://github.com/nodejs/node/pull/5853.
",101,True,en,0
4997,2,0,0,Internals,zcbenz,2016-04-03T05:07:39Z,2,2,2,0,,0,False,en,0
4996,3,1,0,Internals,zcbenz,2016-04-03T04:44:43Z,8,3,3,0,"Fix #861.
",10,True,en,0
4995,2,1,0,Internals,zcbenz,2016-04-03T02:14:27Z,41,20,2,0,"This removes the white flash when loading a page on Windows and Linux. 

Fix #4985.
Fix #1626.
",95,True,en,0
4993,3,4,0,Internals,zcbenz,2016-04-03T00:39:10Z,90,59,14,0,"In #4777 we set the background color of the renderer view of normal windows to transparent by default, which resulted in the problem that some apps having black background, which is the default color of the window.

This PR solves it by setting the renderer view's background color to `BrowserWindow`'s `backgroundColor`, and if it is not specified, we use white background by default.

This should be able remove the white flash when loading page on Windows and Linux completely, while keeping the default behavior before v0.37.3.

Refs #861.
",544,True,en,0
4989,1,2,0,Internals,zeke,2016-04-02T10:19:09Z,3,0,1,0,"<kbd>Option</kbd> is only on OS X.
",35,True,en,0
4988,2,1,0,Internals,zeke,2016-04-03T05:03:32Z,7,7,2,1,"The existing examples are platform specific. This updates them to set a better precedent for readers.
",102,True,en,0
4986,1,1,0,Externals,aluxian,2016-04-07T07:11:49Z,5,1,1,5,"Add link to Aluxian/squirrel-updates-server in the docs page for autoUpdater
",77,True,en,0
4982,3,1,0,Internals,zcbenz,2016-04-01T07:57:27Z,16,8,5,0,,0,False,en,0
4981,4,0,0,Internals,zcbenz,2016-04-01T07:11:21Z,29,8,2,0,"This fixes another case that would cause the exception in #4733. In JS when you store a method of an object, the object will not be referenced, so in the following case calling `stringify` would throw exception because the `remote.getGlobal('JSON')` gets garbage collected.

``` js
let stringify = remote.getGlobal('JSON').stringify
stringify({})
```

In normal JS this is not a problem because the methods are objects themselves and rely on `this` pointer when being called. However in Electron the problem is the member methods of remote objects are not real functions, they just only records the object and the method's name, and send them to the main process when being called.

This PR works around it by referencing the remote object in its remote member methods, so as long as the methods are stored by user the remote object would never be garbage collected.

A real solution should be treating member methods as real functions, and get the remote object from the `this` pointer. But let's try it in another PR.

Close #4733.
",1034,True,en,0
4978,5,0,0,Internals,kevinsawicki,2016-04-04T19:34:50Z,129,129,72,3,"Do not merge until repositories are moved over on Monday, April 4th, 2016.

See #4874 for more details.
",104,True,en,0
4976,4,1,0,Internals,kevinsawicki,2016-04-01T23:26:05Z,11,11,10,1,"This is a small pull request to rename a couple things from `atom` to `electron`. Not sure how far to go here but figured it would be more intuitive for at least a few things to be named correctly going forward to prevent confusion between Atom and Electron.

This pull request renames the following:
- `atom.gyp` :arrow_right: `electron.gyp`
- `atom.asar` :arrow_right: `electron.asar`
- `atom.icns` :arrow_right: `electron.icns`

After this pull request `Electron.app` will no longer contain any files named `atom`.
",518,True,en,0
4970,1,1,0,Externals,felixrieseberg,2016-03-31T18:20:08Z,6,0,1,0,"Ref #4943
",10,True,en,0
4969,1,1,0,Internals,kevinsawicki,2016-04-01T23:11:09Z,8,1,1,1,"Currently the app will hang if a dialog API is called with a `null` or `undefined` callback parameter since the callback added by the `rpc-server.js` for asynchronous APIs will then be at the 4th argument position and `parseArgs` in `dialog.js` will be looking for it at the third position.

This pull request adds a fallback that uses the last argument as the callback so that the `rpc-server` callback wrapper argument will always be used when specified.

Closes #4936
",471,True,en,0
4968,1,2,0,Externals,danhp,2016-04-07T07:14:36Z,13,3,2,6," Fixes #4643
",13,True,en,0
4965,1,0,0,Internals,zcbenz,2016-03-31T08:38:40Z,6,1,1,0,"Close #4919.
",13,True,en,0
4964,1,1,0,Externals,jwheare,2016-03-31T22:45:17Z,8,0,1,0,,0,False,en,0
4963,3,1,0,Externals,preco21,2016-03-31T22:44:31Z,21,19,9,0,"- Normalize note markers
- Normalize whitespaces
- Adjust line length to `80`
",78,False,en,0
4962,1,1,0,Externals,erkyrath,2016-03-31T22:43:22Z,30,11,1,0,"...when they can be set and what they mean.

Also tidied up the grammar and clarified wording.

Fix for doc issue https://github.com/atom/electron/issues/4884 .
",161,True,en,0
4959,1,0,0,Internals,kevinsawicki,2016-03-31T22:41:33Z,4,1,1,0,"Update example to only handle `http` and `http` event urls.

Fixes #4938
",73,True,en,0
4956,2,3,0,Internals,kevinsawicki,2016-04-01T19:52:51Z,48,28,4,2,"This pull request stores the `default_app` in a `.asar` archive when built instead of in a folder.

Couple (minor) advantages to this:
- Smaller size
- Fewer files in `Electron.app`
- Changes to `default_app` are now picked up when running a local build
- Easier to remove (just one file vs. a folder)

/cc @zcbenz @zeke @jlord thoughts?
",338,True,en,0
4955,2,2,2,Internals,kevinsawicki,2016-04-01T02:14:30Z,1,6,2,1,"This looked to be a no-op since `node_integration` already defaulted to `true` and this check was setting it to `true` based on the value not equaling `""disable""`.

/cc @zcbenz 
",178,True,en,0
4947,1,1,0,Externals,preco21,2016-03-30T03:38:42Z,6,4,3,0,"- Adjust line length to `80`
- Change platform marker `*` to `_`
- Enhance a note section
",90,False,en,0
4941,1,4,0,Externals,felixrieseberg,2016-03-29T23:31:51Z,11,0,1,0,"Closes #4937
",13,True,en,0
4929,1,1,0,Externals,deepak1556,2016-03-31T10:37:28Z,2,6,1,3,"Fixes #4928 

Behavior was changed here https://codereview.chromium.org/1467603002
",83,True,en,0
4927,7,2,0,Internals,zcbenz,2016-03-27T12:35:20Z,43,57,9,0,,0,False,en,0
4926,3,1,0,Externals,preco21,2016-03-31T10:31:29Z,86,30,9,4,":memo: 
",8,True,en,0
4924,4,2,2,Externals,bengotow,2016-04-07T06:40:35Z,34,27,1,11,"Between Electron `0.30.x` and `0.37.x`, the tray icon stopped automatically inverting template images when highlighted. `NSImageView` normally uses the correct color for template images magically, but I think the addition of event handlers in the container view prevents the image view from determining highlight state.

This PR switches to drawing the image manually. The `drawRect` function decides whether to use `image` or `alternateImage`(pressed image) and then if that image is marked as a template, it fills it with the same color used for the text before drawing it.

I've verified this in a couple tests, not sure if more are needed:
- Tray with template `image`
- Tray with non-template `image`, template `pressed image`
- Tray with non-template `image`, non-template `pressed image`

Also checked that ""dark menu bar mode"" on Mac OS X still works as expected.
",872,True,en,0
4923,1,4,0,Externals,guatedude2,2016-03-28T16:36:01Z,2,2,1,1,"Updated docs in power-monitor to reflect windows only events
",61,True,en,0
4922,5,7,1,Externals,bengotow,2016-04-19T23:55:42Z,47,4,7,23,"Adds a new ""setSheetOffset"" API to the `dialog` module, which allows you to change the attachment point for sheets on Mac OS X. I put the API on the dialog module, even though Mac OS X requires that the native window hold and return the desired offset.
1. I was originally hoping to make this an argument on the actual dialog.show\* calls, but it seems the parameter set is defined in `libchromiumcontent` and I wasn't sure it would be appropriate to add there?
2.  The API could also be on the BrowserWindow (eg `BrowserWindow.setSheetOffset`). I don't have a strong preference, but I think it's more discoverable on the `dialog` module.

Test app:
[sheet-offset.zip](https://github.com/atom/electron/files/190724/sheet-offset.zip)

So far, I've tested with `frame: true` and `frame: false`:

![screen shot 2016-03-26 at 6 07 34 pm](https://cloud.githubusercontent.com/assets/1037212/14063264/7cc6b102-f37e-11e5-83d6-26538c42f27e.png)
![screen shot 2016-03-26 at 6 07 40 pm](https://cloud.githubusercontent.com/assets/1037212/14063263/7cc3d4e6-f37e-11e5-8b86-5b7f019f34cf.png)
",1078,False,en,0
4921,1,1,0,Externals,roramirez,2016-03-28T17:59:40Z,1,1,1,2,,0,False,en,0
4920,2,4,1,Externals,PierBover,2016-03-28T17:44:15Z,2,0,1,2,"I've added a little note for beginners (such as myself).
",57,True,en,0
4917,4,4,1,Externals,deepak1556,2016-04-01T04:52:29Z,91,29,10,6,"Fixes #4760 

~~Depends on https://github.com/atom/libchromiumcontent/pull/187~~

Depends on https://github.com/atom/libchromiumcontent/pull/191
",145,True,en,0
4911,1,0,0,Internals,kevinsawicki,2016-03-24T23:01:07Z,1,2,1,0,"Noticed a link wasn't rendering right on the docs page because of the newline after the `:`

http://electron.atom.io/docs/v0.37.2/api/menu/

<img width=""452"" alt=""screen shot 2016-03-24 at 3 18 19 pm"" src=""https://cloud.githubusercontent.com/assets/671378/14033077/a56689d0-f1d4-11e5-8f62-131197882914.png"">
",308,True,en,0
4910,1,1,0,Internals,kevinsawicki,2016-03-24T22:57:31Z,28,27,1,0,"Update the `source-code-directory-structure.md` doc based on the changes in #4722

Main adjustments:
- All JavaScript moved to root `lib/` folder
- `default_app/` folder moved to root
",184,True,en,0
4909,48,20,5,Internals,zeke,2016-04-01T02:13:56Z,8210,8285,115,7,"This pull request migrates all of electron's JavaScript code to [standard](http://npm.im/standard) style.

Why use `standard` on a project like electron? The `standard` README summarizes it well:

> Adopting standard style means ranking the importance of code clarity and community conventions higher than personal style. This might not make sense for 100% of projects and development cultures, however open source can be a hostile place for newbies. Setting up clear, automated contributor expectations makes a project healthier.
## The Rules
- **2 spaces** ‚Äì for indentation
- **Single quotes for strings** ‚Äì except to avoid escaping
- **No unused variables** ‚Äì this one catches _tons_ of bugs!
- **No semicolons** ‚Äì [It's](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding) [fine.](http://inimino.org/~inimino/blog/javascript_semicolons) [Really!](https://www.youtube.com/watch?v=gsfbh17Ax9I)
- **Never start a line with `(` or `[`**
  - This is the **only** gotcha with omitting semicolons ‚Äì _automatically checked for you!_
  - [More details](RULES.md#semicolons)
- **Space after keywords** `if (condition) { ... }`
- **Space after function name** `function name (arg) { ... }`
- Always use `===` instead of `==` ‚Äì but `obj == null` is allowed to check `null || undefined`.
- Always handle the node.js `err` function parameter
- Always prefix browser globals with `window` ‚Äì except `document` and `navigator` are okay
  - Prevents accidental use of poorly-named browser globals like `open`, `length`,
    `event`, and `name`.

For more details, see https://github.com/feross/standard/blob/master/RULES.md
## The Refactor

I kicked off the refactor using [standard-format](http://npm.im/standard-format) to automatically convert much of the code. This got me a long way, but the tool [has its share of issues](https://github.com/maxogden/standard-format/issues). Sometimes it chokes on files containing valid syntax, and sometimes it overlooks files that contain invalid syntax. `¬Ø\_(„ÉÑ)_/¬Ø`

After squeezing everything I could out of `standard-format`, I removed it from the dependencies because we probably won't need automated code refactoring once this refactor rolls out.

Next I installed [snazzy](http://npm.im/snazzy), a wrapper around `standard` that produces glamorous and colorful output. This was nice because it made the process of manual code cleanup much more... pleasant. As I made changes, I committed them often to ensure the test suite continued to pass.

Once I got all the code cleaned up, I uninstalled `snazzy` in favor of vanilla `standard` for a few reasons:
1. `standard` is more actively maintained than `snazzy`
2. `standard` is a more recognizable name for the dependency
3. `snazzy`'s output is a little buggy sometimes
## The Most Common Fixes

Here's a sorted list of the most common errors, generated by [standard-summary](https://github.com/zeke/standard-summary#readme):

```
5966   Extra semicolon
1615   Missing space before function parentheses
380    'it' is not defined
318    Strings must use singlequote
206    'describe' is not defined
55     Return statement should not contain assignment
52     '$' is not defined
38     Expected { after 'if' condition
26     'afterEach' is not defined
24     Expected '===' and instead saw '=='
23     Missing '()' invoking a constructor
17     Block must not be padded by blank lines
16     Unexpected trailing comma
13     Multiple spaces found before '+='
12     The '__proto__' property is deprecated
10     Expected space(s) after ""catch""
9      Multiple spaces found before '='
8      Expected '!==' and instead saw '!='
8      Gratuitous parentheses around expression
7      More than 1 blank line not allowed
7      Expected { after 'else'
6      Unexpected use of comma operator
5      Use path.join() or path.resolve() instead of + to create paths
5      Do not use 'new' for side effects
3      Infix operators must be spaced
...
```
## Globals

The test suite contains a number of global variables, mostly from mocha: `after`, `afterEach`, `before`, `beforeEach`, `Blob`, `btoa`, `describe`, `DevToolsAPI`, `Event`, `fetch`, `HTMLElement`, `HTMLObjectElement`, `InspectorFrontendHost`, `it`, `location`, `MutationObserver`, `Response`, `self`, `SharedWorker`, `URL`, `WebInspector`, `WebSocket`, `WebView`, `Worker`, `xdescribe`, `xit`.

These globals are whitelisted in a few different ways:
1. a `standard.globals` array in package.json is used for the most common repeat offenders, like mocha and jquery.
2. a `/* globals foo, bar */` comment at the top of the offending file, for less commonly used globals.
   
   For more info, see the [standard docs about globals](https://github.com/feross/standard#i-use-a-library-that-pollutes-the-global-namespace-how-do-i-prevent-variable-is-not-defined-errors)

``` json
{
  ""standard"": {
    ""globals"": [""$"", ""after"", ""afterEach"", ""before"", ""beforeEach"", ""describe"", ""it"", ""location""]
  }
}
```
## Ignoring Stuff

In package.json, there's an `ignore` array that accepts glob patterns for files and directories:

``` json
{
  ""standard"": {
    ""ignore"": [""/vendor""],
  }
}
```

To ignore a few lines of code, wrap them in these comments:

``` js
/* eslint-disable */
// wild and crazy javascript goes in here!
/* eslint-enable */
```

To ignore a single line of code, use a `// eslint-disable-line` comment:

``` js
 let obj = new (Function.prototype.bind.apply(constructor, [null].concat(args))) // eslint-disable-line
```
## CoffeeScript Legacy

Back in January, the electron codebase was [converted from Coffeescript to JavaScript](https://github.com/atom/electron/pull/4065). This automated refactor left behind a number of code artifacts, some of which have been cleaned up here.

All [implicit returns](http://blog.artillery.com/2014/06/working-with-coffeescript-common-gotchas.html) that were doing assignment have been removed (e.g. `return foo = 1`). There are undoubtedly still lots of unneeded (yet syntactically valid) implicit returns left over.

There's still plenty of leftover cruft from the coffeescript conversion, but most of it is harmless. Any time you see [`ref =`](https://github.com/atom/electron/search?l=javascript&q=ref+%3D&type=Code&utf8=%E2%9C%93) in a javascript file, it's pretty safe to assume that it's old coffee code that could use some cleanup.
## Getting and Setting Prototype

``` js
// old setter
thing.__proto__ = EventEmitter.prototype

// new setter
Object.setPrototypeOf(thing, EventEmitter.prototype)

// old getter
thing.__proto__

// new getter
Object.getPrototypeOf(thing)
```
## Invoking Constructors

It works to leave off the parens, but don't do it:

``` js
// no
new Thing

// yes
new Thing()
```
## Merging this PR

As @paulcbetts [recently observed](https://github.com/electron/electron-api-demos/pull/83#issuecomment-201023170):

> On a more important tip, for older projects, try to get as many PRs as possible merged before you make the conversion, because the rest of the PRs will get rekt by merge conflicts

As of this writing, there are **15 open pull requests**. We should decide which of those we want to land before this refactor, and which we should close or rebase post-standard.

Given the haphazard and compulsively granular commit history in this branch, I'd be happy to squash it all into a single commit if that's preferred by the team.
",7399,True,en,0
4902,1,2,0,Externals,hdwong,2016-03-31T07:02:39Z,2,2,1,6,,0,False,en,0
4901,2,1,0,Externals,wujingke,2016-03-31T02:23:01Z,31,8,7,6,,0,False,en,0
4897,17,9,3,Internals,kevinsawicki,2016-04-02T10:14:58Z,78,3,8,9,"If `nodeIntegration` is disabled on the parent window then disable it on all child windows opened via `window.open` or in `<webview>` tags.

This prevents windows without node integration from opening new windows with node integration enabled.

This seems to be an intuitive behavior for this option, if you disable node on a window/webview then all downstream windows will also have node integration disabled preventing content run in those windows from ""breaking out"" and getting access to node integration via calls to `window.open`.

Fixes #3943
Fixes #4026 

/cc @zeke :pear:
",581,True,en,0
4896,2,11,8,Externals,felixrieseberg,2016-03-31T01:38:57Z,168,0,6,7,"This PR adds an API enabling Electron to set itself as the default protocol handler for a custom protocol on both OS X and Windows. The API uses the Windows Registry and LSSetDefaultHandlerForURLScheme internally.
### `app.setAsDefaultProtocolClient(protocol)`
- `protocol` String - The name of your protocol, without `://`. If you want your app to handle `electron://` links, call this method with `electron` as the parameter.

This method sets the current executable as the default handler for a protocol (aka URI scheme). It allows you to integrate your app deeper into the operating system. Once registered, all links with `your-protocol://` will be openend with the current executable. The whole link, including protocol, will be passed to your application as a parameter.

On OS X, one can only register protocols that have been added to the app's `info.plist`, which can not be modified at runtime (and is therefore not part of the API). You can however change the file with a simple text editor or script during build time.
### `app.removeAsDefaultProtocolClient(protocol)` _Windows_
- `protocol` String - The name of your protocol, without `://`.

This method checks if the current executable as the default handler for a protocol (aka URI scheme). If so, it will remove the app as the default handler. On OS X, removing the app will automatically remove the app as the default protocol handler.

Closes #4857 || cc @paulcbetts @zcbenz @kevinsawicki 
",1460,False,en,0
4892,1,3,0,Externals,deepak1556,2016-03-31T01:22:23Z,31,7,2,7,"Fixes #4802 
Fixes #4870 

Depends on https://github.com/zcbenz/native-mate/pull/4

For more context https://github.com/atom/electron/issues/4802#issuecomment-199588369
",169,False,en,0
4887,2,2,0,Externals,sergeybekrin,2016-03-30T23:34:42Z,16,2,1,7,"Currently next code:

``` javascript
dialog.showMessageBox({
    type: 'warning',
    buttons: [ 'Cancel' ],
    message: 'Foo',
    detail: {}
});
```

Will produce this error, which does not make much sense:

```
Uncaught Error: Could not call remote function ``. Check that the function signature is correct. Underlying error: Error processing argument at index 7, conversion failure from ...
```

This PR adds type checks and better error reporting.
",454,True,en,0
4885,1,3,0,Externals,ArekSredzki,2016-03-31T02:07:14Z,2,0,1,8,"By request from a couple users, I've added a link to the electron-release-server, that makes using the auto-updater much easier.
",129,True,en,0
4883,5,6,0,Internals,kevinsawicki,2016-03-25T03:06:14Z,20,7,2,2,"This adds a `-i/--interactive` flag to the default app that starts a repl for the main process.

Can be used when developing locally via `npm run repl`.

``` sh
> npm run repl

> electron@0.37.2 repl /Users/kevin/github/electron
> python ./script/start.py --interactive

> 1 + 1
2
> process.versions.electron
'0.37.2'
> process.versions.node
'5.1.1'
> const {BrowserWindow} = require('electron')
undefined
> BrowserWindow.getAllWindows()
[]
> .exit

```

/cc @zeke who was asking if this was possible in #4872 
",511,True,en,0
4872,4,1,3,Internals,kevinsawicki,2016-03-22T20:57:42Z,55,66,8,1,"Use destructuring assignment available in Chrome 49 in the places it was previously being when CoffeeScript was used.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

Refs #4065
",232,True,en,0
4871,1,0,0,Internals,kevinsawicki,2016-03-21T18:12:36Z,2,2,1,0,"Adds two more camel case options to the ints array.

This is a minor follow up to #4829 

Thanks @kfranqueiro for reviewing and noticing these were missing :+1: 
",162,True,en,0
4869,1,4,0,Internals,zcbenz,2016-03-27T01:35:28Z,9,9,2,5,"@mitchhentges Can you try if this fixes #4733 for you? I can't reproduce the original issue so I'm not able to try it myself.
",126,True,en,0
4864,1,2,0,Internals,miniak,2016-03-21T20:40:50Z,12,4,1,1,"Some Menu methods are instance methods, also items is a property.
",66,True,en,0
4861,2,1,5,Externals,OctoHuman,2016-03-30T19:40:41Z,4,1,1,10,"Stop `alert()` from throwing an error when passing no parameters or when passing null or undefined as the message. For example if you run `alert()` in a browser it will display a blank dialog box, but in Electron it will throw a error because there is no `.toString()` method on `undefined`. Changing `alert()` like this will also make it more consistent with the major browsers implementations.
",396,True,en,0
4860,1,1,0,Externals,chadluo,2016-03-21T04:30:34Z,1,1,1,1,"Fix the link to zh-CN OS X build instruction pages. Original link mixed 'osx' with 'mac'.
",90,True,en,0
4854,4,1,0,Externals,preco21,2016-03-27T05:47:50Z,51,18,10,7,,0,False,en,0
4853,1,1,0,Externals,preco21,2016-03-21T04:38:24Z,1,1,1,1,"- Fix broken link
",18,True,nl,0
4851,1,2,2,Externals,k0kubun,2016-03-22T16:35:49Z,6,0,1,3,"I guess it was implemented in https://github.com/atom/electron/commit/5670ee7693dc4f3cb6bb95131752852693b71eec.
",112,True,en,0
4846,2,1,0,Internals,kevinsawicki,2016-03-21T12:03:28Z,89,144,14,2,"Migrate old CoffeeScript usage of `args...` to the new ES6 supported `...args`

Refs #4065 
",92,True,en,0
4845,1,3,0,Internals,kevinsawicki,2016-03-21T12:02:03Z,1,0,1,2,"For people using [nodenv](https://github.com/nodenv/nodenv) this pins the local node version to be the node version that Electron is based off of for consistency.
",163,True,en,0
4843,2,5,1,Externals,jwheare,2016-03-31T01:37:27Z,33,0,7,12,"This adds a new `swipe` event to `browser-window` for 3-finger trackpad swipes on OS X.
#4181 added support for 2-finger scroll events on OS X, which allow apps to handle some forms of back/forward navigation. However, OS X also exposes a `swipeWithEvent` method on `NSResponder` for 3-finger swipes, and it's possible to set these as the ""Swipe between pages"" gesture. These swipes are only directional, with no velocity, so are easily exposed as one-off events. They will only fire if the option is set in System Preferences to **Swipe with two or three fingers** or **Swipe with three fingers**

![image](https://cloud.githubusercontent.com/assets/49224/13882592/013f5680-ed1e-11e5-968d-a03eeee779fc.png)
",708,False,en,0
4840,4,4,1,Internals,zeke,2016-03-21T12:02:44Z,19,4,2,3,"This uses `hasOwnProperty` to ignore set menu item fields.

I :pear:'d on this with @kevinsawicki and @jlord!

Fixes #4832
",123,True,en,0
4837,1,0,0,Internals,zcbenz,2016-03-17T13:54:52Z,7,1,1,0,"In case there are people wanting to implement a server themselves.
",67,True,en,0
4836,2,0,0,Internals,zcbenz,2016-03-17T13:21:21Z,15,16,2,0,,0,False,en,0
4831,5,3,2,Internals,zeke,2016-03-21T11:57:26Z,8,9,3,4,"Just making my way through the documentation, cleaning up typos and stuff.

üìö
",81,True,en,0
4829,13,3,10,Internals,kevinsawicki,2016-03-18T16:36:49Z,108,8,7,1,"This pull request reports deprecations for `BrowserWindow` options that use hyphens instead of camel case and also options that should be set on `options.webPreferences` instead of directly on `options.

Read http://blog.atom.io/2015/11/17/electron-api-changes.html for more details about the `BrowserWindow` options changes in general.
### New Messages
- `min-width is deprecated. Use minWidth instead.`
- `node-integration is deprecated. Use nodeIntegration instead.`
- `options.zoomFactor is deprecated. Use options.webPreferences.zoomFactor instead.`

/cc @zcbenz thanks for the tip on how to pass a JavaScript function to C++ and call it there, it really helped :+1:

/cc @jlord @zeke :eyes:
",697,True,en,0
4821,5,1,0,Externals,scycbx,2016-03-17T13:55:01Z,617,0,9,1,,0,False,en,0
4812,1,1,0,Externals,thanpolas,2016-03-17T13:24:10Z,2,2,1,1,"Can someone also explain to me what to do with the .dmp file? From a quick google search it looks like it's a windows format file and cannot be viewed on osx?
",159,True,en,0
4805,1,3,0,Externals,paulcbetts,2016-03-17T13:21:29Z,29,0,1,2,"We shouldn't ask users to figure out this piece of Windows Arcana when they're using Squirrel, let's just do it automatically.
## TODO:
- [x] Make sure this works
",163,False,en,0
4804,1,1,0,Externals,deepak1556,2016-03-15T12:09:54Z,87,43,5,0,"Fixes #4798 

Depends on https://github.com/atom/brightray/pull/204
",68,True,en,0
4803,11,1,0,Externals,scycbx,2016-03-15T12:21:49Z,2939,0,15,0,,0,False,en,0
4793,2,0,0,Internals,zcbenz,2016-03-14T08:21:49Z,31,3,1,0,"Fix #4634.
",11,True,en,0
4792,1,0,0,Internals,zcbenz,2016-03-14T05:34:24Z,8,8,1,0,"This is to work around the bug that V8 would be waiting for background tasks to finish on exit, while somehow it waits forever in Electron.

On the other handle there is actually no need to gracefully shutdown V8 on exit in the main process, we already ensured all necessary resources get cleaned up, and it would make quitting faster.

Close #4767.
",350,True,en,0
4791,13,1,10,Externals,paulcbetts,2016-03-17T12:49:46Z,41,0,4,3,"This PR adds a new `asNativeRepresentation` method to `NativeImage` which allows you to get an underlying image object that you can pass to native APIs. Right now only OS X is implemented but I've set it up so that we can add other operating systems later (others aren't so easy because Windows has more than one image representation format, etc etc)
",351,True,en,0
4788,1,1,0,Externals,deepak1556,2016-03-14T06:03:38Z,14,2,4,0,"Fixes #4782 
",13,True,en,0
4787,1,2,0,Externals,deepak1556,2016-03-14T01:40:59Z,8,17,2,0,"Fixes #4786 
",13,True,en,0
4777,2,3,4,Externals,deepak1556,2016-03-15T12:12:04Z,5,73,9,2,"Fixes https://github.com/atom/electron/issues/1397

Based on this chromium [issue](https://bugs.chromium.org/p/chromium/issues/detail?id=589509#c4) , setting non opaque values to `content::RenderWidgetHostView::SetBackgroundColor` results in default UA dependent background color. This patch overrides the behavior, so setting background color to webview tag will now be respected. Also have removed the undocumented `allowtransparency` attribute. 

**Note:** Default background color when not specified for webview will now be transparent, instead of white in Electron, with this patch.
",588,True,en,0
4775,2,0,0,Internals,zcbenz,2016-03-13T02:38:39Z,10,10,6,0,"Relies on https://github.com/atom/brightray/commit/d6bafa3ac1b56b24e8944ebbc87ed51ad417a21d.

From Chrome 49 the `PowerDeterminePlatformRoleEx` API is started to be used, which is not available in Windows 7, so we need to make sure that API is only loaded on need, instead of on startup.

Close #4770.
",302,True,en,0
4774,1,1,0,Externals,twolfson,2016-03-13T13:22:48Z,37,2,3,0,"I'm attempting to get Karma running with Electron. I have been trying to work around Electron's lack of `window.location` support for child windows but realized we could support it easily (Karma uses this for restarting test runs).

In this PR:
- Updated `guest-window-manager` to support synchronous IPC requests
- Added `window.location` getter/setter properties
- Added tests

**Notes:**

As I was opening this PR, I realized that the getter property isn't as exact as it should be. We are missing a few things:
- Same-origin policy restriction; in a normal browser, only windows on the same origin can see each others locations. Although, a parent can set a child's URL to whatever it wants
- Object with lots of keys (e.g. `href`, `hostname`). If this is too complex, then we can reduce the PR to a `location` setter
  - I believe we should be able to simply use `url.parse` but want to verify
",899,True,en,0
4773,1,1,0,Externals,preco21,2016-03-13T13:02:45Z,4,0,1,0,"- Small changes
",16,True,en,0
4769,1,3,0,Externals,bbondy,2016-03-13T00:39:43Z,1,1,1,0,"I had to do this because we ran into the same problem on brave/electron
Fixed https://github.com/atom/electron/issues/4765 for us.
",131,False,en,0
4763,1,4,0,Externals,HR,2016-03-13T11:43:53Z,3,3,1,1,,0,False,en,0
4761,2,0,0,Internals,kevinsawicki,2016-03-11T19:25:49Z,2,1,1,0,"The build seems pretty stable and consistent so I added a badge for it after the Travis badge
",94,True,en,0
4757,1,0,0,Internals,zcbenz,2016-03-12T00:15:29Z,0,25,1,0,"Since we are now using sysroot for building by default, there is no need to copy system libraries anymore, we can assume the sysroot images will solve the library linking problems for us.
",188,True,en,0
4752,6,1,0,Externals,scycbx,2016-03-11T10:36:41Z,1734,0,5,0,,0,False,en,0
4751,1,5,0,Externals,maxbeatty,2016-03-11T10:15:51Z,17,0,4,0,"Attempt to fix #4724 based on @zcbenz's [comment](https://github.com/atom/electron/issues/4724#issuecomment-195143681) (admittedly without knowing much of anything about C++ :grimacing:)
",187,True,en,0
4744,5,0,0,Internals,kevinsawicki,2016-03-11T17:36:02Z,18,37,3,0,"There were some arrays being collected and returned automatically by CoffeeScript when a function ended with a `for` loop.

Several of these didn't actually need to be returned and this pull request removes those instances.
",224,True,en,0
4743,6,1,0,Internals,kevinsawicki,2016-03-13T04:17:30Z,205,248,11,2,"Use JavaScript [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) to clean up old CoffeeScript `this` wrappers.

Also cleaned up a few old returns that weren't intentional.
### Before

``` js
this.webContents.on('move', (function(_this) {
  return function(event, size) {
    return _this.setBounds(size);
  };
})(this));
```
### After

``` js
this.webContents.on('move', (event, size) => {
  this.setBounds(size);
});
```

Refs #4065 
",496,True,en,0
4736,1,1,0,Externals,preco21,2016-03-10T07:55:10Z,2,1,1,0,,0,False,en,0
4729,4,2,0,Externals,deepak1556,2016-03-10T12:47:04Z,165,29,7,0,"Fixes #4626 

Depends on
https://github.com/atom/debian-sysroot-image-creator/pull/1
https://github.com/atom/brightray/pull/202

Have targeted against chrome49 so can be tested with the upgrade, have locally verified for x64 target. Will update debian image revision once corresponding PR gets merged. Here is a release to test https://github.com/deepak1556/debian-sysroot-image-creator/releases/tag/v0.3.6
",407,True,en,0
4725,1,2,3,Externals,danhp,2016-03-10T07:29:33Z,12,8,1,1,"`app.focus()` was missing from the docs.
",41,True,en,0
4723,7,1,0,Externals,wujingke,2016-03-09T12:45:40Z,369,0,5,0,,0,False,en,0
4722,9,2,0,Internals,kevinsawicki,2016-03-10T08:05:34Z,74,75,66,1,"Moved all JavaScript out of `atom/` subfolders and into `lib/` with folders for browser process code, renderer process code, and common code.

Also moves the `default_app/` folder to the root of the repository.

I think this makes it easier to navigate and find things but please weigh in if you don't think this change is worth it.
### Before
- `atom/browser/api/lib/auto-updater.js`
- `atom/browser/lib/init.js`
### After
- `lib/browser/api/auto-updater.js`
- `lib/browser/init.js`

/cc @jlord @zcbenz 

Closes #4525
",519,True,en,0
4715,1,2,0,Externals,dongjoon-hyun,2016-03-08T10:45:05Z,10,10,5,0,"This PR fixes some typos in comments.
",38,True,en,0
4714,37,5,0,Internals,zcbenz,2016-03-11T12:39:52Z,641,584,145,3,"Debug build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Release build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Tests passing on:
- [x] OS X
- [x] Linux
- [x] Windows

Features check list:
- [x] devtools
- [ ] Pepper Flash
- [ ] Widevine
- [ ] printing

Merge:
- [x] https://github.com/atom/libchromiumcontent/pull/175
- [x] https://github.com/atom/brightray/pull/200
",384,False,en,0
4713,2,1,2,Externals,mnquintana,2016-03-08T00:40:23Z,3,0,1,0,"Unless you were already familiar with them from building native Cocoa apps, it wasn't clear what an action was in the context of OS X. This adds a link to Apple's documentation, which should hopefully make this concept more accessible.
",236,True,en,0
4712,4,1,0,Externals,mnquintana,2016-03-08T10:44:26Z,5,1,2,0,"So it's entirely possible that I'm doing this Entirely Wrong, buuut I noticed that (the [apparently deprecated](https://github.com/atom/electron/pull/3554)) `selector`s, used only on OS X, don't map completely to their replacements in `role`. Specifically, `pasteAndMatchStyle` and `delete` don't seem to map to anything. There may be other mappings we're missing here too, which I'd be happy to add. :smile: 
",410,True,en,0
4711,2,0,0,Internals,kevinsawicki,2016-03-08T00:10:50Z,18,0,1,0,"Adding specs for #4610 although they currently pass and after talking with @paulcbetts we are going to close that issue as things appear to be currently working. :green_apple: 
",177,True,en,0
4706,4,1,0,Internals,kevinsawicki,2016-03-07T21:59:07Z,17,6,1,0,"Update the `CoffeeScript` section to be `JavaScript` instead and mention es6/es2015 things that should be used going forward with links to MDN.

Closes #4692
",158,True,en,0
4700,3,10,1,Externals,ArekSredzki,2016-03-11T01:19:06Z,173,58,13,3,"Fixes #3788 & #4669 
",21,True,en,0
4695,1,2,0,Externals,dongjoon-hyun,2016-03-07T01:31:49Z,2,2,1,0,,0,False,en,0
4694,2,0,0,Internals,zcbenz,2016-03-06T06:31:59Z,141,142,6,0,"Close #4663.
",13,True,en,0
4686,2,0,0,Internals,zcbenz,2016-03-05T13:20:43Z,18,31,3,0,,0,False,en,0
4683,1,0,0,Internals,zcbenz,2016-03-05T10:47:28Z,9,8,1,0,"Close #4648.
",13,True,en,0
4682,1,1,0,Externals,danhp,2016-03-06T10:23:46Z,10,1,1,1,"Fixes #4483 
Implementation taken from: http://trac.wxwidgets.org/ticket/11734

I don't have a setup Linux setup so I didn't look into #3764
",141,False,en,0
4680,8,2,0,Internals,kevinsawicki,2016-03-08T10:46:40Z,24,16,2,3,"Respect initial `resizable` BrowserWindow option on Linux.

Closes #4544
",73,True,en,0
4678,5,1,0,Internals,kevinsawicki,2016-03-05T02:56:56Z,16,3,4,0,"Set `writable` and `configurable` to `true` for the descriptor used for remote member functions.

This seems to restore the behavior pre #4568 where you could re-assign and remove remote member functions such as `require('electron').remote.dialog.showErrorBox`

/cc @zcbenz 

Closes #4636 
",290,True,en,0
4675,2,1,0,Internals,kevinsawicki,2016-03-04T22:42:21Z,11,3,1,0,"Seeing this error on Linux CI:

```
not ok 247 chromium feature navigator.mediaDevices can return labels of enumerated devices
  Error: timeout of 2000ms exceeded
```

Tweaking the spec to always call the `done` callback to get more details on the error and prevent the timeout message from showing on failures.

Refs https://github.com/atom/electron/pull/4616
",361,True,en,0
4674,12,3,0,Internals,kevinsawicki,2016-03-08T09:59:56Z,59,4,2,3,"Use `MakeAbsoluteFilePath` from `base/files/file_util.h` to make image paths absolute so paths with segments like `..` don't fail.

The docs say that `MakeAbsoluteFilePath` can do i/o and it appears to call `realpath` on posix systems so there is some overhead here. But I couldn't find a helper method on `FilePath` that handled normalizing things like this and `MakeAbsoluteFilePath` seemed used lots in Chromium.

/cc @zcbenz 

Closes #4574
",444,True,en,0
4670,1,3,0,Internals,kevinsawicki,2016-03-06T07:17:38Z,5,15,1,2,"An attempt to fix #4577 

Not sure if there is a better way but this worked for me and simplified the implementation and worked for both directions (forward and reversed).

/cc @zcbenz @joshaber @jlord 
",203,True,en,0
4666,1,1,0,Externals,SLiNv,2016-03-06T06:36:05Z,149,83,8,2,"- Add Pepper Flash plugin documentation
- Use and  match the same documentaion style for other CN docs.
- Fix some typos and grammar.
",134,False,en,0
4665,1,2,0,Externals,christoth,2016-03-06T06:36:21Z,2,3,1,2,"Fix for #4664, using flexbox layout within webview. This approach for the browerplugin layout will work when the containing webview uses both flexbox and traditional (display: block) layout.
",191,True,en,0
4656,1,1,0,Externals,princejwesley,2016-03-05T12:13:59Z,1,1,1,2,"Protect platform specific API by adding predicate
",50,True,en,0
4646,5,8,7,Externals,danhp,2016-03-07T00:53:03Z,44,0,8,5,"Implements #4300 
",18,True,en,0
4635,1,1,0,Externals,akameco,2016-03-03T12:00:46Z,1,0,1,2,,0,False,en,0
4630,1,1,0,Externals,preco21,2016-03-03T02:37:48Z,27,5,1,3,"- Adjust 80 chars per line
- Line feed after header
",52,False,en,1
4629,3,1,0,Externals,rxon,2016-03-03T02:32:40Z,55,0,1,3,"Many docs are translated into Japanese but didn't add to readme(index) so I add.
",81,True,en,0
4623,1,2,0,Externals,parro-it,2016-02-28T02:41:27Z,0,4,1,0,,0,False,en,0
4616,1,1,0,Externals,deepak1556,2016-02-26T14:07:35Z,25,0,3,0,"Fixes #4613 

Regression from https://github.com/atom/electron/pull/4223 .
",75,True,en,0
4609,5,3,0,Externals,brenca,2016-02-26T15:21:42Z,34,32,3,0,"So we've been using the `Begin/EndFrameSubscription` content API to capture the page, which gives us `VideoFrame` instances, and that's pretty cool, but [chromium only supports the  `media::PIXEL_FORMAT_YV12` format](https://code.google.com/p/chromium/codesearch/#chromium/src/content/public/browser/render_widget_host_view_frame_subscriber.h&rcl=1456417974&l=60), which has some drawbacks to it. Right now, we convert these frames to 8 bit ARGB format, and we put that in a `Node::Buffer`, and send that back to the js callback. The problem with this is that chromium internally stores the ""image"" of a site in the backing store in ARGB, and we get a converted image ([relevant code](https://code.google.com/p/chromium/codesearch/#chromium/src/content/browser/compositor/delegated_frame_host.cc&l=622)) that we need to process to get an ARGB frame that we can use. This means that the image quality will be worse, and we will be spending time converting to formats that we don't really need. Also, the YV12 format lacks an alpha channel, and we can't restore that when converting back to ARGB.

If we change our code a bit and we only listen to the `ShouldCaptureFrame` calls, and use them as a ""frame is ready"" message, we can use `CopyFromBackingStore` to start a copy of the frame ourselves, and this way we can get an ARGB buffer with all the information that we need. This method uses the same functions (or similar) to get the frame as the implementation of the frame subscriber would. (relevant code parts: [`CopyFromBackingStore`](https://code.google.com/p/chromium/codesearch/#chromium/src/content/browser/renderer_host/render_widget_host_impl.cc&rcl=1456432083&l=779) => [`CopyFromCompositingSurface`](https://code.google.com/p/chromium/codesearch/#chromium/src/content/browser/compositor/delegated_frame_host.cc&rcl=1456403485&l=136), [`AttemptFrameSubscriberCapture`](https://code.google.com/p/chromium/codesearch/#chromium/src/content/browser/compositor/delegated_frame_host.cc&rcl=1456417974&l=336) both uses the `RequestCopyOfOutput`, 'tho the frame subscriber actually tries to be faster by accessing the `Surface` directly, which we could do too, but that complicates the code too much)

This should speed up the frame capture process, and we'll get alpha channel data and clean, non-JPEG edges.
",2314,True,en,0
4608,1,4,0,Internals,zcbenz,2016-02-26T01:51:13Z,1,1,1,0,"Close #4513.
",13,True,en,0
4607,1,1,0,Externals,robertlyall,2016-02-26T12:13:40Z,3,3,3,0,"`electron.app` is only available in the main process.
",54,True,en,0
4596,1,3,2,Externals,felixrieseberg,2016-02-26T13:32:03Z,39,0,2,1,"People keep stumbling over the lack of a display driver in CI systems, so I thought it'd be useful to have a small doc that explains the simple steps one has to take to enable testing on Travis/Jenkins/etc.

Ref #228
",217,True,en,1
4595,1,2,0,Externals,dongjoon-hyun,2016-02-25T13:18:57Z,2,2,1,0,,0,False,en,0
4592,1,1,0,Internals,miniak,2016-02-25T13:11:44Z,3,1,1,1,"The net::URLRequest::url() method calls vector<GURL>::back(), which is undefined when the url_chain is empty

This fixes bug #4591
",131,True,en,0
4588,2,2,0,Internals,zcbenz,2016-02-24T05:48:33Z,49,125,8,0,"It currently has two crashes:
- Crash on exit on Linux;
- Crash when actually using it for multi-session on other platforms.

/cc @deepak1556 
",143,False,en,0
4581,1,0,0,Internals,zcbenz,2016-02-23T12:41:50Z,27,0,3,0,"Fix #4012 .
",12,True,en,0
4580,1,1,0,Externals,kanatapple,2016-02-23T07:11:07Z,1,1,1,0,"update jp doc ipc-renderer.md
",30,True,da,0
4579,1,1,0,Externals,jin5354,2016-02-23T06:08:47Z,26,5,1,0,"update zh-CN doc debugging-main-process.md to be up-to-date with
English ver.
",78,False,en,0
4570,8,1,2,Internals,zcbenz,2016-02-22T08:10:55Z,78,192,5,0,"Removes a bunch of unused code.
",32,True,en,0
4568,2,0,0,Internals,zcbenz,2016-02-22T05:04:34Z,188,98,4,0,"Instead of simply listing all enumerable methods of an object, `remote` object now just adds getters for own properties, but also carries the original prototype chain.

Fix #4066.
",180,True,en,0
4566,1,1,0,Externals,yamatoya,2016-02-23T05:39:34Z,57,8,5,1,,0,False,en,0
4564,1,2,0,Externals,dongjoon-hyun,2016-02-21T13:53:41Z,3,3,1,0,,0,False,en,0
4560,5,3,0,Externals,magicae,2016-02-24T05:06:17Z,437,214,5,3,"Based on commit 45739ce434ec3c3eb190d35d3948b702b54706cd
- README.md
#### faq
- electron-faq.md
#### api
- accelerator.md
- app.md
- auto-updater.md
",149,False,en,0
4558,1,1,0,Externals,cesine,2016-02-21T11:04:06Z,1,1,1,1,"to get the deps badge green again :)
",37,True,en,0
4551,2,4,2,Externals,deepak1556,2016-02-24T04:03:37Z,125,49,8,4,"Protocol module currently doesnt respect partitions. This just adds a `fromPartition` method similar to `session`, internally `protocol` is now wired as a property of `session`.
",178,True,en,0
4548,2,0,0,Internals,zcbenz,2016-02-19T06:37:09Z,28,5,3,0,"Refs https://github.com/atom/libchromiumcontent/issues/174.
",60,True,en,0
4547,1,1,0,Externals,Rafaelgfirmino,2016-02-19T19:22:16Z,67,0,1,0,,0,False,en,0
4543,1,1,0,Externals,baconbrad,2016-02-19T19:21:10Z,1,1,1,0,"Technically it isn't wrong if you assign `require('electron').app;` to session instead of app. But it could be confusing for those that don't catch it especially since all the other examples use app.
",200,True,en,0
4538,1,0,0,Internals,zcbenz,2016-02-18T10:57:04Z,19,6,1,0,"Usually cmd+~ should be handled by OS X completely, but sometimes it would just pass the event to us, when this happens, we should simulate the behavior of cmd+~.

Fix #4512.
",175,True,en,0
4534,1,1,0,Externals,apoco,2016-02-18T12:14:08Z,1,1,1,0,"Added link to documentation about `Menu` objects
",49,True,en,0
4532,1,0,0,Internals,zcbenz,2016-02-18T05:01:18Z,1,1,1,0,"Refs https://github.com/atom/libchromiumcontent/pull/180.
",58,True,en,0
4531,1,0,0,Internals,zcbenz,2016-02-18T04:12:32Z,4,2,2,0,,0,False,en,0
4530,2,0,0,Internals,zcbenz,2016-02-18T03:13:57Z,5,2,3,0,"Refs:
https://github.com/atom/libchromiumcontent/pull/181
https://github.com/atom/libchromiumcontent/issues/174
",112,False,en,0
4528,4,12,2,Externals,50Wliu,2016-02-19T04:49:42Z,2,0,1,1,"Initial draft for the new issue template.

/cc @lee-dohm: Had to remove a lot of the Atom-specific stuff...doesn't look nearly as spectacular as the Atom one :P
",161,True,en,0
4524,10,3,0,Internals,kevinsawicki,2016-02-18T18:47:45Z,61,41,1,1,"Tweak the default app to look more like http://electron.atom.io/

Also some minor copy edits as well.
### Before

<img width=""801"" alt=""screen shot 2016-02-17 at 10 21 56 am"" src=""https://cloud.githubusercontent.com/assets/671378/13119928/503327d8-d560-11e5-8c05-152a34ec0123.png"">
### After

<img width=""801"" alt=""screen shot 2016-02-17 at 10 20 36 am"" src=""https://cloud.githubusercontent.com/assets/671378/13119936/56c8a186-d560-11e5-8a9c-d3c45f8fa9bf.png"">

/cc @jlord @simurai 
",483,True,en,0
4523,6,1,0,Internals,kevinsawicki,2016-02-18T03:15:37Z,1394,1391,17,0,"- Remove extraneous `return` statements
- Separate describes, its, before, afters with newlines
- Use `const` for requires
- Cleanup `var` definitions

Refs #4065 
",164,False,en,0
4522,4,12,12,Externals,deepak1556,2016-02-26T13:17:47Z,137,16,10,8,"Fixes #4511 
",13,True,en,0
4518,1,3,3,Externals,deepak1556,2016-02-25T04:26:53Z,46,5,7,7,"Fixes #4481 
",13,True,en,0
4517,1,3,0,Externals,deepak1556,2016-02-21T09:54:48Z,15,0,2,3,"Fixes #4375 
",13,True,en,0
4515,3,5,4,Externals,deepak1556,2016-02-26T08:16:33Z,20,15,3,8,"Fixes #4490 
",13,True,en,0
4510,1,0,0,Internals,zcbenz,2016-02-17T04:07:51Z,5,0,1,0,,0,False,en,0
4509,2,3,0,Externals,caibirdme,2016-02-17T11:38:57Z,29,0,1,0,"tanslate `docs/api/file-object.md` into Chinese
",48,True,it,0
4508,8,1,2,Internals,kevinsawicki,2016-02-18T10:40:22Z,33,9,7,1,"Adds an optional `options` object to `shell.openExternal` that when the `activate` key is set to `false` will not focus the opened application on Mac OS X.

/cc @bengotow 

Refs #4344 
Closes #3224
",198,True,en,0
4507,2,3,0,Internals,maxbrunsfeld,2016-02-17T02:51:30Z,58,1,5,0,"Refs https://github.com/atom/atom/pull/9627

In Atom, we'd like to show electron deprecations in the [Deprecation Cop](https://github.com/atom/deprecation-cop) view. This PR adds the following APIs:

``` js
const deprecations = require('electron').deprecations;
deprecations.setHandler(myHandler);
assert(deprecations.getHandler() === myHandler);
```

I noticed that there was already a non-enumerable `deprecate` module, used internally by the other modules. I added `deprecations` as a separate module in order to keep the private and internal APIs separate.

/cc @zcbenz @jlord @kevinsawicki
",595,True,en,0
4503,1,1,0,Externals,x87,2016-02-16T20:52:37Z,1,1,1,0,,0,False,en,0
4501,1,1,0,Externals,dmnlk,2016-02-16T18:45:30Z,1,0,1,0,,0,False,en,0
4498,1,1,0,Externals,destan,2016-02-16T15:08:34Z,6,0,1,0,"On Linux in order for changes made to individual `MenuItem`s to take effect, you have to call `setContextMenu` again

Regarding https://github.com/atom/electron/issues/1473
",173,True,en,0
4497,4,0,0,Internals,zcbenz,2016-02-16T04:20:00Z,153,159,8,0,,0,False,en,0
4496,1,1,0,Externals,cesine,2016-02-16T14:18:51Z,28,27,16,0,"The dependancies badge looks out of date on the main page, only `eslint` was out of date so I took a look to see if I could update it.

<img width=""1004"" alt=""screen shot 2016-02-15 at 10 32 45 pm"" src=""https://cloud.githubusercontent.com/assets/196199/13066458/1439e23a-d434-11e5-85cd-8d6941c3120b.png"">

<img width=""965"" alt=""screen shot 2016-02-15 at 9 11 47 pm"" src=""https://cloud.githubusercontent.com/assets/196199/13066415/9c905e58-d433-11e5-944e-930749671471.png"">

 - [x] Verified migration doc (nothing to be done) http://eslint.org/docs/user-guide/migrating-to-2.0.0
 - [x] fixed the eslint errors
",617,True,en,0
4495,3,0,0,Internals,zcbenz,2016-02-16T03:13:11Z,27,63,5,0,,0,False,en,0
4494,1,1,0,Externals,pra85,2016-02-16T04:28:09Z,1,1,1,0,"Remove extra `will`
",20,True,es,0
4482,1,2,0,Externals,lukeapage,2016-02-16T12:22:31Z,5,5,3,1,"Found & corrected with https://github.com/lukeapage/node-markdown-spellcheck
",77,True,en,0
4480,1,1,0,Externals,apoco,2016-02-16T12:17:18Z,1,2,1,1,"Removed callback return value from the sample code for makeSingleInstance because it appears to not be used for anything.
",122,True,en,0
4471,5,1,0,Externals,rsezille,2016-02-16T08:22:55Z,322,0,4,2,"Here is a starting point for the french translation.
I'll try to do the remaining files in the following weeks.
",112,False,en,0
4466,1,1,0,Externals,yuya-oc,2016-02-16T08:16:23Z,28,0,1,2,"Icon overlays is missing in desktop environment integration.
",61,True,en,0
4455,1,1,0,Externals,preco21,2016-02-12T17:38:27Z,0,1,1,0,"- Remove unnecessary line feeds on `clipboard.md`.
",51,True,en,0
4453,1,2,0,Externals,lukeapage,2016-02-16T03:08:35Z,2,2,2,3,"Fixes #4400 
",13,True,en,0
4451,5,5,0,Externals,brenca,2016-02-16T02:20:44Z,62,13,3,4,"I restructured `FrameSubscriber` a bit to only give Chromium a nested class instead of the whole, so when the nested class gets deleted by a `endFrameSubscription()` call, we can still handle the callbacks properly (`OnFrameDelivered` callbacks are sometimes called after the subscription has already ended), and if we don't expect any more callbacks (we count how many `ShouldCaptureFrame` and `OnFrameDelivered` calls we had), we can delete the actual `FrameSubscriber` (the last `OnFrameDelivered` calls the delete or if we're not waiting for callbacks by the time the nested class gets destroyed, the destructor of that calls the delete).
",643,True,en,0
4450,1,2,0,Externals,HR,2016-02-12T01:00:05Z,1,1,1,0,"The relative path for Electron's binary is Contents/MacOS/Electron
",67,True,en,0
4449,1,1,0,Externals,deepak1556,2016-02-15T15:12:58Z,1,1,1,3,"A regression introduced in https://github.com/atom/electron/pull/4223, when media access permission is allowed previously it didnt iterate over device for (DESKTOP|TAB)CAPTURE.  This fixes it.
",193,True,en,0
4447,3,11,0,Externals,KevinMartin,2016-02-17T02:42:29Z,6,0,1,5,"Advantages:
- Automates `app.commandLine.appendSwitch(...)` calls using `package.json`.
- Allows Electron to be packaged so that it can be opened cross-platform with command line switches without resorting to PLIST/Manifest ""hacks"".

How to use:

``` json
{
  ""name"": ""your-app"",
  ""version"": ""0.1.0"",
  ""main"": ""main.js"",
  ""commandLineSwitches"": [
    ""ignore-certificate-errors"", [""js-flags"", ""--expose_gc""]
  ]
}
```
",421,False,en,0
4442,1,1,2,Externals,deepak1556,2016-02-15T13:15:20Z,21,4,2,4,"Fixes #4342 
",13,True,en,0
4439,3,1,0,Internals,kevinsawicki,2016-02-11T19:29:46Z,2,0,1,1,"Adds a `bootstrap` and `build` script.

I was getting tired of typing `./script/build.py -c D` on the command line often.

/cc @jlord :eyes: 
",142,True,en,0
4430,6,1,2,Internals,kevinsawicki,2016-02-11T21:28:08Z,157,102,2,2,"Throw an explicit error instead about the channel being required.

This pull request also formats the `BrowserWindow` spec from the CoffeeScript migration.

Closes #4427 
",171,True,en,0
4423,7,17,4,Externals,brenca,2016-03-05T12:31:27Z,38,25,6,25,"This won't cancel the `enter-html-full-screen` event, so a youtube video will still go fullscreen, but will be contained inside the `BrowserWindow`.
",149,True,en,0
4421,1,1,0,Internals,kevinsawicki,2016-02-15T09:48:43Z,12,3,1,6,"Use the icon when specified on the created `NSAlert`.

I tried to follow the same pattern as the [brightray notifications](https://github.com/atom/brightray/blob/2a5cd7178b641de91ca6eb0bca826fea588f923a/browser/mac/cocoa_notification.mm#L40-L45) but would love any feedback on any memory leak issues with this approach.

<img width=""435"" alt=""screen shot 2016-02-08 at 3 24 51 pm"" src=""https://cloud.githubusercontent.com/assets/671378/12902779/2038885a-ce78-11e5-8e73-fb699dec2017.png"">

Closes #4073
",502,True,en,0
4406,1,1,0,Externals,adam-lynch,2016-02-07T21:40:34Z,1,1,1,0,"Related: #4402
",15,True,en,0
4398,1,1,0,Externals,LartSimZ,2016-02-15T08:30:06Z,1,1,1,7,"Using `node::Buffer::Copy()` instead of `node::Buffer::New()` to copy the handle's bytes to the buffer. 
",105,True,en,0
4392,2,4,1,Externals,madarche,2016-02-16T03:18:20Z,38,0,2,9,"This has been discussed in #403 and in #1095.
",46,True,en,0
4382,9,2,1,Internals,kevinsawicki,2016-02-11T21:34:01Z,201,151,2,6,"Previously if the WebView API was used before the `dom-ready` event fires then a cryptic error would be thrown with something like `Cannot read property 'stop' of undefined`.

This pull requests check for the `webContents` to be available before invoking its API and throws a custom error mentioning `dom-ready` when invoked incorrectly.

This pull request also cleans up the WebView spec post-CoffeeScript conversion.

Refs #4348
",431,True,en,0
4378,1,1,0,Externals,markisadesignerd,2016-02-05T18:10:26Z,2,2,1,0,"Looks like this was copypasta'd from ipc-main.md
",49,True,en,0
4367,2,0,0,Internals,kevinsawicki,2016-02-04T21:37:15Z,15,18,7,0,"See #4357 for more details.

Closes #4357 
Refs https://github.com/atom/electron.atom.io/pull/141
",98,True,en,0
4364,7,9,0,Internals,kevinsawicki,2016-02-16T08:13:10Z,44,19,2,11,"This pull request changes the default app to allow you to launch http/file URLs or HTML files directly in a window from the command line.

This will allow you to test pages and sites directly in Electron without having to create the standard app boilerplate around waiting for the app to be ready, creating the browser window, and loading the URL.

You'll now be able to do:
- `electron http://electron.atom.io`
- `electron ./site/index.html`
- `electron file:///Users/me/sites/page.html`
",489,True,en,0
4363,3,6,0,Externals,Vj3k0,2016-02-09T21:23:47Z,44,1,3,5,"Created `writeRtf` method and added support to `write` for object with rtf property. Also added method to documentation (only in english).
",139,True,en,0
4361,3,1,0,Externals,ShiningRay,2016-02-15T02:13:02Z,138,1,2,10,,0,False,en,0
4356,1,1,0,Externals,chris-ls,2016-02-04T17:09:44Z,1,1,1,0,"'16px' is ambiguous and not clear (4 x 4 px? or 16 x 16px)
",59,True,en,0
4354,5,2,0,Internals,kevinsawicki,2016-02-16T04:30:51Z,30,6,3,12,"Remove the `DevTools Extensions` file when the loaded extensions array is empty instead of writing an empty array to the file.

This prevents the file from getting created when no extensions are used in the app.

Fixes #4296
",225,True,en,0
4350,4,4,0,Internals,kevinsawicki,2016-02-11T19:27:10Z,87,47,3,8,"Don't use an ES6 class for the `AutoUpdater` class on Windows due to #4066 

This was a regression introduced in #4121 

This pull request also adds some initial specs for the `autoUpdater` to prevent future regressions like this.

Here is a pic of it now working on Windows 10:

<img width=""647"" alt=""screen shot 2016-02-03 at 10 46 07 am"" src=""https://cloud.githubusercontent.com/assets/671378/12793043/731c93f4-ca63-11e5-83c8-239319edd8b7.png"">

Fixes #4346 
",462,True,en,0
4339,1,1,0,Externals,ShiningRay,2016-02-03T17:56:49Z,1,1,1,0,"Broswer -> Browser
",19,True,en,0
4333,1,2,0,Externals,Rafaelgfirmino,2016-02-03T03:49:34Z,53,0,1,0,,0,False,en,0
4329,4,0,0,Internals,zcbenz,2016-02-03T04:07:39Z,28,16,3,0,"Fix #3699.
",11,True,en,0
4325,5,0,0,Internals,zcbenz,2016-02-02T12:36:54Z,91,90,5,0,,0,False,en,0
4320,1,1,0,Externals,runinspring,2016-02-02T06:34:34Z,200,29,1,0,,0,False,en,0
4314,2,7,0,Externals,deepak1556,2016-02-02T10:40:44Z,97,26,6,0,"Fixes #4295 

`DownloadItem::Remove` will delete the instance.
",63,True,en,0
4312,1,1,0,Externals,deepak1556,2016-02-02T05:49:35Z,32,0,3,0,"Fixes #4293 
",13,True,en,0
4309,1,1,0,Externals,diracdeltas,2016-02-01T20:36:24Z,2,2,2,0,"s/user strict/use strict
",25,True,da,0
4305,2,0,0,Internals,zcbenz,2016-02-01T13:37:24Z,3,13,3,0,,0,False,en,0
4302,1,1,0,Externals,pra85,2016-02-01T10:46:42Z,1,1,1,0,"Replace `an` with `a`
",22,True,en,0
4301,1,1,0,Externals,ragingwind,2016-02-01T10:46:20Z,1,1,1,0,"Fixes #4272 
",13,True,en,0
4292,1,1,0,Externals,be5invis,2016-02-01T05:19:59Z,7,0,1,0,,0,False,en,0
4291,1,1,0,Externals,yamatoya,2016-02-01T05:11:01Z,141,30,10,0,"[ci skip]
",10,True,pl,0
4289,1,1,0,Externals,wgrafael,2016-02-01T05:10:26Z,2,2,1,1,"System Operation windows and not literal windows!
",50,True,en,0
4288,5,1,3,Externals,brenca,2016-02-01T09:03:16Z,150,8,10,1,"This PR adds the aforementioned event to `webContents` by listening to the IPC messages. This could be useful because if the `cursor` css property is not explicitly set, you have no way to determine what the actual cursor type is, because chrome is the one that makes that decision. We use this with offscreen rendering to display the proper cursor over the rendered frames.
",375,True,en,0
4281,2,0,0,Internals,zcbenz,2016-01-30T05:20:09Z,12,10,2,0,,0,False,en,0
4277,2,1,0,Externals,lukeadams,2016-01-30T05:02:24Z,2,2,2,0,"resolves #4273 
",16,True,et,0
4275,1,2,0,Externals,baconbrad,2016-01-29T21:07:29Z,1,1,1,0,,0,False,en,0
4274,1,1,0,Externals,petrfelzmann,2016-01-29T21:08:13Z,1,0,1,0,,0,False,en,0
4271,3,3,0,Externals,thingsinjars,2016-02-01T04:54:07Z,26,0,4,2,"When creating a popover window via global hotkey, you might want to return focus to the previous app after closing all windows.

For example:
http://stackoverflow.com/questions/22081215/return-focus-to-previous-apps-window-after-makekeyandorderfront

Without app.hide(), you need to interact (click on the window or cmd-tab away and back) to refocus.
![without-hide](https://cloud.githubusercontent.com/assets/147663/12679196/25d2d8ba-c6a3-11e5-98d5-b920ae6df03d.gif)

With app.hide(), you can return focus directly (gif says ""hide before quit"", should be ""hide before close""):
![with-hide](https://cloud.githubusercontent.com/assets/147663/12679242/575a26c2-c6a3-11e5-85be-60d0d098732e.gif)

I don't think there's an equivalent for Linux or Windows so I've only done this for OS X and tagged it as such in the docs.
",817,True,en,0
4264,1,0,0,Internals,zcbenz,2016-01-29T04:17:52Z,1,1,1,0,"This reverts #3918, fixes #4025, and unfortunately reopens #3471.

The root problem is: we want to restart renderer process for every navigation, but for certain types of navigations we can not do that. Hopefully this will be solved once [PlzNavigate](https://groups.google.com/a/chromium.org/forum/#!msg/chromium-dev/FmWJ4d7oBCc/6ippzjoKDwAJ) gets landed.
",357,True,en,0
4260,10,1,0,Externals,fbukevin,2016-01-29T01:14:14Z,698,1,9,0,"Translate zh-TW tutorial, entries were not up-to-date, list of files of entries I done is as following:
- application-distribution.md
- application-packaging.md
- mac-app-store-submission-guide.md 
- using-native-node-modules.md  
- debugging-main-process.md 
- using-selenium-and-webdriver.md  
- devtools-extension.md 
- using-pepper-flash-plugin.md

Additional work: modified zh-TW transtaion of title `Using Pepper Flash Plugin` in docs-translations/zh-TW/README.md.
",471,False,en,0
4247,1,1,2,Externals,deepak1556,2016-01-27T15:20:59Z,20,4,3,0,"Fixes #4219 
",13,True,en,1
4246,1,1,0,Externals,fbukevin,2016-01-27T12:12:41Z,26,0,1,0,"Add supported-platforms.md

Other pages are coming soon.
",57,True,en,0
4245,1,1,0,Externals,yamatoya,2016-01-27T12:12:14Z,434,0,1,0,"[ci skip]
",10,True,pl,0
4244,1,1,0,Externals,vaenow,2016-01-27T12:11:45Z,1,1,1,0,"Remove duplicated words.
",25,True,en,0
4235,2,2,0,Externals,paulatbipsync,2016-01-27T12:03:51Z,1,3,1,0,"After an update is downloaded the following TypeError occurs:

```
TypeError: Assignment to constant variable.
  at atom.asar\\browser\\api\\lib\\auto-updater\\auto-updater-win.js:48:15
  at ChildProcess.<anonymous> (atom.asar\\browser\\api\\lib\\auto-updater\\squirrel-update-win.js:56:12)
  at emitTwo (events.js:87:13)
  at ChildProcess.emit (events.js:172:7)
  at Process.ChildProcess._handle.onexit (internal/child_process.js:200:12)
```

This PR prevents this by passing the referenced variable rather than attempt to change a const
",539,True,en,0
4233,2,0,0,Internals,zcbenz,2016-01-26T12:50:23Z,17,7,3,0,"Fixes #3482.

``` diff
diff --git a/src/node.js b/src/node.js
index 937200d..37aa371 100644
--- a/src/node.js
+++ b/src/node.js
@@ -649,6 +649,8 @@
         // Probably an error on in uv_guess_handle()
         throw new Error('Implement me. Unknown stream file type!');
     }
+    // Ignore stream errors.
+    stream.on('error', function() {});
     } catch (error) {
       stream = createDevNull();
     }
```
",415,True,en,0
4231,1,1,0,Externals,yamatoya,2016-01-26T12:32:01Z,403,0,3,0,"[ci skip]
",10,True,pl,0
4230,1,3,2,Externals,deepak1556,2016-01-28T10:42:14Z,88,29,5,2,"Fixes #4214 
",13,True,en,0
4223,9,7,10,Externals,deepak1556,2016-02-01T12:51:22Z,666,2,21,6,"Fixes #4174 

Depends on https://github.com/atom/brightray/pull/195
",68,True,en,0
4221,1,1,0,Externals,yamatoya,2016-01-25T10:21:46Z,206,0,2,0,"[ci skip] 
",11,True,pl,0
4217,1,1,0,Externals,yamatoya,2016-01-24T14:42:51Z,338,1,2,0,,0,False,en,0
4215,9,0,0,Internals,zcbenz,2016-01-24T07:20:16Z,287,195,13,0,"Also change `win.setFullscreenable` to `win.setFullScreenable` to make names consistent with `win.setFullScreen`. 

Refs #4156.
",128,True,en,0
4211,1,1,0,Externals,ragingwind,2016-01-24T14:36:28Z,23,1,5,0,"It's related with #4084 and It's my first contribute that add a new feature so please let me know if something went wrong. I couldn't find any test for `app.dock` APIs. is it right?
",182,True,en,0
4206,1,1,0,Externals,ragingwind,2016-01-24T14:11:01Z,2,2,1,1,"a bit of fix :)
",16,True,en,0
4204,1,1,0,Externals,yamatoya,2016-01-24T06:28:59Z,337,0,3,0,,0,False,en,0
4202,2,1,0,Externals,evgenyzinoviev,2016-01-23T07:56:38Z,54,0,9,0,"Added `hasShadow` option and `setHasShadow` and `hasShadow` methods to `BrowserWindow` on OS X.
",96,True,en,0
4201,2,2,0,Externals,evgenyzinoviev,2016-01-24T13:34:15Z,8,7,3,1,"Now values like `#80FF0000` (red with 50% opacity) will work.
",62,True,en,0
4198,7,0,0,Internals,zcbenz,2016-01-22T20:33:14Z,53,79,8,0,,0,False,en,0
4192,1,1,0,Externals,evgenyzinoviev,2016-01-22T17:49:18Z,20,10,7,0,"Added `positioningItem` parameter to the `popup` method.
",57,True,en,0
4190,1,1,0,Externals,ragingwind,2016-01-22T16:48:40Z,1,1,1,0,,0,False,en,0
4189,1,1,0,Externals,jlord,2016-01-21T23:14:14Z,1,1,1,0,"This updates the accelerator in 'Hide Others' menu item to use `Alt` rather than `Shift` per https://support.apple.com/en-gb/HT201236 + https://github.com/atom/electron/pull/4188 :pizza: 

cc @kevinsawicki 
",207,True,en,0
4188,1,1,0,Externals,Rosey,2016-01-21T22:45:50Z,1,1,1,0,"As per https://support.apple.com/en-gb/HT201236, the correct keyboard shortcut
for hiding all but the current window is Command-Option(Alt)-H.
",143,False,en,0
4186,1,2,0,Externals,CharlieHess,2016-01-21T21:53:32Z,12,0,2,0,"This PR fixes https://github.com/atom/electron/issues/4101, by making `loadURL` available on `webview`.
",104,True,en,0
4182,4,3,5,Externals,deepak1556,2016-01-24T13:43:18Z,500,1,9,2,"For #4002 
- [x] Add tests

@zcbenz is this api implementation fine or should debugger be made a separate module ? 
",116,False,en,0
4181,4,16,0,Externals,bengotow,2016-01-25T06:47:54Z,47,0,7,3,"In N1, we want to implement the famous ""swipe to archive"" action on threads in the user's inbox. Chrome exposes `scroll` and `wheel` events, but these aren't sufficient to implement the interaction because the element needs to ""snap"" when the user lifts their fingers from the trackpad, not when they / we stop receiving `wheel` / `scroll` events. These events may stop before the user lifts their fingers, or continue after the user has lifted their fingers if they had enough momentum for the gesture to continue.

This exposes BrowserWindow `scroll-touch-down` and `scroll-touch-up`, which fire immediately when the user touches two fingers to the trackpad, and again when the user lifts their fingers. Combined with the existing wheel event should allow for ""swipe-to-archive"" and other similar interactions.

Note: This is only implemented on Mac OS X and the events don't fire unless you're using a trackpad!

Related: #1486, #2683, https://github.com/nylas/N1/issues/541
",978,True,en,0
4178,1,1,0,Externals,deepak1556,2016-01-21T22:03:33Z,23,1,4,0,"Fixes #4173 
",13,True,en,0
4177,1,1,0,Externals,deepak1556,2016-01-21T21:54:21Z,5,6,2,0,"Fixes #4141 

Uses the users' download directory instead of the applications data location. 
",93,True,en,0
4172,13,1,0,Internals,kevinsawicki,2016-01-21T16:56:07Z,797,903,40,1,"Enables the following eslint rules by default and removes instances violating them from the codebase:
- [2 space indentation](http://eslint.org/docs/rules/indent.html)
- [Consistent semicolon usage](http://eslint.org/docs/rules/semi.html)
- [No using undeclared variables](http://eslint.org/docs/rules/no-undef.html)
- [No unused variables](http://eslint.org/docs/rules/no-unused-vars.html)

Refs #4065 
",404,False,en,0
4170,1,1,0,Externals,arniu,2016-01-20T22:47:32Z,10,17,1,0,,0,False,en,0
4168,2,0,0,Internals,kevinsawicki,2016-01-20T17:00:50Z,2,2,2,0,"I noticed this folder wasn't being linted and `atom/utility/atom_content_utility_client.h` had some trailing whitespace in it.
",127,True,en,0
4166,1,1,0,Externals,ragingwind,2016-01-20T22:34:31Z,1,0,1,0,,0,False,en,0
4165,1,1,0,Externals,yamatoya,2016-01-20T22:28:17Z,457,0,5,0,,0,False,en,0
4164,1,1,0,Externals,deepak1556,2016-01-20T22:32:53Z,6,16,2,0,"Fixes #4103 

Cancel the menu in the same tick, otherwise it will be reset.
",76,True,en,0
4163,1,2,2,Externals,deepak1556,2016-01-21T21:35:30Z,31,0,2,1,"For #4132 

Brings available config from `chorme://settings/fonts`
",67,True,en,0
4161,1,5,1,Externals,gabriel,2016-01-21T22:42:21Z,36,27,5,1,"Supports backgroundColor for window on mac, which is necessary to support shadows on transparent windows.

Should be fully backwards compatible since the default clearColor for transparent window causes the shadow to not be visible.

I duplicated ParseHexColor from `native_window_views.cc`, is there a particular place you might want to put it instead?

Thanks.
",363,True,en,0
4158,4,2,0,Internals,kevinsawicki,2016-01-20T16:42:51Z,19,9,2,0,"There was a leftover reference to an undefined `errorMessage` variable that would throw an uncaught browser process exception when `desktopCapturer.getSources()` was called more than once from the render process.

Refs #3727
",225,True,en,0
4156,7,13,3,Externals,evgenyzinoviev,2016-01-23T07:42:41Z,429,46,12,3,"- `movable` option supported on Windows
- added methods `setMovable`, `isMovable`
- added options `minimizable`, `closable` and corresponding methods `setMinimizable`, `isMinimizable`, `setClosable`, `isClosable`. Implemented on Windows and OS X. This options controls whether specific window button and feature should be disabled or enabled.
- On Windows implemented similar to OS X behaviour when `fullscreen` option is set to `false`. In this case the maximize button will be disabled.
- Fixed a bug on OS X when `resizable` is set to `false` but the zoom button was not disabled when window is created
- Fixed a bug on OS X when if you do `win.setResizable(false); win.setResizable(true); win.setResizable(false)`, the zoom button was not disabled after the second `setResizable(false)` call
",796,False,en,0
4153,1,1,0,Externals,sunaiwen,2016-01-19T18:12:26Z,2,2,1,0,"fix doc typo.
",14,True,en,0
4150,1,1,0,Externals,hamxiaoz,2016-01-19T18:10:17Z,1,2,1,0,"The reference-style link uses a relative path, which doesn't work well on the main site http://electron.atom.io/.
",114,True,en,0
4146,2,1,0,Externals,yamatoya,2016-01-19T20:12:41Z,503,0,6,1,,0,False,en,0
4142,1,1,0,Externals,Rokt33r,2016-01-18T10:33:03Z,2,2,1,0,"`title-bar-style` => `titleBarStyle`

https://github.com/atom/electron/blob/master/docs/api/browser-window.md#class-browserwindow
",130,True,en,0
4138,1,1,0,Externals,yamatoya,2016-01-18T07:37:07Z,251,0,6,0,,0,False,en,0
4135,1,2,0,Internals,kevinsawicki,2016-01-17T06:33:29Z,41,0,2,0,"Adds a simple `script/start.py` that is wired up to `npm start`.

Allows you to launch the built version with `npm start` and also pass in args so `npm start -- -v` will print the Electron version.

Defaults to using the debug build.

/cc @jlord @zcbenz 
",255,True,en,0
4133,1,1,0,Externals,yamatoya,2016-01-16T16:11:52Z,26,0,1,0,,0,False,en,0
4131,2,6,0,Externals,etiktin,2016-01-16T06:16:22Z,43,1,3,0,"Resolves #1020.

For future reference, it is possible to disable DWM on Windows 8+ (some sources mistakenly claim it's only possible in Vista and 7). Instructions are available [here](http://www.overclock.net/t/1441921/windows-8-1-no-dwm-aka-aero-aka-desktop-composition#post_22483531).
",287,True,en,0
4129,2,1,0,Externals,etiktin,2016-01-16T03:41:28Z,1,0,1,0,"Fixes #4127.
",13,True,en,0
4126,9,1,0,Internals,kevinsawicki,2016-01-16T05:26:07Z,74,0,5,0,"Before the CoffeeScript migration in #4065, [coffeelint](http://www.coffeelint.org) ran as part of the build which ensured all the source files parsed and linted.

This pull requests adds [eslint](http://eslint.org) to the CI build checking all the JavaScript files in the `atom/` and `spec/` folders.

The initial config has many options turned off that will be re-enabled once more of CoffeeScript cleanup documented in #4065 is complete.

/cc @jlord @zcbenz 
",462,True,en,0
4122,2,0,0,Internals,kevinsawicki,2016-01-15T18:17:16Z,1,1,1,0,"- Use 2 space indent instead of 3
- Add `;` to the end of the line

Refs #4118
",79,False,en,0
4121,13,5,10,Internals,kevinsawicki,2016-01-16T05:24:26Z,134,196,7,0,"- [x] Use `[].includes` instead of `[].indexOf` where appropriate
- [x] Remove unused `indexOf` fallback implementation
- [x] Use [ES6 classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) instead of inlined `extend` helper previously provided by CoffeeScript

Refs #4065 

/cc @jlord @zcbenz :eyes: 
",331,False,en,0
4118,1,1,0,Externals,Ivshti,2016-01-15T15:58:57Z,3,0,1,0,"In relation to https://github.com/atom/electron/issues/3949

This is done so that we can close archives while running, unlocking them to be moved/renamed/etc.

For example for auto-updating purposes
",199,True,en,0
4116,1,1,0,Externals,ghost,2016-01-15T15:33:26Z,3,3,1,0,,0,False,en,0
4113,1,1,0,Externals,importcjj,2016-01-15T15:32:39Z,1,1,1,0,,0,False,en,0
4112,4,3,7,Externals,evgenyzinoviev,2016-01-16T04:12:00Z,50,36,9,0,"I've added `animate` parameter to `BrowserWindows`'s `setBounds`, `setSize`, `setContentSize` and `setPosition` methods, works natively on OS X. What do you think?
",164,True,en,0
4111,2,1,2,Externals,evgenyzinoviev,2016-01-15T15:24:23Z,9,0,4,0,,0,False,en,0
4110,2,0,0,Internals,kevinsawicki,2016-01-15T01:50:02Z,1,1,1,0,"Noticed this spec wasn't running since it didn't end with `-spec`.

Also made a minor tweak to the description.
",112,True,en,0
4109,8,1,8,Externals,jlord,2016-01-15T08:32:07Z,314,437,44,0,"We also inlined a few vars that coffee had listed at the top of each file. 

A part of #4065 
",94,True,en,0
4106,3,2,0,Internals,kevinsawicki,2016-01-14T22:10:26Z,475,869,43,0,"Convert `/* */` comments to `//` and remove extra newlines left over from the CoffeeScript to JavaScript migration.

Follow on from #4065 

/cc @jlord :pear: 
",159,True,en,0
4102,1,2,0,Externals,Mingling94,2016-01-14T23:48:10Z,19,20,2,0,"They were previously not written with the same style as other parts of
the doc. Also there was a couple grammar errors
",119,False,en,0
4098,1,3,3,Externals,deepak1556,2016-01-14T12:18:21Z,41,8,3,0,"Fixes #4095 
",13,True,en,0
4091,1,1,0,Externals,deepak1556,2016-01-14T04:22:57Z,4,3,1,0,"Fixes #3667 
",13,True,en,0
4090,1,1,0,Externals,lukeapage,2016-01-13T17:00:18Z,1,1,1,0,,0,False,en,0
4089,1,1,0,Externals,yamatoya,2016-01-14T01:48:18Z,538,0,3,0,,0,False,en,0
4088,1,1,0,Externals,Mingling94,2016-01-14T04:19:47Z,55,6,2,0,"As per #1239
",13,True,ca,0
4082,4,0,0,Internals,zcbenz,2016-01-15T09:24:47Z,144,110,7,1,,0,False,en,1
4080,8,0,0,Internals,zcbenz,2016-01-13T08:17:49Z,137,120,16,0,"Also cleans up code that forwards webContents methods to webFrame APIs.

Close #3930.
",86,True,en,0
4075,1,1,0,Externals,j5a,2016-01-13T01:57:52Z,82,9,4,0,"this change includes
- add translation
- fix typos
- improve grammer
",69,False,en,0
4071,1,1,2,Externals,deepak1556,2016-01-13T08:18:37Z,12,0,3,0,"Fixes #3895 
",13,True,en,0
4070,2,0,0,Internals,zcbenz,2016-01-12T15:45:59Z,394,0,6,0,"Fix #4063.
",11,True,en,0
4069,2,0,0,Internals,zcbenz,2016-01-12T13:40:18Z,15,1,2,0,"Fix #4021.
",11,True,en,0
4065,11,5,0,Internals,kevinsawicki,2016-01-13T03:13:04Z,11304,7389,154,1,"This pull request migrates all of the CoffeeScript source files to JavaScript.

:chart_with_upwards_trend: CoffeeScript was great when this project started, but many of the best parts of it are now in ES6 and available out of the box in Electron. See [this blog post](http://blog.atom.io/2016/01/07/latest-v8-chromium-features.html) for some examples.

:coffee: The JavaScript files in this pull request were generated using CoffeeScript `1.10.0`.  A second pass will be made in a follow-up pull request to reformat the JavaScript and draft a new styleguide. This is done to minimally disrupt any open or soon to be opened pull requests that may touch the existing `.coffee` files.

:memo: The comments have been retained by first migrating all the `#` comments to `###` which were then compiled to `/* */` style comments in the JavaScript.

:dart: The goal is to make Electron as approachable as possible and also to have its source code reflect the capabilities of the V8 version being used.
### Changes to be made in subsequent pull requests
- Cleanup accidental `return` statements
- Cleanup comment formatting
- Cleanup variable scoping
- Remove CoffeeScript helpers like `extend`, `slice`, and `indexOf`
- Use `let` and `const` appropriately
- Use arrow (`=>`) functions
",1277,True,en,0
4064,1,1,0,Externals,weiway,2016-01-11T18:52:33Z,1,1,1,0,"in line 201 at menu.md, 
should be `var menu = Menu.buildFromTemplate(template);`
",82,False,en,0
4062,1,1,0,Externals,j5a,2016-01-12T02:07:45Z,37,35,3,0,"this change includes
- add translation
- fix typos
- improve grammer
",69,False,en,0
4058,1,1,0,Externals,kyku,2016-01-11T14:57:00Z,5,0,1,0,"The `--touch-devices` will not work under X11 systems (tested under Linux) because `ui::TouchFactory` does not have a chance to see the command line. This is done in `ash::shell::ShellBrowserMainParts::PreMainMessageLoopStart` in Chromium but somehow it is not called in `atom::AtomBrowserMainParts::PreMainMessageLoopRun()` in Electron.
",338,True,en,0
4057,1,1,0,Externals,princejwesley,2016-01-11T14:53:38Z,2,1,2,0,"##### Problem

if we run the below code when there is no focused window, electron throws an error.

``` js
dialog.showMessageBox(BrowserWindow.getFocusedWindow(), options)
```

![image](https://cloud.githubusercontent.com/assets/1622515/12228581/8a494d86-b863-11e5-9e31-fe8553d9fa6c.png)
###### Solution

When there is no focused window, return `null` when calling `BrowserWindow.getFocusedWindow()`.
It helps to use with `dialog` methods like `showOpenDialog`, `showSaveDialog` and `showMessageBox` which expects `null` to represent no window.
",545,True,en,0
4056,1,1,0,Externals,cdaringe,2016-01-11T13:42:54Z,2,0,1,0,"Add documentation update to sppt #4024
",39,True,en,0
4055,1,0,0,Internals,zcbenz,2016-01-11T05:24:55Z,1,1,1,0,"Refs https://github.com/atom/libchromiumcontent/issues/170.
",60,True,en,0
4054,3,1,0,Externals,yamatoya,2016-01-11T13:42:10Z,1198,0,14,0,,0,False,en,0
4052,2,0,0,Internals,zcbenz,2016-01-11T03:04:06Z,2,2,2,0,"Modifying the value in `chrome_paths.h` is not the right fix for #3709, the same value is used by `gfx_paths.h` and we will meet another conflict finally. This PR changes brightray's `PATH_START` to 11000, which is a very safe value.

Refs https://github.com/atom/electron/pull/3732.
",284,True,en,0
4050,2,1,0,Externals,etiktin,2016-01-11T07:41:06Z,3,3,3,0,"This is a small refactor. Noticed some statements where ended with double semicolon instead of a single one.
",109,True,en,0
4048,2,1,0,Externals,etiktin,2016-01-11T07:40:08Z,4,1,1,0,"The `app.exit(exitCode)` tests include an assert on the output we get from a spawned electron process. This doesn't currently work on Windows:

![exitcodefail](https://cloud.githubusercontent.com/assets/4381579/12224904/c77612d4-b804-11e5-94be-a90365dcd4a2.png)

This PR skips the assert on Windows. An alternative solution could be to remove the assert completely (it's not clear why we can't just test the exit code).
",420,True,en,0
4046,2,4,3,Externals,deepak1556,2016-01-11T13:49:15Z,26,12,2,0,"Fixes #4032 

Previously single proxy types where considered as PAC urls. Since there is no way to differentiate where a single proxy rule is a pac url or a proxy rule, we require the user to specify them now.
",210,True,en,0
4044,1,1,0,Externals,j5a,2016-01-11T04:06:39Z,72,29,1,0,"Update quick-start.md to follow the latest version.
",52,True,en,0
4042,1,1,0,Externals,ZhangYueqiu,2016-01-11T04:06:16Z,1,1,1,0,"Change a wrong word
",20,True,en,0
4030,1,1,0,Externals,lukeapage,2016-01-11T03:21:18Z,1,2,1,2,"as per https://github.com/atom/electron/issues/1335#issuecomment-169963166

It seems a bit misleading to say its blocked on the chromium bug when the chromium team have said they won't fix it and atom should work around it.
",224,True,en,0
4029,7,6,5,Externals,leethomas,2016-01-11T12:58:03Z,60,22,7,3,"Closes #3810.

~~Only supported & tested on OS X & Linux, as I don't have a Windows machine. I updated the `showMessageBox` method signatures for Windows to accept the extra parameter so it (hopefully) wouldn't break for Windows users. Please test on Windows before merging.~~ Now supported on Windows, thanks to etikin

Example:
`dialog.showMessageBox(win, { buttons: ['hi', 'there', 'cheng', 'zhao'], message: 'hi there!', title: 'testing', defaultButtonIndex: 2, type: 'info'});`

OS X
<img width=""803"" alt=""screen shot 2016-01-07 at 10 52 58 pm"" src=""https://cloud.githubusercontent.com/assets/5622404/12192206/7551464c-b591-11e5-8973-6d8eb4320a25.png"">
Just fyi, OS X displays buttons from right to left, starting with the first button (0 index) at the furthest right. So the above is expected behavior.

Linux
![usee](https://cloud.githubusercontent.com/assets/5622404/12192425/414094d2-b593-11e5-8b55-6419de96f775.png)

Thanks! 
",936,True,en,0
4027,2,0,0,Internals,zcbenz,2016-01-08T05:32:53Z,71,25,6,0,"Refs #3925, the #3958 only fixes Windows and Linux sides, this PR also fixes the locale on OS X.

Also fixes #3754.
",116,True,en,0
4023,4,3,1,Externals,omrilitov,2016-01-11T05:32:29Z,22,3,7,3,"As discussed here https://github.com/atom/electron/issues/3219
Returns the native OS window handle in a buffer.
Not sure about the Mac implementation, if someone could double-check me.
",185,False,en,0
4018,1,1,0,Externals,hinaria,2016-01-07T12:34:13Z,1,1,1,0,"just a tiny fix for the broken link, pointing to electron faq
",62,True,en,0
4016,1,0,0,Internals,zcbenz,2016-01-07T08:24:35Z,6,1,1,0,"Close #3042.
",13,True,en,0
4014,5,0,0,Internals,zcbenz,2016-01-07T06:58:10Z,151,200,7,0,"This PR introduces `blinkFeatures` option, which is a far more flexible way to enable blink features, so we don't have to add an option for every blink feature.

For example, to enable `KeyboardEvent.key`, use:

``` javascript
webPreferences: {
  blinkFeatures: 'KeyboardEventCode,KeyboardEventKey'
}
```

Refs #2310.
",318,True,en,0
4009,1,1,0,Externals,paulcbetts,2016-01-08T01:55:24Z,0,14,1,1,"As of Chromium 47 this seems to be handled automatically, nvda still reports elements and the typing lag issue described in #4001 is fixed

/cc @ryanmolden to make sure I'm not missing anything
",194,True,en,0
4007,1,0,0,Internals,zcbenz,2016-01-06T14:21:52Z,2,2,1,0,"Close #3980.
",13,True,en,0
4006,2,1,0,Externals,levrik,2016-01-06T14:11:11Z,3,3,1,0,,0,False,en,0
4004,1,5,0,Externals,lukeapage,2016-01-06T12:37:27Z,31,5,1,0,"derived from help on #3378
",27,True,en,0
4003,2,0,0,Internals,zcbenz,2016-01-06T05:10:24Z,61,5,4,0,"Close #4000.
",13,True,en,0
3997,1,1,0,Externals,leethomas,2016-01-06T03:04:40Z,1,1,1,0,"‚Ä¶ on mouse down event instead of highlight state

Fixes #3989
",64,True,en,0
3992,1,1,0,Internals,zcbenz,2016-01-06T02:40:51Z,90,0,2,0,"Hope people will read it.
",26,True,en,0
3987,1,0,0,Internals,zcbenz,2016-01-05T06:13:28Z,1,24,1,0,"The Win32 API has done everything for us, there is no need to do this ourselves.

Close #3556.
",95,True,en,0
3986,3,0,0,Internals,zcbenz,2016-01-05T04:38:24Z,50,61,5,0,"Previously the window menu bar was behaving like Chrome's bookmark bar, which is not exactly what it should be.

Close #3964.
Close #2243.
",139,True,en,0
3983,2,0,0,Internals,zcbenz,2016-01-04T12:52:18Z,6,6,1,0,"Close #3953.

Also found an interesting fact, for the rect passed to `CopyFromBackingStore` API, the size must be scaled to device's DPI, but the origin must **not** be scaled. it seems to be a bug of Chromium.
",211,True,en,0
3981,1,0,0,Internals,zcbenz,2016-01-04T04:32:59Z,71,35,6,0,"`did-navigate-to-different-page` is too long for an event's name, using `did-navigate` can perfectly match `will-navigate`.

Refs #3975.
",137,True,en,0
3975,5,1,0,Externals,leethomas,2016-01-04T03:24:27Z,133,1,10,2,"Refs https://github.com/atom/electron/issues/1378
",50,True,en,0
3974,3,1,0,Externals,leethomas,2016-01-04T02:41:33Z,78,0,8,2,":fireworks: :fireworks: :fireworks: 

This adds `isDevToolsFocused` to WebContent and also adds the `devtools-opened`, `devtools-closed`, `devtools-focused` events to the `webview` tag.
",186,True,en,0
3968,1,1,0,Externals,leethomas,2015-12-31T10:51:45Z,2,1,1,0,"‚Ä¶ms. fixes #3873

`NSMenu.insertItem` was raising an `NSInternalInconsistencyException` ([see apple docs](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSMenu_Class/#//apple_ref/occ/instm/NSMenu/insertItem:atIndex:)) when empty Menus were given more empty Menus as submenus. This only happened when `role` was set to `'window'`. Using this example taken from #3873: 

```
var menu = new Menu();
menu.append(new MenuItem({label: 'Window', submenu: new Menu(), type: 'submenu', role: 'window'}));
Menu.setApplicationMenu(menu);
```

`menu` is empty. Adding a MenuItem that is also empty with `submenu: new Menu()` raises the exception and crashes Electron. 

The new behavior is that a submenu with no menu items is created as expected.
",784,True,en,0
3967,1,1,0,Externals,leethomas,2015-12-31T10:51:55Z,6,1,1,0,"‚Ä¶n array is empty

Hi! 

This fix for https://github.com/atom/electron/issues/3864 is pretty straight forward. allowedFileTypes/setAllowedFileTypes in NSSavePanel throws an exception when the array passed in is empty and is not nil. I just defaulted the array to nil to fix it.

See https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSSavePanel_Class/index.html#//apple_ref/occ/instp/NSSavePanel/allowedFileTypes

Happy new year! :fireworks: 
",488,True,en,0
3961,2,0,0,Internals,zcbenz,2015-12-30T08:46:31Z,81,2,4,0,,0,False,en,0
3959,1,1,0,Externals,deepak1556,2015-12-31T10:46:22Z,16,1,4,1,"Fixes #3939 
",13,True,en,0
3958,1,1,0,Externals,deepak1556,2016-01-04T02:59:09Z,9,29,3,4,"Fixes #3925 

Depends on
https://github.com/atom/brightray/pull/189
https://github.com/atom/libchromiumcontent/pull/169

Have tested only on linux, should work in other platforms too, just need verification on the shipping of locale.
",234,True,en,0
3957,7,0,0,Internals,zcbenz,2015-12-30T04:46:20Z,481,14,19,0,"After some testing only Linux can work fine with external widevine plugin under Chrome 47, I think it is because upstream Chrome relies on component updater to load widevine plugin while our implementation only supports manually specifying the locations of widevine plugin.

I'll implement the component updater in Electron in another pull request.
",349,True,en,0
3955,1,3,0,Externals,nishanths,2015-12-30T04:07:41Z,1,0,1,0,"Fixes #3932
",12,True,en,0
3945,1,2,0,Externals,deepak1556,2015-12-29T11:48:50Z,22,2,3,0,"Related #3922 

Should file scheme support it by default, since we allow sw by default ?
",89,True,en,0
3944,1,1,0,Externals,nishanths,2015-12-29T11:59:24Z,13,5,1,0,"A long-standing Apple bug does not call `prepareForDragOperation:sender`
for file drag-and-drop operations from the Dock. So we manually
call our custom `handleDrop:sender` for all drag-and-drop cases (that
is, from the Dock and from Finder).

References to the bug in question:
- http://stackoverflow.com/q/9534543/3309046
- http://openradar.appspot.com/radar?id=1745403

However, we still need to return YES from `prepareForDragOperation:sender`,
otherwise the ""drag failed"" animation occurs. For the same reason, we also
return YES from `performDragOperation:sender`.

The ""drag failed"" animation example: https://gfycat.com/DaringCourageousEelelephant.

Fixes #3008

Tested
- [x] OS X (fix only applies to OS X)
",716,False,en,0
3942,6,0,0,Internals,zcbenz,2015-12-29T03:03:34Z,67,31,2,0,"Close #3934.
",13,True,en,0
3931,1,1,0,Externals,leftstick,2015-12-28T11:22:57Z,45,0,1,0,,0,False,en,0
3926,1,6,0,Externals,adam-lynch,2015-12-30T04:00:35Z,2,4,1,3,"This will fix the HTML docs but seems to break the markdown docs. I'm not sure how the HTML docs are generated and if the links are changed somehow. I'll submit this anyway.
",174,True,en,0
3920,1,1,0,Externals,flaub,2015-12-28T01:58:40Z,1,1,1,2,,0,False,en,0
3918,1,1,0,Externals,deepak1556,2015-12-25T05:43:34Z,1,1,1,0,"Fixes #3471 

Otherwise `url_request` associated with the process will be destroyed. 
",86,True,en,0
3915,1,1,0,Externals,juanpaulo,2015-12-24T12:11:59Z,1,1,1,0,"Was going through the documentation and noticed the extra backtick, making the rest of the file pink :stuck_out_tongue_winking_eye: . Will try to come up with a better PR next time. Cheers!
",190,True,en,0
3914,3,0,0,Internals,zcbenz,2015-12-24T10:39:04Z,14,2,3,0,"Fix #3898.
",11,True,en,0
3913,1,0,0,Internals,zcbenz,2015-12-24T05:06:08Z,2,3,1,0,"Close #3891.
",13,True,en,0
3912,1,2,4,Externals,tylergibson,2015-12-24T07:32:09Z,20,7,1,0,"Fixes #3656 by adding a Windows version check and using a different set of operations flags for Windows Vista/7.
",113,True,en,0
3911,1,0,0,Internals,zcbenz,2015-12-24T04:10:07Z,0,5,1,0,"Close #3777.
",13,True,en,0
3910,2,0,0,Internals,zcbenz,2015-12-24T03:37:52Z,1,2,2,0,"Refs https://github.com/atom/brightray/pull/186.
",49,True,en,0
3905,1,1,0,Externals,fscherwi,2015-12-24T02:14:16Z,1,1,1,0,,0,False,en,0
3904,1,0,0,Internals,zcbenz,2015-12-23T05:14:50Z,17,15,2,0,"This PR Fixes the visual artifacts of hidden-inset window when entering and leaving fullscreen mode.

Refs #3890.
",114,True,en,0
3903,2,0,0,Internals,zcbenz,2015-12-23T02:44:19Z,57,31,2,0,"The `URLRequest` might be deleted when the `callback` of a event is still pending, we need to make sure the `callback` is cancelled when this happens.

Close #3861.
",165,True,en,0
3902,3,5,2,Externals,bengotow,2016-01-21T23:46:49Z,27,1,2,29,"Overview here: https://github.com/atom/atom/issues/10163
",57,True,en,0
3900,2,3,3,Externals,bbondy,2015-12-23T08:09:57Z,57,8,8,0,"This adds an event to webviews for when meta tags with a theme-color are encountered. 
",87,True,en,0
3892,1,1,0,Externals,jasssonpet,2015-12-22T11:16:04Z,2,1,1,0,"This looks a bit odd on the site: http://electron.atom.io/docs/v0.36.0/api/app/#app-setusertasks-tasks-windows
",111,True,en,0
3890,1,1,2,Externals,jaanus,2015-12-23T03:26:06Z,30,0,2,1,"`hidden` and `hidden-inset` windows differ only by the hidden-inset window having a toolbar. Yet, the toolbar yields an incorrect look in fullscreen mode. So, we hide and recreate the toolbar for such windows when going to/from fullscreen.

There are some visible artifacts during the fullscreen animations, as the toolbar gets created and destroyed. When entering fullscreen, you see a toolbar that then disappears. When going back to normal window, you see the traffic light buttons jump around a little bit. Yet, this is definitely better than the current broken fullscreen look.
",583,True,en,0
3882,1,1,0,Externals,deepak1556,2015-12-21T10:39:18Z,48,1,3,0,"Just for sanity to address https://github.com/atom/electron/issues/2831#issuecomment-166129642
",95,True,en,0
3881,1,2,0,Externals,adam-lynch,2015-12-21T03:33:14Z,1,1,1,0,,0,False,en,0
3880,1,0,0,Externals,adam-lynch,2015-12-21T03:33:21Z,1,1,1,0,,0,False,en,0
3877,1,1,0,Externals,bbondy,2015-12-21T10:22:30Z,38,1,9,1,,0,False,en,0
3875,1,2,0,Externals,deepak1556,2015-12-21T10:18:45Z,6,0,2,1,"fixes #3734 

allows us to suppress renderer restarts on sub-frame history navigations.
",88,True,en,0
3867,1,1,0,Externals,WenryXu,2015-12-21T06:38:42Z,43,43,3,2,,0,False,en,0
3865,2,5,4,Externals,deepak1556,2015-12-22T11:04:23Z,16,2,2,3,"As @paulcbetts noted, users can emulate the behviour with blur/focus events (actually they should use these instead). Anyways just fixing for compatibility. Also have fixed the value of `document.hidden` being incorrect.
",221,True,en,0
3859,1,1,0,Internals,zcbenz,2015-12-18T05:15:56Z,1,1,1,0,"This relies on https://github.com/atom/node/commit/3b044608ee51ca001dabe944cade6e64f46b0724.

When two types of weak handles are bound to the same object, blink will crash for an assertion when doing garbage collection.

Close #3841.
",234,True,en,0
3855,3,5,19,Externals,deepak1556,2015-12-22T11:01:39Z,260,6,13,4,"Fixes #3138 
",13,True,en,0
3854,1,1,0,Externals,deepak1556,2015-12-18T04:10:41Z,9,2,1,0,"Fixes #3835 

When render process is not available during service worker registration, it creates a new one.
https://code.google.com/p/chromium/codesearch#chromium/src/content/browser/service_worker/service_worker_process_manager.cc&sq=package:chromium&l=180
",259,True,en,0
3853,1,1,0,Externals,jrehbein,2015-12-21T02:38:52Z,14,1,1,3,"Implemented workaround in DockShow for TransformProcessType bugginess based on discussion at http://stackoverflow.com/questions/7596643/
",137,True,en,0
3851,1,1,0,Externals,preco21,2015-12-18T01:53:45Z,20,9,4,0,"- Update as upstream
",21,True,en,0
3849,1,2,0,Externals,herrmannplatz,2015-12-18T01:45:39Z,2,1,1,0,,0,False,en,0
3848,2,1,1,Internals,zcbenz,2015-12-17T14:31:33Z,53,41,11,0,"It should make the window show faster.
",39,True,en,0
3844,1,0,0,Internals,zcbenz,2015-12-17T07:04:03Z,1,1,1,0,"Currently for each Buffer created in renderer process, we have two weak handles attached to it, one from blink, and one from Node. However the weak callback in Node neuters the handle, and when the weak callback in blink deals with the handle crash will happen. We fix it by not neutering the handle in Node's weak callback, I'm not sure why Node is neutering a Buffer in its weak callback but it should be totally fine, because once the handle is garbage collect there will be no way to access it in JavaScript.

This is not a issue in old versions because Node v4 attached the weak handle to ArrayBufferView, which I think results in Node's weak callback being called after blink's weak callback.

``` patch
diff --git a/src/node_buffer.cc b/src/node_buffer.cc
index 0b9b16c..ad3fbe8 100644
--- a/src/node_buffer.cc
+++ b/src/node_buffer.cc
@@ -186,7 +186,8 @@ void CallbackInfo::WeakCallback(Isolate* isolate, Local<Object> object) {
   if (buf->ByteLength() != 0)
     CHECK_NE(obj_data, nullptr);

-  buf->Neuter();
+  if (g_standalone_mode)
+    buf->Neuter();
   callback_(obj_data, hint_);
   int64_t change_in_bytes = -static_cast<int64_t>(sizeof(*this));
   isolate->AdjustAmountOfExternalAllocatedMemory(change_in_bytes);
```

Fix #3841.
",1249,True,en,0
3833,2,0,0,Internals,zcbenz,2015-12-16T15:38:44Z,4,12,3,0,"In old days sending sync message to browser process requires pumping
message loop in the renderer process, but now in Chrome 47 it is not
true anymore. And even when we do it, the Send method may fail
sometimes, so this change seems to be required for the Chrome 47
upgrade.

Fix #1966.
",287,False,en,0
3829,1,1,0,Internals,zcbenz,2015-12-16T11:42:04Z,1,1,1,0,"Remove usages of private xpc_ APIs, fix #3823.

Refs https://github.com/atom/libchromiumcontent/commit/8e9772b93b4e46d0614842f28664d33f10d47b98.
",145,True,en,0
3826,10,1,0,Internals,kevinsawicki,2015-12-16T04:02:28Z,27,38,14,0,"Previously `companyName` defaulted to `GitHub, Inc.` and `submitURL` defaulted to a server URL managed by the Electron team.

Now these fields are both required and the crashReporter will log a deprecation when they are missing.

This also removes starting the crash reporter from the quick start docs since this is a more advanced concept that requires hosting a crash reporter server. /cc @jlord 

Closes #3673
",413,True,en,0
3825,1,2,0,Externals,maxogden,2015-12-16T03:30:05Z,9,0,1,0,"I got hung up on this today so thought I'd add a note to the docs
",66,True,en,0
3822,1,1,0,Externals,hashedhyphen,2015-12-16T03:13:27Z,2,0,1,0,"[ci skip]

Thank you for your `electron` !

In the below environment, the `main.js` in `docs/tutorial/quick-start.md` didn't work well.

process.versions:
- chrome: ""47.0.2526.73""
- electron: ""0.36.0""
- node: ""5.1.1""
- v8: ""4.7.80.23""

and process.platform is ""win32"".

A poped up error window was like below.

![error](https://cloud.githubusercontent.com/assets/13907611/11816233/ed92edc4-a392-11e5-927d-a01793a84845.png)

At the same time, an error message was also printed on the console.

```
App threw an error when running [SyntaxError: Block-scoped declarations (let, co
nst, function, class) not yet supported outside strict mode]
```

I'm not sure whether Node or V8 emittes this error, but just in case, it may be better to specify a 'use strict' directive explicitly...?

Thanks!
",791,True,en,0
3819,8,1,0,Externals,preco21,2015-12-15T14:40:09Z,250,65,4,0,"- Update as upstream
",21,True,en,0
3818,1,0,0,Internals,zcbenz,2015-12-15T10:28:04Z,6,1,1,0,"Found the crash when creating empty tab in Atom.
",49,True,en,0
3817,1,0,0,Internals,zcbenz,2015-12-15T08:54:24Z,1,1,1,0,"``` patch
diff --git a/src/node_buffer.cc b/src/node_buffer.cc
index 07acc57..0b9b16c 100644
--- a/src/node_buffer.cc
+++ b/src/node_buffer.cc
@@ -447,10 +446,12 @@ MaybeLocal<Object> New(Isolate* isolate, char* data, size_t length) {
   // For public API, we need to ensure the pointer itself is not changed.
   Local<ArrayBuffer> ab = g_array_buffer_new_with(
       env->isolate(), data, length);
+  if (data == nullptr)
+    ab->Neuter();
   Local<Uint8Array> ui = g_uint8_array_new(ab, 0, length);
   Maybe<bool> mb =
       ui->SetPrototype(env->context(), env->buffer_prototype_object());
-  CallbackInfo::New(env->isolate(), ui, CallbackInfo::Free, nullptr);
+  CallbackInfo::New(env->isolate(), ab, CallbackInfo::Free, nullptr);
   if (mb.FromMaybe(false))
     return handle_scope.Escape(ui);
   return Local<Object>();
```
",834,False,en,0
3815,1,1,0,Externals,bjrmatos,2015-12-15T08:55:17Z,6,0,2,0,"resolves #3796

i have taken the size values from [here](https://en.wikipedia.org/wiki/Paper_size#Overview:_ISO_paper_Sizes)

anything missing?
",144,True,en,0
3812,8,3,0,Internals,kevinsawicki,2015-12-15T07:01:28Z,26,24,4,0,"This pull request makes the following changes to `window.opener`.
- Now has entire `BrowserWindowProxy` API which includes things like `eval`, `focus`, and `close`.
- `event.source` on `postMessage` events now matches `window.opener`
- `window.opener` no longer has a custom `postMessage` method, it just uses the default `BrowserWindowProxy` implementation.

Previously it appeared like the `guestId` on the `source` object on message events was the id of the target window so I changed it to be the source window id instead which allowed the removal of the `ATOM_SHELL_GUEST_WINDOW_MANAGER_WINDOW_OPENER_POSTMESSAGE` ipc event completely.

Fixes #3775
",654,False,en,0
3809,1,1,0,Externals,deepak1556,2015-12-15T07:33:02Z,5,5,1,0,"Fixes #3800 
",13,True,en,0
3805,1,1,0,Externals,elvongray,2015-12-14T12:01:22Z,1,1,1,0,,0,False,en,0
3799,1,1,0,Externals,bbondy,2015-12-14T11:11:49Z,1,1,1,1,,0,False,en,0
3792,1,0,0,Internals,zcbenz,2015-12-12T14:44:10Z,1,1,1,0,"Fix #3790.
",11,True,en,0
3789,18,2,0,Internals,zcbenz,2015-12-12T08:34:10Z,954,850,15,0,"- Reorganize the code with some C++ tricks.
- Improve the docs.
- Add more specs.
",82,False,en,0
3769,4,2,0,Internals,kevinsawicki,2015-12-11T03:16:42Z,14,5,2,0,"Reuse `BrowserWindowProxy` objects across events and `window.open` to that `event.source` can use `===` to see if it is a specific window returned from `window.open`.

Closes #3735
",181,True,en,0
3768,3,1,0,Internals,kevinsawicki,2015-12-11T03:18:37Z,26,4,4,0,"Use source origin instead of target origin in event.

Closes #3691
",67,True,en,0
3762,4,1,0,Internals,kevinsawicki,2015-12-11T03:21:57Z,25,9,6,0,"This passes through the `-g/--grep` and `-i/--invert` options from the command line to the spec app so you can easily run a single Electron spec from the command line.

This also adds an `npm test` script to allow you to run specs via something like `npm test -- -g ""emit unload handler""`.

@jlord and myself paired on this :pear:
",331,True,en,0
3759,2,1,0,Externals,preco21,2015-12-10T15:28:28Z,16,2,2,0,"- Update as upstream
",21,True,en,0
3752,7,1,0,Internals,zcbenz,2015-12-10T05:38:12Z,23,0,1,0,"We have bought its paid plan, each test takes about 10min to run, not very fast but better than travis ci's mac machine.
",121,True,en,0
3750,1,0,0,Internals,zcbenz,2015-12-10T03:54:26Z,3,0,1,0,"Thanks @jasongrlicky for finding out the fix.

Close #3038.
",60,True,en,0
3743,2,1,0,Externals,preco21,2015-12-09T10:10:48Z,79,3,6,0,"- Update as upstream
- Add `desktop-capturer.md` docs
",54,False,en,0
3733,1,1,4,Externals,deepak1556,2015-12-10T11:29:51Z,86,8,12,1,"https://github.com/atom/electron/issues/2831 is now completely addressed. Have enabled service worker for file scheme by default. For privileged custom schemes users can use the api.
",183,True,en,0
3732,1,1,0,Externals,deepak1556,2015-12-09T04:25:54Z,1,1,1,0,"Fixes https://github.com/atom/electron/issues/3709

https://github.com/atom/electron/pull/3421 enum values of `chrome::DIR_APP` and `chrome::DIR_USER_DATA` conflict with our brightray values and register in pathservice.
",220,True,en,0
3729,3,1,0,Externals,preco21,2015-12-09T04:15:40Z,0,3,1,0,"- Update as upstream
",21,True,en,0
3727,21,1,0,Internals,zcbenz,2015-12-08T11:46:02Z,894,4,20,0,"There were lots of updates of Electron since #2963, so I started a new pull request to merge its code.
",103,True,en,0
3726,1,1,0,Externals,acburdine,2015-12-08T16:21:14Z,1,1,1,0,"Noticed this as I was reading along in the documentation.
",58,True,en,0
3724,4,4,0,Internals,zcbenz,2015-12-08T04:26:24Z,6,28,6,0,,0,False,en,0
3721,10,5,0,Internals,kevinsawicki,2015-12-10T03:39:14Z,51,3,8,2,"This pulls some of the exit/quit tweaks from `init.coffee` into `app.coffee` and stores the value to `app.exit` so that it can be emitted with the process `exit` event when the app `quit` event fires.

Closes #3584
",215,True,en,0
3718,4,2,0,Externals,paulcbetts,2015-12-08T02:14:27Z,48,36,5,0,"## TODO:
- [x] Get code compiling
- [x] Copy over original Chrome47 code into all the chromium_src dirs
- [ ] Update libchromiumcontent
- [ ] Fix crash in tests
",161,False,en,0
3716,2,2,0,Externals,paulcbetts,2015-12-08T01:52:50Z,27,25,8,0,"## TODO:
- [x] Compiles on Windows
- [x] Tests pass
- [x] Copy over Chrome47 version of chromium_src code instead of patching Chrome45 version
- [ ] Do we move print_web_view_helper_pdf_win.cc over to a components folder to match Chrome47? (Y/N)
",246,False,en,0
3715,8,1,0,Internals,kevinsawicki,2015-12-09T04:13:08Z,15,4,4,1,"Don't re-assign the `submenu` field on the template passed to `Menu.buildFromTemplate`.

This also changes the `new MenuItem(options)` constructor to convert `options.submenu` to a `Menu` if it isn't one already which seems beneficial.

Closes #3596 
",251,True,en,0
3714,17,8,0,Internals,zcbenz,2015-12-08T02:48:04Z,226,313,65,0,"Debug build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Release build compiles on:
- [x] OS X
- [x] Linux
- [x] Windows

Tests passing on:
- [x] OS X
- [x] Linux
- [x] Windows

Merge:
- [x] https://github.com/atom/libchromiumcontent/pull/163
- [x] https://github.com/atom/brightray/pull/182
",298,False,en,0
3706,1,1,0,Externals,billyct,2015-12-09T04:00:16Z,15,0,6,3,"as https://github.com/atom/electron/issues/2864 said, i also wanner if can support that feature,so i write a PR for it,but it only works with osx:

```
var win = new BrowserWindow({...});
win.setIgnoreMouseEvents(true); //enable ignore all events in osx
```
",258,True,en,0
3705,1,1,0,Externals,arturts,2015-12-09T03:56:01Z,142,0,1,3,"Linux build instructions
",25,True,en,0
3704,1,1,0,Externals,leftstick,2015-12-09T03:43:26Z,119,0,1,3,,0,False,en,0
3703,1,1,0,Externals,Cfeusier,2015-12-09T03:43:07Z,1,1,1,3,,0,False,en,0
3701,3,3,0,Externals,deepak1556,2015-12-10T11:38:35Z,114,1,4,5,"Fixes #3684 

```
* uploadData [object]
  * bytes Buffer - content to be sent for the request
  * file String - Path of file to be uploaded
```

Also `*HttpProtocol` handles content to be set for POST request now.

```
* uploadData Object
  * contentType String
  * data String 
```
",283,True,en,0
3700,1,1,0,Externals,arturts,2015-12-09T03:38:39Z,632,0,1,4,,0,False,en,0
3698,1,1,0,Externals,lukeapage,2015-12-09T03:38:05Z,1,1,1,4,"Fixes https://github.com/atom/electron/issues/3693
As much as is possible considering https://github.com/atom/electron.atom.io/issues/80

I've gone for the link generated in the raw markdown by github rather than the one generated on the electron website because a) the electron website one is more likely to change that the github one (I would have thought?) b) the electron website is broken no matter what because the path is also wrong.
",441,False,en,0
3690,1,1,0,Externals,leftstick,2015-12-04T10:46:57Z,53,0,1,0,,0,False,en,0
3688,5,1,0,Externals,preco21,2015-12-04T10:46:33Z,91,1,4,0,"- Update as upstream
- Add contribution guide
",46,False,en,0
3686,5,0,0,Internals,zcbenz,2015-12-04T05:53:07Z,13,6,5,0,,0,False,en,0
3683,3,2,0,Internals,zeke,2015-12-04T02:52:44Z,31,8,4,0,"This is a followup to https://github.com/atom/atom/pull/9730 that adds a `CODE_OF_CONDUCT.md` based on contributor-covenant.org v1.3.0

Perhaps @preco21 can help out with an updated translation for the Korean README?
",217,True,en,0
3680,1,2,0,Internals,kevinsawicki,2015-12-03T20:16:33Z,1,0,1,0,"This previously wasn't rendering correctly on http://electron.atom.io/docs/v0.35.0/api/web-view-tag/#allowpopups

<img width=""816"" alt=""screen shot 2015-12-03 at 8 41 05 am"" src=""https://cloud.githubusercontent.com/assets/671378/11566967/a17bd23c-9999-11e5-984d-9e9fb5d1cd93.png"">
",281,True,en,0
3676,7,0,0,Internals,zcbenz,2015-12-03T10:06:34Z,292,318,31,0,"This PR fixes a problem that some V8 handles are deleted on IO thread when a V8 function is used as protocol handlers, close #3419.

There also some more improvements on the management of JavaScript objects' lifetime to make the fix possible, currently a native JavaScript object could be deleted in following ways:
- V8 garbage collected the object.
- User calls the `destroy` method.
- When JavaScript environment is destroyed, all objects get deleted by Electron.
- When the holder of a V8 object gets deleted on IO thread, transfer the deletion to UI thread.
",563,True,en,0
3672,7,2,0,Externals,CharlieHess,2015-12-04T02:52:11Z,50,10,6,1,"This PR resolves https://github.com/atom/electron/issues/3433. After some discussion with @zcbenz, it makes sense to have this method on `webContents` rather than `session`, as we can't create the download parameters without `webContents`.

Fixes #3433 
",254,True,en,0
3670,2,3,0,Externals,wearhere,2015-12-04T02:55:51Z,13,4,3,1,"Also fixes the existing test for inheritance.

Fixes https://github.com/atom/electron/issues/3652.
",99,True,en,0
3664,1,1,0,Externals,clevertonh,2015-12-04T04:10:00Z,1,0,1,1,,0,False,en,0
3663,3,3,0,Externals,preco21,2015-12-03T13:44:54Z,31,7,6,0,"- Update as upstream
- Fix small typos
",39,False,en,0
3660,3,0,0,Internals,zcbenz,2015-12-02T12:55:02Z,53,27,9,0,"Close #2830.
",13,True,en,0
3659,1,1,0,Externals,lukeapage,2015-12-02T11:59:43Z,1,1,1,0,"Am blocked on seeing if the whole paragraph should be removed because of https://github.com/atom/electron/issues/3378
but at the least it shouldn't give incorrect information about the node.js version
",201,False,en,0
3650,3,0,0,Externals,arturts,2015-12-02T02:21:10Z,57,31,3,0,,0,False,en,0
3649,2,1,0,Externals,arturts,2015-12-02T02:20:58Z,87,2,2,0,,0,False,en,0
3648,1,3,0,Externals,jviotti,2015-12-02T02:45:24Z,18,7,3,0,"Currently, when calling `copyFileOut`, the original extension from the
file is lost, and a generic `*.tmp` is added instead.

This becomes problematic in the scenario where we use
`child_process.execFile` on a Windows Batch script that lives inside the
`asar` package.

Windows relies on the extension being present in order to interpret the
script accordingly, which results in the following bug because the
operating system doesn't know what do to with this `*.tmp` file:

```
Error: spawn UNKNOWN
```

Steps to reproduce:
1. Create a dummy batch script (test.bat):

```
@echo off
echo ""Hello world""
```
1. Create an electron app that attemps to call this script with
   `child_process.execFile`:

``` js
var child_process = require('child_process');
var path = require('path');

child_process.execFile(path.join(__dirname, 'test.bat'), function(error, stdout) {
    if (error) throw error;
    console.log(stdout);
});
```
1. Package this small application as an asar archive:

``` sh
> asar pack mytestapp app.asar
```
1. Execute the application:

``` sh
> electron.exe app.asar
```
",1087,False,en,0
3645,4,0,0,Internals,zcbenz,2015-12-01T11:12:34Z,30,37,11,0,"Similar to #3643, Chromium is doing something with webContents after the `page-title-updated` event, so if users close the window during it a crash will happen.

Fix #3380.
",173,True,en,0
3643,1,0,0,Internals,zcbenz,2015-12-01T09:19:52Z,8,3,2,0,"Chrome is doing some stuff after the DidFailProvisionalLoad event, if we call LoadURL at this time crash would happen.

Fix #3185.
",131,True,en,0
3641,3,3,0,Internals,zcbenz,2015-12-01T06:40:37Z,52,1,4,0,"Users can now use `process.noAsar` to toggle whether to allow `asar` support in Node API. This makes it easy to use third party modules that deals with filesystem:

``` js
process.noAsar = true;
fs.createReadStream('./my-electron-app.tar.gz')
  .pipe(zlib.Gunzip())
  .pipe(tar.extract('./extract'))
  .on('finish', function() { process.noAsar = false; });
```

Close #2446.
",375,True,en,0
3640,6,6,22,Externals,deepak1556,2015-12-11T08:56:00Z,1763,3,15,10,"```
session.webRequest.<method>([filter,] function(details) {
  return result
})
```

where result and details will be same as `chrome.webRequest.details` and [chrome.webRequest.BlockingResponse](https://developer.chrome.com/extensions/webRequest#type-BlockingResponse)
- [x] Filter with URL regex

Fixes #2115 
",312,False,en,0
3638,1,0,0,Externals,arturts,2015-12-01T02:06:56Z,452,0,1,0,"Didn't find a decent translation to a few words, such as ""badging"", ""parse"", etc.
",82,True,en,0
3636,1,0,0,Externals,arturts,2015-12-01T02:06:38Z,44,33,1,0,,0,False,en,0
3635,1,1,0,Externals,arturts,2015-12-01T02:06:13Z,16,16,1,0,,0,False,en,0
3634,1,0,0,Internals,zcbenz,2015-11-30T14:40:48Z,5,9,3,0,"Some tasks posted to BridgeTaskRunner are holding objects that should be deleted before the JavaScript environment gets deleted, otherwise crash would happen on exit.

Fix #3570.
",179,True,en,0
3628,1,0,0,Externals,lovemyliwu,2015-11-30T10:26:04Z,1,1,1,0,,0,False,en,0
3626,1,0,0,Externals,arturts,2015-11-30T08:01:05Z,1,1,1,0,"'Estilo de c√≥digo' in 'Desenvolvimento' section now points to the translated coding-style.md
",94,True,es,0
3625,1,1,0,Externals,arturts,2015-11-30T08:01:01Z,9,12,1,0,,0,False,en,0
3622,2,1,0,Externals,50Wliu,2015-11-30T07:33:49Z,1,0,1,0,"Electron receives many translation/documentation PRs, none of which need CI to verify anything.

This allows us to receive faster feedback on other PRs.

Refs atom/atom#9668.
",175,True,en,0
3621,1,0,0,Externals,lukewestby,2015-11-29T23:33:55Z,1,1,1,0,"To comply with https://github.com/atom/electron/blob/3a5160f79968998ef214eb1d81c00993b0737637/docs/api/screen.md#event-display-metrics-changed

Fixes #3613
",156,True,en,0
3618,3,1,0,Externals,preco21,2015-11-30T07:01:08Z,29,5,3,0,"- Update as upstream
",21,True,en,0
3616,1,1,0,Externals,leftstick,2015-11-30T07:00:34Z,141,0,1,1,,0,False,en,0
3612,1,1,0,Externals,gunmetal313,2015-11-30T06:57:16Z,83,0,2,2,,0,False,en,0
3608,3,0,0,Internals,zcbenz,2015-11-27T14:21:33Z,37,15,7,0,,0,False,en,0
3606,3,1,0,Externals,preco21,2015-11-27T10:38:13Z,54,2,3,0,"- Update as upstream
- Add `environment-variables.md` in `api`
",63,False,en,0
3604,1,1,0,Externals,niedzielski,2015-11-27T10:39:11Z,8,1,1,0,"Specify that webContents.addWorkSpace cannot be called before DevTools
creation and include example.

Fix: #3536
",113,False,en,0
3603,1,1,0,Externals,niedzielski,2015-11-27T10:38:39Z,4,1,1,0,"Document return value for globalShortcut.register and common failure scenario.

Fix: #3600
",91,True,en,0
3595,1,7,5,Externals,jviotti,2015-11-27T03:39:46Z,16,0,4,0,"Consider an electron application that uses `execFile` to run a script
that lives within the application code base:

``` coffee
child_process = require 'child_process'
child_process.execFile __dirname + '/script.sh', (error) ->
  throw error if error?
```

An application like this will fail when being packaged in an `asar` with
an following error:

```
Error: spawn EACCES
```

Electron overrides certain `fs` functions to make them work within an
`asar` package. In the case of `execFile`, the file to be executed is
extracted from the `asar` package into a temporary file and ran from
there.

The problem is that during the extraction, the original permissions of
the file are lost.

We workaround this fact by forcing execution permissions on the
extracted file when overriding `execFile` and `execFileSync`.

Fixes: https://github.com/atom/electron/issues/3512
",866,False,en,0
3594,4,0,0,Internals,zcbenz,2015-11-26T13:51:35Z,82,17,3,0,"Close #3434.

Also add some docs on other environment variables.
",65,True,en,0
3590,1,1,0,Externals,vQuagliaro,2015-11-26T10:34:12Z,4,2,1,0,,0,False,en,0
3588,2,0,0,Internals,zcbenz,2015-11-26T06:10:17Z,6,1,2,0,"Since EL Capitan it is possible that the methods of delegate would get called after the window has been closed.

Refs atom/atom#9584.
",134,True,en,0
3586,1,1,0,Externals,paulcbetts,2015-11-26T05:15:08Z,25,7,2,0,"When the browser process is busy, calling webview.send (a method that appears on its face to be non-blocking) will actually block, because most webview methods are remoted to a guest view instance in the browser process. Instead, define a few methods which will instead send its call over an async IPC message.
",311,True,en,0
3574,1,1,0,Externals,preco21,2015-11-26T03:02:01Z,15,0,1,1,"- Update as upstream
",21,True,en,0
3573,1,1,0,Externals,rprichard,2015-11-26T03:00:29Z,1,1,1,1,,0,False,en,0
3568,1,1,0,Externals,laiso,2015-11-24T14:03:47Z,16,16,10,0,"Run `npm start`, and show warnings in my console:

```
(electron) loadUrl is deprecated. Use loadURL instead.
```
#3424 updates, fix it.
",137,True,en,0
3567,6,2,0,Externals,paulcbetts,2015-12-01T04:43:38Z,68,0,7,6,"This PR disables CORS for custom schemes, which allows you to serve Font resources from custom schemes after using registerCustomSchemeAsSecure (i.e. the hosting page is HTTPS but your font is at `myproto://`)
## TODO:
- [x] Figure out how to do this for ASAR jobs
- [x] Make sure this actually works
- [ ] Code Review
",319,False,en,0
3561,4,1,0,Externals,preco21,2015-11-24T05:40:16Z,81,56,4,0,"- Update as upstream
- Fix some typos
- Add caution of translation version in `README.md`
",90,False,en,0
3554,1,7,0,Externals,nekolab,2015-11-23T10:19:37Z,1,1,1,0,"Seems property `selector` in menu-item is replaced by `role`, so change it.
",76,True,en,0
3550,4,1,0,Externals,etiktin,2015-11-24T10:38:33Z,18,4,1,1,"Depends on atom/brightray#179

Explanation copied from the brightray PR:

> This PR adds support for the `--proxy-bypass-list` command line argument. It enables you to decide on hosts that should bypass the proxy server set by `--proxy-server`. For example if your app talks to a local web server (e.g. http://127.0.0.1:8080), you probably don't want it to go through the proxy server (how will it resolve 127.0.0.1 to the correct host?), so you can use `--proxy-bypass-list=""127.0.0.1:8080""` or the more general `--proxy-bypass-list=""<local>""`.
> The value can contain more than one host, separated by semi-colon. See examples at: https://www.chromium.org/developers/design-documents/network-settings

This PR adds the documentation for this feature.
",752,True,en,0
3549,1,1,0,Externals,bengotow,2015-11-23T09:44:07Z,2,2,1,0,"`hideothers` and `unhide` had trailing colons which prevented them from being enabled / working in the default app. #3543
",122,True,en,0
3548,1,0,0,Externals,dongjoon-hyun,2015-11-23T09:45:48Z,7,7,1,0,,0,False,en,0
3544,2,2,0,Externals,dongjoon-hyun,2015-11-23T09:45:44Z,1,1,1,0,,0,False,en,0
3542,4,1,0,Externals,etiktin,2015-11-23T09:11:44Z,11,2,1,1,"Some of the roles in menu-item use methods on BrowserWindow instead of WebContents which outputs a deprecation warning (e.g. `(electron) selectAll is deprecated. Use webContents.selectAll instead.`).
I updated it to use the correct methods.
",241,False,en,0
3537,7,1,0,Externals,etiktin,2015-11-23T08:56:30Z,79,48,4,2,"- Make BrowserWindow options argument optional, so now `new BrowserWindow();` is okay.
- Expand the BrowserWindow options description with defaults.

Resolves #3473 and #3367.
",176,False,en,0
3535,7,1,0,Externals,etiktin,2015-11-23T08:45:27Z,37,5,4,2,"People keep making the mistake of using the documents from the master branch and assuming that it will work with their currently installed version. It became more prominent with the API changes made in v0.35.0. It generates plenty of noise in the form of issues and PRs. This PR is an attempt to mitigate this issue. Changes:
- Updated all the links in the default app to use the Electron version that is being used. So instead of getting the docs for master you get the docs for `process.versions.electron`.
- Added Electron's version number to the header of the default app, so it's easier to know what version is currently running.
- Added a note to the top of docs/readme that explains that the user should use the docs that matches the version he/she is using.
",766,False,en,0
3533,2,1,0,Externals,preco21,2015-11-23T08:41:02Z,171,74,4,2,"- Update as upstream
- Improve grammar
",39,False,en,0
3531,1,1,0,Externals,deepak1556,2015-11-24T07:45:07Z,13,0,1,3,"Fixes #3477 
",13,True,en,0
3519,4,1,0,Externals,preco21,2015-11-20T02:52:53Z,1372,942,54,0,"- Update as upstream
- Fix some typos
- Improve grammar
- Adjust docs line wrap to 80
",86,False,en,0
3515,3,1,0,Externals,sotayamashita,2015-11-19T14:23:14Z,3,0,2,0,,0,False,en,0
3514,7,5,0,Internals,zcbenz,2015-11-20T02:23:38Z,124,87,12,0,"``` markdown
### session.fromPartition(partition)

* `partition` String

Returns a new `Session` instance from `partition` string.

If `partition` starts with `persist:`, the page will use a persistent session
available to all pages in the app with the same `partition`. if there is no
`persist:` prefix, the page will use an in-memory session. If the `partition` is
empty then default session of the app will be returned.

### session.defaultSession

Returns the default session object of the app.
```

Fix #959.
",514,False,en,0
3510,1,4,0,Internals,zcbenz,2015-11-19T09:28:59Z,4,13,5,0,"We had lots of different APIs for checking whether an object is destroyed, and none of them is public, this PR tries to add a `isDestroyed` API to balance the `destroy` API and makes styles more consistent.

The `isDestroyed` API will stay undocumented for a while in case there is better way to do this.
",305,True,en,0
3509,2,3,2,Externals,bengotow,2015-11-20T05:02:05Z,45,10,2,0,"Adds the desktop window type referenced in https://github.com/atom/electron/issues/2899 for compatiblity with the linux version. Note that on Mac OS X, the desktop window cannot receive input events (seems to be a limitation of being behind the desktop).

In this diff I also removed the `standardWindow` option from the docs, in favor of an additional `textured` value for window `type` on Mac OS X. The old `standardWindow` option continues to work, but seemed more confusing. If this seems like a bad idea, I can revert that change.

Here's a sample app adapted to use the `desktop` window type. I also made it use the `globalShortcut` for interaction, since it can't receive input directly: https://dl.dropboxusercontent.com/u/4803975/Electron%20Examples/webgl-desktop.zip
",777,True,en,0
3507,1,5,0,Internals,zcbenz,2015-11-19T08:38:58Z,24,3,2,0,"Apart from the breakpad symbols, this PR also uploads the dSYM symbols on OS X, so tools like Instruments can read the symbols.

Fix #3502.
",140,True,en,0
3506,1,0,0,Internals,zcbenz,2015-11-19T06:45:31Z,1,1,1,0,"Backport https://codereview.chromium.org/1324513002.

This should fix the high DPI problem on Linux, refs #3349.
",113,True,en,0
3504,1,1,0,Externals,KevinRamsunder,2015-11-19T03:00:43Z,1,1,1,0,,0,False,en,0
3503,1,1,0,Externals,etiktin,2015-11-19T03:00:13Z,3,4,1,0,"Removed duplication.
",21,True,en,0
3497,1,1,0,Externals,etiktin,2015-11-19T02:54:32Z,6,2,1,0,"Changed the description of the preload key to make it clear you need to provide an absolute file path and not a file url (related to https://github.com/atom/electron/issues/1753#issuecomment-157409572).
Also mentioned that it's possible to reintroduce Node globals when node integration is off and referenced the example from process.md (related to https://github.com/atom/electron/issues/254#issuecomment-157769756).
",418,False,en,0
3496,12,2,0,Externals,preco21,2015-11-19T02:57:21Z,269,225,13,0,"- Update as upstream
- Add translation
- Improve grammar
- Standardize platform labels in `BrowserWindow`
",106,False,en,0
3492,1,1,0,Externals,vitorgalvao,2015-11-19T02:44:15Z,1,1,1,0,,0,False,en,0
3487,6,1,0,Internals,zcbenz,2015-11-18T04:06:52Z,256,225,15,0,"``` markdown
# app

### Event: 'certificate-error'

Returns:

* `event` Event
* `webContents` [WebContents](web-contents.md)
* `url` URL
* `error` String - The error code
* `certificate` Object
  * `data` Buffer - PEM encoded data
  * `issuerName` String
* `callback` Function

Emitted when failed to verify the `certificate` for `url`, to trust the
certificate you should prevent the default behavior with
`event.preventDefault()` and call `callback(true)`.
```

``` markdown
# session

### `session.setCertificateVerifyProc(proc)`

* `proc` Function

Sets the certificate verify proc for `session`, the `proc` will be called with
`proc(hostname, certificate, callback)` whenever a server certificate
verification is requested. Calling `callback(true)` accepts the certificate,
calling `callback(false)` rejects it.

Calling `setCertificateVerifyProc(null)` will revert back to default certificate
verify proc.
```

Close #3330.
",930,False,en,0
3485,1,1,0,Externals,leftstick,2015-11-18T10:12:09Z,13,13,5,0,"as title
",9,True,en,0
3484,1,2,0,Externals,bengotow,2015-11-18T10:21:02Z,18,6,1,0,"Spent a while tracking down an exception `""Error processing argument -1""`, which turned out to be caused by a missing param on a function call. (`app.exit()` now takes an exit code.) 

This PR traps these sort of exceptions and adds the function name when possible, so it's much easier to identify which remote call is causing the error.
",338,True,en,0
3483,2,1,1,Externals,preco21,2015-11-18T10:11:37Z,1,1,1,0,,0,False,en,0
3479,1,1,0,Externals,bengotow,2015-11-18T10:49:15Z,28,25,2,0,"- Consolidate logic that applies view dimensions into a function
- Use `NSVariableStatusItemLength` instead of trying to sync status item width
- Use modern Obj-C syntax `@[], @{}` in a few places
- Recompute view bounds after updating image in `setImage:`

This fixes #3478
",275,False,en,0
3476,11,1,0,Externals,preco21,2015-11-18T05:18:45Z,833,107,11,0,"- Update as upstream
- Standardize docs
- Improve grammar
- Fix typos
- Add `BrowserWindow` translation (not yet completed)
",124,False,en,0
3469,6,4,0,Internals,zcbenz,2015-11-17T13:57:58Z,215,367,11,0,"The only use case of `verify-certificate` is to allow untrusted certificates, so we don't need to emit it when the certificate is trusted.
",139,True,en,0
3464,1,1,0,Externals,dongjoon-hyun,2015-11-17T10:20:17Z,16,17,1,0,"This PR completes Korean translations in menu-item.md file by adding the missing parts.
",88,True,en,0
3462,1,0,0,Internals,zcbenz,2015-11-17T03:50:19Z,11,5,4,0,"Relative paths in GitHub's repo do not work very well, and our docs site can not recognize them.
",97,True,en,0
3460,9,1,0,Externals,preco21,2015-11-17T03:42:57Z,131,19,6,0,"- Small fixes
- Add Mac App Store guide translation
",52,False,en,0
3456,2,2,0,Externals,nekolab,2015-11-16T08:29:09Z,55,2,3,0,"Hi I just did some work on zh-CN docs
Feel free to let me know whether something is not qualified for merge, thanks~
",117,False,en,0
3454,5,1,6,Externals,brenca,2015-11-16T14:13:09Z,48,8,4,0,"I've added a string based method of specifying the character that you want to send via `sendInputEvent` because the current implementation can't deal with keys like the Arrow keys or `Home` (no unicode key)
",207,True,en,0
3453,9,1,0,Externals,preco21,2015-11-16T08:11:52Z,343,183,33,0,"- Update as upstream
- Fix typos
- Improve grammar
",51,False,en,0
3450,1,1,0,Externals,eddiezane,2015-11-16T03:17:41Z,1,1,1,0,,0,False,en,0
3441,3,1,0,Externals,brenca,2015-11-16T08:03:58Z,3,2,1,1,"I moved the `Locker` and `HandleScope` creation from after to before the creation of the `node::Buffer` in `FrameSubscriber` hoping this would create the `Buffer` on the created scope as it should - I've tested it before the change and after, and I got to ~2G memory in 20 seconds before, after it jumps up to ~300M and then back to a lower value, so the issue (#3401) seems to be fixed.
",388,True,en,0
3432,2,2,0,Externals,deepak1556,2015-11-16T12:55:16Z,9,8,3,2,"A more reliable way to bypass cache.

Fixes #3393 
Ref #1360 
",62,True,en,0
3428,6,0,0,Internals,zcbenz,2015-11-13T16:26:03Z,35,38,12,0,"The way we use builtin modules in the main process now becomes:

``` javascript
const {app, BrowserWindow} = require('electron').remote
```

instead of a long require chain:

``` javascript
require('electron').remote.require('electron')
```
",241,True,en,0
3425,1,0,0,Internals,zcbenz,2015-11-13T10:52:56Z,26,17,5,0,"Old events are still supported with deprecation warnings.

Refs #2544.
",71,True,en,0
3424,1,0,0,Internals,zcbenz,2015-11-13T08:27:38Z,251,212,57,0,"Old APIs are still supported, but deprecation warnings will be printed.

Fix #2544.
",84,True,en,0
3422,1,0,0,Internals,zcbenz,2015-11-13T07:04:51Z,119,76,8,0,"On Windows the case sensitivity of command line switches are ignored, so `--nodeIntegraion` will become `--nodeintegration`.

We should separate options from switches so we use `nodeIntegraion` in options, while passing `--node-integration` in command line.
",258,True,en,0
3421,4,1,0,Internals,zcbenz,2015-11-13T05:53:55Z,1539,19,12,0,"This PR imports chrome_paths from Chromium, which includes lots of system paths.

Close #3413.
",95,True,en,0
3420,3,1,0,Externals,deepak1556,2015-11-13T04:29:59Z,28,4,5,0,"Fixes #3394
Fixes #3380
Ref #3413
",34,False,en,0
3415,12,0,0,Internals,zcbenz,2015-11-13T03:21:45Z,594,438,111,0,"Our major way of using built-in modules now becomes this:

``` javascript
const {app, BrowserWindow} = require('electron')
```

The old way of `require('app')` is still supported, and users can disable it by calling `electron.hideInternalModules()`.

Fix #387.
Refs #2544.
",273,True,en,1
3412,1,2,5,Externals,skhameneh,2015-11-13T04:11:00Z,12,0,1,0,"Allow use of flags that must be set before V8 is initialized, such as
""--harmony_proxies""

Example:

```
electron --js-flags=""--harmony_proxies --harmony_collections"" .
```
",173,False,en,0
3409,1,1,0,Externals,preco21,2015-11-12T04:49:51Z,34,5,3,0,"- Update as upstream
",21,True,en,0
3400,8,6,0,Internals,zcbenz,2015-11-11T03:29:02Z,175,106,15,0,"e.g. `min-width` => `minWidth`. Old styles are still accepted for compatibility.

Fix #2397.
Refs #2544.
",105,True,en,0
3398,4,1,0,Externals,preco21,2015-11-11T02:06:47Z,183,126,8,0,"- Update as upstream
- Improve grammar (small changes)
",55,False,en,0
3397,1,1,0,Externals,preco21,2015-11-11T02:06:12Z,2,2,1,0,"- In `ipc-main.md`
",19,True,en,0
3392,1,1,0,Externals,Mingling94,2015-11-11T14:57:30Z,14,4,1,0,"Inspired by https://github.com/atom/electron/issues/1877#issuecomment-145488955

Such documentation that would have been helpful to me as I was learning how to use WebdriverIO.
",177,True,en,0
3385,1,1,0,Externals,levrik,2015-11-10T12:25:49Z,1,1,1,0,,0,False,en,0
3384,7,0,0,Internals,zcbenz,2015-11-10T09:29:07Z,236,219,44,0,"This PR renames `ipc` module to `ipc-main` in main process, and `ipc-renderer` in renderer process. For the `ipc-renderer` module an extra `event` object is added when emitting events, so it can match the style of `ipc-main` module.

The old `ipc` module is kept for compatibility, but a deprecation warning will show.

Fix #2600.
Refs #2544.
",343,True,en,0
3382,1,1,0,Externals,felixrieseberg,2015-11-10T09:30:08Z,39,0,1,0,"Nothing fancy - just a little markdown documenting the Notification API.
",73,True,en,0
3372,3,0,0,Internals,zcbenz,2015-11-09T14:40:36Z,118,54,8,0,"Refs #2544.
",12,True,fr,0
3368,2,5,0,Externals,tejaspathak,2015-11-09T08:37:00Z,44,3,1,1,"- Currently libchromiumcontent is downloaded by default.
- Now developer can choose to provide local libchromiumcontent src, shared and static path

Tries to solve similar issue noted in: [atom/electron#3310]
",209,False,en,0
3356,4,6,2,Internals,zcbenz,2015-11-06T13:25:28Z,136,13,12,0,"Instead of abrupting the whole program immediately, we should close all
windows and release all native resources gracefully on exit. This avoids
possible crashes.

Fix #3350.
",175,False,en,0
3355,1,1,0,Externals,preco21,2015-11-06T03:31:44Z,4,3,1,0,"- Small changes (added issue in react devtools)
",48,True,en,0
3354,6,4,1,Externals,nishanths,2015-11-11T14:44:05Z,74,0,7,5,"Resolves #3094
",15,True,et,0
3344,3,8,12,Externals,deepak1556,2015-11-17T10:53:35Z,436,17,12,11,"Fixes #3330 

Depends on https://github.com/atom/brightray/pull/162
",68,True,en,0
3343,1,0,0,Internals,zcbenz,2015-11-05T14:41:52Z,10,8,1,0,"On some machines this call will fail and CHECK will abort the application.

Fix #3276.
Fix #3191.
",98,True,en,0
3328,5,1,0,Internals,zcbenz,2015-11-04T11:24:32Z,110,49,19,0,"When Electron is quitting some native resources are not cleared after destroying the JavaScript environment, so it may happen that some native events which are emitted during exiting would try to execute JavaScript code, resulting in crashes.

This PR makes sure all native resources get freed on exit to fix that.

Close #3208.
Close https://github.com/atom/atom/issues/9118.
",377,True,en,0
3326,3,1,0,Externals,preco21,2015-11-04T09:13:14Z,19,2,3,0,"- Update as upstream
",21,True,en,0
3323,1,3,0,Externals,joaomoreno,2015-11-04T07:14:36Z,0,7,1,0,"When using `--force-renderer-accessibility`, one can enable some accessibility in Electron in Windows. Keyboard accessibility is not there, unfortunately.

The `kDisableLegacyIntermediateWindow` Chromium switch seems to be the one disabling it.

I found that this switch is being set in Electron due to an issue in moving and resizing frameless windows. The comment also mentions that the issue could have been been fixed in Chrome 38, which is rather old. The issue seems fixed since after removing the flag I can move and resize frameless windows.

Here's Inspect.exe happy to have found some keyboard accessible HTML elements within Electron:

![image](https://cloud.githubusercontent.com/assets/22350/10925818/64bced28-8246-11e5-85c7-116e3a85d42d.png)
",756,True,en,0
3313,1,2,3,Externals,kevinsimper,2015-11-05T02:12:04Z,2,0,1,1,,0,False,en,0
3309,6,0,0,Internals,zcbenz,2015-11-03T09:58:03Z,57,35,9,0,,0,False,en,0
3308,2,2,1,Externals,ReadmeCritic,2015-11-04T02:08:13Z,3,3,1,0,"Created with https://github.com/dkhamsing/frankenstein
",55,True,en,0
3292,1,1,0,Externals,ggamel,2015-11-02T12:30:47Z,7,7,1,1,"Fix minor grammatical mistakes, correct sentence structures, and improve readability.
",86,True,en,0
3291,1,2,0,Externals,maxcnunes,2015-11-02T11:10:50Z,20,2,2,1,"This way copy all properties available in the error object and keep the real stack trace

Fix the problem described here #3089

Before my changes:
![before](https://cloud.githubusercontent.com/assets/680356/10866438/c756b438-8015-11e5-95ad-fd651af4a232.png)

After my changes:
![after](https://cloud.githubusercontent.com/assets/680356/10866437/c7531fee-8015-11e5-9e15-f8f6b3ac5354.png)

If you prefer I can try apply the same approach used for `object` type. Also I think this approach should be applied for the `exception` type.
",531,True,en,0
3288,1,1,0,Externals,deepak1556,2015-11-02T13:20:44Z,177,22,10,1,"Fixes #3255 

Depends on resolving https://github.com/zcbenz/native-mate/commit/b7387da0854b20d376fdae0d93a01f83d080668d#commitcomment-14109076

Also have only converted data required for handling pepper flash menu in the `contextmenuconverter`
",245,True,en,0
3282,1,6,0,Externals,bureken,2015-11-02T10:33:27Z,4,4,4,2,,0,False,en,0
3281,2,2,1,Externals,MrSurly,2015-11-02T11:08:47Z,3,1,1,2,"Clarification of showErrorBox behavior on Linux if called before app `ready` event.
",84,True,en,0
3278,1,3,0,Externals,michaelzoidl,2015-10-30T11:52:03Z,1,1,1,0,"Seems like somebody changed the code but forgot to update the docs. The `autoUpdater`-Module doesn't support anymore the `quitAndUpdate` function, instead it was renamed to `quitAndInstall`.
",191,True,en,0
3275,1,4,0,Internals,as-cii,2015-10-30T12:02:34Z,2,1,1,0,"While evaluating startup times, I've noticed that `fs.readFileSync` was not being optimized by V8:

![screen shot 2015-10-30 at 10 29 25](https://cloud.githubusercontent.com/assets/482957/10842367/56119b28-7ef1-11e5-8868-b2aed310635f.png)

This won't probably make a huge difference, but this function is basically used everywhere and the tradeoff for allowing the optimization seems super reasonable.

/cc: @zcbenz 
",417,True,en,0
3272,1,1,0,Externals,sk2,2015-10-30T06:41:52Z,1,1,1,0,"Typo in the function name
IsDocumentEdited -> isDocumentEdited

Uncaught Exception:
TypeError: mainWindow.IsDocumentEdited is not a function
",141,False,en,0
3270,2,1,0,Externals,preco21,2015-10-30T02:24:49Z,40,12,2,0,"- Update as upstream
",21,True,en,0
3261,1,1,0,Externals,preco21,2015-10-29T05:53:02Z,1,1,1,0,"- Remove extra spaces in `app.md`
",34,True,en,0
3256,3,10,0,Externals,omrilitov,2015-10-29T02:41:12Z,24,6,5,0,"As seen in https://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx
WPARAM is unsigned and LPARAM is signed
",131,False,en,0
3254,1,1,0,Externals,templateK,2015-10-29T02:54:56Z,14,24,1,0,"boolean parameter **""b""** at function `IsSwitchEnabled()`  is unnecessary
because currently  there's no _turn off_ logic of **ExperimentalFeatures**.
So, I simplyfied the `IsSwitchEnabled()` and if statements at `EnableWebRuntimeFeatures()` accordingly.
",254,False,en,0
3251,5,5,6,Externals,deepak1556,2015-10-31T06:18:58Z,180,6,10,2,"Fixes #3229 
",13,True,en,0
3250,12,20,0,Internals,zcbenz,2015-10-29T02:20:51Z,520,104,19,0,"Close #1362
Close #625
### Event: 'login'

Returns:
- `event` Event
- `webContents` [WebContents](web-contents.md)
- `request` Object
  - `method` String
  - `url` URL
  - `referrer` URL
- `authInfo` Object
  - `isProxy` Boolean
  - `scheme` String
  - `host` String
  - `port` Integer
  - `realm` String
- `callback` Function

Emitted when `webContents` wants to do basic auth.

The default behavior is to cancel all authentications, to override this you
should prevent the default behavior with  `event.preventDefault()` and call
`callback(username, password)` with the credentials.

``` javascript
app.on('login', function(event, webContents, request, authInfo, callback) {
  event.preventDefault();
  callback('username', 'secret');
})
```
",744,False,en,0
3249,3,7,0,Externals,antoinepairet,2015-10-28T16:58:22Z,1,6,1,0,"The doc previously stated `only GUI-unrelated` modules are available to the renderer process. I think it should be `only GUI-related`
",134,True,en,0
3247,1,1,0,Externals,matiasinsaurralde,2015-10-28T06:52:30Z,30,0,1,0,,0,False,en,0
3240,2,1,0,Externals,hokein,2015-10-27T12:52:43Z,21,3,1,0,"This PR relands the reverted commit in #3234.

Fixes:
- Remove adding `*.*` to filename in a save dialog when the file filter is `*` or empty.
- Remove adding `.*` to filename in callback, see 

```
  dialog.showSaveDialog(mainWindow, {
    defaultPath:'F:\\test.png',
    filters: [
      {name:'all', extensions: ['*']},
    ]
  }, function(path) {
    console.log(path); // output: F:\\test.png.*
  });
```
",410,True,en,0
3236,1,0,0,Internals,zcbenz,2015-10-27T07:05:11Z,1,1,1,0,"Close #3232.
",13,True,en,0
3235,3,1,0,Externals,sitdh,2015-10-27T06:31:01Z,73,0,1,0,,0,False,en,0
3234,1,7,0,Externals,hokein,2015-10-27T06:30:35Z,0,6,1,0,"Fixes #3216.

But since the save dialog and open dialog share the same code, the PR also affects the behavior of open dialog. The file extension component(see below) in open dialog will not show any more if no `filter` is set.

![image](https://cloud.githubusercontent.com/assets/2557445/10750208/a076526c-7cad-11e5-880b-2b171d491e14.png)
",339,True,en,0
3231,2,6,0,Externals,omrilitov,2015-10-27T12:48:19Z,102,0,7,0,"As discussed here https://github.com/atom/electron/issues/3217
Hooked into the windows messages and emits them through the window instance with the event 'message'
",164,False,en,0
3227,1,2,0,Externals,nekuz0r,2015-10-27T03:37:27Z,5,0,2,0,"webContents.loadUrl options to specifiy/override HTTP headers.

``` javascript
webContents.loadUrl('https://www.example.com', {
  extraHeaders: 'Accept-Encoding: gzip;q=0,deflate;q=0'
});
```
",192,True,en,0
3215,1,0,0,Internals,zcbenz,2015-10-26T09:13:20Z,2,1,1,0,"The remote method always assumes the existence of the remote object but doesn't keep a reference to it, so if we only keep the reference of a remote method we will get into troubles once the remote object is
garbage collected.

We should probably fix this in remote module, but since most things are already working quite good, I'm using the work-around for now.

Fix #3139.
",375,False,en,0
3213,1,1,0,Externals,everblut,2015-10-26T08:17:49Z,63,1,2,0,":memo: 
",8,True,en,0
3212,1,1,0,Externals,everblut,2015-10-26T05:01:37Z,37,0,1,0,":memo:
",7,True,en,0
3207,1,0,0,Externals,diegowifi,2015-10-25T20:29:35Z,0,1,1,0,":memo: 
",8,True,en,0
3203,1,1,0,Externals,etiktin,2015-10-26T02:34:13Z,1,0,1,0,"The `did-fail-load` event returns an error code and error description. The error description is at least sometimes empty (e.g. when the error code is -102 on Windows), so you're left with an error code without knowing what happened. So I add a link to Chromium's net_error_list.h.
",281,True,en,0
3200,1,1,0,Externals,jhen0409,2015-10-26T01:19:50Z,19,7,1,1,,0,False,en,0
3198,1,1,6,Externals,deepak1556,2015-10-26T08:15:59Z,6,3,1,1,"Fixes #3193 
",13,True,en,0
3192,3,1,0,Externals,preco21,2015-10-24T07:46:59Z,97,92,7,0,"- Update as upstream
- Improve grammar
- Some fixes
",52,False,en,0
3188,2,1,0,Externals,alexandrubau,2015-10-23T12:13:00Z,2,2,1,0,"Updated docs to better understand how to use electron-rebuild on Windows
",73,True,en,0
3186,9,0,0,Internals,zcbenz,2015-10-23T12:31:20Z,246,331,16,0,"This PR removes some unused code and makes code layout look cleaner.
",69,True,en,0
3184,3,0,0,Internals,zcbenz,2015-10-23T05:53:12Z,33,7,9,0,"Also adds a setBackgroundColor method.

Refs #861.
",51,True,en,0
3179,1,1,0,Externals,deepak1556,2015-10-23T02:36:38Z,31,7,3,0,"Fixes #3176 
",13,True,en,0
3178,1,1,0,Externals,deepak1556,2015-10-23T02:36:06Z,8,7,2,0,"Fixes #2741 

this lets node to handle `--debug-brk` and will now break at `browser/init.js` . There is a caveat `node-inspector` will error out with

```
Page.getResourceContent failed.
Error: ENOTDIR: not a directory, open '<path>/out/D/resources/atom.asar/browser/lib/init.js'
```

thats because `fs` module in node-inspector will not recognize asar archive, this can be easily workaround by running node-inspector with electron as node runtime.

``` shell
export ATOM_SHELL_INTERNAL_RUN_AS_NODE=1
<path>/electron <path>/bin/node-inspector
```
",547,True,en,0
3175,15,1,0,Internals,zcbenz,2015-10-23T01:13:57Z,176,255,17,0,"This PR fixes some problems when using `app.makeSingleInstance` on POSIX systems, and also changed the behavior for a little bit:
- The original command line of new instances are passed instead of the one modified by Chromium.
- The command line is passed as `Array`.
- The return value of `makeSingleInstance`'s callback is now ignored, on POSIX systems it can only return true when app is shutting down, and we have ensured it in Electron.
",442,False,en,0
3173,1,1,0,Externals,tommoor,2015-10-22T03:10:30Z,1,2,1,0,"We found that in the latest version of Electron the ptime and rept parameters are no longer returned, but a new GUID parameter is?
",131,True,en,0
3172,1,1,0,Externals,thomasjfox1,2015-10-22T03:08:30Z,11,11,1,0,"Removed 'a' from line 82 in the documentation on submitting to the Mac App Store. 
",83,True,en,0
3169,2,0,0,Internals,zcbenz,2015-10-21T13:23:25Z,19,15,7,0,"Turns out #2889 is caused by memory corruption when cleaning timer.

Fix #2889.
",80,True,en,0
3168,1,10,11,Externals,deepak1556,2015-10-22T06:13:37Z,41,1,4,0,"Part of fixes for #861.
",24,True,en,0
3165,1,1,0,Externals,roadev,2015-10-21T05:28:48Z,33,33,5,0,"Grammatical corrections for spanish translations at api, styleguide and README files.
",86,True,en,0
3163,1,0,0,Internals,zcbenz,2015-10-21T01:53:02Z,116,104,4,0,"Previously we implemented draggable region by tracking mouse position, it is buggy and causing some problems. But it is also interesting that this didn't cause troubles until recently.

Fixes #3160.
",199,True,en,0
3158,1,1,0,Externals,ungoldman,2015-10-20T22:58:16Z,1,1,1,0,"`mainWindow.openDevTools()` has been deprecated in favor of `mainWindow.webContents.openDevTools()` (see https://github.com/atom/electron/issues/3125#issuecomment-148975593). This change should be reflected in the quick start guide.
",233,True,en,0
3157,1,2,0,Externals,IonicaBizau,2015-10-20T17:20:11Z,3,3,1,0,"Some little fixes from my side. :book: :dizzy: 
",48,True,en,0
3156,3,1,0,Externals,preco21,2015-10-20T22:52:11Z,41,8,4,0,"- Update as upstream
- Small fixes
",35,False,en,0
3153,3,0,0,Internals,zcbenz,2015-10-20T05:47:17Z,11,4,2,0,"- `ELECTRON_ENABLE_LOGGING`: same with `--enable-debugging`
- `ELECTRON_ENABLE_STACK_DUMPING`: enable dumping stack trace to console when crashing
",147,False,en,0
3150,1,0,0,Externals,jlord,2015-10-20T03:17:30Z,3,2,1,0,"This updates the HTML in the Quick Start tutorial to what's now in `electron-quick-start` per https://github.com/atom/electron-quick-start/pull/1

> Minor tweaks to show the Chrome version in `index.html`, `io.js` -> `node`, and also a few formatting tweaks.
",259,True,en,0
3149,1,1,0,Externals,jlord,2015-10-20T03:17:23Z,21,0,2,0,"I created a repository based on the Quick Start Tutorial, [`electron-quick-start`](https://github.com/atom/electron-quick-start) to save people the step of copying and pasting the code from the tutorial. It makes going from 0 to Electron app :dash: ... hopefully that emoji means fast.

This PR adds links to that in 2 places:
- A brief mention on the Electron main `README`.
- In the Quick Start tutorial itself there is a slightly longer mention that includes the command line instructions.
",493,True,en,0
3147,1,1,0,Externals,deepak1556,2015-10-20T02:29:49Z,35,0,4,0,"Fixes #3144 
",13,True,en,0
3145,37,25,13,Externals,paulcbetts,2015-10-22T06:18:32Z,1924,0,12,2,"This PR implements a new proposed API on `app` which allows Electron apps on Windows and Linux to be single-instance apps (and receive the command-line parameters from secondary invocations).
### Proposed API

``` js
import app from 'app';

app.on('ready', () => {
  shouldQuit = app.makeSingleInstance((cmdLine) => {
    // TODO: Handle command line from secondary instance
    return true;
  });

  if (shouldQuit) app.quit(0);
});
```

When apps are invoked as the secondary instance (i.e. an instance is already running), `makeSingleInstance` will send the command-line arguments to the primary instance and exit the app. This means that `makeSingleInstance` should be called as early as possible (i.e. before `ready`), so we'll set it up for that to be possible
## TODO:
- [x] Bring the code over from Chrome that implements this
- [x] Make the code compile on Windows
- [x] Make the code compile on Linux
- [x] Wire it up to `app`
- [x] Fix all the TODOs
- [x] Fix crash on OS X / maybe Linux
- [x] Ensure communication window isn't subject to UIPI problems on Win32
- [x] Verify on Linux
- [x] Code Cleanups
- [x] :memo:
",1128,False,en,0
3141,3,1,0,Externals,jhen0409,2015-10-19T14:09:06Z,6,4,2,0,,0,False,en,0
3132,1,1,0,Externals,princejwesley,2015-10-19T08:59:47Z,3,1,1,0,"Return `''`(empty) string if encoding provided and `new Buffer(0)` otherwise.
",78,True,en,0
3129,1,1,0,Externals,brandoncash,2015-10-19T11:11:27Z,3,3,3,1,"Tiny fix for a typo in the tray. Changes NotfiyDropFiles into NotifyDropFiles.
",79,True,en,0
3128,1,1,0,Externals,hokein,2015-10-19T08:40:45Z,28,6,5,1,"Part of #3121.
",15,True,en,2
3120,7,0,0,Externals,paulcbetts,2015-10-20T05:48:12Z,30,1,4,3,"This PR along with https://github.com/atom/brightray/pull/157, adds a new API to app:

```
app.allowNTLMCredentialsForAllDomains(true | false);
```

We are discovering that many domains are incorrectly configured, so that NTLM will not be implicitly passed to a web server because Windows (via [IInternetSecurityManager::MapUrlToZone](https://msdn.microsoft.com/en-us/library/ms537133%28v=vs.85%29.aspx)) will decide it isn't inside the local domain. This PR allows app developers to say, ""Don't care about URLs, always send NTLM if asked"". If this method is not called, the preexisting behavior will be used

We actually set up an in-house Domain Controller to test this, it appears to be :gem:
",696,True,en,0
3118,1,1,0,Externals,learningjs,2015-10-17T08:10:06Z,1,1,1,0,":memo:

Replace webp with web in frameless-window.md .
",55,True,en,0
3117,2,3,6,Externals,ggamel,2015-10-17T00:56:32Z,32,31,1,0,"Adjusted tutorial body copy and headings to improve readability, clarify sentences, and fix some (minor) grammatical missteps.
",127,True,en,0
3115,1,1,0,Externals,romankl,2015-10-16T21:21:54Z,2,2,2,0,"Commit 691d8dd replaced ""Mac"" with ""OS X"". This commit replaces some
other occurrences.
",88,False,en,0
3111,8,1,0,Externals,preco21,2015-10-18T13:45:25Z,353,15,8,2,"- Add `app.md` translation into ko-KR
- Some fixes in `app.md`
- Improve grammar
- Some fixes for readability
",110,False,en,0
3109,2,1,0,Externals,fplucas,2015-10-16T12:28:34Z,54,1,2,0,,0,False,en,0
3108,3,0,0,Internals,zcbenz,2015-10-16T10:51:45Z,125,9,9,0,"Instead of waiting for our build machine to get ready, I uploaded the binaries of libchromiumcontent from my local machine so we can make the MAS build get ready for testing.

I also added a simple guide on how to submit an Electron app to Mac App Store.
",255,True,en,0
3103,1,1,0,Externals,bengotow,2015-10-16T12:21:46Z,17,1,2,0,"It's very difficult to understand and trace `Calling a callback of released renderer view` errors, which are caused by passing functions to `remote` and then releasing the window.

These changes make it easy to debug and fix these by changing the ""ID"" used to track the functions. The callbacks-registry uses `(new Error).stack` to identify the file and line number where the function was passed to a remote call, and includes that in the ID.

index.html:

```
      var callback = function() {
        console.log(""Run some code!"");
      };
      app.on('browser-window-focus', callback); << line 16
```

The new exceptions look like this:

![image](https://cloud.githubusercontent.com/assets/1037212/10531948/19f92302-736d-11e5-84f5-04c502775b9a.png)
",754,True,en,0
3101,1,1,0,Externals,fplucas,2015-10-16T01:25:35Z,69,1,2,0,,0,False,en,0
3097,1,1,0,Externals,fplucas,2015-10-15T15:14:30Z,70,2,2,0,,0,False,en,0
3092,7,0,0,Internals,zcbenz,2015-10-15T11:29:29Z,154,12,7,0,,0,False,en,0
3084,1,1,0,Externals,kokdemo,2015-10-14T20:58:27Z,49,0,2,0,,0,False,en,0
3082,1,1,0,Externals,nikarc,2015-10-14T10:42:19Z,1,1,1,0,"Fix typo on line 38
",20,True,en,0
3080,1,6,23,Externals,hokein,2015-10-16T01:52:43Z,210,0,8,1,"Fixes #2937.
",13,True,en,0
3076,1,1,0,Externals,kokdemo,2015-10-14T01:15:41Z,27,0,1,0,,0,False,en,0
3073,2,1,0,Externals,wangdashuaihenshuai,2015-10-13T08:13:37Z,68,0,1,0,"add doc-translations/zh-CN/api/ipc-main-process
",48,True,en,0
3071,1,1,0,Externals,alex-sherwin,2015-10-13T01:32:22Z,1,1,1,0,,0,False,en,0
3070,1,1,0,Externals,deepak1556,2015-10-13T01:05:14Z,14,0,2,0,"Fixes #2967 
",13,True,en,0
3064,4,1,0,Externals,preco21,2015-10-12T01:42:40Z,32,22,4,0,"- Update as upstream
- Improve grammar
",39,False,en,0
3062,2,1,0,Externals,kokdemo,2015-10-12T01:39:16Z,109,0,1,0,,0,False,en,0
3061,1,4,0,Externals,flying-sheep,2015-10-11T13:45:36Z,3,1,1,0,"they got updated recently.

sadly it still doesn‚Äôt seem to work. `~/.config/DevTools Extensions` contains just `[]`

/edit: removing the file and rerunning makes it contain the correct path, but the extension still doesn‚Äôt seem to load.
",241,True,en,0
3060,3,1,0,Externals,etiktin,2015-10-11T07:19:07Z,3,20,2,0,"- It seems that whatever issues we had with using the original implementation of node for `console.*` calls and for `process.std*.write` on Windows were solved.
  So I removed the patch.
  Tested it with cmd, double click (no console attached) and used spawn and exec, it seems to work well including unicode. The only thing I noticed that still doesn't work is colors.
- Block all internal logs when running without `--enable-logging`. 
  This resolves #3058 (@deepak1556 thanks for the tip :smile: ).
",503,False,en,0
3059,6,1,0,Externals,osanyin,2015-10-11T07:18:35Z,347,4,3,0,,0,False,en,0
3056,4,3,2,Externals,etiktin,2015-10-10T09:32:15Z,16,6,4,0,"- Calls for `console.*` on browser process are printed with no need for `--enable-logging`
- The output is without the logging prefix
- The caret in the terminal is always after the last output
- The first output starts on a new line and not at the prompt
- console.\* from renderer are not printed to cmd
- Added a missing '\n' in the default_app help output

This resolves #3032, except for making sure that error logs are not printed when running without `--enable-logging`.

Before:
![before](https://cloud.githubusercontent.com/assets/4381579/10409135/41640606-6f1b-11e5-8f5b-a26fe2ecddf1.png)
After:
![after](https://cloud.githubusercontent.com/assets/4381579/10409137/4a67091a-6f1b-11e5-9764-ec4018d4ee5e.png)
",717,False,en,0
3055,1,1,0,Externals,kokdemo,2015-10-10T04:25:48Z,315,0,1,0,,0,False,en,0
3048,1,2,0,Externals,deepak1556,2015-10-09T13:05:57Z,8,2,1,0,"Fixes #3034 

Related https://github.com/atom/brightray/pull/154
",65,True,en,0
3046,8,3,0,Externals,mariozaizar,2015-10-10T01:13:53Z,169,55,4,0,"- [x] Common issues fixed: using anglicisms, bad markdown,  +80 long lines, missing accents.
- [x] /docs-translations/es/README.md
- [x] /docs-translations/es/styleguide.md
- [x] /docs-translations/es/tutorial/application-distribution.md
- [ ] ...
",248,False,en,0
3040,2,1,0,Internals,theojulienne,2015-10-09T04:25:11Z,11,2,2,0,"On previous versions of OS X, our detection of VoiceOver being enabled and disabled worked correctly, which ensured that the ""Speak selected text"" functionality of OS X used the ""clipboard copy"" fallback. In 10.11, that method started showing VoiceOver as active when using this method, even when it's not enabled.

This patch fixes a compile error on OS X, and ensures that we only activate VoiceOver when the system preference is also enabled.

/cc https://github.com/atom/atom/issues/3288
",492,True,en,0
3036,5,2,0,Externals,renatoalencar,2015-10-09T02:17:02Z,192,0,1,0,,0,False,en,0
3033,1,1,0,Externals,deepak1556,2015-10-08T08:16:23Z,0,1,1,0,"Fixes #3031 
",13,True,en,0
3030,1,3,0,Internals,zcbenz,2015-10-08T02:31:41Z,111,0,2,0,"Leaving `SDKROOT` empty will make Xcode to use the oldest SDK version installed, causing errors on machines that have multiple versions of SDK installed.
",154,True,en,0
3027,2,1,0,Externals,stevekinney,2015-10-08T02:47:39Z,2,2,1,0,"This pull request contains two tiny adjustments to the `global-shortcut` documentation. Notably, adding a semicolon to a line that didn't have one in an attempt to keep the style consistent.
",191,True,en,0
3025,2,8,2,Externals,janwiemers,2015-10-08T08:26:05Z,3,0,1,0,"This pull request implement the idea described in #1877
It worked quite well together with the webdriverio module.

There are currently no tests included because I didn't found the right place.
Maybe someone can point me to the right location so I can attach the tests to the pull request.

cheers Jan
",302,False,en,0
3024,3,1,0,Externals,preco21,2015-10-08T02:47:00Z,11,11,1,0,"- Improve grammar
- Fix small typos

in `auto-updater.md`.
",59,False,sv,0
3020,1,2,0,Externals,hokein,2015-10-08T02:37:09Z,14,2,2,0,"We should not always save switch path as ascii string, which will not be handled well on Windows.

This patch also corrects other switches(log-net-log, client-certificate) which using `FilePath`. I have checked the code of getting these switches, all of them are correct(using `command_line->GetSwitchValuePath`)

Fixes #2981.
",327,True,en,0
3017,1,1,0,Externals,Meyito,2015-10-08T01:37:21Z,219,6,4,0,"Translations to spanish of this API files:
- synopsis
- process
- chrome-command-line-switches
  And update of the readme file in spanish.
",139,False,en,0
3015,6,1,0,Internals,joshaber,2015-10-09T04:31:20Z,4,3,4,2,":warning: This is dependent on https://github.com/atom/crashpad/pull/1 and https://github.com/atom/brightray/pull/153. :warning: 

Get it building with Xcode 7.
",161,True,en,0
3010,1,1,2,Externals,deepak1556,2015-10-08T05:52:22Z,55,0,5,1,"Fixes #940 

One possible way as discussed with @zcbenz 
",57,True,en,0
3005,3,1,0,Externals,preco21,2015-10-06T13:27:50Z,33,13,6,0,"- Update as upstream
",21,True,en,0
2998,2,1,0,Externals,brenca,2015-10-06T08:56:26Z,5,4,2,0,"I've changed the `KeyDown` event to `RawKeyDown` on the native side, this doesn't break any existing functionality but allows us to send special keys like Delete, beacuse those don't require `char` events, but the chromium side API seems to require `text` to be specified in these cases (in fact when I tested this with a Delete and a Backspace after each other, if I include a `char` event, the second one wouldn't fire, might be because it actually inserts a non-visible character), and I changed the 0x7F unicode keycode to match with the intended `VKEY_DELETE` instead of `VKEY_BACK`.
",589,True,en,0
2997,19,3,0,Internals,zcbenz,2015-10-06T08:54:45Z,558,338,17,0,"Previously the way we handle minimum and maximum window is a mess and it is easy to make errors, this PR removes duplicate code on handling window size and content size, and makes the logic of size related methods more simpler. 

Fixes #2956.
Fixes #2945.
Fixes #2552.
Fixes #996.
",281,True,en,0
2994,3,0,0,Externals,etiktin,2015-10-06T08:55:25Z,18,16,4,0,"The compatibility section mentions specific versions of node. The problem with that, is that the information becomes obsolete really fast (for example, the current doc says that Electron uses io.js v3.1.0 which is no longer the case). So instead I changed it to something that is more general and should be accurate no matter what version of Node/Electron you use.

_Edit:_ Also changed io.js references to Node.js in the rest of the English docs.
",448,True,en,0
2993,2,0,0,Externals,etiktin,2015-10-06T08:55:16Z,1,1,1,0,"Removed a trailing comma.
",26,True,en,0
2992,2,1,0,Externals,etiktin,2015-10-06T08:55:10Z,4,2,1,0,"Fixed the `loaded` example according to [this](#2984 %28comment%29) comment.
",77,True,en,0
2986,1,1,0,Externals,hansrwindhoff,2015-10-05T03:41:57Z,4,2,1,0,,0,False,en,0
2985,2,1,0,Externals,etiktin,2015-10-05T07:09:24Z,36,16,2,0,"This resolves #2498.

Sometimes when restoring the window from minimize or maximize, the restored size was incorrect. To solve this, we're keeping track of the last normal size and use it when restoring.
",204,True,en,0
2982,4,0,0,Internals,zcbenz,2015-10-04T12:48:27Z,264,2,6,0,"Fixes #1776.
",13,True,en,0
2980,3,3,0,Internals,zcbenz,2015-10-04T09:18:35Z,6,86,7,0,"This relies on https://github.com/atom/brightray/commit/bbb9287337f8b7958b001be35b993c21cd573109.

Chrome 45 already has excellent support of high DPI on Linux, this PR removes our DPI handling code and relies on Chromium to setting up high DPI configurations.

Fixes #1150, fixes #2523.
",288,True,en,0
2979,3,3,0,Externals,etiktin,2015-10-05T07:10:27Z,33,4,3,1,"The minimum size and maximum size that frameless view used, were incorrect. The sizes are treated as if they don't include border, but they did so it actually increased the window size on resize (see the reproduction code in #2945). The fix was to normalize the sizes from window size to frameless size (removing border etc.).

This resolves #2945. ~~It also partially fixes #1806. The reason I say partially is because the issue also mention some issues with hidpi, and I'm not sure if this fixes that as well.~~
_Edit:_ It also resolves #1806. At first I wasn't sure it also solved the second issue mentioned there about resizing when in hidpi doubling window size, but I manged to test it using `--force-device-scale-factor=2` and it seems to have solve it.

This code was only tested on Windows. If it doesn't work on Linux or OS X, we can easily make it work only for Windows by moving the code from `frameless_view.cc` to `win_frame_view.cc`.
",949,True,en,0
2978,1,1,0,Externals,chriswmercer,2015-10-03T20:19:57Z,1,1,1,0,"I've tweaked a bit of grammar that was bugging me. Mostly so I could learn a bit about how GitHub works. Hope that's OK.
",121,True,en,0
2977,1,1,0,Externals,paulcbetts,2015-10-06T09:02:41Z,2,2,1,2,"Vista crashes on startup because Win7 touch APIs aren't present - this is fine, but we want to tell people out of the gate that it won't work
",142,True,en,0
2976,3,1,0,Internals,zcbenz,2015-10-03T13:20:20Z,43,23,5,0,"The module system of Node tends to iterate every parent folder of the `require`d module and add everyone of them to search paths, it makes sense for Node, but in Electron this mechanism may happen to override app's modules with unrelated ones when user's system has lots of Node modules installed.

A classic problem is users have third party `dialog` module installed somewhere, resulting in `require('dialog')` calls in app not working.

This PR solves this problem by limiting the propagated paths to be inside the `process.resourcesPath`, so packaged app can avoid accidentally using modules installed in user's machine. And for `require` calls that explicitly use modules outside the app, there will be no limitation, otherwise unexpected behaviors may happen.

Fixes #2626.
",780,True,en,0
2975,2,1,0,Externals,preco21,2015-10-03T12:18:59Z,38,11,5,0,"- Update as upstream
- Add `supported-platforms.md`
",52,False,en,0
2974,2,8,0,Internals,zcbenz,2015-10-03T08:15:45Z,16,10,2,0,"This PR turns off Chromium's logging by default unless `--enable-logging` is specified. The Chromium's logging is quite low-level and is only useful for Electron developers, so disabling it by default should provide a better experience.

Also on the technical side the logging mechanism is initialized before user's app is loaded, by making logging opt-in is the only way to disable logging in users' apps.

Closes #2417.
",422,True,en,0
2972,1,2,0,Externals,r0fls,2015-10-03T05:42:54Z,7,0,1,0,"Proposed fix for issue #2964
",29,True,en,0
2965,1,1,0,Externals,jhen0409,2015-10-02T17:15:33Z,1,1,1,0,,0,False,en,0
2963,8,20,27,Externals,hokein,2015-12-08T11:46:02Z,918,0,14,66,"Fixes #1380 , the PR relies on atom/brightray#148, atom/libchromiumcontent#156.
### `desktopCapturer.getSources(options, callback)`
- `options` Object, properties:
  - `types` Array - An array of String that enums the types of desktop sources.
    - `screen` String - Screen
    - `window` String - Individual window
  - `thumbnailSize` Object (optional) - The suggested size that thumbnail shouldbe scaled.
    - `width` Integer - The width of thumbnail. By default, it is 150px.
    - `height` Integer - The height of thumbnail. By default, it is 150px.
- `callback` Function - `function(error, sources) {}`
  - `error` Error
  - `sources` Array - An array of Source

**ToDo**
- [x] Test on OS X
- [x] Test on Windows
- [x] Test on Linux
- [x] Add doc
",754,False,en,0
2960,4,1,0,Externals,preco21,2015-10-02T04:33:43Z,36,10,4,0,"- Update as upstream
- Improve grammar
- Small changes
",55,False,en,0
2950,2,0,0,Internals,zcbenz,2015-10-01T13:01:51Z,5,13,4,0,"Fixes #2935.
",13,True,en,0
2948,7,0,0,Internals,zcbenz,2015-10-01T08:55:12Z,206,161,19,0,"This PR moves `devtools-xxx` events and the `devToolsWebContents` property from `BrowserWindow` to `WebContents`, making the devtools opened for webview also own a JavaScript object.

This also fixes devtools opened for webview not able to use `remote` module, closes #1456, closes #2896.
",289,True,en,0
2942,1,1,0,Externals,arusakov,2015-09-30T14:55:26Z,2,3,1,0,"BrowserWindow constructor isn't required width and height properties.
",70,True,en,0
2939,1,0,0,Internals,zcbenz,2015-09-30T09:30:16Z,3,1,1,0,"Instead of creating a new remote WebContents object every time, this caches the remote object to  reduce memory usage greatly when calling webview's method.

Fixes #2706.
",171,True,en,0
2933,1,1,0,Externals,deepak1556,2015-09-30T02:43:08Z,100,0,5,0,"Fixes #2687 
",13,True,en,0
2930,1,1,0,Externals,ghost,2015-09-29T05:58:37Z,3,3,1,0,,0,False,en,0
2929,2,1,0,Externals,etiktin,2015-09-29T01:37:10Z,73,34,2,0,"This commit fixes the issue we had with window state events (maximize, minimize etc.) not firing when triggered through Aero Snap.
Instead of relying on WM_COMMAND to figure out the window state, which doesn't work with Aero Snap, we now listen to WM_SIZE which does work.

This resolves #1381.
",295,False,en,0
2926,1,1,0,Externals,brenca,2015-09-29T01:25:51Z,5,2,1,0,"Fixes #2919 
",13,True,en,0
2920,11,18,0,Internals,zcbenz,2015-10-14T04:34:46Z,125,33,14,15,"This PR adds a new MAS build which removes usages of private API calls of OS X and can be published to Mac App Store.
- [x] Disable auto updater
- [x] Disable crash reporter
- [x] Remove private API calls in libchromiumcontent
- [x] Verify it can be published to Mac App Store
- [ ] Add a guide on using MAS build

Fixes #249.
",327,False,en,0
2918,4,1,0,Externals,brenca,2015-09-28T04:47:22Z,28,8,2,0,"I've added the option to specify the button field of the WebMouseEvent that was being sent, because without that my example (selecting text with sent events) didn't work - I also set the text and unmodifiedtext fields on Char and RawKeyDown events, because without that the actual ""typed"" key didn't appear in my inputs. I also set the type of the keyCode to char16 and removed the failing condition on an undefined VKEY, because without this I wouldn't have been able to type characters other than the ones on the english keyboard.
",533,True,en,0
2917,4,1,0,Externals,etiktin,2015-09-28T04:17:05Z,3,0,1,0,"On Windows when you open the save dialog and switch the filter, the extension is supposed to change accordingly. It didn't happen with the existing code, because the default extension wasn't set.

Relevant reference can be found [here](https://msdn.microsoft.com/en-us/library/windows/desktop/bb776913%28v=vs.85%29.aspx#file_types) (second paragraph).

This resolves #2915.
",374,True,en,0
2914,3,3,0,Externals,deepak1556,2015-09-28T09:02:23Z,72,1,4,0,"Fixes #2874 

Depends on https://github.com/atom/brightray/pull/145
",68,True,en,0
2913,3,1,0,Externals,preco21,2015-09-27T14:23:31Z,27,29,5,0,"- Update as upstream
- In `screen.md` -> `atomScreen` to `electronScreen`
",74,False,en,0
2912,1,1,0,Externals,fscherwi,2015-09-27T14:40:46Z,2,2,1,0,,0,False,en,0
2910,1,1,0,Externals,nekuz0r,2015-09-27T14:32:12Z,10,2,1,0,"Adds command line switches `--require` or `-r` to be able to preload modules.

i.e: `electron -r babel/register myapp.js`
",122,True,en,0
2905,1,2,0,Internals,joshaber,2015-09-26T13:30:03Z,1,1,1,0,"Use [0.8.0](https://github.com/atom/atom-shell-frameworks/releases/tag/v0.8.0).

This picks up the fix for https://github.com/atom/atom/issues/7061.
",149,True,en,0
2900,2,0,0,Internals,zcbenz,2015-09-25T09:12:53Z,36,22,3,0,"Fixes #2862.
",13,True,en,0
2898,2,3,0,Externals,hokein,2015-09-25T05:33:49Z,4,4,3,0,"I forgot to update the doc after renaming `downloadItem.getURL()` to `downloadItem.getUrl()` in #2840 .
",104,True,en,0
2887,3,0,0,Internals,zcbenz,2015-09-24T07:39:16Z,4,3,2,0,"Closes #2883.
",14,True,en,0
2886,3,3,0,Internals,zcbenz,2015-09-24T06:00:23Z,14,21,4,0,"Closes #2871.
",14,True,en,0
2885,2,1,0,Externals,preco21,2015-09-24T09:00:32Z,35,11,50,0,"In `ko-KR` docs
- Update as upstream
- improve grammar
",55,False,en,0
2882,2,1,0,Externals,paulcbetts,2015-09-24T03:32:15Z,1,36,2,0,"This PR reverts #2328 and should resolve the Tray API :ghost: mysteriously :ghost: not working on Windows. https://github.com/atom/electron/issues/2468#issuecomment-142684129 has the full, sad story

Fixes #2468 
## TODO:
- [x] Make sure this builds
- [x] Code Review
",268,True,en,0
2879,1,3,3,Externals,deepak1556,2015-09-24T10:00:25Z,30,1,3,0,"Fixes #2826 
",13,True,en,0
2877,1,1,0,Externals,kostia,2015-09-24T09:49:35Z,1,0,1,1,"Partially fixes #678.

Without an explicit charset, any non-US-ASCII character used in the HTML or JS code would result in something like this:
![32126d98-6195-11e5-97d2-cd83df5cbdeb](https://cloud.githubusercontent.com/assets/9946/10040715/64a2fb08-61de-11e5-98f8-9b6fcd4cce9e.png)
",283,True,en,0
2875,3,1,0,Internals,zcbenz,2015-09-23T07:58:59Z,7,1,3,0,"It seems that when there are lots of `Buffer` created the garbage collection callback will be called early for some of them and makes the length of `Buffer` become zero. It is very likely a bug of V8, but for now we are just working around it by creating internalized ArrayBuffer when possible.

The Node.js part patch is: https://github.com/atom/node/commit/d64246490d697f387b888391b1aba65032703a0f.

Fixes #2809.
",415,True,en,0
2870,2,0,0,Internals,zcbenz,2015-09-22T16:06:50Z,9,4,4,0,"Closes #2823.
",14,True,en,0
2869,4,0,0,Internals,zcbenz,2015-09-22T15:15:01Z,61,3,9,0,"Closes #2771.
",14,True,en,0
2868,4,0,0,Internals,zcbenz,2015-09-22T13:52:07Z,46,3,8,0,"This attribute allows `window.open` to work in webview tag, fixes #1864.
",73,True,en,0
2866,4,4,0,Internals,zcbenz,2015-09-22T07:10:44Z,13,25,7,0,"It makes more troubles than benefits, and somehow it is slowing message loop down, resulting in `remote` calls being extremely slow sometimes.
",143,True,en,0
2861,1,2,5,Externals,deepak1556,2015-09-23T09:30:26Z,93,0,8,1,"Fixes #2849 

Depends on https://github.com/atom/brightray/pull/143
",68,True,en,0
2852,1,10,3,Externals,deepak1556,2015-09-22T01:59:24Z,21,1,3,0,"Fixes #2831 
",13,True,en,0
2847,1,0,0,Internals,zcbenz,2015-09-21T03:05:45Z,2,0,1,0,"Refs https://github.com/atom/libchromiumcontent/issues/137.
",60,True,en,0
2846,1,1,0,Externals,ajsb85,2015-09-22T15:42:51Z,1,1,1,1,,0,False,en,0
2840,12,8,10,Externals,hokein,2015-09-24T13:04:25Z,501,40,11,4,"Fixes #2491.

This patch indroduces:
- A ~~`session.setOpenDownloadDialog`~~ `downloadItem.setSavePath` API for allowing user enable/disable the prompted save dialog.
- Make `item` returned in `will-download` event as an EventEmitter and add more APIs to control the download item.
## ToDo
- [x] Add spec

\cc @kjlaw89 
",320,True,en,0
2837,1,1,0,Externals,rhencke,2015-09-21T03:49:33Z,1,1,1,1,"The guidelines for contribution were very clear about including a screenshot/animated gif wherever possible, so...

![Here you go.](http://media.giphy.com/media/6e3jiIwMNxVte/giphy.gif)
",186,True,en,0
2836,1,1,0,Externals,Ingramz,2015-09-21T03:46:29Z,1,1,1,1,"Noticed it in Atom's console.

Related https://github.com/atom/atom/issues/8834#issuecomment-141353594
",103,True,en,0
2834,2,1,0,Externals,preco21,2015-09-21T03:35:37Z,11,3,50,1,"- Update as upstream
- Change name the translation folder (ko to ko-KR)
",72,False,en,0
2829,1,2,1,Externals,nekuz0r,2015-09-21T13:15:13Z,38,27,2,3,"Add http_response_code, method, referrer, response_headers to did-get-redirect-request event.
",94,True,en,0
2827,16,0,0,Internals,zcbenz,2015-09-18T11:29:18Z,655,712,28,0,"Also with style fixes, restructured documents and tests.

Refs #2752.
",70,True,en,0
2825,2,0,0,Internals,zcbenz,2015-09-18T03:27:49Z,122,71,5,0,"It makes `api::WebContents` a bit cleaner, I want to control each file to have < 1000 lines.
",93,True,en,0
2819,1,1,0,Externals,IonicaBizau,2015-09-18T02:25:31Z,1,1,1,0,"...because the title was changed, probably. :smile: 
",53,True,en,0
2818,1,1,0,Externals,IonicaBizau,2015-09-18T02:25:10Z,1,1,1,0,"Since mapNumber.js is a file, we should prefix it with ""./"", otherwise an error is thrown. :balloon: 
",102,True,en,0
2817,4,1,0,Internals,zcbenz,2015-09-17T10:27:53Z,24,2,4,0,"Fixes #2755, also contains [a patch](https://github.com/atom/node/commit/aa9c7a2316ba7762f1d04d091585695be3e6be22) that fixes #2799.
",133,True,en,0
2815,3,0,0,Internals,zcbenz,2015-09-17T06:56:21Z,5,4,2,0,"Fixes #2791.
",13,True,en,0
2802,1,3,3,Externals,nekuz0r,2015-09-18T02:43:17Z,125,0,3,1,"Add two methods to webContents to enable/disable device emulation.
",67,True,en,0
2800,2,3,0,Externals,seanchas116,2015-09-16T15:25:25Z,15,0,4,0,"This PR adds `app.getLocale()` API to get current locale in main process.

I think this is more reliable than the alternative way that uses [os-locale](https://github.com/sindresorhus/os-locale), written in #2274.
",214,True,en,0
2798,4,2,0,Externals,jonatasfreitasv,2015-09-16T15:18:28Z,114,2,4,0,,0,False,en,0
2796,1,2,0,Externals,hokein,2015-09-16T01:04:33Z,1,1,1,0,,0,False,en,0
2789,1,1,2,Externals,deepak1556,2015-09-16T11:50:33Z,57,1,5,0,"Fixes #2788 
",13,True,en,0
2787,4,0,0,Internals,zcbenz,2015-09-15T07:02:08Z,11,4,4,0,,0,False,en,0
2785,4,1,0,Internals,zcbenz,2015-09-15T04:56:37Z,17,2,6,0,"Close #981.
",12,True,en,0
2784,1,1,0,Externals,neutrous,2015-09-15T13:28:59Z,5,5,1,0,"Fixed some typo.
",17,True,en,0
2783,6,0,0,Internals,zcbenz,2015-09-15T02:38:02Z,26,7,8,0,"It was caused by 2 reasons: 1) user agent not correctly set in devtools; 2) executeJavaScript not working for devToolsWebContents.

Close #2404.
",145,True,en,0
2782,3,1,0,Externals,preco21,2015-09-15T01:46:13Z,12,2,2,0,"- Update as upstream (ko docs)
",31,True,pt,0
2777,5,5,7,Externals,hokein,2015-09-15T03:17:41Z,24,20,8,0,"Fixes #2671 .
",14,True,en,0
2776,1,7,14,Externals,jaanus,2015-09-14T15:07:06Z,70,0,6,0,"New API supported on Yosemite 10.10 and newer.

Two new title bar styles:

```
window = new BrowserWindow({width: 600, height: 400, 'title-bar-style': 'hidden'});
```

<img width=""712"" alt=""screen shot 2015-09-14 at 14 17 23"" src=""https://cloud.githubusercontent.com/assets/184253/9849441/7042cdd4-5aeb-11e5-808c-ea67ae0c4f96.png"">

```
window = new BrowserWindow({width: 600, height: 400, 'title-bar-style': 'hidden-inset'});
```

<img width=""712"" alt=""screen shot 2015-09-14 at 14 17 59"" src=""https://cloud.githubusercontent.com/assets/184253/9849445/7397d308-5aeb-11e5-896f-08ac7693c8c0.png"">
",596,True,en,0
2774,3,0,0,Internals,zcbenz,2015-09-14T09:44:50Z,32,9,3,0,"Fixes #2455.
",13,True,en,0
2773,5,0,0,Internals,zcbenz,2015-09-14T08:45:27Z,27,7,4,0,"This PR relies the https://github.com/atom/node/commit/fdb584a0b42e89885f74ed68f279318b0fbff37f, fixes #2502.

Previously when node integration is turned off in the webview or BrowserWindow, the `process` and `global` symbols will not be available in the preload script after the first tick of message loop. This PR takes a work-around by turning those symbols into local variables, so scripts ran by `require` will still have access to them, and the web page won't be able to access them when node integration is off.

The downside is users won't be able to override global symbols in this way any more, since those symbols are local variables now:

``` js
global.setImmediate = function() {
  // ...
}
```
",708,True,en,0
2764,1,1,0,Externals,tomashanacek,2015-09-11T13:06:26Z,2,2,1,0,,0,False,en,0
2762,3,1,0,Externals,GoooIce,2015-09-11T13:09:07Z,106,0,2,0,"Add api\global-shortcut.md 
Add api\accelerator.md 
",52,False,en,0
2760,3,1,0,Externals,preco21,2015-09-11T09:06:48Z,234,28,11,0,"- Update as upstream
- Add `session.md` file
- Fix typos
- Mark untranslated files in README.md
",96,False,en,0
2757,3,0,0,Externals,jlord,2015-09-10T21:48:33Z,4,4,4,0,"This PR supersedes https://github.com/atom/electron/pull/2745, starting from there and updating all the links to `web-contents` that were incorrect because it is now its own file, `web-contents.md`.
",199,True,en,0
2756,5,1,0,Externals,GoooIce,2015-09-10T19:47:05Z,45,0,1,0,"add api\shell.md
",17,True,en,0
2754,3,0,0,Internals,zcbenz,2015-09-10T08:26:12Z,41,99,6,0,"Close #2753.
",13,True,en,0
2752,12,10,4,Externals,brenca,2015-09-18T04:04:31Z,605,2,12,8,"Offscreen render, mouse and keyboard event sending functionality using the content api. This relies on my other pull-request successfully being merged into native-mate, because the offscreen-render callback sends the image data in a Uint8ClampedArray, and I couldn't return that without the things I added to native-mate.
",322,True,en,0
2751,5,1,0,Externals,jlord,2015-09-10T21:47:38Z,21,9,1,1,"This corrects the documentation by adding a section for instance properties.

Fixes https://github.com/atom/electron/issues/2744
",129,True,en,0
2750,7,1,0,Externals,jlord,2015-09-10T17:41:42Z,79,62,17,0,"Continuing on the documentation work, this PR:
- Standardize docs to use 'in __ process' over 'on'
- adds :point_up: to the style guide
- Title cases README titles
- Changes a few bold headers to `h` headers
- Adds missing styleguide links (whoops)
- Adds section on docs translations to style guide
- Standardize `**Note:**`
- Standardize 'DevTools'
",351,False,en,0
2748,1,1,0,Externals,etiktin,2015-09-10T03:18:24Z,11,5,1,0,"- Capitalize the ""formerly known..."" text
- Rearrange the community section and mention the slack channel
",106,False,en,0
2747,1,3,0,Externals,nekuz0r,2015-09-10T03:02:01Z,5,3,4,0,"This PR add `validatedUrl` to the `did-fail-load` event.
`validatedUrl` is added as third parameter to the event to avoid breaking backward compatibility.
Without `validatedUrl` it's not possible to determine if the main url failed to load or an asset.

In our usage of electron, it's important for us to know if the requested url failed to load or one of its resources.
",371,False,en,0
2746,2,0,0,Internals,zcbenz,2015-09-09T11:39:20Z,18,9,5,0,"Closes #2735.
",14,True,en,0
2743,2,0,0,Internals,zcbenz,2015-09-09T08:25:03Z,29,12,3,0,"Closes #2742.
",14,True,en,0
2732,3,2,0,Externals,John-Lin,2015-09-09T07:41:06Z,92,0,3,0,"Added doc translation for
- file-object
- process
- synopsis
",61,False,en,0
2731,1,1,0,Externals,deepak1556,2015-09-08T05:23:23Z,8,55,4,0,"https://github.com/atom/electron/pull/2723 missed this.
",56,True,en,0
2730,3,1,0,Externals,preco21,2015-09-08T05:24:42Z,8,6,2,0,"- Small changes (Update)
- Update README-ko.md
",47,False,en,0
2726,5,0,0,Internals,zcbenz,2015-09-07T15:02:56Z,17,2,4,0,"Closes #1647.
",14,True,en,0
2725,2,1,0,Externals,John-Lin,2015-09-08T05:34:14Z,83,0,2,0,"- add doc translation for power-monitor.md
- add doc translation for power-save-blocker.md
",91,False,en,0
2723,3,0,0,Internals,zcbenz,2015-09-07T09:57:48Z,50,69,26,0,,0,False,en,0
2722,3,0,0,Internals,zcbenz,2015-09-07T05:20:19Z,88,41,6,0,"Fixes #2680.
",13,True,en,0
2719,1,1,0,Externals,Rokt33r,2015-09-06T08:18:48Z,1,1,1,0,"Code block should be ended ``
",30,True,en,0
2718,18,2,3,Internals,zcbenz,2015-09-06T04:22:20Z,417,433,28,0,"- Make BrowserWindow and WebContents share same `web-preferences`, no more duplicate code of dealing options of BrowserWindow and webview pages.
- Simplify the management of BrowserContext for different partitions.

Refs #959.
",227,False,en,0
2713,3,3,0,Externals,etiktin,2015-09-09T13:47:26Z,68,68,12,4,"Renamed ""README-es.md"" to ""README.md"" so github will automatically show the file preview when entering the folder.

Updated invalid links in the README.md (links to docs that weren't translated yet), to point to the English translations. IMO that's a better experience than receiving 404.
",289,True,en,0
2712,6,6,0,Externals,etiktin,2015-09-08T05:24:12Z,10,7,1,3,"chrome_version.h is generated dynamically by `bootstrap.py`, so it shouldn't be in version control (git).
",106,True,en,0
2711,3,2,0,Externals,jonatasfreitasv,2015-09-08T05:36:28Z,278,2,4,3,,0,False,en,0
2710,2,4,0,Externals,etiktin,2015-09-06T02:52:30Z,3,2,1,1,"`build.py` would fail on Windows due to a couple of changes made in #2459 that assumed `FilePath::StringType` is always `std::string` and that `FilePath::CharType` is always `char`, which is not the case on Windows. So this commit fixes that.

The error report I got from running `build.py`: 

``` powershell
> python script\build.py -c D
ninja: Entering directory `out\D'
[43/316] CXX obj\atom\browser\electron_lib.atom_browser_main_parts.obj
FAILED: ninja -t msvc -e environment.x86 -- ""C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\bin\amd64_x86\cl.exe"" /nologo /showIncludes /FC @obj\atom\browser\electron_lib.atom_browser_main_parts.obj.rsp /c ..\..\atom\browser\atom_browser_main_parts.cc /Foobj\atom\browser\electron_lib.atom_browser_main_parts.obj /Fdobj\electron_lib.cc.pdb
c:\users\eran.t\documents\github\electron\atom\browser\atom_browser_main_parts.cc(31) : error C2440: 'initializing' : cannot convert from 'const char [11]' to 'const base::FilePath::CharType []'
        There is no context in which this conversion is possible
c:\users\eran.t\documents\github\electron\atom\browser\atom_browser_main_parts.cc(80) : error C2664: 'void brightray::BrowserContext::Initialize(const std::string &,bool)' : cannot convert argument 1 from 'const base::FilePath::StringType' to 'const std::string &'
        Reason: cannot convert from 'const base::FilePath::StringType' to 'const std::string'
        No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called
[43/316] CXX obj\atom\browser\api\electron_lib.atom_api_session.obj
ninja: build stopped: subcommand failed.
```

I think we should reconsider using a CI for Windows so we can catch issues like this faster. From what I understand the reason it's currently disabled is that building on `appveyor` takes over 30 minutes. `appveyor` states in their FAQ that if you purchase a ""Pro"" or ""Premium"" plan you'll get `dedicated hardware with faster CPUs, SSD drives, 1 GB network uplink`. So maybe we can contact them and see if we can try running the build on the stronger machines.
",2107,True,en,0
2709,4,2,0,Externals,jonatasfreitasv,2015-09-04T18:39:26Z,148,0,3,0,,0,False,en,0
2705,3,1,0,Externals,John-Lin,2015-09-04T19:02:49Z,118,3,3,0,"- Add api/shell.md docs zh-TW translations
- Add api/ipc-main-process docs zh-TW translations
- Fix typos in zh-TW README docs
",127,False,br,0
2704,7,1,0,Externals,preco21,2015-09-06T04:21:14Z,346,268,23,1,"- Update as upstream
- Fix some typos
- More improve grammar
",61,False,en,0
2700,1,1,0,Externals,lockys,2015-09-03T18:59:21Z,80,0,1,0,"As title.
Thanks.
",18,False,en,0
2698,1,2,0,Externals,fritx,2015-09-03T18:58:58Z,59,0,2,0,"- development/coding-style
- development/atom-shell-vs-node-webkit
",67,False,es,0
2696,1,1,0,Externals,John-Lin,2015-09-03T10:25:26Z,1,0,1,0,,0,False,en,0
2695,2,3,0,Externals,takashi,2015-09-03T10:24:58Z,5,5,1,0,"this change includes some typo, misspelled things in jp/quick-start-jp.md

Hhere's the list of Japanese i fixed
### change „Çµ„Ç¶„É≥„Éâ„Éú„ÉÉ„ÇØ„Çπ to „Çµ„É≥„Éâ„Éú„ÉÉ„ÇØ„Çπ

„Çµ„Ç¶„É≥„Éâ„Éú„ÉÉ„ÇØ„Çπ means `soundbox`
„Çµ„É≥„Éâ„Éú„ÉÉ„ÇØ„Çπ means `sandbox`  
so in this case „Çµ„É≥„Éâ„Éú„ÉÉ„ÇØ„Çπ is the right translation
### change „É™„É¨„É≥„ÉÄ„É©„Éº„Éó„É≠„Çª„Çπ to „É¨„É≥„ÉÄ„É©„Éº„Éó„É≠„Çª„Çπ

„É™„É¨„É≥„ÉÄ„É©„Éº„Éó„É≠„Çª„Çπ means  ""re"" renderer process

„É¨„É≥„ÉÄ„É©„Éº„Éó„É≠„Çª„Çπ means renderer process 

so in this case „É¨„É≥„ÉÄ„É©„Éº„Éó„É≠„Çª„Çπ is the right translation
",576,True,ja,0
2693,1,1,0,Externals,tcyrus,2015-09-02T20:42:07Z,1,1,1,0,"Fix App Command Web Link
",25,True,en,0
2692,1,1,0,Externals,John-Lin,2015-09-03T08:13:05Z,235,0,2,0,,0,False,en,0
2690,3,1,0,Externals,preco21,2015-09-03T08:12:31Z,512,335,35,0,"- Fix critical mistranslation
- Update as upstream
",51,False,en,0
2688,1,1,0,Externals,huangruichang,2015-09-03T08:12:46Z,239,0,2,0,"‚Ä¶s.md for zh-CN
",18,True,da,0
2686,1,1,0,Externals,astoilkov,2015-09-02T12:45:24Z,2,8,1,0,"Removed the entire paragraph about Electron distribution of `chromedriver` because it seems irrelevant and just clarified that there is no need for special setup. The tutorial below explains everything required.
",212,True,en,0
2685,9,2,0,Internals,zcbenz,2015-09-03T12:17:49Z,305,98,42,1,"- [x] Build on Windows
- [x] Build on OS X
- [x] Build on Linux
- [x] Run on Windows
- [x] Run on OS X
- [x] Run on Linux
- [x] Pass tests on Windows
- [x] Pass tests on OS X
- [x] Pass tests on Linux
- [x] CI all passes
- [x] Merge https://github.com/atom/brightray/pull/137
- [x] Merge https://github.com/atom/libchromiumcontent/pull/153
",340,False,en,0
2682,4,0,0,Internals,zcbenz,2015-09-02T02:30:41Z,409,346,13,0,"The `role` attribute defines the action of the menu item, by using it users no longer need to manually write the behavior of standard menu items, and also fixed some menu items not working exactly the same with native ones (closes #2331).

Also specifying special menus doesn't require hard-coding menu's name any more (closes #2348).

Also document the behavior that current menu item and window are passed when calling the `click` function (closes #935).
",457,True,en,0
2679,1,1,0,Externals,carsonmcdonald,2015-09-01T21:24:35Z,1,1,1,0,,0,False,en,0
2678,1,1,0,Externals,vHanda,2015-09-02T12:41:45Z,9,1,1,0,,0,False,en,0
2677,1,1,1,Externals,hokein,2015-09-01T11:07:01Z,62,58,1,0,"Fixes #2627.
",13,True,en,0
2675,5,0,0,Internals,zcbenz,2015-09-01T08:42:41Z,62,33,9,0,"- Navigation in webview now restarts renderer process.
- Fix node integration not working after POST request (closes #1959).
- Set correct `source` and `origin` for `window.opener.postMessage`.
",194,False,en,0
2672,12,0,0,Externals,jlord,2015-09-03T02:46:58Z,173,147,10,1,"Next batch of docs, updated per the [styleguide](https://github.com/atom/electron/blob/master/docs/styleguide.md).

Pretty basic edits :+1: 
",141,True,en,0
2670,2,1,0,Externals,preco21,2015-09-01T02:47:06Z,130,72,26,0,"- Update as upstream to latest (15/9/1)
- Improve grammar (KO) for more readability
",84,False,en,0
2665,1,2,0,Externals,huangruichang,2015-09-01T02:08:15Z,136,0,1,0,,0,False,en,0
2664,12,0,10,Externals,jlord,2015-09-03T01:44:02Z,174,165,11,2,"Next batch of docs, re: [styleguide](https://github.com/atom/electron/blob/master/docs/styleguide.md).

Most of this is straightforward basic text edits but I'll pop in a few diff comments re: specific questions I have.
",220,True,en,0
2658,6,1,0,Externals,preco21,2015-08-31T06:35:58Z,278,213,20,0,"- Improve grammar several files in ko translations
- Update as upstream
- Fix some typos in ko translations
",108,False,en,0
2657,7,1,8,Externals,jlord,2015-09-03T01:44:32Z,175,136,3,2,"Next batch of docs, re: [styleguide](https://github.com/atom/electron/blob/master/docs/styleguide.md).

These are pretty basic edits. Ready for :eyes: 
",152,True,en,0
2656,4,0,6,Externals,jlord,2015-09-02T02:10:10Z,65,62,3,1,"Next batch of docs, re: [styleguide](https://github.com/atom/electron/blob/master/docs/styleguide.md).

These are pretty basic edits. Ready for :eyes: 
",152,True,en,0
2655,5,0,6,Externals,jlord,2015-09-02T16:46:39Z,146,110,3,2,"Next batch of docs, re: [styleguide](https://github.com/atom/electron/blob/master/docs/styleguide.md).

These are pretty basic edits. Ready for :eyes: 
",152,True,en,0
2654,7,0,2,Externals,jlord,2015-09-02T01:44:52Z,100,75,4,1,"Next batch of docs re: [styleguide](https://github.com/atom/electron/blob/master/docs/styleguide.md).
",102,True,en,0
2652,1,2,0,Externals,SamyPesse,2015-08-31T05:50:29Z,4,0,1,0,"This PR adds a section in the documentation about the auto-updater to list open source implementations.

At GitBook, we built [Nuts](https://github.com/GitbookIO/nuts) to manage downloads and auto-updates of our desktop application. This is a pure server-implementations that works perfectly with Squirrel.Mac and Squirrel.Windows.

I think [Nuts](https://github.com/GitbookIO/nuts) can be useful to other `electron` users, not only as something they can use out of the box, but a reference implementation of the update server.
",528,True,en,0
2650,2,7,14,Externals,deepak1556,2015-09-01T12:10:43Z,104,3,6,1,"Fixes #2491 
",13,True,en,0
2649,2,4,0,Externals,fritx,2015-08-31T06:30:40Z,71,0,2,0,,0,False,en,0
2643,1,1,0,Externals,etiktin,2015-08-31T01:57:42Z,2,1,1,1,,0,False,en,0
2642,1,6,2,Externals,deepak1556,2015-08-31T10:40:14Z,11,1,3,1,"Fixes #2584 
",13,True,en,0
2641,1,1,0,Externals,deepak1556,2015-08-31T01:56:04Z,1,0,1,1,"Fixes #2445 
",13,True,en,0
2639,1,1,0,Externals,appetizermonster,2015-08-31T01:34:26Z,1,1,1,1,,0,False,en,0
2638,3,0,3,Externals,jlord,2015-09-01T21:26:12Z,61,45,2,3,"Updating the docs per the [docs style guide](https://github.com/atom/electron/blob/master/docs/styleguide.md). 

I will open some comments in the diff :pencil2: 
",162,True,en,0
2637,1,1,0,Externals,RIAEvangelist,2015-08-29T08:12:47Z,4,4,1,0,"I think this is an important thing to have in the documentation. I was searching for the info myself because I wanted to know which api calls would be available in node. I assume some others also must look for this info.

Had I not made the issue #2624 I would have written off electron as not a viable option.

this should close #2624 
",337,True,en,0
2635,1,1,0,Externals,fscherwi,2015-08-29T07:57:49Z,1,1,1,0,,0,False,en,0
2619,2,1,0,Externals,etiktin,2015-08-28T02:43:32Z,40,22,4,0,"When running `test.py` on the debug build in Windows, we skip tests that load native modules, specifically `runas`. So the 3 errors described in #2558 are no more.
When running the release build the tests will be executed as usual.

This resolves #2558.
",254,False,en,0
2614,1,1,0,Externals,timruffles,2015-08-28T02:19:35Z,42,13,1,0,"Remote is a great feature, it's a shame to put people off unnecessarily. I think the original warnings given are too extreme

The potential bugs that stem from not cleaning up event handlers (or any reference) are present in any Javascript code. We don't avoid using event-handlers in the DOM because we might forget to clean them up!

I've added an example of the behaviour of return values from synchronously called callbacks from renderer, and have changed the advice from 'you shouldn't do this' to 'be careful when you do this'.
",534,True,en,0
2613,1,0,0,Internals,zcbenz,2015-08-27T15:01:22Z,2,0,1,0,"Chromium requires this operation before using the geolocation API.

Fixes #1376.
",81,True,en,0
2612,1,0,0,Internals,zcbenz,2015-08-27T14:52:10Z,14,0,3,0,"By calling `require('web-frame').setZoomLevelLimits(1, 1);`, the pinch-to-zoom feature can be turned off. There is no global switch to do that though, Chromium just hard coded this feature.

Fixes #2500.
",204,True,en,0
2611,7,0,0,Internals,zcbenz,2015-08-27T12:51:02Z,152,249,17,0,"- Fix a leak of handles.
- Optimize the situation when remote method returns an anonymous object.
- Don't use C++ when managing remote objects in main process.

Fix #2575.
",172,False,en,0
2608,5,2,0,Internals,zcbenz,2015-08-27T06:28:30Z,954,24,12,0,"Node's own implementation of debug agent is not very suitable for being embedded with Electron, this PR brings back our own implementation to fix the problems.

Closes #2562.
Closes #2335.
",189,True,en,0
2607,1,0,0,Internals,zcbenz,2015-08-27T03:56:58Z,2,1,1,0,"This fixes app.quit() not working when it is called before the message loop starts to run.

Closes #2312.
",106,True,en,0
2606,1,2,0,Internals,zcbenz,2015-08-27T02:58:06Z,15,0,1,0,"Fixes #2586.
",13,True,en,0
2604,7,3,4,Externals,jlord,2015-08-31T18:01:57Z,97,39,3,4,"Updating the docs per the [docs style guide](https://github.com/atom/electron/blob/master/docs/styleguide.md). 

Definitely would like @zcbenz :eyes: here. I've made quite a few edits to the `ipc` docs and want to make sure they're :ok: 
",238,True,en,0
2603,4,2,0,Externals,preco21,2015-08-27T01:23:58Z,153,11,6,0,"- Fix typo in quick-start.md (KO) guide
- Update as upstream (to KO)
",69,False,en,0
2602,5,1,0,Externals,jlord,2015-08-28T18:30:18Z,74,66,3,1,"Updating the docs per the [docs style guide](https://github.com/atom/electron/blob/master/docs/styleguide.md). This one is pretty straightforward, no major changes. :book: 
",173,True,en,0
2596,1,1,0,Externals,deepak1556,2015-08-27T02:35:31Z,1,1,1,0,"Fixes #1403 

This is the maximum depth supported by `ipc_message_utils` .
",75,True,en,0
2595,1,1,0,Externals,hokein,2015-08-26T09:18:51Z,8,2,1,0,"Fixes #2580. 
",14,True,en,0
2594,1,0,0,Internals,zcbenz,2015-08-26T08:36:50Z,18,47,3,0,"Fixes #2332.
",13,True,en,0
2589,1,1,0,Externals,etiktin,2015-08-26T04:22:10Z,2,1,1,0,"The build instructions mistakenly said that you can find `atom.exe` under `out\D` instead of `electron.exe`. I fixed that and mentioned that the release build will be to `out\R`.
",179,True,en,0
2585,14,1,22,Externals,jlord,2015-08-28T20:51:16Z,140,115,3,3,"This standardizes the documentation files for `clipboard`, `content-tracing` and `crash-reporter`.
",99,True,en,0
2578,1,1,0,Externals,christian-bromann,2015-08-25T12:40:35Z,11,10,1,0,"Just fixed some wording issues and updated the example to use the promise based syntax of WebdriverIO
",102,True,en,0
2577,13,4,2,Externals,preco21,2015-08-25T13:43:01Z,310,293,50,0,"- Translates content-tracing-ko.md
- Remove outdated comments about remote buffer in browser-window.md
- Fix typos and improve grammer in tutorials at KO translations
",167,False,en,0
2571,1,3,0,Externals,hokein,2015-08-26T04:35:24Z,7,1,2,1,"Fixes #2567.
",13,True,en,0
2568,1,0,0,Internals,zcbenz,2015-08-24T08:35:58Z,11,1,1,0,"Fixes #2501.
",13,True,en,0
2559,1,1,0,Externals,etiktin,2015-08-25T06:12:11Z,9,2,1,2,"This resolves the first test that failed in #2558.
The test failed because in one of the paths the drive letter was upper case `C` and in the other it was lower case `c`.
Paths in Windows are case insensitive, so this shouldn't fail. The fix was to lower case the paths before comparison (only on Windows).
",307,False,en,0
2557,5,6,0,Externals,jlord,2015-08-24T05:49:10Z,6,0,58,1,"Per https://github.com/atom/electron/issues/2524

This PR moves the translated docs into their own language specific directories:

``` text
Electron
|_`docs`
|_`docs-translations`
   |_ `es`
   |_ `ko`
   |_ `jp`
```

I think the English version in the `docs` directory should be the one we publish to electron.atom.io. The language-specific docs are updated less regularly and will make the site much bigger so I think it is ok to leave them only in the repository, what do others think?
",489,True,en,0
2556,2,1,0,Externals,etiktin,2015-08-25T05:57:24Z,7,4,2,3,"This resolves #2293.

The issue was that on Windows the close button (the `X` in the dialog's border) was visible only if `cancelId` wasn't 0. This is weird, because it means that no dialog that contains a single button will ever have a close button (e.g. the `alert` dialog). The OS X and Linux implementation doesn't do that. So I changed the Windows code, to always show the close button.

I added two additional small changes:
- Changed `alert` to always return `undefined` instead of 0 (the index of the `OK` button), so it will comply with the spec (or at least how most browsers choose to implement it).
- Explicitly set the `cancelId` for `confirm` to 1. The button on index 1 is `Cancel` and according to the documentation `cancelId` will automatically be set to it in the Windows and OS X implementation. This change makes sure that Linux will use the same `cancelId`.
",879,True,en,0
2554,1,1,0,Externals,etiktin,2015-08-25T05:41:54Z,7,0,1,3,"When I first tried to add something to the C++ code, I was a bit overwhelmed by all the special types and abstractions.
The info added will hopefully make it a bit easier to start, by directing users to the right place.
",220,False,en,0
2553,2,3,1,Externals,etiktin,2015-08-25T04:49:13Z,13,4,1,3,"There was some confusion about the correct way to add an `All Files` filter (see #2525), so I added it to the example.
Also added a short note about the extension syntax.

This is related to PR #2547.
",201,False,en,0
2550,1,1,0,Externals,LeMoussel,2015-08-25T05:32:06Z,46,0,1,3,"Add an example of how to use webdriverio with electron
",55,True,en,0
2547,2,1,0,Externals,hokein,2015-08-25T04:46:36Z,9,0,2,4,"Fixes #2525
",12,True,en,0
2546,17,1,0,Externals,preco21,2015-08-21T03:32:16Z,776,2167,32,0,"Translate almost files but next 3 files are yet.
- content-tracing-ko.md - 50%
- app-ko.md - 0%
- browser-window-ko.md - 0%

To avoid confusion I removed 2 files(app-ko, browser-window-ko). (thanks for dalinaum)

And remove `Remote buffer` section in both remote.md(en, ko) files as section is outdated.
",304,False,en,0
2545,1,1,0,Externals,mmastrac,2015-08-21T03:33:43Z,20,31,1,0,"As discussed in #1968 1968 -- fixes the problem where sockets appear to be starved in Windows.
",95,True,en,0
2535,9,5,1,Externals,jlord,2015-08-28T18:31:08Z,940,830,4,8,"I've pulled `BrowserWindow` documentation work into its own PR since it's such a large and important part of the docs. I've done some things and I've got some questions!
- To reduce length, have pulled `webContents` and `session` into their own document :ok: :grey_question: 
- I link to the new `webContents` and `session` from their places in `BrowserWindow` doc.
- In most places I've gotten rid of a level of list nesting so that we don't hit the short limit from our markdown parser.
- In `BrowserWindow` the instance methods were noted as `BrowserWindow.devToolsWebContents` which I feel is a bit misleading since you can't call `devToolsWebContents` _on_ `BroswerWindow` but instead need an instance of it. Also confusing since the prototype methods are written in this same way. So I've given an example of `var win = new BrowserWindow()` and then made the method headings include `win.` How do people feel about this? Screenshot below. :ok: :grey_question: 

<img width=""814"" alt=""screen shot 2015-08-20 at 3 27 31 pm"" src=""https://cloud.githubusercontent.com/assets/1305617/9384318/07810bb6-4750-11e5-9e9d-2b79902cca3f.png"">
- Consistently kept `session` and `webContents` with lowercase first letter.
- Applied other standardization mentioned [here](https://github.com/atom/electron/pull/2533#issue-102116862).
- Am trying to figure out the best way to document `session` and `webContents` methods which are properties on properties... I add examples showing how to access each object but keep the method headers `session.foo`. Example of the how to access code snippet:

``` javascript
var BrowserWindow = require('browser-window');

var win = new BroswerWindow({ width: 800, height: 600 });
win.loadUrl(""http://github.com"");

var session = win.webContents.session
```
",1781,False,en,0
2533,12,12,4,Externals,jlord,2015-08-25T21:37:48Z,215,114,3,5,"I am embarking an effort to help out with documentation maintenance :books: This PR is a WIP and the first step: a once-over to standardize the format of the docs.

**Standardization tasks:**
- Max. one `h1` per page.
- Use `bash` instead of `cmd` (because of syntax highlighter).
- Change doc titles to their object name format (i.e. `browser-window` ‚Üí `BrowserWindow`).
- No headers following headers, add at least one sentence description.
- Methods wrapped in `code` ticks.
- Events wrapped in singe 'quotation' marks.
- No nesting more than 2 deep (unfortunately because of markdown renderer).
- Add section titles Events, Class Methods and Instance Methods.
- Use 'will' over 'would' when describing outcomes.
- Events and methods are `h3`.
- Optional arguments written as `function (required[, optional])`.
- Optional arguments are denoted when called out in list.
- Line length is 80-column wrapped.
- Platform specific methods are noted in italics following method header.

And a few other smaller things like consistent periods in lists, phrasing, specifying 'Returns' for returned values...

**Update Docs Website**

Additionally I'll be improving some of the styles on the electron.atom.io/docs website. For the sake of visualizing some of these text changes, here's a WIP screenshot of how they'd look on the site:

<img width=""881"" alt=""screen shot 2015-08-20 at 1 10 27 pm"" src=""https://cloud.githubusercontent.com/assets/1305617/9381995/e0159f78-473c-11e5-861a-7f5694afb3ef.png"">

---

<img width=""871"" alt=""screen shot 2015-08-20 at 1 10 54 pm"" src=""https://cloud.githubusercontent.com/assets/1305617/9382017/fa0462a2-473c-11e5-8772-06bd0619c0bd.png"">

---

<img width=""873"" alt=""screen shot 2015-08-20 at 1 11 10 pm"" src=""https://cloud.githubusercontent.com/assets/1305617/9382018/ff012c5e-473c-11e5-9b62-1e9b281602d6.png"">

---

Future things (in other PRs): Directories for translations, more code examples, diagrams... 
",1943,True,en,0
2521,1,5,2,Externals,deepak1556,2015-08-25T04:39:14Z,6,1,2,6,"Fixes #2517 
",13,True,en,0
2520,1,1,0,Externals,etiktin,2015-08-21T00:57:14Z,1,1,1,2,"Update the `beforeunload` example to use `e.returnValue = false` instead of `return false`, since `e.returnValue` always works while the `return` works only in certain conditions. See #2481 for details.
",203,True,en,0
2515,2,1,0,Externals,hokein,2015-08-21T01:02:08Z,3,3,3,2,"Fixes #2512.
",13,True,en,0
2511,1,1,0,Externals,petrfelzmann,2015-08-19T11:33:54Z,2,1,1,1,,0,False,en,0
2510,1,1,0,Externals,petrfelzmann,2015-08-17T10:28:13Z,2,2,1,0,"Only the webview tag should be formatted like code.
",52,True,en,0
2509,1,1,0,Externals,hokein,2015-08-17T16:02:21Z,10,0,1,0,"Fix some issues introduced by the PR #2328:
- Fixes #2468
- Fixes #2427

\cc @paulcbetts 
",90,False,en,0
2508,1,1,0,Externals,etiktin,2015-08-17T08:03:54Z,1,1,1,0,"Changed ""occured"" to ""occurred""
",32,True,en,0
2503,2,2,0,Externals,teleclimber,2015-08-21T00:57:32Z,3,1,1,6,,0,False,en,0
2476,1,0,0,Internals,kevinsawicki,2015-08-11T16:49:25Z,4,4,2,0,"Switch to the [Contributor Covenant](http://contributor-covenant.org/version/1/2/0/) from the [Open Code of Conduct](http://todogroup.org/opencodeofconduct).

See https://github.com/todogroup/opencodeofconduct/issues/84 for more details.

See [here](http://contributor-covenant.org/#who) for other projects using the Contributor Covenant.

Refs https://github.com/atom/atom/pull/8312
",384,True,en,0
2474,56,3,2,Internals,zcbenz,2015-08-21T11:49:00Z,1543,1240,56,9,"- [x] Not building on OS X
- [x] Not building on Linux
- [x] Not building on Windows
- [x] Renderer process crashes when using Buffer
- [x] Renderer process crashes when printing Buffer in devtools
- [x] Rewrite the protocol module (#2475)
- [x] Crash when using protocol module
- [x] Warn about old protocol API usages
- [x] Make release build working
- [x] Make native modules work
- [x] Pass tests
- [x] Merge https://github.com/atom/brightray/pull/127
",456,False,en,0
2465,4,2,0,Internals,zcbenz,2015-08-10T07:47:12Z,69,55,10,0,"Fixes #2384.
",13,True,en,0
2462,5,0,0,Internals,zcbenz,2015-08-10T05:45:35Z,138,38,16,0,"- win: Don't emit right-clicked event when there is menu attached
- mac: Don't emit ""clicked"" event if there is menu attached
- mac: Redraw icon when menu is closed
- Rename `popContextMenu` to `popUpContextMenu`

Close #2378.
",227,False,en,0
2461,1,0,0,Internals,zcbenz,2015-08-10T04:07:58Z,4,1,1,0,"Chromium explicitly disables running JavaScript when resizing a DOM node, previously we were violating this rule when calling the element resize callback, and we were fine because this rule was not strongly checked. But after we started to use `V8RecursionScope` Electron began to crash, since `V8RecursionScope` asserts whether JavaScript is disabled. 

The whole disabling JavaScript thing is blink-internal and not related to users' preferences, so simply avoiding calling element resize callback when DOM node is being resized is a fine fix here.

Fixes #2450.
",565,True,en,0
2460,2,0,0,Internals,zcbenz,2015-08-10T04:00:17Z,5,0,2,0,"Now we upload:
- iojs-v0.30.3-headers.tar.gz
- iojs-v0.30.3.tar.gz
- node-v0.30.3.tar.gz
- node.lib
- x64/node.lib
- win-x86/iojs.lib
- win-x64/iojs.lib

to make all versions of npm and node-gyp happy. Will we have more in future?

Fixes https://github.com/atom/electron/issues/2430.
",284,False,en,0
2459,6,7,9,Externals,deepak1556,2015-09-04T08:29:37Z,240,73,15,25,"- [x] Create separate browser context for each partition 
- [x] Fix Devtools not shown for partitions
- [x] Pass tests

Depends on https://github.com/atom/brightray/pull/136
Fixes #1010
",186,False,en,0
2456,1,1,0,Externals,etiktin,2015-08-10T03:21:51Z,26,2,3,1,"I added a mention of `cpplint.py` in each build instructions.
The reason, is because it's easy to miss it's existence (I did). Even if you noticed it's mentioned in `coding-style.md` you might mistakenly think that `test.py` runs it, so it's better to be explicit about it. Hopefully it will reduce the number of commits with style issues.
",340,False,en,0
2454,1,4,0,Externals,etiktin,2015-08-21T01:00:36Z,21,21,1,12,"I had 4 asar tests fail because, the tests assumed that the file content ends with UNIX line endings (\n), while it was using Windows line endings (\r\n). Git probably changed them when I cloned the project on
Windows.
Since the line ending is not what matters in the tests, I trimmed them and now all the tests pass as expected and will work cross-platform.
",359,False,en,0
2453,6,5,5,Externals,etiktin,2015-08-21T03:45:12Z,40,5,2,12,"NativeImage::CreateFromPath now supports loading .ico icon files on Windows.

This resolves #2277.
",99,True,en,0
2447,9,0,0,Internals,zcbenz,2015-08-07T14:03:51Z,233,28,25,0,"Fix #2442, more explanation can be found at https://github.com/atom/electron/issues/2442#issuecomment-128600392.
",113,True,en,0
2443,1,1,0,Externals,ialexryan,2015-08-10T03:22:06Z,1,1,1,2,,0,False,en,0
2431,9,0,2,Internals,zcbenz,2015-08-06T05:25:35Z,371,323,16,0,,0,False,en,0
2424,2,4,0,Externals,deepak1556,2015-08-06T01:52:16Z,29,4,9,0,"Fixes #2388 
Fixes #2420 
",26,False,en,0
2423,1,0,0,Internals,zcbenz,2015-08-05T07:55:52Z,1,1,1,0,"Close https://github.com/atom/electron/issues/2353.
",52,True,en,0
2422,2,0,0,Internals,zcbenz,2015-08-05T06:44:31Z,36,2,2,0,"Fixes #2333.
",13,True,en,0
2419,5,0,0,Internals,zcbenz,2015-08-05T05:28:09Z,128,164,8,0,,0,False,en,0
2418,1,2,0,Externals,deepak1556,2015-08-05T02:42:18Z,50,18,3,0,"Fixes #2416

/cc @paulcbetts 
",30,True,en,0
2412,1,0,0,Internals,zcbenz,2015-08-04T14:52:20Z,7,1,1,0,"TaskDialogIndirect doesn't allow empty name, if we set empty title it will show ""electron.exe"" in title.

Closes #2293.
",120,True,en,0
2411,4,0,0,Internals,zcbenz,2015-08-04T13:22:18Z,44,27,6,0,"Close #2209.
",13,True,en,0
2410,1,1,0,Externals,hokein,2015-08-05T02:04:26Z,3,0,1,0,,0,False,en,0
2408,3,0,0,Internals,zcbenz,2015-08-04T08:13:09Z,38,2,5,0,"Fixes #2283.
",13,True,en,0
2400,6,6,22,Externals,hokein,2015-08-06T01:55:26Z,436,1,13,3,"Fixes #746.

This PR adds a `BrowserWindow.setThumbarButtons` API, and also makes  #1121 more easier to implement by introducing a custom `DesktopWindowTreeHostWin`. 
",167,True,en,0
2394,2,1,0,Externals,levrik,2015-08-03T07:04:13Z,2,2,2,2,,0,False,en,0
2391,5,2,3,Externals,seanchas116,2015-08-03T07:22:36Z,20,0,4,3,"Hi,

I found this example using Promise doesn't work in current Electron:
#### sleep.js

``` js
module.exports = function (ms) {
  return new Promise(function (resolve) {
    setTimeout(resolve, ms);
  });
};
```
#### In renderer

``` js
var remote = require(""remote"");
var sleep = remote.require(""./sleep"");

var promise = sleep(1000);
console.log(promise); //=> ""[object Promise]""
promise.then(function () { // ""promise.then is not a function"" error
  console.log(""slept 1s"");
});
```

This PR adds support to pass ES6 `Promise` between remote and browser over `remote` and fix this problem.
",594,True,en,0
2389,1,1,0,Externals,hokein,2015-08-03T06:52:40Z,1,1,1,3,"Fix browser window will be resiable when calling `window.setResizable(false)` twice due to wrong usage of mask.
",112,True,en,0
2383,2,1,2,Externals,deepak1556,2015-08-03T06:37:29Z,62,10,10,3,"Fixes #2236 
",13,True,en,0
2382,1,1,0,Externals,jiaz,2015-07-30T08:53:57Z,1,1,1,0,"I tried to follow the document to build electron on a fresh clean built Ubuntu 15.04.
I encountered the following error message when trying to run `./script/bootstrap.py -v`

``` bash
Package nss was not found in the pkg-config search path. 
Perhaps you should add the directory containing `nss.pc' 
to the PKG_CONFIG_PATH environment variable 
No package 'nss' found 
```

After installing libnss3-dev, the build can pass.
",424,False,en,0
2381,1,2,0,Internals,zcbenz,2015-07-30T06:17:26Z,104,58,1,0,"- The title should be white when highlighted under light menu bar.
- The image should not be scaled when it is larger then menu bar.
- Fix a few leaks due to redundant calls of `retain`.
- Do not change status item's length for every draw.
- Do not create status item until we have setup the image view.
- Remove redundant draws before we set image for the tray icon.
- Do not call private APIs to detect dark menu bar.
- The title is not pure black under light menu bar.
- Adjustments of title and icon's margins.
",515,False,en,0
2377,2,1,0,Externals,vivensio,2015-07-30T01:39:53Z,1,1,1,0,"New terminology for processes. The error 'A JavaScript error occured in the browser process' pops up often and is confusing.
",125,True,en,0
2376,1,1,0,Externals,timruffles,2015-07-30T01:39:36Z,2,1,1,0,"'protect' implies a lot more security than ASAR provides (none). I asked around #2374 to get some understanding of what ASAR does do for you.
",142,True,en,0
2375,1,4,0,Externals,deepak1556,2015-08-03T06:46:40Z,27,27,3,4,"Refs https://github.com/atom/electron/issues/2223
",50,True,en,0
2372,3,4,2,Externals,hokein,2015-07-30T01:38:27Z,12,1,2,0,"Fixes #2362 .
",14,True,en,0
2370,1,1,0,Externals,hokein,2015-07-29T09:22:47Z,45,28,1,0,"This PR fixes a couple of tray issues causing by #2232 .
- Fixes #2360. It's caused by forcing the icon with to 26px. Some more, the native NSStatusItem implmentation will draw 4px to the image as left and right padding margin, in StatusItemView, we need to simulate its behavior manually.
- Fixes Tempate image doesn't show correctly in dark mode.
- Fixes title color will not reversed in dark mode.
",401,False,en,0
2369,8,1,0,Internals,zcbenz,2015-07-29T07:22:27Z,129,34,9,0,"- win: Implement `double-clicked` event.
- win: Fix regression caused by #2328 that `bounds` is always empty.
- win: Pass modifers in `clicked` events.
- Use the DOM's way of telling modifiers.
",194,False,en,0
2368,1,2,0,Externals,dataich,2015-07-29T09:25:30Z,1,1,1,0,"If `node-integration` option pass to window.open, do not overwrite by current window's one
",91,True,en,0
2363,1,1,0,Externals,hokein,2015-07-29T06:52:20Z,6,5,1,1,"Fixes #2359 
",13,True,en,0
2354,5,2,0,Externals,nishanths,2015-07-29T04:20:28Z,138,79,11,1,"- Add keyboard and mouse button bitsum to Tray click events payload
- Move `getBoundsFromRect`: to common `event_util_mac` file
- Update documentation
- and commits from #2337 . 

Resolves issue #2336 

Tested
- [x] Mac
- [ ] Windows
- [ ] Linux
",246,False,en,0
2352,2,1,0,Externals,nishanths,2015-07-29T03:47:00Z,15,2,4,1,"- Add the new isTemplateImage method
- Appropriately rename an internally-used function of the same name, which is used to determine if a image file path matches the template image naming pattern.
- Update docs
",211,False,en,0
2350,3,1,0,Externals,matiasinsaurralde,2015-07-28T08:22:12Z,1025,0,11,1,":+1: 
",6,True,en,0
2349,2,1,0,Externals,mnquintana,2015-07-29T03:46:02Z,29,7,1,2,"I've just been going through the quick start tutorial, and thought I'd try to clean things up a bit :smile:. This PR reorganizes the ""Run Your App"" section around the 3 ways you can run your app, with emphasis given to `electron-prebuilt`.
",240,True,en,0
2347,1,1,0,Externals,deepak1556,2015-07-29T03:44:47Z,2,4,2,2,"Fixes #2345 

`GetFullRequestHeaders` is not available before response starts, so using default getter for headers from `URLRequest`.
",134,True,en,0
2340,7,5,6,Externals,hokein,2015-07-29T09:19:02Z,76,9,11,3,"This PR :
- Fixes the last used directory of `input` label doesn't work on OS X. The prefs' key need to be registered before used.
- Add `session.setDownloadPath` API, fixes #2121.

cc @deepak1556 
",198,False,en,0
2338,2,5,0,Externals,hokein,2015-07-29T03:32:49Z,63,28,2,2,"Related to https://github.com/atom/electron/pull/1835#issuecomment-124852907.
",78,True,en,0
2337,2,1,0,Externals,nishanths,2015-07-29T03:27:04Z,15,8,7,2,"Double click events on a tray item will now send the bounding rect as payload with the ""double-clicked"" notification ‚Äî matching the existing behavior in ""click"" and ""right-click"".
",182,True,en,0
2328,4,1,0,Externals,paulcbetts,2015-07-29T03:08:35Z,35,5,2,4,"This PR prevents dozens of items showing up in the notification area preferences when using Squirrel for Windows, by ensuring that notification tray items are tied to the User App Model ID.
## TODO:
- [ ] Make sure this actually works
",235,False,en,0
2327,1,4,6,Externals,deepak1556,2015-07-29T09:16:02Z,59,18,5,4,"Refs #2322 

Depends on https://github.com/atom/brightray/pull/128
",67,True,en,0
2325,1,0,0,Internals,zcbenz,2015-07-24T08:57:59Z,73,17,4,0,"Previously we have been manually keeping the WMNormalHints ourselves because Chromium was not doing that, but since recent Chromium can handle min/max size on Linux correctly this PR changes to rely on Chromium to set min/max size, and it also fixes some conflicts when setting WMNormalHints.

Fix #1610
Fix #953
Fix #1664
",323,True,en,0
2323,3,0,0,Internals,zcbenz,2015-07-24T08:21:16Z,55,66,7,0,"- Use webview when possible
- Use random port
- Run test after server is setup
",79,False,en,0
2321,2,1,0,Internals,zcbenz,2015-07-24T06:24:14Z,24,0,4,0,"Sometimes the webContents doesn't get focus when window is shown, so we have to force focusing on webContents in this case. The safest way is to focus it when we first start to load URL, if we do it earlier it won't have effect, if we do it later we might move focus in the page.

Though this hack is only needed on OS X when the app is launched from Finder, we still do it on all platforms in case of other bugs we don't know.

Fixes #2317.
",442,True,en,0
2320,1,1,0,Externals,hokein,2015-07-24T05:28:31Z,1,1,1,0,"Fixes #2306 .

No need to mask the command id for appcommand message. Having test with media key on keyboard.
",110,True,en,0
2318,2,1,1,Externals,craigshoemaker,2015-07-29T03:34:46Z,15,13,1,5,"- Update `accelerator` to cross platform values
- Add warning to non-Mac users regarding the `selector` option
",111,False,en,0
2316,1,1,0,Externals,tengyifei,2015-07-24T03:11:56Z,0,14,1,0,,0,False,en,0
2314,8,1,0,Externals,UsabilityEtc,2015-07-29T03:35:14Z,58,59,5,5,"Improve the grammar, sentence structure, punctuation and formatting.
",69,True,en,0
2307,4,0,0,Internals,zcbenz,2015-07-23T09:59:09Z,52,21,8,0,"Fix #2258.
",11,True,en,0
2302,1,1,0,Externals,etiktin,2015-07-23T01:42:03Z,1,1,1,0,"Added a comment about the fact that on Windows, the ""question"" message box uses the same icon as the ""info"" message box (Electron uses the task dialog API instead of the message box API). This is because Microsoft's API doesn't supply a default question icon (see `pszIcon` in https://msdn.microsoft.com/en-us/library/windows/desktop/bb760540(v=vs.85).aspx).
",359,True,en,0
2298,3,1,0,Externals,deepak1556,2015-07-23T04:15:54Z,28,13,3,0,"Fixes #2292 
Fixes #2286 
Fixes #2261 
Fixes #2303 
",52,False,en,0
2297,1,1,0,Externals,hokein,2015-07-22T07:38:35Z,15,0,5,0,"Fixes #2290 .
",14,True,en,0
2287,3,0,0,Internals,zcbenz,2015-07-21T02:53:18Z,28,1,2,0,"This PR fixes `BrowserWindow.setContentSize` not working on Mac, closes #1024.
",79,True,en,0
2270,1,1,0,Externals,UsabilityEtc,2015-07-20T10:40:09Z,74,74,1,1,"Improve the grammar and sentence structure of app.md. Replace references to Mac with OS X for consistency with other docs and use the OS X nomenclature of notification rather than message.
",189,True,en,0
2250,9,6,12,Externals,mbarthelemy,2015-07-23T01:45:42Z,66,0,6,6,"This code maintains an aspect ratio for an area within a window. It also allows the developer to specify, in pixels, extra space which is not included within the aspect ratio. If you don't specify any extra width or height it will maintain the aspect ratio of the content view.

This was implemented for a video player. Our video player viewing area has an aspect ratio of 16/9 but we also have a 47 pixel control bar at the bottom of the video.

The code was written generically so that you can have extra width, height or both. It will never return a window size that is larger than the one the user specified via their resize action.

CAVEAT: There isn't a Windows implementation. The math used in the windowWillResize:toSize: method of the Mac window should be easily adaptable for use in a Windows implementation.

Related Issue: https://github.com/atom/electron/issues/2252
",880,True,en,0
2246,1,3,7,Externals,deepak1556,2015-07-20T10:29:53Z,62,5,3,3,"Fixes #2231 
",13,True,en,0
2235,1,1,0,Externals,mhkeller,2015-07-16T09:53:59Z,1,1,1,0,"Remove the trailing comma so that the example is valid json. Otherwise the auto updater will throw an error saying `Unexpected token '{'`.
",139,True,en,0
2234,1,1,0,Externals,astoilkov,2015-07-16T11:34:23Z,1,1,1,0,,0,False,en,0
2232,11,8,20,Externals,hokein,2015-07-21T02:36:19Z,300,66,10,5,"This PR introduces a custom status item view in NSStatusItem, so that we can easily implement some features in tray:
- Implement `right-clicked` event on OS X and Windows. As a side effect, the 'clicked' event will also be emitted even the tray has context menu.
- Implement `popContextMenu` API on OS X and Windows. 
- Implement `dragged-files` event to support drag-and-drop feature on OS X.

Fixes #1499,  #1393, #1975, #1549.
",430,False,en,0
2220,5,0,0,Internals,zcbenz,2015-07-14T20:17:36Z,71,30,7,0,"This makes all networking requests under one BrowserContext have same user agent by default, and also makes it possible to make multiple BrowserContext to have different user agents.
",183,True,en,0
2216,1,1,0,Externals,UsabilityEtc,2015-07-15T23:44:21Z,6,6,1,1,"Improve the grammar, sentence structure and code formatting of global-shortcut.md.
",83,True,en,0
2215,2,8,0,Internals,zcbenz,2015-07-14T16:53:44Z,3,2,3,0,"Fix #2183.
",11,True,en,0
2214,1,1,0,Externals,PButcher,2015-07-15T23:43:50Z,1,1,1,1,"Just an irritating typo.
",25,True,en,0
2211,1,0,0,Internals,zcbenz,2015-07-14T09:48:05Z,17,8,1,0,"It is OK under most cases, but if you happen to also use COM in your application, you will have heap corruptions.

Fixes #2188.
",128,True,en,0
2207,3,6,2,Externals,deepak1556,2015-07-16T22:14:45Z,58,13,8,3,"Fixes #2182 
",13,True,en,0
2206,1,1,0,Externals,dalinaum,2015-07-15T20:14:05Z,0,3,1,2,":memo: Remove a personal email address and repository.
",55,True,en,0
2200,2,1,7,Externals,hokein,2015-07-16T14:20:30Z,63,3,1,3,"Fixes #1768, #1780.
",20,True,en,0
2197,1,1,0,Externals,deepak1556,2015-07-14T16:59:09Z,36,23,2,1,"Fixes #1450 
",13,True,en,0
2195,1,1,0,Externals,jlord,2015-07-14T15:35:33Z,2,2,2,2,"Super small PR to fix a typo (javascipt -> javascript) on a code block language that was breaking the docs site Pages build :computer: 
",136,True,en,0
2187,1,2,0,Externals,jprichardson,2015-07-14T04:46:06Z,1,1,1,3,"Chromium added the actual `error` object to the 5th parameter in `window.onerror`. This should be emitted as opposed to the `errorMsg` string. Worse yet, since `errorMsg` wasn't an instance of `Error`, any code that assumes this in any `process.on('uncaughtException')` handler would fail. Also, correctly emitting the error provides the stack trace.

This is now an HTML5 standard.

Sources:
- https://html.spec.whatwg.org/multipage/webappapis.html#errorevent
- https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror
- https://code.google.com/p/chromium/issues/detail?id=147127
",598,True,en,0
2179,1,0,0,Externals,deepak1556,2015-07-13T22:14:58Z,4,0,1,3,"Depends on https://github.com/atom/brightray/pull/123
",54,True,en,0
2175,4,1,0,Externals,paulcbetts,2015-07-13T19:16:10Z,34,0,4,3,"This PR ensures that all of our processes that might create windows have the same [AppUserModelID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459%28v=vs.85%29.aspx) which should help with some of the pinning woes that we're seeing. 
",252,True,en,0
2164,3,3,3,Externals,hankbao,2015-07-10T05:33:07Z,19,11,1,1,"Make it clear that the `global-shortcut` module should not be used until the ready event of app module gets emitted.
",117,True,en,0
2161,1,2,0,Externals,paulcbetts,2015-07-10T02:36:23Z,18,1,2,1,"This PR adds a spec to ensure the WebView's `close` event fires when a page calls `close`
",90,True,en,0
2159,1,2,0,Internals,bkeepers,2015-07-08T22:22:40Z,3,0,1,0,"We are intending to adopt the soon-to-be-announced [Open Code of Conduct](http://todogroup.org/opencodeofconduct) for @atom. This adds it to the README. https://github.com/atom/electron/commit/078bd7fb5b3a98abffcbb7ed95334c63248683ed added it to the contributing guidelines. Let me know if you have any questions or concerns.

/cc https://github.com/atom/atom/pull/7797
",370,True,en,0
2152,10,1,5,Internals,zcbenz,2015-07-08T08:41:29Z,202,337,6,0,"This PRs replaces showMessageBox's Windows implementation with `TaskDialogIndirect`, and thanks @vinnyp for the help on the implementation.

Closes #2090.
Closes #975.
",168,True,en,0
2150,1,1,0,Externals,mattdesl,2015-07-08T03:10:16Z,1,1,1,0,"Slight change to improve documentation of this method.
",55,True,en,0
2146,4,0,0,Internals,zcbenz,2015-07-08T02:08:39Z,52,28,7,0,"This PR adds `cancelId` option for `showMessageBox`, which will be used as return value when user cancels the dialog instead of clicking the buttons of the dialog.

Fixes #876.
",177,True,en,0
2145,9,1,0,Internals,zcbenz,2015-07-07T10:08:06Z,216,82,7,0,"Refs #2090.

A year ago we have discarded the GTK+ implementation of message box as part of transition to use Chromium's Aura GUI toolkit, because Aura doesn't work well with GTK+ together at that time. But now since those issues have been solved, and it is hard to make our custom dialog behave exactly the same with native dialog, I'm now bring back the GtkMessageBox implementation, with a few improvements.
",411,True,en,0
2144,1,3,5,Externals,deepak1556,2015-07-10T04:14:58Z,61,1,3,2,"Fixes #2130 

scopedwriter is so limited, if there is a better approach i can take here do suggest.
",100,True,en,0
2142,1,0,0,Internals,zcbenz,2015-07-07T05:57:00Z,1,1,1,0,"This relies on [editing_behavior.patch](https://github.com/atom/libchromiumcontent/blob/atom/patches/third_party/WebKit/editing_behavior.patch) in libchromiumcontent.

Fixes #2122.
",181,True,en,0
2140,1,1,0,Externals,mattdesl,2015-07-07T03:45:10Z,2,0,1,0,"This was strange to me when I was first learning Electron, and I assumed it was a cross-platform quirk needed for everything to shut down correctly.

In fact, it is more of a usability thing, and dependent on the app. For example, Chrome and iTunes stay active in the background even if you close all windows. On the other hand, iPhoto, System Preferences, and several other apps quit when all windows are closed, since they have nothing left to do.

Hopefully this comment will shed a bit more light on the matter.
",516,True,en,0
2138,1,1,0,Externals,hokein,2015-07-07T03:29:06Z,3,2,1,0,"Related to #2132 .
",19,True,en,0
2136,6,0,0,Internals,zcbenz,2015-07-06T13:56:59Z,29,37,8,0,"This PR adds lifetime check when calling methods of native objects like Tray and BrowserWindow, which can be destroyed before the JavaScript object gets garbage collected.
",172,True,en,0
2134,1,1,0,Externals,fbrinker,2015-07-06T14:04:15Z,4,4,1,0,"update to current version and x64 fix for popular systems
",58,True,en,0
2133,1,1,6,Externals,hokein,2015-07-08T02:08:22Z,13,0,4,1,"Potential fixes #2127.

There is not a decent way to implement `app.getPath('app')` since we handle the app launching logic in JS part and `app.getPath` only gets the `PathService` constants. Instead, this PR implements `app.getAppPath` API in JS part. 
",254,True,en,0
2131,1,0,0,Internals,zcbenz,2015-07-06T07:49:11Z,56,1,4,0,"Fixes #1361.
",13,True,en,0
2128,4,0,0,Internals,zcbenz,2015-07-06T07:18:57Z,5,2,3,0,"Fix https://github.com/atom/electron/issues/1680.
",50,True,en,0
2125,3,8,11,Externals,deepak1556,2015-07-10T04:16:17Z,252,163,7,4,"Fixes #182 
- [x] need to convert `JsProtocolHandler -> (error, request)` which would get rid of those `node::ThrowError` and have uniform async api, will have a wrappedCallback to avoid breaking existing api.
",210,False,en,0
2119,1,1,0,Externals,deepak1556,2015-07-06T04:29:40Z,9,0,1,1,"``` bash
(py27)shell git:linux_doc_patch  ‚ùØ ldd ./vendor/llvm-build/Release+Asserts/bin/clang
    linux-vdso.so.1 (0x00007ffee9f8d000)
    librt.so.1 => /usr/lib/librt.so.1 (0x00007ff821f9d000)
    libdl.so.2 => /usr/lib/libdl.so.2 (0x00007ff821d99000)
    libtinfo.so.5 => /usr/lib/libtinfo.so.5 (0x00007ff821b43000)
    libz.so.1 => /usr/lib/libz.so.1 (0x00007ff82192d000)
    libm.so.6 => /usr/lib/libm.so.6 (0x00007ff821628000)
    libstdc++.so.6 => /home/robo/github/shell/vendor/llvm-build/Release+Asserts/bin/../lib/libstdc++.so.6 (0x00007ff821325000)
    libgcc_s.so.1 => /usr/lib/libgcc_s.so.1 (0x00007ff82110f000)
    libc.so.6 => /usr/lib/libc.so.6 (0x00007ff820d6c000)
    libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007ff820b4f000)
    /lib64/ld-linux-x86-64.so.2 (0x00007ff8221a5000)

```
",810,False,en,0
2117,1,1,0,Externals,tommoor,2015-07-06T01:55:50Z,6,6,1,2,"It was unclear to us until we looked through the atom source code that crashReporter.start must be ran in each renderer process. Also fixed some grammatical errors.
",165,True,en,0
2113,2,2,0,Externals,hokein,2015-07-06T01:52:43Z,13,5,2,2,"This PR allows developers to set a mirror for the prebuilt libchromiumcontent binaries(such as
https://github.com/hokein/libchromiumcontent-qiniu-mirror).
",155,False,en,0
2111,22,2,0,Internals,zcbenz,2015-07-03T08:42:05Z,79,35,10,0,"This PR creates Release distributions when there is a new tag pushed and uploads them to GitHub releases.
",106,True,en,0
2109,1,1,0,Externals,krainboltgreene,2015-07-05T14:55:09Z,1,1,1,2,,0,False,en,0
2107,13,0,0,Internals,zcbenz,2015-07-03T03:28:16Z,52,17,6,0,"This PR makes electron build in GitHub's Windows CI machine.
",61,True,en,0
2105,1,1,0,Externals,deepak1556,2015-07-05T14:54:35Z,2,5,1,2,"Fixes #1784 
",13,True,en,0
2102,1,12,10,Externals,deepak1556,2015-07-13T19:34:48Z,150,6,5,11,"Fixes #1832

Since the storageimplemetation relies only on `browserContext` and `origin` , have added the api under `app` instead of `webContents`. This doesnt handle network cache, should it be added ?
- [x] Add Tests
",219,True,en,0
2095,1,1,0,Externals,hokein,2015-07-01T16:07:33Z,2,2,1,0,"Fix #2091 
",11,True,en,0
2094,23,17,0,Internals,zcbenz,2015-07-02T08:04:37Z,446,77,18,0,"This PR adds support for cross compiling for arm target.

Closes #366.
",71,True,en,0
2093,5,4,0,Externals,preco21,2015-07-05T13:21:56Z,4035,219,50,4,"Second PR of korean translation!

Currently, documents of developers and tutorials were completely translated. However, API docs are still 11 files not yet translated. So the translation is not yet fully completed(still), but also I will translate the remained files soon.

And added the missing link of `power-save-blocker` API docs to README. (related #2025)
",361,True,en,0
2092,4,0,0,Internals,zcbenz,2015-07-01T08:43:13Z,327,51,11,0,"This PR changes to used the prebuilt clang binaries provided by Chromium to build electron, so we can use the same compiler and build settings with libchromiumcontent's prebuilt binaries. And it would reduce our requirements of build toolchain to minimum.

The side effect is now it is required to build 32bit electron on a 64bit machine.

Refs https://github.com/atom/libchromiumcontent/pull/144, #366.
",404,True,en,0
2087,1,1,0,Externals,shainnif,2015-07-01T16:07:55Z,1,1,1,1,"Very very very minor typo
",26,True,en,0
2083,1,2,0,Externals,johnhaley81,2015-07-01T16:12:02Z,1,1,1,1,"When calling `window.open` the newly created window would have the name of the last option in the `features` argument as the title. I think it's supposed to be pointed to `frameName`.
",184,True,en,0
2080,1,1,0,Externals,deepak1556,2015-07-05T08:44:42Z,12,3,2,5,"Fixes #1949 
",13,True,en,0
2077,1,0,0,Internals,zcbenz,2015-06-29T04:41:38Z,3,2,3,0,,0,False,en,0
2074,1,1,0,Externals,ankitaggarwal011,2015-07-05T08:25:26Z,7,5,1,6,"The bug is discussed in #2047. When the fullscreen flag is set in an app, it fails to go to the fullscreen state in Windows OS. This is due to the reason that Windows has no support for SHOW_STATE_FULLSCREEN state in chromium as mentioned on https://codereview.chromium.org/1138383008.

This is solved by selectively calling SHOW_STATE_FULLSCREEN state for other operating systems expect Windows. Windows fullscreen state is achieved by default SetFullscreen method in all cases.

I have built from latest source (v0.28.3) with these changes and tested this on Windows 7 (x64). It works as expected now. Since, the code for other OS is not changed, it would work for other OS as well.
",685,True,en,0
2066,1,1,0,Externals,hokein,2015-06-26T14:24:33Z,2,2,1,0,,0,False,en,0
2063,1,2,0,Externals,darwin,2015-06-26T13:49:57Z,2,2,2,0,"ninja compilation failed for me under OS X 10.11
",49,True,en,0
2060,1,1,0,Externals,geelen,2015-06-26T13:26:15Z,1,1,1,0,"<3
",3,True,en,0
2057,3,0,0,Internals,zcbenz,2015-06-26T02:47:04Z,18,16,6,0,"Since there is only one GPU process it is more suitable to put `gpu-crashed` event in `app`, otherwise once GPU process crashes this event would be pushed to every WebContents.

I'm not going to keep compatibility with old API though, since the original implementation didn't call `GpuDataManager::AddObserver` and it never worked.
",332,True,en,0
2054,1,2,9,Externals,deepak1556,2015-06-26T02:54:47Z,41,15,1,0,"Fixes #2050 is this problem with node integration that `resolveproxy` call made earlier than initialising `url_request_context_getter` ?

Also based on suggestion [here](https://code.google.com/p/chromium/codesearch#chromium/src/net/url_request/url_request_context_getter.h&q=geturlrequestcontext&sq=package:chromium&l=30) moved `GetURLRequestContext` to network task runner.
",376,True,en,0
2051,19,0,0,Internals,zcbenz,2015-06-25T07:11:40Z,694,659,25,0,"This PR makes NativeWindow independent from WebContents so all WebContents's lifetime and behaviors are managed by the `api::WebContent` alone.
",144,True,en,0
2046,14,0,0,Internals,zcbenz,2015-06-24T12:01:42Z,461,127,21,0,"This PR transfer most native JS objects' lifetime management from JS to C++, so we can easily manipulate JS objects in C++.

Refs #959.
",136,True,en,0
2043,3,0,0,Internals,zcbenz,2015-06-24T04:25:07Z,96,71,6,0,"Makes the global BrowserContext visible with `app.defaultSession`, and it will be used as default session for modules like WebContents and protocol.

Refs #959.
",161,True,en,0
2039,10,0,0,Internals,zcbenz,2015-06-23T14:57:08Z,200,133,18,0,"- Some unnecessary JS code are moved to C++
- Remove uses of `node::MakeCallback`
- Remove uses of `Isolate::GetCurrent`
",121,False,en,0
2034,1,1,0,Externals,hongrich,2015-06-23T04:38:02Z,23,0,2,0,"Add tests for reading unpacked files using both fs.readFileSync and
internalModuleReadFile
",91,False,en,0
2030,1,7,8,Externals,deepak1556,2015-06-23T14:39:13Z,209,0,5,1,"Fixes #1909 

this basic implemetation provides ability to save downloads, the default download directory points to `Downloads` folder in the respective app. We can provide api around this for users track status of each download by adding [observers](https://code.google.com/p/chromium/codesearch#chromium/src/content/public/browser/download_item.h&sq=package:chromium&rcl=1434958068&l=87) to this class, it deserves a separate PR. Thoughts ?
",443,True,en,0
2028,1,5,0,Externals,preco21,2015-06-23T03:12:23Z,1849,0,18,0,"Not yet fully completed, but main tutorials and apis translation has been completed. (except one file)
I will be also translate the other files soon!
",150,False,en,0
2027,1,5,4,Externals,deepak1556,2015-06-24T02:45:22Z,51,11,2,1,,0,False,en,0
2025,4,5,15,Externals,hokein,2015-06-24T10:53:10Z,242,0,6,2,"The PR introduces a new type `powerSaveBlocker` API. Fixes #1936 

API details:
# power-save-blocker

The `power-save-blocker` module is used to block the system from entering
low-power(sleep) mode, allowing app to keep system and screen active.

An example is:

``` javascript
var powerSaveBlocker = require('power-save-blocker');

var id = powerSaveBlocker.start(powerSaveBlocker.PREVENT_DISPLAY_SLEEP);
console.log(powerSaveBlocker.isStarted(id));

powerSaveBlocker.stop(id);
```
## powerSaveBlocker.start(type)
- `type` - Power save blocker type
  - powerSaveBlocker.PREVENT_APP_SUSPENSION - Prevent the application from being
    suspended. Keeps system active, but allows screen to be turned off.
    Example use cases: downloading a file, playing audio.
  - powerSaveBlocker.PREVENT_DISPLAY_SLEEP - Prevent the display from going to sleep.
    Keeps system and screen active.
    Example use case: playing video.

Starts the power save blocker preventing the system entering lower-power mode.
Returns an integer identified the power save blocker.

**Note:**
`PREVENT_DISPLAY_SLEEP` has higher precedence level than `PREVENT_APP_SUSPENSION`.
Only the highest precedence type takes effect. In other words, `PREVENT_DISPLAY_SLEEP`
always take precedence over `PREVENT_APP_SUSPENSION`.

For example, an API calling A requests for `PREVENT_APP_SUSPENSION`, and
another calling B requests for `PREVENT_DISPLAY_SLEEP`. `PREVENT_DISPLAY_SLEEP`
will be used until B stops its request. After that, `PREVENT_APP_SUSPENSION` is used.
## powerSaveBlocker.stop(id)
- `id` Integer - The power save blocker id returned by `powerSaveBlocker.start`.

Stops the specified power save blocker.
## powerSaveBlocker.isStarted(id)
- `id` Integer - The power save blocker id returned by `powerSaveBlocker.start`.

Returns whether the corresponding `powerSaveBlocker` starts.
",1857,True,en,0
2024,1,1,0,Externals,hokein,2015-06-22T15:49:40Z,4,0,1,1,"Fixes #2021 
",13,True,en,0
2019,1,1,0,Externals,hokein,2015-06-23T02:20:46Z,20,1,1,2,"Making it more clear to developers, related to #805 .
",54,True,en,0
2014,3,1,0,Internals,zcbenz,2015-06-23T05:34:40Z,33,12,7,3,"This PR brings back zygote process on Linux, because disabling it makes fontconfig serve wrong fallback fonts. I'm still not sure of the root reason, but keeping the same behavior with Chromium is always a good idea.

Refs #1101.
Fix #1605. 
",242,True,en,0
2009,1,6,0,Externals,deepak1556,2015-06-23T02:03:40Z,4,3,1,4,"Fixes #1866 
",13,True,en,0
2004,5,0,0,Internals,zcbenz,2015-06-18T10:25:42Z,56,40,14,0,"Refs: #959

This removes the assumption of global browser context in most code, some APIs like `app.resolveProxy` and `protocol` still uses global context, but we can easily make them fallback to use default session when we have `Session` API in future.
",254,True,en,0
2002,15,4,1,Externals,paulcbetts,2015-06-26T03:43:08Z,92,0,5,8,"This PR changes BrowserWindow to Emit events when WM_APPCOMMAND comes in (https://msdn.microsoft.com/en-us/library/windows/desktop/ms646275(v=vs.85).aspx) so that users can capture the mouse Back/Forward buttons as well as media keys.
## TODO:
- [x] Emit the event
- [x] Add an Enum in CoffeeScript so that it's easier to use instead of looking it up in a chart
- [x] :memo:
",375,False,en,0
1998,1,1,15,Externals,deepak1556,2015-06-19T08:21:29Z,10,0,2,1,"Fixes #1933 
",13,True,en,0
1997,1,6,0,Externals,deepak1556,2015-06-18T07:55:59Z,40,1,3,0,"Fixes #1985 
",13,True,en,0
1995,11,0,0,Internals,zcbenz,2015-06-17T04:00:26Z,317,4,9,0,"Fixes #1793.
",13,True,en,0
1994,1,0,0,Externals,paulcbetts,2015-06-17T01:18:15Z,1,1,1,0,"Just like it says :)
",21,True,en,0
1984,9,33,10,Externals,patrickdet,2015-10-23T05:54:29Z,112,4,4,129,"Most of this has just been extracted from https://github.com/atom/atom. The Api of the current Mac autoupdater is kept. Feedback would be greatly appreciated. 
",160,True,en,0
1981,12,3,35,Externals,hokein,2015-06-23T02:04:42Z,702,0,9,7,"Fixes #1606 . The cookies APIs are defined as followed:
## Class: WebContents.session.cookies

The `cookies` gives you ability to query and modify cookies, an example is:

``` javascipt
var BrowserWindow = require('browser-window');

var win = new BrowserWindow({ width: 800, height: 600 });

win.loadUrl('https://github.com');

win.webContents.on('did-finish-load', function() {
  // Query all cookies.
  win.webContents.session.cookies.get({}, function(error, cookies) {
    if (error) throw error;
    console.log(cookies);
  });

  // Query all cookies that are associated with a specific url.
  win.webContents.session.cookies.get({ url : ""http://www.github.com"" },
      function(error, cookies) {
        if (error) throw error;
        console.log(cookies);
  });

  // Set a cookie with the given cookie data;
  // may overwrite equivalent cookies if they exist.
  win.webContents.session.cookies.set(
    { url : ""http://www.github.com"", name : ""dummy_name"", value : ""dummy""},
    function(error, cookies) {
        if (error) throw error;
          console.log(cookies);
});

});
```
### WebContents.session.cookies.get(details, callback)
- `details` Object
  - `url` String - Retrieves cookies which are associated with `url`.
    Empty imples retrieving cookies of all urls.
  - `name` String - Filters cookies by name
  - `domain` String - Retrieves cookies whose domains match or are subdomains of `domains`
  - `path` String - Retrieves cookies whose path matches `path`
  - `secure` Boolean - Filters cookies by their Secure property
  - `session` Boolean - Filters out session or persistent cookies.
- `callback` Function - function(error, cookies)
  - `error` Error
  - `cookies` Array - array of cookie objects.
    - `cookie` - Object
      -  `name` String - The name of the cookie
      -  `value` String - The value of the cookie
      -  `domain` String - The domain of the cookie
      -  `host_only` String - Whether the cookie is a host-only cookie
      -  `path` String - The path of the cookie
      -  `secure` Boolean - Whether the cookie is marked as Secure (typically HTTPS)
      -  `http_only` Boolean - Whether the cookie is marked as HttpOnly
      -  `session` Boolean - Whether the cookie is a session cookie or a persistent
      -    cookie with an expiration date.
      -  `expirationDate` Double - (Option) The expiration date of the cookie as
         the number of seconds since the UNIX epoch. Not provided for session cookies.
### WebContents.session.cookies.set(details, callback)
- `details` Object
  - `url` String - Retrieves cookies which are associated with `url`
  - `name` String - The name of the cookie. Empty by default if omitted.
  - `value` String - The value of the cookie. Empty by default if omitted.
  - `domain` String - The domain of the cookie. Empty by default if omitted.
  - `path` String - The path of the cookie. Empty by default if omitted.
  - `secure` Boolean - Whether the cookie should be marked as Secure. Defaults to false.
  - `session` Boolean - Whether the cookie should be marked as HttpOnly. Defaults to false.
  - `expirationDate` Double -   The expiration date of the cookie as the number of
    seconds since the UNIX epoch. If omitted, the cookie becomes a session cookie.
- `callback` Function - function(error)
  - `error` Error
### WebContents.session.cookies.remove(details, callback)
- `details` Object
  - `url` String - The URL associated with the cookie
  - `name` String - The name of cookie to remove
- `callback` Function - function(error)
  - `error` Error
",3561,False,en,0
1980,1,1,0,Externals,magicae,2015-06-16T06:46:31Z,34,0,5,0,"Add `setAudioMuted`, `isAudioMuted` to webContents.
Fix https://github.com/atom/electron/issues/1881
",101,False,en,0
1979,1,0,4,Externals,deepak1556,2015-06-16T08:40:06Z,14,3,1,0,"Fixes https://github.com/atom/electron/issues/1888
",51,True,en,0
1970,1,16,9,Externals,deepak1556,2015-06-19T08:16:46Z,47,0,8,4,"Fixes #1879 

`AddAdditionalSchemes` gets called at early stage of content [intialisation](https://code.google.com/p/chromium/codesearch#chromium/src/content/app/content_main_runner.cc&sq=package:chromium&type=cs&l=703&rcl=1434281558) and standard schemes list gets locked once its done. Couldnt come up with a better approach than extracting from environment varaible `export SCHEMES=library,test,atom`. Any better option to it ?

```
> window.location
Location {ancestorOrigins: DOMStringList, href: ""test://example.com/c.html""}
ancestorOrigins: DOMStringListassign: () { [native code] }
hash: """"
host: ""example.com""
hostname: ""example.com""
href: ""test://example.com/c.html""
origin: ""test://example.com""
pathname: ""/c.html""
port: """"
protocol: ""test:""
reload: reload() { [native code] }
replace: () { [native code] }
search: """"
toString: toString() { [native code] }
valueOf: valueOf() { [native code] }
__proto__: Location
```
",929,True,en,0
1967,1,1,0,Externals,j13z,2015-06-16T02:30:06Z,14,14,1,2,,0,False,en,0
1953,1,1,1,Externals,bpasero,2015-06-16T02:08:58Z,1,3,1,3,"On Mac, open-file is also emitted when the application is not yet running.
",75,True,en,0
1951,1,1,0,Externals,sotayamashita,2015-06-12T07:49:21Z,131,0,1,0,"This translation is based on [Replace shorthand if-statement notation in quick start docs](https://github.com/atom/electron/commit/464263067403f9607f2f1218a5bf5ad6d0a272ae)
",173,True,en,0
1941,1,7,20,Externals,deepak1556,2015-06-26T02:31:18Z,132,7,7,14,,0,False,en,0
1932,3,1,0,Externals,samueleaton,2015-06-12T07:07:17Z,8,0,1,1,"The document for the webview element does not explicitly inform that 
the webview element has to be loaded before using the element's methods.
It is now clear to check if element is loaded first.

The documentation for webview methods says nothing of any prerequisites.
",270,False,en,0
1927,1,1,0,Externals,mattotodd,2015-06-12T05:55:12Z,23,15,4,1,"I was developing an electron app, and on Mac,  when i tried to open an externalUrl,  if there was not an application that could support the custom scheme (e.g. foobar://some/url)  it would pop up a native dialog asking if the user would like to go to the app store to look for an application to launch with.

I thought it would make more sense to let the electron app handle this failure,  so I'm proposing that the call return a boolean if it was successful or not.

This is my first pull request for electron, so any advice would be much appreciated.
",553,True,en,0
1925,6,2,0,Internals,zcbenz,2015-06-10T11:11:57Z,92,43,13,0,"v2.2.1 seems stable enough, and it will make requests for io.js update quiet for some time.

Close #1914.
",106,True,en,0
1922,3,0,0,Internals,zcbenz,2015-06-10T04:34:32Z,52,63,4,0,"Accessing clipboard in renderer process on Linux is quite reliable, this PR forces to use clipboard module on the main process to solve it. And in order to make readImage/writeImage work in renderer process, this PR also adds `Buffer` support in the `remote` module.

Close #1878.
",281,True,en,0
1921,1,1,0,Externals,samueleaton,2015-06-10T04:48:58Z,1,1,1,0,"The example attempts to change the height of an inline element (webview), which has no effect. 
The height styling will now take effect.
",137,False,en,0
1918,3,2,1,Externals,kirkouimet,2015-06-10T04:48:45Z,3,2,2,0,"See https://github.com/atom/electron/issues/1910
",49,True,en,0
1916,2,1,0,Externals,alexwarren,2015-06-10T04:40:24Z,10,6,1,0,"Fixes #1915
",12,True,en,0
1911,18,1,0,Externals,thomastuts,2015-06-10T04:35:55Z,62,57,15,0,"This PR fixes several nitpicks in the documentation related to either spelling/grammar or code style.

Let me know if I took too many liberties when changing the code examples, and I'll make changes accordingly. I couldn't find any information in the contributing guidelines about a JavaScript style guide, so I assumed that you would be using a generic style.
",361,True,en,0
1907,1,1,0,Externals,timruffles,2015-06-09T10:48:52Z,6,0,1,0,"re [#1877]
",11,True,en,0
1906,2,0,0,Internals,zcbenz,2015-06-09T08:23:28Z,9,25,3,0,"Close #1904.
",13,True,en,0
1899,1,1,0,Externals,kirkouimet,2015-06-08T14:45:43Z,1,1,1,0,"Was running into a errors with archive.destroy breaking when using a JavaScript library that modified the Object.prototype, this small fix resolves the issue.
",159,True,en,0
1897,1,0,0,Internals,zcbenz,2015-06-08T05:54:24Z,1,0,1,0,"Crashpad doesn't ship dump_syms, we have to build it from breakpad.

Related:
#1822

https://code.google.com/p/crashpad/issues/detail?id=29
",140,True,en,0
1894,1,2,0,Externals,samccone,2015-06-08T14:31:17Z,10,11,1,0,,0,False,en,0
1891,1,0,0,Externals,samccone,2015-06-08T14:29:07Z,12,16,1,1,,0,False,en,0
1890,1,0,0,Externals,samccone,2015-06-08T14:30:25Z,3,3,1,1,,0,False,en,0
1889,1,0,0,Externals,samccone,2015-06-08T14:30:35Z,1,1,1,1,,0,False,en,0
1886,5,2,0,Externals,BobCochran,2015-06-08T14:42:04Z,40,41,1,1,"I've updated the Linux build instructions to add a little more detail. I hope this is satisfactory. Thank you!
",111,True,en,0
1885,1,1,0,Externals,lucidogen,2015-06-08T14:33:08Z,2,0,1,2,"Accessing renderer process from main process is not documented and as ""remote"" does the opposite, it seems fair to add a pointer here.
",135,True,en,0
1884,2,1,0,Externals,lucidogen,2015-06-08T14:32:06Z,4,2,1,2,"The example was probably using an older API where capturePage would return a Buffer.

Now that capturePage returns a NativeImage, we must add the extra 'toPng()' step in this example to avoid confusing users.

The example was tested and creates correct PNG files.
",264,True,en,0
1883,4,8,0,Externals,hokein,2015-06-09T03:15:44Z,12,9,4,2,"The PR #801 forgot to update the doc.

\cc @frankhale  
",56,True,en,0
1882,3,1,0,Externals,hokein,2015-06-09T08:35:08Z,56,33,6,2,"**TODO**
- [x] Test on OS X.
- [x]  Check the behavior of handling `uploads.log` is same with the `coffeescipt` implementation.
",128,False,en,0
1880,1,0,0,Externals,deepak1556,2015-06-08T15:13:27Z,4,0,1,2,"Depends on https://github.com/atom/brightray/pull/113

![screen shot 2015-06-06 at 2 31 47 pm](https://cloud.githubusercontent.com/assets/964386/8019073/2ca529cc-0c59-11e5-9ddf-9cae6ffe3347.png)
",195,True,en,0
1874,13,0,0,Internals,zcbenz,2015-06-05T10:40:38Z,687,676,13,0,,0,False,en,0
1873,1,2,2,Externals,hokein,2015-06-09T04:03:45Z,26,5,3,3,"If a response header has multiple-lines field, it will just show the last line.

A simple server example:

```
var http = require('http')

var server = http.createServer(function (req, res) {
  console.log('listen');
  res.setHeader('Access-Control-Allow-Origin', 'file://')
  res.setHeader('Access-Control-Allow-Methods', ['GET,PUT,POST', 'DELETE'])
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type')
  res.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);
  res.end('whoop!')
})

server.listen(8888);
```

The response header in `did-get-response-details` will be 

```
{ 'access-control-allow-origin': 'file://',
  'access-control-allow-methods': 'delete',
  'access-control-allow-headers': 'content-type',
  'set-cookie': 'language=javascript',
  date: 'fri, 05 jun 2015 05:44:01 gmt',
  connection: 'keep-alive',
  'transfer-encoding': 'chunked' }
```

This PR make it support multiple lines, the result is 

```
{ 'access-control-allow-headers': [ 'content-type' ],
  'access-control-allow-methods': [ 'get,put,post', 'delete' ],
  'access-control-allow-origin': [ 'file://' ],
  connection: [ 'keep-alive' ],
  date: [ 'fri, 05 jun 2015 05:45:39 gmt' ],
  'set-cookie': [ 'type=ninja', 'language=javascript' ],
  'transfer-encoding': [ 'chunked' ] }
```

\cc @deepak1556 
",1306,True,en,0
1867,1,1,0,Externals,deepak1556,2015-06-05T05:26:37Z,132,0,2,0,"For https://github.com/atom/electron/issues/1842#issuecomment-108611241

Depends on https://github.com/atom/brightray/pull/111
",127,True,en,0
1863,6,0,0,Internals,zcbenz,2015-06-04T14:36:33Z,295,227,10,0,"When users run an app with electron-prebuilt, it would be helpful for them to have a default menu. This PR doesn't add default menu for bundled app, and for apps that create their own menus the default menu would be overridden so things will not change for them.

The only change is for the apps that do not want a menu, if the app is bundled with Electron then nothing would change, if the app is ran by the default_app, a default menu will show, but they can call `Menu.setApplicationMenu(null)` to remove it.

Fix #1718.
",524,True,en,0
1860,1,1,2,Externals,hokein,2015-06-08T11:41:33Z,7,4,1,4,"Fixes #1855 .
This patch makes the `default_path` parameter behave samely on three platforms.
",94,False,en,0
1859,2,16,4,Externals,deepak1556,2015-06-10T11:17:41Z,60,0,5,6,"Fixes #1221 
- [ ] Tests
",25,False,en,0
1850,5,0,0,Internals,zcbenz,2015-06-03T07:02:39Z,90,150,8,0,"The renderer process's ID is not reliable to be used to search for NativeWindow or guest WebContents, because pending navigations can happen for multiple times before the WebContents switches to the new renderer process, so it would be impossible to determine the owner of a pending renderer process according to its process.

This PR changes to only use WebContents for search, which doesn't change between navigations. It also fixed a bug of `<webview>` that changing `src` would call `loadUrl` for twice, which is the direct cause of #1843.

Fix #1766
Fix #1754
Fix #1820
Fix #1843
Fix #1823
",595,True,en,0
1849,2,1,0,Internals,zcbenz,2015-06-03T02:48:31Z,1,79,6,0,"It was introduced to work around a bug of devtools not loading, now since we have the [real fix](https://github.com/atom/brightray/pull/110) I'm removing this work-around.
",172,True,en,0
1848,5,4,3,Externals,seppestas,2015-06-09T02:49:01Z,11,2,2,6,"Used [Shell_NotifyIconGetRect function](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378426) to get the bounds of the application's tray icon.

Note that this only works with Windows 7 or Windows Server 2008 R2 and later.
I did not test this on Windows XP. Since even Microsoft stopped supporting Windows XP, I think decent support on modern OS's is more important than supporting legacy systems.

It would be nice if someone could check if no things got broken to badly though (is there an error when clicking the tray icon on Windows XP?)... If so, could this be handled gracefully?

Fixes #1159 and related to #1500.
",634,True,en,0
1839,1,1,0,Externals,deepak1556,2015-06-03T10:31:25Z,10,4,3,1,"context menu would have been broken when devtools was not opened with `openDevTools` , this fixes it.
",102,True,en,0
1837,1,1,2,Externals,deepak1556,2015-06-04T13:13:55Z,25,0,6,3,"Alternative to #1786 
",22,True,en,0
1835,28,14,27,Externals,hokein,2015-06-17T04:22:56Z,1149,63,23,15,"This PR implements a API allowing user to save the browser window page as PDF in local disk. The API provides Chromium Preview feature in `Electron`. Fixes #1157, #805.

Currently, the API definition:

**WebContents.printToPDF(options, callback)**
- `options` Object
  - `marginsType` Integer - Specify the type of margins to use
    - 0 - default
    - 1 - none
    - 2 - minimum
  - `printBackground` Boolean - Whether to print CSS background.
  - `printSelectionOnly` Boolean - Whether to print selection only.
  - `landscape` Boolean - `true` for landscape, `false` for portrait.
- `callback` Function - `function(error, buffer) {}`
  - `error` Error
  - `buffer` node:Buffer - Contains the pdf data

This PR also exposes `print` API to `WebContents` and `WebView`.
## TODO
- [x]  Implement on Windows
- [x]   Implement on OS X
- [x]   Implement on Linux 
",860,True,en,0
1834,1,1,0,Externals,hokein,2015-06-01T05:25:31Z,1,0,1,0,"The current release of `electron` doesn't ship `pdf.dll`. Fixes #1826 .
",72,True,en,0
1822,11,4,39,Externals,hokein,2015-06-04T14:11:14Z,153,59,12,5,"Replace the current breakpad on OS X, fixes #1638 . Crash spec test is passed on OS X 10.9.4.

There are some follow-ups:
- We need a mirror `crashpad` repo, currently it's under my account.
-  The new `crashpad` client is a new out-process architecture. To enable crash feature, we need to launch a new process from Browser process to run [`crashpad_handler`](http://docs.crashpad.googlecode.com/git/man/crashpad_handler.html). We might need to custom the `crash-reporter` API to make it more clearer(I keep it the same now). 
",528,True,en,0
1814,1,4,0,Externals,fraserxu,2015-06-03T02:20:59Z,1,0,1,4,"Fixed #1813  window.alert(new Error('test')) cause ""dialog.showMessageBox argument 2"" error
",92,True,de,0
1811,5,1,0,Internals,zcbenz,2015-05-29T06:14:23Z,251,69,12,0,"Chrome 43 has changed how webview's WebContents is resized according to the webview element in embedder, this PR updates our webview implementation for that.

Fixes #1804.
",172,True,en,0
1799,1,0,0,Internals,zcbenz,2015-05-28T08:22:36Z,5,2,1,0,"The old gcc on travis ci now can not compile V8 4.3's header.
",62,True,en,0
1797,1,1,2,Externals,deepak1556,2015-05-28T06:44:46Z,1,1,1,0,"Fixes #1790 
Fixes #1789 
",26,False,en,0
1792,1,0,0,Externals,jlord,2015-05-27T21:37:18Z,2,2,2,0,"This is a wee update to change `cmd` to `bash` in the documentation's markdown code snippets. The markdown parser we're using in the Jekyll docs doesn't recognize `cmd` and fails to render at all when it encounters it, which is kind of silly, but since we just use it in these two places I think it's OK to use `bash` instead. 
",328,True,en,0
1785,1,1,0,Externals,deepak1556,2015-05-28T08:22:45Z,5,2,1,0,"Fixes #1772 
",13,True,en,0
1763,1,0,0,Externals,samccone,2015-05-24T02:43:37Z,5,5,1,0,,0,False,en,0
1761,1,0,0,Externals,samccone,2015-05-24T02:42:53Z,8,8,1,0,"part 2
",7,True,en,0
1760,1,2,0,Externals,samccone,2015-05-24T02:42:47Z,1,1,1,0,,0,False,en,0
1755,8,0,0,Internals,zcbenz,2015-05-23T04:24:36Z,286,255,69,0,,0,False,en,0
1752,2,1,3,Externals,deepak1556,2015-05-28T07:29:36Z,72,6,4,5,"Fixes #1729 

Have removed `has(format)` api , since its no use with `availableFormats` . Also  we have a generic `Read` api which can read to the supported type but doesnt respond what type it is, can we remove that  and just leave with the explicit types [`text`, `html`, `bitmap`, `rtf`] ?
",293,True,en,0
1741,1,0,0,Internals,zcbenz,2015-05-21T07:46:15Z,1,0,1,0,"Not sure why it wasn't implemented, fixes #1715.
",49,True,en,0
1738,4,6,4,Externals,deepak1556,2015-05-27T07:05:55Z,21,6,4,6,"better approach to #1604 

Depends on https://github.com/atom/libchromiumcontent/pull/120
",90,True,en,0
1737,1,1,0,Externals,magicae,2015-05-20T11:24:09Z,2,1,1,0,"Add brackets around `plugins: true`
",36,True,en,0
1734,3,0,1,Internals,zcbenz,2015-05-20T08:57:35Z,17,15,5,0,"Fixes #1652.
",13,True,en,0
1732,1,0,0,Internals,zcbenz,2015-05-20T02:45:01Z,8,16,4,0,"This fixes `web-preferences` option not working after Chrome42, closes #1592.
",78,True,en,0
1730,2,1,0,Externals,deepak1556,2015-05-21T06:56:30Z,52,4,7,1,"Fixes #1645 

Also `window.history.length` will return the value of the history list we maintain on the browser.
",113,True,en,0
1724,3,2,10,Externals,jlord,2015-05-22T02:33:39Z,71,0,1,3,"This PR kicks off adding a `CONTRIBUTING.md` to Electron. I started with [Atom's](https://github.com/atom/atom/blob/master/CONTRIBUTING.md) and then whittled it down to what I felt was relevant to Electron. Feel free to hop on this branch and add/remove as you see fit. 

Also, of course this needs @zcbenz :eyes: since he'll know best what belongs :sparkles: 
",361,True,en,0
1719,2,3,5,Externals,deepak1556,2015-05-27T07:47:41Z,41,1,9,8,"Fixes #1331 

Depends on https://github.com/atom/brightray/pull/107
- [x] Need to implement for browser window (facing some crashes), currently works for webview
",162,True,en,0
1713,1,1,0,Externals,deepak1556,2015-05-21T02:43:34Z,1,1,1,4,"Fixes #1695 
",13,True,en,0
1710,1,1,2,Externals,deepak1556,2015-05-21T06:58:27Z,1,5,1,4,"Fixes #1704 
",13,True,en,0
1708,1,5,0,Externals,kevva,2015-05-22T06:24:59Z,2,0,1,5,"Good list of really cool applications using `electron`.
",56,True,en,0
1706,2,3,4,Externals,adill,2015-05-22T02:17:00Z,5,0,1,5,"In my app I call CrashReporter start() multiple times (when I need to update the metadata) -- but this doesn't work out of the box -- crashes fail to report.

This change explicitly nulls the existing breakpad EH before allocating a new one to make sure we're cleaning out the old EH before installing the new one.
",315,True,en,0
1705,2,3,2,Externals,adill,2015-05-21T02:38:09Z,21,13,1,4,"I found myself executing compile-coffee.py in an environment where 'node' was not found in my $PATH (iirc, an Xcode shell script action) so I augmented compile-coffee.py to check the usual suspects -- /usr/local/bin, /usr/bin, and /bin (in addition to $PATH) -- to find 'node'
",277,True,en,0
1703,1,1,0,Externals,tommoor,2015-05-15T20:55:04Z,2,2,1,0,,0,False,en,0
1701,5,3,0,Externals,CharlieHess,2015-05-20T15:12:46Z,15,0,5,4,"This PR adds `PasteAndMatchStyle` (aka _Paste as plain text_) to the `WebContents` API.
",88,True,en,0
1696,1,1,0,Externals,campersau,2015-05-15T16:30:28Z,1,1,1,0,,0,False,en,0
1689,2,7,2,Externals,deepak1556,2015-05-27T07:04:22Z,25,0,2,12,"Fixes #1612 
",13,True,en,0
1670,3,2,0,Internals,joshaber,2015-05-19T07:51:22Z,1,1,1,6,"Fixes #1665 and maybe #1661 too.

If the window's transparent or frameless then it's safer for backwards compatibility if we use the textured window style.
",156,True,en,0
1669,6,5,2,Externals,hokein,2015-05-26T04:41:51Z,268,166,9,13,"Instead of linking pdf libraries statically, we make the pdf libraries into a single shared library(pdf.dll).

Electron.exe will only load the `pdf.dll` programmatically during `print` API invoking. Moreover, the developer can safely remove `pdf.dll` if they don't need the `print` API in saving binary size.

Below is some compared data of binary size with the latest release v0.26.0:
- v0.26.0:  80.6 MB(`electron.exe`)
- with this patch:  74.6MB(`electron.exe`) + 9.3 MB(`pdf.dll`)

Depends on atom/libchromiumcontent#115
## TODO
- [x] Test Release build
- [x] Test Debug build
",581,True,en,0
1668,1,1,4,Externals,deepak1556,2015-05-20T09:51:06Z,49,1,6,7,"Fixes #832 , thought it would be good to have event to detect plugin crashes too. Thoughts ?
",93,True,en,0
1663,1,1,0,Externals,khornberg,2015-05-20T09:44:29Z,1,1,1,7,"Using the link provided one receives a response of `Cannot GET /[object%20Object]`.

I've tested this on electron 0.25.3 using the example application and node-inspector version 0.10.0.
The url change is the url provided by node-inspector in the terminal window.
",263,True,en,0
1660,3,1,0,Externals,deepak1556,2015-05-20T06:05:53Z,77,0,7,7,"Fixes #1618 
",13,True,en,0
1657,3,3,0,Internals,zcbenz,2015-05-12T09:23:25Z,10,3,5,0,"This PR fixes weird problems caused by Chrome's own allocator shim.

Fixes #1650.
Fixes #1471.
Fixes #1463.
Fixes #1509.
Fixes #1489.
",134,True,en,0
1651,3,4,0,Externals,magicae,2015-05-20T03:32:09Z,75,1,3,8,"Fix https://github.com/atom/electron/issues/1637
",49,True,en,0
1646,8,0,0,Internals,zcbenz,2015-05-11T11:47:15Z,103,15,10,0,"When in-page navigations happened we should not do full page refreshes. Fixes #1608.
",85,True,en,0
1642,3,1,0,Internals,zcbenz,2015-05-11T04:07:16Z,58,29,6,0,"This PR keeps asar archive opened so we don't need to reopen it for every fs operation on it, we can have potential performance boost from it.

As a side effect, when the asar archive is overwritten or deleted due to auto-updating or something else, Electron will still read the original archive. Fixes #1219.
",310,True,en,0
1636,1,0,0,Internals,zcbenz,2015-05-10T12:52:46Z,4,4,2,0,"For multiple monitors we still want to get window positions based on primary monitor so we can correctly show the window on specified monitor. Fixes #1625.
",156,True,en,0
1635,1,1,0,Externals,fengmk2,2015-05-10T08:45:51Z,1,1,1,0,"fixes #1497
",12,True,en,0
1634,1,1,0,Externals,federicobond,2015-05-10T15:27:43Z,1,1,1,0,"[...] it would be `attempting -> tempting` to pass callbacks when calling a remote function.
",93,True,en,0
1633,4,7,13,Externals,deepak1556,2015-05-27T06:54:36Z,91,5,10,17,"Fixes #1561 , need verification for windows.
- [ ] Check for a better hook on linux/windows

Test: 
- [x] OSX
- [x] Linux
- [ ] Windows 
",137,False,en,0
1616,6,15,13,Externals,deepak1556,2015-05-21T07:03:48Z,114,3,11,13,"Fixes #1503 
Fixes #1721 
Fixes #1627 
",39,False,en,0
1614,1,0,0,Internals,zcbenz,2015-05-08T05:52:55Z,3,2,1,0,"Fixes #1319.
",13,True,en,0
1604,2,5,2,Externals,deepak1556,2015-05-20T11:08:55Z,15,2,4,12,"Fixes #1253 

the event now provides response headers as a string with key-value separated by new-line character. Just left the parsing to users or should we do it and return as an object ?

```
[30920:0507/170512:INFO:CONSOLE(116)] ""HTTP/1.1 200 OK
Content-Disposition: inline; filename=""Untitled-5.jpg""
X-Thumbnailer: Vignette
Content-Type: image/jpeg
X-Surrogate-Key: 77b98cc1f264c61cfe91a373a74e6d646daca3ad
Server: Jetty(9.2.z-SNAPSHOT)
X-Cacheable: YES
Content-Length: 8933224
Accept-Ranges: bytes
Date: Wed, 06 May 2015 13:19:31 GMT
Age: 1332140
X-Served-By: vignette-s1, cache-wk-sjc3160-WIKIA, cache-sn87-SIN
X-Cache: ORIGIN, HIT, HIT
X-Cache-Hits: ORIGIN, 1, 1
X-Timer: S1430918371.297632,VS0,VE20
Vary: Accept-Encoding
Timing-Allow-Origin: *
Cache-Control: max-age=31536000, public
"", source: file:///Users/dmohan/projects/github/hello-atom/tray-app/index.html (116)
```

Depends on https://github.com/atom/brightray/pull/105
",937,True,en,0
1601,1,1,0,Externals,hokein,2015-05-10T13:04:45Z,1,1,1,3,"@zcbenz  The `StringToAcclerator` doesn't check the valid range in key `F1~F24`, which causes the potential out-out-bound issue. If developer uses `F25`, it will map to other incorrect key.
",190,True,en,0
1600,2,2,0,Externals,deepak1556,2015-05-11T05:15:15Z,51,2,5,3,"Fixes #1189 

![screen shot 2015-05-07 at 1 15 17 pm](https://cloud.githubusercontent.com/assets/964386/7510580/3bfbb004-f4bb-11e4-9439-05459aa5a8a3.png)
",154,True,en,0
1596,2,5,0,Externals,deepak1556,2015-05-20T03:52:52Z,95,0,5,13,"Fixes https://github.com/atom/electron/issues/542

Need some clarification on how useful is this interceptor api, is there any wide use case for it to be present ? If its just offline scenario, wont service workers help out.. ?
",228,True,en,0
1587,9,1,5,Externals,paulcbetts,2015-05-20T02:32:09Z,52,6,7,13,"Using the `setUserAgent` method on WebView when you want to ensure that all requests get sent with your custom user agent is very difficult to get right - if you call it too early, the method throws, and calling it too late will result in the first few requests being sent with the default user agent.

This PR creates an additional way to set the user agent, via an HTML attribute:

```
<webview tabindex=""-1"" id=""webView1"" preload=""myScript.js"" src=""https://google.com"" useragent=""Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko"">
</webview>
```

This then guarantees that we'll apply the custom user agent right before navigation. This PR doesn't remove the existing method, nor does it attempt to catch mutations to `useragent` after the page has loaded - I can add these. 
## TODO:
- [x] Specs
- [x] Documentation
- [x] Code Review
",862,True,en,0
1585,4,10,0,Internals,joshaber,2015-05-10T13:09:38Z,16,3,4,4,"I was playing around with making an Electron app the other day and noticed something that bothered my native developer eyes: the window was missing the divider line between the title bar and the content.

![before](https://cloud.githubusercontent.com/assets/13760/7485833/7de6fe0e-f369-11e4-8d2f-340de8874433.jpg)

It turns out it's because we're using the textured window background. Remove that flag and we're :sparkles::cool::

![after](https://cloud.githubusercontent.com/assets/13760/7485843/af7de450-f369-11e4-8615-abc57f0ff6b3.jpg)

It's entirely possible there's a good reason that I'm unaware of to use the textured window background. Also I know that the line can be recreated using CSS, but then you see a flash when you load the app before it's there.
",764,True,en,0
1584,1,0,0,Internals,zcbenz,2015-05-08T05:39:48Z,19,14,2,2,"For #169.
",10,True,en,0
1579,1,0,0,Internals,zcbenz,2015-05-05T08:37:59Z,1,1,1,0,"Required by #912 and #1532.
",28,True,en,0
1575,1,1,0,Externals,paulcbetts,2015-05-05T07:10:18Z,13,0,1,0,"[`electron-rebuild`](https://github.com/paulcbetts/electron-rebuild) is a new npm package that makes dealing with native modules way easier and less hassle than trying to do it yourself, and less demanding than `grunt-build-atom-shell`
",236,True,en,0
1571,1,6,0,Externals,deepak1556,2015-05-07T11:45:35Z,42,0,3,2,"Checking on #1362 , the [`HttpAuthHandlerFactory::CreateDefault`](https://code.google.com/p/chromium/codesearch#chromium/src/net/http/http_auth_handler_factory.cc&sq=package:chromium&rcl=1430724764&l=46) does create handlers for `basic, negotiate, ntlm and digest` . As for #1318 we probably need to pass `URLSecurityManager` using this [method](https://code.google.com/p/chromium/codesearch#chromium/src/net/http/http_auth_handler_factory.cc&sq=package:chromium&rcl=1430724764&l=129) , anyone working on windows can use this as [example](https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/io_thread.cc&sq=package:chromium&rcl=1430739881&l=1118) and implement on brightray side. 

/cc @zcbenz , @paulcbetts thoughts ? 
",742,True,en,0
1568,6,0,0,Internals,zcbenz,2015-05-04T05:13:33Z,65,98,16,0,"Only position is not enough to decide where to show custom view, fixes #1500.
",78,True,en,0
1565,1,1,0,Externals,chicoxyzzy,2015-05-04T04:18:04Z,1,1,1,0,,0,False,en,0
1558,4,11,9,Externals,deepak1556,2015-05-10T08:28:14Z,2364,0,34,7,"Related #912 

Currently flash plugin support is implemented though just as a flag for now, start electron with `--ppapi-flash-path`. Will change the behaviour to `ppapi-plugins-dir` option just like `extra-plugins-dir`.
- PPapi 
  - [ ] ~~change the behaviour of loading plugins~~
  - Flash Plugin
    - [x] Fullscreen
    - [ ] Context Menu
- Test
  - [x] Linux
  - [x] OSX
  - [ ] Windows

Depends on https://github.com/atom/libchromiumcontent/pull/106
",456,True,en,0
1554,1,3,0,Externals,deepak1556,2015-05-10T13:22:01Z,0,24,5,7,"Related #1546 

Currently the `getfavicon` api relies on navigation entry's `GetFavicon` api which at most times returns default empty favicon. So now when page favicon urls availablity are notified, their bitmaps are downloded and stored. I didnt yet find a way to detect whats the icon url used currently in a page, so user has to pass in the url for which they want favicon image, which is ofcourse available during `page-favicon-updated` event. 
",450,True,en,0
1551,1,1,0,Externals,paulcbetts,2015-05-04T04:10:21Z,5,2,1,2,"At some point, unhandled errors in preload scripts stopped being logged to console, meaning that preload scripts were very difficult to debug. Instead, print the error to console (which is what we wanted to have happen anyways)

To repro the bug:
1. Create a page with a WebView that has a preload script
2. In the preload script, throw an error for whatever reason (syntax error, etc)
3. Script silently stops and the page loads but the script didn't execute
",460,True,en,0
1548,2,2,2,Externals,MaxGraey,2015-05-04T04:11:47Z,5,5,1,2,,0,False,en,0
1545,2,3,3,Externals,deepak1556,2015-05-04T03:03:50Z,88,36,9,2,"Fixes #1445 
",13,True,en,0
1543,1,3,4,Externals,deepak1556,2015-05-04T03:11:13Z,26,9,8,2,"Related #1500 

Linux doesnt seem to use onclick notifier, so havnt implement it there. But will this help fix the problem ?
",125,True,en,0
1540,2,0,0,Internals,zcbenz,2015-05-01T06:55:52Z,41,1,5,0,"Fixes #1508.
",13,True,en,0
1538,1,1,0,Externals,leemac,2015-05-01T04:48:55Z,2,2,1,0,"Missing comma in the 'setUserTasks' as well as a typo in the description under ""User tasks (Windows)""
",102,True,en,0
1535,1,4,17,Externals,deepak1556,2015-05-01T06:56:35Z,60,0,3,0,"Related #1331 
- [x] Add unregister helper
- [ ] open service worker devtools
- [ ] Add tests
",94,False,nl,0
1533,2,0,0,Internals,zcbenz,2015-04-30T08:17:26Z,21,5,2,0,"This PR makes building possible with `npm` shipped by `io.js`, fixes #1511.
",76,True,en,0
1532,3,4,0,Externals,hokein,2015-05-10T03:40:19Z,1241,0,15,9,"The Print API(`window.print()`) on Windows will hang on printing spool(see #865). The reason is that Chromium doesn't generate the printed file content and keep waiting in a loop.

In the implementation, Chromium seperates a prcoess called `Utility` to do the printing work, so we need to custom the `Utility` process for Electron. On Windows, the print API relies on the `pdf` component which using to convert to EMF
(see https://code.google.com/p/chromium/issues/detail?id=170859). So we need to port `pdf` component in `libchromiumcontent`.

But there are something need to be considered. Introducing `pdf` component will make the release binary size larger. Is this reaonable? Or we can make the `pdf` as a seperated shared library(`dll`), and if developers don't need the print API, they can safely remove it in saving the binary size. 

As a side effect, with `pdf` component, we may easyly support `print to pdf` and `view pdf` features. 

This patch will rely on atom/libchromiumcontent#104, and fix #865.

Any comments and advice are welcomed.
## TODO
- [x] API window.print() works. The printer will print the document correctly.
- [x] Pass component build(Dev build)
- [x] Pass non-component build(Release build)
- [x] Don't effect the OS X and Linux Platforms
",1272,True,en,0
1527,1,0,0,Externals,frewsxcv,2015-04-29T19:28:52Z,1,1,1,0,"Primarily to fade the comments in the code block
",49,True,en,0
1525,1,6,0,Externals,deepak1556,2015-05-01T04:08:03Z,52,0,8,1,"Fixes #1504 
",13,True,en,0
1521,1,1,0,Externals,deepak1556,2015-04-30T08:54:14Z,3,1,1,1,"Fixes #1506 
",13,True,en,0
1520,3,0,0,Internals,zcbenz,2015-04-29T02:39:44Z,15,14,4,0,"Fixes #995.
",12,True,en,0
1519,1,6,0,Externals,paulcbetts,2015-05-04T02:40:33Z,3,0,1,5,"In Chrome 42, NPAPI is now gated by an `--enable-npapi` flag. This PR sets this flag if plugins are enabled, at least until we can port PPAPI over (this flag still exists as of Chrome 44 today, but at some point the entire NPAPI infrastructure will be :fire:).
## TODO:
- [ ] Make sure I'm not completely full of it
- [ ] Make sure this works
- [ ] Code Review
",361,False,en,0
1514,1,1,0,Externals,mnquintana,2015-04-28T15:57:35Z,1,1,1,0,"Fixes broken image in Readme
",29,True,nl,0
1512,1,1,7,Externals,hokein,2015-05-07T02:35:56Z,15,0,4,8,"Fixes #1395 .  

To simplify the implementation code, this patch reuses the `command` constant defined in ui namespace on Windows, rather than introducing a new constant.

@zcbenz  PTAL.
",187,True,en,0
1505,5,1,0,Internals,kevinsawicki,2015-04-28T09:55:06Z,65,8,2,0,"Also adds `-h/--help` to the command line.

The goal here it just to doc things a bit more and provide some useful links typically found in Help menus.
",152,True,en,0
1502,10,0,0,Internals,zcbenz,2015-04-27T14:00:23Z,192,105,13,0,"This PR fixes a few renderer process related issues.

Changes:
- Navigation happened in `<webview>` tag now restarts renderer process. (Fix #1195)
- Allow opening links with external protocols in `<webview>` tag. (Fix #1458)
- Reimplement navigation history control with JavaScript. (Fix #921, Fix #1249, Fix #836, Fix #1467, Fix #1364)
",337,True,en,0
1495,1,1,1,Externals,bendrucker,2015-04-27T20:30:26Z,14,15,1,0,,0,False,en,0
1491,2,0,0,Internals,zcbenz,2015-04-25T13:00:26Z,78,3120,4,0,"No one is using this part of code, :put_litter_in_its_place:.
",62,True,en,0
1481,1,0,1,Externals,bhargavrpatel,2015-04-24T00:18:26Z,10,16,1,0,"Fixed some run-on sentances and changed structor of some.
",58,True,en,0
1480,1,1,0,Externals,lazaruslarue,2015-04-23T23:50:05Z,1,1,1,0,,0,False,en,0
1477,2,5,0,Externals,paulcbetts,2015-04-29T06:10:12Z,10,1,2,5,"When Squirrel sets up shortcuts, it creates them with an explicit AppUserModelID based on the app's package name. Since Electron sets up a _different_ AppUserModelID, this results in Weirdness - most notably, it means that in the tray visibility settings, we start seeing >1 entry for apps:

![](http://cl.ly/image/1f2H072Y1s3W/content#png)

We set the original prefix in the init.coffee so that apps that don't explicitly override `setName` don't see any changes:
## TODO
- [x] Make sure this actually work
",508,True,en,0
1476,1,1,0,Externals,mnquintana,2015-04-23T21:02:47Z,1,0,1,0,"Just like atom/atom#6457, but for Electron :zap: - checks dev dependencies instead though.
",91,True,en,0
1475,2,1,2,Externals,mnquintana,2015-04-23T20:52:14Z,3,1,1,0,":beers: 
",9,True,nl,0
1466,1,1,0,Externals,ghost,2015-04-22T21:04:29Z,1,1,1,0,"Changed 1 occurrence of node.js to io.js in quick-start.md
",59,True,en,0
1464,1,1,0,Externals,bnvk,2015-04-22T21:08:09Z,1,1,1,0,"it had the trailing /Atom which no longer exists
",49,True,en,0
1461,1,1,0,Externals,deepak1556,2015-04-25T08:14:13Z,17,0,4,3,"Fixes #1457 
",13,True,en,0
1455,1,4,4,Externals,deepak1556,2015-04-25T08:16:57Z,24,5,6,3,"Fixes #1314 
",13,True,en,0
1454,10,1,0,Internals,zcbenz,2015-04-22T04:28:49Z,62,61,19,0,,0,False,en,0
1453,1,4,8,Externals,deepak1556,2015-04-25T05:04:35Z,44,24,2,3,"fixes #1432 
",13,True,en,0
1446,6,0,0,Internals,zcbenz,2015-04-20T07:22:16Z,27,277,8,0,"Fixes https://github.com/atom/electron/issues/1407.
",52,True,en,0
1444,1,2,0,Externals,NKMR6194,2015-04-20T11:40:56Z,16,16,1,0,"Fix app name in document of quick start.
",41,True,en,0
1441,2,3,0,Externals,MaxGraey,2015-04-25T02:35:48Z,5,0,1,6,"Fix some non-transparent corners and lacking redraw while resizing non-frame window
",84,True,en,0
1439,1,0,0,Externals,deepak1556,2015-04-23T02:22:35Z,0,14,1,5,"Depends on https://github.com/zcbenz/native-mate/pull/1
",56,True,en,0
1438,5,9,18,Externals,deepak1556,2015-04-25T05:04:43Z,72,0,9,7,"Related #1378 and #1079 , not quite sure on how to achieve the various mutations for `page-url-set`. @zcbenz any clue on why the test for `will-navigate` gets called for `spec/index.html` too ?

Depends on https://github.com/zcbenz/native-mate/pull/1
",251,True,en,0
1437,1,1,0,Externals,maxogden,2015-04-20T07:48:18Z,11,0,1,2,"We updated the name of our `atom-shell` module on npm to `electron-prebuilt`. It installs a binary called `electron`. Published 0.24.0 to npm here https://www.npmjs.com/package/electron-prebuilt and added @zcbenz as a npm owner just in case
",241,True,en,0
1430,1,8,0,Internals,simurai,2015-04-16T16:15:11Z,0,0,2,0,"This PR is on top of https://github.com/atom/atom-shell/pull/1389 and replaces the Mac and Win icons.

I probably tweak it a bit more at some point. But in case you need it already now, here a first version.

![256](https://cloud.githubusercontent.com/assets/378023/7185097/c2f4c9ae-e49b-11e4-856b-b8003b3db639.png)

![screen shot 2015-04-17 at 12 21 34 am](https://cloud.githubusercontent.com/assets/378023/7184938/e20b09bc-e49a-11e4-884d-bc8e1c8e04db.png)

I guess the icon files itself should also be renamed? Maybe `atom.icns` -> `icon.icns`. Then it's just generic and not project related.
",595,True,en,0
1428,3,1,2,Externals,SimplyAhmazing,2015-04-20T07:51:01Z,4,4,1,4,"The 2nd paragraph in ""The renderer process was a little difficult to read. The following line especially,

> so it would be possible to interactive with

I have taken to revising the entire paragraph to make it flow easier.
",224,True,en,0
1426,1,1,2,Externals,deepak1556,2015-04-20T12:02:44Z,11,5,2,5,"related #1421 , weird doesnt throw but continues to initialise as `undefined` .
",80,True,en,0
1421,2,1,2,Externals,tommoor,2015-04-20T07:24:24Z,16,3,1,5,"- Added two undocumented events.
- Added note that must be used after ready event.

closes #1420 
",98,False,en,0
1411,1,4,0,Internals,theojulienne,2015-04-13T11:57:32Z,39,10,2,0,"This PR adds extremely basic support for accessibility on OS X using VoiceOver by enabling chromium accessibility when VoiceOver is active.

Previously, any usage of VoiceOver was broken due to a patch to force Text-to-Speech to use Cmd+C to speak the selected text instead of the window title. For users using accessibility, this trapped them in the window with no child accessibility elements, giving an experience something like:
![atom-shell-no-accessibility](https://cloud.githubusercontent.com/assets/349190/7106786/00bf5de0-e103-11e4-9a74-61e9544275f1.gif)

This patch is two-fold:
- VoiceOver is detected, and the chromium accessibility feature is enabled and disabled based on this status. A similar approach to that used in Chromium itself is used for this.
- The TTS hack is modified to leave the chromium accessibility tree and the close/minimise/maximise buttons (but not the window title) as children of the window, rather than removing them completely.

The final result is that accessibility implementation on mac is now left up the standard HTML/web content accessibility features:
![atom-shell-partial-accessibility gif](https://cloud.githubusercontent.com/assets/349190/7106804/6a5d2f66-e103-11e4-92e9-bf3ec7dab410.gif)
",1239,True,en,0
1409,1,1,0,Externals,deepak1556,2015-04-13T09:07:36Z,2,0,1,1,"Fixes #1406
",12,True,en,0
1405,21,1,0,Internals,zcbenz,2015-04-12T05:46:05Z,277,190,24,0,"Fixes #980.

Known issues under x64:
- crash reporter doesn't work.
",68,True,en,0
1402,1,2,0,Externals,Tribex,2015-04-11T05:49:47Z,11,11,1,0,"Particularly in the spelling of the bootstrap and build script names. That threw me off a bit.
",95,True,en,0
1389,31,19,4,Internals,kevinsawicki,2015-04-17T07:22:07Z,375,313,76,8,"When Atom Shell started over two years ago, its one and only consumer was the [Atom](https://github.com/atom/atom) editor.

And so the original Atom Shell name was just a stopgap to refer to the Chromium/Node integration pieces and the native bits for window management and OS integrations such as the clipboard, the dock, etc.

But over the last two years Atom Shell has grown and matured to become a framework that isn't just for building text editors. People are now using it to build email clients, design tools, chat clients, and video players.

It deserves a better name that decouples it from the Atom editor association and allows it to stand on its own and continue to become the easiest way to build native apps using web tech.

So the new name will be :zap: **electron** :zap: and this pull request will update all the places in the code and the docs to this new name.

![](https://33.media.tumblr.com/68889b3072783d09370069620e1e5bdc/tumblr_mutwvjLZ8t1sjwwzso1_500.gif)

/cc @atom/core @atom/non-github-maintainers 
",1028,True,en,1
1387,1,0,2,Externals,deepak1556,2015-04-13T06:51:59Z,2,2,1,4,"fixes #1385 , sorry my bad.
",28,True,en,0
1386,1,5,0,Externals,deepak1556,2015-04-13T03:59:37Z,49,0,7,4,"#1253 , can probably be fixed with this event. Also if needed can give `resource_type` as payload from the list [here](https://code.google.com/p/chromium/codesearch#chromium/src/content/public/common/resource_type.h&cl=GROK&ct=xref_jump_to_def&l=13&gsn=ResourceType) , some ugly switch case on coffee side will do. any thoughts ?
",330,True,en,0
1384,63,2,0,Internals,zcbenz,2015-04-11T06:12:17Z,789,1175,33,2,"This PR changes the building model of atom-shell to link with the static library version of all Chromium's components, instead of linking with the huge libchromiumcontent shared library.

So:
- We will have a huge `atom.exe`, instead of a normal executable file with a huge `chromiumcontent.dll`.
- 64bit Windows build will be possible. (#980)
- We will have small improvements on file size and performance because static linking allows linker and compiler to work with best optimization.
- The building of Release version would take much longer time.
- The Debug version still builds with shared library version of Chromium to allow fast development phase.
",658,True,en,1
1383,1,2,0,Externals,deepak1556,2015-04-13T03:47:58Z,14,0,4,4,"fixes #1370 
",13,True,en,0
1382,1,1,2,Externals,deepak1556,2015-04-13T06:54:06Z,3,0,1,5,"fixes #1379 
",13,True,en,0
1377,1,1,0,Externals,tommoor,2015-04-07T16:40:43Z,7,0,1,0,,0,False,en,0
1373,1,1,0,Externals,jessegrosjean,2015-04-13T01:46:13Z,160,2,3,5,"This commit adds a position attribute for menu items defined in menu templates. When the final menu is built the position attribute is used to determine menu item positions in a similar design to how Eclipse positions menu items.

The intention is to give Atom packages more control over where there menu items end up, instead of just being inserted at the end of each menu.
",375,True,en,0
1363,1,1,0,Externals,deepak1556,2015-04-08T01:04:16Z,4,1,1,1,"Fixes #1355 
",13,True,en,0
1358,1,1,0,Externals,TJkrusinski,2015-04-06T16:04:30Z,1,1,1,0,"Simply a small grammar improvement.
",36,True,en,0
1356,1,6,0,Externals,deepak1556,2015-04-07T02:54:07Z,26,0,7,1,"Fixes #1316 , currently we have worked around `getURL` to return the right value using [`setVirtualURL`](https://github.com/atom/atom-shell/blob/master/atom/browser/api/atom_api_web_contents.cc#L283) , this event will not be fired when there is no title explicitly set as it will shortcut [here](https://code.google.com/p/chromium/codesearch#chromium/src/content/browser/web_contents/web_contents_impl.cc&sq=package:chromium&rcl=1428204835&l=3408) since the value of final_title will be `blank` not the file name.  
",516,True,en,0
1353,1,1,0,Externals,deepak1556,2015-04-07T01:59:10Z,4,1,1,2,"Fixes #1345 
",13,True,en,0
1350,1,1,0,Externals,joshuabenuck,2015-04-07T01:52:38Z,4,0,1,2,"In the troubleshooting section, include a recommendation to install the latest Visual Studio update if you run into a fatal internal compiler error while building. This resolved the fatal error (C1001) I was getting when trying to build.
",238,True,en,0
1343,7,0,0,Internals,zcbenz,2015-04-02T05:03:57Z,45,37,7,0,"This is our first step to #980.

We will change how we link with libchromiumcontent to be able to build 64bit binary on Windows. One problem is there are some conflicting symbols between Chromium and Node (namely NSS and OpenSSL), so we can not link libchromiumcontent and Node to the same binary. Previously we worked around it by building libchromiumcontent as shared library, since we are going to build it as static library, we have to build Node as shared library to work around the problem.
",497,True,en,0
1342,2,0,0,Internals,zcbenz,2015-04-01T11:17:28Z,19,4,2,0,,0,False,en,0
1340,1,0,0,Internals,zcbenz,2015-04-01T02:34:51Z,1,1,1,0,"Fixes #1306.
",13,True,en,0
1339,1,1,0,Externals,evlogii,2015-04-01T01:06:50Z,1,1,1,0,,0,False,en,0
1337,1,1,2,Externals,deepak1556,2015-04-07T01:50:31Z,17,0,6,6,"Fixes #981 

Depends on https://github.com/atom/brightray/pull/96
",66,True,en,0
1332,1,1,0,Externals,anhulife,2015-03-31T16:12:48Z,1,1,1,1,,0,False,en,0
1327,1,0,0,Internals,zcbenz,2015-03-29T10:46:00Z,2,2,2,0,"From Chrome 41 `d3dcompiler_47.dll` is used to replace `d3dcompiler_46.dll`.

Fixes #1319.
",91,True,en,0
1324,1,1,0,Externals,vprasanth,2015-03-29T11:16:59Z,1,1,1,0,,0,False,en,0
1323,1,1,0,Internals,zcbenz,2015-03-28T16:32:53Z,1,1,1,0,"The zygote process has hijacked command line parameters and environment variables on Linux, making it hard to do some low level handling.

Fixes #1101.

This relies on patch https://github.com/atom/libchromiumcontent/blob/atom/patches/no_zygote.patch.
",252,True,en,0
1317,1,1,0,Externals,deepak1556,2015-03-27T08:26:03Z,6,1,1,0,"related #1310 
",15,True,en,0
1313,2,5,6,Externals,ArtskydJ,2015-03-29T07:25:56Z,98,107,15,2,"- Changed occurrences of ""browser process"" and ""browser-side"" to ""main process"".
- Changed a few occurrences of ""web page"" to ""renderer"". There are still many occurrences of web page. (Some occurrences were more fitting than others.)
- Changed a few files that had ""browser"" in their name to ""main-process""
- Fixed various typos that I found.

Fixes #1287
",356,False,en,0
1311,1,7,7,Externals,deepak1556,2015-03-29T12:02:13Z,38,16,5,2,"Fixes #1014 , but any reason not use `base::DeleteFile` instead for all platforms ? 
",85,True,en,0
1309,3,5,17,Externals,hokein,2015-03-29T12:37:07Z,68,0,8,3,"Fixes #1279. @zcbenz  please take a look.
",42,True,en,0
1307,1,5,7,Externals,deepak1556,2015-03-27T08:19:45Z,16,10,7,0,"Fixes #1135 
",13,True,en,0
1304,1,2,0,Internals,zcbenz,2015-03-26T09:05:40Z,13,1,2,0,"This PR makes `BrowserWindow.show` restore previous window state. It only restores maximized and fullscreen state, for Aero Snap I couldn't find any API to determine whether window is in Aero Snap state, and there is no API to restore the Aero Snap state too, I doubt there is no way to do that.

Closes #1194.
",311,True,en,0
1303,4,1,0,Internals,zcbenz,2015-03-26T07:58:08Z,39,13,4,0,"Fixes #580.
",12,True,en,0
1297,1,1,0,Externals,deepak1556,2015-03-26T03:28:54Z,5,0,1,0,"Fixes #1237 
",13,True,en,0
1295,1,11,2,Externals,deepak1556,2015-03-26T03:20:08Z,31,2,2,0,"Fixes #1251 , there was provision in `logging::BaseInitLoggingImpl` to accept `--v or --vmodule` for setting loglevels. https://code.google.com/p/chromium/codesearch#chromium/src/base/base_switches.cc&sq=package:chromium&rcl=1427269032&l=33

using `--v=-1` will disable logs or perhaps use `--vmodule` for precise log control , should add documentation for the log levels ?
",374,True,en,0
1294,2,0,0,Internals,zcbenz,2015-03-25T12:14:07Z,10,4,2,0,"Fixes #1196.
",13,True,en,0
1290,1,2,0,Externals,deepak1556,2015-03-25T13:02:49Z,2,2,1,1,"app is made ready only here, https://github.com/atom/atom-shell/blob/38a871aa4b186e0850fdf773d659ba4f00c47a0a/atom/browser/browser.cc#L102 otherwise it would throw
",164,True,en,0
1288,1,1,0,Externals,deepak1556,2015-03-24T10:57:17Z,4,0,1,0,"fixes #1286 , but should this be a default behaviour or configurable one ?

hmm,  i dont seem to find a reason to not make this default behaviour for a draggable region in frameless window.
",190,True,en,0
1284,2,0,0,Internals,zcbenz,2015-03-23T08:30:58Z,7,1,6,0,"This option is still needed by Atom, so we patched Chromium to bring it back until we have a workaround in Atom.
",113,True,en,0
1275,1,1,0,Externals,lygstate,2015-03-23T01:49:10Z,11,19,3,1,"... and again.

The options of register_msdia80_dll.js should be admin.
Fix the problem of runas not works cause it will escape command parameters by default.
",159,True,en,0
1267,5,0,0,Internals,zcbenz,2015-03-21T11:11:54Z,134,62,15,0,"See https://github.com/atom/asar/pull/25 for more.

Fixes #1205.
",65,True,en,0
1261,1,5,0,Externals,deepak1556,2015-03-21T11:17:49Z,40,15,3,2,"fixes #1257 
",13,True,en,0
1256,1,4,5,Externals,deepak1556,2015-03-29T10:47:13Z,104,59,12,11,"Inital work for #1248 . @zcbenz If its desirable to have our own commandline class , then i can implement other methods from `base::commandline` for our needs and eliminate its usage. If this is too heavy for a trivial stuff, feel free to close it. would love to hear any better approaches :)

EDIT: sorry didnt mean eliminate `base::commandLine` but just `atomCommandLine` will wrap around it, so all commandLine calls to base will happen through this new class.
",464,True,en,0
1254,2,1,0,Externals,austinmoore-,2015-03-18T12:36:29Z,14,0,1,1,"I felt that this little prompt might make things a little more user friendly, and help users avoid potential future problems.

I'm not sure what `os.geteuid()` will do on Windows, and doing a little bit of research leads me to believe that it may cause the Python interpreter to complain, so the check for root is ignored on Windows. This may be good to look into a little further if someone wants to modify the platform checks.
",429,True,en,0
1243,25,3,0,Internals,zcbenz,2015-03-18T10:01:14Z,369,159,55,5,"- Upgrade to Chrome 41
- Upgrade to io.js 1.5.2
",48,False,en,0
1242,1,4,2,Externals,deepak1556,2015-03-16T08:27:32Z,18,0,3,3,"Fixes #1105 
",13,True,en,0
1241,1,3,3,Externals,ylaassel,2015-03-12T15:09:58Z,1,1,1,0,,0,False,en,0
1240,2,1,2,Externals,ghost,2015-03-18T10:01:37Z,8,8,2,6,"Replaces all occurences of node-webkit with NW.js in the development docs.
",75,True,en,0
1238,1,1,0,Externals,deepak1556,2015-03-16T08:43:46Z,1,0,1,4,"Fixes #1186 , love the way remote lib has been written :) but is this variable needed when we already have `getDevToolsWebContents` exposed ? Now if someone uses `window.getDevToolsWebContents` it wont have the emitters attached but still return the right contents, so would it be good to return `devToolsContents` from there instead of `openDevTools` ?
",354,True,en,0
1235,1,3,0,Externals,ghost,2015-03-16T08:55:49Z,24,0,1,5,"Adding the easiest solution for solving the missing libudev.so.0 error
on ubuntu 13.04+.

I had to do this on my own machine running ubuntu 14.04.2 to build atom.

The solution is also referenced in
https://github.com/nwjs/nw.js/wiki/The-solution-of-lacking-libudev.so.0
",271,False,en,0
1225,1,1,2,Externals,deepak1556,2015-03-10T23:03:22Z,12,9,1,0,,0,False,en,0
1224,1,7,0,Externals,deepak1556,2015-03-11T20:40:06Z,30,10,3,1,"the test should pass with the changes to brightray :)
",54,True,en,0
1215,1,1,0,Externals,deepak1556,2015-03-09T20:50:18Z,4,3,2,3,"fixes #1175 
",13,True,en,0
1210,1,4,0,Externals,paulyoung,2015-03-05T21:42:40Z,1,1,1,0,"Relates to #1108.
",18,True,en,0
1209,1,7,0,Externals,deepak1556,2015-03-09T20:41:27Z,16,1,2,4,"Fixes #1116 . The problem was not `GetURL` ,apparently subframe transition urls were recorded in NavigationEntry as `about:blank` for `file://` . Tried changing params opton in LoadUrl with frame_ids, transition types etc but none helped. So for the moment this the best fix that works. If there is a better way let me know :) 
![screenshot from 2015-03-05 20 14 39](https://cloud.githubusercontent.com/assets/964386/6506898/4b16eeaa-c374-11e4-9131-a7413a057b6d.png)
",467,False,en,0
1208,1,3,7,Externals,deepak1556,2015-03-20T02:34:31Z,144,0,9,14,"Need to work on the crashing tests
",35,True,en,0
1206,1,1,0,Externals,joaomoreno,2015-03-04T22:35:26Z,1,1,1,0,,0,False,en,0
1204,1,0,0,Externals,xfq,2015-03-04T17:27:34Z,2,2,1,0,"Update the URI of ChromeDriver.
",32,True,en,0
1203,1,0,0,Externals,xfq,2015-03-04T17:27:54Z,2,0,1,0,"Add HTML5 doctype in the examples.
",35,True,en,0
1202,1,0,0,Externals,xfq,2015-03-04T17:36:51Z,8,8,1,0,"IIUC `BrowserWindow` should be used in browser scripts instead of client scripts.
",82,True,en,0
1200,1,1,0,Externals,xfq,2015-03-04T17:26:02Z,2,2,1,0,"node-webkit has been renamed to nw.js.
",39,True,en,0
1199,1,2,3,Externals,deepak1556,2015-03-05T20:26:42Z,46,7,2,1,"fixes #1069 
",13,True,en,0
1192,1,1,0,Externals,senorflor,2015-03-02T20:19:14Z,1,1,1,0,"Thanks for putting this project together; really enjoying hacking with
it so far!
",82,False,en,0
1177,2,2,1,Externals,maxogden,2015-03-02T17:10:04Z,10,0,1,4,"I figured this would be helpful for people wanting to quickly get it installed
",79,True,en,0
1176,2,1,0,Externals,CharlieHess,2015-03-01T10:20:03Z,34,4,6,3,"Emit a new `before-quit` event at the start of `Browser::Quit`, which gives us a chance to cancel before any windows are closed.
This is an attempt to solve https://github.com/atom/atom-shell/issues/444.
",204,False,en,0
1167,1,1,0,Externals,mal,2015-02-27T23:30:17Z,1,0,1,6,"Without this, the object element gets displayed `inline` which in chromium means that it slightly exceeds it's bounds. Unfortunately there's no nice way to mitigate this issue as I can't find a way to get extra css into this intermediate page. However, forcing a block display solves the issue.
",295,True,en,0
1158,1,1,0,Externals,beardicus,2015-02-20T23:39:05Z,1,1,1,1,"Link to using-native-node-modules.md instead of use-native-node-modules. Filename changed with 268508764f25697d745fd40d0b63e096acb4ae7d
",136,True,en,0
1148,1,1,0,Externals,bundyo,2015-02-27T20:24:13Z,10,6,1,9,"Remove excessive whitespace (gets inserted in property names).
Avoid creating dummy properties if not needed.
Turn 1/0 to true/false, convert integer strings to numbers (fixes width/height).
",191,False,en,0
1137,5,7,3,Externals,bundyo,2015-03-04T15:28:33Z,75,3,3,18,"PostMessage support will make the communication between window and popup easier.
Additionally window.closed flag is important for cleanup after popup closure.
",159,False,en,0
1136,4,0,0,Internals,zcbenz,2015-02-13T06:10:09Z,110,59,7,0,"This PR bundles all the files under `Atom.app/Contents/Resources/atom/*` into an asar archive, so the final distribution doesn't contain lots of `.js` files. It doesn't have other benefits though.

Fixes #716.
",210,True,en,0
1134,3,3,0,Internals,zcbenz,2015-02-13T04:32:41Z,49,115,6,0,"Fixes #739.
",12,True,en,0
1129,5,0,0,Internals,zcbenz,2015-02-12T13:04:34Z,132,57,10,0,"Fixes #1006.
",13,True,en,0
1128,21,1,0,Internals,zcbenz,2015-02-12T08:48:42Z,499,195,20,0,"The `NativeImage` is a representation of native images, it will be used by atom-shell APIs to pass images. A `NativeImage` instance can be converted between `Buffer` and data URL, so users can freely pass images between native UI APIs and web pages' DOM.

For example, you can use Canvas to draw an image and then set it as BrowserWindow's overlay icon.

This change also prepares for supporting images in asar archives.

Fixes #424.
",434,True,en,0
1122,2,0,0,Internals,zcbenz,2015-02-11T04:31:44Z,32,0,6,0,"This PR adds a `type` option of `BrowserWindow`, which can be used to change `_NET_WM_WINDOW_TYPE` property of the underlying X Window.

Fixes #657.
",149,True,en,0
1107,1,1,0,Externals,yoshuawuyts,2015-02-10T04:12:34Z,1,1,1,1,"Minor tweak, should make the sentence a bit more fluent. Thanks!
",65,True,en,0
1106,10,2,10,Externals,paulcbetts,2015-02-11T03:51:01Z,54,1,8,4,"This PR adds a JS method for setting the Overlay Icon (the green jewel in the screenshot below):

![](https://i-msdn.sec.s-msft.com/dynimg/IC420441.png)
## TODO:
- [x] Actually get this working
- [x] Docs
- [x] Make sure it does nothing on OS X / Linux
",253,True,en,0
1100,2,1,2,Externals,christoth,2015-02-05T20:01:25Z,2,2,1,0,"Replace afxres.h with windows.h to remove dependency on MFC for compilation on Windows.

Fixes build error ""....\atom\browser\resources\win\atom.rc(10) : fatal error RC1015: cannot open include file 'afxres.h'.""
",212,True,en,0
1098,1,1,0,Externals,dpatou,2015-02-05T00:27:01Z,1,1,1,0,,0,False,en,0
1097,9,0,0,Internals,zcbenz,2015-02-05T00:13:18Z,248,303,12,0,"This PR also refactors the WebViewManager to make it friendly with multiple `BrowserContext`s (though we only have a global one now).

Fixes #1038.
",148,True,en,0
1096,7,0,0,Internals,zcbenz,2015-02-04T20:18:13Z,140,27,10,0,"This is required by https://github.com/atom/atom/pull/5382.
",60,True,en,0
1092,1,1,0,Externals,paulcbetts,2015-02-03T20:12:59Z,6,4,1,0,"Even though it's not screen's fault, it's super easy in the DevTools to write `screen = require('screen')`, then wonder why it doesn't work (because `window.screen` is reserved by the DOM). This makes people who just type in the example more likely to get it right.
",266,True,en,0
1082,6,0,0,Internals,zcbenz,2015-02-02T23:01:20Z,214,187,5,0,"The graceful-fs has its own way of wrapping around `fs` module, which bypasses our monkey-patching on it, This PR fixes it by providing fake `fs.js` source code to graceful-fs.

Fixes #1078.
",191,True,en,0
1081,1,1,0,Externals,xfq,2015-02-02T19:11:07Z,10,10,5,0,"Apple has renamed Mac OS X to OS X.
",36,True,en,0
1077,5,1,0,Internals,zcbenz,2015-02-01T06:30:29Z,33,31,7,0,"This PR removes the `asar:` protocol, and make `file:` protocol compatible with `asar` archives instead.

For custom protocols there are some limitations in Chrome. One limitation is the custom protocol has to be a standard protocol to be able to make HTML document fully featured(#1071), but for standard protocol URLs like `asar://C:/file` are invalid. For Chrome the `file:` is hard-coded on may places to make it a standard protocol while keeping the ability to represent Windows file paths.

Another limitation is there are some security restrictions for custom protocol (#1069), which are unnecessary if the custom protocol already accesses the file system. The `file:` bypasses those security restrictions also by hard-coding the conditions in code.

So it is nearly impossible to make `asar:` protocol work exactly like `file:` protocol, in order to fix this, we have to avoid using a new protocol and make `file:` protocol support `asar` archives.

Fixes #1071.
Fixes #1069.
",984,True,en,0
1059,4,0,0,Internals,zcbenz,2015-01-27T18:58:20Z,53,28,6,0,"Fixes #1053.
",13,True,en,0
1052,1,1,0,Externals,ghost,2015-01-25T21:04:22Z,1,1,1,1,,0,False,en,0
1044,15,7,0,Internals,zcbenz,2015-01-25T21:04:33Z,214,446,20,3,"1. The custom atom-shell APIs are now injected before we initialize in JavaScript, making the JavaScript code more clear.
2. Lots of cleanups of the node integration code.
3. We now do not initialize node integration in `iframe`s, because you can either use `<webview>` instead, or just access node integration in parent frame. This greatly simplified the node integration code in renderer process, also fixes #894 and fixes #789.
4. Don't deal with browser messages when the document object is not ready, fixes #1028 and fixes #1038.
",535,False,en,0
1034,7,2,0,Internals,zcbenz,2015-01-21T21:38:56Z,98,2,3,0,"We now maintain a `index.json` file that records the the V8 version and apm version for each release of atom-shell, the URL is:

```
http://gh-contractor-zcbenz.s3.amazonaws.com/atom-shell/dist/index.json
```

This is to match io.js(https://iojs.org/download/release/index.json) to make it easy to get ABI compatibility information of each release, fixes #1022.
",362,True,en,0
1029,3,1,0,Internals,zcbenz,2015-01-19T20:40:30Z,166,4,5,0,"Fixes #1001.
",13,True,en,0
1027,1,2,0,Externals,fengmk2,2015-01-20T03:44:19Z,4,0,1,0,,0,False,en,0
1026,11,1,0,Internals,zcbenz,2015-01-19T05:53:29Z,117,35,8,0,"``` markdown
## app.getPath(name)

* `name` String

Retrieves a path to a special directory or file associated with `name`. On
failure an `Error` would throw.

You can request following paths by the names:

* `home`: User's home directory
* `appData`: Per-user application data directory, by default it is pointed to:
  * `%APPDATA%` on Windows
  * `$XDG_CONFIG_HOME` or `~/.config` on Linux
  * `~/Library/Application Support` on OS X
* `userData`: The directory for storing your app's configuration files, by
  default it is the `appData` directory appended with your app's name
* `cache`: Per-user application cache directory, by default it is pointed to:
  * `%APPDATA%` on Window, which doesn't has a universal place for cache
  * `$XDG_CACHE_HOME` or `~/.cache` on Linux
  * `~/Library/Caches` on OS X
* `userCache`: The directory for placing your app's caches, by default it is the
 `cache` directory appended with your app's name
* `temp`: Temporary directory
* `userDesktop`: The current user's Desktop directory
* `exe`: The current executable file
* `module`: The `libchromiumcontent` library

## app.setPath(name, path)

* `name` String
* `path` String

Overrides the `path` to a special directory or file associated with `name`. if
the path specifies a directory that does not exist, the directory will be
created by this method. On failure an `Error` would throw.

You can only override paths of `name`s  defined in `app.getPath`.

By default web pages' cookies and caches will be stored under `userData`
directory, if you want to change this location, you have to override the
`userData` path before the `ready` event of `app` module gets emitted.
```

`app.getDataPath()` will be deprecated by `app.getPath('userData')`, and users can use `app.setPath('userData', ...)` to override the user data path. Fixes #647.
",1830,False,en,0
1019,3,0,0,Internals,zcbenz,2015-01-17T01:08:30Z,42,3,6,0,"In atom-shell we are using V8 that compiled with ICU support, so we should initialize ICU when running as Node, otherwise things like `String::localeCompare` will crash in scripts ran by `child_process.fork`.

Fix #979.
Fix #961.
",230,True,en,0
1016,11,4,0,Internals,zcbenz,2015-01-18T18:23:18Z,432,117,10,1,"Fixes #780.

``` markdown

## Event: display-added

* `event` Event
* `newDisplay` Object

Emitted when `newDisplay` has been added.

## Event: display-removed

* `event` Event
* `oldDisplay` Object

Emitted when `oldDisplay` has been removed.

## Event: display-metrics-changed

* `event` Event
* `display` Object
* `changedMetricts` Array

Emitted when a `display` has one or more metrics changed, `changedMetricts` is
an array of strings that describe the changes. Possible changes are `bounds`,
`workArea`, `scaleFactor` and `rotation`.

## screen.getAllDisplays()

Returns an array of displays that are currently available.

## screen.getDisplayNearestPoint(point)

* `rect` Object
  * `x` Integer
  * `y` Integer

Returns the display nearest the specified point.

## screen.getDisplayMatching(rect)

* `rect` Object
  * `x` Integer
  * `y` Integer
  * `width` Integer
  * `height` Integer

Returns the display that most closely intersects the provided bounds.
```

Another example of creating a window in the external display:

``` javascript
var app = require('app');
var BrowserWindow = require('browser-window');

var mainWindow;

app.on('ready', function() {
  var screen = require('screen');
  var displays = screen.getAllDisplays();
  var externalDisplay = null;
  for (var i in displays) {
    if (displays[i].bounds.x > 0 || displays[i].bounds.y > 0) {
      externalDisplay = displays[i];
      break;
    }
  }

  if (externalDisplay) {
    mainWindow = new BrowserWindow({
      x: externalDisplay.bounds.x + 50,
      y: externalDisplay.bounds.y + 50,
    });
  }
});
```
",1590,True,en,0
1009,8,2,0,Internals,zcbenz,2015-01-16T01:40:20Z,87,144,14,0,"This makes use of C++11 variadic templates to get rid of the conversion between `base::ListValue` when sending arguments from C++ to JavaScript.

It also makes the C++ code as simple as JavaScript:

``` cpp
base::ListValue args;
args.AppendInteger(level);
args.AppendString(message);
args.AppendInteger(line_no);
args.AppendString(source_id);
Emit(""console-message"", args);
```

now becomes

``` cpp
Emit(""console-message"", level, message, line_no, source_id);
```
",465,True,en,0
1002,22,7,0,Internals,zcbenz,2015-01-28T01:32:07Z,494,365,72,15,"Merge this after there is a stable release of Chrome 40.
",57,True,en,0
1000,1,1,0,Externals,yibuyisheng,2015-01-12T17:10:22Z,1,1,1,0,,0,False,en,0
990,1,2,4,Externals,deepak1556,2015-01-09T23:11:21Z,4,3,1,0,"Fixes #988 Also extensions were not unloaded previously after calling `removeDevToolsExtension` . Works now.
",109,True,en,0
985,5,0,0,Internals,zcbenz,2015-01-08T21:12:14Z,49,5,8,0,"``` markdown
## webFrame.registerUrlSchemeAsSecure(scheme)

* `scheme` String

Sets the `scheme` as secure scheme.

Secure schemes do not trigger mixed content warnings. For example, `https` and
`data` are secure schemes because they cannot be corrupted by active network
attackers.
```

Fixes #971.
",300,False,en,0
977,5,0,0,Internals,zcbenz,2015-01-05T23:50:33Z,79,37,8,0,"Fixes #948.
",12,True,en,0
972,10,0,0,Internals,zcbenz,2015-01-03T03:43:17Z,179,90,16,0,"Fixes #833.
",12,True,en,0
966,1,2,0,Externals,ttilley,2015-01-02T20:10:32Z,1,1,1,1,"use product_name instead of project_name when creating framework symlinks; fixes build on MacOS
",96,True,en,0
962,7,0,0,Internals,zcbenz,2014-12-29T20:20:38Z,129,47,5,0,"Closes #960.
",13,True,en,0
949,11,19,0,Internals,zcbenz,2015-01-12T22:05:20Z,161,129,7,20,"- [ ] Patch chromium to support window transparency
  - [x] Mac
  - [ ] <del>Windows</del>
  - [ ] <del>Linux</del>
- [ ] Implement on atom-shell side
  - [x] Mac
  - [x] Windows
  - [x] Linux
- [ ] <del>Window shadow on Mac</del>
- [ ] <del>Click through transparent parts of window</del>
- [ ] <del>Resizable transparent window</del>
- [ ] <del>Set window shape</del>

Patches in libchromiumcontent:
https://github.com/brightray/libchromiumcontent/blob/atom/patches/use_transparent_window.patch
https://github.com/brightray/libchromiumcontent/blob/atom/patches/render_widget_host_view_mac.patch

Fixes #381.
",610,False,en,0
942,9,17,0,Internals,zcbenz,2014-12-20T22:25:32Z,998,3,8,0,"This PR adds an `webFrame.setSpellCheckProvider` API to set a provider for spell checking in input fields and text areas.

Example:

``` javascript
require('web-frame').setSpellCheckProvider(""en-US"", true, {
  spellCheck: function(text) {
    return !(require('spellchecker').isMisspelled(text));
  }
});
```

![screen shot 2014-12-19 at 10 33 14 pm](https://cloud.githubusercontent.com/assets/639601/5513983/0ecebc60-87cf-11e4-86c8-c480fd5b8f86.png)

Fixes #724.
",464,True,en,0
938,1,3,0,Externals,omo,2014-12-19T20:43:48Z,38,0,7,0,"This API shows the system-provided pop-up dictionary.
Some Mac apps including Chrome have ""Look Up in in Dictionary"" context
menu item. This API can be used to implement it.
",174,False,en,0
934,6,0,0,Internals,zcbenz,2014-12-18T19:21:04Z,62,4,12,0,"The `disablewebsecurity` attribute can be used to disable web security in `<webview>`, fixes #884.
",99,True,en,0
931,5,0,0,Internals,zcbenz,2014-12-17T23:27:15Z,61,5,9,0,"The `will-navigate` event is emitted when user or the page wants to start an navigation, it can happen when `window.location` object is changed or user clicks a link in the page or user drags a file to the window to open it.

By calling `event.preventDefault()` the navigation will be prevented, which can be used to prevent the window to open the file when users drag files to window, fixes #908.
",398,True,en,0
924,5,6,0,Internals,zcbenz,2014-12-17T23:06:25Z,76,12,8,0,"The `ipc-message` event is fired when the guest page has sent an asynchronous message to browser process, users can make use of this event to communicate between guest page and embedder page. 

Fixes #856.
",206,True,en,0
923,1,1,0,Externals,ffdd,2014-12-17T18:29:46Z,2,1,1,0,"I got caught on this while trying to add a menu to my application in OSX.
",74,True,en,0
922,3,0,0,Internals,zcbenz,2014-12-16T22:01:05Z,68,14,2,0,"This makes our file dialog API real asynchronous on Windows, and fixes #802.
",77,True,en,0
919,3,1,1,Externals,paulcbetts,2014-12-16T21:40:11Z,6,0,1,1,"This fix might not be The Right Fix, here's what we're seeing during running our test suite that quickly creates and trashes WebView objects:

```
(lldb) bt
* thread #1: tid = 0x1ed1ee, 0x0000000100039afe Slack Framework`atom::WebViewManager::RemoveGuest(this=0x000000010624ed20, guest_instance_id=6) + 94 at web_view_manager.cc:89, name = 'CrBrowserMain', queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)
  * frame #0: 0x0000000100039afe Slack Framework`atom::WebViewManager::RemoveGuest(this=0x000000010624ed20, guest_instance_id=6) + 94 at web_view_manager.cc:89
    frame #1: 0x000000010003abf1 Slack Framework`mate::internal::Dispatcher<void (int)>::DispatchToCallback(v8::FunctionCallbackInfo<v8::Value> const&) [inlined] base::Callback<void (a1=0x045dbc2000000006)>::Run(int const&) const + 14 at callback.h:441
    frame #2: 0x000000010003abe3 Slack Framework`mate::internal::Dispatcher<void (int)>::DispatchToCallback(v8::FunctionCallbackInfo<v8::Value> const&) [inlined] mate::internal::Invoker<void, int, void, void, void, void, void, void>::Go(args=0x000000010509de00, a1=0x045dbc2000000006)> const&, int const&) at function_template.h:271
    frame #3: 0x000000010003abe3 Slack Framework`mate::internal::Dispatcher<void (info=<unavailable>)>::DispatchToCallback(v8::FunctionCallbackInfo<v8::Value> const&) + 167 at function_template.h:366
    frame #4: 0x0000000101e5b74f libchromiumcontent.dylib`___lldb_unnamed_function45102$$libchromiumcontent.dylib + 159
    frame #5: 0x0000000101e7dc1f libchromiumcontent.dylib`___lldb_unnamed_function45852$$libchromiumcontent.dylib + 511

(lldb) frame variable
(atom::WebViewManager *) this = 0x000000010624ed20
(int) guest_instance_id = 6
(content::WebContents *) web_contents = 0x0000000000000000
(logging::LogSeverity) LOG_FATAL = <empty constant data>
(const int) kApiPointerSize = <empty constant data>
```

This is because the last element in `web_element_map_` is garbage:

```
(lldb) po web_contents_map_
size=5
 {
   {
    1
     {
      0x0000000106865c00
      0x0000000107007000
    }
  }
   {
    2
     {
      0x0000000105138200
      0x0000000107007000
    }
  }
   {
    3
     {
      0x0000000105159000
      0x0000000107007000
    }
  }
   {
    <object returned empty description>
     {
      0x000000010b1ea000
      0x0000000107356a00
    }
  }
   {
    6
     {
      <nil>
      <nil>
    }
  }
```
",2414,True,en,0
910,1,1,0,Externals,sonnyp,2014-12-11T21:08:23Z,1,1,1,0,"checked seems to be the correct property
",41,True,en,0
904,42,12,0,Internals,zcbenz,2014-12-12T23:23:55Z,1834,1830,74,4,"- [ ] Check if printing works
  - [ ] Windows
  - [ ] Linux
  - [x] Mac
- [x] Make `<webview>` work
- [x] Upgrade to lastest `<webview>` infrastructure
- [x] Make sure `<webview>` can destruct
- [x] `<webview>` should after reloading page
- [ ] Test crash reporter for Yosemite
- [x] Bump node module version
- [x] Fix building on Windows
- [x] Can not start on Windows

Merge
- [x] https://github.com/brightray/libchromiumcontent/pull/82
- [x] https://github.com/brightray/brightray/pull/84
- [x] https://github.com/atom/apm/pull/230
",535,False,en,0
902,4,2,0,Externals,igorklopov,2014-12-09T05:44:00Z,3,3,3,1,"The silence are scary
",22,True,en,0
901,9,0,2,Externals,igorklopov,2014-12-09T05:45:55Z,42,20,3,1,"I ran `python script/bootstrap.py -v`. Still it is hard to debug when `npm install` fails inside (because of my wi-fi network problems, for example). First of all, i introduced chatty real-time function `execute_stdout`. The new function is based on `subprocess.check_call` instead of `check_output`. Then i introduced one more `verbose_mode` in `bootstrap.py` in order to add `--verbose` to `npm install`
",406,True,en,0
898,6,4,0,Externals,paulcbetts,2014-12-09T05:39:14Z,36,44,6,2,"This PR allows you to change the product/projectNames in `atom.gyp` to something other than ""Atom"" on OS X
",107,True,en,0
872,10,1,0,Internals,zcbenz,2014-11-28T12:01:08Z,141,45,11,0,"Fix #770.

We may also use this API to implement HTML5 notifications on Windows (#262).
",88,True,en,0
870,3,3,0,Externals,joaomoreno,2014-11-28T04:42:49Z,47,7,8,1,"I currently can't set the position of the context menu in the viewport.

This patch adds two optional arguments `x, y` to the `Menu.popup()` method, allowing the user to specify the position of the menu, relative to the top left corner of the view.
",249,True,en,0
867,1,3,0,Externals,igorklopov,2014-11-28T03:47:57Z,1,1,1,2,"Win32. Python is not added to PATHs by default. Instead it is added to `App Paths` registry key ( http://msdn.microsoft.com/en-us/library/windows/desktop/ee872121(v=vs.85).aspx ). In any case Python binary is found when i enter `python` command. But `subprocess.Popen` seems to fail when BOTH (1) runs a string `python tools/atom_source_root.py` AND (2) python is not in PATHs, only in App Paths. I suggest using list in `<!(` and hope this does not break linux/macos builds.
",476,True,en,0
866,1,1,0,Externals,bwin,2014-11-28T03:36:02Z,3,3,1,2,"This is just for the looks. No errors where thrown, because the name was misspelled everywhere it occurred.

**edit:** I called it variable name, but it's a field name. (Or what is it called? It's in a struct.)
",211,True,en,0
864,7,2,4,Externals,igorklopov,2014-11-28T03:34:02Z,7,6,1,2,"I installed to `c:\nodejs` to avoid spaces in path (old habits die hard). So i had an obstacle you see.
",104,True,en,0
862,10,0,0,Internals,zcbenz,2014-11-25T07:41:10Z,334,14,14,0,"Fixes #737.
",12,True,en,0
860,1,0,0,Externals,rprichard,2014-11-25T13:23:49Z,1,5,2,1,,0,False,en,0
858,3,1,0,Internals,zcbenz,2014-11-24T08:12:07Z,18,11,3,0,"Fixes #840.
",12,True,en,0
855,2,1,0,Externals,paulcbetts,2014-11-24T06:05:03Z,2,2,2,1,"Like it says, this fixes the `reloadIgnoringCache` method on the `WebView` tag
",79,True,en,0
831,23,0,0,Internals,zcbenz,2014-11-18T03:39:30Z,529,40,18,1,"- Add API on adding recent documents
- Add API for user tasks of JumpList
- Set application dock menu
- Add a guide on desktop environment integration

Fixes #746.
",164,False,en,0
830,6,1,0,Externals,paulcbetts,2014-11-15T07:15:59Z,22,21,1,0,"This PR modernizes the Windows build instructions a bit, as well as points people toward a free version of VS if they don't have it
",132,True,en,0
826,1,8,3,Externals,statico,2014-11-15T02:52:12Z,9,1,1,0,"I encountered a new problem when trying to build atom-shell under Windows.
",75,True,en,0
823,1,2,0,Externals,frankhale,2014-11-14T01:55:20Z,1,1,1,0,"- Call SetFolder instead of SetDefaultFolder on the dialog to set the default path. 

MSDN documentation states that SetDefaultFolder ""Sets the folder used as a default if there is not a recently used folder value available.""

http://msdn.microsoft.com/en-us/library/windows/desktop/bb775972(v=vs.85).aspx

MSDN documentation states that SetFolder ""Sets a folder that is always selected when the dialog is opened, regardless of previous user action.""

http://msdn.microsoft.com/en-us/library/windows/desktop/bb761828(v=vs.85).aspx
",531,True,en,0
817,5,2,0,Internals,zcbenz,2014-11-12T13:02:13Z,176,97,7,0,"APIs added:
- BrowserWindow.setAutoHideMenuBar(hide)
- BrowserWindow.isMenuBarAutoHide()
- BrowserWindow.setMenuBarVisibility(visible)
- BrowserWindow.isMenuBarVisible()

Fixes #808.
",183,False,en,0
816,3,1,0,Internals,zcbenz,2014-11-12T08:03:08Z,41,3,8,0,"Fixes #803.
",12,True,en,0
815,3,5,1,Externals,frankhale,2014-11-12T06:24:13Z,5,2,1,0,"- Force native frame for all OSes and suppress the Chrome provided blue frame. This also resolves an issue on Windows where systems cannot enable Aero Glass and were getting a Chrome provided blue frame even when the BrowserWindow option for frame was set to false.
",266,True,en,0
814,3,0,0,Internals,zcbenz,2014-11-12T06:08:04Z,35,0,5,0,"`original-fs` provides original `fs` APIs without `asar` support, which can be used to operate on `asar` archives as files.

Fixes #782.
",137,True,en,0
810,6,0,0,Internals,zcbenz,2014-11-11T12:23:53Z,181,44,8,0,"This PR adds `crashReporter.getLastCrashReportId()` API which returns the crash report ID sent by server, Atom can then prompt the users to paste it when reporting crashes.

Fixes #809.
",186,True,en,0
807,1,0,0,Externals,paulcbetts,2014-11-11T01:17:36Z,1,1,1,0,,0,False,en,0
806,9,0,0,Internals,zcbenz,2014-11-11T01:28:40Z,112,6,5,0,"Fixes #784.
",12,True,en,0
801,6,5,3,Externals,frankhale,2014-11-12T02:10:24Z,56,14,6,3,,0,False,en,0
800,4,6,3,Externals,frankhale,2014-11-12T01:59:53Z,10,0,1,4,"- Frameless windows disappeared or appears when minimized and maximized
  on Windows. This commit fixes that.
",110,False,en,0
794,4,0,0,Internals,zcbenz,2014-11-06T08:04:36Z,71,3,13,0,"The `preload` attribute specifies a script that will be loaded before other scripts run in the guest page, this script always has access to Node APIs no matter whether node integration is on in guest page.

Fixes https://github.com/atom/atom-shell/issues/776.
",260,True,en,0
791,2,2,3,Externals,brentertz,2014-11-06T06:02:42Z,81,0,2,0,"Hello.  Please consider adding this tutorial on online/offline event detection including interprocess communication between the renderer and browser processes.  Thanks!
",169,True,en,0
790,8,0,0,Internals,zcbenz,2014-11-05T12:25:04Z,69,15,7,0,"This PR adds `dialog.showErrorBox` API which uses the safest way to prompt the error message to user, so error dialog can still show before GUI environment is initialized.

Fixes https://github.com/atom/atom-shell/issues/785.
",226,True,en,0
787,2,1,0,Internals,zcbenz,2014-11-05T07:18:19Z,21,6,7,0,"Fixes https://github.com/atom/atom-shell/issues/756.
",53,True,en,0
779,5,0,0,Internals,zcbenz,2014-11-04T10:59:58Z,49,14,11,0,"Fixes #753.
",12,True,en,0
778,9,1,0,Internals,zcbenz,2014-11-03T15:10:09Z,57,13,7,0,"See #774.
",10,True,en,0
777,8,0,0,Internals,zcbenz,2014-11-03T09:47:08Z,768,15,14,0,"Fixes #454 
Fixes #701
",23,False,en,0
763,1,1,0,Externals,paulcbetts,2014-11-01T10:55:49Z,1,1,1,0,"Use the `project_name` instead, which by default will be the same thing. This helps to work around #713, so the generated `node.lib` will reference the correct EXE name.
",170,True,en,0
754,1,1,0,Externals,Subash,2014-10-30T16:18:40Z,1,1,1,0,,0,False,en,0
750,18,0,0,Internals,zcbenz,2014-10-28T11:23:59Z,276,95,24,0,"In previous implementation clicking on external links would leak WebContents and make renderer process linger when it is requested to close.

This fixes a bug that might have caused #719.
",188,True,en,0
747,1,1,0,Externals,stefanbuck,2014-10-27T21:45:21Z,2,2,1,0,,0,False,en,0
742,2,1,0,Externals,patr0nus,2014-10-26T11:36:08Z,8,6,4,1,"Build fails when using the OS X 10.10 SDK due to the deprecated APIs and type conversion errors. This pull request fixed this.
",127,True,en,0
740,43,2,0,Internals,zcbenz,2014-10-26T11:43:52Z,2304,603,56,2,"The `<webview>` tag is like `iframe` but provides an isolated environment from the embedder, See [webview Tag](https://developer.chrome.com/apps/tags/webview) for more.

The implementation in atom-shell will be a little different from Chrome, mainly on following areas:
- Management of guest webviews are done by pure JavaScript
- Access of `<webview>` is provided by the `WebContents` API of atom-shell that we would have the same API to control web page with `BrowserWindow`, so it is consistent and more powerful
- Ability to turn on/off node integration in `<webview>`

Also I'll remove security restrictions of `iframe` once `<webview>` is implemented.

Fixes #702
Fixes #656
Fixes #650
Fixes #570
",703,True,en,0
727,7,0,0,Internals,zcbenz,2014-10-21T13:23:28Z,370,0,8,0,"Fixes #615.
",12,True,en,0
726,5,0,0,Internals,zcbenz,2014-10-21T08:35:12Z,43,11,5,0,"According to https://github.com/atom/atom-shell/commit/ae76657e17a32dba1a8da22e63ee8d76b1ae418c#commitcomment-8202603, we should decide whether use global menu bar by checking whether bus name ""com.canonical.AppMenu.Registrar"" is available.
",241,True,en,0
717,4,0,0,Internals,zcbenz,2014-10-18T03:13:55Z,31,2,9,0,"This PR makes `BrowserWindow.show()` focusing the window and adds `BrowserWindow.showInactive()` that shows but not gives focus to the window.

I did this change because on some platforms showing and focusing a window is a bundled action, if we first shows the window without focusing it and then gives focus to it with another command, the window may not be focused finally.

This should be able to fix atom/atom#3616.
",420,True,en,0
708,1,1,0,Externals,matttbe,2014-10-16T10:53:24Z,2,3,1,0,"Hello,

When testing if `$UBUNTU_MENUPROXY` is set, we should also check if it contains more than one character.

It should avoid cases when this environment variable is set to `1` (problem reported by @jbt in #699 )

Best Regards,

Matt
",238,True,en,0
703,1,1,0,Externals,waywardmonkeys,2014-10-14T10:40:47Z,21,21,2,0,,0,False,en,0
700,12,0,0,Internals,zcbenz,2014-10-14T10:42:21Z,57,47,22,0,,0,False,en,0
699,1,3,0,Externals,matttbe,2014-10-13T08:31:04Z,5,2,1,0,"Hello,

When checking if we should react differently when GlobalMenu bar is used, we should check if `UBUNTU_MENUPROXY` env var is (correctly) set instead of checking if we're using Unity on a Unity session.

It's maybe better to do that because we can use Compiz on a Unity session without Unity. Or we can also use Unity in a different session.

Note that I was not able to test this new code (sorry for that) but when I'm using Atom on Ubuntu with a Cairo-Dock session and Unity is not running, Atom window doesn't have any menu.

A few details about my system:

```
$ echo $DESKTOP_SESSION    
cairo-dock
$ ps aux | grep ""[l]ibappmenu""
$ echo $UBUNTU_MENUPROXY   

$ echo $XDG_CURRENT_DESKTOP
Unity
```

![Atom on a Cairo-Dock session](http://ibin.co/1dVcy2QOY4Vi)

On an Ubuntu session, we have something like that:

```
$ echo $DESKTOP_SESSION    
ubuntu
$ ps aux | grep ""[l]ibappmenu""
(...)
$ echo $UBUNTU_MENUPROXY   
libappmenu.so
$ echo $XDG_CURRENT_DESKTOP
Unity
```

Regards,

Matt
",994,True,en,0
698,1,3,0,Externals,matttbe,2014-10-14T10:58:37Z,2,2,1,1,"Hello,

Thank you for developing and maintaining Atom!
I'm using Atom on GNU/Linux Ubuntu and it seems that the launcher is named `Atom.desktop` but the window's class is `Atom Shell` (we can get it via this command: `xprop | grep CLASS`).

The window's class should be `Atom` instead of `Atom Shell` because the launcher and the binary to launch Atom are called 'atom' and not 'atom shell'. This is why currently all Atom's windows will not be linked to their launcher in a dock (e.g. with Cairo-Dock).

Note that it's not advised to add white-spaces in a window's class ('Atom Shell').

I'm going to add a new pull request in `atom` project in order to remove the capital letter in the name of the `.desktop` file (a `.desktop` file should not contain any capital letters in its name).

Regards,

Matt
",804,True,en,0
685,10,0,0,Internals,zcbenz,2014-10-08T11:05:00Z,3062,7,30,0,"This PR makes HTML5 speech synthesizer and web speech recognizer work on all platforms.

Fixes #586.
",101,True,en,0
682,1,1,0,Externals,joshmarinacci,2014-10-02T21:51:41Z,1,1,1,0,,0,False,en,0
680,1,1,0,Externals,Subash,2014-10-03T10:09:57Z,5,4,1,0,,0,False,en,0
674,2,1,1,Externals,Subash,2014-10-02T03:46:06Z,5,1,1,0,"Adds shim for `stat.atime`, `stat.mtime`, `stat.ctime` and `stat.birthtime`
",76,True,en,0
670,1,1,0,Externals,alexanderneu,2014-09-29T12:59:24Z,1,1,1,0,"The third parameter of [SetProgressValue](http://msdn.microsoft.com/library/windows/desktop/dd391698) should be 100 as it is the maximum progress value.
",153,True,en,0
665,53,0,0,Internals,zcbenz,2014-09-30T12:53:38Z,1793,31,29,6,"Fixes #251.
- [x] Provide a tool to create asar packages https://github.com/atom/asar
- [x] Add `asar://` protocol to load files in asar packages
- [x] Make Node's API work with asar packages
  - [x] fs.readFile
  - [x] fs.lstat
  - [ ] fs.stat
  - [x] fs.exists
  - [x] fs.readdir
  - [x] fs.open
  - [x] fs.realpath
  - [x] process.dlopen
  - [x] child_process.fork
  - [x] child_process.execFile
  - [x] native module
- [x] Support loading apps in asar package
- [x] Unit tests
- [x] Docs
  - [ ] Performance
  - [x] `cwd` option of some APIs
- [x] Testing on Windows
",571,False,en,0
659,1,1,0,Externals,hokein,2014-09-22T12:52:32Z,3,0,1,1,"@zcbenz , PTAL.
",16,True,de,0
655,6,6,4,Externals,hokein,2014-09-20T03:19:34Z,133,1,11,2,"@zcbenz , please take a look.

About the linux platform, we can support `Unity` desktop environment by using the function `unity::SetProgressFraction()` in chromium. After some tries,  we need to modify the chromium code, rename the `chromium-browser.desktop`and the env variable `CHROME_DESKTOP` to atom custom names since the progress bar in Unity relies on the them.  We can add a patch in `libchromiumcontent`, How do you think about this? 
",445,True,en,0
652,7,1,0,Internals,zcbenz,2014-09-16T09:45:39Z,160,6,11,3,"Fixes #388.
",12,True,en,0
644,1,1,0,Externals,ghost,2014-09-10T01:30:42Z,1,1,1,0,,0,False,en,0
643,4,0,0,Internals,zcbenz,2014-09-09T12:00:27Z,79,1,8,0,"Added:
- `Tray.setTitle`
- `Tray.setHighlightMode`
- `double-clicked` event
",76,False,en,0
642,1,1,0,Externals,hokein,2014-09-10T01:30:26Z,57,42,2,0,"@zcbenz, please take a look. Thanks.
",37,True,en,0
641,5,0,0,Internals,zcbenz,2014-09-09T06:43:08Z,95,15,9,0,"This PR adds `web-preferences` options in BrowserWindow which are mapped to `blink::WebRuntimeFeatures`.

Fixes #639.
",118,True,en,0
636,1,1,0,Externals,jeffdm,2014-09-08T03:26:03Z,2,2,1,0,"Ran into a bug where 'args' is not defined for showSaveDialog & showMessage.
",77,True,en,0
626,8,0,0,Internals,zcbenz,2014-09-05T05:40:37Z,196,29,3,0,"This PR implements the V8 debugger agent which was removed by https://github.com/v8/v8/commit/9080a44e04217c34157ce9d4de9fa892aa663e7e. With this we can use node's debugging tools like node-inspector to debug browser process script.
",233,True,en,0
624,1,1,0,Externals,gzuidhof,2014-09-02T01:55:07Z,1,1,1,0,"An javascript error -> A javascript error
",42,True,eu,0
622,15,1,0,Internals,zcbenz,2014-09-02T09:03:07Z,137,108,34,0,"Known problems:
- [ ] V8 has discarded support for debugger agent, so we will have to reimplement the `--debug` support.
- [x] There are some changes in V8 headers make native modules incompatible with previous versions of atom-shell, while the node's versions are still the same.
",281,False,en,0
614,1,2,0,Externals,paulcbetts,2014-08-28T02:06:24Z,1,0,1,0,"This sets up Atom to be packaged into a Squirrel installer. See https://github.com/Squirrel/Squirrel.Windows.Next/pull/17 for the details
",138,True,en,0
612,1,5,0,Externals,nuivall,2014-09-06T12:55:58Z,0,12,1,9,"Also disable high DPI mode by default, Chrome enables it since
https://codereview.chromium.org/294293002
",105,False,en,0
610,12,0,0,Internals,zcbenz,2014-08-28T15:12:21Z,285,23,17,2,"The definitions of `chrome.devtools` API are all done in blink, so it is possible for us to provide support for chrome devtools extension without importing chrome's extension APIs.

Problems:
1. [x] Panels are loaded in `iframe`s, which are sandboxed by default in atom-shell, so panels can not access `chrome.devtools` API.
2. [x] Pages in extensions are all relative to root, so we have to provide a custom protocol to load extensions.
3. [ ] Some extensions use background page.
4. [x] Some extensions use chrome extension APIs like `chrome.extension` and `chrome.runtime`.
5. [x] Extensions information should be persistented.
",631,True,en,0
606,1,1,0,Externals,hokein,2014-08-25T10:55:09Z,2,2,1,0,"@zcbenz, 

the default app can not process `--debug your/app/` correctly. We need to specify the port explicitly. The `optimist` module doesn't support this usage, it will set `your/app/` as the debug port which leads to `default_app/main.js` run in [wrong branch](https://github.com/atom/atom-shell/blob/master/atom/browser/default_app/main.js#L55). 
",352,True,en,0
603,1,0,0,Externals,soh1988,2014-08-23T11:18:38Z,4,2,1,0,"Adding the Compulsory flag to the API Documentation to indicate the type and updated the description on with the flag
",118,True,en,0
602,1,1,0,Externals,soh1988,2014-08-23T11:17:54Z,1,1,1,0,"Correction to the patch to support Either Size to allow Both or Either Size
",76,True,en,0
599,18,0,0,Internals,zcbenz,2014-08-22T09:48:36Z,5988,34,48,0,"Fixes #296.
",12,True,en,0
594,1,0,0,Externals,PeterDaveHello,2014-08-21T02:37:48Z,3,0,1,0,,0,False,en,0
590,5,2,0,Internals,zcbenz,2014-08-20T02:47:29Z,160,29,9,0,"This PR implements the ""--debug"" switch which provides the exact same debugging interface with upstream node, so we can make use of node's debuggers to debug atom-shell's browser scripts.

Currently we have some crashes when using node-inspector, which I think is caused by the difference of V8 debugging protocol's versions.

Fixes #554.
",339,True,en,0
585,9,0,0,Internals,zcbenz,2014-08-18T08:31:22Z,206,12,6,0,"Fixes #515.
Fixes #474.
",24,False,en,0
578,5,3,2,Externals,cornedor,2014-08-16T12:34:01Z,38,1,3,3,"I've added an app.getDataPath function that returns the data path for the OS like node-webkit's app.dataPath.
- `%APPDATA%\My App Name` (`C:\Users\[username]\AppData\Roaming\My App Name`) in Windows
- `~/.config/My App Name` in Linux
- etc

Because I don't have access to a Mac I haven't been able to test this on OSX
",318,False,en,0
577,2,1,0,Externals,cornedor,2014-08-15T02:40:30Z,17,2,2,1,"When the -v or --verbose argument is passed the execute command will print the output it receives from sub processes. I'm not sure if this is the way to do this in python, I don't use python that much.
",202,True,en,0
576,3,0,0,Internals,zcbenz,2014-08-13T06:53:07Z,93,0,5,0,"Fixes #464.
",12,True,en,0
573,5,24,0,Internals,zcbenz,2014-08-11T08:31:35Z,164,31,7,0,"Users now can add string `disable-x-frame-options` in frame's name to ignore the `X-Frame-Options` header for the frame.

Fixes #426.
",134,True,en,0
572,2,0,0,Internals,zcbenz,2014-08-11T04:17:48Z,17,0,2,0,"Fixes #475.
",12,True,en,0
567,8,0,0,Internals,zcbenz,2014-08-09T02:24:18Z,55,10,5,0,"This PR made use of travis-ci's [multi os](http://docs.travis-ci.com/user/multi-os/) feature to run CI on both Linux and OS X.
",127,True,en,0
565,15,1,0,Internals,zcbenz,2014-08-08T14:06:55Z,67,47,9,0,"This is continue work of #451, also fixes #561.
",48,True,en,0
564,1,1,0,Externals,sryze,2014-08-08T06:27:26Z,1,1,1,0,"This fixes #553.
",17,True,en,0
558,10,6,0,Internals,zcbenz,2014-08-07T11:31:58Z,95,12,6,0,"An `auto-hide-menu-bar` option is added to `BrowserWindow` to make window menu bar hidden by default, and clicking `Alt` would toggle the menu bar.

Fixes #486.
",161,True,en,0
552,5,0,0,Internals,zcbenz,2014-08-06T14:02:22Z,221,169,8,0,"Fixes #450.
",12,True,en,0
549,1,1,0,Externals,cornedor,2014-08-05T14:40:00Z,7,0,1,0,,0,False,en,0
544,1,1,0,Externals,hokein,2014-08-04T12:12:26Z,58,68,3,0,"@zcbenz, please take a look.
",29,True,en,0
538,4,0,0,Internals,zcbenz,2014-07-31T08:25:27Z,225,1,7,0,"The `content-trace` module is used to collect tracing data generated by the underlying Chromium content module. This module does not include a web interface so you need to open `chrome://tracing/` in Chrome browser and load the generated file to view the result.

Closes #281.
",277,True,en,0
537,4,2,2,Externals,springmeyer,2014-08-03T13:55:39Z,5,3,1,3,"atom-shell on linux is incorrectly reporting `ia32` for `process.arch`.

This is happening because `-Dtarget_arch=ia32` is passed to ninja on linux inside `script/update.py` which leads to '-DARCH=""ia32""' being set in the compile flags. I see that the current intention is to target 64 bit builds on linux (37275c64cd07) and the binaries are in fact compiled as 64 bit despite this bug.  I guess ninja is somehow smartly ignoring the incorrect setting of the `-m32` flags at https://github.com/atom/node/blob/6d772c3cda0bb8270857397e128ea1e36c361125/common.gypi#L175-L178.

Until this is fixed it breaks usage of any node-pre-gyp packaged node addons because node-pre-gyp depends on process.arch being correct in order to require the right binary arch.
",753,True,en,0
534,7,5,13,Externals,hokein,2014-08-03T14:34:59Z,1382,0,15,4,"@zcbenz, please take a look! 
And thanks for @orzFly on windows platform implementation.
",89,False,en,0
530,1,0,0,Internals,kevinsawicki,2014-07-31T05:10:48Z,2,0,3,1,"Closes #510 
",13,True,en,0
524,10,3,0,Internals,zcbenz,2014-07-29T03:13:50Z,110,95,30,0,"Closes #496.
",13,True,en,0
518,1,1,0,Externals,orzFly,2014-07-28T10:53:16Z,2,1,1,1,,0,False,en,0
516,1,1,0,Externals,alexwhitman,2014-07-28T10:39:02Z,1,1,1,2,"`isMaximized` is documented above.  Probably the result of copy/paste.
",71,True,en,0
503,4,1,0,Internals,zcbenz,2014-07-24T13:28:53Z,49,755,5,0,"The custom window frame looks strange on Linux even when using GTK+ theme for it, this PR reverts to use native window frame instead. And since we are now using Aura instead GTK+, many features have to be implemented with Xlib.
",228,True,en,0
495,3,2,0,Externals,batjko,2014-07-21T23:01:40Z,27,28,1,0,,0,False,en,0
493,2,2,0,Externals,hokein,2014-07-24T13:10:43Z,40,0,7,5,"@zcbenz, please take a look. Thanks!
",37,True,en,0
484,1,1,0,Externals,yaotti,2014-07-21T05:30:59Z,1,0,1,5,"Error logs were surpressed while booting up.
",45,True,en,0
480,1,0,0,Externals,ghost,2014-07-21T05:30:43Z,2,0,1,9,"Added a note for OS X users, to tell how to present dialogs as sheets.
",71,True,en,0
452,1,1,0,Externals,marksamman,2014-07-04T15:13:44Z,1,1,1,2,"This will skip the ""Are you sure you want to move this file to the Recycle Bin?"" dialog on Windows.

I was testing Atom on Windows, and the editor froze when I tried to move a file to trash. After debugging this issue, I noticed that it was stuck on shell.moveItemToTrash and that a Windows confirm dialog had appeared behind the Atom window. Since Atom already asks the user to confirm the action I assume it should be fine to have MoveItemToTrash silently move the file to trash without additional confirmations.
",515,True,en,0
448,2,1,0,Externals,as3boyan,2014-07-04T15:06:59Z,10,0,2,2,,0,False,en,0
445,1,0,0,Externals,island205,2014-07-21T05:29:49Z,2,0,1,19,"I used to think `Atom.app` is the Atom editor.
",47,True,en,0
440,91,6,3,Internals,zcbenz,2014-07-21T14:23:04Z,4159,6768,159,22,"**WIP**
- [x] File load/save in devtools.

Windows:
- [x] Native frame view.
- [x] Window menu.
- [x] Frameless window.
- [x] Black background when closing a independent message box.
- [x] Context menu has no shadow and doesn't disappear.
- [x] High DPI support.
- [x] Child web view doesn't return HTTRANSPARENT in NonClientHitTest, making frameless window unresizable and unmovable.
- [x] Wrong point in ShouldDescendIntoChildForEventHandling when the area is HTCAPTION under high DPI.

Linux:
- [x] Window menu.
- [x] Unity global menu bar.
- [x] Context menu.
- [x] Fix file dialogs.
- [ ] Use GTK+ theme ([related](https://code.google.com/p/chromium/issues/detail?id=317859&can=1&q=aura%20linux%20gtk%20theme%20frame&colspec=ID%20Pri%20M%20Iteration%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified) [chromium](https://code.google.com/p/chromium/issues/detail?id=322256) issue).
- [x] Native focus and blur event.

Closes issues:
- Closes #335
- Closes #275 
- Closes #391 
- Closes #394 
- Closes #161 
- Closes #359 
- Closes #210 
- Closes #333 
- Closes #179 

Merge PRs:
- [x] https://github.com/atom/node-runas/pull/10
- [x] https://github.com/atom/node-pathwatcher/pull/30
- [x] https://github.com/atom/node-keytar/pull/8
- [x] https://github.com/atom/git-utils/pull/33
- [x] https://github.com/atom/node-oniguruma/pull/13
- [x] https://github.com/atom/scrollbar-style/pull/6
- [x] https://github.com/atom/node-nslog/pull/3
- [ ] https://github.com/atom/archive-view/pull/11
- [ ] https://github.com/atom/dev-live-reload/pull/4
- [ ] https://github.com/atom/markdown-preview/pull/109
- [ ] https://github.com/atom/snippets/pull/61
- [x] https://github.com/atom/node-spellchecker/pull/3
- [ ] https://github.com/atom/spell-check/pull/23
- [x] https://github.com/atom/node-ctags/pull/6
- [ ] https://github.com/atom/symbols-view/pull/44
- [ ] https://github.com/atom/tree-view/pull/192
- [x] https://github.com/atom/atom-keymap/pull/40
- [x] https://github.com/atom/first-mate/pull/22
- [x] https://github.com/atom/scandal/pull/16
- [x] https://github.com/atom/text-buffer/pull/24
- [ ] https://github.com/atom/bracket-matcher/pull/52
",2159,False,en,0
437,2,1,0,Externals,avdg,2014-07-04T15:17:33Z,22,3,9,6,"I'll send this pr just as rfc/untested. Code is written without being tested.

Please note that I am unable to compile as I'm unable to install all required visual studio 2010 components in order to compile. Since I'm on vacation, I also don't have access to computer with other operating system.
",297,True,en,0
423,9,0,3,Internals,zcbenz,2014-06-23T15:36:13Z,152,144,19,0,"Fixes #417.
",12,True,en,0
420,5,0,0,Internals,zcbenz,2014-06-22T07:07:23Z,13,8,5,0,"Fixes #413.
",12,True,en,0
418,1,1,0,Externals,sprintr,2014-06-21T19:05:29Z,1,1,1,0,"Fix for #416
",13,True,en,0
409,1,0,0,Internals,kevinsawicki,2014-06-18T00:59:42Z,1,1,1,0,"Not sure if/when this might have changed, but Atom's keymap module generates `escape` as the keystroke, not `esc`, as atom-shell was expecting.

Seemed reasonable to support both `esc` and `escape`.
",199,True,en,0
408,1,0,0,Externals,FWeinb,2014-06-18T01:07:27Z,14,9,1,0,"Related to Issue #383
",22,True,en,0
407,3,0,0,Internals,zcbenz,2014-06-17T10:40:57Z,12,24,4,0,"Fixes #317.
",12,True,en,0
406,6,0,0,Internals,zcbenz,2014-06-17T08:14:22Z,202,1,14,0,"- Add a `web-view` module that can change page's zoom level
- Add a `zoom-factor` option in `BrowserWindow` which can set page's default zoom factor.

Fixes #370.
",163,False,en,0
404,3,0,0,Internals,zcbenz,2014-06-16T03:00:43Z,48,0,13,0,"Closes #257.
",13,True,en,0
397,1,1,0,Externals,RobberPhex,2014-06-14T14:42:53Z,1,0,1,0,"Fix #396
",9,True,en,0
379,3,1,0,Internals,zcbenz,2014-06-05T02:51:49Z,37,25,4,0,"Fixes #268.
",12,True,en,0
375,16,0,0,Internals,zcbenz,2014-06-03T06:27:21Z,1892,0,28,0,"This PR adds API to add tray icon in operating system's notification area.

Fixes #253.
",88,True,en,0
363,7,4,0,Internals,zcbenz,2014-05-29T13:54:04Z,192,3,9,0,"This PR makes `navigator.language` return current system locale instead of always `en-US` or empty string, fixes #287.
",119,True,en,0
354,13,0,0,Internals,zcbenz,2014-05-26T13:40:56Z,212,56,13,0,"- Fix showing `radio` and `checkbox` menu items on Windows.
- Discard `groupId` of `radio` menu items, it is now generated automatically.
- Clicking a `checkbox` menu item flips the `checked` flag.
- Clicking a `radio` menu item would make other items in the same group unchecked.
- A `radio` menu items group would have at least one item checked.
",348,False,en,0
351,5,0,0,Internals,zcbenz,2014-05-23T15:18:06Z,69,0,7,0,"This PR adds a `web-preferences` options for BrowserWindow, enabling users to control whether certain features should be enabled.

Fixes #295, fixes #280.
",155,True,en,0
347,1,0,0,Externals,SeriousM,2014-05-23T14:48:31Z,27,5,1,1,"I extracted the information from [api-crash-reporter-spec.coffee](https://github.com/atom/atom-shell/blob/da30e3348e1de2993b3abb171b76254f9cf9db6d/spec/api-crash-reporter-spec.coffee) and by testing it with [requestb.in](http://requestb.in/)
",242,True,en,0
343,1,1,0,Externals,gmr,2014-05-23T14:49:59Z,27,0,9,1,"- Tested in OSX
- Untested in GTK, but I expect it should work
- Did not see any similar constructs for notifications in Windows
",129,False,en,0
330,7,0,0,Internals,zcbenz,2014-05-18T16:02:34Z,89,58,9,0,"Closes #324.
",13,True,en,0
327,13,0,0,Internals,zcbenz,2014-05-18T13:46:37Z,173,17,14,0,"This PR adds some APIs to give users ability to create window by setting the web page's size (or client size), so users can show the web page with exact same sizes on all platforms.
",182,True,en,0
326,1,0,0,Externals,jcanaway,2014-05-18T14:22:43Z,9,4,1,0,"These changes demonstrates a more usable protocol implementation.
",66,True,fr,0
322,1,0,0,Externals,geoff-codes,2014-05-18T12:17:19Z,2,2,1,2,"I'm presently giving [10.7 support](https://github.com/atom/atom/issues/1967) the old college try (building against the 10.7 SDK with Xcode 5.1, not necessarily supporting the Xcode 4.6 toolchain) ‚Äî but I thought this should be updated in the meantime. 

It also seems possible to me that the pre-installed node requirement is somewhat accidental.

Since we have the source checked out already, it should be rather trivial to build an intermediate ""bootstrap"" node if there isn't one found in the path.

Do it?
",513,True,en,0
320,1,0,0,Externals,avdg,2014-05-15T20:34:07Z,1,1,1,0,"Upgrade pathwatcher as it contains fixes for visual studio.
",60,True,en,0
314,1,0,0,Externals,thedaniel,2014-05-15T02:18:43Z,5,0,1,0,,0,False,en,0
311,3,2,0,Externals,SeriousM,2014-05-15T20:35:07Z,8,0,1,1,"I just added `restart` because it was missing.
Since I don't know _exactly_ what happens when this method is called I don't want to add any additional _wrong_ information.
Also I added `setMenu(menu)` with information.
",219,False,en,0
307,1,1,0,Externals,SeriousM,2014-05-14T02:29:17Z,1,1,1,0,"Using 'SOURCE_ROOT = os.path.dirname(os.path.dirname(**file**))' leads to an empty string if the path is relative.
",115,True,en,0
304,1,1,0,Externals,kramerc,2014-05-14T02:32:33Z,4,0,2,0,"While the `NSSupportsAutomaticGraphicsSwitching` attribute was added to [atom/browser/resources/mac/Info.plist](https://github.com/atom/atom-shell/blob/05216630765a52b8f3115cf288530b6729ba5323/atom/browser/resources/mac/Info.plist#L19-20), it was missing from Info.plist files in `renderer/` and `common/`. This was causing Atom Helper.app to not have this attribute, which in turn causes the discrete GPU to become active.
",424,True,en,0
288,1,0,0,Externals,jhiggins-thrillist,2014-05-12T04:27:39Z,1,1,1,1,,0,False,en,0
286,1,0,0,Externals,yaotti,2014-05-10T13:17:07Z,1,1,1,0,"P.S.
Thanks for such a great documentation! :smiley: 
",54,False,en,0
285,1,1,0,Externals,GregMefford,2014-05-10T13:19:29Z,51,52,1,0,"Mostly minor grammatical issues, but also some content that seems to be incorrect based on the surrounding descriptions and example code.
",138,True,en,0
284,1,0,0,Externals,GregMefford,2014-05-10T13:17:49Z,7,7,1,0,"Minor documentation changes to fix typos and clarify some phrasing
",67,True,en,0
283,1,0,0,Externals,GregMefford,2014-05-10T13:17:28Z,9,9,1,0,"Minor changes to clarify the grammar in the synopsis
",53,True,en,0
276,4,0,0,Internals,zcbenz,2014-05-09T05:33:39Z,16,8,1,0,"Fixes https://github.com/atom/atom/issues/1838.
",48,True,en,0
273,1,1,0,Externals,weakish,2014-05-08T10:01:51Z,1,1,1,0,,0,False,en,0
267,1,1,0,Externals,kramerc,2014-05-08T01:40:39Z,1,1,1,0,"After spending some time trying to figure out why `did-finish-load` wasn't getting emitted, I figured out that `window.on` should have been `window.webContents.on` in the `WebContents` send example.
",199,True,en,0
266,1,1,0,Externals,dougnukem,2014-05-08T04:22:00Z,5,5,1,0,"If you name your app's folder `app/` and if you run the atom-shell from the directory above that, it will result in an error, which I believe is caused by resolving `require('app')` to your `app/` folder.

So just to avoid confusion where someone might create an app with that folder and run the atom-shell from that directory.

I wrote up some details getting atom-shell working using the grunt plugin.
- https://github.com/atom/atom-shell/issues/256#issuecomment-42464026
",474,True,en,0
264,1,1,0,Externals,NKMR6194,2014-05-07T14:50:42Z,1,1,1,0,,0,False,en,0
263,1,0,0,Externals,Navgeet,2014-05-07T14:51:17Z,1,1,1,0,"fixes https://github.com/atom/apm/issues/93
",44,True,en,0
261,1,1,0,Externals,pborreli,2014-05-07T06:49:40Z,21,21,9,0,,0,False,en,0
258,1,1,0,Externals,commadelimited,2014-05-07T06:04:06Z,51,51,6,0,"After reading through the docs, I noticed some minor issues.
",61,True,en,0
255,1,1,0,Externals,dougnukem,2014-05-07T02:00:11Z,2,2,1,0,,0,False,en,0
252,1,1,0,Externals,CoolOppo,2014-05-06T18:35:52Z,1,1,1,0,"Fixed a small typo
",19,True,en,0
247,2,2,1,Externals,quicksnap,2014-05-06T16:53:58Z,2,2,1,0,,0,False,en,0
246,2,3,0,Externals,Dorian,2014-05-07T00:38:04Z,3,4,1,0,"Duplicate ""client client scripts"" and then a missing pluralization on ""one"".
",77,True,en,0
243,1,5,0,Externals,hughsk,2014-05-06T12:23:45Z,1,1,1,0,"Enabling the `experimental_webgl_enabled` preference allows you to create a WebGL context from within atom-shell.

While not necessarily important for the Atom editor, for others to use atom-shell in substitution for node-webkit this is a potentially useful feature, e.g. for packaged HTML5 games.

Unless there's a reason to have this disabled, it would be nice to have it made available :)

Thanks!
",401,True,en,0
240,7,1,0,Internals,zcbenz,2014-05-05T09:04:14Z,134,46,5,0,"When user opens atom-shell without providing any app, an instruction would be shown to tell user how to open an app with atom-shell, plus an interface to let user to drag a folder to the window to open an app.

![screen shot 2014-05-05 at 4 38 15 pm](https://cloud.githubusercontent.com/assets/639601/2876195/9e2ea6f2-d430-11e3-9090-34f8ad83d26b.png)
",351,True,en,0
239,5,0,0,Internals,zcbenz,2014-05-04T10:32:56Z,247,178,7,0,,0,False,en,0
238,4,3,0,Internals,probablycorey,2014-04-29T02:19:56Z,2,1,1,0,"I've moved the framework files to https://github.com/atom/atom-shell/releases/tag/v0.11.10. It's a little weird, but I think it is a nice public place for them.
",161,True,en,0
237,4,2,0,Internals,zcbenz,2014-04-29T01:59:30Z,10,26,4,0,"Waiting for https://github.com/atom/apm/pull/88 so we won't break Linux support.
",81,True,en,0
235,6,3,0,Internals,zcbenz,2014-05-05T18:19:49Z,431,285,192,10,"- [x] Use MIT license
- [x] A new README
- [x] Update the documentation
- [x] Move framework downloads to a more public location https://github.com/atom/atom-shell/pull/238
",173,False,en,0
234,18,0,0,Internals,zcbenz,2014-04-25T09:41:58Z,589,821,30,0,"Previously all WebContents related APIs and IPC message handling were done by the `NativeWindow`, this PR creates a new `WebContents` API that separate out those things out, making the web page related API and IPC API much more cleaner.
",237,True,en,0
232,2,0,0,Internals,zcbenz,2014-04-24T04:24:39Z,2,2,2,0,"Fixes https://github.com/atom/atom/issues/1893.
",48,True,en,0
231,44,1,0,Internals,zcbenz,2014-04-23T07:32:36Z,2121,3231,90,0,"### What's native-mate

[native-mate](https://github.com/zcbenz/native-mate) is a fork of Chromium's [gin](https://code.google.com/p/chromium/codesearch#chromium/src/gin/README&sq=package:chromium) library that provides helper classes to write C++<->JavaScript bindings.

I forked gin because it was intrusive which resulted in conflicts with node's `Environment`, and atom-shell also needs to create classes in JavaScript which is not supported by gin.
### What do we get

With the help of Chromium's `base` library, native-mate makes writing JS bindings incredibly easy and beautiful. For example, the original shell module's code:

``` c++
// static
void Shell::OpenItem(const v8::FunctionCallbackInfo<v8::Value>& args) {
  base::FilePath file_path;
  if (!FromV8Arguments(args, &file_path))
    return node::ThrowTypeError(""Bad argument"");

  platform_util::OpenItem(file_path);
}

// static
void Shell::Initialize(v8::Handle<v8::Object> target) {
  NODE_SET_METHOD(target, ""openItem"", OpenItem);
}
```

now becomes:

``` c++
void Initialize(v8::Handle<v8::Object> exports) {
  mate::Dictionary dict(v8::Isolate::GetCurrent(), exports);
  dict.SetMethod(""openItem"", &platform_util::OpenItem);
}
```

The native-mate/gin has hidden most details of converting V8 types between C++ types, and did a very good job of deducing function signatures, for most cases, no raw V8 API is needed to implement an API binding.
",1416,True,en,0
225,11,0,0,Internals,zcbenz,2014-04-05T03:30:47Z,319,46,18,0,"Fixes #220.
",12,True,en,0
216,11,0,0,Internals,zcbenz,2014-03-16T07:37:14Z,780,658,222,0,"Currently source code of atom-shell is scattered under the root of repository, this makes the repository a little difficult to get involved, and it also makes atom-shell's header files a little mixed with chromium's headers.

This PR put atom-shell's source code under atom/, and also put source code files modified from Chromium's chrome component under chrome/, making source code structure more clear.
",405,True,en,0
215,3,0,0,Internals,zcbenz,2014-03-15T14:37:23Z,33,9,5,0,"The `accept-first-mouse` option specifies whether the window accepts a single mouse-down event that simultaneously activates the window, fixes #212.
",149,True,en,0
214,10,0,0,Internals,zcbenz,2014-03-15T09:43:59Z,1367,75,16,0,,0,False,en,0
213,11,0,0,Internals,zcbenz,2014-03-13T08:34:19Z,183,13,3,0,,0,False,en,0
211,7,0,0,Internals,zcbenz,2014-03-12T13:37:21Z,227,3,5,0,,0,False,en,0
208,4,3,0,Internals,zcbenz,2014-03-10T15:47:39Z,25,10,4,0,"This PR sets the default sandbox flag to enable all permissions except for `allow-same-origin`, this is nearly the same with normal frames except that the it disables calls like `parent.window.process.exit()` in iframe even if the iframe is in the same origin with the main frame.

It also allows setting `sandbox` to `none` to disable sandbox completely. So if users want to make iframe have access to parent frame, they have to explicitly disable sandbox by either `<iframe sandbox=""none"">` or `<iframe sandbox=""allow-scripts allow-same-origin"">`.

This is implemented by patching Chromium: https://github.com/brightray/libchromiumcontent/blob/atom/patches/webkit_default_sandbox.patch.

Fixes #200.
",702,True,en,0
202,4,0,0,Internals,zcbenz,2014-03-06T04:25:43Z,48,14,4,0,"Fixes #201.
",12,True,en,0
196,5,1,0,Internals,zcbenz,2014-03-04T14:12:26Z,51,14,6,0,"Fixes https://github.com/atom/atom-shell/issues/193.
",53,True,en,0
195,9,0,0,Internals,zcbenz,2014-03-04T12:08:27Z,167,37,6,0,,0,False,en,0
191,3,1,0,Internals,zcbenz,2014-03-03T12:47:03Z,9,5,2,0,"Previous mysterious problem of Windows CI has suddenly gone, try bring Windows CI back.
",88,True,en,0
189,8,0,0,Internals,zcbenz,2014-03-03T11:45:45Z,80,7,6,0,"- [x] Generate debug symbols.
- [x] Make the symbol files contain source code information of atom-shell.
- [x] Build libchromiumcontent with `-g`.
- [x] Strip the final binary after dumping symbols.
",199,False,en,0
188,5,0,0,Internals,zcbenz,2014-03-01T13:32:02Z,70,37,5,0,"Fixes #186.
",12,True,en,0
180,12,0,0,Internals,zcbenz,2014-02-26T14:16:53Z,4569,43,12,0,"Crash reporter now works, but still need to find a way to generate symbols to make crash reports readable.

Now all specs are :green_apple: on Linux.
",150,True,en,0
178,7,0,0,Internals,zcbenz,2014-02-24T05:07:32Z,154,2,8,0,,0,False,en,0
176,7,0,0,Internals,zcbenz,2014-02-17T10:14:14Z,31,6,6,0,"Fixes #175.
",12,True,en,0
173,2,3,0,Internals,probablycorey,2014-02-04T00:58:54Z,10,8,6,0,"Previously this was converting the release name into a date.
",61,True,en,0
172,11,0,0,Internals,zcbenz,2014-01-31T08:52:32Z,197,13,13,0,"`node-integration` can be used to control whether the node integration should be enabled in iframes, fixes #168.
",113,True,en,0
166,3,0,0,Internals,zcbenz,2014-01-27T08:15:22Z,32,40,19,0,"In browser process, because of the use of `v8::Locker` in `ProxyResolverV8`, creating `HandleScope` requires entering `v8::Locker` first, so in browser process we should just use `v8::Locker` whenever we need to use V8 in a callback called from non-V8 places (like dialog's callback, work pushed to `MessageLoop`).

But also notice that the renderer process doesn't use `v8::Locker` at all, so we have to be careful not to use it, otherwise blink would crash when creating `HandleScope`.

Fixes https://github.com/atom/atom/issues/1402.
",537,True,en,0
162,22,25,3,Internals,probablycorey,2014-02-02T12:56:14Z,157,236,12,12,":warning: I have no idea what I'm doing :warning:

I'm trying to implement the Squirrel framework in Atom Shell (based on #160). @zcbenz if I'm doing anything wrong, or if you think you can do this better feel free to jump in!
- [x] Remove code references to Sparkle
- [x] Compile without sparkle
- [x] Add Squirrel as a dependency
- [x] Update `browser/auto_updater_mac.mm` to use the Squirrel API
- [x] Update docs

I also think we can simplify the JS API. Below is just a rough draft.
### Methods

autoUpdater.checkForUpdates() # Async, triggers a `update-available` event or a `no-update-available` event. A callback would be better, but I think we can't do that because of IPC issues.
### Events

`update-available` # contains version and download function
",762,True,en,0
155,3,0,0,Internals,zcbenz,2014-01-10T10:13:08Z,34,9,6,0,"From node v0.11.x, there is changes on how process.nextTick works, previously it only needs the uv loop to run once to execute all the callbacks, but now it requires manually informing the related code to run the callbacks.
",224,True,en,0
154,6,0,0,Internals,zcbenz,2014-01-09T14:28:35Z,96,7,9,0,"Fixes #153.
",12,True,en,0
152,8,0,0,Internals,zcbenz,2014-01-07T12:46:25Z,222,33,18,0,"The screen module provides various info about screen size, displays, cursor position, etc.

Fixes #150.
",104,True,en,0
149,47,1,0,Internals,zcbenz,2014-02-21T09:33:29Z,2456,38,44,51,"- [ ] Crash reporter
- [x] Native window
- [ ] NativeWindow::HasModalDialog
- [x] Frameless window
- [x] Window events
- [ ] Context menu
- [ ] Window menu
- [ ] Native dialog
- [x] Node integration
",199,False,en,1
147,3,0,0,Internals,zcbenz,2013-12-31T02:02:14Z,111,37,2,0,,0,False,en,0
146,6,0,0,Internals,zcbenz,2013-12-27T07:54:19Z,43,28,6,0,"Fixes #145.
",12,True,en,0
144,1,1,0,Externals,shama,2013-12-13T16:44:06Z,3,3,2,0,"Just a couple of minor typos in the docs. Thanks!
",50,True,en,0
140,56,8,0,Internals,zcbenz,2013-12-27T06:07:17Z,1489,1579,128,17,"- [x] Merge brightray patches to master
- [x] Update to latest libchromiumcontent
- [x] Update to node v0.11.x
- [x] Review all our patches for node and make sure node integration still works
- [x] Use new V8 API in atom-shell
- [x] Fix page flashing with devtools opened on Mac
- [x] Make use of node's Environment feature to get rid of our webkit and node hacks
- [x] Clear node environment when window context is freed
- [x] Make sure multiple window contexts in one renderer process works
- [x] Remove the webkit patches in libchromiumcontent
- [ ] Update apm for the new node version
- [x] Make sure all modules used by Atom are node v0.11.x compatible
",658,False,en,0
139,9,0,0,Internals,zcbenz,2013-12-06T13:17:28Z,135,94,21,0,"Previously we release the remote objects of render view when the window is unloaded, which is not correct since a render view can have multiple windows (or js contexts) and when the unload event is emitted the render view could already have gone.

This PR does the cleaning work purely in browser, so here is no need to worry about renderer's life time.
",354,True,en,0
136,12,0,0,Internals,zcbenz,2013-12-05T05:44:35Z,192,17,13,0,"- Use `name` and `version` fields of package.json as application's name and version.
- Custom the user agent to contain application and atom-shell's name and version.

Closes #134. Closes #135
",193,False,en,0
133,5,0,0,Internals,zcbenz,2013-12-04T14:11:38Z,62,22,7,0,"This PR closes #131, along with some improvements on handling unresponsive windows.
",84,True,en,0
130,3,1,0,Internals,zcbenz,2013-11-29T07:42:27Z,35,9,4,0,"Closes #129, closes #62.
",25,True,en,0
128,7,1,0,Internals,zcbenz,2013-11-22T06:52:22Z,121,6,8,0,"Fixes #127.
",12,True,en,0
125,1,2,0,Internals,mcolyer,2013-11-20T14:35:21Z,0,6,1,0,"We no longer what this behavior because it's confusing unless you understand that atom-shell does this.

This looks like the only thing that needs to be changed, but I defer to @zcbenz here.
",191,True,en,0
124,56,3,2,Internals,zcbenz,2013-11-27T07:33:43Z,1959,200,45,14,"**Mac:**
- Minidumps would be uploaded on crash.
- Breakpad symbols are dumped.
- Users can still get the plain text crash report.
- Generate stack trace with full debugging information.

**Windows:**
- Produce minidump files on crash.
- Start a crash service to provide support for out-of-process crash handler.
- Upload minidump files in crash service.
- Generate breakpad symbols.

**TODO**
- <del>Upload application information (application name, version, company, etc).</del>
- <del>Generate libchromiumcontent symbols.</del>
- <del>Fix mangled function names in stack traces on Mac.</del>
",595,False,en,0
122,2,10,0,Externals,paulcbetts,2013-11-05T01:11:53Z,12,0,1,0,"This connects atom.exe to the console STDIO so that we can see the output of the app. It appears that we'll need another fix to get the optparse stuff working though (perhaps it was just removed in Windows? /cc @zcbenz)
",220,True,en,0
110,9,4,0,Internals,zcbenz,2013-10-21T08:53:34Z,140,69,2,0,,0,False,en,0
105,18,0,0,Internals,zcbenz,2013-10-07T00:58:42Z,539,209,21,4,"- [x] Add API to set menu for window.
- [x] Make sure window menu's delegate works.
- [x] Make menu accelerator work for window menu.
- [x] Fix quirks of popup menu.
- [x] Calling menu.setApplicationMenu should set the same menu for all windows.
",246,False,en,0
104,9,0,0,Internals,zcbenz,2013-09-27T03:06:10Z,85,29,14,0,"Run lint for python and coffee scripts in the cibuild.
",55,True,en,0
103,13,7,0,Internals,zcbenz,2013-09-27T01:46:35Z,196,21,6,0,"Future releases of atom-shell will be published to the `Releases` page, instead of uploading to S3.
",100,True,en,0
101,35,0,0,Internals,zcbenz,2013-09-24T23:48:29Z,999,412,38,4,"Currently when receiving a synchronous message from renderer the browser would be completely blocked, so one blocked window can make all other windows blocked.

This PR will make browser deal with synchronous messages asynchronously and turn some GUI APIs into asynchronous style.
",281,True,en,0
100,3,0,0,Internals,zcbenz,2013-09-20T10:49:33Z,26,0,4,0,"The job factory was not created before any request was sent, so when the app used the protocol module on startup it would cause a crash.
",137,True,en,0
93,7,3,0,Internals,zcbenz,2013-09-24T02:08:00Z,165,216,1,5,"- [x] Rewrite ShowSaveDialog with IFileSaveDialog.
- [x] Implement ShowOpenDialog on Windows.
- [ ] <del>Work out how to select both file and folder in the open dialog.</del>
",175,False,en,0
92,1,0,0,Externals,paulcbetts,2013-09-17T20:35:12Z,1,0,1,0,"This was accidentally left out of 8708d061, the PR fixes the build on Windows
",78,True,en,0
91,9,10,0,Externals,orderedlist,2013-09-12T15:43:30Z,242,68,8,0,"In reference to #90, this rounds all 4 corners of the Frameless window for consistency.
",88,True,en,0
85,12,1,0,Internals,zcbenz,2013-09-09T07:24:21Z,568,10,16,3,"OS X:
- [x] Enable creating a window without frame.
- [x] Specify draggable areas.
- [x] Enable resizing window by dragging border.

Windows:
- [x] Enable creating a window without frame.
- [x] Specify draggable areas.
- [x] Enable resizing window by dragging border.
",268,False,en,0
84,4,0,0,Internals,zcbenz,2013-09-05T01:55:21Z,35,8,4,0,"The reason of this can be found in #83.
",40,True,en,0
81,14,5,0,Internals,zcbenz,2013-09-02T05:31:32Z,188,53,7,2,"The native modules specs are making tests fail on Windows, I would like to fix this so the CI would be green when it could run on Windows.
- [x] Create node.lib
- [x] Ship correct headers
- [x] Create correct distribution on Windows
- [x] Upload node.lib and headers
- [ ] <del> Reduce the size of node.lib </del>
",314,False,en,0
79,1,1,0,Externals,paulcbetts,2013-08-30T23:41:25Z,4,1,1,0,"On Windows, the button order is left to right, with the primary action on the left (i.e. ""Ok"" ""Cancel""). On Mac, the button order is that the primary action is nearest to the corner.
",183,True,en,0
71,1,9,0,Externals,paulcbetts,2013-08-29T17:41:39Z,308,119,18,0,"If paragraphs aren't wrapped, it's really hard to see how they change. Let's keep them wrapped at 78 characters, so that our console-based Email program that we're not using can handle them
",190,True,en,0
69,2,0,0,Externals,paulcbetts,2013-08-28T11:29:20Z,2,2,2,0,"## [Compare View](http://github.com/atom/apm/compare/c1416020ea508c9be4cad6e2172836df34fab8a2...d3c7b2e8a2a0ef1f94c472008919ed42f58ba470)
",138,True,en,0
65,40,16,0,Internals,zcbenz,2013-09-04T10:33:09Z,1184,24,25,11,"- [x] API to register custom protocol.
- [x] Allow sending file in custom protocols.
- [x] Allow sending string in custom protocols.
- [ ] <del> API to control the cache of each request. </del>
- [x] API to intercept existing protocol.
- [ ] <del> Provide information of from where the request is made (not sure if it's possible). </del>
",338,False,en,0
58,1,1,0,Externals,paulcbetts,2013-08-20T17:14:06Z,6,1,1,0,,0,False,en,0
56,3,1,0,Internals,probablycorey,2013-08-15T07:04:30Z,1344,0,21,0,"Moves all wiki documents to a `docs` folder.

**I've already deleted the wiki so this branch doesn't become outdated.**
",120,True,en,0
29,19,0,0,Internals,zcbenz,2013-06-25T01:18:32Z,678,407,29,5,"- [x] Rewrite scripts in python
- [x] Make atom-shell built with ninja
",71,False,en,0
